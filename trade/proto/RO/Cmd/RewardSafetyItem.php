<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: RecordCmd.proto

namespace RO\Cmd {

  class RewardSafetyItem extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $id = 0;
    
    /**  @var int */
    public $expiretime = 0;
    
    /**  @var int */
    public $rollcount = 0;
    
    /**  @var int */
    public $rewardcount = 0;
    
    /**  @var int */
    public $nextsafetycount = 0;
    
    /**  @var int */
    public $version = 0;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.RewardSafetyItem');

      // OPTIONAL UINT32 id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 expiretime = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "expiretime";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 rollcount = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "rollcount";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 rewardcount = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "rewardcount";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 nextsafetycount = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "nextsafetycount";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 version = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "version";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \RO\Cmd\RewardSafetyItem
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param int $value
     * @return \RO\Cmd\RewardSafetyItem
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <expiretime> has a value
     *
     * @return boolean
     */
    public function hasExpiretime(){
      return $this->_has(2);
    }
    
    /**
     * Clear <expiretime> value
     *
     * @return \RO\Cmd\RewardSafetyItem
     */
    public function clearExpiretime(){
      return $this->_clear(2);
    }
    
    /**
     * Get <expiretime> value
     *
     * @return int
     */
    public function getExpiretime(){
      return $this->_get(2);
    }
    
    /**
     * Set <expiretime> value
     *
     * @param int $value
     * @return \RO\Cmd\RewardSafetyItem
     */
    public function setExpiretime( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <rollcount> has a value
     *
     * @return boolean
     */
    public function hasRollcount(){
      return $this->_has(3);
    }
    
    /**
     * Clear <rollcount> value
     *
     * @return \RO\Cmd\RewardSafetyItem
     */
    public function clearRollcount(){
      return $this->_clear(3);
    }
    
    /**
     * Get <rollcount> value
     *
     * @return int
     */
    public function getRollcount(){
      return $this->_get(3);
    }
    
    /**
     * Set <rollcount> value
     *
     * @param int $value
     * @return \RO\Cmd\RewardSafetyItem
     */
    public function setRollcount( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <rewardcount> has a value
     *
     * @return boolean
     */
    public function hasRewardcount(){
      return $this->_has(4);
    }
    
    /**
     * Clear <rewardcount> value
     *
     * @return \RO\Cmd\RewardSafetyItem
     */
    public function clearRewardcount(){
      return $this->_clear(4);
    }
    
    /**
     * Get <rewardcount> value
     *
     * @return int
     */
    public function getRewardcount(){
      return $this->_get(4);
    }
    
    /**
     * Set <rewardcount> value
     *
     * @param int $value
     * @return \RO\Cmd\RewardSafetyItem
     */
    public function setRewardcount( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <nextsafetycount> has a value
     *
     * @return boolean
     */
    public function hasNextsafetycount(){
      return $this->_has(5);
    }
    
    /**
     * Clear <nextsafetycount> value
     *
     * @return \RO\Cmd\RewardSafetyItem
     */
    public function clearNextsafetycount(){
      return $this->_clear(5);
    }
    
    /**
     * Get <nextsafetycount> value
     *
     * @return int
     */
    public function getNextsafetycount(){
      return $this->_get(5);
    }
    
    /**
     * Set <nextsafetycount> value
     *
     * @param int $value
     * @return \RO\Cmd\RewardSafetyItem
     */
    public function setNextsafetycount( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <version> has a value
     *
     * @return boolean
     */
    public function hasVersion(){
      return $this->_has(6);
    }
    
    /**
     * Clear <version> value
     *
     * @return \RO\Cmd\RewardSafetyItem
     */
    public function clearVersion(){
      return $this->_clear(6);
    }
    
    /**
     * Get <version> value
     *
     * @return int
     */
    public function getVersion(){
      return $this->_get(6);
    }
    
    /**
     * Set <version> value
     *
     * @param int $value
     * @return \RO\Cmd\RewardSafetyItem
     */
    public function setVersion( $value){
      return $this->_set(6, $value);
    }
  }
}

