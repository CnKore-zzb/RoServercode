<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: ChatCmd.proto

namespace RO\Cmd {

  class ColorInfo extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $r = 255;
    
    /**  @var int */
    public $g = 255;
    
    /**  @var int */
    public $b = 255;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.ColorInfo');

      // OPTIONAL UINT32 r = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "r";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 255;
      $descriptor->addField($f);

      // OPTIONAL UINT32 g = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "g";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 255;
      $descriptor->addField($f);

      // OPTIONAL UINT32 b = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "b";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 255;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <r> has a value
     *
     * @return boolean
     */
    public function hasR(){
      return $this->_has(1);
    }
    
    /**
     * Clear <r> value
     *
     * @return \RO\Cmd\ColorInfo
     */
    public function clearR(){
      return $this->_clear(1);
    }
    
    /**
     * Get <r> value
     *
     * @return int
     */
    public function getR(){
      return $this->_get(1);
    }
    
    /**
     * Set <r> value
     *
     * @param int $value
     * @return \RO\Cmd\ColorInfo
     */
    public function setR( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <g> has a value
     *
     * @return boolean
     */
    public function hasG(){
      return $this->_has(2);
    }
    
    /**
     * Clear <g> value
     *
     * @return \RO\Cmd\ColorInfo
     */
    public function clearG(){
      return $this->_clear(2);
    }
    
    /**
     * Get <g> value
     *
     * @return int
     */
    public function getG(){
      return $this->_get(2);
    }
    
    /**
     * Set <g> value
     *
     * @param int $value
     * @return \RO\Cmd\ColorInfo
     */
    public function setG( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <b> has a value
     *
     * @return boolean
     */
    public function hasB(){
      return $this->_has(3);
    }
    
    /**
     * Clear <b> value
     *
     * @return \RO\Cmd\ColorInfo
     */
    public function clearB(){
      return $this->_clear(3);
    }
    
    /**
     * Get <b> value
     *
     * @return int
     */
    public function getB(){
      return $this->_get(3);
    }
    
    /**
     * Set <b> value
     *
     * @param int $value
     * @return \RO\Cmd\ColorInfo
     */
    public function setB( $value){
      return $this->_set(3, $value);
    }
  }
}

