<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: SceneManual.proto

namespace RO\Cmd {

  class ManualSubItem extends \DrSlump\Protobuf\Message {

    /**  @var int - \RO\Cmd\EManualStatus */
    public $status = \RO\Cmd\EManualStatus::EMANUALSTATUS_MIN;
    
    /**  @var int */
    public $id = 0;
    
    /**  @var boolean */
    public $unlock = false;
    
    /**  @var \RO\Cmd\ManualQuest[]  */
    public $quests = array();
    
    /**  @var boolean */
    public $store = null;
    
    /**  @var int[]  */
    public $params = array();
    
    /**  @var string[]  */
    public $data_params = array();
    
    /**  @var int */
    public $storeid = 0;
    
    /**  @var \RO\Cmd\ItemData */
    public $item = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.ManualSubItem');

      // OPTIONAL ENUM status = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\EManualStatus';
      $f->default   = \RO\Cmd\EManualStatus::EMANUALSTATUS_MIN;
      $descriptor->addField($f);

      // OPTIONAL UINT32 id = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL BOOL unlock = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "unlock";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = false;
      $descriptor->addField($f);

      // REPEATED MESSAGE quests = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "quests";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\ManualQuest';
      $descriptor->addField($f);

      // OPTIONAL BOOL store = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "store";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED UINT32 params = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "params";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED STRING data_params = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "data_params";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL UINT32 storeid = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "storeid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE item = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "item";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\ItemData';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(1);
    }
    
    /**
     * Clear <status> value
     *
     * @return \RO\Cmd\ManualSubItem
     */
    public function clearStatus(){
      return $this->_clear(1);
    }
    
    /**
     * Get <status> value
     *
     * @return int - \RO\Cmd\EManualStatus
     */
    public function getStatus(){
      return $this->_get(1);
    }
    
    /**
     * Set <status> value
     *
     * @param int - \RO\Cmd\EManualStatus $value
     * @return \RO\Cmd\ManualSubItem
     */
    public function setStatus( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <id> value
     *
     * @return \RO\Cmd\ManualSubItem
     */
    public function clearId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(2);
    }
    
    /**
     * Set <id> value
     *
     * @param int $value
     * @return \RO\Cmd\ManualSubItem
     */
    public function setId( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <unlock> has a value
     *
     * @return boolean
     */
    public function hasUnlock(){
      return $this->_has(3);
    }
    
    /**
     * Clear <unlock> value
     *
     * @return \RO\Cmd\ManualSubItem
     */
    public function clearUnlock(){
      return $this->_clear(3);
    }
    
    /**
     * Get <unlock> value
     *
     * @return boolean
     */
    public function getUnlock(){
      return $this->_get(3);
    }
    
    /**
     * Set <unlock> value
     *
     * @param boolean $value
     * @return \RO\Cmd\ManualSubItem
     */
    public function setUnlock( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <quests> has a value
     *
     * @return boolean
     */
    public function hasQuests(){
      return $this->_has(4);
    }
    
    /**
     * Clear <quests> value
     *
     * @return \RO\Cmd\ManualSubItem
     */
    public function clearQuests(){
      return $this->_clear(4);
    }
    
    /**
     * Get <quests> value
     *
     * @param int $idx
     * @return \RO\Cmd\ManualQuest
     */
    public function getQuests($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <quests> value
     *
     * @param \RO\Cmd\ManualQuest $value
     * @return \RO\Cmd\ManualSubItem
     */
    public function setQuests(\RO\Cmd\ManualQuest $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <quests>
     *
     * @return \RO\Cmd\ManualQuest[]
     */
    public function getQuestsList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <quests>
     *
     * @param \RO\Cmd\ManualQuest $value
     * @return \RO\Cmd\ManualSubItem
     */
    public function addQuests(\RO\Cmd\ManualQuest $value){
     return $this->_add(4, $value);
    }
    
    /**
     * Check if <store> has a value
     *
     * @return boolean
     */
    public function hasStore(){
      return $this->_has(5);
    }
    
    /**
     * Clear <store> value
     *
     * @return \RO\Cmd\ManualSubItem
     */
    public function clearStore(){
      return $this->_clear(5);
    }
    
    /**
     * Get <store> value
     *
     * @return boolean
     */
    public function getStore(){
      return $this->_get(5);
    }
    
    /**
     * Set <store> value
     *
     * @param boolean $value
     * @return \RO\Cmd\ManualSubItem
     */
    public function setStore( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <params> has a value
     *
     * @return boolean
     */
    public function hasParams(){
      return $this->_has(6);
    }
    
    /**
     * Clear <params> value
     *
     * @return \RO\Cmd\ManualSubItem
     */
    public function clearParams(){
      return $this->_clear(6);
    }
    
    /**
     * Get <params> value
     *
     * @param int $idx
     * @return int
     */
    public function getParams($idx = NULL){
      return $this->_get(6, $idx);
    }
    
    /**
     * Set <params> value
     *
     * @param int $value
     * @return \RO\Cmd\ManualSubItem
     */
    public function setParams( $value, $idx = NULL){
      return $this->_set(6, $value, $idx);
    }
    
    /**
     * Get all elements of <params>
     *
     * @return int[]
     */
    public function getParamsList(){
     return $this->_get(6);
    }
    
    /**
     * Add a new element to <params>
     *
     * @param int $value
     * @return \RO\Cmd\ManualSubItem
     */
    public function addParams( $value){
     return $this->_add(6, $value);
    }
    
    /**
     * Check if <data_params> has a value
     *
     * @return boolean
     */
    public function hasDataParams(){
      return $this->_has(7);
    }
    
    /**
     * Clear <data_params> value
     *
     * @return \RO\Cmd\ManualSubItem
     */
    public function clearDataParams(){
      return $this->_clear(7);
    }
    
    /**
     * Get <data_params> value
     *
     * @param int $idx
     * @return string
     */
    public function getDataParams($idx = NULL){
      return $this->_get(7, $idx);
    }
    
    /**
     * Set <data_params> value
     *
     * @param string $value
     * @return \RO\Cmd\ManualSubItem
     */
    public function setDataParams( $value, $idx = NULL){
      return $this->_set(7, $value, $idx);
    }
    
    /**
     * Get all elements of <data_params>
     *
     * @return string[]
     */
    public function getDataParamsList(){
     return $this->_get(7);
    }
    
    /**
     * Add a new element to <data_params>
     *
     * @param string $value
     * @return \RO\Cmd\ManualSubItem
     */
    public function addDataParams( $value){
     return $this->_add(7, $value);
    }
    
    /**
     * Check if <storeid> has a value
     *
     * @return boolean
     */
    public function hasStoreid(){
      return $this->_has(8);
    }
    
    /**
     * Clear <storeid> value
     *
     * @return \RO\Cmd\ManualSubItem
     */
    public function clearStoreid(){
      return $this->_clear(8);
    }
    
    /**
     * Get <storeid> value
     *
     * @return int
     */
    public function getStoreid(){
      return $this->_get(8);
    }
    
    /**
     * Set <storeid> value
     *
     * @param int $value
     * @return \RO\Cmd\ManualSubItem
     */
    public function setStoreid( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <item> has a value
     *
     * @return boolean
     */
    public function hasItem(){
      return $this->_has(9);
    }
    
    /**
     * Clear <item> value
     *
     * @return \RO\Cmd\ManualSubItem
     */
    public function clearItem(){
      return $this->_clear(9);
    }
    
    /**
     * Get <item> value
     *
     * @return \RO\Cmd\ItemData
     */
    public function getItem(){
      return $this->_get(9);
    }
    
    /**
     * Set <item> value
     *
     * @param \RO\Cmd\ItemData $value
     * @return \RO\Cmd\ManualSubItem
     */
    public function setItem(\RO\Cmd\ItemData $value){
      return $this->_set(9, $value);
    }
  }
}

