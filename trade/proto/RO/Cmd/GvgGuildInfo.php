<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: FuBenCmd.proto

namespace RO\Cmd {

  class GvgGuildInfo extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $index = null;
    
    /**  @var int */
    public $guildid = null;
    
    /**  @var string */
    public $guildname = null;
    
    /**  @var string */
    public $icon = null;
    
    /**  @var boolean */
    public $metal_live = false;
    
    /**  @var \RO\Cmd\GvgCrystalInfo */
    public $crystal = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.GvgGuildInfo');

      // OPTIONAL UINT32 index = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "index";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT64 guildid = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "guildid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING guildname = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "guildname";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING icon = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "icon";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL metal_live = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "metal_live";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = false;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE crystal = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "crystal";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\GvgCrystalInfo';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <index> has a value
     *
     * @return boolean
     */
    public function hasIndex(){
      return $this->_has(1);
    }
    
    /**
     * Clear <index> value
     *
     * @return \RO\Cmd\GvgGuildInfo
     */
    public function clearIndex(){
      return $this->_clear(1);
    }
    
    /**
     * Get <index> value
     *
     * @return int
     */
    public function getIndex(){
      return $this->_get(1);
    }
    
    /**
     * Set <index> value
     *
     * @param int $value
     * @return \RO\Cmd\GvgGuildInfo
     */
    public function setIndex( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <guildid> has a value
     *
     * @return boolean
     */
    public function hasGuildid(){
      return $this->_has(2);
    }
    
    /**
     * Clear <guildid> value
     *
     * @return \RO\Cmd\GvgGuildInfo
     */
    public function clearGuildid(){
      return $this->_clear(2);
    }
    
    /**
     * Get <guildid> value
     *
     * @return int
     */
    public function getGuildid(){
      return $this->_get(2);
    }
    
    /**
     * Set <guildid> value
     *
     * @param int $value
     * @return \RO\Cmd\GvgGuildInfo
     */
    public function setGuildid( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <guildname> has a value
     *
     * @return boolean
     */
    public function hasGuildname(){
      return $this->_has(3);
    }
    
    /**
     * Clear <guildname> value
     *
     * @return \RO\Cmd\GvgGuildInfo
     */
    public function clearGuildname(){
      return $this->_clear(3);
    }
    
    /**
     * Get <guildname> value
     *
     * @return string
     */
    public function getGuildname(){
      return $this->_get(3);
    }
    
    /**
     * Set <guildname> value
     *
     * @param string $value
     * @return \RO\Cmd\GvgGuildInfo
     */
    public function setGuildname( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <icon> has a value
     *
     * @return boolean
     */
    public function hasIcon(){
      return $this->_has(4);
    }
    
    /**
     * Clear <icon> value
     *
     * @return \RO\Cmd\GvgGuildInfo
     */
    public function clearIcon(){
      return $this->_clear(4);
    }
    
    /**
     * Get <icon> value
     *
     * @return string
     */
    public function getIcon(){
      return $this->_get(4);
    }
    
    /**
     * Set <icon> value
     *
     * @param string $value
     * @return \RO\Cmd\GvgGuildInfo
     */
    public function setIcon( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <metal_live> has a value
     *
     * @return boolean
     */
    public function hasMetalLive(){
      return $this->_has(5);
    }
    
    /**
     * Clear <metal_live> value
     *
     * @return \RO\Cmd\GvgGuildInfo
     */
    public function clearMetalLive(){
      return $this->_clear(5);
    }
    
    /**
     * Get <metal_live> value
     *
     * @return boolean
     */
    public function getMetalLive(){
      return $this->_get(5);
    }
    
    /**
     * Set <metal_live> value
     *
     * @param boolean $value
     * @return \RO\Cmd\GvgGuildInfo
     */
    public function setMetalLive( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <crystal> has a value
     *
     * @return boolean
     */
    public function hasCrystal(){
      return $this->_has(6);
    }
    
    /**
     * Clear <crystal> value
     *
     * @return \RO\Cmd\GvgGuildInfo
     */
    public function clearCrystal(){
      return $this->_clear(6);
    }
    
    /**
     * Get <crystal> value
     *
     * @return \RO\Cmd\GvgCrystalInfo
     */
    public function getCrystal(){
      return $this->_get(6);
    }
    
    /**
     * Set <crystal> value
     *
     * @param \RO\Cmd\GvgCrystalInfo $value
     * @return \RO\Cmd\GvgGuildInfo
     */
    public function setCrystal(\RO\Cmd\GvgCrystalInfo $value){
      return $this->_set(6, $value);
    }
  }
}

