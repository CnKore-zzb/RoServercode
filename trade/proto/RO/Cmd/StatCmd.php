<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: StatCmd.proto

namespace RO\Cmd {

  class StatCmd extends \DrSlump\Protobuf\Message {

    /**  @var int - \RO\Cmd\Command */
    public $cmd = \RO\Cmd\Command::STAT_PROTOCMD;
    
    /**  @var int - \RO\Cmd\StatParam */
    public $param = \RO\Cmd\StatParam::STAT_CMD;
    
    /**  @var int */
    public $type = null;
    
    /**  @var int */
    public $key = null;
    
    /**  @var int */
    public $subkey = null;
    
    /**  @var int */
    public $subkey2 = 0;
    
    /**  @var int */
    public $level = null;
    
    /**  @var int */
    public $value1 = null;
    
    /**  @var int */
    public $value2 = null;
    
    /**  @var boolean */
    public $isfloat = false;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.StatCmd');

      // OPTIONAL ENUM cmd = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "cmd";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\Command';
      $f->default   = \RO\Cmd\Command::STAT_PROTOCMD;
      $descriptor->addField($f);

      // OPTIONAL ENUM param = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "param";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\StatParam';
      $f->default   = \RO\Cmd\StatParam::STAT_CMD;
      $descriptor->addField($f);

      // OPTIONAL UINT32 type = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT64 key = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT64 subkey = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "subkey";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT64 subkey2 = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "subkey2";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 level = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "level";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT64 value1 = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "value1";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT64 value2 = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "value2";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL isfloat = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "isfloat";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = false;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <cmd> has a value
     *
     * @return boolean
     */
    public function hasCmd(){
      return $this->_has(1);
    }
    
    /**
     * Clear <cmd> value
     *
     * @return \RO\Cmd\StatCmd
     */
    public function clearCmd(){
      return $this->_clear(1);
    }
    
    /**
     * Get <cmd> value
     *
     * @return int - \RO\Cmd\Command
     */
    public function getCmd(){
      return $this->_get(1);
    }
    
    /**
     * Set <cmd> value
     *
     * @param int - \RO\Cmd\Command $value
     * @return \RO\Cmd\StatCmd
     */
    public function setCmd( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <param> has a value
     *
     * @return boolean
     */
    public function hasParam(){
      return $this->_has(2);
    }
    
    /**
     * Clear <param> value
     *
     * @return \RO\Cmd\StatCmd
     */
    public function clearParam(){
      return $this->_clear(2);
    }
    
    /**
     * Get <param> value
     *
     * @return int - \RO\Cmd\StatParam
     */
    public function getParam(){
      return $this->_get(2);
    }
    
    /**
     * Set <param> value
     *
     * @param int - \RO\Cmd\StatParam $value
     * @return \RO\Cmd\StatCmd
     */
    public function setParam( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(3);
    }
    
    /**
     * Clear <type> value
     *
     * @return \RO\Cmd\StatCmd
     */
    public function clearType(){
      return $this->_clear(3);
    }
    
    /**
     * Get <type> value
     *
     * @return int
     */
    public function getType(){
      return $this->_get(3);
    }
    
    /**
     * Set <type> value
     *
     * @param int $value
     * @return \RO\Cmd\StatCmd
     */
    public function setType( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(4);
    }
    
    /**
     * Clear <key> value
     *
     * @return \RO\Cmd\StatCmd
     */
    public function clearKey(){
      return $this->_clear(4);
    }
    
    /**
     * Get <key> value
     *
     * @return int
     */
    public function getKey(){
      return $this->_get(4);
    }
    
    /**
     * Set <key> value
     *
     * @param int $value
     * @return \RO\Cmd\StatCmd
     */
    public function setKey( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <subkey> has a value
     *
     * @return boolean
     */
    public function hasSubkey(){
      return $this->_has(5);
    }
    
    /**
     * Clear <subkey> value
     *
     * @return \RO\Cmd\StatCmd
     */
    public function clearSubkey(){
      return $this->_clear(5);
    }
    
    /**
     * Get <subkey> value
     *
     * @return int
     */
    public function getSubkey(){
      return $this->_get(5);
    }
    
    /**
     * Set <subkey> value
     *
     * @param int $value
     * @return \RO\Cmd\StatCmd
     */
    public function setSubkey( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <subkey2> has a value
     *
     * @return boolean
     */
    public function hasSubkey2(){
      return $this->_has(6);
    }
    
    /**
     * Clear <subkey2> value
     *
     * @return \RO\Cmd\StatCmd
     */
    public function clearSubkey2(){
      return $this->_clear(6);
    }
    
    /**
     * Get <subkey2> value
     *
     * @return int
     */
    public function getSubkey2(){
      return $this->_get(6);
    }
    
    /**
     * Set <subkey2> value
     *
     * @param int $value
     * @return \RO\Cmd\StatCmd
     */
    public function setSubkey2( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <level> has a value
     *
     * @return boolean
     */
    public function hasLevel(){
      return $this->_has(7);
    }
    
    /**
     * Clear <level> value
     *
     * @return \RO\Cmd\StatCmd
     */
    public function clearLevel(){
      return $this->_clear(7);
    }
    
    /**
     * Get <level> value
     *
     * @return int
     */
    public function getLevel(){
      return $this->_get(7);
    }
    
    /**
     * Set <level> value
     *
     * @param int $value
     * @return \RO\Cmd\StatCmd
     */
    public function setLevel( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <value1> has a value
     *
     * @return boolean
     */
    public function hasValue1(){
      return $this->_has(8);
    }
    
    /**
     * Clear <value1> value
     *
     * @return \RO\Cmd\StatCmd
     */
    public function clearValue1(){
      return $this->_clear(8);
    }
    
    /**
     * Get <value1> value
     *
     * @return int
     */
    public function getValue1(){
      return $this->_get(8);
    }
    
    /**
     * Set <value1> value
     *
     * @param int $value
     * @return \RO\Cmd\StatCmd
     */
    public function setValue1( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <value2> has a value
     *
     * @return boolean
     */
    public function hasValue2(){
      return $this->_has(9);
    }
    
    /**
     * Clear <value2> value
     *
     * @return \RO\Cmd\StatCmd
     */
    public function clearValue2(){
      return $this->_clear(9);
    }
    
    /**
     * Get <value2> value
     *
     * @return int
     */
    public function getValue2(){
      return $this->_get(9);
    }
    
    /**
     * Set <value2> value
     *
     * @param int $value
     * @return \RO\Cmd\StatCmd
     */
    public function setValue2( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <isfloat> has a value
     *
     * @return boolean
     */
    public function hasIsfloat(){
      return $this->_has(11);
    }
    
    /**
     * Clear <isfloat> value
     *
     * @return \RO\Cmd\StatCmd
     */
    public function clearIsfloat(){
      return $this->_clear(11);
    }
    
    /**
     * Get <isfloat> value
     *
     * @return boolean
     */
    public function getIsfloat(){
      return $this->_get(11);
    }
    
    /**
     * Set <isfloat> value
     *
     * @param boolean $value
     * @return \RO\Cmd\StatCmd
     */
    public function setIsfloat( $value){
      return $this->_set(11, $value);
    }
  }
}

