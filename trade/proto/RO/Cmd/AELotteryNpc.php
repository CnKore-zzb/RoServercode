<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: ActivityEvent.proto

namespace RO\Cmd {

  class AELotteryNpc extends \DrSlump\Protobuf\Message {

    /**  @var int - \RO\Cmd\ELotteryType */
    public $lotterytype = null;
    
    /**  @var \RO\Cmd\AEMap[]  */
    public $map = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.AELotteryNpc');

      // OPTIONAL ENUM lotterytype = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "lotterytype";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\ELotteryType';
      $descriptor->addField($f);

      // REPEATED MESSAGE map = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "map";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\AEMap';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <lotterytype> has a value
     *
     * @return boolean
     */
    public function hasLotterytype(){
      return $this->_has(1);
    }
    
    /**
     * Clear <lotterytype> value
     *
     * @return \RO\Cmd\AELotteryNpc
     */
    public function clearLotterytype(){
      return $this->_clear(1);
    }
    
    /**
     * Get <lotterytype> value
     *
     * @return int - \RO\Cmd\ELotteryType
     */
    public function getLotterytype(){
      return $this->_get(1);
    }
    
    /**
     * Set <lotterytype> value
     *
     * @param int - \RO\Cmd\ELotteryType $value
     * @return \RO\Cmd\AELotteryNpc
     */
    public function setLotterytype( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <map> has a value
     *
     * @return boolean
     */
    public function hasMap(){
      return $this->_has(2);
    }
    
    /**
     * Clear <map> value
     *
     * @return \RO\Cmd\AELotteryNpc
     */
    public function clearMap(){
      return $this->_clear(2);
    }
    
    /**
     * Get <map> value
     *
     * @param int $idx
     * @return \RO\Cmd\AEMap
     */
    public function getMap($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <map> value
     *
     * @param \RO\Cmd\AEMap $value
     * @return \RO\Cmd\AELotteryNpc
     */
    public function setMap(\RO\Cmd\AEMap $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <map>
     *
     * @return \RO\Cmd\AEMap[]
     */
    public function getMapList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <map>
     *
     * @param \RO\Cmd\AEMap $value
     * @return \RO\Cmd\AELotteryNpc
     */
    public function addMap(\RO\Cmd\AEMap $value){
     return $this->_add(2, $value);
    }
  }
}

