<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: SceneMap.proto

namespace RO\Cmd {

  class CarrierInfo extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $id = null;
    
    /**  @var int */
    public $masterid = null;
    
    /**  @var int */
    public $index = null;
    
    /**  @var int */
    public $progress = null;
    
    /**  @var int */
    public $line = null;
    
    /**  @var int */
    public $assemble = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.CarrierInfo');

      // OPTIONAL UINT32 id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT64 masterid = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "masterid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 index = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "index";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 progress = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "progress";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 line = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "line";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 assemble = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "assemble";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \RO\Cmd\CarrierInfo
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param int $value
     * @return \RO\Cmd\CarrierInfo
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <masterid> has a value
     *
     * @return boolean
     */
    public function hasMasterid(){
      return $this->_has(2);
    }
    
    /**
     * Clear <masterid> value
     *
     * @return \RO\Cmd\CarrierInfo
     */
    public function clearMasterid(){
      return $this->_clear(2);
    }
    
    /**
     * Get <masterid> value
     *
     * @return int
     */
    public function getMasterid(){
      return $this->_get(2);
    }
    
    /**
     * Set <masterid> value
     *
     * @param int $value
     * @return \RO\Cmd\CarrierInfo
     */
    public function setMasterid( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <index> has a value
     *
     * @return boolean
     */
    public function hasIndex(){
      return $this->_has(3);
    }
    
    /**
     * Clear <index> value
     *
     * @return \RO\Cmd\CarrierInfo
     */
    public function clearIndex(){
      return $this->_clear(3);
    }
    
    /**
     * Get <index> value
     *
     * @return int
     */
    public function getIndex(){
      return $this->_get(3);
    }
    
    /**
     * Set <index> value
     *
     * @param int $value
     * @return \RO\Cmd\CarrierInfo
     */
    public function setIndex( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <progress> has a value
     *
     * @return boolean
     */
    public function hasProgress(){
      return $this->_has(4);
    }
    
    /**
     * Clear <progress> value
     *
     * @return \RO\Cmd\CarrierInfo
     */
    public function clearProgress(){
      return $this->_clear(4);
    }
    
    /**
     * Get <progress> value
     *
     * @return int
     */
    public function getProgress(){
      return $this->_get(4);
    }
    
    /**
     * Set <progress> value
     *
     * @param int $value
     * @return \RO\Cmd\CarrierInfo
     */
    public function setProgress( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <line> has a value
     *
     * @return boolean
     */
    public function hasLine(){
      return $this->_has(5);
    }
    
    /**
     * Clear <line> value
     *
     * @return \RO\Cmd\CarrierInfo
     */
    public function clearLine(){
      return $this->_clear(5);
    }
    
    /**
     * Get <line> value
     *
     * @return int
     */
    public function getLine(){
      return $this->_get(5);
    }
    
    /**
     * Set <line> value
     *
     * @param int $value
     * @return \RO\Cmd\CarrierInfo
     */
    public function setLine( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <assemble> has a value
     *
     * @return boolean
     */
    public function hasAssemble(){
      return $this->_has(6);
    }
    
    /**
     * Clear <assemble> value
     *
     * @return \RO\Cmd\CarrierInfo
     */
    public function clearAssemble(){
      return $this->_clear(6);
    }
    
    /**
     * Get <assemble> value
     *
     * @return int
     */
    public function getAssemble(){
      return $this->_get(6);
    }
    
    /**
     * Set <assemble> value
     *
     * @param int $value
     * @return \RO\Cmd\CarrierInfo
     */
    public function setAssemble( $value){
      return $this->_set(6, $value);
    }
  }
}

