<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: RecordTrade.proto

namespace RO\Cmd {

  class GiveTradeCmd extends \DrSlump\Protobuf\Message {

    /**  @var int - \RO\Cmd\Command */
    public $cmd = \RO\Cmd\Command::RECORD_USER_TRADE_PROTOCMD;
    
    /**  @var int - \RO\Cmd\RecordUserTradeParam */
    public $param = \RO\Cmd\RecordUserTradeParam::GIVE_TRADE_PARAM;
    
    /**  @var int */
    public $id = null;
    
    /**  @var int - \RO\Cmd\EOperType */
    public $logtype = null;
    
    /**  @var int */
    public $friendid = null;
    
    /**  @var string */
    public $content = null;
    
    /**  @var boolean */
    public $anonymous = null;
    
    /**  @var int */
    public $background = null;
    
    /**  @var boolean */
    public $success = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.GiveTradeCmd');

      // OPTIONAL ENUM cmd = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "cmd";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\Command';
      $f->default   = \RO\Cmd\Command::RECORD_USER_TRADE_PROTOCMD;
      $descriptor->addField($f);

      // OPTIONAL ENUM param = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "param";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\RecordUserTradeParam';
      $f->default   = \RO\Cmd\RecordUserTradeParam::GIVE_TRADE_PARAM;
      $descriptor->addField($f);

      // OPTIONAL UINT64 id = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM logtype = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "logtype";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\EOperType';
      $descriptor->addField($f);

      // OPTIONAL UINT64 friendid = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "friendid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING content = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "content";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL anonymous = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "anonymous";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 background = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "background";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL success = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "success";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <cmd> has a value
     *
     * @return boolean
     */
    public function hasCmd(){
      return $this->_has(1);
    }
    
    /**
     * Clear <cmd> value
     *
     * @return \RO\Cmd\GiveTradeCmd
     */
    public function clearCmd(){
      return $this->_clear(1);
    }
    
    /**
     * Get <cmd> value
     *
     * @return int - \RO\Cmd\Command
     */
    public function getCmd(){
      return $this->_get(1);
    }
    
    /**
     * Set <cmd> value
     *
     * @param int - \RO\Cmd\Command $value
     * @return \RO\Cmd\GiveTradeCmd
     */
    public function setCmd( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <param> has a value
     *
     * @return boolean
     */
    public function hasParam(){
      return $this->_has(2);
    }
    
    /**
     * Clear <param> value
     *
     * @return \RO\Cmd\GiveTradeCmd
     */
    public function clearParam(){
      return $this->_clear(2);
    }
    
    /**
     * Get <param> value
     *
     * @return int - \RO\Cmd\RecordUserTradeParam
     */
    public function getParam(){
      return $this->_get(2);
    }
    
    /**
     * Set <param> value
     *
     * @param int - \RO\Cmd\RecordUserTradeParam $value
     * @return \RO\Cmd\GiveTradeCmd
     */
    public function setParam( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(3);
    }
    
    /**
     * Clear <id> value
     *
     * @return \RO\Cmd\GiveTradeCmd
     */
    public function clearId(){
      return $this->_clear(3);
    }
    
    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(3);
    }
    
    /**
     * Set <id> value
     *
     * @param int $value
     * @return \RO\Cmd\GiveTradeCmd
     */
    public function setId( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <logtype> has a value
     *
     * @return boolean
     */
    public function hasLogtype(){
      return $this->_has(4);
    }
    
    /**
     * Clear <logtype> value
     *
     * @return \RO\Cmd\GiveTradeCmd
     */
    public function clearLogtype(){
      return $this->_clear(4);
    }
    
    /**
     * Get <logtype> value
     *
     * @return int - \RO\Cmd\EOperType
     */
    public function getLogtype(){
      return $this->_get(4);
    }
    
    /**
     * Set <logtype> value
     *
     * @param int - \RO\Cmd\EOperType $value
     * @return \RO\Cmd\GiveTradeCmd
     */
    public function setLogtype( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <friendid> has a value
     *
     * @return boolean
     */
    public function hasFriendid(){
      return $this->_has(5);
    }
    
    /**
     * Clear <friendid> value
     *
     * @return \RO\Cmd\GiveTradeCmd
     */
    public function clearFriendid(){
      return $this->_clear(5);
    }
    
    /**
     * Get <friendid> value
     *
     * @return int
     */
    public function getFriendid(){
      return $this->_get(5);
    }
    
    /**
     * Set <friendid> value
     *
     * @param int $value
     * @return \RO\Cmd\GiveTradeCmd
     */
    public function setFriendid( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <content> has a value
     *
     * @return boolean
     */
    public function hasContent(){
      return $this->_has(6);
    }
    
    /**
     * Clear <content> value
     *
     * @return \RO\Cmd\GiveTradeCmd
     */
    public function clearContent(){
      return $this->_clear(6);
    }
    
    /**
     * Get <content> value
     *
     * @return string
     */
    public function getContent(){
      return $this->_get(6);
    }
    
    /**
     * Set <content> value
     *
     * @param string $value
     * @return \RO\Cmd\GiveTradeCmd
     */
    public function setContent( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <anonymous> has a value
     *
     * @return boolean
     */
    public function hasAnonymous(){
      return $this->_has(7);
    }
    
    /**
     * Clear <anonymous> value
     *
     * @return \RO\Cmd\GiveTradeCmd
     */
    public function clearAnonymous(){
      return $this->_clear(7);
    }
    
    /**
     * Get <anonymous> value
     *
     * @return boolean
     */
    public function getAnonymous(){
      return $this->_get(7);
    }
    
    /**
     * Set <anonymous> value
     *
     * @param boolean $value
     * @return \RO\Cmd\GiveTradeCmd
     */
    public function setAnonymous( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <background> has a value
     *
     * @return boolean
     */
    public function hasBackground(){
      return $this->_has(8);
    }
    
    /**
     * Clear <background> value
     *
     * @return \RO\Cmd\GiveTradeCmd
     */
    public function clearBackground(){
      return $this->_clear(8);
    }
    
    /**
     * Get <background> value
     *
     * @return int
     */
    public function getBackground(){
      return $this->_get(8);
    }
    
    /**
     * Set <background> value
     *
     * @param int $value
     * @return \RO\Cmd\GiveTradeCmd
     */
    public function setBackground( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <success> has a value
     *
     * @return boolean
     */
    public function hasSuccess(){
      return $this->_has(9);
    }
    
    /**
     * Clear <success> value
     *
     * @return \RO\Cmd\GiveTradeCmd
     */
    public function clearSuccess(){
      return $this->_clear(9);
    }
    
    /**
     * Get <success> value
     *
     * @return boolean
     */
    public function getSuccess(){
      return $this->_get(9);
    }
    
    /**
     * Set <success> value
     *
     * @param boolean $value
     * @return \RO\Cmd\GiveTradeCmd
     */
    public function setSuccess( $value){
      return $this->_set(9, $value);
    }
  }
}

