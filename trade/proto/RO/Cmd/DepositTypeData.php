<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: UserEvent.proto

namespace RO\Cmd {

  class DepositTypeData extends \DrSlump\Protobuf\Message {

    /**  @var int - \RO\Cmd\EDepositCardType */
    public $type = null;
    
    /**  @var int */
    public $expiretime = null;
    
    /**  @var int */
    public $starttime = null;
    
    /**  @var int - \RO\Cmd\EDepositState */
    public $state = null;
    
    /**  @var boolean */
    public $invalid = false;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.DepositTypeData');

      // OPTIONAL ENUM type = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\EDepositCardType';
      $descriptor->addField($f);

      // OPTIONAL UINT32 expiretime = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "expiretime";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 starttime = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "starttime";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM state = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\EDepositState';
      $descriptor->addField($f);

      // OPTIONAL BOOL invalid = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "invalid";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = false;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(1);
    }
    
    /**
     * Clear <type> value
     *
     * @return \RO\Cmd\DepositTypeData
     */
    public function clearType(){
      return $this->_clear(1);
    }
    
    /**
     * Get <type> value
     *
     * @return int - \RO\Cmd\EDepositCardType
     */
    public function getType(){
      return $this->_get(1);
    }
    
    /**
     * Set <type> value
     *
     * @param int - \RO\Cmd\EDepositCardType $value
     * @return \RO\Cmd\DepositTypeData
     */
    public function setType( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <expiretime> has a value
     *
     * @return boolean
     */
    public function hasExpiretime(){
      return $this->_has(2);
    }
    
    /**
     * Clear <expiretime> value
     *
     * @return \RO\Cmd\DepositTypeData
     */
    public function clearExpiretime(){
      return $this->_clear(2);
    }
    
    /**
     * Get <expiretime> value
     *
     * @return int
     */
    public function getExpiretime(){
      return $this->_get(2);
    }
    
    /**
     * Set <expiretime> value
     *
     * @param int $value
     * @return \RO\Cmd\DepositTypeData
     */
    public function setExpiretime( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <starttime> has a value
     *
     * @return boolean
     */
    public function hasStarttime(){
      return $this->_has(3);
    }
    
    /**
     * Clear <starttime> value
     *
     * @return \RO\Cmd\DepositTypeData
     */
    public function clearStarttime(){
      return $this->_clear(3);
    }
    
    /**
     * Get <starttime> value
     *
     * @return int
     */
    public function getStarttime(){
      return $this->_get(3);
    }
    
    /**
     * Set <starttime> value
     *
     * @param int $value
     * @return \RO\Cmd\DepositTypeData
     */
    public function setStarttime( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(4);
    }
    
    /**
     * Clear <state> value
     *
     * @return \RO\Cmd\DepositTypeData
     */
    public function clearState(){
      return $this->_clear(4);
    }
    
    /**
     * Get <state> value
     *
     * @return int - \RO\Cmd\EDepositState
     */
    public function getState(){
      return $this->_get(4);
    }
    
    /**
     * Set <state> value
     *
     * @param int - \RO\Cmd\EDepositState $value
     * @return \RO\Cmd\DepositTypeData
     */
    public function setState( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <invalid> has a value
     *
     * @return boolean
     */
    public function hasInvalid(){
      return $this->_has(5);
    }
    
    /**
     * Clear <invalid> value
     *
     * @return \RO\Cmd\DepositTypeData
     */
    public function clearInvalid(){
      return $this->_clear(5);
    }
    
    /**
     * Get <invalid> value
     *
     * @return boolean
     */
    public function getInvalid(){
      return $this->_get(5);
    }
    
    /**
     * Set <invalid> value
     *
     * @param boolean $value
     * @return \RO\Cmd\DepositTypeData
     */
    public function setInvalid( $value){
      return $this->_set(5, $value);
    }
  }
}

