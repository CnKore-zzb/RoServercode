<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: RecordCmd.proto

namespace RO\Cmd {

  class BlobRecordInfo extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $buytimes = null;
    
    /**  @var int */
    public $last_load_time = null;
    
    /**  @var \RO\Cmd\ProfessionData[]  */
    public $records = array();
    
    /**  @var int */
    public $dest_charid = null;
    
    /**  @var int */
    public $dest_map = null;
    
    /**  @var int */
    public $dest_slotid = null;
    
    /**  @var int */
    public $card_expiretime = null;
    
    /**  @var \RO\Cmd\UserAstrolMaterialData[]  */
    public $astrol_data = array();
    
    /**  @var int */
    public $ndest_charid = 0;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.BlobRecordInfo');

      // OPTIONAL UINT32 buytimes = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "buytimes";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 last_load_time = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "last_load_time";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE records = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "records";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\ProfessionData';
      $descriptor->addField($f);

      // OPTIONAL UINT32 dest_charid = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "dest_charid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 dest_map = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "dest_map";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 dest_slotid = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "dest_slotid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 card_expiretime = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "card_expiretime";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE astrol_data = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "astrol_data";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\UserAstrolMaterialData';
      $descriptor->addField($f);

      // OPTIONAL UINT64 ndest_charid = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "ndest_charid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <buytimes> has a value
     *
     * @return boolean
     */
    public function hasBuytimes(){
      return $this->_has(1);
    }
    
    /**
     * Clear <buytimes> value
     *
     * @return \RO\Cmd\BlobRecordInfo
     */
    public function clearBuytimes(){
      return $this->_clear(1);
    }
    
    /**
     * Get <buytimes> value
     *
     * @return int
     */
    public function getBuytimes(){
      return $this->_get(1);
    }
    
    /**
     * Set <buytimes> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobRecordInfo
     */
    public function setBuytimes( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <last_load_time> has a value
     *
     * @return boolean
     */
    public function hasLastLoadTime(){
      return $this->_has(2);
    }
    
    /**
     * Clear <last_load_time> value
     *
     * @return \RO\Cmd\BlobRecordInfo
     */
    public function clearLastLoadTime(){
      return $this->_clear(2);
    }
    
    /**
     * Get <last_load_time> value
     *
     * @return int
     */
    public function getLastLoadTime(){
      return $this->_get(2);
    }
    
    /**
     * Set <last_load_time> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobRecordInfo
     */
    public function setLastLoadTime( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <records> has a value
     *
     * @return boolean
     */
    public function hasRecords(){
      return $this->_has(3);
    }
    
    /**
     * Clear <records> value
     *
     * @return \RO\Cmd\BlobRecordInfo
     */
    public function clearRecords(){
      return $this->_clear(3);
    }
    
    /**
     * Get <records> value
     *
     * @param int $idx
     * @return \RO\Cmd\ProfessionData
     */
    public function getRecords($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <records> value
     *
     * @param \RO\Cmd\ProfessionData $value
     * @return \RO\Cmd\BlobRecordInfo
     */
    public function setRecords(\RO\Cmd\ProfessionData $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <records>
     *
     * @return \RO\Cmd\ProfessionData[]
     */
    public function getRecordsList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <records>
     *
     * @param \RO\Cmd\ProfessionData $value
     * @return \RO\Cmd\BlobRecordInfo
     */
    public function addRecords(\RO\Cmd\ProfessionData $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <dest_charid> has a value
     *
     * @return boolean
     */
    public function hasDestCharid(){
      return $this->_has(4);
    }
    
    /**
     * Clear <dest_charid> value
     *
     * @return \RO\Cmd\BlobRecordInfo
     */
    public function clearDestCharid(){
      return $this->_clear(4);
    }
    
    /**
     * Get <dest_charid> value
     *
     * @return int
     */
    public function getDestCharid(){
      return $this->_get(4);
    }
    
    /**
     * Set <dest_charid> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobRecordInfo
     */
    public function setDestCharid( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <dest_map> has a value
     *
     * @return boolean
     */
    public function hasDestMap(){
      return $this->_has(5);
    }
    
    /**
     * Clear <dest_map> value
     *
     * @return \RO\Cmd\BlobRecordInfo
     */
    public function clearDestMap(){
      return $this->_clear(5);
    }
    
    /**
     * Get <dest_map> value
     *
     * @return int
     */
    public function getDestMap(){
      return $this->_get(5);
    }
    
    /**
     * Set <dest_map> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobRecordInfo
     */
    public function setDestMap( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <dest_slotid> has a value
     *
     * @return boolean
     */
    public function hasDestSlotid(){
      return $this->_has(6);
    }
    
    /**
     * Clear <dest_slotid> value
     *
     * @return \RO\Cmd\BlobRecordInfo
     */
    public function clearDestSlotid(){
      return $this->_clear(6);
    }
    
    /**
     * Get <dest_slotid> value
     *
     * @return int
     */
    public function getDestSlotid(){
      return $this->_get(6);
    }
    
    /**
     * Set <dest_slotid> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobRecordInfo
     */
    public function setDestSlotid( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <card_expiretime> has a value
     *
     * @return boolean
     */
    public function hasCardExpiretime(){
      return $this->_has(7);
    }
    
    /**
     * Clear <card_expiretime> value
     *
     * @return \RO\Cmd\BlobRecordInfo
     */
    public function clearCardExpiretime(){
      return $this->_clear(7);
    }
    
    /**
     * Get <card_expiretime> value
     *
     * @return int
     */
    public function getCardExpiretime(){
      return $this->_get(7);
    }
    
    /**
     * Set <card_expiretime> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobRecordInfo
     */
    public function setCardExpiretime( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <astrol_data> has a value
     *
     * @return boolean
     */
    public function hasAstrolData(){
      return $this->_has(8);
    }
    
    /**
     * Clear <astrol_data> value
     *
     * @return \RO\Cmd\BlobRecordInfo
     */
    public function clearAstrolData(){
      return $this->_clear(8);
    }
    
    /**
     * Get <astrol_data> value
     *
     * @param int $idx
     * @return \RO\Cmd\UserAstrolMaterialData
     */
    public function getAstrolData($idx = NULL){
      return $this->_get(8, $idx);
    }
    
    /**
     * Set <astrol_data> value
     *
     * @param \RO\Cmd\UserAstrolMaterialData $value
     * @return \RO\Cmd\BlobRecordInfo
     */
    public function setAstrolData(\RO\Cmd\UserAstrolMaterialData $value, $idx = NULL){
      return $this->_set(8, $value, $idx);
    }
    
    /**
     * Get all elements of <astrol_data>
     *
     * @return \RO\Cmd\UserAstrolMaterialData[]
     */
    public function getAstrolDataList(){
     return $this->_get(8);
    }
    
    /**
     * Add a new element to <astrol_data>
     *
     * @param \RO\Cmd\UserAstrolMaterialData $value
     * @return \RO\Cmd\BlobRecordInfo
     */
    public function addAstrolData(\RO\Cmd\UserAstrolMaterialData $value){
     return $this->_add(8, $value);
    }
    
    /**
     * Check if <ndest_charid> has a value
     *
     * @return boolean
     */
    public function hasNdestCharid(){
      return $this->_has(9);
    }
    
    /**
     * Clear <ndest_charid> value
     *
     * @return \RO\Cmd\BlobRecordInfo
     */
    public function clearNdestCharid(){
      return $this->_clear(9);
    }
    
    /**
     * Get <ndest_charid> value
     *
     * @return int
     */
    public function getNdestCharid(){
      return $this->_get(9);
    }
    
    /**
     * Set <ndest_charid> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobRecordInfo
     */
    public function setNdestCharid( $value){
      return $this->_set(9, $value);
    }
  }
}

