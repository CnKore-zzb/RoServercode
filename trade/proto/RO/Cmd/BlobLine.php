<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: RecordCmd.proto

namespace RO\Cmd {

  class BlobLine extends \DrSlump\Protobuf\Message {

    /**  @var \RO\Cmd\BlobLineData[]  */
    public $ilinewho = array();
    
    /**  @var \RO\Cmd\BlobLineData[]  */
    public $wholineme = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.BlobLine');

      // REPEATED MESSAGE ilinewho = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "ilinewho";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\BlobLineData';
      $descriptor->addField($f);

      // REPEATED MESSAGE wholineme = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "wholineme";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\BlobLineData';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <ilinewho> has a value
     *
     * @return boolean
     */
    public function hasIlinewho(){
      return $this->_has(1);
    }
    
    /**
     * Clear <ilinewho> value
     *
     * @return \RO\Cmd\BlobLine
     */
    public function clearIlinewho(){
      return $this->_clear(1);
    }
    
    /**
     * Get <ilinewho> value
     *
     * @param int $idx
     * @return \RO\Cmd\BlobLineData
     */
    public function getIlinewho($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <ilinewho> value
     *
     * @param \RO\Cmd\BlobLineData $value
     * @return \RO\Cmd\BlobLine
     */
    public function setIlinewho(\RO\Cmd\BlobLineData $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <ilinewho>
     *
     * @return \RO\Cmd\BlobLineData[]
     */
    public function getIlinewhoList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <ilinewho>
     *
     * @param \RO\Cmd\BlobLineData $value
     * @return \RO\Cmd\BlobLine
     */
    public function addIlinewho(\RO\Cmd\BlobLineData $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <wholineme> has a value
     *
     * @return boolean
     */
    public function hasWholineme(){
      return $this->_has(2);
    }
    
    /**
     * Clear <wholineme> value
     *
     * @return \RO\Cmd\BlobLine
     */
    public function clearWholineme(){
      return $this->_clear(2);
    }
    
    /**
     * Get <wholineme> value
     *
     * @param int $idx
     * @return \RO\Cmd\BlobLineData
     */
    public function getWholineme($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <wholineme> value
     *
     * @param \RO\Cmd\BlobLineData $value
     * @return \RO\Cmd\BlobLine
     */
    public function setWholineme(\RO\Cmd\BlobLineData $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <wholineme>
     *
     * @return \RO\Cmd\BlobLineData[]
     */
    public function getWholinemeList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <wholineme>
     *
     * @param \RO\Cmd\BlobLineData $value
     * @return \RO\Cmd\BlobLine
     */
    public function addWholineme(\RO\Cmd\BlobLineData $value){
     return $this->_add(2, $value);
    }
  }
}

