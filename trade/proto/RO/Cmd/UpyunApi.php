<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: ProtoCommon.proto

namespace RO\Cmd {

  class UpyunApi extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $bucket = null;
    
    /**  @var string */
    public $content_md5 = null;
    
    /**  @var string */
    public $content_lenth_range = null;
    
    /**  @var int */
    public $expiration = null;
    
    /**  @var int */
    public $file_blocks = null;
    
    /**  @var string */
    public $file_hash = null;
    
    /**  @var int */
    public $file_size = null;
    
    /**  @var string */
    public $path = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.UpyunApi');

      // OPTIONAL STRING bucket = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "bucket";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING content_md5 = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "content_md5";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING content_lenth_range = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "content_lenth_range";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 expiration = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "expiration";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 file_blocks = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "file_blocks";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING file_hash = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "file_hash";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 file_size = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "file_size";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING path = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "path";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <bucket> has a value
     *
     * @return boolean
     */
    public function hasBucket(){
      return $this->_has(1);
    }
    
    /**
     * Clear <bucket> value
     *
     * @return \RO\Cmd\UpyunApi
     */
    public function clearBucket(){
      return $this->_clear(1);
    }
    
    /**
     * Get <bucket> value
     *
     * @return string
     */
    public function getBucket(){
      return $this->_get(1);
    }
    
    /**
     * Set <bucket> value
     *
     * @param string $value
     * @return \RO\Cmd\UpyunApi
     */
    public function setBucket( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <content_md5> has a value
     *
     * @return boolean
     */
    public function hasContentMd5(){
      return $this->_has(2);
    }
    
    /**
     * Clear <content_md5> value
     *
     * @return \RO\Cmd\UpyunApi
     */
    public function clearContentMd5(){
      return $this->_clear(2);
    }
    
    /**
     * Get <content_md5> value
     *
     * @return string
     */
    public function getContentMd5(){
      return $this->_get(2);
    }
    
    /**
     * Set <content_md5> value
     *
     * @param string $value
     * @return \RO\Cmd\UpyunApi
     */
    public function setContentMd5( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <content_lenth_range> has a value
     *
     * @return boolean
     */
    public function hasContentLenthRange(){
      return $this->_has(3);
    }
    
    /**
     * Clear <content_lenth_range> value
     *
     * @return \RO\Cmd\UpyunApi
     */
    public function clearContentLenthRange(){
      return $this->_clear(3);
    }
    
    /**
     * Get <content_lenth_range> value
     *
     * @return string
     */
    public function getContentLenthRange(){
      return $this->_get(3);
    }
    
    /**
     * Set <content_lenth_range> value
     *
     * @param string $value
     * @return \RO\Cmd\UpyunApi
     */
    public function setContentLenthRange( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <expiration> has a value
     *
     * @return boolean
     */
    public function hasExpiration(){
      return $this->_has(4);
    }
    
    /**
     * Clear <expiration> value
     *
     * @return \RO\Cmd\UpyunApi
     */
    public function clearExpiration(){
      return $this->_clear(4);
    }
    
    /**
     * Get <expiration> value
     *
     * @return int
     */
    public function getExpiration(){
      return $this->_get(4);
    }
    
    /**
     * Set <expiration> value
     *
     * @param int $value
     * @return \RO\Cmd\UpyunApi
     */
    public function setExpiration( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <file_blocks> has a value
     *
     * @return boolean
     */
    public function hasFileBlocks(){
      return $this->_has(5);
    }
    
    /**
     * Clear <file_blocks> value
     *
     * @return \RO\Cmd\UpyunApi
     */
    public function clearFileBlocks(){
      return $this->_clear(5);
    }
    
    /**
     * Get <file_blocks> value
     *
     * @return int
     */
    public function getFileBlocks(){
      return $this->_get(5);
    }
    
    /**
     * Set <file_blocks> value
     *
     * @param int $value
     * @return \RO\Cmd\UpyunApi
     */
    public function setFileBlocks( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <file_hash> has a value
     *
     * @return boolean
     */
    public function hasFileHash(){
      return $this->_has(6);
    }
    
    /**
     * Clear <file_hash> value
     *
     * @return \RO\Cmd\UpyunApi
     */
    public function clearFileHash(){
      return $this->_clear(6);
    }
    
    /**
     * Get <file_hash> value
     *
     * @return string
     */
    public function getFileHash(){
      return $this->_get(6);
    }
    
    /**
     * Set <file_hash> value
     *
     * @param string $value
     * @return \RO\Cmd\UpyunApi
     */
    public function setFileHash( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <file_size> has a value
     *
     * @return boolean
     */
    public function hasFileSize(){
      return $this->_has(7);
    }
    
    /**
     * Clear <file_size> value
     *
     * @return \RO\Cmd\UpyunApi
     */
    public function clearFileSize(){
      return $this->_clear(7);
    }
    
    /**
     * Get <file_size> value
     *
     * @return int
     */
    public function getFileSize(){
      return $this->_get(7);
    }
    
    /**
     * Set <file_size> value
     *
     * @param int $value
     * @return \RO\Cmd\UpyunApi
     */
    public function setFileSize( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <path> has a value
     *
     * @return boolean
     */
    public function hasPath(){
      return $this->_has(8);
    }
    
    /**
     * Clear <path> value
     *
     * @return \RO\Cmd\UpyunApi
     */
    public function clearPath(){
      return $this->_clear(8);
    }
    
    /**
     * Get <path> value
     *
     * @return string
     */
    public function getPath(){
      return $this->_get(8);
    }
    
    /**
     * Set <path> value
     *
     * @param string $value
     * @return \RO\Cmd\UpyunApi
     */
    public function setPath( $value){
      return $this->_set(8, $value);
    }
  }
}

