<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: SceneUser2.proto

namespace RO\Cmd {

  class SkillProfessionData extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $left_point = null;
    
    /**  @var \RO\Cmd\SkillData[]  */
    public $datas = array();
    
    /**  @var \RO\Cmd\SkillData */
    public $novice_data = null;
    
    /**  @var \RO\Cmd\BeingSkillData[]  */
    public $beings = array();
    
    /**  @var int */
    public $curbeingid = null;
    
    /**  @var \RO\Cmd\BeingInfo[]  */
    public $beinginfos = array();
    
    /**  @var \RO\Cmd\SkillValidPosData */
    public $skillpos = null;
    
    /**  @var \RO\Cmd\SkillValidPos */
    public $shortcut = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.SkillProfessionData');

      // OPTIONAL UINT32 left_point = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "left_point";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE datas = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "datas";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\SkillData';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE novice_data = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "novice_data";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\SkillData';
      $descriptor->addField($f);

      // REPEATED MESSAGE beings = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "beings";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\BeingSkillData';
      $descriptor->addField($f);

      // OPTIONAL UINT32 curbeingid = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "curbeingid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE beinginfos = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "beinginfos";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\BeingInfo';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE skillpos = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "skillpos";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\SkillValidPosData';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE shortcut = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "shortcut";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\SkillValidPos';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <left_point> has a value
     *
     * @return boolean
     */
    public function hasLeftPoint(){
      return $this->_has(1);
    }
    
    /**
     * Clear <left_point> value
     *
     * @return \RO\Cmd\SkillProfessionData
     */
    public function clearLeftPoint(){
      return $this->_clear(1);
    }
    
    /**
     * Get <left_point> value
     *
     * @return int
     */
    public function getLeftPoint(){
      return $this->_get(1);
    }
    
    /**
     * Set <left_point> value
     *
     * @param int $value
     * @return \RO\Cmd\SkillProfessionData
     */
    public function setLeftPoint( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <datas> has a value
     *
     * @return boolean
     */
    public function hasDatas(){
      return $this->_has(2);
    }
    
    /**
     * Clear <datas> value
     *
     * @return \RO\Cmd\SkillProfessionData
     */
    public function clearDatas(){
      return $this->_clear(2);
    }
    
    /**
     * Get <datas> value
     *
     * @param int $idx
     * @return \RO\Cmd\SkillData
     */
    public function getDatas($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <datas> value
     *
     * @param \RO\Cmd\SkillData $value
     * @return \RO\Cmd\SkillProfessionData
     */
    public function setDatas(\RO\Cmd\SkillData $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <datas>
     *
     * @return \RO\Cmd\SkillData[]
     */
    public function getDatasList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <datas>
     *
     * @param \RO\Cmd\SkillData $value
     * @return \RO\Cmd\SkillProfessionData
     */
    public function addDatas(\RO\Cmd\SkillData $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <novice_data> has a value
     *
     * @return boolean
     */
    public function hasNoviceData(){
      return $this->_has(3);
    }
    
    /**
     * Clear <novice_data> value
     *
     * @return \RO\Cmd\SkillProfessionData
     */
    public function clearNoviceData(){
      return $this->_clear(3);
    }
    
    /**
     * Get <novice_data> value
     *
     * @return \RO\Cmd\SkillData
     */
    public function getNoviceData(){
      return $this->_get(3);
    }
    
    /**
     * Set <novice_data> value
     *
     * @param \RO\Cmd\SkillData $value
     * @return \RO\Cmd\SkillProfessionData
     */
    public function setNoviceData(\RO\Cmd\SkillData $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <beings> has a value
     *
     * @return boolean
     */
    public function hasBeings(){
      return $this->_has(4);
    }
    
    /**
     * Clear <beings> value
     *
     * @return \RO\Cmd\SkillProfessionData
     */
    public function clearBeings(){
      return $this->_clear(4);
    }
    
    /**
     * Get <beings> value
     *
     * @param int $idx
     * @return \RO\Cmd\BeingSkillData
     */
    public function getBeings($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <beings> value
     *
     * @param \RO\Cmd\BeingSkillData $value
     * @return \RO\Cmd\SkillProfessionData
     */
    public function setBeings(\RO\Cmd\BeingSkillData $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <beings>
     *
     * @return \RO\Cmd\BeingSkillData[]
     */
    public function getBeingsList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <beings>
     *
     * @param \RO\Cmd\BeingSkillData $value
     * @return \RO\Cmd\SkillProfessionData
     */
    public function addBeings(\RO\Cmd\BeingSkillData $value){
     return $this->_add(4, $value);
    }
    
    /**
     * Check if <curbeingid> has a value
     *
     * @return boolean
     */
    public function hasCurbeingid(){
      return $this->_has(5);
    }
    
    /**
     * Clear <curbeingid> value
     *
     * @return \RO\Cmd\SkillProfessionData
     */
    public function clearCurbeingid(){
      return $this->_clear(5);
    }
    
    /**
     * Get <curbeingid> value
     *
     * @return int
     */
    public function getCurbeingid(){
      return $this->_get(5);
    }
    
    /**
     * Set <curbeingid> value
     *
     * @param int $value
     * @return \RO\Cmd\SkillProfessionData
     */
    public function setCurbeingid( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <beinginfos> has a value
     *
     * @return boolean
     */
    public function hasBeinginfos(){
      return $this->_has(6);
    }
    
    /**
     * Clear <beinginfos> value
     *
     * @return \RO\Cmd\SkillProfessionData
     */
    public function clearBeinginfos(){
      return $this->_clear(6);
    }
    
    /**
     * Get <beinginfos> value
     *
     * @param int $idx
     * @return \RO\Cmd\BeingInfo
     */
    public function getBeinginfos($idx = NULL){
      return $this->_get(6, $idx);
    }
    
    /**
     * Set <beinginfos> value
     *
     * @param \RO\Cmd\BeingInfo $value
     * @return \RO\Cmd\SkillProfessionData
     */
    public function setBeinginfos(\RO\Cmd\BeingInfo $value, $idx = NULL){
      return $this->_set(6, $value, $idx);
    }
    
    /**
     * Get all elements of <beinginfos>
     *
     * @return \RO\Cmd\BeingInfo[]
     */
    public function getBeinginfosList(){
     return $this->_get(6);
    }
    
    /**
     * Add a new element to <beinginfos>
     *
     * @param \RO\Cmd\BeingInfo $value
     * @return \RO\Cmd\SkillProfessionData
     */
    public function addBeinginfos(\RO\Cmd\BeingInfo $value){
     return $this->_add(6, $value);
    }
    
    /**
     * Check if <skillpos> has a value
     *
     * @return boolean
     */
    public function hasSkillpos(){
      return $this->_has(7);
    }
    
    /**
     * Clear <skillpos> value
     *
     * @return \RO\Cmd\SkillProfessionData
     */
    public function clearSkillpos(){
      return $this->_clear(7);
    }
    
    /**
     * Get <skillpos> value
     *
     * @return \RO\Cmd\SkillValidPosData
     */
    public function getSkillpos(){
      return $this->_get(7);
    }
    
    /**
     * Set <skillpos> value
     *
     * @param \RO\Cmd\SkillValidPosData $value
     * @return \RO\Cmd\SkillProfessionData
     */
    public function setSkillpos(\RO\Cmd\SkillValidPosData $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <shortcut> has a value
     *
     * @return boolean
     */
    public function hasShortcut(){
      return $this->_has(8);
    }
    
    /**
     * Clear <shortcut> value
     *
     * @return \RO\Cmd\SkillProfessionData
     */
    public function clearShortcut(){
      return $this->_clear(8);
    }
    
    /**
     * Get <shortcut> value
     *
     * @return \RO\Cmd\SkillValidPos
     */
    public function getShortcut(){
      return $this->_get(8);
    }
    
    /**
     * Set <shortcut> value
     *
     * @param \RO\Cmd\SkillValidPos $value
     * @return \RO\Cmd\SkillProfessionData
     */
    public function setShortcut(\RO\Cmd\SkillValidPos $value){
      return $this->_set(8, $value);
    }
  }
}

