<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: RecordCmd.proto

namespace RO\Cmd {

  class BlobPet extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $activePet = 0;
    
    /**  @var int */
    public $activePartner = 0;
    
    /**  @var \RO\Cmd\PetData[]  */
    public $datas = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.BlobPet');

      // OPTIONAL UINT32 activePet = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "activePet";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 activePartner = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "activePartner";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // REPEATED MESSAGE datas = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "datas";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\PetData';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <activePet> has a value
     *
     * @return boolean
     */
    public function hasActivePet(){
      return $this->_has(1);
    }
    
    /**
     * Clear <activePet> value
     *
     * @return \RO\Cmd\BlobPet
     */
    public function clearActivePet(){
      return $this->_clear(1);
    }
    
    /**
     * Get <activePet> value
     *
     * @return int
     */
    public function getActivePet(){
      return $this->_get(1);
    }
    
    /**
     * Set <activePet> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobPet
     */
    public function setActivePet( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <activePartner> has a value
     *
     * @return boolean
     */
    public function hasActivePartner(){
      return $this->_has(2);
    }
    
    /**
     * Clear <activePartner> value
     *
     * @return \RO\Cmd\BlobPet
     */
    public function clearActivePartner(){
      return $this->_clear(2);
    }
    
    /**
     * Get <activePartner> value
     *
     * @return int
     */
    public function getActivePartner(){
      return $this->_get(2);
    }
    
    /**
     * Set <activePartner> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobPet
     */
    public function setActivePartner( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <datas> has a value
     *
     * @return boolean
     */
    public function hasDatas(){
      return $this->_has(3);
    }
    
    /**
     * Clear <datas> value
     *
     * @return \RO\Cmd\BlobPet
     */
    public function clearDatas(){
      return $this->_clear(3);
    }
    
    /**
     * Get <datas> value
     *
     * @param int $idx
     * @return \RO\Cmd\PetData
     */
    public function getDatas($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <datas> value
     *
     * @param \RO\Cmd\PetData $value
     * @return \RO\Cmd\BlobPet
     */
    public function setDatas(\RO\Cmd\PetData $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <datas>
     *
     * @return \RO\Cmd\PetData[]
     */
    public function getDatasList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <datas>
     *
     * @param \RO\Cmd\PetData $value
     * @return \RO\Cmd\BlobPet
     */
    public function addDatas(\RO\Cmd\PetData $value){
     return $this->_add(3, $value);
    }
  }
}

