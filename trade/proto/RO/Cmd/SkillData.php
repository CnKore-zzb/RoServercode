<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: SceneSkill.proto

namespace RO\Cmd {

  class SkillData extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $usedpoint = 0;
    
    /**  @var int - \RO\Cmd\EProfession */
    public $profession = \RO\Cmd\EProfession::EPROFESSION_MIN;
    
    /**  @var \RO\Cmd\SkillItem[]  */
    public $items = array();
    
    /**  @var int */
    public $primarypoint = 0;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.SkillData');

      // OPTIONAL UINT32 usedpoint = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "usedpoint";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL ENUM profession = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "profession";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\EProfession';
      $f->default   = \RO\Cmd\EProfession::EPROFESSION_MIN;
      $descriptor->addField($f);

      // REPEATED MESSAGE items = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "items";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\SkillItem';
      $descriptor->addField($f);

      // OPTIONAL UINT32 primarypoint = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "primarypoint";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <usedpoint> has a value
     *
     * @return boolean
     */
    public function hasUsedpoint(){
      return $this->_has(1);
    }
    
    /**
     * Clear <usedpoint> value
     *
     * @return \RO\Cmd\SkillData
     */
    public function clearUsedpoint(){
      return $this->_clear(1);
    }
    
    /**
     * Get <usedpoint> value
     *
     * @return int
     */
    public function getUsedpoint(){
      return $this->_get(1);
    }
    
    /**
     * Set <usedpoint> value
     *
     * @param int $value
     * @return \RO\Cmd\SkillData
     */
    public function setUsedpoint( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <profession> has a value
     *
     * @return boolean
     */
    public function hasProfession(){
      return $this->_has(2);
    }
    
    /**
     * Clear <profession> value
     *
     * @return \RO\Cmd\SkillData
     */
    public function clearProfession(){
      return $this->_clear(2);
    }
    
    /**
     * Get <profession> value
     *
     * @return int - \RO\Cmd\EProfession
     */
    public function getProfession(){
      return $this->_get(2);
    }
    
    /**
     * Set <profession> value
     *
     * @param int - \RO\Cmd\EProfession $value
     * @return \RO\Cmd\SkillData
     */
    public function setProfession( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <items> has a value
     *
     * @return boolean
     */
    public function hasItems(){
      return $this->_has(3);
    }
    
    /**
     * Clear <items> value
     *
     * @return \RO\Cmd\SkillData
     */
    public function clearItems(){
      return $this->_clear(3);
    }
    
    /**
     * Get <items> value
     *
     * @param int $idx
     * @return \RO\Cmd\SkillItem
     */
    public function getItems($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <items> value
     *
     * @param \RO\Cmd\SkillItem $value
     * @return \RO\Cmd\SkillData
     */
    public function setItems(\RO\Cmd\SkillItem $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <items>
     *
     * @return \RO\Cmd\SkillItem[]
     */
    public function getItemsList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <items>
     *
     * @param \RO\Cmd\SkillItem $value
     * @return \RO\Cmd\SkillData
     */
    public function addItems(\RO\Cmd\SkillItem $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <primarypoint> has a value
     *
     * @return boolean
     */
    public function hasPrimarypoint(){
      return $this->_has(4);
    }
    
    /**
     * Clear <primarypoint> value
     *
     * @return \RO\Cmd\SkillData
     */
    public function clearPrimarypoint(){
      return $this->_clear(4);
    }
    
    /**
     * Get <primarypoint> value
     *
     * @return int
     */
    public function getPrimarypoint(){
      return $this->_get(4);
    }
    
    /**
     * Set <primarypoint> value
     *
     * @param int $value
     * @return \RO\Cmd\SkillData
     */
    public function setPrimarypoint( $value){
      return $this->_set(4, $value);
    }
  }
}

