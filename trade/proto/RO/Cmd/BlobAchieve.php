<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: RecordCmd.proto

namespace RO\Cmd {

  class BlobAchieve extends \DrSlump\Protobuf\Message {

    /**  @var \RO\Cmd\AchieveData[]  */
    public $data = array();
    
    /**  @var \RO\Cmd\MaxInfo[]  */
    public $max_cache = array();
    
    /**  @var int */
    public $version = 0;
    
    /**  @var \RO\Cmd\AchieveDBItem[]  */
    public $items = array();
    
    /**  @var int */
    public $char_version = 0;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.BlobAchieve');

      // REPEATED MESSAGE data = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "data";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\AchieveData';
      $descriptor->addField($f);

      // REPEATED MESSAGE max_cache = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "max_cache";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\MaxInfo';
      $descriptor->addField($f);

      // OPTIONAL UINT32 version = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "version";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // REPEATED MESSAGE items = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "items";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\AchieveDBItem';
      $descriptor->addField($f);

      // OPTIONAL UINT32 char_version = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "char_version";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <data> has a value
     *
     * @return boolean
     */
    public function hasData(){
      return $this->_has(1);
    }
    
    /**
     * Clear <data> value
     *
     * @return \RO\Cmd\BlobAchieve
     */
    public function clearData(){
      return $this->_clear(1);
    }
    
    /**
     * Get <data> value
     *
     * @param int $idx
     * @return \RO\Cmd\AchieveData
     */
    public function getData($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <data> value
     *
     * @param \RO\Cmd\AchieveData $value
     * @return \RO\Cmd\BlobAchieve
     */
    public function setData(\RO\Cmd\AchieveData $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <data>
     *
     * @return \RO\Cmd\AchieveData[]
     */
    public function getDataList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <data>
     *
     * @param \RO\Cmd\AchieveData $value
     * @return \RO\Cmd\BlobAchieve
     */
    public function addData(\RO\Cmd\AchieveData $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <max_cache> has a value
     *
     * @return boolean
     */
    public function hasMaxCache(){
      return $this->_has(2);
    }
    
    /**
     * Clear <max_cache> value
     *
     * @return \RO\Cmd\BlobAchieve
     */
    public function clearMaxCache(){
      return $this->_clear(2);
    }
    
    /**
     * Get <max_cache> value
     *
     * @param int $idx
     * @return \RO\Cmd\MaxInfo
     */
    public function getMaxCache($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <max_cache> value
     *
     * @param \RO\Cmd\MaxInfo $value
     * @return \RO\Cmd\BlobAchieve
     */
    public function setMaxCache(\RO\Cmd\MaxInfo $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <max_cache>
     *
     * @return \RO\Cmd\MaxInfo[]
     */
    public function getMaxCacheList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <max_cache>
     *
     * @param \RO\Cmd\MaxInfo $value
     * @return \RO\Cmd\BlobAchieve
     */
    public function addMaxCache(\RO\Cmd\MaxInfo $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <version> has a value
     *
     * @return boolean
     */
    public function hasVersion(){
      return $this->_has(3);
    }
    
    /**
     * Clear <version> value
     *
     * @return \RO\Cmd\BlobAchieve
     */
    public function clearVersion(){
      return $this->_clear(3);
    }
    
    /**
     * Get <version> value
     *
     * @return int
     */
    public function getVersion(){
      return $this->_get(3);
    }
    
    /**
     * Set <version> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobAchieve
     */
    public function setVersion( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <items> has a value
     *
     * @return boolean
     */
    public function hasItems(){
      return $this->_has(4);
    }
    
    /**
     * Clear <items> value
     *
     * @return \RO\Cmd\BlobAchieve
     */
    public function clearItems(){
      return $this->_clear(4);
    }
    
    /**
     * Get <items> value
     *
     * @param int $idx
     * @return \RO\Cmd\AchieveDBItem
     */
    public function getItems($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <items> value
     *
     * @param \RO\Cmd\AchieveDBItem $value
     * @return \RO\Cmd\BlobAchieve
     */
    public function setItems(\RO\Cmd\AchieveDBItem $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <items>
     *
     * @return \RO\Cmd\AchieveDBItem[]
     */
    public function getItemsList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <items>
     *
     * @param \RO\Cmd\AchieveDBItem $value
     * @return \RO\Cmd\BlobAchieve
     */
    public function addItems(\RO\Cmd\AchieveDBItem $value){
     return $this->_add(4, $value);
    }
    
    /**
     * Check if <char_version> has a value
     *
     * @return boolean
     */
    public function hasCharVersion(){
      return $this->_has(5);
    }
    
    /**
     * Clear <char_version> value
     *
     * @return \RO\Cmd\BlobAchieve
     */
    public function clearCharVersion(){
      return $this->_clear(5);
    }
    
    /**
     * Get <char_version> value
     *
     * @return int
     */
    public function getCharVersion(){
      return $this->_get(5);
    }
    
    /**
     * Set <char_version> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobAchieve
     */
    public function setCharVersion( $value){
      return $this->_set(5, $value);
    }
  }
}

