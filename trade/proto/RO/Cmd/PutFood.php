<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: SceneFood.proto

namespace RO\Cmd {

  class PutFood extends \DrSlump\Protobuf\Message {

    /**  @var int - \RO\Cmd\Command */
    public $cmd = \RO\Cmd\Command::SCENE_USER_FOOD_PROTOCMD;
    
    /**  @var int - \RO\Cmd\FoodParam */
    public $param = \RO\Cmd\FoodParam::FOODPARAM_PUT_FOOD;
    
    /**  @var string */
    public $foodguid = null;
    
    /**  @var int - \RO\Cmd\EEatPower */
    public $power = null;
    
    /**  @var int */
    public $foodnum = null;
    
    /**  @var boolean */
    public $peteat = false;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.PutFood');

      // OPTIONAL ENUM cmd = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "cmd";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\Command';
      $f->default   = \RO\Cmd\Command::SCENE_USER_FOOD_PROTOCMD;
      $descriptor->addField($f);

      // OPTIONAL ENUM param = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "param";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\FoodParam';
      $f->default   = \RO\Cmd\FoodParam::FOODPARAM_PUT_FOOD;
      $descriptor->addField($f);

      // OPTIONAL STRING foodguid = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "foodguid";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM power = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "power";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\EEatPower';
      $descriptor->addField($f);

      // OPTIONAL UINT32 foodnum = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "foodnum";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL peteat = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "peteat";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = false;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <cmd> has a value
     *
     * @return boolean
     */
    public function hasCmd(){
      return $this->_has(1);
    }
    
    /**
     * Clear <cmd> value
     *
     * @return \RO\Cmd\PutFood
     */
    public function clearCmd(){
      return $this->_clear(1);
    }
    
    /**
     * Get <cmd> value
     *
     * @return int - \RO\Cmd\Command
     */
    public function getCmd(){
      return $this->_get(1);
    }
    
    /**
     * Set <cmd> value
     *
     * @param int - \RO\Cmd\Command $value
     * @return \RO\Cmd\PutFood
     */
    public function setCmd( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <param> has a value
     *
     * @return boolean
     */
    public function hasParam(){
      return $this->_has(2);
    }
    
    /**
     * Clear <param> value
     *
     * @return \RO\Cmd\PutFood
     */
    public function clearParam(){
      return $this->_clear(2);
    }
    
    /**
     * Get <param> value
     *
     * @return int - \RO\Cmd\FoodParam
     */
    public function getParam(){
      return $this->_get(2);
    }
    
    /**
     * Set <param> value
     *
     * @param int - \RO\Cmd\FoodParam $value
     * @return \RO\Cmd\PutFood
     */
    public function setParam( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <foodguid> has a value
     *
     * @return boolean
     */
    public function hasFoodguid(){
      return $this->_has(3);
    }
    
    /**
     * Clear <foodguid> value
     *
     * @return \RO\Cmd\PutFood
     */
    public function clearFoodguid(){
      return $this->_clear(3);
    }
    
    /**
     * Get <foodguid> value
     *
     * @return string
     */
    public function getFoodguid(){
      return $this->_get(3);
    }
    
    /**
     * Set <foodguid> value
     *
     * @param string $value
     * @return \RO\Cmd\PutFood
     */
    public function setFoodguid( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <power> has a value
     *
     * @return boolean
     */
    public function hasPower(){
      return $this->_has(4);
    }
    
    /**
     * Clear <power> value
     *
     * @return \RO\Cmd\PutFood
     */
    public function clearPower(){
      return $this->_clear(4);
    }
    
    /**
     * Get <power> value
     *
     * @return int - \RO\Cmd\EEatPower
     */
    public function getPower(){
      return $this->_get(4);
    }
    
    /**
     * Set <power> value
     *
     * @param int - \RO\Cmd\EEatPower $value
     * @return \RO\Cmd\PutFood
     */
    public function setPower( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <foodnum> has a value
     *
     * @return boolean
     */
    public function hasFoodnum(){
      return $this->_has(5);
    }
    
    /**
     * Clear <foodnum> value
     *
     * @return \RO\Cmd\PutFood
     */
    public function clearFoodnum(){
      return $this->_clear(5);
    }
    
    /**
     * Get <foodnum> value
     *
     * @return int
     */
    public function getFoodnum(){
      return $this->_get(5);
    }
    
    /**
     * Set <foodnum> value
     *
     * @param int $value
     * @return \RO\Cmd\PutFood
     */
    public function setFoodnum( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <peteat> has a value
     *
     * @return boolean
     */
    public function hasPeteat(){
      return $this->_has(6);
    }
    
    /**
     * Clear <peteat> value
     *
     * @return \RO\Cmd\PutFood
     */
    public function clearPeteat(){
      return $this->_clear(6);
    }
    
    /**
     * Get <peteat> value
     *
     * @return boolean
     */
    public function getPeteat(){
      return $this->_get(6);
    }
    
    /**
     * Set <peteat> value
     *
     * @param boolean $value
     * @return \RO\Cmd\PutFood
     */
    public function setPeteat( $value){
      return $this->_set(6, $value);
    }
  }
}

