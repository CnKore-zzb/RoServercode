<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: FuBenCmd.proto

namespace RO\Cmd {

  class SuperGvgUserData extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $username = null;
    
    /**  @var int */
    public $profession = null;
    
    /**  @var int */
    public $killusernum = 0;
    
    /**  @var int */
    public $dienum = 0;
    
    /**  @var int */
    public $chipnum = 0;
    
    /**  @var int */
    public $towertime = 0;
    
    /**  @var int */
    public $healhp = 0;
    
    /**  @var int */
    public $relivenum = 0;
    
    /**  @var int */
    public $metaldamage = 0;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.SuperGvgUserData');

      // REQUIRED STRING username = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "username";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED UINT32 profession = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "profession";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL UINT32 killusernum = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "killusernum";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 dienum = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "dienum";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 chipnum = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "chipnum";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 towertime = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "towertime";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 healhp = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "healhp";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 relivenum = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "relivenum";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 metaldamage = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "metaldamage";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <username> has a value
     *
     * @return boolean
     */
    public function hasUsername(){
      return $this->_has(1);
    }
    
    /**
     * Clear <username> value
     *
     * @return \RO\Cmd\SuperGvgUserData
     */
    public function clearUsername(){
      return $this->_clear(1);
    }
    
    /**
     * Get <username> value
     *
     * @return string
     */
    public function getUsername(){
      return $this->_get(1);
    }
    
    /**
     * Set <username> value
     *
     * @param string $value
     * @return \RO\Cmd\SuperGvgUserData
     */
    public function setUsername( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <profession> has a value
     *
     * @return boolean
     */
    public function hasProfession(){
      return $this->_has(2);
    }
    
    /**
     * Clear <profession> value
     *
     * @return \RO\Cmd\SuperGvgUserData
     */
    public function clearProfession(){
      return $this->_clear(2);
    }
    
    /**
     * Get <profession> value
     *
     * @return int
     */
    public function getProfession(){
      return $this->_get(2);
    }
    
    /**
     * Set <profession> value
     *
     * @param int $value
     * @return \RO\Cmd\SuperGvgUserData
     */
    public function setProfession( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <killusernum> has a value
     *
     * @return boolean
     */
    public function hasKillusernum(){
      return $this->_has(3);
    }
    
    /**
     * Clear <killusernum> value
     *
     * @return \RO\Cmd\SuperGvgUserData
     */
    public function clearKillusernum(){
      return $this->_clear(3);
    }
    
    /**
     * Get <killusernum> value
     *
     * @return int
     */
    public function getKillusernum(){
      return $this->_get(3);
    }
    
    /**
     * Set <killusernum> value
     *
     * @param int $value
     * @return \RO\Cmd\SuperGvgUserData
     */
    public function setKillusernum( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <dienum> has a value
     *
     * @return boolean
     */
    public function hasDienum(){
      return $this->_has(4);
    }
    
    /**
     * Clear <dienum> value
     *
     * @return \RO\Cmd\SuperGvgUserData
     */
    public function clearDienum(){
      return $this->_clear(4);
    }
    
    /**
     * Get <dienum> value
     *
     * @return int
     */
    public function getDienum(){
      return $this->_get(4);
    }
    
    /**
     * Set <dienum> value
     *
     * @param int $value
     * @return \RO\Cmd\SuperGvgUserData
     */
    public function setDienum( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <chipnum> has a value
     *
     * @return boolean
     */
    public function hasChipnum(){
      return $this->_has(5);
    }
    
    /**
     * Clear <chipnum> value
     *
     * @return \RO\Cmd\SuperGvgUserData
     */
    public function clearChipnum(){
      return $this->_clear(5);
    }
    
    /**
     * Get <chipnum> value
     *
     * @return int
     */
    public function getChipnum(){
      return $this->_get(5);
    }
    
    /**
     * Set <chipnum> value
     *
     * @param int $value
     * @return \RO\Cmd\SuperGvgUserData
     */
    public function setChipnum( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <towertime> has a value
     *
     * @return boolean
     */
    public function hasTowertime(){
      return $this->_has(6);
    }
    
    /**
     * Clear <towertime> value
     *
     * @return \RO\Cmd\SuperGvgUserData
     */
    public function clearTowertime(){
      return $this->_clear(6);
    }
    
    /**
     * Get <towertime> value
     *
     * @return int
     */
    public function getTowertime(){
      return $this->_get(6);
    }
    
    /**
     * Set <towertime> value
     *
     * @param int $value
     * @return \RO\Cmd\SuperGvgUserData
     */
    public function setTowertime( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <healhp> has a value
     *
     * @return boolean
     */
    public function hasHealhp(){
      return $this->_has(7);
    }
    
    /**
     * Clear <healhp> value
     *
     * @return \RO\Cmd\SuperGvgUserData
     */
    public function clearHealhp(){
      return $this->_clear(7);
    }
    
    /**
     * Get <healhp> value
     *
     * @return int
     */
    public function getHealhp(){
      return $this->_get(7);
    }
    
    /**
     * Set <healhp> value
     *
     * @param int $value
     * @return \RO\Cmd\SuperGvgUserData
     */
    public function setHealhp( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <relivenum> has a value
     *
     * @return boolean
     */
    public function hasRelivenum(){
      return $this->_has(8);
    }
    
    /**
     * Clear <relivenum> value
     *
     * @return \RO\Cmd\SuperGvgUserData
     */
    public function clearRelivenum(){
      return $this->_clear(8);
    }
    
    /**
     * Get <relivenum> value
     *
     * @return int
     */
    public function getRelivenum(){
      return $this->_get(8);
    }
    
    /**
     * Set <relivenum> value
     *
     * @param int $value
     * @return \RO\Cmd\SuperGvgUserData
     */
    public function setRelivenum( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <metaldamage> has a value
     *
     * @return boolean
     */
    public function hasMetaldamage(){
      return $this->_has(9);
    }
    
    /**
     * Clear <metaldamage> value
     *
     * @return \RO\Cmd\SuperGvgUserData
     */
    public function clearMetaldamage(){
      return $this->_clear(9);
    }
    
    /**
     * Get <metaldamage> value
     *
     * @return int
     */
    public function getMetaldamage(){
      return $this->_get(9);
    }
    
    /**
     * Set <metaldamage> value
     *
     * @param int $value
     * @return \RO\Cmd\SuperGvgUserData
     */
    public function setMetaldamage( $value){
      return $this->_set(9, $value);
    }
  }
}

