<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: GuildCmd.proto

namespace RO\Cmd {

  class GuildSummaryData extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $guid = 0;
    
    /**  @var int */
    public $level = 0;
    
    /**  @var int */
    public $zoneid = 0;
    
    /**  @var int */
    public $curmember = 0;
    
    /**  @var int */
    public $maxmember = 0;
    
    /**  @var int */
    public $cityid = 0;
    
    /**  @var int - \RO\Cmd\EGender */
    public $chairmangender = \RO\Cmd\EGender::EGENDER_MIN;
    
    /**  @var string */
    public $chairmanname = null;
    
    /**  @var string */
    public $guildname = null;
    
    /**  @var string */
    public $recruitinfo = null;
    
    /**  @var string */
    public $portrait = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.GuildSummaryData');

      // OPTIONAL UINT64 guid = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "guid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 level = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "level";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 zoneid = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "zoneid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 curmember = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "curmember";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 maxmember = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "maxmember";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 cityid = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "cityid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL ENUM chairmangender = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "chairmangender";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\EGender';
      $f->default   = \RO\Cmd\EGender::EGENDER_MIN;
      $descriptor->addField($f);

      // OPTIONAL STRING chairmanname = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "chairmanname";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING guildname = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "guildname";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING recruitinfo = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "recruitinfo";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING portrait = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "portrait";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <guid> has a value
     *
     * @return boolean
     */
    public function hasGuid(){
      return $this->_has(1);
    }
    
    /**
     * Clear <guid> value
     *
     * @return \RO\Cmd\GuildSummaryData
     */
    public function clearGuid(){
      return $this->_clear(1);
    }
    
    /**
     * Get <guid> value
     *
     * @return int
     */
    public function getGuid(){
      return $this->_get(1);
    }
    
    /**
     * Set <guid> value
     *
     * @param int $value
     * @return \RO\Cmd\GuildSummaryData
     */
    public function setGuid( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <level> has a value
     *
     * @return boolean
     */
    public function hasLevel(){
      return $this->_has(2);
    }
    
    /**
     * Clear <level> value
     *
     * @return \RO\Cmd\GuildSummaryData
     */
    public function clearLevel(){
      return $this->_clear(2);
    }
    
    /**
     * Get <level> value
     *
     * @return int
     */
    public function getLevel(){
      return $this->_get(2);
    }
    
    /**
     * Set <level> value
     *
     * @param int $value
     * @return \RO\Cmd\GuildSummaryData
     */
    public function setLevel( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <zoneid> has a value
     *
     * @return boolean
     */
    public function hasZoneid(){
      return $this->_has(10);
    }
    
    /**
     * Clear <zoneid> value
     *
     * @return \RO\Cmd\GuildSummaryData
     */
    public function clearZoneid(){
      return $this->_clear(10);
    }
    
    /**
     * Get <zoneid> value
     *
     * @return int
     */
    public function getZoneid(){
      return $this->_get(10);
    }
    
    /**
     * Set <zoneid> value
     *
     * @param int $value
     * @return \RO\Cmd\GuildSummaryData
     */
    public function setZoneid( $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <curmember> has a value
     *
     * @return boolean
     */
    public function hasCurmember(){
      return $this->_has(3);
    }
    
    /**
     * Clear <curmember> value
     *
     * @return \RO\Cmd\GuildSummaryData
     */
    public function clearCurmember(){
      return $this->_clear(3);
    }
    
    /**
     * Get <curmember> value
     *
     * @return int
     */
    public function getCurmember(){
      return $this->_get(3);
    }
    
    /**
     * Set <curmember> value
     *
     * @param int $value
     * @return \RO\Cmd\GuildSummaryData
     */
    public function setCurmember( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <maxmember> has a value
     *
     * @return boolean
     */
    public function hasMaxmember(){
      return $this->_has(4);
    }
    
    /**
     * Clear <maxmember> value
     *
     * @return \RO\Cmd\GuildSummaryData
     */
    public function clearMaxmember(){
      return $this->_clear(4);
    }
    
    /**
     * Get <maxmember> value
     *
     * @return int
     */
    public function getMaxmember(){
      return $this->_get(4);
    }
    
    /**
     * Set <maxmember> value
     *
     * @param int $value
     * @return \RO\Cmd\GuildSummaryData
     */
    public function setMaxmember( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <cityid> has a value
     *
     * @return boolean
     */
    public function hasCityid(){
      return $this->_has(11);
    }
    
    /**
     * Clear <cityid> value
     *
     * @return \RO\Cmd\GuildSummaryData
     */
    public function clearCityid(){
      return $this->_clear(11);
    }
    
    /**
     * Get <cityid> value
     *
     * @return int
     */
    public function getCityid(){
      return $this->_get(11);
    }
    
    /**
     * Set <cityid> value
     *
     * @param int $value
     * @return \RO\Cmd\GuildSummaryData
     */
    public function setCityid( $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <chairmangender> has a value
     *
     * @return boolean
     */
    public function hasChairmangender(){
      return $this->_has(5);
    }
    
    /**
     * Clear <chairmangender> value
     *
     * @return \RO\Cmd\GuildSummaryData
     */
    public function clearChairmangender(){
      return $this->_clear(5);
    }
    
    /**
     * Get <chairmangender> value
     *
     * @return int - \RO\Cmd\EGender
     */
    public function getChairmangender(){
      return $this->_get(5);
    }
    
    /**
     * Set <chairmangender> value
     *
     * @param int - \RO\Cmd\EGender $value
     * @return \RO\Cmd\GuildSummaryData
     */
    public function setChairmangender( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <chairmanname> has a value
     *
     * @return boolean
     */
    public function hasChairmanname(){
      return $this->_has(6);
    }
    
    /**
     * Clear <chairmanname> value
     *
     * @return \RO\Cmd\GuildSummaryData
     */
    public function clearChairmanname(){
      return $this->_clear(6);
    }
    
    /**
     * Get <chairmanname> value
     *
     * @return string
     */
    public function getChairmanname(){
      return $this->_get(6);
    }
    
    /**
     * Set <chairmanname> value
     *
     * @param string $value
     * @return \RO\Cmd\GuildSummaryData
     */
    public function setChairmanname( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <guildname> has a value
     *
     * @return boolean
     */
    public function hasGuildname(){
      return $this->_has(7);
    }
    
    /**
     * Clear <guildname> value
     *
     * @return \RO\Cmd\GuildSummaryData
     */
    public function clearGuildname(){
      return $this->_clear(7);
    }
    
    /**
     * Get <guildname> value
     *
     * @return string
     */
    public function getGuildname(){
      return $this->_get(7);
    }
    
    /**
     * Set <guildname> value
     *
     * @param string $value
     * @return \RO\Cmd\GuildSummaryData
     */
    public function setGuildname( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <recruitinfo> has a value
     *
     * @return boolean
     */
    public function hasRecruitinfo(){
      return $this->_has(8);
    }
    
    /**
     * Clear <recruitinfo> value
     *
     * @return \RO\Cmd\GuildSummaryData
     */
    public function clearRecruitinfo(){
      return $this->_clear(8);
    }
    
    /**
     * Get <recruitinfo> value
     *
     * @return string
     */
    public function getRecruitinfo(){
      return $this->_get(8);
    }
    
    /**
     * Set <recruitinfo> value
     *
     * @param string $value
     * @return \RO\Cmd\GuildSummaryData
     */
    public function setRecruitinfo( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <portrait> has a value
     *
     * @return boolean
     */
    public function hasPortrait(){
      return $this->_has(9);
    }
    
    /**
     * Clear <portrait> value
     *
     * @return \RO\Cmd\GuildSummaryData
     */
    public function clearPortrait(){
      return $this->_clear(9);
    }
    
    /**
     * Get <portrait> value
     *
     * @return string
     */
    public function getPortrait(){
      return $this->_get(9);
    }
    
    /**
     * Set <portrait> value
     *
     * @param string $value
     * @return \RO\Cmd\GuildSummaryData
     */
    public function setPortrait( $value){
      return $this->_set(9, $value);
    }
  }
}

