<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: ActivityEvent.proto

namespace RO\Cmd {

  class AESummonInfo extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $monsterid = 0;
    
    /**  @var int */
    public $count = 0;
    
    /**  @var boolean */
    public $revive = false;
    
    /**  @var boolean */
    public $iscreate = false;
    
    /**  @var string */
    public $namezh = null;
    
    /**  @var string */
    public $nameen = null;
    
    /**  @var string */
    public $icon = null;
    
    /**  @var string */
    public $type = null;
    
    /**  @var string */
    public $zone = null;
    
    /**  @var string */
    public $race = null;
    
    /**  @var string */
    public $nature = null;
    
    /**  @var string */
    public $shape = null;
    
    /**  @var int */
    public $body = 0;
    
    /**  @var int */
    public $jobexp = 0;
    
    /**  @var int */
    public $baseexp = 0;
    
    /**  @var float */
    public $str = 0;
    
    /**  @var float */
    public $dex = 0;
    
    /**  @var float */
    public $inte = 0;
    
    /**  @var float */
    public $vit = 0;
    
    /**  @var float */
    public $agi = 0;
    
    /**  @var float */
    public $luk = 0;
    
    /**  @var float */
    public $atk = 0;
    
    /**  @var float */
    public $matk = 0;
    
    /**  @var float */
    public $def = 0;
    
    /**  @var float */
    public $mdef = 0;
    
    /**  @var float */
    public $hp = 0;
    
    /**  @var float */
    public $hit = 0;
    
    /**  @var float */
    public $flee = 0;
    
    /**  @var float */
    public $movespd = 0;
    
    /**  @var float */
    public $movespdrate = 0;
    
    /**  @var float */
    public $scale = 0;
    
    /**  @var int */
    public $normalskill = 0;
    
    /**  @var int */
    public $rewardid = 0;
    
    /**  @var \RO\Cmd\AEReward[]  */
    public $rewards = array();
    
    /**  @var \RO\Cmd\AEMap[]  */
    public $map = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.AESummonInfo');

      // OPTIONAL UINT32 monsterid = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "monsterid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 count = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "count";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL BOOL revive = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "revive";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = false;
      $descriptor->addField($f);

      // OPTIONAL BOOL iscreate = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "iscreate";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = false;
      $descriptor->addField($f);

      // OPTIONAL STRING namezh = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "namezh";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING nameen = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "nameen";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING icon = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "icon";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING type = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING zone = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "zone";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING race = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "race";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING nature = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "nature";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING shape = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "shape";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 body = 13
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 13;
      $f->name      = "body";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 jobexp = 14
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 14;
      $f->name      = "jobexp";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 baseexp = 15
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 15;
      $f->name      = "baseexp";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL FLOAT str = 16
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 16;
      $f->name      = "str";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL FLOAT dex = 17
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 17;
      $f->name      = "dex";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL FLOAT inte = 18
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 18;
      $f->name      = "inte";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL FLOAT vit = 19
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 19;
      $f->name      = "vit";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL FLOAT agi = 20
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 20;
      $f->name      = "agi";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL FLOAT luk = 21
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 21;
      $f->name      = "luk";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL FLOAT atk = 22
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 22;
      $f->name      = "atk";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL FLOAT matk = 23
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 23;
      $f->name      = "matk";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL FLOAT def = 24
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 24;
      $f->name      = "def";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL FLOAT mdef = 25
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 25;
      $f->name      = "mdef";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL FLOAT hp = 26
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 26;
      $f->name      = "hp";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL FLOAT hit = 27
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 27;
      $f->name      = "hit";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL FLOAT flee = 28
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 28;
      $f->name      = "flee";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL FLOAT movespd = 29
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 29;
      $f->name      = "movespd";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL FLOAT movespdrate = 30
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 30;
      $f->name      = "movespdrate";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL FLOAT scale = 31
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 31;
      $f->name      = "scale";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 normalskill = 32
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 32;
      $f->name      = "normalskill";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 rewardid = 33
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 33;
      $f->name      = "rewardid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // REPEATED MESSAGE rewards = 34
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 34;
      $f->name      = "rewards";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\AEReward';
      $descriptor->addField($f);

      // REPEATED MESSAGE map = 35
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 35;
      $f->name      = "map";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\AEMap';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <monsterid> has a value
     *
     * @return boolean
     */
    public function hasMonsterid(){
      return $this->_has(1);
    }
    
    /**
     * Clear <monsterid> value
     *
     * @return \RO\Cmd\AESummonInfo
     */
    public function clearMonsterid(){
      return $this->_clear(1);
    }
    
    /**
     * Get <monsterid> value
     *
     * @return int
     */
    public function getMonsterid(){
      return $this->_get(1);
    }
    
    /**
     * Set <monsterid> value
     *
     * @param int $value
     * @return \RO\Cmd\AESummonInfo
     */
    public function setMonsterid( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <count> has a value
     *
     * @return boolean
     */
    public function hasCount(){
      return $this->_has(2);
    }
    
    /**
     * Clear <count> value
     *
     * @return \RO\Cmd\AESummonInfo
     */
    public function clearCount(){
      return $this->_clear(2);
    }
    
    /**
     * Get <count> value
     *
     * @return int
     */
    public function getCount(){
      return $this->_get(2);
    }
    
    /**
     * Set <count> value
     *
     * @param int $value
     * @return \RO\Cmd\AESummonInfo
     */
    public function setCount( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <revive> has a value
     *
     * @return boolean
     */
    public function hasRevive(){
      return $this->_has(3);
    }
    
    /**
     * Clear <revive> value
     *
     * @return \RO\Cmd\AESummonInfo
     */
    public function clearRevive(){
      return $this->_clear(3);
    }
    
    /**
     * Get <revive> value
     *
     * @return boolean
     */
    public function getRevive(){
      return $this->_get(3);
    }
    
    /**
     * Set <revive> value
     *
     * @param boolean $value
     * @return \RO\Cmd\AESummonInfo
     */
    public function setRevive( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <iscreate> has a value
     *
     * @return boolean
     */
    public function hasIscreate(){
      return $this->_has(4);
    }
    
    /**
     * Clear <iscreate> value
     *
     * @return \RO\Cmd\AESummonInfo
     */
    public function clearIscreate(){
      return $this->_clear(4);
    }
    
    /**
     * Get <iscreate> value
     *
     * @return boolean
     */
    public function getIscreate(){
      return $this->_get(4);
    }
    
    /**
     * Set <iscreate> value
     *
     * @param boolean $value
     * @return \RO\Cmd\AESummonInfo
     */
    public function setIscreate( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <namezh> has a value
     *
     * @return boolean
     */
    public function hasNamezh(){
      return $this->_has(5);
    }
    
    /**
     * Clear <namezh> value
     *
     * @return \RO\Cmd\AESummonInfo
     */
    public function clearNamezh(){
      return $this->_clear(5);
    }
    
    /**
     * Get <namezh> value
     *
     * @return string
     */
    public function getNamezh(){
      return $this->_get(5);
    }
    
    /**
     * Set <namezh> value
     *
     * @param string $value
     * @return \RO\Cmd\AESummonInfo
     */
    public function setNamezh( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <nameen> has a value
     *
     * @return boolean
     */
    public function hasNameen(){
      return $this->_has(6);
    }
    
    /**
     * Clear <nameen> value
     *
     * @return \RO\Cmd\AESummonInfo
     */
    public function clearNameen(){
      return $this->_clear(6);
    }
    
    /**
     * Get <nameen> value
     *
     * @return string
     */
    public function getNameen(){
      return $this->_get(6);
    }
    
    /**
     * Set <nameen> value
     *
     * @param string $value
     * @return \RO\Cmd\AESummonInfo
     */
    public function setNameen( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <icon> has a value
     *
     * @return boolean
     */
    public function hasIcon(){
      return $this->_has(7);
    }
    
    /**
     * Clear <icon> value
     *
     * @return \RO\Cmd\AESummonInfo
     */
    public function clearIcon(){
      return $this->_clear(7);
    }
    
    /**
     * Get <icon> value
     *
     * @return string
     */
    public function getIcon(){
      return $this->_get(7);
    }
    
    /**
     * Set <icon> value
     *
     * @param string $value
     * @return \RO\Cmd\AESummonInfo
     */
    public function setIcon( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(8);
    }
    
    /**
     * Clear <type> value
     *
     * @return \RO\Cmd\AESummonInfo
     */
    public function clearType(){
      return $this->_clear(8);
    }
    
    /**
     * Get <type> value
     *
     * @return string
     */
    public function getType(){
      return $this->_get(8);
    }
    
    /**
     * Set <type> value
     *
     * @param string $value
     * @return \RO\Cmd\AESummonInfo
     */
    public function setType( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <zone> has a value
     *
     * @return boolean
     */
    public function hasZone(){
      return $this->_has(9);
    }
    
    /**
     * Clear <zone> value
     *
     * @return \RO\Cmd\AESummonInfo
     */
    public function clearZone(){
      return $this->_clear(9);
    }
    
    /**
     * Get <zone> value
     *
     * @return string
     */
    public function getZone(){
      return $this->_get(9);
    }
    
    /**
     * Set <zone> value
     *
     * @param string $value
     * @return \RO\Cmd\AESummonInfo
     */
    public function setZone( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <race> has a value
     *
     * @return boolean
     */
    public function hasRace(){
      return $this->_has(10);
    }
    
    /**
     * Clear <race> value
     *
     * @return \RO\Cmd\AESummonInfo
     */
    public function clearRace(){
      return $this->_clear(10);
    }
    
    /**
     * Get <race> value
     *
     * @return string
     */
    public function getRace(){
      return $this->_get(10);
    }
    
    /**
     * Set <race> value
     *
     * @param string $value
     * @return \RO\Cmd\AESummonInfo
     */
    public function setRace( $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <nature> has a value
     *
     * @return boolean
     */
    public function hasNature(){
      return $this->_has(11);
    }
    
    /**
     * Clear <nature> value
     *
     * @return \RO\Cmd\AESummonInfo
     */
    public function clearNature(){
      return $this->_clear(11);
    }
    
    /**
     * Get <nature> value
     *
     * @return string
     */
    public function getNature(){
      return $this->_get(11);
    }
    
    /**
     * Set <nature> value
     *
     * @param string $value
     * @return \RO\Cmd\AESummonInfo
     */
    public function setNature( $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <shape> has a value
     *
     * @return boolean
     */
    public function hasShape(){
      return $this->_has(12);
    }
    
    /**
     * Clear <shape> value
     *
     * @return \RO\Cmd\AESummonInfo
     */
    public function clearShape(){
      return $this->_clear(12);
    }
    
    /**
     * Get <shape> value
     *
     * @return string
     */
    public function getShape(){
      return $this->_get(12);
    }
    
    /**
     * Set <shape> value
     *
     * @param string $value
     * @return \RO\Cmd\AESummonInfo
     */
    public function setShape( $value){
      return $this->_set(12, $value);
    }
    
    /**
     * Check if <body> has a value
     *
     * @return boolean
     */
    public function hasBody(){
      return $this->_has(13);
    }
    
    /**
     * Clear <body> value
     *
     * @return \RO\Cmd\AESummonInfo
     */
    public function clearBody(){
      return $this->_clear(13);
    }
    
    /**
     * Get <body> value
     *
     * @return int
     */
    public function getBody(){
      return $this->_get(13);
    }
    
    /**
     * Set <body> value
     *
     * @param int $value
     * @return \RO\Cmd\AESummonInfo
     */
    public function setBody( $value){
      return $this->_set(13, $value);
    }
    
    /**
     * Check if <jobexp> has a value
     *
     * @return boolean
     */
    public function hasJobexp(){
      return $this->_has(14);
    }
    
    /**
     * Clear <jobexp> value
     *
     * @return \RO\Cmd\AESummonInfo
     */
    public function clearJobexp(){
      return $this->_clear(14);
    }
    
    /**
     * Get <jobexp> value
     *
     * @return int
     */
    public function getJobexp(){
      return $this->_get(14);
    }
    
    /**
     * Set <jobexp> value
     *
     * @param int $value
     * @return \RO\Cmd\AESummonInfo
     */
    public function setJobexp( $value){
      return $this->_set(14, $value);
    }
    
    /**
     * Check if <baseexp> has a value
     *
     * @return boolean
     */
    public function hasBaseexp(){
      return $this->_has(15);
    }
    
    /**
     * Clear <baseexp> value
     *
     * @return \RO\Cmd\AESummonInfo
     */
    public function clearBaseexp(){
      return $this->_clear(15);
    }
    
    /**
     * Get <baseexp> value
     *
     * @return int
     */
    public function getBaseexp(){
      return $this->_get(15);
    }
    
    /**
     * Set <baseexp> value
     *
     * @param int $value
     * @return \RO\Cmd\AESummonInfo
     */
    public function setBaseexp( $value){
      return $this->_set(15, $value);
    }
    
    /**
     * Check if <str> has a value
     *
     * @return boolean
     */
    public function hasStr(){
      return $this->_has(16);
    }
    
    /**
     * Clear <str> value
     *
     * @return \RO\Cmd\AESummonInfo
     */
    public function clearStr(){
      return $this->_clear(16);
    }
    
    /**
     * Get <str> value
     *
     * @return float
     */
    public function getStr(){
      return $this->_get(16);
    }
    
    /**
     * Set <str> value
     *
     * @param float $value
     * @return \RO\Cmd\AESummonInfo
     */
    public function setStr( $value){
      return $this->_set(16, $value);
    }
    
    /**
     * Check if <dex> has a value
     *
     * @return boolean
     */
    public function hasDex(){
      return $this->_has(17);
    }
    
    /**
     * Clear <dex> value
     *
     * @return \RO\Cmd\AESummonInfo
     */
    public function clearDex(){
      return $this->_clear(17);
    }
    
    /**
     * Get <dex> value
     *
     * @return float
     */
    public function getDex(){
      return $this->_get(17);
    }
    
    /**
     * Set <dex> value
     *
     * @param float $value
     * @return \RO\Cmd\AESummonInfo
     */
    public function setDex( $value){
      return $this->_set(17, $value);
    }
    
    /**
     * Check if <inte> has a value
     *
     * @return boolean
     */
    public function hasInte(){
      return $this->_has(18);
    }
    
    /**
     * Clear <inte> value
     *
     * @return \RO\Cmd\AESummonInfo
     */
    public function clearInte(){
      return $this->_clear(18);
    }
    
    /**
     * Get <inte> value
     *
     * @return float
     */
    public function getInte(){
      return $this->_get(18);
    }
    
    /**
     * Set <inte> value
     *
     * @param float $value
     * @return \RO\Cmd\AESummonInfo
     */
    public function setInte( $value){
      return $this->_set(18, $value);
    }
    
    /**
     * Check if <vit> has a value
     *
     * @return boolean
     */
    public function hasVit(){
      return $this->_has(19);
    }
    
    /**
     * Clear <vit> value
     *
     * @return \RO\Cmd\AESummonInfo
     */
    public function clearVit(){
      return $this->_clear(19);
    }
    
    /**
     * Get <vit> value
     *
     * @return float
     */
    public function getVit(){
      return $this->_get(19);
    }
    
    /**
     * Set <vit> value
     *
     * @param float $value
     * @return \RO\Cmd\AESummonInfo
     */
    public function setVit( $value){
      return $this->_set(19, $value);
    }
    
    /**
     * Check if <agi> has a value
     *
     * @return boolean
     */
    public function hasAgi(){
      return $this->_has(20);
    }
    
    /**
     * Clear <agi> value
     *
     * @return \RO\Cmd\AESummonInfo
     */
    public function clearAgi(){
      return $this->_clear(20);
    }
    
    /**
     * Get <agi> value
     *
     * @return float
     */
    public function getAgi(){
      return $this->_get(20);
    }
    
    /**
     * Set <agi> value
     *
     * @param float $value
     * @return \RO\Cmd\AESummonInfo
     */
    public function setAgi( $value){
      return $this->_set(20, $value);
    }
    
    /**
     * Check if <luk> has a value
     *
     * @return boolean
     */
    public function hasLuk(){
      return $this->_has(21);
    }
    
    /**
     * Clear <luk> value
     *
     * @return \RO\Cmd\AESummonInfo
     */
    public function clearLuk(){
      return $this->_clear(21);
    }
    
    /**
     * Get <luk> value
     *
     * @return float
     */
    public function getLuk(){
      return $this->_get(21);
    }
    
    /**
     * Set <luk> value
     *
     * @param float $value
     * @return \RO\Cmd\AESummonInfo
     */
    public function setLuk( $value){
      return $this->_set(21, $value);
    }
    
    /**
     * Check if <atk> has a value
     *
     * @return boolean
     */
    public function hasAtk(){
      return $this->_has(22);
    }
    
    /**
     * Clear <atk> value
     *
     * @return \RO\Cmd\AESummonInfo
     */
    public function clearAtk(){
      return $this->_clear(22);
    }
    
    /**
     * Get <atk> value
     *
     * @return float
     */
    public function getAtk(){
      return $this->_get(22);
    }
    
    /**
     * Set <atk> value
     *
     * @param float $value
     * @return \RO\Cmd\AESummonInfo
     */
    public function setAtk( $value){
      return $this->_set(22, $value);
    }
    
    /**
     * Check if <matk> has a value
     *
     * @return boolean
     */
    public function hasMatk(){
      return $this->_has(23);
    }
    
    /**
     * Clear <matk> value
     *
     * @return \RO\Cmd\AESummonInfo
     */
    public function clearMatk(){
      return $this->_clear(23);
    }
    
    /**
     * Get <matk> value
     *
     * @return float
     */
    public function getMatk(){
      return $this->_get(23);
    }
    
    /**
     * Set <matk> value
     *
     * @param float $value
     * @return \RO\Cmd\AESummonInfo
     */
    public function setMatk( $value){
      return $this->_set(23, $value);
    }
    
    /**
     * Check if <def> has a value
     *
     * @return boolean
     */
    public function hasDef(){
      return $this->_has(24);
    }
    
    /**
     * Clear <def> value
     *
     * @return \RO\Cmd\AESummonInfo
     */
    public function clearDef(){
      return $this->_clear(24);
    }
    
    /**
     * Get <def> value
     *
     * @return float
     */
    public function getDef(){
      return $this->_get(24);
    }
    
    /**
     * Set <def> value
     *
     * @param float $value
     * @return \RO\Cmd\AESummonInfo
     */
    public function setDef( $value){
      return $this->_set(24, $value);
    }
    
    /**
     * Check if <mdef> has a value
     *
     * @return boolean
     */
    public function hasMdef(){
      return $this->_has(25);
    }
    
    /**
     * Clear <mdef> value
     *
     * @return \RO\Cmd\AESummonInfo
     */
    public function clearMdef(){
      return $this->_clear(25);
    }
    
    /**
     * Get <mdef> value
     *
     * @return float
     */
    public function getMdef(){
      return $this->_get(25);
    }
    
    /**
     * Set <mdef> value
     *
     * @param float $value
     * @return \RO\Cmd\AESummonInfo
     */
    public function setMdef( $value){
      return $this->_set(25, $value);
    }
    
    /**
     * Check if <hp> has a value
     *
     * @return boolean
     */
    public function hasHp(){
      return $this->_has(26);
    }
    
    /**
     * Clear <hp> value
     *
     * @return \RO\Cmd\AESummonInfo
     */
    public function clearHp(){
      return $this->_clear(26);
    }
    
    /**
     * Get <hp> value
     *
     * @return float
     */
    public function getHp(){
      return $this->_get(26);
    }
    
    /**
     * Set <hp> value
     *
     * @param float $value
     * @return \RO\Cmd\AESummonInfo
     */
    public function setHp( $value){
      return $this->_set(26, $value);
    }
    
    /**
     * Check if <hit> has a value
     *
     * @return boolean
     */
    public function hasHit(){
      return $this->_has(27);
    }
    
    /**
     * Clear <hit> value
     *
     * @return \RO\Cmd\AESummonInfo
     */
    public function clearHit(){
      return $this->_clear(27);
    }
    
    /**
     * Get <hit> value
     *
     * @return float
     */
    public function getHit(){
      return $this->_get(27);
    }
    
    /**
     * Set <hit> value
     *
     * @param float $value
     * @return \RO\Cmd\AESummonInfo
     */
    public function setHit( $value){
      return $this->_set(27, $value);
    }
    
    /**
     * Check if <flee> has a value
     *
     * @return boolean
     */
    public function hasFlee(){
      return $this->_has(28);
    }
    
    /**
     * Clear <flee> value
     *
     * @return \RO\Cmd\AESummonInfo
     */
    public function clearFlee(){
      return $this->_clear(28);
    }
    
    /**
     * Get <flee> value
     *
     * @return float
     */
    public function getFlee(){
      return $this->_get(28);
    }
    
    /**
     * Set <flee> value
     *
     * @param float $value
     * @return \RO\Cmd\AESummonInfo
     */
    public function setFlee( $value){
      return $this->_set(28, $value);
    }
    
    /**
     * Check if <movespd> has a value
     *
     * @return boolean
     */
    public function hasMovespd(){
      return $this->_has(29);
    }
    
    /**
     * Clear <movespd> value
     *
     * @return \RO\Cmd\AESummonInfo
     */
    public function clearMovespd(){
      return $this->_clear(29);
    }
    
    /**
     * Get <movespd> value
     *
     * @return float
     */
    public function getMovespd(){
      return $this->_get(29);
    }
    
    /**
     * Set <movespd> value
     *
     * @param float $value
     * @return \RO\Cmd\AESummonInfo
     */
    public function setMovespd( $value){
      return $this->_set(29, $value);
    }
    
    /**
     * Check if <movespdrate> has a value
     *
     * @return boolean
     */
    public function hasMovespdrate(){
      return $this->_has(30);
    }
    
    /**
     * Clear <movespdrate> value
     *
     * @return \RO\Cmd\AESummonInfo
     */
    public function clearMovespdrate(){
      return $this->_clear(30);
    }
    
    /**
     * Get <movespdrate> value
     *
     * @return float
     */
    public function getMovespdrate(){
      return $this->_get(30);
    }
    
    /**
     * Set <movespdrate> value
     *
     * @param float $value
     * @return \RO\Cmd\AESummonInfo
     */
    public function setMovespdrate( $value){
      return $this->_set(30, $value);
    }
    
    /**
     * Check if <scale> has a value
     *
     * @return boolean
     */
    public function hasScale(){
      return $this->_has(31);
    }
    
    /**
     * Clear <scale> value
     *
     * @return \RO\Cmd\AESummonInfo
     */
    public function clearScale(){
      return $this->_clear(31);
    }
    
    /**
     * Get <scale> value
     *
     * @return float
     */
    public function getScale(){
      return $this->_get(31);
    }
    
    /**
     * Set <scale> value
     *
     * @param float $value
     * @return \RO\Cmd\AESummonInfo
     */
    public function setScale( $value){
      return $this->_set(31, $value);
    }
    
    /**
     * Check if <normalskill> has a value
     *
     * @return boolean
     */
    public function hasNormalskill(){
      return $this->_has(32);
    }
    
    /**
     * Clear <normalskill> value
     *
     * @return \RO\Cmd\AESummonInfo
     */
    public function clearNormalskill(){
      return $this->_clear(32);
    }
    
    /**
     * Get <normalskill> value
     *
     * @return int
     */
    public function getNormalskill(){
      return $this->_get(32);
    }
    
    /**
     * Set <normalskill> value
     *
     * @param int $value
     * @return \RO\Cmd\AESummonInfo
     */
    public function setNormalskill( $value){
      return $this->_set(32, $value);
    }
    
    /**
     * Check if <rewardid> has a value
     *
     * @return boolean
     */
    public function hasRewardid(){
      return $this->_has(33);
    }
    
    /**
     * Clear <rewardid> value
     *
     * @return \RO\Cmd\AESummonInfo
     */
    public function clearRewardid(){
      return $this->_clear(33);
    }
    
    /**
     * Get <rewardid> value
     *
     * @return int
     */
    public function getRewardid(){
      return $this->_get(33);
    }
    
    /**
     * Set <rewardid> value
     *
     * @param int $value
     * @return \RO\Cmd\AESummonInfo
     */
    public function setRewardid( $value){
      return $this->_set(33, $value);
    }
    
    /**
     * Check if <rewards> has a value
     *
     * @return boolean
     */
    public function hasRewards(){
      return $this->_has(34);
    }
    
    /**
     * Clear <rewards> value
     *
     * @return \RO\Cmd\AESummonInfo
     */
    public function clearRewards(){
      return $this->_clear(34);
    }
    
    /**
     * Get <rewards> value
     *
     * @param int $idx
     * @return \RO\Cmd\AEReward
     */
    public function getRewards($idx = NULL){
      return $this->_get(34, $idx);
    }
    
    /**
     * Set <rewards> value
     *
     * @param \RO\Cmd\AEReward $value
     * @return \RO\Cmd\AESummonInfo
     */
    public function setRewards(\RO\Cmd\AEReward $value, $idx = NULL){
      return $this->_set(34, $value, $idx);
    }
    
    /**
     * Get all elements of <rewards>
     *
     * @return \RO\Cmd\AEReward[]
     */
    public function getRewardsList(){
     return $this->_get(34);
    }
    
    /**
     * Add a new element to <rewards>
     *
     * @param \RO\Cmd\AEReward $value
     * @return \RO\Cmd\AESummonInfo
     */
    public function addRewards(\RO\Cmd\AEReward $value){
     return $this->_add(34, $value);
    }
    
    /**
     * Check if <map> has a value
     *
     * @return boolean
     */
    public function hasMap(){
      return $this->_has(35);
    }
    
    /**
     * Clear <map> value
     *
     * @return \RO\Cmd\AESummonInfo
     */
    public function clearMap(){
      return $this->_clear(35);
    }
    
    /**
     * Get <map> value
     *
     * @param int $idx
     * @return \RO\Cmd\AEMap
     */
    public function getMap($idx = NULL){
      return $this->_get(35, $idx);
    }
    
    /**
     * Set <map> value
     *
     * @param \RO\Cmd\AEMap $value
     * @return \RO\Cmd\AESummonInfo
     */
    public function setMap(\RO\Cmd\AEMap $value, $idx = NULL){
      return $this->_set(35, $value, $idx);
    }
    
    /**
     * Get all elements of <map>
     *
     * @return \RO\Cmd\AEMap[]
     */
    public function getMapList(){
     return $this->_get(35);
    }
    
    /**
     * Add a new element to <map>
     *
     * @param \RO\Cmd\AEMap $value
     * @return \RO\Cmd\AESummonInfo
     */
    public function addMap(\RO\Cmd\AEMap $value){
     return $this->_add(35, $value);
    }
  }
}

