<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: GuildCmd.proto

namespace RO\Cmd {

  class BlobDonate extends \DrSlump\Protobuf\Message {

    /**  @var \RO\Cmd\DonateItem[]  */
    public $items = array();
    
    /**  @var int[]  */
    public $steps = array();
    
    /**  @var int */
    public $donatetime1 = 0;
    
    /**  @var int */
    public $donatetime2 = 0;
    
    /**  @var int */
    public $donatetime3 = 0;
    
    /**  @var int */
    public $donatetime4 = 0;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.BlobDonate');

      // REPEATED MESSAGE items = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "items";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\DonateItem';
      $descriptor->addField($f);

      // REPEATED UINT32 steps = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "steps";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL UINT32 donatetime1 = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "donatetime1";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 donatetime2 = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "donatetime2";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 donatetime3 = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "donatetime3";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 donatetime4 = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "donatetime4";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <items> has a value
     *
     * @return boolean
     */
    public function hasItems(){
      return $this->_has(1);
    }
    
    /**
     * Clear <items> value
     *
     * @return \RO\Cmd\BlobDonate
     */
    public function clearItems(){
      return $this->_clear(1);
    }
    
    /**
     * Get <items> value
     *
     * @param int $idx
     * @return \RO\Cmd\DonateItem
     */
    public function getItems($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <items> value
     *
     * @param \RO\Cmd\DonateItem $value
     * @return \RO\Cmd\BlobDonate
     */
    public function setItems(\RO\Cmd\DonateItem $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <items>
     *
     * @return \RO\Cmd\DonateItem[]
     */
    public function getItemsList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <items>
     *
     * @param \RO\Cmd\DonateItem $value
     * @return \RO\Cmd\BlobDonate
     */
    public function addItems(\RO\Cmd\DonateItem $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <steps> has a value
     *
     * @return boolean
     */
    public function hasSteps(){
      return $this->_has(2);
    }
    
    /**
     * Clear <steps> value
     *
     * @return \RO\Cmd\BlobDonate
     */
    public function clearSteps(){
      return $this->_clear(2);
    }
    
    /**
     * Get <steps> value
     *
     * @param int $idx
     * @return int
     */
    public function getSteps($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <steps> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobDonate
     */
    public function setSteps( $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <steps>
     *
     * @return int[]
     */
    public function getStepsList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <steps>
     *
     * @param int $value
     * @return \RO\Cmd\BlobDonate
     */
    public function addSteps( $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <donatetime1> has a value
     *
     * @return boolean
     */
    public function hasDonatetime1(){
      return $this->_has(3);
    }
    
    /**
     * Clear <donatetime1> value
     *
     * @return \RO\Cmd\BlobDonate
     */
    public function clearDonatetime1(){
      return $this->_clear(3);
    }
    
    /**
     * Get <donatetime1> value
     *
     * @return int
     */
    public function getDonatetime1(){
      return $this->_get(3);
    }
    
    /**
     * Set <donatetime1> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobDonate
     */
    public function setDonatetime1( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <donatetime2> has a value
     *
     * @return boolean
     */
    public function hasDonatetime2(){
      return $this->_has(4);
    }
    
    /**
     * Clear <donatetime2> value
     *
     * @return \RO\Cmd\BlobDonate
     */
    public function clearDonatetime2(){
      return $this->_clear(4);
    }
    
    /**
     * Get <donatetime2> value
     *
     * @return int
     */
    public function getDonatetime2(){
      return $this->_get(4);
    }
    
    /**
     * Set <donatetime2> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobDonate
     */
    public function setDonatetime2( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <donatetime3> has a value
     *
     * @return boolean
     */
    public function hasDonatetime3(){
      return $this->_has(5);
    }
    
    /**
     * Clear <donatetime3> value
     *
     * @return \RO\Cmd\BlobDonate
     */
    public function clearDonatetime3(){
      return $this->_clear(5);
    }
    
    /**
     * Get <donatetime3> value
     *
     * @return int
     */
    public function getDonatetime3(){
      return $this->_get(5);
    }
    
    /**
     * Set <donatetime3> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobDonate
     */
    public function setDonatetime3( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <donatetime4> has a value
     *
     * @return boolean
     */
    public function hasDonatetime4(){
      return $this->_has(6);
    }
    
    /**
     * Clear <donatetime4> value
     *
     * @return \RO\Cmd\BlobDonate
     */
    public function clearDonatetime4(){
      return $this->_clear(6);
    }
    
    /**
     * Get <donatetime4> value
     *
     * @return int
     */
    public function getDonatetime4(){
      return $this->_get(6);
    }
    
    /**
     * Set <donatetime4> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobDonate
     */
    public function setDonatetime4( $value){
      return $this->_set(6, $value);
    }
  }
}

