<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: SceneSkill.proto

namespace RO\Cmd {

  class SpecSkillInfo extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $id = null;
    
    /**  @var \RO\Cmd\UserAttr[]  */
    public $attrs = array();
    
    /**  @var \RO\Cmd\SkillCost[]  */
    public $cost = array();
    
    /**  @var int */
    public $changerange = 0;
    
    /**  @var int */
    public $changenum = 0;
    
    /**  @var int */
    public $changeready = 0;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.SpecSkillInfo');

      // REQUIRED UINT32 id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED MESSAGE attrs = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "attrs";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\UserAttr';
      $descriptor->addField($f);

      // REPEATED MESSAGE cost = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "cost";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\SkillCost';
      $descriptor->addField($f);

      // OPTIONAL INT32 changerange = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "changerange";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL INT32 changenum = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "changenum";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL INT32 changeready = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "changeready";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \RO\Cmd\SpecSkillInfo
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param int $value
     * @return \RO\Cmd\SpecSkillInfo
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <attrs> has a value
     *
     * @return boolean
     */
    public function hasAttrs(){
      return $this->_has(2);
    }
    
    /**
     * Clear <attrs> value
     *
     * @return \RO\Cmd\SpecSkillInfo
     */
    public function clearAttrs(){
      return $this->_clear(2);
    }
    
    /**
     * Get <attrs> value
     *
     * @param int $idx
     * @return \RO\Cmd\UserAttr
     */
    public function getAttrs($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <attrs> value
     *
     * @param \RO\Cmd\UserAttr $value
     * @return \RO\Cmd\SpecSkillInfo
     */
    public function setAttrs(\RO\Cmd\UserAttr $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <attrs>
     *
     * @return \RO\Cmd\UserAttr[]
     */
    public function getAttrsList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <attrs>
     *
     * @param \RO\Cmd\UserAttr $value
     * @return \RO\Cmd\SpecSkillInfo
     */
    public function addAttrs(\RO\Cmd\UserAttr $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <cost> has a value
     *
     * @return boolean
     */
    public function hasCost(){
      return $this->_has(3);
    }
    
    /**
     * Clear <cost> value
     *
     * @return \RO\Cmd\SpecSkillInfo
     */
    public function clearCost(){
      return $this->_clear(3);
    }
    
    /**
     * Get <cost> value
     *
     * @param int $idx
     * @return \RO\Cmd\SkillCost
     */
    public function getCost($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <cost> value
     *
     * @param \RO\Cmd\SkillCost $value
     * @return \RO\Cmd\SpecSkillInfo
     */
    public function setCost(\RO\Cmd\SkillCost $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <cost>
     *
     * @return \RO\Cmd\SkillCost[]
     */
    public function getCostList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <cost>
     *
     * @param \RO\Cmd\SkillCost $value
     * @return \RO\Cmd\SpecSkillInfo
     */
    public function addCost(\RO\Cmd\SkillCost $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <changerange> has a value
     *
     * @return boolean
     */
    public function hasChangerange(){
      return $this->_has(4);
    }
    
    /**
     * Clear <changerange> value
     *
     * @return \RO\Cmd\SpecSkillInfo
     */
    public function clearChangerange(){
      return $this->_clear(4);
    }
    
    /**
     * Get <changerange> value
     *
     * @return int
     */
    public function getChangerange(){
      return $this->_get(4);
    }
    
    /**
     * Set <changerange> value
     *
     * @param int $value
     * @return \RO\Cmd\SpecSkillInfo
     */
    public function setChangerange( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <changenum> has a value
     *
     * @return boolean
     */
    public function hasChangenum(){
      return $this->_has(5);
    }
    
    /**
     * Clear <changenum> value
     *
     * @return \RO\Cmd\SpecSkillInfo
     */
    public function clearChangenum(){
      return $this->_clear(5);
    }
    
    /**
     * Get <changenum> value
     *
     * @return int
     */
    public function getChangenum(){
      return $this->_get(5);
    }
    
    /**
     * Set <changenum> value
     *
     * @param int $value
     * @return \RO\Cmd\SpecSkillInfo
     */
    public function setChangenum( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <changeready> has a value
     *
     * @return boolean
     */
    public function hasChangeready(){
      return $this->_has(6);
    }
    
    /**
     * Clear <changeready> value
     *
     * @return \RO\Cmd\SpecSkillInfo
     */
    public function clearChangeready(){
      return $this->_clear(6);
    }
    
    /**
     * Get <changeready> value
     *
     * @return int
     */
    public function getChangeready(){
      return $this->_get(6);
    }
    
    /**
     * Set <changeready> value
     *
     * @param int $value
     * @return \RO\Cmd\SpecSkillInfo
     */
    public function setChangeready( $value){
      return $this->_set(6, $value);
    }
  }
}

