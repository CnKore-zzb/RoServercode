<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: RecordCmd.proto

namespace RO\Cmd {

  class BlobZone extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $version = null;
    
    /**  @var int */
    public $zoneid = null;
    
    /**  @var int */
    public $mapid = null;
    
    /**  @var string */
    public $cmd = null;
    
    /**  @var int */
    public $pastzoneid = null;
    
    /**  @var \RO\Cmd\RaidZone[]  */
    public $raidzonelist = array();
    
    /**  @var int */
    public $effectivetime = null;
    
    /**  @var int */
    public $type = 0;
    
    /**  @var int */
    public $roomid = null;
    
    /**  @var int */
    public $colorindex = null;
    
    /**  @var float */
    public $x = 0;
    
    /**  @var float */
    public $y = 0;
    
    /**  @var float */
    public $z = 0;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.BlobZone');

      // OPTIONAL UINT32 version = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "version";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 zoneid = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "zoneid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 mapid = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "mapid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES cmd = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "cmd";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 pastzoneid = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "pastzoneid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE raidzonelist = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "raidzonelist";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\RaidZone';
      $descriptor->addField($f);

      // OPTIONAL UINT32 effectivetime = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "effectivetime";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 type = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT64 roomid = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "roomid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 colorindex = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "colorindex";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FLOAT x = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "x";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL FLOAT y = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "y";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL FLOAT z = 13
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 13;
      $f->name      = "z";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <version> has a value
     *
     * @return boolean
     */
    public function hasVersion(){
      return $this->_has(1);
    }
    
    /**
     * Clear <version> value
     *
     * @return \RO\Cmd\BlobZone
     */
    public function clearVersion(){
      return $this->_clear(1);
    }
    
    /**
     * Get <version> value
     *
     * @return int
     */
    public function getVersion(){
      return $this->_get(1);
    }
    
    /**
     * Set <version> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobZone
     */
    public function setVersion( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <zoneid> has a value
     *
     * @return boolean
     */
    public function hasZoneid(){
      return $this->_has(2);
    }
    
    /**
     * Clear <zoneid> value
     *
     * @return \RO\Cmd\BlobZone
     */
    public function clearZoneid(){
      return $this->_clear(2);
    }
    
    /**
     * Get <zoneid> value
     *
     * @return int
     */
    public function getZoneid(){
      return $this->_get(2);
    }
    
    /**
     * Set <zoneid> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobZone
     */
    public function setZoneid( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <mapid> has a value
     *
     * @return boolean
     */
    public function hasMapid(){
      return $this->_has(3);
    }
    
    /**
     * Clear <mapid> value
     *
     * @return \RO\Cmd\BlobZone
     */
    public function clearMapid(){
      return $this->_clear(3);
    }
    
    /**
     * Get <mapid> value
     *
     * @return int
     */
    public function getMapid(){
      return $this->_get(3);
    }
    
    /**
     * Set <mapid> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobZone
     */
    public function setMapid( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <cmd> has a value
     *
     * @return boolean
     */
    public function hasCmd(){
      return $this->_has(4);
    }
    
    /**
     * Clear <cmd> value
     *
     * @return \RO\Cmd\BlobZone
     */
    public function clearCmd(){
      return $this->_clear(4);
    }
    
    /**
     * Get <cmd> value
     *
     * @return string
     */
    public function getCmd(){
      return $this->_get(4);
    }
    
    /**
     * Set <cmd> value
     *
     * @param string $value
     * @return \RO\Cmd\BlobZone
     */
    public function setCmd( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <pastzoneid> has a value
     *
     * @return boolean
     */
    public function hasPastzoneid(){
      return $this->_has(5);
    }
    
    /**
     * Clear <pastzoneid> value
     *
     * @return \RO\Cmd\BlobZone
     */
    public function clearPastzoneid(){
      return $this->_clear(5);
    }
    
    /**
     * Get <pastzoneid> value
     *
     * @return int
     */
    public function getPastzoneid(){
      return $this->_get(5);
    }
    
    /**
     * Set <pastzoneid> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobZone
     */
    public function setPastzoneid( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <raidzonelist> has a value
     *
     * @return boolean
     */
    public function hasRaidzonelist(){
      return $this->_has(6);
    }
    
    /**
     * Clear <raidzonelist> value
     *
     * @return \RO\Cmd\BlobZone
     */
    public function clearRaidzonelist(){
      return $this->_clear(6);
    }
    
    /**
     * Get <raidzonelist> value
     *
     * @param int $idx
     * @return \RO\Cmd\RaidZone
     */
    public function getRaidzonelist($idx = NULL){
      return $this->_get(6, $idx);
    }
    
    /**
     * Set <raidzonelist> value
     *
     * @param \RO\Cmd\RaidZone $value
     * @return \RO\Cmd\BlobZone
     */
    public function setRaidzonelist(\RO\Cmd\RaidZone $value, $idx = NULL){
      return $this->_set(6, $value, $idx);
    }
    
    /**
     * Get all elements of <raidzonelist>
     *
     * @return \RO\Cmd\RaidZone[]
     */
    public function getRaidzonelistList(){
     return $this->_get(6);
    }
    
    /**
     * Add a new element to <raidzonelist>
     *
     * @param \RO\Cmd\RaidZone $value
     * @return \RO\Cmd\BlobZone
     */
    public function addRaidzonelist(\RO\Cmd\RaidZone $value){
     return $this->_add(6, $value);
    }
    
    /**
     * Check if <effectivetime> has a value
     *
     * @return boolean
     */
    public function hasEffectivetime(){
      return $this->_has(7);
    }
    
    /**
     * Clear <effectivetime> value
     *
     * @return \RO\Cmd\BlobZone
     */
    public function clearEffectivetime(){
      return $this->_clear(7);
    }
    
    /**
     * Get <effectivetime> value
     *
     * @return int
     */
    public function getEffectivetime(){
      return $this->_get(7);
    }
    
    /**
     * Set <effectivetime> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobZone
     */
    public function setEffectivetime( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(8);
    }
    
    /**
     * Clear <type> value
     *
     * @return \RO\Cmd\BlobZone
     */
    public function clearType(){
      return $this->_clear(8);
    }
    
    /**
     * Get <type> value
     *
     * @return int
     */
    public function getType(){
      return $this->_get(8);
    }
    
    /**
     * Set <type> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobZone
     */
    public function setType( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <roomid> has a value
     *
     * @return boolean
     */
    public function hasRoomid(){
      return $this->_has(9);
    }
    
    /**
     * Clear <roomid> value
     *
     * @return \RO\Cmd\BlobZone
     */
    public function clearRoomid(){
      return $this->_clear(9);
    }
    
    /**
     * Get <roomid> value
     *
     * @return int
     */
    public function getRoomid(){
      return $this->_get(9);
    }
    
    /**
     * Set <roomid> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobZone
     */
    public function setRoomid( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <colorindex> has a value
     *
     * @return boolean
     */
    public function hasColorindex(){
      return $this->_has(10);
    }
    
    /**
     * Clear <colorindex> value
     *
     * @return \RO\Cmd\BlobZone
     */
    public function clearColorindex(){
      return $this->_clear(10);
    }
    
    /**
     * Get <colorindex> value
     *
     * @return int
     */
    public function getColorindex(){
      return $this->_get(10);
    }
    
    /**
     * Set <colorindex> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobZone
     */
    public function setColorindex( $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <x> has a value
     *
     * @return boolean
     */
    public function hasX(){
      return $this->_has(11);
    }
    
    /**
     * Clear <x> value
     *
     * @return \RO\Cmd\BlobZone
     */
    public function clearX(){
      return $this->_clear(11);
    }
    
    /**
     * Get <x> value
     *
     * @return float
     */
    public function getX(){
      return $this->_get(11);
    }
    
    /**
     * Set <x> value
     *
     * @param float $value
     * @return \RO\Cmd\BlobZone
     */
    public function setX( $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <y> has a value
     *
     * @return boolean
     */
    public function hasY(){
      return $this->_has(12);
    }
    
    /**
     * Clear <y> value
     *
     * @return \RO\Cmd\BlobZone
     */
    public function clearY(){
      return $this->_clear(12);
    }
    
    /**
     * Get <y> value
     *
     * @return float
     */
    public function getY(){
      return $this->_get(12);
    }
    
    /**
     * Set <y> value
     *
     * @param float $value
     * @return \RO\Cmd\BlobZone
     */
    public function setY( $value){
      return $this->_set(12, $value);
    }
    
    /**
     * Check if <z> has a value
     *
     * @return boolean
     */
    public function hasZ(){
      return $this->_has(13);
    }
    
    /**
     * Clear <z> value
     *
     * @return \RO\Cmd\BlobZone
     */
    public function clearZ(){
      return $this->_clear(13);
    }
    
    /**
     * Get <z> value
     *
     * @return float
     */
    public function getZ(){
      return $this->_get(13);
    }
    
    /**
     * Set <z> value
     *
     * @param float $value
     * @return \RO\Cmd\BlobZone
     */
    public function setZ( $value){
      return $this->_set(13, $value);
    }
  }
}

