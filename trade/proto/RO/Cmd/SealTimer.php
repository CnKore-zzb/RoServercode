<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: SceneSeal.proto

namespace RO\Cmd {

  class SealTimer extends \DrSlump\Protobuf\Message {

    /**  @var int - \RO\Cmd\Command */
    public $cmd = \RO\Cmd\Command::SCENE_USER_SEAL_PROTOCMD;
    
    /**  @var int - \RO\Cmd\SealParam */
    public $param = \RO\Cmd\SealParam::SEALPARAM_SEALTIMER;
    
    /**  @var int */
    public $speed = 0;
    
    /**  @var int */
    public $curvalue = 0;
    
    /**  @var int */
    public $maxvalue = 0;
    
    /**  @var int */
    public $stoptime = 0;
    
    /**  @var int */
    public $maxtime = 0;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.SealTimer');

      // OPTIONAL ENUM cmd = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "cmd";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\Command';
      $f->default   = \RO\Cmd\Command::SCENE_USER_SEAL_PROTOCMD;
      $descriptor->addField($f);

      // OPTIONAL ENUM param = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "param";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\SealParam';
      $f->default   = \RO\Cmd\SealParam::SEALPARAM_SEALTIMER;
      $descriptor->addField($f);

      // OPTIONAL INT32 speed = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "speed";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 curvalue = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "curvalue";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 maxvalue = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "maxvalue";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 stoptime = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "stoptime";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 maxtime = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "maxtime";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <cmd> has a value
     *
     * @return boolean
     */
    public function hasCmd(){
      return $this->_has(1);
    }
    
    /**
     * Clear <cmd> value
     *
     * @return \RO\Cmd\SealTimer
     */
    public function clearCmd(){
      return $this->_clear(1);
    }
    
    /**
     * Get <cmd> value
     *
     * @return int - \RO\Cmd\Command
     */
    public function getCmd(){
      return $this->_get(1);
    }
    
    /**
     * Set <cmd> value
     *
     * @param int - \RO\Cmd\Command $value
     * @return \RO\Cmd\SealTimer
     */
    public function setCmd( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <param> has a value
     *
     * @return boolean
     */
    public function hasParam(){
      return $this->_has(2);
    }
    
    /**
     * Clear <param> value
     *
     * @return \RO\Cmd\SealTimer
     */
    public function clearParam(){
      return $this->_clear(2);
    }
    
    /**
     * Get <param> value
     *
     * @return int - \RO\Cmd\SealParam
     */
    public function getParam(){
      return $this->_get(2);
    }
    
    /**
     * Set <param> value
     *
     * @param int - \RO\Cmd\SealParam $value
     * @return \RO\Cmd\SealTimer
     */
    public function setParam( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <speed> has a value
     *
     * @return boolean
     */
    public function hasSpeed(){
      return $this->_has(3);
    }
    
    /**
     * Clear <speed> value
     *
     * @return \RO\Cmd\SealTimer
     */
    public function clearSpeed(){
      return $this->_clear(3);
    }
    
    /**
     * Get <speed> value
     *
     * @return int
     */
    public function getSpeed(){
      return $this->_get(3);
    }
    
    /**
     * Set <speed> value
     *
     * @param int $value
     * @return \RO\Cmd\SealTimer
     */
    public function setSpeed( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <curvalue> has a value
     *
     * @return boolean
     */
    public function hasCurvalue(){
      return $this->_has(4);
    }
    
    /**
     * Clear <curvalue> value
     *
     * @return \RO\Cmd\SealTimer
     */
    public function clearCurvalue(){
      return $this->_clear(4);
    }
    
    /**
     * Get <curvalue> value
     *
     * @return int
     */
    public function getCurvalue(){
      return $this->_get(4);
    }
    
    /**
     * Set <curvalue> value
     *
     * @param int $value
     * @return \RO\Cmd\SealTimer
     */
    public function setCurvalue( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <maxvalue> has a value
     *
     * @return boolean
     */
    public function hasMaxvalue(){
      return $this->_has(5);
    }
    
    /**
     * Clear <maxvalue> value
     *
     * @return \RO\Cmd\SealTimer
     */
    public function clearMaxvalue(){
      return $this->_clear(5);
    }
    
    /**
     * Get <maxvalue> value
     *
     * @return int
     */
    public function getMaxvalue(){
      return $this->_get(5);
    }
    
    /**
     * Set <maxvalue> value
     *
     * @param int $value
     * @return \RO\Cmd\SealTimer
     */
    public function setMaxvalue( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <stoptime> has a value
     *
     * @return boolean
     */
    public function hasStoptime(){
      return $this->_has(6);
    }
    
    /**
     * Clear <stoptime> value
     *
     * @return \RO\Cmd\SealTimer
     */
    public function clearStoptime(){
      return $this->_clear(6);
    }
    
    /**
     * Get <stoptime> value
     *
     * @return int
     */
    public function getStoptime(){
      return $this->_get(6);
    }
    
    /**
     * Set <stoptime> value
     *
     * @param int $value
     * @return \RO\Cmd\SealTimer
     */
    public function setStoptime( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <maxtime> has a value
     *
     * @return boolean
     */
    public function hasMaxtime(){
      return $this->_has(7);
    }
    
    /**
     * Clear <maxtime> value
     *
     * @return \RO\Cmd\SealTimer
     */
    public function clearMaxtime(){
      return $this->_clear(7);
    }
    
    /**
     * Get <maxtime> value
     *
     * @return int
     */
    public function getMaxtime(){
      return $this->_get(7);
    }
    
    /**
     * Set <maxtime> value
     *
     * @param int $value
     * @return \RO\Cmd\SealTimer
     */
    public function setMaxtime( $value){
      return $this->_set(7, $value);
    }
  }
}

