<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: WeddingCCmd.proto

namespace RO\Cmd {

  class WeddingEventMsgCCmd extends \DrSlump\Protobuf\Message {

    /**  @var int - \RO\Cmd\Command */
    public $cmd = \RO\Cmd\Command::WEDDINGC_PROTOCMD;
    
    /**  @var int - \RO\Cmd\WeddingCParam */
    public $param = \RO\Cmd\WeddingCParam::WEDDINGCPARAM_WEDDING_EVENT_MSG;
    
    /**  @var int */
    public $charid = null;
    
    /**  @var int - \RO\Cmd\EWeddingEvent */
    public $event = null;
    
    /**  @var int */
    public $id = null;
    
    /**  @var int */
    public $charid1 = null;
    
    /**  @var int */
    public $charid2 = null;
    
    /**  @var string */
    public $msg = null;
    
    /**  @var int */
    public $opt_charid = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.WeddingEventMsgCCmd');

      // OPTIONAL ENUM cmd = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "cmd";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\Command';
      $f->default   = \RO\Cmd\Command::WEDDINGC_PROTOCMD;
      $descriptor->addField($f);

      // OPTIONAL ENUM param = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "param";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\WeddingCParam';
      $f->default   = \RO\Cmd\WeddingCParam::WEDDINGCPARAM_WEDDING_EVENT_MSG;
      $descriptor->addField($f);

      // OPTIONAL UINT64 charid = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "charid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM event = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "event";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\EWeddingEvent';
      $descriptor->addField($f);

      // OPTIONAL UINT64 id = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT64 charid1 = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "charid1";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT64 charid2 = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "charid2";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING msg = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "msg";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT64 opt_charid = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "opt_charid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <cmd> has a value
     *
     * @return boolean
     */
    public function hasCmd(){
      return $this->_has(1);
    }
    
    /**
     * Clear <cmd> value
     *
     * @return \RO\Cmd\WeddingEventMsgCCmd
     */
    public function clearCmd(){
      return $this->_clear(1);
    }
    
    /**
     * Get <cmd> value
     *
     * @return int - \RO\Cmd\Command
     */
    public function getCmd(){
      return $this->_get(1);
    }
    
    /**
     * Set <cmd> value
     *
     * @param int - \RO\Cmd\Command $value
     * @return \RO\Cmd\WeddingEventMsgCCmd
     */
    public function setCmd( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <param> has a value
     *
     * @return boolean
     */
    public function hasParam(){
      return $this->_has(2);
    }
    
    /**
     * Clear <param> value
     *
     * @return \RO\Cmd\WeddingEventMsgCCmd
     */
    public function clearParam(){
      return $this->_clear(2);
    }
    
    /**
     * Get <param> value
     *
     * @return int - \RO\Cmd\WeddingCParam
     */
    public function getParam(){
      return $this->_get(2);
    }
    
    /**
     * Set <param> value
     *
     * @param int - \RO\Cmd\WeddingCParam $value
     * @return \RO\Cmd\WeddingEventMsgCCmd
     */
    public function setParam( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <charid> has a value
     *
     * @return boolean
     */
    public function hasCharid(){
      return $this->_has(3);
    }
    
    /**
     * Clear <charid> value
     *
     * @return \RO\Cmd\WeddingEventMsgCCmd
     */
    public function clearCharid(){
      return $this->_clear(3);
    }
    
    /**
     * Get <charid> value
     *
     * @return int
     */
    public function getCharid(){
      return $this->_get(3);
    }
    
    /**
     * Set <charid> value
     *
     * @param int $value
     * @return \RO\Cmd\WeddingEventMsgCCmd
     */
    public function setCharid( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <event> has a value
     *
     * @return boolean
     */
    public function hasEvent(){
      return $this->_has(4);
    }
    
    /**
     * Clear <event> value
     *
     * @return \RO\Cmd\WeddingEventMsgCCmd
     */
    public function clearEvent(){
      return $this->_clear(4);
    }
    
    /**
     * Get <event> value
     *
     * @return int - \RO\Cmd\EWeddingEvent
     */
    public function getEvent(){
      return $this->_get(4);
    }
    
    /**
     * Set <event> value
     *
     * @param int - \RO\Cmd\EWeddingEvent $value
     * @return \RO\Cmd\WeddingEventMsgCCmd
     */
    public function setEvent( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(5);
    }
    
    /**
     * Clear <id> value
     *
     * @return \RO\Cmd\WeddingEventMsgCCmd
     */
    public function clearId(){
      return $this->_clear(5);
    }
    
    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(5);
    }
    
    /**
     * Set <id> value
     *
     * @param int $value
     * @return \RO\Cmd\WeddingEventMsgCCmd
     */
    public function setId( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <charid1> has a value
     *
     * @return boolean
     */
    public function hasCharid1(){
      return $this->_has(6);
    }
    
    /**
     * Clear <charid1> value
     *
     * @return \RO\Cmd\WeddingEventMsgCCmd
     */
    public function clearCharid1(){
      return $this->_clear(6);
    }
    
    /**
     * Get <charid1> value
     *
     * @return int
     */
    public function getCharid1(){
      return $this->_get(6);
    }
    
    /**
     * Set <charid1> value
     *
     * @param int $value
     * @return \RO\Cmd\WeddingEventMsgCCmd
     */
    public function setCharid1( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <charid2> has a value
     *
     * @return boolean
     */
    public function hasCharid2(){
      return $this->_has(7);
    }
    
    /**
     * Clear <charid2> value
     *
     * @return \RO\Cmd\WeddingEventMsgCCmd
     */
    public function clearCharid2(){
      return $this->_clear(7);
    }
    
    /**
     * Get <charid2> value
     *
     * @return int
     */
    public function getCharid2(){
      return $this->_get(7);
    }
    
    /**
     * Set <charid2> value
     *
     * @param int $value
     * @return \RO\Cmd\WeddingEventMsgCCmd
     */
    public function setCharid2( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <msg> has a value
     *
     * @return boolean
     */
    public function hasMsg(){
      return $this->_has(8);
    }
    
    /**
     * Clear <msg> value
     *
     * @return \RO\Cmd\WeddingEventMsgCCmd
     */
    public function clearMsg(){
      return $this->_clear(8);
    }
    
    /**
     * Get <msg> value
     *
     * @return string
     */
    public function getMsg(){
      return $this->_get(8);
    }
    
    /**
     * Set <msg> value
     *
     * @param string $value
     * @return \RO\Cmd\WeddingEventMsgCCmd
     */
    public function setMsg( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <opt_charid> has a value
     *
     * @return boolean
     */
    public function hasOptCharid(){
      return $this->_has(9);
    }
    
    /**
     * Clear <opt_charid> value
     *
     * @return \RO\Cmd\WeddingEventMsgCCmd
     */
    public function clearOptCharid(){
      return $this->_clear(9);
    }
    
    /**
     * Get <opt_charid> value
     *
     * @return int
     */
    public function getOptCharid(){
      return $this->_get(9);
    }
    
    /**
     * Set <opt_charid> value
     *
     * @param int $value
     * @return \RO\Cmd\WeddingEventMsgCCmd
     */
    public function setOptCharid( $value){
      return $this->_set(9, $value);
    }
  }
}

