<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: SceneMap.proto

namespace RO\Cmd {

  class MapNpc extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $id = 0;
    
    /**  @var string */
    public $name = null;
    
    /**  @var int */
    public $npcID = 0;
    
    /**  @var int[]  */
    public $character = array();
    
    /**  @var \RO\Cmd\ScenePos */
    public $pos = null;
    
    /**  @var \RO\Cmd\ScenePos */
    public $dest = null;
    
    /**  @var int */
    public $dir = null;
    
    /**  @var \RO\Cmd\UserData[]  */
    public $datas = array();
    
    /**  @var \RO\Cmd\UserAttr[]  */
    public $attrs = array();
    
    /**  @var int */
    public $owner = 0;
    
    /**  @var int */
    public $behaviour = 0;
    
    /**  @var int */
    public $uniqueid = 0;
    
    /**  @var string */
    public $waitaction = null;
    
    /**  @var int */
    public $teamid = 0;
    
    /**  @var int */
    public $searchrange = 0;
    
    /**  @var \RO\Cmd\BufferData[]  */
    public $buffs = array();
    
    /**  @var int */
    public $motionactionid = 0;
    
    /**  @var string */
    public $effect = null;
    
    /**  @var int */
    public $effectpos = 0;
    
    /**  @var int */
    public $effectindex = 0;
    
    /**  @var \RO\Cmd\SpEffectData[]  */
    public $speffectdata = array();
    
    /**  @var boolean */
    public $isbirth = false;
    
    /**  @var int */
    public $eat_progress = null;
    
    /**  @var int */
    public $fadein = 0;
    
    /**  @var int */
    public $guildid = 0;
    
    /**  @var int */
    public $search = 0;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.MapNpc');

      // OPTIONAL UINT64 id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL STRING name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 npcID = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "npcID";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // REPEATED UINT32 character = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "character";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE pos = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "pos";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\ScenePos';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE dest = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "dest";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\ScenePos';
      $descriptor->addField($f);

      // OPTIONAL UINT32 dir = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "dir";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE datas = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "datas";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\UserData';
      $descriptor->addField($f);

      // REPEATED MESSAGE attrs = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "attrs";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\UserAttr';
      $descriptor->addField($f);

      // OPTIONAL UINT64 owner = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "owner";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 behaviour = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "behaviour";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 uniqueid = 13
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 13;
      $f->name      = "uniqueid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL STRING waitaction = 14
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 14;
      $f->name      = "waitaction";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 teamid = 15
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 15;
      $f->name      = "teamid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 searchrange = 16
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 16;
      $f->name      = "searchrange";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // REPEATED MESSAGE buffs = 17
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 17;
      $f->name      = "buffs";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\BufferData';
      $descriptor->addField($f);

      // OPTIONAL UINT32 motionactionid = 18
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 18;
      $f->name      = "motionactionid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL STRING effect = 19
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 19;
      $f->name      = "effect";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 effectpos = 20
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 20;
      $f->name      = "effectpos";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 effectindex = 21
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 21;
      $f->name      = "effectindex";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // REPEATED MESSAGE speffectdata = 22
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 22;
      $f->name      = "speffectdata";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\SpEffectData';
      $descriptor->addField($f);

      // OPTIONAL BOOL isbirth = 23
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 23;
      $f->name      = "isbirth";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = false;
      $descriptor->addField($f);

      // OPTIONAL UINT32 eat_progress = 24
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 24;
      $f->name      = "eat_progress";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 fadein = 25
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 25;
      $f->name      = "fadein";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT64 guildid = 26
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 26;
      $f->name      = "guildid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 search = 27
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 27;
      $f->name      = "search";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \RO\Cmd\MapNpc
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param int $value
     * @return \RO\Cmd\MapNpc
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <name> value
     *
     * @return \RO\Cmd\MapNpc
     */
    public function clearName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(2);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \RO\Cmd\MapNpc
     */
    public function setName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <npcID> has a value
     *
     * @return boolean
     */
    public function hasNpcID(){
      return $this->_has(3);
    }
    
    /**
     * Clear <npcID> value
     *
     * @return \RO\Cmd\MapNpc
     */
    public function clearNpcID(){
      return $this->_clear(3);
    }
    
    /**
     * Get <npcID> value
     *
     * @return int
     */
    public function getNpcID(){
      return $this->_get(3);
    }
    
    /**
     * Set <npcID> value
     *
     * @param int $value
     * @return \RO\Cmd\MapNpc
     */
    public function setNpcID( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <character> has a value
     *
     * @return boolean
     */
    public function hasCharacter(){
      return $this->_has(5);
    }
    
    /**
     * Clear <character> value
     *
     * @return \RO\Cmd\MapNpc
     */
    public function clearCharacter(){
      return $this->_clear(5);
    }
    
    /**
     * Get <character> value
     *
     * @param int $idx
     * @return int
     */
    public function getCharacter($idx = NULL){
      return $this->_get(5, $idx);
    }
    
    /**
     * Set <character> value
     *
     * @param int $value
     * @return \RO\Cmd\MapNpc
     */
    public function setCharacter( $value, $idx = NULL){
      return $this->_set(5, $value, $idx);
    }
    
    /**
     * Get all elements of <character>
     *
     * @return int[]
     */
    public function getCharacterList(){
     return $this->_get(5);
    }
    
    /**
     * Add a new element to <character>
     *
     * @param int $value
     * @return \RO\Cmd\MapNpc
     */
    public function addCharacter( $value){
     return $this->_add(5, $value);
    }
    
    /**
     * Check if <pos> has a value
     *
     * @return boolean
     */
    public function hasPos(){
      return $this->_has(6);
    }
    
    /**
     * Clear <pos> value
     *
     * @return \RO\Cmd\MapNpc
     */
    public function clearPos(){
      return $this->_clear(6);
    }
    
    /**
     * Get <pos> value
     *
     * @return \RO\Cmd\ScenePos
     */
    public function getPos(){
      return $this->_get(6);
    }
    
    /**
     * Set <pos> value
     *
     * @param \RO\Cmd\ScenePos $value
     * @return \RO\Cmd\MapNpc
     */
    public function setPos(\RO\Cmd\ScenePos $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <dest> has a value
     *
     * @return boolean
     */
    public function hasDest(){
      return $this->_has(7);
    }
    
    /**
     * Clear <dest> value
     *
     * @return \RO\Cmd\MapNpc
     */
    public function clearDest(){
      return $this->_clear(7);
    }
    
    /**
     * Get <dest> value
     *
     * @return \RO\Cmd\ScenePos
     */
    public function getDest(){
      return $this->_get(7);
    }
    
    /**
     * Set <dest> value
     *
     * @param \RO\Cmd\ScenePos $value
     * @return \RO\Cmd\MapNpc
     */
    public function setDest(\RO\Cmd\ScenePos $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <dir> has a value
     *
     * @return boolean
     */
    public function hasDir(){
      return $this->_has(8);
    }
    
    /**
     * Clear <dir> value
     *
     * @return \RO\Cmd\MapNpc
     */
    public function clearDir(){
      return $this->_clear(8);
    }
    
    /**
     * Get <dir> value
     *
     * @return int
     */
    public function getDir(){
      return $this->_get(8);
    }
    
    /**
     * Set <dir> value
     *
     * @param int $value
     * @return \RO\Cmd\MapNpc
     */
    public function setDir( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <datas> has a value
     *
     * @return boolean
     */
    public function hasDatas(){
      return $this->_has(9);
    }
    
    /**
     * Clear <datas> value
     *
     * @return \RO\Cmd\MapNpc
     */
    public function clearDatas(){
      return $this->_clear(9);
    }
    
    /**
     * Get <datas> value
     *
     * @param int $idx
     * @return \RO\Cmd\UserData
     */
    public function getDatas($idx = NULL){
      return $this->_get(9, $idx);
    }
    
    /**
     * Set <datas> value
     *
     * @param \RO\Cmd\UserData $value
     * @return \RO\Cmd\MapNpc
     */
    public function setDatas(\RO\Cmd\UserData $value, $idx = NULL){
      return $this->_set(9, $value, $idx);
    }
    
    /**
     * Get all elements of <datas>
     *
     * @return \RO\Cmd\UserData[]
     */
    public function getDatasList(){
     return $this->_get(9);
    }
    
    /**
     * Add a new element to <datas>
     *
     * @param \RO\Cmd\UserData $value
     * @return \RO\Cmd\MapNpc
     */
    public function addDatas(\RO\Cmd\UserData $value){
     return $this->_add(9, $value);
    }
    
    /**
     * Check if <attrs> has a value
     *
     * @return boolean
     */
    public function hasAttrs(){
      return $this->_has(10);
    }
    
    /**
     * Clear <attrs> value
     *
     * @return \RO\Cmd\MapNpc
     */
    public function clearAttrs(){
      return $this->_clear(10);
    }
    
    /**
     * Get <attrs> value
     *
     * @param int $idx
     * @return \RO\Cmd\UserAttr
     */
    public function getAttrs($idx = NULL){
      return $this->_get(10, $idx);
    }
    
    /**
     * Set <attrs> value
     *
     * @param \RO\Cmd\UserAttr $value
     * @return \RO\Cmd\MapNpc
     */
    public function setAttrs(\RO\Cmd\UserAttr $value, $idx = NULL){
      return $this->_set(10, $value, $idx);
    }
    
    /**
     * Get all elements of <attrs>
     *
     * @return \RO\Cmd\UserAttr[]
     */
    public function getAttrsList(){
     return $this->_get(10);
    }
    
    /**
     * Add a new element to <attrs>
     *
     * @param \RO\Cmd\UserAttr $value
     * @return \RO\Cmd\MapNpc
     */
    public function addAttrs(\RO\Cmd\UserAttr $value){
     return $this->_add(10, $value);
    }
    
    /**
     * Check if <owner> has a value
     *
     * @return boolean
     */
    public function hasOwner(){
      return $this->_has(11);
    }
    
    /**
     * Clear <owner> value
     *
     * @return \RO\Cmd\MapNpc
     */
    public function clearOwner(){
      return $this->_clear(11);
    }
    
    /**
     * Get <owner> value
     *
     * @return int
     */
    public function getOwner(){
      return $this->_get(11);
    }
    
    /**
     * Set <owner> value
     *
     * @param int $value
     * @return \RO\Cmd\MapNpc
     */
    public function setOwner( $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <behaviour> has a value
     *
     * @return boolean
     */
    public function hasBehaviour(){
      return $this->_has(12);
    }
    
    /**
     * Clear <behaviour> value
     *
     * @return \RO\Cmd\MapNpc
     */
    public function clearBehaviour(){
      return $this->_clear(12);
    }
    
    /**
     * Get <behaviour> value
     *
     * @return int
     */
    public function getBehaviour(){
      return $this->_get(12);
    }
    
    /**
     * Set <behaviour> value
     *
     * @param int $value
     * @return \RO\Cmd\MapNpc
     */
    public function setBehaviour( $value){
      return $this->_set(12, $value);
    }
    
    /**
     * Check if <uniqueid> has a value
     *
     * @return boolean
     */
    public function hasUniqueid(){
      return $this->_has(13);
    }
    
    /**
     * Clear <uniqueid> value
     *
     * @return \RO\Cmd\MapNpc
     */
    public function clearUniqueid(){
      return $this->_clear(13);
    }
    
    /**
     * Get <uniqueid> value
     *
     * @return int
     */
    public function getUniqueid(){
      return $this->_get(13);
    }
    
    /**
     * Set <uniqueid> value
     *
     * @param int $value
     * @return \RO\Cmd\MapNpc
     */
    public function setUniqueid( $value){
      return $this->_set(13, $value);
    }
    
    /**
     * Check if <waitaction> has a value
     *
     * @return boolean
     */
    public function hasWaitaction(){
      return $this->_has(14);
    }
    
    /**
     * Clear <waitaction> value
     *
     * @return \RO\Cmd\MapNpc
     */
    public function clearWaitaction(){
      return $this->_clear(14);
    }
    
    /**
     * Get <waitaction> value
     *
     * @return string
     */
    public function getWaitaction(){
      return $this->_get(14);
    }
    
    /**
     * Set <waitaction> value
     *
     * @param string $value
     * @return \RO\Cmd\MapNpc
     */
    public function setWaitaction( $value){
      return $this->_set(14, $value);
    }
    
    /**
     * Check if <teamid> has a value
     *
     * @return boolean
     */
    public function hasTeamid(){
      return $this->_has(15);
    }
    
    /**
     * Clear <teamid> value
     *
     * @return \RO\Cmd\MapNpc
     */
    public function clearTeamid(){
      return $this->_clear(15);
    }
    
    /**
     * Get <teamid> value
     *
     * @return int
     */
    public function getTeamid(){
      return $this->_get(15);
    }
    
    /**
     * Set <teamid> value
     *
     * @param int $value
     * @return \RO\Cmd\MapNpc
     */
    public function setTeamid( $value){
      return $this->_set(15, $value);
    }
    
    /**
     * Check if <searchrange> has a value
     *
     * @return boolean
     */
    public function hasSearchrange(){
      return $this->_has(16);
    }
    
    /**
     * Clear <searchrange> value
     *
     * @return \RO\Cmd\MapNpc
     */
    public function clearSearchrange(){
      return $this->_clear(16);
    }
    
    /**
     * Get <searchrange> value
     *
     * @return int
     */
    public function getSearchrange(){
      return $this->_get(16);
    }
    
    /**
     * Set <searchrange> value
     *
     * @param int $value
     * @return \RO\Cmd\MapNpc
     */
    public function setSearchrange( $value){
      return $this->_set(16, $value);
    }
    
    /**
     * Check if <buffs> has a value
     *
     * @return boolean
     */
    public function hasBuffs(){
      return $this->_has(17);
    }
    
    /**
     * Clear <buffs> value
     *
     * @return \RO\Cmd\MapNpc
     */
    public function clearBuffs(){
      return $this->_clear(17);
    }
    
    /**
     * Get <buffs> value
     *
     * @param int $idx
     * @return \RO\Cmd\BufferData
     */
    public function getBuffs($idx = NULL){
      return $this->_get(17, $idx);
    }
    
    /**
     * Set <buffs> value
     *
     * @param \RO\Cmd\BufferData $value
     * @return \RO\Cmd\MapNpc
     */
    public function setBuffs(\RO\Cmd\BufferData $value, $idx = NULL){
      return $this->_set(17, $value, $idx);
    }
    
    /**
     * Get all elements of <buffs>
     *
     * @return \RO\Cmd\BufferData[]
     */
    public function getBuffsList(){
     return $this->_get(17);
    }
    
    /**
     * Add a new element to <buffs>
     *
     * @param \RO\Cmd\BufferData $value
     * @return \RO\Cmd\MapNpc
     */
    public function addBuffs(\RO\Cmd\BufferData $value){
     return $this->_add(17, $value);
    }
    
    /**
     * Check if <motionactionid> has a value
     *
     * @return boolean
     */
    public function hasMotionactionid(){
      return $this->_has(18);
    }
    
    /**
     * Clear <motionactionid> value
     *
     * @return \RO\Cmd\MapNpc
     */
    public function clearMotionactionid(){
      return $this->_clear(18);
    }
    
    /**
     * Get <motionactionid> value
     *
     * @return int
     */
    public function getMotionactionid(){
      return $this->_get(18);
    }
    
    /**
     * Set <motionactionid> value
     *
     * @param int $value
     * @return \RO\Cmd\MapNpc
     */
    public function setMotionactionid( $value){
      return $this->_set(18, $value);
    }
    
    /**
     * Check if <effect> has a value
     *
     * @return boolean
     */
    public function hasEffect(){
      return $this->_has(19);
    }
    
    /**
     * Clear <effect> value
     *
     * @return \RO\Cmd\MapNpc
     */
    public function clearEffect(){
      return $this->_clear(19);
    }
    
    /**
     * Get <effect> value
     *
     * @return string
     */
    public function getEffect(){
      return $this->_get(19);
    }
    
    /**
     * Set <effect> value
     *
     * @param string $value
     * @return \RO\Cmd\MapNpc
     */
    public function setEffect( $value){
      return $this->_set(19, $value);
    }
    
    /**
     * Check if <effectpos> has a value
     *
     * @return boolean
     */
    public function hasEffectpos(){
      return $this->_has(20);
    }
    
    /**
     * Clear <effectpos> value
     *
     * @return \RO\Cmd\MapNpc
     */
    public function clearEffectpos(){
      return $this->_clear(20);
    }
    
    /**
     * Get <effectpos> value
     *
     * @return int
     */
    public function getEffectpos(){
      return $this->_get(20);
    }
    
    /**
     * Set <effectpos> value
     *
     * @param int $value
     * @return \RO\Cmd\MapNpc
     */
    public function setEffectpos( $value){
      return $this->_set(20, $value);
    }
    
    /**
     * Check if <effectindex> has a value
     *
     * @return boolean
     */
    public function hasEffectindex(){
      return $this->_has(21);
    }
    
    /**
     * Clear <effectindex> value
     *
     * @return \RO\Cmd\MapNpc
     */
    public function clearEffectindex(){
      return $this->_clear(21);
    }
    
    /**
     * Get <effectindex> value
     *
     * @return int
     */
    public function getEffectindex(){
      return $this->_get(21);
    }
    
    /**
     * Set <effectindex> value
     *
     * @param int $value
     * @return \RO\Cmd\MapNpc
     */
    public function setEffectindex( $value){
      return $this->_set(21, $value);
    }
    
    /**
     * Check if <speffectdata> has a value
     *
     * @return boolean
     */
    public function hasSpeffectdata(){
      return $this->_has(22);
    }
    
    /**
     * Clear <speffectdata> value
     *
     * @return \RO\Cmd\MapNpc
     */
    public function clearSpeffectdata(){
      return $this->_clear(22);
    }
    
    /**
     * Get <speffectdata> value
     *
     * @param int $idx
     * @return \RO\Cmd\SpEffectData
     */
    public function getSpeffectdata($idx = NULL){
      return $this->_get(22, $idx);
    }
    
    /**
     * Set <speffectdata> value
     *
     * @param \RO\Cmd\SpEffectData $value
     * @return \RO\Cmd\MapNpc
     */
    public function setSpeffectdata(\RO\Cmd\SpEffectData $value, $idx = NULL){
      return $this->_set(22, $value, $idx);
    }
    
    /**
     * Get all elements of <speffectdata>
     *
     * @return \RO\Cmd\SpEffectData[]
     */
    public function getSpeffectdataList(){
     return $this->_get(22);
    }
    
    /**
     * Add a new element to <speffectdata>
     *
     * @param \RO\Cmd\SpEffectData $value
     * @return \RO\Cmd\MapNpc
     */
    public function addSpeffectdata(\RO\Cmd\SpEffectData $value){
     return $this->_add(22, $value);
    }
    
    /**
     * Check if <isbirth> has a value
     *
     * @return boolean
     */
    public function hasIsbirth(){
      return $this->_has(23);
    }
    
    /**
     * Clear <isbirth> value
     *
     * @return \RO\Cmd\MapNpc
     */
    public function clearIsbirth(){
      return $this->_clear(23);
    }
    
    /**
     * Get <isbirth> value
     *
     * @return boolean
     */
    public function getIsbirth(){
      return $this->_get(23);
    }
    
    /**
     * Set <isbirth> value
     *
     * @param boolean $value
     * @return \RO\Cmd\MapNpc
     */
    public function setIsbirth( $value){
      return $this->_set(23, $value);
    }
    
    /**
     * Check if <eat_progress> has a value
     *
     * @return boolean
     */
    public function hasEatProgress(){
      return $this->_has(24);
    }
    
    /**
     * Clear <eat_progress> value
     *
     * @return \RO\Cmd\MapNpc
     */
    public function clearEatProgress(){
      return $this->_clear(24);
    }
    
    /**
     * Get <eat_progress> value
     *
     * @return int
     */
    public function getEatProgress(){
      return $this->_get(24);
    }
    
    /**
     * Set <eat_progress> value
     *
     * @param int $value
     * @return \RO\Cmd\MapNpc
     */
    public function setEatProgress( $value){
      return $this->_set(24, $value);
    }
    
    /**
     * Check if <fadein> has a value
     *
     * @return boolean
     */
    public function hasFadein(){
      return $this->_has(25);
    }
    
    /**
     * Clear <fadein> value
     *
     * @return \RO\Cmd\MapNpc
     */
    public function clearFadein(){
      return $this->_clear(25);
    }
    
    /**
     * Get <fadein> value
     *
     * @return int
     */
    public function getFadein(){
      return $this->_get(25);
    }
    
    /**
     * Set <fadein> value
     *
     * @param int $value
     * @return \RO\Cmd\MapNpc
     */
    public function setFadein( $value){
      return $this->_set(25, $value);
    }
    
    /**
     * Check if <guildid> has a value
     *
     * @return boolean
     */
    public function hasGuildid(){
      return $this->_has(26);
    }
    
    /**
     * Clear <guildid> value
     *
     * @return \RO\Cmd\MapNpc
     */
    public function clearGuildid(){
      return $this->_clear(26);
    }
    
    /**
     * Get <guildid> value
     *
     * @return int
     */
    public function getGuildid(){
      return $this->_get(26);
    }
    
    /**
     * Set <guildid> value
     *
     * @param int $value
     * @return \RO\Cmd\MapNpc
     */
    public function setGuildid( $value){
      return $this->_set(26, $value);
    }
    
    /**
     * Check if <search> has a value
     *
     * @return boolean
     */
    public function hasSearch(){
      return $this->_has(27);
    }
    
    /**
     * Clear <search> value
     *
     * @return \RO\Cmd\MapNpc
     */
    public function clearSearch(){
      return $this->_clear(27);
    }
    
    /**
     * Get <search> value
     *
     * @return int
     */
    public function getSearch(){
      return $this->_get(27);
    }
    
    /**
     * Set <search> value
     *
     * @param int $value
     * @return \RO\Cmd\MapNpc
     */
    public function setSearch( $value){
      return $this->_set(27, $value);
    }
  }
}

