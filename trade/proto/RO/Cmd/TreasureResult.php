<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: GuildCmd.proto

namespace RO\Cmd {

  class TreasureResult extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $ownerid = 0;
    
    /**  @var int */
    public $eventguid = 0;
    
    /**  @var int */
    public $treasureid = 0;
    
    /**  @var int */
    public $totalmember = 0;
    
    /**  @var int - \RO\Cmd\ETreasureState */
    public $state = \RO\Cmd\ETreasureState::ETREASURESTATE_MIN;
    
    /**  @var \RO\Cmd\TreasureItem[]  */
    public $items = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.TreasureResult');

      // OPTIONAL UINT64 ownerid = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "ownerid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 eventguid = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "eventguid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 treasureid = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "treasureid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 totalmember = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "totalmember";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL ENUM state = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\ETreasureState';
      $f->default   = \RO\Cmd\ETreasureState::ETREASURESTATE_MIN;
      $descriptor->addField($f);

      // REPEATED MESSAGE items = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "items";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\TreasureItem';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <ownerid> has a value
     *
     * @return boolean
     */
    public function hasOwnerid(){
      return $this->_has(1);
    }
    
    /**
     * Clear <ownerid> value
     *
     * @return \RO\Cmd\TreasureResult
     */
    public function clearOwnerid(){
      return $this->_clear(1);
    }
    
    /**
     * Get <ownerid> value
     *
     * @return int
     */
    public function getOwnerid(){
      return $this->_get(1);
    }
    
    /**
     * Set <ownerid> value
     *
     * @param int $value
     * @return \RO\Cmd\TreasureResult
     */
    public function setOwnerid( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <eventguid> has a value
     *
     * @return boolean
     */
    public function hasEventguid(){
      return $this->_has(2);
    }
    
    /**
     * Clear <eventguid> value
     *
     * @return \RO\Cmd\TreasureResult
     */
    public function clearEventguid(){
      return $this->_clear(2);
    }
    
    /**
     * Get <eventguid> value
     *
     * @return int
     */
    public function getEventguid(){
      return $this->_get(2);
    }
    
    /**
     * Set <eventguid> value
     *
     * @param int $value
     * @return \RO\Cmd\TreasureResult
     */
    public function setEventguid( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <treasureid> has a value
     *
     * @return boolean
     */
    public function hasTreasureid(){
      return $this->_has(3);
    }
    
    /**
     * Clear <treasureid> value
     *
     * @return \RO\Cmd\TreasureResult
     */
    public function clearTreasureid(){
      return $this->_clear(3);
    }
    
    /**
     * Get <treasureid> value
     *
     * @return int
     */
    public function getTreasureid(){
      return $this->_get(3);
    }
    
    /**
     * Set <treasureid> value
     *
     * @param int $value
     * @return \RO\Cmd\TreasureResult
     */
    public function setTreasureid( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <totalmember> has a value
     *
     * @return boolean
     */
    public function hasTotalmember(){
      return $this->_has(5);
    }
    
    /**
     * Clear <totalmember> value
     *
     * @return \RO\Cmd\TreasureResult
     */
    public function clearTotalmember(){
      return $this->_clear(5);
    }
    
    /**
     * Get <totalmember> value
     *
     * @return int
     */
    public function getTotalmember(){
      return $this->_get(5);
    }
    
    /**
     * Set <totalmember> value
     *
     * @param int $value
     * @return \RO\Cmd\TreasureResult
     */
    public function setTotalmember( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(6);
    }
    
    /**
     * Clear <state> value
     *
     * @return \RO\Cmd\TreasureResult
     */
    public function clearState(){
      return $this->_clear(6);
    }
    
    /**
     * Get <state> value
     *
     * @return int - \RO\Cmd\ETreasureState
     */
    public function getState(){
      return $this->_get(6);
    }
    
    /**
     * Set <state> value
     *
     * @param int - \RO\Cmd\ETreasureState $value
     * @return \RO\Cmd\TreasureResult
     */
    public function setState( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <items> has a value
     *
     * @return boolean
     */
    public function hasItems(){
      return $this->_has(4);
    }
    
    /**
     * Clear <items> value
     *
     * @return \RO\Cmd\TreasureResult
     */
    public function clearItems(){
      return $this->_clear(4);
    }
    
    /**
     * Get <items> value
     *
     * @param int $idx
     * @return \RO\Cmd\TreasureItem
     */
    public function getItems($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <items> value
     *
     * @param \RO\Cmd\TreasureItem $value
     * @return \RO\Cmd\TreasureResult
     */
    public function setItems(\RO\Cmd\TreasureItem $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <items>
     *
     * @return \RO\Cmd\TreasureItem[]
     */
    public function getItemsList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <items>
     *
     * @param \RO\Cmd\TreasureItem $value
     * @return \RO\Cmd\TreasureResult
     */
    public function addItems(\RO\Cmd\TreasureItem $value){
     return $this->_add(4, $value);
    }
  }
}

