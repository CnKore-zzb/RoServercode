<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: SceneMap.proto

namespace RO\Cmd {

  class MapItem extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $guid = 0;
    
    /**  @var int */
    public $id = 0;
    
    /**  @var int */
    public $time = 0;
    
    /**  @var int */
    public $sourceid = 0;
    
    /**  @var \RO\Cmd\ScenePos */
    public $pos = null;
    
    /**  @var int[]  */
    public $owners = array();
    
    /**  @var int */
    public $refinelv = 0;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.MapItem');

      // OPTIONAL UINT64 guid = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "guid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 id = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 time = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "time";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT64 sourceid = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "sourceid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE pos = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "pos";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\ScenePos';
      $descriptor->addField($f);

      // REPEATED UINT64 owners = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "owners";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL UINT32 refinelv = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "refinelv";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <guid> has a value
     *
     * @return boolean
     */
    public function hasGuid(){
      return $this->_has(1);
    }
    
    /**
     * Clear <guid> value
     *
     * @return \RO\Cmd\MapItem
     */
    public function clearGuid(){
      return $this->_clear(1);
    }
    
    /**
     * Get <guid> value
     *
     * @return int
     */
    public function getGuid(){
      return $this->_get(1);
    }
    
    /**
     * Set <guid> value
     *
     * @param int $value
     * @return \RO\Cmd\MapItem
     */
    public function setGuid( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <id> value
     *
     * @return \RO\Cmd\MapItem
     */
    public function clearId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(2);
    }
    
    /**
     * Set <id> value
     *
     * @param int $value
     * @return \RO\Cmd\MapItem
     */
    public function setId( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <time> has a value
     *
     * @return boolean
     */
    public function hasTime(){
      return $this->_has(3);
    }
    
    /**
     * Clear <time> value
     *
     * @return \RO\Cmd\MapItem
     */
    public function clearTime(){
      return $this->_clear(3);
    }
    
    /**
     * Get <time> value
     *
     * @return int
     */
    public function getTime(){
      return $this->_get(3);
    }
    
    /**
     * Set <time> value
     *
     * @param int $value
     * @return \RO\Cmd\MapItem
     */
    public function setTime( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <sourceid> has a value
     *
     * @return boolean
     */
    public function hasSourceid(){
      return $this->_has(4);
    }
    
    /**
     * Clear <sourceid> value
     *
     * @return \RO\Cmd\MapItem
     */
    public function clearSourceid(){
      return $this->_clear(4);
    }
    
    /**
     * Get <sourceid> value
     *
     * @return int
     */
    public function getSourceid(){
      return $this->_get(4);
    }
    
    /**
     * Set <sourceid> value
     *
     * @param int $value
     * @return \RO\Cmd\MapItem
     */
    public function setSourceid( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <pos> has a value
     *
     * @return boolean
     */
    public function hasPos(){
      return $this->_has(5);
    }
    
    /**
     * Clear <pos> value
     *
     * @return \RO\Cmd\MapItem
     */
    public function clearPos(){
      return $this->_clear(5);
    }
    
    /**
     * Get <pos> value
     *
     * @return \RO\Cmd\ScenePos
     */
    public function getPos(){
      return $this->_get(5);
    }
    
    /**
     * Set <pos> value
     *
     * @param \RO\Cmd\ScenePos $value
     * @return \RO\Cmd\MapItem
     */
    public function setPos(\RO\Cmd\ScenePos $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <owners> has a value
     *
     * @return boolean
     */
    public function hasOwners(){
      return $this->_has(6);
    }
    
    /**
     * Clear <owners> value
     *
     * @return \RO\Cmd\MapItem
     */
    public function clearOwners(){
      return $this->_clear(6);
    }
    
    /**
     * Get <owners> value
     *
     * @param int $idx
     * @return int
     */
    public function getOwners($idx = NULL){
      return $this->_get(6, $idx);
    }
    
    /**
     * Set <owners> value
     *
     * @param int $value
     * @return \RO\Cmd\MapItem
     */
    public function setOwners( $value, $idx = NULL){
      return $this->_set(6, $value, $idx);
    }
    
    /**
     * Get all elements of <owners>
     *
     * @return int[]
     */
    public function getOwnersList(){
     return $this->_get(6);
    }
    
    /**
     * Add a new element to <owners>
     *
     * @param int $value
     * @return \RO\Cmd\MapItem
     */
    public function addOwners( $value){
     return $this->_add(6, $value);
    }
    
    /**
     * Check if <refinelv> has a value
     *
     * @return boolean
     */
    public function hasRefinelv(){
      return $this->_has(7);
    }
    
    /**
     * Clear <refinelv> value
     *
     * @return \RO\Cmd\MapItem
     */
    public function clearRefinelv(){
      return $this->_clear(7);
    }
    
    /**
     * Get <refinelv> value
     *
     * @return int
     */
    public function getRefinelv(){
      return $this->_get(7);
    }
    
    /**
     * Set <refinelv> value
     *
     * @param int $value
     * @return \RO\Cmd\MapItem
     */
    public function setRefinelv( $value){
      return $this->_set(7, $value);
    }
  }
}

