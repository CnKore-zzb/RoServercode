<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: SceneItem.proto

namespace RO\Cmd {

  class LotterySubInfo extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $itemid = null;
    
    /**  @var int */
    public $recover_price = null;
    
    /**  @var int */
    public $rate = null;
    
    /**  @var string */
    public $rarity = null;
    
    /**  @var boolean */
    public $cur_batch = null;
    
    /**  @var int */
    public $id = null;
    
    /**  @var int */
    public $recover_itemid = null;
    
    /**  @var int */
    public $count = null;
    
    /**  @var int */
    public $female_itemid = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.LotterySubInfo');

      // OPTIONAL UINT32 itemid = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "itemid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 recover_price = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "recover_price";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 rate = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "rate";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING rarity = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "rarity";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL cur_batch = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "cur_batch";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 id = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 recover_itemid = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "recover_itemid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 count = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "count";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 female_itemid = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "female_itemid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <itemid> has a value
     *
     * @return boolean
     */
    public function hasItemid(){
      return $this->_has(1);
    }
    
    /**
     * Clear <itemid> value
     *
     * @return \RO\Cmd\LotterySubInfo
     */
    public function clearItemid(){
      return $this->_clear(1);
    }
    
    /**
     * Get <itemid> value
     *
     * @return int
     */
    public function getItemid(){
      return $this->_get(1);
    }
    
    /**
     * Set <itemid> value
     *
     * @param int $value
     * @return \RO\Cmd\LotterySubInfo
     */
    public function setItemid( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <recover_price> has a value
     *
     * @return boolean
     */
    public function hasRecoverPrice(){
      return $this->_has(2);
    }
    
    /**
     * Clear <recover_price> value
     *
     * @return \RO\Cmd\LotterySubInfo
     */
    public function clearRecoverPrice(){
      return $this->_clear(2);
    }
    
    /**
     * Get <recover_price> value
     *
     * @return int
     */
    public function getRecoverPrice(){
      return $this->_get(2);
    }
    
    /**
     * Set <recover_price> value
     *
     * @param int $value
     * @return \RO\Cmd\LotterySubInfo
     */
    public function setRecoverPrice( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <rate> has a value
     *
     * @return boolean
     */
    public function hasRate(){
      return $this->_has(3);
    }
    
    /**
     * Clear <rate> value
     *
     * @return \RO\Cmd\LotterySubInfo
     */
    public function clearRate(){
      return $this->_clear(3);
    }
    
    /**
     * Get <rate> value
     *
     * @return int
     */
    public function getRate(){
      return $this->_get(3);
    }
    
    /**
     * Set <rate> value
     *
     * @param int $value
     * @return \RO\Cmd\LotterySubInfo
     */
    public function setRate( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <rarity> has a value
     *
     * @return boolean
     */
    public function hasRarity(){
      return $this->_has(4);
    }
    
    /**
     * Clear <rarity> value
     *
     * @return \RO\Cmd\LotterySubInfo
     */
    public function clearRarity(){
      return $this->_clear(4);
    }
    
    /**
     * Get <rarity> value
     *
     * @return string
     */
    public function getRarity(){
      return $this->_get(4);
    }
    
    /**
     * Set <rarity> value
     *
     * @param string $value
     * @return \RO\Cmd\LotterySubInfo
     */
    public function setRarity( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <cur_batch> has a value
     *
     * @return boolean
     */
    public function hasCurBatch(){
      return $this->_has(5);
    }
    
    /**
     * Clear <cur_batch> value
     *
     * @return \RO\Cmd\LotterySubInfo
     */
    public function clearCurBatch(){
      return $this->_clear(5);
    }
    
    /**
     * Get <cur_batch> value
     *
     * @return boolean
     */
    public function getCurBatch(){
      return $this->_get(5);
    }
    
    /**
     * Set <cur_batch> value
     *
     * @param boolean $value
     * @return \RO\Cmd\LotterySubInfo
     */
    public function setCurBatch( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(6);
    }
    
    /**
     * Clear <id> value
     *
     * @return \RO\Cmd\LotterySubInfo
     */
    public function clearId(){
      return $this->_clear(6);
    }
    
    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(6);
    }
    
    /**
     * Set <id> value
     *
     * @param int $value
     * @return \RO\Cmd\LotterySubInfo
     */
    public function setId( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <recover_itemid> has a value
     *
     * @return boolean
     */
    public function hasRecoverItemid(){
      return $this->_has(7);
    }
    
    /**
     * Clear <recover_itemid> value
     *
     * @return \RO\Cmd\LotterySubInfo
     */
    public function clearRecoverItemid(){
      return $this->_clear(7);
    }
    
    /**
     * Get <recover_itemid> value
     *
     * @return int
     */
    public function getRecoverItemid(){
      return $this->_get(7);
    }
    
    /**
     * Set <recover_itemid> value
     *
     * @param int $value
     * @return \RO\Cmd\LotterySubInfo
     */
    public function setRecoverItemid( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <count> has a value
     *
     * @return boolean
     */
    public function hasCount(){
      return $this->_has(8);
    }
    
    /**
     * Clear <count> value
     *
     * @return \RO\Cmd\LotterySubInfo
     */
    public function clearCount(){
      return $this->_clear(8);
    }
    
    /**
     * Get <count> value
     *
     * @return int
     */
    public function getCount(){
      return $this->_get(8);
    }
    
    /**
     * Set <count> value
     *
     * @param int $value
     * @return \RO\Cmd\LotterySubInfo
     */
    public function setCount( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <female_itemid> has a value
     *
     * @return boolean
     */
    public function hasFemaleItemid(){
      return $this->_has(9);
    }
    
    /**
     * Clear <female_itemid> value
     *
     * @return \RO\Cmd\LotterySubInfo
     */
    public function clearFemaleItemid(){
      return $this->_clear(9);
    }
    
    /**
     * Get <female_itemid> value
     *
     * @return int
     */
    public function getFemaleItemid(){
      return $this->_get(9);
    }
    
    /**
     * Set <female_itemid> value
     *
     * @param int $value
     * @return \RO\Cmd\LotterySubInfo
     */
    public function setFemaleItemid( $value){
      return $this->_set(9, $value);
    }
  }
}

