<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: GuildCmd.proto

namespace RO\Cmd {

  class TreasureActionGuildCmd extends \DrSlump\Protobuf\Message {

    /**  @var int - \RO\Cmd\Command */
    public $cmd = \RO\Cmd\Command::SESSION_USER_GUILD_PROTOCMD;
    
    /**  @var int - \RO\Cmd\GuildParam */
    public $param = \RO\Cmd\GuildParam::GUILDPARAM_TREASURE_ACTION;
    
    /**  @var int */
    public $charid = 0;
    
    /**  @var int */
    public $guild_treasure_count = 0;
    
    /**  @var int */
    public $bcoin_treasure_count = 0;
    
    /**  @var int - \RO\Cmd\ETreasureAction */
    public $action = \RO\Cmd\ETreasureAction::ETREASUREACTION_MIN;
    
    /**  @var int - \RO\Cmd\ETreasurePoint */
    public $point = \RO\Cmd\ETreasurePoint::ETREASUREPOINT_MIN;
    
    /**  @var \RO\Cmd\GuildTreasure */
    public $treasure = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.TreasureActionGuildCmd');

      // OPTIONAL ENUM cmd = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "cmd";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\Command';
      $f->default   = \RO\Cmd\Command::SESSION_USER_GUILD_PROTOCMD;
      $descriptor->addField($f);

      // OPTIONAL ENUM param = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "param";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\GuildParam';
      $f->default   = \RO\Cmd\GuildParam::GUILDPARAM_TREASURE_ACTION;
      $descriptor->addField($f);

      // OPTIONAL UINT64 charid = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "charid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 guild_treasure_count = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "guild_treasure_count";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 bcoin_treasure_count = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "bcoin_treasure_count";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL ENUM action = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "action";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\ETreasureAction';
      $f->default   = \RO\Cmd\ETreasureAction::ETREASUREACTION_MIN;
      $descriptor->addField($f);

      // OPTIONAL ENUM point = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "point";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\ETreasurePoint';
      $f->default   = \RO\Cmd\ETreasurePoint::ETREASUREPOINT_MIN;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE treasure = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "treasure";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\GuildTreasure';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <cmd> has a value
     *
     * @return boolean
     */
    public function hasCmd(){
      return $this->_has(1);
    }
    
    /**
     * Clear <cmd> value
     *
     * @return \RO\Cmd\TreasureActionGuildCmd
     */
    public function clearCmd(){
      return $this->_clear(1);
    }
    
    /**
     * Get <cmd> value
     *
     * @return int - \RO\Cmd\Command
     */
    public function getCmd(){
      return $this->_get(1);
    }
    
    /**
     * Set <cmd> value
     *
     * @param int - \RO\Cmd\Command $value
     * @return \RO\Cmd\TreasureActionGuildCmd
     */
    public function setCmd( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <param> has a value
     *
     * @return boolean
     */
    public function hasParam(){
      return $this->_has(2);
    }
    
    /**
     * Clear <param> value
     *
     * @return \RO\Cmd\TreasureActionGuildCmd
     */
    public function clearParam(){
      return $this->_clear(2);
    }
    
    /**
     * Get <param> value
     *
     * @return int - \RO\Cmd\GuildParam
     */
    public function getParam(){
      return $this->_get(2);
    }
    
    /**
     * Set <param> value
     *
     * @param int - \RO\Cmd\GuildParam $value
     * @return \RO\Cmd\TreasureActionGuildCmd
     */
    public function setParam( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <charid> has a value
     *
     * @return boolean
     */
    public function hasCharid(){
      return $this->_has(3);
    }
    
    /**
     * Clear <charid> value
     *
     * @return \RO\Cmd\TreasureActionGuildCmd
     */
    public function clearCharid(){
      return $this->_clear(3);
    }
    
    /**
     * Get <charid> value
     *
     * @return int
     */
    public function getCharid(){
      return $this->_get(3);
    }
    
    /**
     * Set <charid> value
     *
     * @param int $value
     * @return \RO\Cmd\TreasureActionGuildCmd
     */
    public function setCharid( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <guild_treasure_count> has a value
     *
     * @return boolean
     */
    public function hasGuildTreasureCount(){
      return $this->_has(4);
    }
    
    /**
     * Clear <guild_treasure_count> value
     *
     * @return \RO\Cmd\TreasureActionGuildCmd
     */
    public function clearGuildTreasureCount(){
      return $this->_clear(4);
    }
    
    /**
     * Get <guild_treasure_count> value
     *
     * @return int
     */
    public function getGuildTreasureCount(){
      return $this->_get(4);
    }
    
    /**
     * Set <guild_treasure_count> value
     *
     * @param int $value
     * @return \RO\Cmd\TreasureActionGuildCmd
     */
    public function setGuildTreasureCount( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <bcoin_treasure_count> has a value
     *
     * @return boolean
     */
    public function hasBcoinTreasureCount(){
      return $this->_has(5);
    }
    
    /**
     * Clear <bcoin_treasure_count> value
     *
     * @return \RO\Cmd\TreasureActionGuildCmd
     */
    public function clearBcoinTreasureCount(){
      return $this->_clear(5);
    }
    
    /**
     * Get <bcoin_treasure_count> value
     *
     * @return int
     */
    public function getBcoinTreasureCount(){
      return $this->_get(5);
    }
    
    /**
     * Set <bcoin_treasure_count> value
     *
     * @param int $value
     * @return \RO\Cmd\TreasureActionGuildCmd
     */
    public function setBcoinTreasureCount( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <action> has a value
     *
     * @return boolean
     */
    public function hasAction(){
      return $this->_has(6);
    }
    
    /**
     * Clear <action> value
     *
     * @return \RO\Cmd\TreasureActionGuildCmd
     */
    public function clearAction(){
      return $this->_clear(6);
    }
    
    /**
     * Get <action> value
     *
     * @return int - \RO\Cmd\ETreasureAction
     */
    public function getAction(){
      return $this->_get(6);
    }
    
    /**
     * Set <action> value
     *
     * @param int - \RO\Cmd\ETreasureAction $value
     * @return \RO\Cmd\TreasureActionGuildCmd
     */
    public function setAction( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <point> has a value
     *
     * @return boolean
     */
    public function hasPoint(){
      return $this->_has(7);
    }
    
    /**
     * Clear <point> value
     *
     * @return \RO\Cmd\TreasureActionGuildCmd
     */
    public function clearPoint(){
      return $this->_clear(7);
    }
    
    /**
     * Get <point> value
     *
     * @return int - \RO\Cmd\ETreasurePoint
     */
    public function getPoint(){
      return $this->_get(7);
    }
    
    /**
     * Set <point> value
     *
     * @param int - \RO\Cmd\ETreasurePoint $value
     * @return \RO\Cmd\TreasureActionGuildCmd
     */
    public function setPoint( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <treasure> has a value
     *
     * @return boolean
     */
    public function hasTreasure(){
      return $this->_has(8);
    }
    
    /**
     * Clear <treasure> value
     *
     * @return \RO\Cmd\TreasureActionGuildCmd
     */
    public function clearTreasure(){
      return $this->_clear(8);
    }
    
    /**
     * Get <treasure> value
     *
     * @return \RO\Cmd\GuildTreasure
     */
    public function getTreasure(){
      return $this->_get(8);
    }
    
    /**
     * Set <treasure> value
     *
     * @param \RO\Cmd\GuildTreasure $value
     * @return \RO\Cmd\TreasureActionGuildCmd
     */
    public function setTreasure(\RO\Cmd\GuildTreasure $value){
      return $this->_set(8, $value);
    }
  }
}

