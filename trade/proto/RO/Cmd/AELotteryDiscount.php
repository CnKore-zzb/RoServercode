<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: ActivityEvent.proto

namespace RO\Cmd {

  class AELotteryDiscount extends \DrSlump\Protobuf\Message {

    /**  @var int - \RO\Cmd\ELotteryType */
    public $lotterytype = null;
    
    /**  @var int - \RO\Cmd\ECoinType */
    public $cointype = null;
    
    /**  @var int - \RO\Cmd\EUserType */
    public $usertype = null;
    
    /**  @var int */
    public $discount = null;
    
    /**  @var int */
    public $count = null;
    
    /**  @var int */
    public $yearmonth = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.AELotteryDiscount');

      // OPTIONAL ENUM lotterytype = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "lotterytype";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\ELotteryType';
      $descriptor->addField($f);

      // OPTIONAL ENUM cointype = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "cointype";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\ECoinType';
      $descriptor->addField($f);

      // OPTIONAL ENUM usertype = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "usertype";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\EUserType';
      $descriptor->addField($f);

      // OPTIONAL UINT32 discount = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "discount";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 count = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "count";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 yearmonth = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "yearmonth";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <lotterytype> has a value
     *
     * @return boolean
     */
    public function hasLotterytype(){
      return $this->_has(1);
    }
    
    /**
     * Clear <lotterytype> value
     *
     * @return \RO\Cmd\AELotteryDiscount
     */
    public function clearLotterytype(){
      return $this->_clear(1);
    }
    
    /**
     * Get <lotterytype> value
     *
     * @return int - \RO\Cmd\ELotteryType
     */
    public function getLotterytype(){
      return $this->_get(1);
    }
    
    /**
     * Set <lotterytype> value
     *
     * @param int - \RO\Cmd\ELotteryType $value
     * @return \RO\Cmd\AELotteryDiscount
     */
    public function setLotterytype( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <cointype> has a value
     *
     * @return boolean
     */
    public function hasCointype(){
      return $this->_has(2);
    }
    
    /**
     * Clear <cointype> value
     *
     * @return \RO\Cmd\AELotteryDiscount
     */
    public function clearCointype(){
      return $this->_clear(2);
    }
    
    /**
     * Get <cointype> value
     *
     * @return int - \RO\Cmd\ECoinType
     */
    public function getCointype(){
      return $this->_get(2);
    }
    
    /**
     * Set <cointype> value
     *
     * @param int - \RO\Cmd\ECoinType $value
     * @return \RO\Cmd\AELotteryDiscount
     */
    public function setCointype( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <usertype> has a value
     *
     * @return boolean
     */
    public function hasUsertype(){
      return $this->_has(3);
    }
    
    /**
     * Clear <usertype> value
     *
     * @return \RO\Cmd\AELotteryDiscount
     */
    public function clearUsertype(){
      return $this->_clear(3);
    }
    
    /**
     * Get <usertype> value
     *
     * @return int - \RO\Cmd\EUserType
     */
    public function getUsertype(){
      return $this->_get(3);
    }
    
    /**
     * Set <usertype> value
     *
     * @param int - \RO\Cmd\EUserType $value
     * @return \RO\Cmd\AELotteryDiscount
     */
    public function setUsertype( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <discount> has a value
     *
     * @return boolean
     */
    public function hasDiscount(){
      return $this->_has(4);
    }
    
    /**
     * Clear <discount> value
     *
     * @return \RO\Cmd\AELotteryDiscount
     */
    public function clearDiscount(){
      return $this->_clear(4);
    }
    
    /**
     * Get <discount> value
     *
     * @return int
     */
    public function getDiscount(){
      return $this->_get(4);
    }
    
    /**
     * Set <discount> value
     *
     * @param int $value
     * @return \RO\Cmd\AELotteryDiscount
     */
    public function setDiscount( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <count> has a value
     *
     * @return boolean
     */
    public function hasCount(){
      return $this->_has(5);
    }
    
    /**
     * Clear <count> value
     *
     * @return \RO\Cmd\AELotteryDiscount
     */
    public function clearCount(){
      return $this->_clear(5);
    }
    
    /**
     * Get <count> value
     *
     * @return int
     */
    public function getCount(){
      return $this->_get(5);
    }
    
    /**
     * Set <count> value
     *
     * @param int $value
     * @return \RO\Cmd\AELotteryDiscount
     */
    public function setCount( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <yearmonth> has a value
     *
     * @return boolean
     */
    public function hasYearmonth(){
      return $this->_has(7);
    }
    
    /**
     * Clear <yearmonth> value
     *
     * @return \RO\Cmd\AELotteryDiscount
     */
    public function clearYearmonth(){
      return $this->_clear(7);
    }
    
    /**
     * Get <yearmonth> value
     *
     * @return int
     */
    public function getYearmonth(){
      return $this->_get(7);
    }
    
    /**
     * Set <yearmonth> value
     *
     * @param int $value
     * @return \RO\Cmd\AELotteryDiscount
     */
    public function setYearmonth( $value){
      return $this->_set(7, $value);
    }
  }
}

