<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: RecordCmd.proto

namespace RO\Cmd {

  class AstrolabeData extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $id = null;
    
    /**  @var \RO\Cmd\AstrolabeStarData[]  */
    public $stars = array();
    
    /**  @var \RO\Cmd\AstrolabeCostData[]  */
    public $costs = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.AstrolabeData');

      // OPTIONAL UINT32 id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE stars = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "stars";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\AstrolabeStarData';
      $descriptor->addField($f);

      // REPEATED MESSAGE costs = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "costs";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\AstrolabeCostData';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \RO\Cmd\AstrolabeData
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param int $value
     * @return \RO\Cmd\AstrolabeData
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <stars> has a value
     *
     * @return boolean
     */
    public function hasStars(){
      return $this->_has(2);
    }
    
    /**
     * Clear <stars> value
     *
     * @return \RO\Cmd\AstrolabeData
     */
    public function clearStars(){
      return $this->_clear(2);
    }
    
    /**
     * Get <stars> value
     *
     * @param int $idx
     * @return \RO\Cmd\AstrolabeStarData
     */
    public function getStars($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <stars> value
     *
     * @param \RO\Cmd\AstrolabeStarData $value
     * @return \RO\Cmd\AstrolabeData
     */
    public function setStars(\RO\Cmd\AstrolabeStarData $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <stars>
     *
     * @return \RO\Cmd\AstrolabeStarData[]
     */
    public function getStarsList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <stars>
     *
     * @param \RO\Cmd\AstrolabeStarData $value
     * @return \RO\Cmd\AstrolabeData
     */
    public function addStars(\RO\Cmd\AstrolabeStarData $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <costs> has a value
     *
     * @return boolean
     */
    public function hasCosts(){
      return $this->_has(3);
    }
    
    /**
     * Clear <costs> value
     *
     * @return \RO\Cmd\AstrolabeData
     */
    public function clearCosts(){
      return $this->_clear(3);
    }
    
    /**
     * Get <costs> value
     *
     * @param int $idx
     * @return \RO\Cmd\AstrolabeCostData
     */
    public function getCosts($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <costs> value
     *
     * @param \RO\Cmd\AstrolabeCostData $value
     * @return \RO\Cmd\AstrolabeData
     */
    public function setCosts(\RO\Cmd\AstrolabeCostData $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <costs>
     *
     * @return \RO\Cmd\AstrolabeCostData[]
     */
    public function getCostsList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <costs>
     *
     * @param \RO\Cmd\AstrolabeCostData $value
     * @return \RO\Cmd\AstrolabeData
     */
    public function addCosts(\RO\Cmd\AstrolabeCostData $value){
     return $this->_add(3, $value);
    }
  }
}

