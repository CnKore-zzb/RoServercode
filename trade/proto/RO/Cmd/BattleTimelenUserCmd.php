<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: SceneUser2.proto

namespace RO\Cmd {

  class BattleTimelenUserCmd extends \DrSlump\Protobuf\Message {

    /**  @var int - \RO\Cmd\Command */
    public $cmd = \RO\Cmd\Command::SCENE_USER2_PROTOCMD;
    
    /**  @var int - \RO\Cmd\User2Param */
    public $param = \RO\Cmd\User2Param::USER2PARAM_BATTLE_TIMELEN_USER_CMD;
    
    /**  @var int */
    public $timelen = 0;
    
    /**  @var int */
    public $totaltime = 0;
    
    /**  @var int */
    public $musictime = 0;
    
    /**  @var int - \RO\Cmd\EBattleStatus */
    public $estatus = \RO\Cmd\EBattleStatus::EBATTLESTATUS_EASY;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.BattleTimelenUserCmd');

      // OPTIONAL ENUM cmd = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "cmd";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\Command';
      $f->default   = \RO\Cmd\Command::SCENE_USER2_PROTOCMD;
      $descriptor->addField($f);

      // OPTIONAL ENUM param = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "param";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\User2Param';
      $f->default   = \RO\Cmd\User2Param::USER2PARAM_BATTLE_TIMELEN_USER_CMD;
      $descriptor->addField($f);

      // OPTIONAL UINT32 timelen = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "timelen";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 totaltime = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "totaltime";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 musictime = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "musictime";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL ENUM estatus = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "estatus";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\EBattleStatus';
      $f->default   = \RO\Cmd\EBattleStatus::EBATTLESTATUS_EASY;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <cmd> has a value
     *
     * @return boolean
     */
    public function hasCmd(){
      return $this->_has(1);
    }
    
    /**
     * Clear <cmd> value
     *
     * @return \RO\Cmd\BattleTimelenUserCmd
     */
    public function clearCmd(){
      return $this->_clear(1);
    }
    
    /**
     * Get <cmd> value
     *
     * @return int - \RO\Cmd\Command
     */
    public function getCmd(){
      return $this->_get(1);
    }
    
    /**
     * Set <cmd> value
     *
     * @param int - \RO\Cmd\Command $value
     * @return \RO\Cmd\BattleTimelenUserCmd
     */
    public function setCmd( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <param> has a value
     *
     * @return boolean
     */
    public function hasParam(){
      return $this->_has(2);
    }
    
    /**
     * Clear <param> value
     *
     * @return \RO\Cmd\BattleTimelenUserCmd
     */
    public function clearParam(){
      return $this->_clear(2);
    }
    
    /**
     * Get <param> value
     *
     * @return int - \RO\Cmd\User2Param
     */
    public function getParam(){
      return $this->_get(2);
    }
    
    /**
     * Set <param> value
     *
     * @param int - \RO\Cmd\User2Param $value
     * @return \RO\Cmd\BattleTimelenUserCmd
     */
    public function setParam( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <timelen> has a value
     *
     * @return boolean
     */
    public function hasTimelen(){
      return $this->_has(3);
    }
    
    /**
     * Clear <timelen> value
     *
     * @return \RO\Cmd\BattleTimelenUserCmd
     */
    public function clearTimelen(){
      return $this->_clear(3);
    }
    
    /**
     * Get <timelen> value
     *
     * @return int
     */
    public function getTimelen(){
      return $this->_get(3);
    }
    
    /**
     * Set <timelen> value
     *
     * @param int $value
     * @return \RO\Cmd\BattleTimelenUserCmd
     */
    public function setTimelen( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <totaltime> has a value
     *
     * @return boolean
     */
    public function hasTotaltime(){
      return $this->_has(4);
    }
    
    /**
     * Clear <totaltime> value
     *
     * @return \RO\Cmd\BattleTimelenUserCmd
     */
    public function clearTotaltime(){
      return $this->_clear(4);
    }
    
    /**
     * Get <totaltime> value
     *
     * @return int
     */
    public function getTotaltime(){
      return $this->_get(4);
    }
    
    /**
     * Set <totaltime> value
     *
     * @param int $value
     * @return \RO\Cmd\BattleTimelenUserCmd
     */
    public function setTotaltime( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <musictime> has a value
     *
     * @return boolean
     */
    public function hasMusictime(){
      return $this->_has(5);
    }
    
    /**
     * Clear <musictime> value
     *
     * @return \RO\Cmd\BattleTimelenUserCmd
     */
    public function clearMusictime(){
      return $this->_clear(5);
    }
    
    /**
     * Get <musictime> value
     *
     * @return int
     */
    public function getMusictime(){
      return $this->_get(5);
    }
    
    /**
     * Set <musictime> value
     *
     * @param int $value
     * @return \RO\Cmd\BattleTimelenUserCmd
     */
    public function setMusictime( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <estatus> has a value
     *
     * @return boolean
     */
    public function hasEstatus(){
      return $this->_has(6);
    }
    
    /**
     * Clear <estatus> value
     *
     * @return \RO\Cmd\BattleTimelenUserCmd
     */
    public function clearEstatus(){
      return $this->_clear(6);
    }
    
    /**
     * Get <estatus> value
     *
     * @return int - \RO\Cmd\EBattleStatus
     */
    public function getEstatus(){
      return $this->_get(6);
    }
    
    /**
     * Set <estatus> value
     *
     * @param int - \RO\Cmd\EBattleStatus $value
     * @return \RO\Cmd\BattleTimelenUserCmd
     */
    public function setEstatus( $value){
      return $this->_set(6, $value);
    }
  }
}

