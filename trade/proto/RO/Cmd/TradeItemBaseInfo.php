<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: SceneItem.proto

namespace RO\Cmd {

  class TradeItemBaseInfo extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $itemid = null;
    
    /**  @var int */
    public $price = null;
    
    /**  @var int */
    public $count = null;
    
    /**  @var string */
    public $guid = null;
    
    /**  @var int */
    public $order_id = null;
    
    /**  @var int */
    public $refine_lv = null;
    
    /**  @var boolean */
    public $overlap = null;
    
    /**  @var boolean */
    public $is_expired = null;
    
    /**  @var \RO\Cmd\ItemData */
    public $item_data = null;
    
    /**  @var int */
    public $publicity_id = 0;
    
    /**  @var int */
    public $end_time = 0;
    
    /**  @var string */
    public $key = null;
    
    /**  @var int */
    public $charid = null;
    
    /**  @var string */
    public $name = null;
    
    /**  @var int - \RO\Cmd\ETradeType */
    public $type = \RO\Cmd\ETradeType::ETRADETYPE_TRADE;
    
    /**  @var int */
    public $up_rate = 0;
    
    /**  @var int */
    public $down_rate = 0;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.TradeItemBaseInfo');

      // OPTIONAL UINT32 itemid = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "itemid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 price = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "price";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 count = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "count";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING guid = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "guid";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT64 order_id = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "order_id";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 refine_lv = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "refine_lv";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL overlap = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "overlap";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL is_expired = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "is_expired";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE item_data = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "item_data";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\ItemData';
      $descriptor->addField($f);

      // OPTIONAL UINT32 publicity_id = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "publicity_id";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 end_time = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "end_time";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL STRING key = 13
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 13;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT64 charid = 14
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 14;
      $f->name      = "charid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING name = 15
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 15;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM type = 16
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 16;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\ETradeType';
      $f->default   = \RO\Cmd\ETradeType::ETRADETYPE_TRADE;
      $descriptor->addField($f);

      // OPTIONAL UINT32 up_rate = 17
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 17;
      $f->name      = "up_rate";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 down_rate = 18
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 18;
      $f->name      = "down_rate";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <itemid> has a value
     *
     * @return boolean
     */
    public function hasItemid(){
      return $this->_has(1);
    }
    
    /**
     * Clear <itemid> value
     *
     * @return \RO\Cmd\TradeItemBaseInfo
     */
    public function clearItemid(){
      return $this->_clear(1);
    }
    
    /**
     * Get <itemid> value
     *
     * @return int
     */
    public function getItemid(){
      return $this->_get(1);
    }
    
    /**
     * Set <itemid> value
     *
     * @param int $value
     * @return \RO\Cmd\TradeItemBaseInfo
     */
    public function setItemid( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <price> has a value
     *
     * @return boolean
     */
    public function hasPrice(){
      return $this->_has(2);
    }
    
    /**
     * Clear <price> value
     *
     * @return \RO\Cmd\TradeItemBaseInfo
     */
    public function clearPrice(){
      return $this->_clear(2);
    }
    
    /**
     * Get <price> value
     *
     * @return int
     */
    public function getPrice(){
      return $this->_get(2);
    }
    
    /**
     * Set <price> value
     *
     * @param int $value
     * @return \RO\Cmd\TradeItemBaseInfo
     */
    public function setPrice( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <count> has a value
     *
     * @return boolean
     */
    public function hasCount(){
      return $this->_has(3);
    }
    
    /**
     * Clear <count> value
     *
     * @return \RO\Cmd\TradeItemBaseInfo
     */
    public function clearCount(){
      return $this->_clear(3);
    }
    
    /**
     * Get <count> value
     *
     * @return int
     */
    public function getCount(){
      return $this->_get(3);
    }
    
    /**
     * Set <count> value
     *
     * @param int $value
     * @return \RO\Cmd\TradeItemBaseInfo
     */
    public function setCount( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <guid> has a value
     *
     * @return boolean
     */
    public function hasGuid(){
      return $this->_has(4);
    }
    
    /**
     * Clear <guid> value
     *
     * @return \RO\Cmd\TradeItemBaseInfo
     */
    public function clearGuid(){
      return $this->_clear(4);
    }
    
    /**
     * Get <guid> value
     *
     * @return string
     */
    public function getGuid(){
      return $this->_get(4);
    }
    
    /**
     * Set <guid> value
     *
     * @param string $value
     * @return \RO\Cmd\TradeItemBaseInfo
     */
    public function setGuid( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <order_id> has a value
     *
     * @return boolean
     */
    public function hasOrderId(){
      return $this->_has(5);
    }
    
    /**
     * Clear <order_id> value
     *
     * @return \RO\Cmd\TradeItemBaseInfo
     */
    public function clearOrderId(){
      return $this->_clear(5);
    }
    
    /**
     * Get <order_id> value
     *
     * @return int
     */
    public function getOrderId(){
      return $this->_get(5);
    }
    
    /**
     * Set <order_id> value
     *
     * @param int $value
     * @return \RO\Cmd\TradeItemBaseInfo
     */
    public function setOrderId( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <refine_lv> has a value
     *
     * @return boolean
     */
    public function hasRefineLv(){
      return $this->_has(6);
    }
    
    /**
     * Clear <refine_lv> value
     *
     * @return \RO\Cmd\TradeItemBaseInfo
     */
    public function clearRefineLv(){
      return $this->_clear(6);
    }
    
    /**
     * Get <refine_lv> value
     *
     * @return int
     */
    public function getRefineLv(){
      return $this->_get(6);
    }
    
    /**
     * Set <refine_lv> value
     *
     * @param int $value
     * @return \RO\Cmd\TradeItemBaseInfo
     */
    public function setRefineLv( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <overlap> has a value
     *
     * @return boolean
     */
    public function hasOverlap(){
      return $this->_has(8);
    }
    
    /**
     * Clear <overlap> value
     *
     * @return \RO\Cmd\TradeItemBaseInfo
     */
    public function clearOverlap(){
      return $this->_clear(8);
    }
    
    /**
     * Get <overlap> value
     *
     * @return boolean
     */
    public function getOverlap(){
      return $this->_get(8);
    }
    
    /**
     * Set <overlap> value
     *
     * @param boolean $value
     * @return \RO\Cmd\TradeItemBaseInfo
     */
    public function setOverlap( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <is_expired> has a value
     *
     * @return boolean
     */
    public function hasIsExpired(){
      return $this->_has(9);
    }
    
    /**
     * Clear <is_expired> value
     *
     * @return \RO\Cmd\TradeItemBaseInfo
     */
    public function clearIsExpired(){
      return $this->_clear(9);
    }
    
    /**
     * Get <is_expired> value
     *
     * @return boolean
     */
    public function getIsExpired(){
      return $this->_get(9);
    }
    
    /**
     * Set <is_expired> value
     *
     * @param boolean $value
     * @return \RO\Cmd\TradeItemBaseInfo
     */
    public function setIsExpired( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <item_data> has a value
     *
     * @return boolean
     */
    public function hasItemData(){
      return $this->_has(10);
    }
    
    /**
     * Clear <item_data> value
     *
     * @return \RO\Cmd\TradeItemBaseInfo
     */
    public function clearItemData(){
      return $this->_clear(10);
    }
    
    /**
     * Get <item_data> value
     *
     * @return \RO\Cmd\ItemData
     */
    public function getItemData(){
      return $this->_get(10);
    }
    
    /**
     * Set <item_data> value
     *
     * @param \RO\Cmd\ItemData $value
     * @return \RO\Cmd\TradeItemBaseInfo
     */
    public function setItemData(\RO\Cmd\ItemData $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <publicity_id> has a value
     *
     * @return boolean
     */
    public function hasPublicityId(){
      return $this->_has(11);
    }
    
    /**
     * Clear <publicity_id> value
     *
     * @return \RO\Cmd\TradeItemBaseInfo
     */
    public function clearPublicityId(){
      return $this->_clear(11);
    }
    
    /**
     * Get <publicity_id> value
     *
     * @return int
     */
    public function getPublicityId(){
      return $this->_get(11);
    }
    
    /**
     * Set <publicity_id> value
     *
     * @param int $value
     * @return \RO\Cmd\TradeItemBaseInfo
     */
    public function setPublicityId( $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <end_time> has a value
     *
     * @return boolean
     */
    public function hasEndTime(){
      return $this->_has(12);
    }
    
    /**
     * Clear <end_time> value
     *
     * @return \RO\Cmd\TradeItemBaseInfo
     */
    public function clearEndTime(){
      return $this->_clear(12);
    }
    
    /**
     * Get <end_time> value
     *
     * @return int
     */
    public function getEndTime(){
      return $this->_get(12);
    }
    
    /**
     * Set <end_time> value
     *
     * @param int $value
     * @return \RO\Cmd\TradeItemBaseInfo
     */
    public function setEndTime( $value){
      return $this->_set(12, $value);
    }
    
    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(13);
    }
    
    /**
     * Clear <key> value
     *
     * @return \RO\Cmd\TradeItemBaseInfo
     */
    public function clearKey(){
      return $this->_clear(13);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(13);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \RO\Cmd\TradeItemBaseInfo
     */
    public function setKey( $value){
      return $this->_set(13, $value);
    }
    
    /**
     * Check if <charid> has a value
     *
     * @return boolean
     */
    public function hasCharid(){
      return $this->_has(14);
    }
    
    /**
     * Clear <charid> value
     *
     * @return \RO\Cmd\TradeItemBaseInfo
     */
    public function clearCharid(){
      return $this->_clear(14);
    }
    
    /**
     * Get <charid> value
     *
     * @return int
     */
    public function getCharid(){
      return $this->_get(14);
    }
    
    /**
     * Set <charid> value
     *
     * @param int $value
     * @return \RO\Cmd\TradeItemBaseInfo
     */
    public function setCharid( $value){
      return $this->_set(14, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(15);
    }
    
    /**
     * Clear <name> value
     *
     * @return \RO\Cmd\TradeItemBaseInfo
     */
    public function clearName(){
      return $this->_clear(15);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(15);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \RO\Cmd\TradeItemBaseInfo
     */
    public function setName( $value){
      return $this->_set(15, $value);
    }
    
    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(16);
    }
    
    /**
     * Clear <type> value
     *
     * @return \RO\Cmd\TradeItemBaseInfo
     */
    public function clearType(){
      return $this->_clear(16);
    }
    
    /**
     * Get <type> value
     *
     * @return int - \RO\Cmd\ETradeType
     */
    public function getType(){
      return $this->_get(16);
    }
    
    /**
     * Set <type> value
     *
     * @param int - \RO\Cmd\ETradeType $value
     * @return \RO\Cmd\TradeItemBaseInfo
     */
    public function setType( $value){
      return $this->_set(16, $value);
    }
    
    /**
     * Check if <up_rate> has a value
     *
     * @return boolean
     */
    public function hasUpRate(){
      return $this->_has(17);
    }
    
    /**
     * Clear <up_rate> value
     *
     * @return \RO\Cmd\TradeItemBaseInfo
     */
    public function clearUpRate(){
      return $this->_clear(17);
    }
    
    /**
     * Get <up_rate> value
     *
     * @return int
     */
    public function getUpRate(){
      return $this->_get(17);
    }
    
    /**
     * Set <up_rate> value
     *
     * @param int $value
     * @return \RO\Cmd\TradeItemBaseInfo
     */
    public function setUpRate( $value){
      return $this->_set(17, $value);
    }
    
    /**
     * Check if <down_rate> has a value
     *
     * @return boolean
     */
    public function hasDownRate(){
      return $this->_has(18);
    }
    
    /**
     * Clear <down_rate> value
     *
     * @return \RO\Cmd\TradeItemBaseInfo
     */
    public function clearDownRate(){
      return $this->_clear(18);
    }
    
    /**
     * Get <down_rate> value
     *
     * @return int
     */
    public function getDownRate(){
      return $this->_get(18);
    }
    
    /**
     * Set <down_rate> value
     *
     * @param int $value
     * @return \RO\Cmd\TradeItemBaseInfo
     */
    public function setDownRate( $value){
      return $this->_set(18, $value);
    }
  }
}

