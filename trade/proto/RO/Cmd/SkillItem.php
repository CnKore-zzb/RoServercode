<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: SceneSkill.proto

namespace RO\Cmd {

  class SkillItem extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $id = 0;
    
    /**  @var int */
    public $pos = 0;
    
    /**  @var int */
    public $cd = 0;
    
    /**  @var boolean */
    public $active = false;
    
    /**  @var boolean */
    public $learn = false;
    
    /**  @var int - \RO\Cmd\ESource */
    public $source = \RO\Cmd\ESource::ESOURCE_MIN;
    
    /**  @var int - \RO\Cmd\EProfession */
    public $profession = \RO\Cmd\EProfession::EPROFESSION_MIN;
    
    /**  @var \RO\Cmd\SkillConsume */
    public $consume = null;
    
    /**  @var int */
    public $sourceid = 0;
    
    /**  @var boolean */
    public $shadow = false;
    
    /**  @var int */
    public $autopos = 0;
    
    /**  @var int */
    public $extendpos = 0;
    
    /**  @var int */
    public $runespecid = 0;
    
    /**  @var int */
    public $replaceid = 0;
    
    /**  @var boolean */
    public $selectswitch = true;
    
    /**  @var int */
    public $extralv = 0;
    
    /**  @var int */
    public $ownerid = 0;
    
    /**  @var boolean */
    public $notreset = false;
    
    /**  @var \RO\Cmd\SkillShortcut[]  */
    public $shortcuts = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.SkillItem');

      // OPTIONAL UINT32 id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 pos = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "pos";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 cd = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "cd";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL BOOL active = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "active";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = false;
      $descriptor->addField($f);

      // OPTIONAL BOOL learn = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "learn";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = false;
      $descriptor->addField($f);

      // OPTIONAL ENUM source = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "source";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\ESource';
      $f->default   = \RO\Cmd\ESource::ESOURCE_MIN;
      $descriptor->addField($f);

      // OPTIONAL ENUM profession = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "profession";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\EProfession';
      $f->default   = \RO\Cmd\EProfession::EPROFESSION_MIN;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE consume = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "consume";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\SkillConsume';
      $descriptor->addField($f);

      // OPTIONAL UINT32 sourceid = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "sourceid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL BOOL shadow = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "shadow";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = false;
      $descriptor->addField($f);

      // OPTIONAL UINT32 autopos = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "autopos";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 extendpos = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "extendpos";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 runespecid = 13
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 13;
      $f->name      = "runespecid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 replaceid = 14
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 14;
      $f->name      = "replaceid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL BOOL selectswitch = 15
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 15;
      $f->name      = "selectswitch";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = true;
      $descriptor->addField($f);

      // OPTIONAL UINT32 extralv = 16
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 16;
      $f->name      = "extralv";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT64 ownerid = 17
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 17;
      $f->name      = "ownerid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL BOOL notreset = 18
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 18;
      $f->name      = "notreset";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = false;
      $descriptor->addField($f);

      // REPEATED MESSAGE shortcuts = 19
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 19;
      $f->name      = "shortcuts";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\SkillShortcut';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \RO\Cmd\SkillItem
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param int $value
     * @return \RO\Cmd\SkillItem
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <pos> has a value
     *
     * @return boolean
     */
    public function hasPos(){
      return $this->_has(2);
    }
    
    /**
     * Clear <pos> value
     *
     * @return \RO\Cmd\SkillItem
     */
    public function clearPos(){
      return $this->_clear(2);
    }
    
    /**
     * Get <pos> value
     *
     * @return int
     */
    public function getPos(){
      return $this->_get(2);
    }
    
    /**
     * Set <pos> value
     *
     * @param int $value
     * @return \RO\Cmd\SkillItem
     */
    public function setPos( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <cd> has a value
     *
     * @return boolean
     */
    public function hasCd(){
      return $this->_has(3);
    }
    
    /**
     * Clear <cd> value
     *
     * @return \RO\Cmd\SkillItem
     */
    public function clearCd(){
      return $this->_clear(3);
    }
    
    /**
     * Get <cd> value
     *
     * @return int
     */
    public function getCd(){
      return $this->_get(3);
    }
    
    /**
     * Set <cd> value
     *
     * @param int $value
     * @return \RO\Cmd\SkillItem
     */
    public function setCd( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <active> has a value
     *
     * @return boolean
     */
    public function hasActive(){
      return $this->_has(4);
    }
    
    /**
     * Clear <active> value
     *
     * @return \RO\Cmd\SkillItem
     */
    public function clearActive(){
      return $this->_clear(4);
    }
    
    /**
     * Get <active> value
     *
     * @return boolean
     */
    public function getActive(){
      return $this->_get(4);
    }
    
    /**
     * Set <active> value
     *
     * @param boolean $value
     * @return \RO\Cmd\SkillItem
     */
    public function setActive( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <learn> has a value
     *
     * @return boolean
     */
    public function hasLearn(){
      return $this->_has(5);
    }
    
    /**
     * Clear <learn> value
     *
     * @return \RO\Cmd\SkillItem
     */
    public function clearLearn(){
      return $this->_clear(5);
    }
    
    /**
     * Get <learn> value
     *
     * @return boolean
     */
    public function getLearn(){
      return $this->_get(5);
    }
    
    /**
     * Set <learn> value
     *
     * @param boolean $value
     * @return \RO\Cmd\SkillItem
     */
    public function setLearn( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <source> has a value
     *
     * @return boolean
     */
    public function hasSource(){
      return $this->_has(6);
    }
    
    /**
     * Clear <source> value
     *
     * @return \RO\Cmd\SkillItem
     */
    public function clearSource(){
      return $this->_clear(6);
    }
    
    /**
     * Get <source> value
     *
     * @return int - \RO\Cmd\ESource
     */
    public function getSource(){
      return $this->_get(6);
    }
    
    /**
     * Set <source> value
     *
     * @param int - \RO\Cmd\ESource $value
     * @return \RO\Cmd\SkillItem
     */
    public function setSource( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <profession> has a value
     *
     * @return boolean
     */
    public function hasProfession(){
      return $this->_has(7);
    }
    
    /**
     * Clear <profession> value
     *
     * @return \RO\Cmd\SkillItem
     */
    public function clearProfession(){
      return $this->_clear(7);
    }
    
    /**
     * Get <profession> value
     *
     * @return int - \RO\Cmd\EProfession
     */
    public function getProfession(){
      return $this->_get(7);
    }
    
    /**
     * Set <profession> value
     *
     * @param int - \RO\Cmd\EProfession $value
     * @return \RO\Cmd\SkillItem
     */
    public function setProfession( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <consume> has a value
     *
     * @return boolean
     */
    public function hasConsume(){
      return $this->_has(8);
    }
    
    /**
     * Clear <consume> value
     *
     * @return \RO\Cmd\SkillItem
     */
    public function clearConsume(){
      return $this->_clear(8);
    }
    
    /**
     * Get <consume> value
     *
     * @return \RO\Cmd\SkillConsume
     */
    public function getConsume(){
      return $this->_get(8);
    }
    
    /**
     * Set <consume> value
     *
     * @param \RO\Cmd\SkillConsume $value
     * @return \RO\Cmd\SkillItem
     */
    public function setConsume(\RO\Cmd\SkillConsume $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <sourceid> has a value
     *
     * @return boolean
     */
    public function hasSourceid(){
      return $this->_has(9);
    }
    
    /**
     * Clear <sourceid> value
     *
     * @return \RO\Cmd\SkillItem
     */
    public function clearSourceid(){
      return $this->_clear(9);
    }
    
    /**
     * Get <sourceid> value
     *
     * @return int
     */
    public function getSourceid(){
      return $this->_get(9);
    }
    
    /**
     * Set <sourceid> value
     *
     * @param int $value
     * @return \RO\Cmd\SkillItem
     */
    public function setSourceid( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <shadow> has a value
     *
     * @return boolean
     */
    public function hasShadow(){
      return $this->_has(10);
    }
    
    /**
     * Clear <shadow> value
     *
     * @return \RO\Cmd\SkillItem
     */
    public function clearShadow(){
      return $this->_clear(10);
    }
    
    /**
     * Get <shadow> value
     *
     * @return boolean
     */
    public function getShadow(){
      return $this->_get(10);
    }
    
    /**
     * Set <shadow> value
     *
     * @param boolean $value
     * @return \RO\Cmd\SkillItem
     */
    public function setShadow( $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <autopos> has a value
     *
     * @return boolean
     */
    public function hasAutopos(){
      return $this->_has(11);
    }
    
    /**
     * Clear <autopos> value
     *
     * @return \RO\Cmd\SkillItem
     */
    public function clearAutopos(){
      return $this->_clear(11);
    }
    
    /**
     * Get <autopos> value
     *
     * @return int
     */
    public function getAutopos(){
      return $this->_get(11);
    }
    
    /**
     * Set <autopos> value
     *
     * @param int $value
     * @return \RO\Cmd\SkillItem
     */
    public function setAutopos( $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <extendpos> has a value
     *
     * @return boolean
     */
    public function hasExtendpos(){
      return $this->_has(12);
    }
    
    /**
     * Clear <extendpos> value
     *
     * @return \RO\Cmd\SkillItem
     */
    public function clearExtendpos(){
      return $this->_clear(12);
    }
    
    /**
     * Get <extendpos> value
     *
     * @return int
     */
    public function getExtendpos(){
      return $this->_get(12);
    }
    
    /**
     * Set <extendpos> value
     *
     * @param int $value
     * @return \RO\Cmd\SkillItem
     */
    public function setExtendpos( $value){
      return $this->_set(12, $value);
    }
    
    /**
     * Check if <runespecid> has a value
     *
     * @return boolean
     */
    public function hasRunespecid(){
      return $this->_has(13);
    }
    
    /**
     * Clear <runespecid> value
     *
     * @return \RO\Cmd\SkillItem
     */
    public function clearRunespecid(){
      return $this->_clear(13);
    }
    
    /**
     * Get <runespecid> value
     *
     * @return int
     */
    public function getRunespecid(){
      return $this->_get(13);
    }
    
    /**
     * Set <runespecid> value
     *
     * @param int $value
     * @return \RO\Cmd\SkillItem
     */
    public function setRunespecid( $value){
      return $this->_set(13, $value);
    }
    
    /**
     * Check if <replaceid> has a value
     *
     * @return boolean
     */
    public function hasReplaceid(){
      return $this->_has(14);
    }
    
    /**
     * Clear <replaceid> value
     *
     * @return \RO\Cmd\SkillItem
     */
    public function clearReplaceid(){
      return $this->_clear(14);
    }
    
    /**
     * Get <replaceid> value
     *
     * @return int
     */
    public function getReplaceid(){
      return $this->_get(14);
    }
    
    /**
     * Set <replaceid> value
     *
     * @param int $value
     * @return \RO\Cmd\SkillItem
     */
    public function setReplaceid( $value){
      return $this->_set(14, $value);
    }
    
    /**
     * Check if <selectswitch> has a value
     *
     * @return boolean
     */
    public function hasSelectswitch(){
      return $this->_has(15);
    }
    
    /**
     * Clear <selectswitch> value
     *
     * @return \RO\Cmd\SkillItem
     */
    public function clearSelectswitch(){
      return $this->_clear(15);
    }
    
    /**
     * Get <selectswitch> value
     *
     * @return boolean
     */
    public function getSelectswitch(){
      return $this->_get(15);
    }
    
    /**
     * Set <selectswitch> value
     *
     * @param boolean $value
     * @return \RO\Cmd\SkillItem
     */
    public function setSelectswitch( $value){
      return $this->_set(15, $value);
    }
    
    /**
     * Check if <extralv> has a value
     *
     * @return boolean
     */
    public function hasExtralv(){
      return $this->_has(16);
    }
    
    /**
     * Clear <extralv> value
     *
     * @return \RO\Cmd\SkillItem
     */
    public function clearExtralv(){
      return $this->_clear(16);
    }
    
    /**
     * Get <extralv> value
     *
     * @return int
     */
    public function getExtralv(){
      return $this->_get(16);
    }
    
    /**
     * Set <extralv> value
     *
     * @param int $value
     * @return \RO\Cmd\SkillItem
     */
    public function setExtralv( $value){
      return $this->_set(16, $value);
    }
    
    /**
     * Check if <ownerid> has a value
     *
     * @return boolean
     */
    public function hasOwnerid(){
      return $this->_has(17);
    }
    
    /**
     * Clear <ownerid> value
     *
     * @return \RO\Cmd\SkillItem
     */
    public function clearOwnerid(){
      return $this->_clear(17);
    }
    
    /**
     * Get <ownerid> value
     *
     * @return int
     */
    public function getOwnerid(){
      return $this->_get(17);
    }
    
    /**
     * Set <ownerid> value
     *
     * @param int $value
     * @return \RO\Cmd\SkillItem
     */
    public function setOwnerid( $value){
      return $this->_set(17, $value);
    }
    
    /**
     * Check if <notreset> has a value
     *
     * @return boolean
     */
    public function hasNotreset(){
      return $this->_has(18);
    }
    
    /**
     * Clear <notreset> value
     *
     * @return \RO\Cmd\SkillItem
     */
    public function clearNotreset(){
      return $this->_clear(18);
    }
    
    /**
     * Get <notreset> value
     *
     * @return boolean
     */
    public function getNotreset(){
      return $this->_get(18);
    }
    
    /**
     * Set <notreset> value
     *
     * @param boolean $value
     * @return \RO\Cmd\SkillItem
     */
    public function setNotreset( $value){
      return $this->_set(18, $value);
    }
    
    /**
     * Check if <shortcuts> has a value
     *
     * @return boolean
     */
    public function hasShortcuts(){
      return $this->_has(19);
    }
    
    /**
     * Clear <shortcuts> value
     *
     * @return \RO\Cmd\SkillItem
     */
    public function clearShortcuts(){
      return $this->_clear(19);
    }
    
    /**
     * Get <shortcuts> value
     *
     * @param int $idx
     * @return \RO\Cmd\SkillShortcut
     */
    public function getShortcuts($idx = NULL){
      return $this->_get(19, $idx);
    }
    
    /**
     * Set <shortcuts> value
     *
     * @param \RO\Cmd\SkillShortcut $value
     * @return \RO\Cmd\SkillItem
     */
    public function setShortcuts(\RO\Cmd\SkillShortcut $value, $idx = NULL){
      return $this->_set(19, $value, $idx);
    }
    
    /**
     * Get all elements of <shortcuts>
     *
     * @return \RO\Cmd\SkillShortcut[]
     */
    public function getShortcutsList(){
     return $this->_get(19);
    }
    
    /**
     * Add a new element to <shortcuts>
     *
     * @param \RO\Cmd\SkillShortcut $value
     * @return \RO\Cmd\SkillItem
     */
    public function addShortcuts(\RO\Cmd\SkillShortcut $value){
     return $this->_add(19, $value);
    }
  }
}

