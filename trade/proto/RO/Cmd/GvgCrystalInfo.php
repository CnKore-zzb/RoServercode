<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: FuBenCmd.proto

namespace RO\Cmd {

  class GvgCrystalInfo extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $rank = null;
    
    /**  @var int */
    public $guildid = null;
    
    /**  @var int */
    public $crystalnum = 0;
    
    /**  @var int */
    public $chipnum = 0;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.GvgCrystalInfo');

      // OPTIONAL UINT32 rank = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "rank";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT64 guildid = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "guildid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 crystalnum = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "crystalnum";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 chipnum = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "chipnum";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <rank> has a value
     *
     * @return boolean
     */
    public function hasRank(){
      return $this->_has(1);
    }
    
    /**
     * Clear <rank> value
     *
     * @return \RO\Cmd\GvgCrystalInfo
     */
    public function clearRank(){
      return $this->_clear(1);
    }
    
    /**
     * Get <rank> value
     *
     * @return int
     */
    public function getRank(){
      return $this->_get(1);
    }
    
    /**
     * Set <rank> value
     *
     * @param int $value
     * @return \RO\Cmd\GvgCrystalInfo
     */
    public function setRank( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <guildid> has a value
     *
     * @return boolean
     */
    public function hasGuildid(){
      return $this->_has(2);
    }
    
    /**
     * Clear <guildid> value
     *
     * @return \RO\Cmd\GvgCrystalInfo
     */
    public function clearGuildid(){
      return $this->_clear(2);
    }
    
    /**
     * Get <guildid> value
     *
     * @return int
     */
    public function getGuildid(){
      return $this->_get(2);
    }
    
    /**
     * Set <guildid> value
     *
     * @param int $value
     * @return \RO\Cmd\GvgCrystalInfo
     */
    public function setGuildid( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <crystalnum> has a value
     *
     * @return boolean
     */
    public function hasCrystalnum(){
      return $this->_has(3);
    }
    
    /**
     * Clear <crystalnum> value
     *
     * @return \RO\Cmd\GvgCrystalInfo
     */
    public function clearCrystalnum(){
      return $this->_clear(3);
    }
    
    /**
     * Get <crystalnum> value
     *
     * @return int
     */
    public function getCrystalnum(){
      return $this->_get(3);
    }
    
    /**
     * Set <crystalnum> value
     *
     * @param int $value
     * @return \RO\Cmd\GvgCrystalInfo
     */
    public function setCrystalnum( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <chipnum> has a value
     *
     * @return boolean
     */
    public function hasChipnum(){
      return $this->_has(4);
    }
    
    /**
     * Clear <chipnum> value
     *
     * @return \RO\Cmd\GvgCrystalInfo
     */
    public function clearChipnum(){
      return $this->_clear(4);
    }
    
    /**
     * Get <chipnum> value
     *
     * @return int
     */
    public function getChipnum(){
      return $this->_get(4);
    }
    
    /**
     * Set <chipnum> value
     *
     * @param int $value
     * @return \RO\Cmd\GvgCrystalInfo
     */
    public function setChipnum( $value){
      return $this->_set(4, $value);
    }
  }
}

