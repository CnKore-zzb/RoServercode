<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: RecordCmd.proto

namespace RO\Cmd {

  class ProfessionData extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $id = null;
    
    /**  @var int */
    public $profession = null;
    
    /**  @var int */
    public $joblv = null;
    
    /**  @var int */
    public $jobexp = null;
    
    /**  @var int - \RO\Cmd\EProfressionDataType */
    public $type = \RO\Cmd\EProfressionDataType::ETypeBranch;
    
    /**  @var string */
    public $recordname = null;
    
    /**  @var int */
    public $recordtime = null;
    
    /**  @var int */
    public $charid = null;
    
    /**  @var string */
    public $charname = null;
    
    /**  @var int */
    public $pro_branch = null;
    
    /**  @var \RO\Cmd\BlobAstrolabe */
    public $astrolabe_data = null;
    
    /**  @var \RO\Cmd\EquipPackData[]  */
    public $pack_data = array();
    
    /**  @var \RO\Cmd\UserRoleData */
    public $role_data = null;
    
    /**  @var \RO\Cmd\BlobUserBeing */
    public $being_data = null;
    
    /**  @var \RO\Cmd\BlobAttr */
    public $attr_data = null;
    
    /**  @var \RO\Cmd\SkillData */
    public $novice_data = null;
    
    /**  @var \RO\Cmd\BlobPet */
    public $partner_data = null;
    
    /**  @var boolean */
    public $isfirst = true;
    
    /**  @var \RO\Cmd\UserData[]  */
    public $appearance_data = array();
    
    /**  @var \RO\Cmd\SkillValidPosData */
    public $skillpos = null;
    
    /**  @var int */
    public $opertime = null;
    
    /**  @var \RO\Cmd\SkillValidPos */
    public $shortcut = null;
    
    /**  @var \RO\Cmd\ExchangeShopItem[]  */
    public $exchange_items = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.ProfessionData');

      // OPTIONAL UINT32 id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 profession = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "profession";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 joblv = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "joblv";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 jobexp = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "jobexp";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM type = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\EProfressionDataType';
      $f->default   = \RO\Cmd\EProfressionDataType::ETypeBranch;
      $descriptor->addField($f);

      // OPTIONAL STRING recordname = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "recordname";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 recordtime = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "recordtime";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT64 charid = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "charid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING charname = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "charname";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 pro_branch = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "pro_branch";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE astrolabe_data = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "astrolabe_data";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobAstrolabe';
      $descriptor->addField($f);

      // REPEATED MESSAGE pack_data = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "pack_data";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\EquipPackData';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE role_data = 13
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 13;
      $f->name      = "role_data";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\UserRoleData';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE being_data = 14
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 14;
      $f->name      = "being_data";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobUserBeing';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE attr_data = 15
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 15;
      $f->name      = "attr_data";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobAttr';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE novice_data = 16
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 16;
      $f->name      = "novice_data";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\SkillData';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE partner_data = 17
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 17;
      $f->name      = "partner_data";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobPet';
      $descriptor->addField($f);

      // OPTIONAL BOOL isfirst = 18
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 18;
      $f->name      = "isfirst";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = true;
      $descriptor->addField($f);

      // REPEATED MESSAGE appearance_data = 19
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 19;
      $f->name      = "appearance_data";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\UserData';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE skillpos = 20
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 20;
      $f->name      = "skillpos";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\SkillValidPosData';
      $descriptor->addField($f);

      // OPTIONAL UINT32 opertime = 21
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 21;
      $f->name      = "opertime";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE shortcut = 22
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 22;
      $f->name      = "shortcut";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\SkillValidPos';
      $descriptor->addField($f);

      // REPEATED MESSAGE exchange_items = 23
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 23;
      $f->name      = "exchange_items";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\ExchangeShopItem';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \RO\Cmd\ProfessionData
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param int $value
     * @return \RO\Cmd\ProfessionData
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <profession> has a value
     *
     * @return boolean
     */
    public function hasProfession(){
      return $this->_has(2);
    }
    
    /**
     * Clear <profession> value
     *
     * @return \RO\Cmd\ProfessionData
     */
    public function clearProfession(){
      return $this->_clear(2);
    }
    
    /**
     * Get <profession> value
     *
     * @return int
     */
    public function getProfession(){
      return $this->_get(2);
    }
    
    /**
     * Set <profession> value
     *
     * @param int $value
     * @return \RO\Cmd\ProfessionData
     */
    public function setProfession( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <joblv> has a value
     *
     * @return boolean
     */
    public function hasJoblv(){
      return $this->_has(3);
    }
    
    /**
     * Clear <joblv> value
     *
     * @return \RO\Cmd\ProfessionData
     */
    public function clearJoblv(){
      return $this->_clear(3);
    }
    
    /**
     * Get <joblv> value
     *
     * @return int
     */
    public function getJoblv(){
      return $this->_get(3);
    }
    
    /**
     * Set <joblv> value
     *
     * @param int $value
     * @return \RO\Cmd\ProfessionData
     */
    public function setJoblv( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <jobexp> has a value
     *
     * @return boolean
     */
    public function hasJobexp(){
      return $this->_has(4);
    }
    
    /**
     * Clear <jobexp> value
     *
     * @return \RO\Cmd\ProfessionData
     */
    public function clearJobexp(){
      return $this->_clear(4);
    }
    
    /**
     * Get <jobexp> value
     *
     * @return int
     */
    public function getJobexp(){
      return $this->_get(4);
    }
    
    /**
     * Set <jobexp> value
     *
     * @param int $value
     * @return \RO\Cmd\ProfessionData
     */
    public function setJobexp( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(5);
    }
    
    /**
     * Clear <type> value
     *
     * @return \RO\Cmd\ProfessionData
     */
    public function clearType(){
      return $this->_clear(5);
    }
    
    /**
     * Get <type> value
     *
     * @return int - \RO\Cmd\EProfressionDataType
     */
    public function getType(){
      return $this->_get(5);
    }
    
    /**
     * Set <type> value
     *
     * @param int - \RO\Cmd\EProfressionDataType $value
     * @return \RO\Cmd\ProfessionData
     */
    public function setType( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <recordname> has a value
     *
     * @return boolean
     */
    public function hasRecordname(){
      return $this->_has(6);
    }
    
    /**
     * Clear <recordname> value
     *
     * @return \RO\Cmd\ProfessionData
     */
    public function clearRecordname(){
      return $this->_clear(6);
    }
    
    /**
     * Get <recordname> value
     *
     * @return string
     */
    public function getRecordname(){
      return $this->_get(6);
    }
    
    /**
     * Set <recordname> value
     *
     * @param string $value
     * @return \RO\Cmd\ProfessionData
     */
    public function setRecordname( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <recordtime> has a value
     *
     * @return boolean
     */
    public function hasRecordtime(){
      return $this->_has(7);
    }
    
    /**
     * Clear <recordtime> value
     *
     * @return \RO\Cmd\ProfessionData
     */
    public function clearRecordtime(){
      return $this->_clear(7);
    }
    
    /**
     * Get <recordtime> value
     *
     * @return int
     */
    public function getRecordtime(){
      return $this->_get(7);
    }
    
    /**
     * Set <recordtime> value
     *
     * @param int $value
     * @return \RO\Cmd\ProfessionData
     */
    public function setRecordtime( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <charid> has a value
     *
     * @return boolean
     */
    public function hasCharid(){
      return $this->_has(8);
    }
    
    /**
     * Clear <charid> value
     *
     * @return \RO\Cmd\ProfessionData
     */
    public function clearCharid(){
      return $this->_clear(8);
    }
    
    /**
     * Get <charid> value
     *
     * @return int
     */
    public function getCharid(){
      return $this->_get(8);
    }
    
    /**
     * Set <charid> value
     *
     * @param int $value
     * @return \RO\Cmd\ProfessionData
     */
    public function setCharid( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <charname> has a value
     *
     * @return boolean
     */
    public function hasCharname(){
      return $this->_has(9);
    }
    
    /**
     * Clear <charname> value
     *
     * @return \RO\Cmd\ProfessionData
     */
    public function clearCharname(){
      return $this->_clear(9);
    }
    
    /**
     * Get <charname> value
     *
     * @return string
     */
    public function getCharname(){
      return $this->_get(9);
    }
    
    /**
     * Set <charname> value
     *
     * @param string $value
     * @return \RO\Cmd\ProfessionData
     */
    public function setCharname( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <pro_branch> has a value
     *
     * @return boolean
     */
    public function hasProBranch(){
      return $this->_has(10);
    }
    
    /**
     * Clear <pro_branch> value
     *
     * @return \RO\Cmd\ProfessionData
     */
    public function clearProBranch(){
      return $this->_clear(10);
    }
    
    /**
     * Get <pro_branch> value
     *
     * @return int
     */
    public function getProBranch(){
      return $this->_get(10);
    }
    
    /**
     * Set <pro_branch> value
     *
     * @param int $value
     * @return \RO\Cmd\ProfessionData
     */
    public function setProBranch( $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <astrolabe_data> has a value
     *
     * @return boolean
     */
    public function hasAstrolabeData(){
      return $this->_has(11);
    }
    
    /**
     * Clear <astrolabe_data> value
     *
     * @return \RO\Cmd\ProfessionData
     */
    public function clearAstrolabeData(){
      return $this->_clear(11);
    }
    
    /**
     * Get <astrolabe_data> value
     *
     * @return \RO\Cmd\BlobAstrolabe
     */
    public function getAstrolabeData(){
      return $this->_get(11);
    }
    
    /**
     * Set <astrolabe_data> value
     *
     * @param \RO\Cmd\BlobAstrolabe $value
     * @return \RO\Cmd\ProfessionData
     */
    public function setAstrolabeData(\RO\Cmd\BlobAstrolabe $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <pack_data> has a value
     *
     * @return boolean
     */
    public function hasPackData(){
      return $this->_has(12);
    }
    
    /**
     * Clear <pack_data> value
     *
     * @return \RO\Cmd\ProfessionData
     */
    public function clearPackData(){
      return $this->_clear(12);
    }
    
    /**
     * Get <pack_data> value
     *
     * @param int $idx
     * @return \RO\Cmd\EquipPackData
     */
    public function getPackData($idx = NULL){
      return $this->_get(12, $idx);
    }
    
    /**
     * Set <pack_data> value
     *
     * @param \RO\Cmd\EquipPackData $value
     * @return \RO\Cmd\ProfessionData
     */
    public function setPackData(\RO\Cmd\EquipPackData $value, $idx = NULL){
      return $this->_set(12, $value, $idx);
    }
    
    /**
     * Get all elements of <pack_data>
     *
     * @return \RO\Cmd\EquipPackData[]
     */
    public function getPackDataList(){
     return $this->_get(12);
    }
    
    /**
     * Add a new element to <pack_data>
     *
     * @param \RO\Cmd\EquipPackData $value
     * @return \RO\Cmd\ProfessionData
     */
    public function addPackData(\RO\Cmd\EquipPackData $value){
     return $this->_add(12, $value);
    }
    
    /**
     * Check if <role_data> has a value
     *
     * @return boolean
     */
    public function hasRoleData(){
      return $this->_has(13);
    }
    
    /**
     * Clear <role_data> value
     *
     * @return \RO\Cmd\ProfessionData
     */
    public function clearRoleData(){
      return $this->_clear(13);
    }
    
    /**
     * Get <role_data> value
     *
     * @return \RO\Cmd\UserRoleData
     */
    public function getRoleData(){
      return $this->_get(13);
    }
    
    /**
     * Set <role_data> value
     *
     * @param \RO\Cmd\UserRoleData $value
     * @return \RO\Cmd\ProfessionData
     */
    public function setRoleData(\RO\Cmd\UserRoleData $value){
      return $this->_set(13, $value);
    }
    
    /**
     * Check if <being_data> has a value
     *
     * @return boolean
     */
    public function hasBeingData(){
      return $this->_has(14);
    }
    
    /**
     * Clear <being_data> value
     *
     * @return \RO\Cmd\ProfessionData
     */
    public function clearBeingData(){
      return $this->_clear(14);
    }
    
    /**
     * Get <being_data> value
     *
     * @return \RO\Cmd\BlobUserBeing
     */
    public function getBeingData(){
      return $this->_get(14);
    }
    
    /**
     * Set <being_data> value
     *
     * @param \RO\Cmd\BlobUserBeing $value
     * @return \RO\Cmd\ProfessionData
     */
    public function setBeingData(\RO\Cmd\BlobUserBeing $value){
      return $this->_set(14, $value);
    }
    
    /**
     * Check if <attr_data> has a value
     *
     * @return boolean
     */
    public function hasAttrData(){
      return $this->_has(15);
    }
    
    /**
     * Clear <attr_data> value
     *
     * @return \RO\Cmd\ProfessionData
     */
    public function clearAttrData(){
      return $this->_clear(15);
    }
    
    /**
     * Get <attr_data> value
     *
     * @return \RO\Cmd\BlobAttr
     */
    public function getAttrData(){
      return $this->_get(15);
    }
    
    /**
     * Set <attr_data> value
     *
     * @param \RO\Cmd\BlobAttr $value
     * @return \RO\Cmd\ProfessionData
     */
    public function setAttrData(\RO\Cmd\BlobAttr $value){
      return $this->_set(15, $value);
    }
    
    /**
     * Check if <novice_data> has a value
     *
     * @return boolean
     */
    public function hasNoviceData(){
      return $this->_has(16);
    }
    
    /**
     * Clear <novice_data> value
     *
     * @return \RO\Cmd\ProfessionData
     */
    public function clearNoviceData(){
      return $this->_clear(16);
    }
    
    /**
     * Get <novice_data> value
     *
     * @return \RO\Cmd\SkillData
     */
    public function getNoviceData(){
      return $this->_get(16);
    }
    
    /**
     * Set <novice_data> value
     *
     * @param \RO\Cmd\SkillData $value
     * @return \RO\Cmd\ProfessionData
     */
    public function setNoviceData(\RO\Cmd\SkillData $value){
      return $this->_set(16, $value);
    }
    
    /**
     * Check if <partner_data> has a value
     *
     * @return boolean
     */
    public function hasPartnerData(){
      return $this->_has(17);
    }
    
    /**
     * Clear <partner_data> value
     *
     * @return \RO\Cmd\ProfessionData
     */
    public function clearPartnerData(){
      return $this->_clear(17);
    }
    
    /**
     * Get <partner_data> value
     *
     * @return \RO\Cmd\BlobPet
     */
    public function getPartnerData(){
      return $this->_get(17);
    }
    
    /**
     * Set <partner_data> value
     *
     * @param \RO\Cmd\BlobPet $value
     * @return \RO\Cmd\ProfessionData
     */
    public function setPartnerData(\RO\Cmd\BlobPet $value){
      return $this->_set(17, $value);
    }
    
    /**
     * Check if <isfirst> has a value
     *
     * @return boolean
     */
    public function hasIsfirst(){
      return $this->_has(18);
    }
    
    /**
     * Clear <isfirst> value
     *
     * @return \RO\Cmd\ProfessionData
     */
    public function clearIsfirst(){
      return $this->_clear(18);
    }
    
    /**
     * Get <isfirst> value
     *
     * @return boolean
     */
    public function getIsfirst(){
      return $this->_get(18);
    }
    
    /**
     * Set <isfirst> value
     *
     * @param boolean $value
     * @return \RO\Cmd\ProfessionData
     */
    public function setIsfirst( $value){
      return $this->_set(18, $value);
    }
    
    /**
     * Check if <appearance_data> has a value
     *
     * @return boolean
     */
    public function hasAppearanceData(){
      return $this->_has(19);
    }
    
    /**
     * Clear <appearance_data> value
     *
     * @return \RO\Cmd\ProfessionData
     */
    public function clearAppearanceData(){
      return $this->_clear(19);
    }
    
    /**
     * Get <appearance_data> value
     *
     * @param int $idx
     * @return \RO\Cmd\UserData
     */
    public function getAppearanceData($idx = NULL){
      return $this->_get(19, $idx);
    }
    
    /**
     * Set <appearance_data> value
     *
     * @param \RO\Cmd\UserData $value
     * @return \RO\Cmd\ProfessionData
     */
    public function setAppearanceData(\RO\Cmd\UserData $value, $idx = NULL){
      return $this->_set(19, $value, $idx);
    }
    
    /**
     * Get all elements of <appearance_data>
     *
     * @return \RO\Cmd\UserData[]
     */
    public function getAppearanceDataList(){
     return $this->_get(19);
    }
    
    /**
     * Add a new element to <appearance_data>
     *
     * @param \RO\Cmd\UserData $value
     * @return \RO\Cmd\ProfessionData
     */
    public function addAppearanceData(\RO\Cmd\UserData $value){
     return $this->_add(19, $value);
    }
    
    /**
     * Check if <skillpos> has a value
     *
     * @return boolean
     */
    public function hasSkillpos(){
      return $this->_has(20);
    }
    
    /**
     * Clear <skillpos> value
     *
     * @return \RO\Cmd\ProfessionData
     */
    public function clearSkillpos(){
      return $this->_clear(20);
    }
    
    /**
     * Get <skillpos> value
     *
     * @return \RO\Cmd\SkillValidPosData
     */
    public function getSkillpos(){
      return $this->_get(20);
    }
    
    /**
     * Set <skillpos> value
     *
     * @param \RO\Cmd\SkillValidPosData $value
     * @return \RO\Cmd\ProfessionData
     */
    public function setSkillpos(\RO\Cmd\SkillValidPosData $value){
      return $this->_set(20, $value);
    }
    
    /**
     * Check if <opertime> has a value
     *
     * @return boolean
     */
    public function hasOpertime(){
      return $this->_has(21);
    }
    
    /**
     * Clear <opertime> value
     *
     * @return \RO\Cmd\ProfessionData
     */
    public function clearOpertime(){
      return $this->_clear(21);
    }
    
    /**
     * Get <opertime> value
     *
     * @return int
     */
    public function getOpertime(){
      return $this->_get(21);
    }
    
    /**
     * Set <opertime> value
     *
     * @param int $value
     * @return \RO\Cmd\ProfessionData
     */
    public function setOpertime( $value){
      return $this->_set(21, $value);
    }
    
    /**
     * Check if <shortcut> has a value
     *
     * @return boolean
     */
    public function hasShortcut(){
      return $this->_has(22);
    }
    
    /**
     * Clear <shortcut> value
     *
     * @return \RO\Cmd\ProfessionData
     */
    public function clearShortcut(){
      return $this->_clear(22);
    }
    
    /**
     * Get <shortcut> value
     *
     * @return \RO\Cmd\SkillValidPos
     */
    public function getShortcut(){
      return $this->_get(22);
    }
    
    /**
     * Set <shortcut> value
     *
     * @param \RO\Cmd\SkillValidPos $value
     * @return \RO\Cmd\ProfessionData
     */
    public function setShortcut(\RO\Cmd\SkillValidPos $value){
      return $this->_set(22, $value);
    }
    
    /**
     * Check if <exchange_items> has a value
     *
     * @return boolean
     */
    public function hasExchangeItems(){
      return $this->_has(23);
    }
    
    /**
     * Clear <exchange_items> value
     *
     * @return \RO\Cmd\ProfessionData
     */
    public function clearExchangeItems(){
      return $this->_clear(23);
    }
    
    /**
     * Get <exchange_items> value
     *
     * @param int $idx
     * @return \RO\Cmd\ExchangeShopItem
     */
    public function getExchangeItems($idx = NULL){
      return $this->_get(23, $idx);
    }
    
    /**
     * Set <exchange_items> value
     *
     * @param \RO\Cmd\ExchangeShopItem $value
     * @return \RO\Cmd\ProfessionData
     */
    public function setExchangeItems(\RO\Cmd\ExchangeShopItem $value, $idx = NULL){
      return $this->_set(23, $value, $idx);
    }
    
    /**
     * Get all elements of <exchange_items>
     *
     * @return \RO\Cmd\ExchangeShopItem[]
     */
    public function getExchangeItemsList(){
     return $this->_get(23);
    }
    
    /**
     * Add a new element to <exchange_items>
     *
     * @param \RO\Cmd\ExchangeShopItem $value
     * @return \RO\Cmd\ProfessionData
     */
    public function addExchangeItems(\RO\Cmd\ExchangeShopItem $value){
     return $this->_add(23, $value);
    }
  }
}

