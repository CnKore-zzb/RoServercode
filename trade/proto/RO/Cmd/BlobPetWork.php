<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: RecordCmd.proto

namespace RO\Cmd {

  class BlobPetWork extends \DrSlump\Protobuf\Message {

    /**  @var \RO\Cmd\WorkManual */
    public $manual = null;
    
    /**  @var \RO\Cmd\WorkSpace[]  */
    public $datas = array();
    
    /**  @var \RO\Cmd\WorkPetExtra[]  */
    public $pets = array();
    
    /**  @var \RO\Cmd\WorkDayReward[]  */
    public $rewards = array();
    
    /**  @var int */
    public $card_expiretime = 0;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.BlobPetWork');

      // OPTIONAL MESSAGE manual = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "manual";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\WorkManual';
      $descriptor->addField($f);

      // REPEATED MESSAGE datas = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "datas";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\WorkSpace';
      $descriptor->addField($f);

      // REPEATED MESSAGE pets = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "pets";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\WorkPetExtra';
      $descriptor->addField($f);

      // REPEATED MESSAGE rewards = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "rewards";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\WorkDayReward';
      $descriptor->addField($f);

      // OPTIONAL UINT32 card_expiretime = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "card_expiretime";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <manual> has a value
     *
     * @return boolean
     */
    public function hasManual(){
      return $this->_has(1);
    }
    
    /**
     * Clear <manual> value
     *
     * @return \RO\Cmd\BlobPetWork
     */
    public function clearManual(){
      return $this->_clear(1);
    }
    
    /**
     * Get <manual> value
     *
     * @return \RO\Cmd\WorkManual
     */
    public function getManual(){
      return $this->_get(1);
    }
    
    /**
     * Set <manual> value
     *
     * @param \RO\Cmd\WorkManual $value
     * @return \RO\Cmd\BlobPetWork
     */
    public function setManual(\RO\Cmd\WorkManual $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <datas> has a value
     *
     * @return boolean
     */
    public function hasDatas(){
      return $this->_has(2);
    }
    
    /**
     * Clear <datas> value
     *
     * @return \RO\Cmd\BlobPetWork
     */
    public function clearDatas(){
      return $this->_clear(2);
    }
    
    /**
     * Get <datas> value
     *
     * @param int $idx
     * @return \RO\Cmd\WorkSpace
     */
    public function getDatas($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <datas> value
     *
     * @param \RO\Cmd\WorkSpace $value
     * @return \RO\Cmd\BlobPetWork
     */
    public function setDatas(\RO\Cmd\WorkSpace $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <datas>
     *
     * @return \RO\Cmd\WorkSpace[]
     */
    public function getDatasList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <datas>
     *
     * @param \RO\Cmd\WorkSpace $value
     * @return \RO\Cmd\BlobPetWork
     */
    public function addDatas(\RO\Cmd\WorkSpace $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <pets> has a value
     *
     * @return boolean
     */
    public function hasPets(){
      return $this->_has(3);
    }
    
    /**
     * Clear <pets> value
     *
     * @return \RO\Cmd\BlobPetWork
     */
    public function clearPets(){
      return $this->_clear(3);
    }
    
    /**
     * Get <pets> value
     *
     * @param int $idx
     * @return \RO\Cmd\WorkPetExtra
     */
    public function getPets($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <pets> value
     *
     * @param \RO\Cmd\WorkPetExtra $value
     * @return \RO\Cmd\BlobPetWork
     */
    public function setPets(\RO\Cmd\WorkPetExtra $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <pets>
     *
     * @return \RO\Cmd\WorkPetExtra[]
     */
    public function getPetsList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <pets>
     *
     * @param \RO\Cmd\WorkPetExtra $value
     * @return \RO\Cmd\BlobPetWork
     */
    public function addPets(\RO\Cmd\WorkPetExtra $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <rewards> has a value
     *
     * @return boolean
     */
    public function hasRewards(){
      return $this->_has(5);
    }
    
    /**
     * Clear <rewards> value
     *
     * @return \RO\Cmd\BlobPetWork
     */
    public function clearRewards(){
      return $this->_clear(5);
    }
    
    /**
     * Get <rewards> value
     *
     * @param int $idx
     * @return \RO\Cmd\WorkDayReward
     */
    public function getRewards($idx = NULL){
      return $this->_get(5, $idx);
    }
    
    /**
     * Set <rewards> value
     *
     * @param \RO\Cmd\WorkDayReward $value
     * @return \RO\Cmd\BlobPetWork
     */
    public function setRewards(\RO\Cmd\WorkDayReward $value, $idx = NULL){
      return $this->_set(5, $value, $idx);
    }
    
    /**
     * Get all elements of <rewards>
     *
     * @return \RO\Cmd\WorkDayReward[]
     */
    public function getRewardsList(){
     return $this->_get(5);
    }
    
    /**
     * Add a new element to <rewards>
     *
     * @param \RO\Cmd\WorkDayReward $value
     * @return \RO\Cmd\BlobPetWork
     */
    public function addRewards(\RO\Cmd\WorkDayReward $value){
     return $this->_add(5, $value);
    }
    
    /**
     * Check if <card_expiretime> has a value
     *
     * @return boolean
     */
    public function hasCardExpiretime(){
      return $this->_has(4);
    }
    
    /**
     * Clear <card_expiretime> value
     *
     * @return \RO\Cmd\BlobPetWork
     */
    public function clearCardExpiretime(){
      return $this->_clear(4);
    }
    
    /**
     * Get <card_expiretime> value
     *
     * @return int
     */
    public function getCardExpiretime(){
      return $this->_get(4);
    }
    
    /**
     * Set <card_expiretime> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobPetWork
     */
    public function setCardExpiretime( $value){
      return $this->_set(4, $value);
    }
  }
}

