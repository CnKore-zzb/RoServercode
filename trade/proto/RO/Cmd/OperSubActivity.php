<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: SessionSociality.proto

namespace RO\Cmd {

  class OperSubActivity extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $id = 0;
    
    /**  @var string */
    public $name = null;
    
    /**  @var int */
    public $begintime = 0;
    
    /**  @var int */
    public $endtime = 0;
    
    /**  @var int */
    public $pathid = 0;
    
    /**  @var int */
    public $pathtype = 0;
    
    /**  @var string */
    public $pathevent = null;
    
    /**  @var string */
    public $url = null;
    
    /**  @var string */
    public $pic_url = null;
    
    /**  @var int */
    public $groupid = 0;
    
    /**  @var \RO\Cmd\OperSubActivityData */
    public $data = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.OperSubActivity');

      // OPTIONAL UINT64 id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL STRING name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 begintime = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "begintime";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 endtime = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "endtime";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 pathid = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "pathid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 pathtype = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "pathtype";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL STRING pathevent = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "pathevent";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING url = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "url";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING pic_url = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "pic_url";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT64 groupid = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "groupid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE data = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "data";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\OperSubActivityData';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \RO\Cmd\OperSubActivity
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param int $value
     * @return \RO\Cmd\OperSubActivity
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <name> value
     *
     * @return \RO\Cmd\OperSubActivity
     */
    public function clearName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(2);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \RO\Cmd\OperSubActivity
     */
    public function setName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <begintime> has a value
     *
     * @return boolean
     */
    public function hasBegintime(){
      return $this->_has(4);
    }
    
    /**
     * Clear <begintime> value
     *
     * @return \RO\Cmd\OperSubActivity
     */
    public function clearBegintime(){
      return $this->_clear(4);
    }
    
    /**
     * Get <begintime> value
     *
     * @return int
     */
    public function getBegintime(){
      return $this->_get(4);
    }
    
    /**
     * Set <begintime> value
     *
     * @param int $value
     * @return \RO\Cmd\OperSubActivity
     */
    public function setBegintime( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <endtime> has a value
     *
     * @return boolean
     */
    public function hasEndtime(){
      return $this->_has(5);
    }
    
    /**
     * Clear <endtime> value
     *
     * @return \RO\Cmd\OperSubActivity
     */
    public function clearEndtime(){
      return $this->_clear(5);
    }
    
    /**
     * Get <endtime> value
     *
     * @return int
     */
    public function getEndtime(){
      return $this->_get(5);
    }
    
    /**
     * Set <endtime> value
     *
     * @param int $value
     * @return \RO\Cmd\OperSubActivity
     */
    public function setEndtime( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <pathid> has a value
     *
     * @return boolean
     */
    public function hasPathid(){
      return $this->_has(6);
    }
    
    /**
     * Clear <pathid> value
     *
     * @return \RO\Cmd\OperSubActivity
     */
    public function clearPathid(){
      return $this->_clear(6);
    }
    
    /**
     * Get <pathid> value
     *
     * @return int
     */
    public function getPathid(){
      return $this->_get(6);
    }
    
    /**
     * Set <pathid> value
     *
     * @param int $value
     * @return \RO\Cmd\OperSubActivity
     */
    public function setPathid( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <pathtype> has a value
     *
     * @return boolean
     */
    public function hasPathtype(){
      return $this->_has(7);
    }
    
    /**
     * Clear <pathtype> value
     *
     * @return \RO\Cmd\OperSubActivity
     */
    public function clearPathtype(){
      return $this->_clear(7);
    }
    
    /**
     * Get <pathtype> value
     *
     * @return int
     */
    public function getPathtype(){
      return $this->_get(7);
    }
    
    /**
     * Set <pathtype> value
     *
     * @param int $value
     * @return \RO\Cmd\OperSubActivity
     */
    public function setPathtype( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <pathevent> has a value
     *
     * @return boolean
     */
    public function hasPathevent(){
      return $this->_has(8);
    }
    
    /**
     * Clear <pathevent> value
     *
     * @return \RO\Cmd\OperSubActivity
     */
    public function clearPathevent(){
      return $this->_clear(8);
    }
    
    /**
     * Get <pathevent> value
     *
     * @return string
     */
    public function getPathevent(){
      return $this->_get(8);
    }
    
    /**
     * Set <pathevent> value
     *
     * @param string $value
     * @return \RO\Cmd\OperSubActivity
     */
    public function setPathevent( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <url> has a value
     *
     * @return boolean
     */
    public function hasUrl(){
      return $this->_has(9);
    }
    
    /**
     * Clear <url> value
     *
     * @return \RO\Cmd\OperSubActivity
     */
    public function clearUrl(){
      return $this->_clear(9);
    }
    
    /**
     * Get <url> value
     *
     * @return string
     */
    public function getUrl(){
      return $this->_get(9);
    }
    
    /**
     * Set <url> value
     *
     * @param string $value
     * @return \RO\Cmd\OperSubActivity
     */
    public function setUrl( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <pic_url> has a value
     *
     * @return boolean
     */
    public function hasPicUrl(){
      return $this->_has(10);
    }
    
    /**
     * Clear <pic_url> value
     *
     * @return \RO\Cmd\OperSubActivity
     */
    public function clearPicUrl(){
      return $this->_clear(10);
    }
    
    /**
     * Get <pic_url> value
     *
     * @return string
     */
    public function getPicUrl(){
      return $this->_get(10);
    }
    
    /**
     * Set <pic_url> value
     *
     * @param string $value
     * @return \RO\Cmd\OperSubActivity
     */
    public function setPicUrl( $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <groupid> has a value
     *
     * @return boolean
     */
    public function hasGroupid(){
      return $this->_has(11);
    }
    
    /**
     * Clear <groupid> value
     *
     * @return \RO\Cmd\OperSubActivity
     */
    public function clearGroupid(){
      return $this->_clear(11);
    }
    
    /**
     * Get <groupid> value
     *
     * @return int
     */
    public function getGroupid(){
      return $this->_get(11);
    }
    
    /**
     * Set <groupid> value
     *
     * @param int $value
     * @return \RO\Cmd\OperSubActivity
     */
    public function setGroupid( $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <data> has a value
     *
     * @return boolean
     */
    public function hasData(){
      return $this->_has(12);
    }
    
    /**
     * Clear <data> value
     *
     * @return \RO\Cmd\OperSubActivity
     */
    public function clearData(){
      return $this->_clear(12);
    }
    
    /**
     * Get <data> value
     *
     * @return \RO\Cmd\OperSubActivityData
     */
    public function getData(){
      return $this->_get(12);
    }
    
    /**
     * Set <data> value
     *
     * @param \RO\Cmd\OperSubActivityData $value
     * @return \RO\Cmd\OperSubActivity
     */
    public function setData(\RO\Cmd\OperSubActivityData $value){
      return $this->_set(12, $value);
    }
  }
}

