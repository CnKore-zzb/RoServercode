<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: GuildSCmd.proto

namespace RO\Cmd {

  class GuildInfo extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $id = 0;
    
    /**  @var int */
    public $zoneid = 0;
    
    /**  @var int */
    public $lv = 0;
    
    /**  @var int */
    public $scene = 0;
    
    /**  @var int */
    public $auth = 0;
    
    /**  @var boolean */
    public $create = false;
    
    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $portrait = null;
    
    /**  @var string */
    public $jobname = null;
    
    /**  @var \RO\Cmd\GuildSMember[]  */
    public $members = array();
    
    /**  @var \RO\Cmd\GuildQuest[]  */
    public $quests = array();
    
    /**  @var \RO\Cmd\GuildBuildingData */
    public $building = null;
    
    /**  @var int */
    public $openfunction = 0;
    
    /**  @var \RO\Cmd\GuildChallenge[]  */
    public $challenges = array();
    
    /**  @var \RO\Cmd\GuildArtifactItem[]  */
    public $artifactitems = array();
    
    /**  @var \RO\Cmd\GuildArtifactQuest */
    public $artifacequest = null;
    
    /**  @var \RO\Cmd\GuildGvgData */
    public $gvg = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.GuildInfo');

      // OPTIONAL UINT64 id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 zoneid = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "zoneid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 lv = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "lv";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 scene = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "scene";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 auth = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "auth";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL BOOL create = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "create";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = false;
      $descriptor->addField($f);

      // OPTIONAL STRING name = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING portrait = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "portrait";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING jobname = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "jobname";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE members = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "members";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\GuildSMember';
      $descriptor->addField($f);

      // REPEATED MESSAGE quests = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "quests";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\GuildQuest';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE building = 13
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 13;
      $f->name      = "building";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\GuildBuildingData';
      $descriptor->addField($f);

      // OPTIONAL UINT64 openfunction = 14
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 14;
      $f->name      = "openfunction";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // REPEATED MESSAGE challenges = 15
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 15;
      $f->name      = "challenges";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\GuildChallenge';
      $descriptor->addField($f);

      // REPEATED MESSAGE artifactitems = 16
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 16;
      $f->name      = "artifactitems";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\GuildArtifactItem';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE artifacequest = 17
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 17;
      $f->name      = "artifacequest";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\GuildArtifactQuest';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE gvg = 18
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 18;
      $f->name      = "gvg";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\GuildGvgData';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \RO\Cmd\GuildInfo
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param int $value
     * @return \RO\Cmd\GuildInfo
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <zoneid> has a value
     *
     * @return boolean
     */
    public function hasZoneid(){
      return $this->_has(2);
    }
    
    /**
     * Clear <zoneid> value
     *
     * @return \RO\Cmd\GuildInfo
     */
    public function clearZoneid(){
      return $this->_clear(2);
    }
    
    /**
     * Get <zoneid> value
     *
     * @return int
     */
    public function getZoneid(){
      return $this->_get(2);
    }
    
    /**
     * Set <zoneid> value
     *
     * @param int $value
     * @return \RO\Cmd\GuildInfo
     */
    public function setZoneid( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <lv> has a value
     *
     * @return boolean
     */
    public function hasLv(){
      return $this->_has(3);
    }
    
    /**
     * Clear <lv> value
     *
     * @return \RO\Cmd\GuildInfo
     */
    public function clearLv(){
      return $this->_clear(3);
    }
    
    /**
     * Get <lv> value
     *
     * @return int
     */
    public function getLv(){
      return $this->_get(3);
    }
    
    /**
     * Set <lv> value
     *
     * @param int $value
     * @return \RO\Cmd\GuildInfo
     */
    public function setLv( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <scene> has a value
     *
     * @return boolean
     */
    public function hasScene(){
      return $this->_has(4);
    }
    
    /**
     * Clear <scene> value
     *
     * @return \RO\Cmd\GuildInfo
     */
    public function clearScene(){
      return $this->_clear(4);
    }
    
    /**
     * Get <scene> value
     *
     * @return int
     */
    public function getScene(){
      return $this->_get(4);
    }
    
    /**
     * Set <scene> value
     *
     * @param int $value
     * @return \RO\Cmd\GuildInfo
     */
    public function setScene( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <auth> has a value
     *
     * @return boolean
     */
    public function hasAuth(){
      return $this->_has(12);
    }
    
    /**
     * Clear <auth> value
     *
     * @return \RO\Cmd\GuildInfo
     */
    public function clearAuth(){
      return $this->_clear(12);
    }
    
    /**
     * Get <auth> value
     *
     * @return int
     */
    public function getAuth(){
      return $this->_get(12);
    }
    
    /**
     * Set <auth> value
     *
     * @param int $value
     * @return \RO\Cmd\GuildInfo
     */
    public function setAuth( $value){
      return $this->_set(12, $value);
    }
    
    /**
     * Check if <create> has a value
     *
     * @return boolean
     */
    public function hasCreate(){
      return $this->_has(5);
    }
    
    /**
     * Clear <create> value
     *
     * @return \RO\Cmd\GuildInfo
     */
    public function clearCreate(){
      return $this->_clear(5);
    }
    
    /**
     * Get <create> value
     *
     * @return boolean
     */
    public function getCreate(){
      return $this->_get(5);
    }
    
    /**
     * Set <create> value
     *
     * @param boolean $value
     * @return \RO\Cmd\GuildInfo
     */
    public function setCreate( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(6);
    }
    
    /**
     * Clear <name> value
     *
     * @return \RO\Cmd\GuildInfo
     */
    public function clearName(){
      return $this->_clear(6);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(6);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \RO\Cmd\GuildInfo
     */
    public function setName( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <portrait> has a value
     *
     * @return boolean
     */
    public function hasPortrait(){
      return $this->_has(7);
    }
    
    /**
     * Clear <portrait> value
     *
     * @return \RO\Cmd\GuildInfo
     */
    public function clearPortrait(){
      return $this->_clear(7);
    }
    
    /**
     * Get <portrait> value
     *
     * @return string
     */
    public function getPortrait(){
      return $this->_get(7);
    }
    
    /**
     * Set <portrait> value
     *
     * @param string $value
     * @return \RO\Cmd\GuildInfo
     */
    public function setPortrait( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <jobname> has a value
     *
     * @return boolean
     */
    public function hasJobname(){
      return $this->_has(8);
    }
    
    /**
     * Clear <jobname> value
     *
     * @return \RO\Cmd\GuildInfo
     */
    public function clearJobname(){
      return $this->_clear(8);
    }
    
    /**
     * Get <jobname> value
     *
     * @return string
     */
    public function getJobname(){
      return $this->_get(8);
    }
    
    /**
     * Set <jobname> value
     *
     * @param string $value
     * @return \RO\Cmd\GuildInfo
     */
    public function setJobname( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <members> has a value
     *
     * @return boolean
     */
    public function hasMembers(){
      return $this->_has(10);
    }
    
    /**
     * Clear <members> value
     *
     * @return \RO\Cmd\GuildInfo
     */
    public function clearMembers(){
      return $this->_clear(10);
    }
    
    /**
     * Get <members> value
     *
     * @param int $idx
     * @return \RO\Cmd\GuildSMember
     */
    public function getMembers($idx = NULL){
      return $this->_get(10, $idx);
    }
    
    /**
     * Set <members> value
     *
     * @param \RO\Cmd\GuildSMember $value
     * @return \RO\Cmd\GuildInfo
     */
    public function setMembers(\RO\Cmd\GuildSMember $value, $idx = NULL){
      return $this->_set(10, $value, $idx);
    }
    
    /**
     * Get all elements of <members>
     *
     * @return \RO\Cmd\GuildSMember[]
     */
    public function getMembersList(){
     return $this->_get(10);
    }
    
    /**
     * Add a new element to <members>
     *
     * @param \RO\Cmd\GuildSMember $value
     * @return \RO\Cmd\GuildInfo
     */
    public function addMembers(\RO\Cmd\GuildSMember $value){
     return $this->_add(10, $value);
    }
    
    /**
     * Check if <quests> has a value
     *
     * @return boolean
     */
    public function hasQuests(){
      return $this->_has(11);
    }
    
    /**
     * Clear <quests> value
     *
     * @return \RO\Cmd\GuildInfo
     */
    public function clearQuests(){
      return $this->_clear(11);
    }
    
    /**
     * Get <quests> value
     *
     * @param int $idx
     * @return \RO\Cmd\GuildQuest
     */
    public function getQuests($idx = NULL){
      return $this->_get(11, $idx);
    }
    
    /**
     * Set <quests> value
     *
     * @param \RO\Cmd\GuildQuest $value
     * @return \RO\Cmd\GuildInfo
     */
    public function setQuests(\RO\Cmd\GuildQuest $value, $idx = NULL){
      return $this->_set(11, $value, $idx);
    }
    
    /**
     * Get all elements of <quests>
     *
     * @return \RO\Cmd\GuildQuest[]
     */
    public function getQuestsList(){
     return $this->_get(11);
    }
    
    /**
     * Add a new element to <quests>
     *
     * @param \RO\Cmd\GuildQuest $value
     * @return \RO\Cmd\GuildInfo
     */
    public function addQuests(\RO\Cmd\GuildQuest $value){
     return $this->_add(11, $value);
    }
    
    /**
     * Check if <building> has a value
     *
     * @return boolean
     */
    public function hasBuilding(){
      return $this->_has(13);
    }
    
    /**
     * Clear <building> value
     *
     * @return \RO\Cmd\GuildInfo
     */
    public function clearBuilding(){
      return $this->_clear(13);
    }
    
    /**
     * Get <building> value
     *
     * @return \RO\Cmd\GuildBuildingData
     */
    public function getBuilding(){
      return $this->_get(13);
    }
    
    /**
     * Set <building> value
     *
     * @param \RO\Cmd\GuildBuildingData $value
     * @return \RO\Cmd\GuildInfo
     */
    public function setBuilding(\RO\Cmd\GuildBuildingData $value){
      return $this->_set(13, $value);
    }
    
    /**
     * Check if <openfunction> has a value
     *
     * @return boolean
     */
    public function hasOpenfunction(){
      return $this->_has(14);
    }
    
    /**
     * Clear <openfunction> value
     *
     * @return \RO\Cmd\GuildInfo
     */
    public function clearOpenfunction(){
      return $this->_clear(14);
    }
    
    /**
     * Get <openfunction> value
     *
     * @return int
     */
    public function getOpenfunction(){
      return $this->_get(14);
    }
    
    /**
     * Set <openfunction> value
     *
     * @param int $value
     * @return \RO\Cmd\GuildInfo
     */
    public function setOpenfunction( $value){
      return $this->_set(14, $value);
    }
    
    /**
     * Check if <challenges> has a value
     *
     * @return boolean
     */
    public function hasChallenges(){
      return $this->_has(15);
    }
    
    /**
     * Clear <challenges> value
     *
     * @return \RO\Cmd\GuildInfo
     */
    public function clearChallenges(){
      return $this->_clear(15);
    }
    
    /**
     * Get <challenges> value
     *
     * @param int $idx
     * @return \RO\Cmd\GuildChallenge
     */
    public function getChallenges($idx = NULL){
      return $this->_get(15, $idx);
    }
    
    /**
     * Set <challenges> value
     *
     * @param \RO\Cmd\GuildChallenge $value
     * @return \RO\Cmd\GuildInfo
     */
    public function setChallenges(\RO\Cmd\GuildChallenge $value, $idx = NULL){
      return $this->_set(15, $value, $idx);
    }
    
    /**
     * Get all elements of <challenges>
     *
     * @return \RO\Cmd\GuildChallenge[]
     */
    public function getChallengesList(){
     return $this->_get(15);
    }
    
    /**
     * Add a new element to <challenges>
     *
     * @param \RO\Cmd\GuildChallenge $value
     * @return \RO\Cmd\GuildInfo
     */
    public function addChallenges(\RO\Cmd\GuildChallenge $value){
     return $this->_add(15, $value);
    }
    
    /**
     * Check if <artifactitems> has a value
     *
     * @return boolean
     */
    public function hasArtifactitems(){
      return $this->_has(16);
    }
    
    /**
     * Clear <artifactitems> value
     *
     * @return \RO\Cmd\GuildInfo
     */
    public function clearArtifactitems(){
      return $this->_clear(16);
    }
    
    /**
     * Get <artifactitems> value
     *
     * @param int $idx
     * @return \RO\Cmd\GuildArtifactItem
     */
    public function getArtifactitems($idx = NULL){
      return $this->_get(16, $idx);
    }
    
    /**
     * Set <artifactitems> value
     *
     * @param \RO\Cmd\GuildArtifactItem $value
     * @return \RO\Cmd\GuildInfo
     */
    public function setArtifactitems(\RO\Cmd\GuildArtifactItem $value, $idx = NULL){
      return $this->_set(16, $value, $idx);
    }
    
    /**
     * Get all elements of <artifactitems>
     *
     * @return \RO\Cmd\GuildArtifactItem[]
     */
    public function getArtifactitemsList(){
     return $this->_get(16);
    }
    
    /**
     * Add a new element to <artifactitems>
     *
     * @param \RO\Cmd\GuildArtifactItem $value
     * @return \RO\Cmd\GuildInfo
     */
    public function addArtifactitems(\RO\Cmd\GuildArtifactItem $value){
     return $this->_add(16, $value);
    }
    
    /**
     * Check if <artifacequest> has a value
     *
     * @return boolean
     */
    public function hasArtifacequest(){
      return $this->_has(17);
    }
    
    /**
     * Clear <artifacequest> value
     *
     * @return \RO\Cmd\GuildInfo
     */
    public function clearArtifacequest(){
      return $this->_clear(17);
    }
    
    /**
     * Get <artifacequest> value
     *
     * @return \RO\Cmd\GuildArtifactQuest
     */
    public function getArtifacequest(){
      return $this->_get(17);
    }
    
    /**
     * Set <artifacequest> value
     *
     * @param \RO\Cmd\GuildArtifactQuest $value
     * @return \RO\Cmd\GuildInfo
     */
    public function setArtifacequest(\RO\Cmd\GuildArtifactQuest $value){
      return $this->_set(17, $value);
    }
    
    /**
     * Check if <gvg> has a value
     *
     * @return boolean
     */
    public function hasGvg(){
      return $this->_has(18);
    }
    
    /**
     * Clear <gvg> value
     *
     * @return \RO\Cmd\GuildInfo
     */
    public function clearGvg(){
      return $this->_clear(18);
    }
    
    /**
     * Get <gvg> value
     *
     * @return \RO\Cmd\GuildGvgData
     */
    public function getGvg(){
      return $this->_get(18);
    }
    
    /**
     * Set <gvg> value
     *
     * @param \RO\Cmd\GuildGvgData $value
     * @return \RO\Cmd\GuildInfo
     */
    public function setGvg(\RO\Cmd\GuildGvgData $value){
      return $this->_set(18, $value);
    }
  }
}

