<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: RecordCmd.proto

namespace RO\Cmd {

  class BlobHands extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $version = 0;
    
    /**  @var int */
    public $ismaster = 0;
    
    /**  @var int */
    public $otherid = 0;
    
    /**  @var int */
    public $forcejoinid = 0;
    
    /**  @var string */
    public $last_handname = null;
    
    /**  @var int */
    public $handtimelen = 0;
    
    /**  @var int */
    public $nextrewardtime = 0;
    
    /**  @var int */
    public $nexttiptime = 0;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.BlobHands');

      // OPTIONAL UINT32 version = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "version";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 ismaster = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "ismaster";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT64 otherid = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "otherid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT64 forcejoinid = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "forcejoinid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL STRING last_handname = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "last_handname";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 handtimelen = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "handtimelen";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 nextrewardtime = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "nextrewardtime";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 nexttiptime = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "nexttiptime";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <version> has a value
     *
     * @return boolean
     */
    public function hasVersion(){
      return $this->_has(1);
    }
    
    /**
     * Clear <version> value
     *
     * @return \RO\Cmd\BlobHands
     */
    public function clearVersion(){
      return $this->_clear(1);
    }
    
    /**
     * Get <version> value
     *
     * @return int
     */
    public function getVersion(){
      return $this->_get(1);
    }
    
    /**
     * Set <version> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobHands
     */
    public function setVersion( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <ismaster> has a value
     *
     * @return boolean
     */
    public function hasIsmaster(){
      return $this->_has(2);
    }
    
    /**
     * Clear <ismaster> value
     *
     * @return \RO\Cmd\BlobHands
     */
    public function clearIsmaster(){
      return $this->_clear(2);
    }
    
    /**
     * Get <ismaster> value
     *
     * @return int
     */
    public function getIsmaster(){
      return $this->_get(2);
    }
    
    /**
     * Set <ismaster> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobHands
     */
    public function setIsmaster( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <otherid> has a value
     *
     * @return boolean
     */
    public function hasOtherid(){
      return $this->_has(3);
    }
    
    /**
     * Clear <otherid> value
     *
     * @return \RO\Cmd\BlobHands
     */
    public function clearOtherid(){
      return $this->_clear(3);
    }
    
    /**
     * Get <otherid> value
     *
     * @return int
     */
    public function getOtherid(){
      return $this->_get(3);
    }
    
    /**
     * Set <otherid> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobHands
     */
    public function setOtherid( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <forcejoinid> has a value
     *
     * @return boolean
     */
    public function hasForcejoinid(){
      return $this->_has(4);
    }
    
    /**
     * Clear <forcejoinid> value
     *
     * @return \RO\Cmd\BlobHands
     */
    public function clearForcejoinid(){
      return $this->_clear(4);
    }
    
    /**
     * Get <forcejoinid> value
     *
     * @return int
     */
    public function getForcejoinid(){
      return $this->_get(4);
    }
    
    /**
     * Set <forcejoinid> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobHands
     */
    public function setForcejoinid( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <last_handname> has a value
     *
     * @return boolean
     */
    public function hasLastHandname(){
      return $this->_has(5);
    }
    
    /**
     * Clear <last_handname> value
     *
     * @return \RO\Cmd\BlobHands
     */
    public function clearLastHandname(){
      return $this->_clear(5);
    }
    
    /**
     * Get <last_handname> value
     *
     * @return string
     */
    public function getLastHandname(){
      return $this->_get(5);
    }
    
    /**
     * Set <last_handname> value
     *
     * @param string $value
     * @return \RO\Cmd\BlobHands
     */
    public function setLastHandname( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <handtimelen> has a value
     *
     * @return boolean
     */
    public function hasHandtimelen(){
      return $this->_has(6);
    }
    
    /**
     * Clear <handtimelen> value
     *
     * @return \RO\Cmd\BlobHands
     */
    public function clearHandtimelen(){
      return $this->_clear(6);
    }
    
    /**
     * Get <handtimelen> value
     *
     * @return int
     */
    public function getHandtimelen(){
      return $this->_get(6);
    }
    
    /**
     * Set <handtimelen> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobHands
     */
    public function setHandtimelen( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <nextrewardtime> has a value
     *
     * @return boolean
     */
    public function hasNextrewardtime(){
      return $this->_has(7);
    }
    
    /**
     * Clear <nextrewardtime> value
     *
     * @return \RO\Cmd\BlobHands
     */
    public function clearNextrewardtime(){
      return $this->_clear(7);
    }
    
    /**
     * Get <nextrewardtime> value
     *
     * @return int
     */
    public function getNextrewardtime(){
      return $this->_get(7);
    }
    
    /**
     * Set <nextrewardtime> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobHands
     */
    public function setNextrewardtime( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <nexttiptime> has a value
     *
     * @return boolean
     */
    public function hasNexttiptime(){
      return $this->_has(8);
    }
    
    /**
     * Clear <nexttiptime> value
     *
     * @return \RO\Cmd\BlobHands
     */
    public function clearNexttiptime(){
      return $this->_clear(8);
    }
    
    /**
     * Get <nexttiptime> value
     *
     * @return int
     */
    public function getNexttiptime(){
      return $this->_get(8);
    }
    
    /**
     * Set <nexttiptime> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobHands
     */
    public function setNexttiptime( $value){
      return $this->_set(8, $value);
    }
  }
}

