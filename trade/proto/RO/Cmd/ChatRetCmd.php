<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: ChatCmd.proto

namespace RO\Cmd {

  class ChatRetCmd extends \DrSlump\Protobuf\Message {

    /**  @var int - \RO\Cmd\Command */
    public $cmd = \RO\Cmd\Command::CHAT_PROTOCMD;
    
    /**  @var int - \RO\Cmd\ChatParam */
    public $param = \RO\Cmd\ChatParam::CHATPARAM_CHAT_RET;
    
    /**  @var int */
    public $id = null;
    
    /**  @var int */
    public $targetid = 0;
    
    /**  @var int */
    public $portrait = null;
    
    /**  @var int */
    public $frame = null;
    
    /**  @var int */
    public $baselevel = 0;
    
    /**  @var int */
    public $voiceid = 0;
    
    /**  @var int */
    public $voicetime = 0;
    
    /**  @var int */
    public $hair = 0;
    
    /**  @var int */
    public $haircolor = 0;
    
    /**  @var int */
    public $body = 0;
    
    /**  @var int */
    public $appellation = 0;
    
    /**  @var int */
    public $msgid = 0;
    
    /**  @var int */
    public $head = 0;
    
    /**  @var int */
    public $face = 0;
    
    /**  @var int */
    public $mouth = 0;
    
    /**  @var int */
    public $eye = 0;
    
    /**  @var int - \RO\Cmd\EGameChatChannel */
    public $channel = \RO\Cmd\EGameChatChannel::ECHAT_CHANNEL_ROUND;
    
    /**  @var int - \RO\Cmd\EProfession */
    public $rolejob = \RO\Cmd\EProfession::EPROFESSION_MIN;
    
    /**  @var int - \RO\Cmd\EGender */
    public $gender = \RO\Cmd\EGender::EGENDER_MIN;
    
    /**  @var boolean */
    public $blink = false;
    
    /**  @var string */
    public $str = null;
    
    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $guildname = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.ChatRetCmd');

      // OPTIONAL ENUM cmd = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "cmd";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\Command';
      $f->default   = \RO\Cmd\Command::CHAT_PROTOCMD;
      $descriptor->addField($f);

      // OPTIONAL ENUM param = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "param";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\ChatParam';
      $f->default   = \RO\Cmd\ChatParam::CHATPARAM_CHAT_RET;
      $descriptor->addField($f);

      // REQUIRED UINT64 id = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL UINT64 targetid = 13
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 13;
      $f->name      = "targetid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // REQUIRED UINT32 portrait = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "portrait";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED UINT32 frame = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "frame";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL UINT32 baselevel = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "baselevel";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 voiceid = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "voiceid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 voicetime = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "voicetime";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 hair = 14
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 14;
      $f->name      = "hair";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 haircolor = 15
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 15;
      $f->name      = "haircolor";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 body = 16
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 16;
      $f->name      = "body";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 appellation = 19
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 19;
      $f->name      = "appellation";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 msgid = 21
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 21;
      $f->name      = "msgid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 head = 22
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 22;
      $f->name      = "head";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 face = 23
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 23;
      $f->name      = "face";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 mouth = 24
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 24;
      $f->name      = "mouth";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 eye = 25
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 25;
      $f->name      = "eye";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL ENUM channel = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "channel";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\EGameChatChannel';
      $f->default   = \RO\Cmd\EGameChatChannel::ECHAT_CHANNEL_ROUND;
      $descriptor->addField($f);

      // OPTIONAL ENUM rolejob = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "rolejob";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\EProfession';
      $f->default   = \RO\Cmd\EProfession::EPROFESSION_MIN;
      $descriptor->addField($f);

      // OPTIONAL ENUM gender = 17
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 17;
      $f->name      = "gender";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\EGender';
      $f->default   = \RO\Cmd\EGender::EGENDER_MIN;
      $descriptor->addField($f);

      // OPTIONAL BOOL blink = 20
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 20;
      $f->name      = "blink";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = false;
      $descriptor->addField($f);

      // REQUIRED STRING str = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "str";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING name = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL STRING guildname = 18
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 18;
      $f->name      = "guildname";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <cmd> has a value
     *
     * @return boolean
     */
    public function hasCmd(){
      return $this->_has(1);
    }
    
    /**
     * Clear <cmd> value
     *
     * @return \RO\Cmd\ChatRetCmd
     */
    public function clearCmd(){
      return $this->_clear(1);
    }
    
    /**
     * Get <cmd> value
     *
     * @return int - \RO\Cmd\Command
     */
    public function getCmd(){
      return $this->_get(1);
    }
    
    /**
     * Set <cmd> value
     *
     * @param int - \RO\Cmd\Command $value
     * @return \RO\Cmd\ChatRetCmd
     */
    public function setCmd( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <param> has a value
     *
     * @return boolean
     */
    public function hasParam(){
      return $this->_has(2);
    }
    
    /**
     * Clear <param> value
     *
     * @return \RO\Cmd\ChatRetCmd
     */
    public function clearParam(){
      return $this->_clear(2);
    }
    
    /**
     * Get <param> value
     *
     * @return int - \RO\Cmd\ChatParam
     */
    public function getParam(){
      return $this->_get(2);
    }
    
    /**
     * Set <param> value
     *
     * @param int - \RO\Cmd\ChatParam $value
     * @return \RO\Cmd\ChatRetCmd
     */
    public function setParam( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(6);
    }
    
    /**
     * Clear <id> value
     *
     * @return \RO\Cmd\ChatRetCmd
     */
    public function clearId(){
      return $this->_clear(6);
    }
    
    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(6);
    }
    
    /**
     * Set <id> value
     *
     * @param int $value
     * @return \RO\Cmd\ChatRetCmd
     */
    public function setId( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <targetid> has a value
     *
     * @return boolean
     */
    public function hasTargetid(){
      return $this->_has(13);
    }
    
    /**
     * Clear <targetid> value
     *
     * @return \RO\Cmd\ChatRetCmd
     */
    public function clearTargetid(){
      return $this->_clear(13);
    }
    
    /**
     * Get <targetid> value
     *
     * @return int
     */
    public function getTargetid(){
      return $this->_get(13);
    }
    
    /**
     * Set <targetid> value
     *
     * @param int $value
     * @return \RO\Cmd\ChatRetCmd
     */
    public function setTargetid( $value){
      return $this->_set(13, $value);
    }
    
    /**
     * Check if <portrait> has a value
     *
     * @return boolean
     */
    public function hasPortrait(){
      return $this->_has(7);
    }
    
    /**
     * Clear <portrait> value
     *
     * @return \RO\Cmd\ChatRetCmd
     */
    public function clearPortrait(){
      return $this->_clear(7);
    }
    
    /**
     * Get <portrait> value
     *
     * @return int
     */
    public function getPortrait(){
      return $this->_get(7);
    }
    
    /**
     * Set <portrait> value
     *
     * @param int $value
     * @return \RO\Cmd\ChatRetCmd
     */
    public function setPortrait( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <frame> has a value
     *
     * @return boolean
     */
    public function hasFrame(){
      return $this->_has(8);
    }
    
    /**
     * Clear <frame> value
     *
     * @return \RO\Cmd\ChatRetCmd
     */
    public function clearFrame(){
      return $this->_clear(8);
    }
    
    /**
     * Get <frame> value
     *
     * @return int
     */
    public function getFrame(){
      return $this->_get(8);
    }
    
    /**
     * Set <frame> value
     *
     * @param int $value
     * @return \RO\Cmd\ChatRetCmd
     */
    public function setFrame( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <baselevel> has a value
     *
     * @return boolean
     */
    public function hasBaselevel(){
      return $this->_has(10);
    }
    
    /**
     * Clear <baselevel> value
     *
     * @return \RO\Cmd\ChatRetCmd
     */
    public function clearBaselevel(){
      return $this->_clear(10);
    }
    
    /**
     * Get <baselevel> value
     *
     * @return int
     */
    public function getBaselevel(){
      return $this->_get(10);
    }
    
    /**
     * Set <baselevel> value
     *
     * @param int $value
     * @return \RO\Cmd\ChatRetCmd
     */
    public function setBaselevel( $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <voiceid> has a value
     *
     * @return boolean
     */
    public function hasVoiceid(){
      return $this->_has(11);
    }
    
    /**
     * Clear <voiceid> value
     *
     * @return \RO\Cmd\ChatRetCmd
     */
    public function clearVoiceid(){
      return $this->_clear(11);
    }
    
    /**
     * Get <voiceid> value
     *
     * @return int
     */
    public function getVoiceid(){
      return $this->_get(11);
    }
    
    /**
     * Set <voiceid> value
     *
     * @param int $value
     * @return \RO\Cmd\ChatRetCmd
     */
    public function setVoiceid( $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <voicetime> has a value
     *
     * @return boolean
     */
    public function hasVoicetime(){
      return $this->_has(12);
    }
    
    /**
     * Clear <voicetime> value
     *
     * @return \RO\Cmd\ChatRetCmd
     */
    public function clearVoicetime(){
      return $this->_clear(12);
    }
    
    /**
     * Get <voicetime> value
     *
     * @return int
     */
    public function getVoicetime(){
      return $this->_get(12);
    }
    
    /**
     * Set <voicetime> value
     *
     * @param int $value
     * @return \RO\Cmd\ChatRetCmd
     */
    public function setVoicetime( $value){
      return $this->_set(12, $value);
    }
    
    /**
     * Check if <hair> has a value
     *
     * @return boolean
     */
    public function hasHair(){
      return $this->_has(14);
    }
    
    /**
     * Clear <hair> value
     *
     * @return \RO\Cmd\ChatRetCmd
     */
    public function clearHair(){
      return $this->_clear(14);
    }
    
    /**
     * Get <hair> value
     *
     * @return int
     */
    public function getHair(){
      return $this->_get(14);
    }
    
    /**
     * Set <hair> value
     *
     * @param int $value
     * @return \RO\Cmd\ChatRetCmd
     */
    public function setHair( $value){
      return $this->_set(14, $value);
    }
    
    /**
     * Check if <haircolor> has a value
     *
     * @return boolean
     */
    public function hasHaircolor(){
      return $this->_has(15);
    }
    
    /**
     * Clear <haircolor> value
     *
     * @return \RO\Cmd\ChatRetCmd
     */
    public function clearHaircolor(){
      return $this->_clear(15);
    }
    
    /**
     * Get <haircolor> value
     *
     * @return int
     */
    public function getHaircolor(){
      return $this->_get(15);
    }
    
    /**
     * Set <haircolor> value
     *
     * @param int $value
     * @return \RO\Cmd\ChatRetCmd
     */
    public function setHaircolor( $value){
      return $this->_set(15, $value);
    }
    
    /**
     * Check if <body> has a value
     *
     * @return boolean
     */
    public function hasBody(){
      return $this->_has(16);
    }
    
    /**
     * Clear <body> value
     *
     * @return \RO\Cmd\ChatRetCmd
     */
    public function clearBody(){
      return $this->_clear(16);
    }
    
    /**
     * Get <body> value
     *
     * @return int
     */
    public function getBody(){
      return $this->_get(16);
    }
    
    /**
     * Set <body> value
     *
     * @param int $value
     * @return \RO\Cmd\ChatRetCmd
     */
    public function setBody( $value){
      return $this->_set(16, $value);
    }
    
    /**
     * Check if <appellation> has a value
     *
     * @return boolean
     */
    public function hasAppellation(){
      return $this->_has(19);
    }
    
    /**
     * Clear <appellation> value
     *
     * @return \RO\Cmd\ChatRetCmd
     */
    public function clearAppellation(){
      return $this->_clear(19);
    }
    
    /**
     * Get <appellation> value
     *
     * @return int
     */
    public function getAppellation(){
      return $this->_get(19);
    }
    
    /**
     * Set <appellation> value
     *
     * @param int $value
     * @return \RO\Cmd\ChatRetCmd
     */
    public function setAppellation( $value){
      return $this->_set(19, $value);
    }
    
    /**
     * Check if <msgid> has a value
     *
     * @return boolean
     */
    public function hasMsgid(){
      return $this->_has(21);
    }
    
    /**
     * Clear <msgid> value
     *
     * @return \RO\Cmd\ChatRetCmd
     */
    public function clearMsgid(){
      return $this->_clear(21);
    }
    
    /**
     * Get <msgid> value
     *
     * @return int
     */
    public function getMsgid(){
      return $this->_get(21);
    }
    
    /**
     * Set <msgid> value
     *
     * @param int $value
     * @return \RO\Cmd\ChatRetCmd
     */
    public function setMsgid( $value){
      return $this->_set(21, $value);
    }
    
    /**
     * Check if <head> has a value
     *
     * @return boolean
     */
    public function hasHead(){
      return $this->_has(22);
    }
    
    /**
     * Clear <head> value
     *
     * @return \RO\Cmd\ChatRetCmd
     */
    public function clearHead(){
      return $this->_clear(22);
    }
    
    /**
     * Get <head> value
     *
     * @return int
     */
    public function getHead(){
      return $this->_get(22);
    }
    
    /**
     * Set <head> value
     *
     * @param int $value
     * @return \RO\Cmd\ChatRetCmd
     */
    public function setHead( $value){
      return $this->_set(22, $value);
    }
    
    /**
     * Check if <face> has a value
     *
     * @return boolean
     */
    public function hasFace(){
      return $this->_has(23);
    }
    
    /**
     * Clear <face> value
     *
     * @return \RO\Cmd\ChatRetCmd
     */
    public function clearFace(){
      return $this->_clear(23);
    }
    
    /**
     * Get <face> value
     *
     * @return int
     */
    public function getFace(){
      return $this->_get(23);
    }
    
    /**
     * Set <face> value
     *
     * @param int $value
     * @return \RO\Cmd\ChatRetCmd
     */
    public function setFace( $value){
      return $this->_set(23, $value);
    }
    
    /**
     * Check if <mouth> has a value
     *
     * @return boolean
     */
    public function hasMouth(){
      return $this->_has(24);
    }
    
    /**
     * Clear <mouth> value
     *
     * @return \RO\Cmd\ChatRetCmd
     */
    public function clearMouth(){
      return $this->_clear(24);
    }
    
    /**
     * Get <mouth> value
     *
     * @return int
     */
    public function getMouth(){
      return $this->_get(24);
    }
    
    /**
     * Set <mouth> value
     *
     * @param int $value
     * @return \RO\Cmd\ChatRetCmd
     */
    public function setMouth( $value){
      return $this->_set(24, $value);
    }
    
    /**
     * Check if <eye> has a value
     *
     * @return boolean
     */
    public function hasEye(){
      return $this->_has(25);
    }
    
    /**
     * Clear <eye> value
     *
     * @return \RO\Cmd\ChatRetCmd
     */
    public function clearEye(){
      return $this->_clear(25);
    }
    
    /**
     * Get <eye> value
     *
     * @return int
     */
    public function getEye(){
      return $this->_get(25);
    }
    
    /**
     * Set <eye> value
     *
     * @param int $value
     * @return \RO\Cmd\ChatRetCmd
     */
    public function setEye( $value){
      return $this->_set(25, $value);
    }
    
    /**
     * Check if <channel> has a value
     *
     * @return boolean
     */
    public function hasChannel(){
      return $this->_has(3);
    }
    
    /**
     * Clear <channel> value
     *
     * @return \RO\Cmd\ChatRetCmd
     */
    public function clearChannel(){
      return $this->_clear(3);
    }
    
    /**
     * Get <channel> value
     *
     * @return int - \RO\Cmd\EGameChatChannel
     */
    public function getChannel(){
      return $this->_get(3);
    }
    
    /**
     * Set <channel> value
     *
     * @param int - \RO\Cmd\EGameChatChannel $value
     * @return \RO\Cmd\ChatRetCmd
     */
    public function setChannel( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <rolejob> has a value
     *
     * @return boolean
     */
    public function hasRolejob(){
      return $this->_has(9);
    }
    
    /**
     * Clear <rolejob> value
     *
     * @return \RO\Cmd\ChatRetCmd
     */
    public function clearRolejob(){
      return $this->_clear(9);
    }
    
    /**
     * Get <rolejob> value
     *
     * @return int - \RO\Cmd\EProfession
     */
    public function getRolejob(){
      return $this->_get(9);
    }
    
    /**
     * Set <rolejob> value
     *
     * @param int - \RO\Cmd\EProfession $value
     * @return \RO\Cmd\ChatRetCmd
     */
    public function setRolejob( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <gender> has a value
     *
     * @return boolean
     */
    public function hasGender(){
      return $this->_has(17);
    }
    
    /**
     * Clear <gender> value
     *
     * @return \RO\Cmd\ChatRetCmd
     */
    public function clearGender(){
      return $this->_clear(17);
    }
    
    /**
     * Get <gender> value
     *
     * @return int - \RO\Cmd\EGender
     */
    public function getGender(){
      return $this->_get(17);
    }
    
    /**
     * Set <gender> value
     *
     * @param int - \RO\Cmd\EGender $value
     * @return \RO\Cmd\ChatRetCmd
     */
    public function setGender( $value){
      return $this->_set(17, $value);
    }
    
    /**
     * Check if <blink> has a value
     *
     * @return boolean
     */
    public function hasBlink(){
      return $this->_has(20);
    }
    
    /**
     * Clear <blink> value
     *
     * @return \RO\Cmd\ChatRetCmd
     */
    public function clearBlink(){
      return $this->_clear(20);
    }
    
    /**
     * Get <blink> value
     *
     * @return boolean
     */
    public function getBlink(){
      return $this->_get(20);
    }
    
    /**
     * Set <blink> value
     *
     * @param boolean $value
     * @return \RO\Cmd\ChatRetCmd
     */
    public function setBlink( $value){
      return $this->_set(20, $value);
    }
    
    /**
     * Check if <str> has a value
     *
     * @return boolean
     */
    public function hasStr(){
      return $this->_has(4);
    }
    
    /**
     * Clear <str> value
     *
     * @return \RO\Cmd\ChatRetCmd
     */
    public function clearStr(){
      return $this->_clear(4);
    }
    
    /**
     * Get <str> value
     *
     * @return string
     */
    public function getStr(){
      return $this->_get(4);
    }
    
    /**
     * Set <str> value
     *
     * @param string $value
     * @return \RO\Cmd\ChatRetCmd
     */
    public function setStr( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(5);
    }
    
    /**
     * Clear <name> value
     *
     * @return \RO\Cmd\ChatRetCmd
     */
    public function clearName(){
      return $this->_clear(5);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(5);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \RO\Cmd\ChatRetCmd
     */
    public function setName( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <guildname> has a value
     *
     * @return boolean
     */
    public function hasGuildname(){
      return $this->_has(18);
    }
    
    /**
     * Clear <guildname> value
     *
     * @return \RO\Cmd\ChatRetCmd
     */
    public function clearGuildname(){
      return $this->_clear(18);
    }
    
    /**
     * Get <guildname> value
     *
     * @return string
     */
    public function getGuildname(){
      return $this->_get(18);
    }
    
    /**
     * Set <guildname> value
     *
     * @param string $value
     * @return \RO\Cmd\ChatRetCmd
     */
    public function setGuildname( $value){
      return $this->_set(18, $value);
    }
  }
}

