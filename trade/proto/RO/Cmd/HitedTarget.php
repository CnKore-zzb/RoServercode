<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: SceneUser.proto

namespace RO\Cmd {

  class HitedTarget extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $charid = 0;
    
    /**  @var int */
    public $damage = 0;
    
    /**  @var int */
    public $type = 1;
    
    /**  @var \RO\Cmd\ShareDamTarget[]  */
    public $shareTargets = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.HitedTarget');

      // OPTIONAL UINT64 charid = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "charid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL INT32 damage = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "damage";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL INT32 type = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 1;
      $descriptor->addField($f);

      // REPEATED MESSAGE shareTargets = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "shareTargets";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\ShareDamTarget';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <charid> has a value
     *
     * @return boolean
     */
    public function hasCharid(){
      return $this->_has(1);
    }
    
    /**
     * Clear <charid> value
     *
     * @return \RO\Cmd\HitedTarget
     */
    public function clearCharid(){
      return $this->_clear(1);
    }
    
    /**
     * Get <charid> value
     *
     * @return int
     */
    public function getCharid(){
      return $this->_get(1);
    }
    
    /**
     * Set <charid> value
     *
     * @param int $value
     * @return \RO\Cmd\HitedTarget
     */
    public function setCharid( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <damage> has a value
     *
     * @return boolean
     */
    public function hasDamage(){
      return $this->_has(2);
    }
    
    /**
     * Clear <damage> value
     *
     * @return \RO\Cmd\HitedTarget
     */
    public function clearDamage(){
      return $this->_clear(2);
    }
    
    /**
     * Get <damage> value
     *
     * @return int
     */
    public function getDamage(){
      return $this->_get(2);
    }
    
    /**
     * Set <damage> value
     *
     * @param int $value
     * @return \RO\Cmd\HitedTarget
     */
    public function setDamage( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(3);
    }
    
    /**
     * Clear <type> value
     *
     * @return \RO\Cmd\HitedTarget
     */
    public function clearType(){
      return $this->_clear(3);
    }
    
    /**
     * Get <type> value
     *
     * @return int
     */
    public function getType(){
      return $this->_get(3);
    }
    
    /**
     * Set <type> value
     *
     * @param int $value
     * @return \RO\Cmd\HitedTarget
     */
    public function setType( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <shareTargets> has a value
     *
     * @return boolean
     */
    public function hasShareTargets(){
      return $this->_has(4);
    }
    
    /**
     * Clear <shareTargets> value
     *
     * @return \RO\Cmd\HitedTarget
     */
    public function clearShareTargets(){
      return $this->_clear(4);
    }
    
    /**
     * Get <shareTargets> value
     *
     * @param int $idx
     * @return \RO\Cmd\ShareDamTarget
     */
    public function getShareTargets($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <shareTargets> value
     *
     * @param \RO\Cmd\ShareDamTarget $value
     * @return \RO\Cmd\HitedTarget
     */
    public function setShareTargets(\RO\Cmd\ShareDamTarget $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <shareTargets>
     *
     * @return \RO\Cmd\ShareDamTarget[]
     */
    public function getShareTargetsList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <shareTargets>
     *
     * @param \RO\Cmd\ShareDamTarget $value
     * @return \RO\Cmd\HitedTarget
     */
    public function addShareTargets(\RO\Cmd\ShareDamTarget $value){
     return $this->_add(4, $value);
    }
  }
}

