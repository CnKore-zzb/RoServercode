<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: ChatCmd.proto

namespace RO\Cmd {

  class BarrageMsgChatCmd extends \DrSlump\Protobuf\Message {

    /**  @var int - \RO\Cmd\Command */
    public $cmd = \RO\Cmd\Command::CHAT_PROTOCMD;
    
    /**  @var int - \RO\Cmd\ChatParam */
    public $param = \RO\Cmd\ChatParam::CHATPARAM_BARRAGEMSG;
    
    /**  @var string */
    public $str = null;
    
    /**  @var \RO\Cmd\ScenePos */
    public $msgpos = null;
    
    /**  @var \RO\Cmd\ColorInfo */
    public $clr = null;
    
    /**  @var int */
    public $speed = 0;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.BarrageMsgChatCmd');

      // OPTIONAL ENUM cmd = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "cmd";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\Command';
      $f->default   = \RO\Cmd\Command::CHAT_PROTOCMD;
      $descriptor->addField($f);

      // OPTIONAL ENUM param = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "param";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\ChatParam';
      $f->default   = \RO\Cmd\ChatParam::CHATPARAM_BARRAGEMSG;
      $descriptor->addField($f);

      // OPTIONAL STRING str = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "str";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE msgpos = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "msgpos";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\ScenePos';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE clr = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "clr";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\ColorInfo';
      $descriptor->addField($f);

      // OPTIONAL UINT32 speed = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "speed";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <cmd> has a value
     *
     * @return boolean
     */
    public function hasCmd(){
      return $this->_has(1);
    }
    
    /**
     * Clear <cmd> value
     *
     * @return \RO\Cmd\BarrageMsgChatCmd
     */
    public function clearCmd(){
      return $this->_clear(1);
    }
    
    /**
     * Get <cmd> value
     *
     * @return int - \RO\Cmd\Command
     */
    public function getCmd(){
      return $this->_get(1);
    }
    
    /**
     * Set <cmd> value
     *
     * @param int - \RO\Cmd\Command $value
     * @return \RO\Cmd\BarrageMsgChatCmd
     */
    public function setCmd( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <param> has a value
     *
     * @return boolean
     */
    public function hasParam(){
      return $this->_has(2);
    }
    
    /**
     * Clear <param> value
     *
     * @return \RO\Cmd\BarrageMsgChatCmd
     */
    public function clearParam(){
      return $this->_clear(2);
    }
    
    /**
     * Get <param> value
     *
     * @return int - \RO\Cmd\ChatParam
     */
    public function getParam(){
      return $this->_get(2);
    }
    
    /**
     * Set <param> value
     *
     * @param int - \RO\Cmd\ChatParam $value
     * @return \RO\Cmd\BarrageMsgChatCmd
     */
    public function setParam( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <str> has a value
     *
     * @return boolean
     */
    public function hasStr(){
      return $this->_has(3);
    }
    
    /**
     * Clear <str> value
     *
     * @return \RO\Cmd\BarrageMsgChatCmd
     */
    public function clearStr(){
      return $this->_clear(3);
    }
    
    /**
     * Get <str> value
     *
     * @return string
     */
    public function getStr(){
      return $this->_get(3);
    }
    
    /**
     * Set <str> value
     *
     * @param string $value
     * @return \RO\Cmd\BarrageMsgChatCmd
     */
    public function setStr( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <msgpos> has a value
     *
     * @return boolean
     */
    public function hasMsgpos(){
      return $this->_has(4);
    }
    
    /**
     * Clear <msgpos> value
     *
     * @return \RO\Cmd\BarrageMsgChatCmd
     */
    public function clearMsgpos(){
      return $this->_clear(4);
    }
    
    /**
     * Get <msgpos> value
     *
     * @return \RO\Cmd\ScenePos
     */
    public function getMsgpos(){
      return $this->_get(4);
    }
    
    /**
     * Set <msgpos> value
     *
     * @param \RO\Cmd\ScenePos $value
     * @return \RO\Cmd\BarrageMsgChatCmd
     */
    public function setMsgpos(\RO\Cmd\ScenePos $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <clr> has a value
     *
     * @return boolean
     */
    public function hasClr(){
      return $this->_has(5);
    }
    
    /**
     * Clear <clr> value
     *
     * @return \RO\Cmd\BarrageMsgChatCmd
     */
    public function clearClr(){
      return $this->_clear(5);
    }
    
    /**
     * Get <clr> value
     *
     * @return \RO\Cmd\ColorInfo
     */
    public function getClr(){
      return $this->_get(5);
    }
    
    /**
     * Set <clr> value
     *
     * @param \RO\Cmd\ColorInfo $value
     * @return \RO\Cmd\BarrageMsgChatCmd
     */
    public function setClr(\RO\Cmd\ColorInfo $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <speed> has a value
     *
     * @return boolean
     */
    public function hasSpeed(){
      return $this->_has(6);
    }
    
    /**
     * Clear <speed> value
     *
     * @return \RO\Cmd\BarrageMsgChatCmd
     */
    public function clearSpeed(){
      return $this->_clear(6);
    }
    
    /**
     * Get <speed> value
     *
     * @return int
     */
    public function getSpeed(){
      return $this->_get(6);
    }
    
    /**
     * Set <speed> value
     *
     * @param int $value
     * @return \RO\Cmd\BarrageMsgChatCmd
     */
    public function setSpeed( $value){
      return $this->_set(6, $value);
    }
  }
}

