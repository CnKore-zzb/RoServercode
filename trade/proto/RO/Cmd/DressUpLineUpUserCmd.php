<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: SceneUser2.proto

namespace RO\Cmd {

  class DressUpLineUpUserCmd extends \DrSlump\Protobuf\Message {

    /**  @var int - \RO\Cmd\Command */
    public $cmd = \RO\Cmd\Command::SCENE_USER2_PROTOCMD;
    
    /**  @var int - \RO\Cmd\User2Param */
    public $param = \RO\Cmd\User2Param::USER2PARAM_DRESSUP_LINEUP;
    
    /**  @var int */
    public $stageid = 0;
    
    /**  @var int */
    public $mode = 0;
    
    /**  @var boolean */
    public $enter = false;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.DressUpLineUpUserCmd');

      // OPTIONAL ENUM cmd = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "cmd";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\Command';
      $f->default   = \RO\Cmd\Command::SCENE_USER2_PROTOCMD;
      $descriptor->addField($f);

      // OPTIONAL ENUM param = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "param";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\User2Param';
      $f->default   = \RO\Cmd\User2Param::USER2PARAM_DRESSUP_LINEUP;
      $descriptor->addField($f);

      // OPTIONAL UINT32 stageid = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "stageid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 mode = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "mode";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL BOOL enter = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "enter";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = false;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <cmd> has a value
     *
     * @return boolean
     */
    public function hasCmd(){
      return $this->_has(1);
    }
    
    /**
     * Clear <cmd> value
     *
     * @return \RO\Cmd\DressUpLineUpUserCmd
     */
    public function clearCmd(){
      return $this->_clear(1);
    }
    
    /**
     * Get <cmd> value
     *
     * @return int - \RO\Cmd\Command
     */
    public function getCmd(){
      return $this->_get(1);
    }
    
    /**
     * Set <cmd> value
     *
     * @param int - \RO\Cmd\Command $value
     * @return \RO\Cmd\DressUpLineUpUserCmd
     */
    public function setCmd( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <param> has a value
     *
     * @return boolean
     */
    public function hasParam(){
      return $this->_has(2);
    }
    
    /**
     * Clear <param> value
     *
     * @return \RO\Cmd\DressUpLineUpUserCmd
     */
    public function clearParam(){
      return $this->_clear(2);
    }
    
    /**
     * Get <param> value
     *
     * @return int - \RO\Cmd\User2Param
     */
    public function getParam(){
      return $this->_get(2);
    }
    
    /**
     * Set <param> value
     *
     * @param int - \RO\Cmd\User2Param $value
     * @return \RO\Cmd\DressUpLineUpUserCmd
     */
    public function setParam( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <stageid> has a value
     *
     * @return boolean
     */
    public function hasStageid(){
      return $this->_has(3);
    }
    
    /**
     * Clear <stageid> value
     *
     * @return \RO\Cmd\DressUpLineUpUserCmd
     */
    public function clearStageid(){
      return $this->_clear(3);
    }
    
    /**
     * Get <stageid> value
     *
     * @return int
     */
    public function getStageid(){
      return $this->_get(3);
    }
    
    /**
     * Set <stageid> value
     *
     * @param int $value
     * @return \RO\Cmd\DressUpLineUpUserCmd
     */
    public function setStageid( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <mode> has a value
     *
     * @return boolean
     */
    public function hasMode(){
      return $this->_has(4);
    }
    
    /**
     * Clear <mode> value
     *
     * @return \RO\Cmd\DressUpLineUpUserCmd
     */
    public function clearMode(){
      return $this->_clear(4);
    }
    
    /**
     * Get <mode> value
     *
     * @return int
     */
    public function getMode(){
      return $this->_get(4);
    }
    
    /**
     * Set <mode> value
     *
     * @param int $value
     * @return \RO\Cmd\DressUpLineUpUserCmd
     */
    public function setMode( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <enter> has a value
     *
     * @return boolean
     */
    public function hasEnter(){
      return $this->_has(5);
    }
    
    /**
     * Clear <enter> value
     *
     * @return \RO\Cmd\DressUpLineUpUserCmd
     */
    public function clearEnter(){
      return $this->_clear(5);
    }
    
    /**
     * Get <enter> value
     *
     * @return boolean
     */
    public function getEnter(){
      return $this->_get(5);
    }
    
    /**
     * Set <enter> value
     *
     * @param boolean $value
     * @return \RO\Cmd\DressUpLineUpUserCmd
     */
    public function setEnter( $value){
      return $this->_set(5, $value);
    }
  }
}

