<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: ActivityEvent.proto

namespace RO\Cmd {

  class AELotteryBanner extends \DrSlump\Protobuf\Message {

    /**  @var int - \RO\Cmd\ELotteryType */
    public $lotterytype = null;
    
    /**  @var string */
    public $path = null;
    
    /**  @var \RO\Cmd\AEUrl[]  */
    public $urls = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.AELotteryBanner');

      // OPTIONAL ENUM lotterytype = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "lotterytype";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\ELotteryType';
      $descriptor->addField($f);

      // OPTIONAL STRING path = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "path";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE urls = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "urls";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\AEUrl';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <lotterytype> has a value
     *
     * @return boolean
     */
    public function hasLotterytype(){
      return $this->_has(1);
    }
    
    /**
     * Clear <lotterytype> value
     *
     * @return \RO\Cmd\AELotteryBanner
     */
    public function clearLotterytype(){
      return $this->_clear(1);
    }
    
    /**
     * Get <lotterytype> value
     *
     * @return int - \RO\Cmd\ELotteryType
     */
    public function getLotterytype(){
      return $this->_get(1);
    }
    
    /**
     * Set <lotterytype> value
     *
     * @param int - \RO\Cmd\ELotteryType $value
     * @return \RO\Cmd\AELotteryBanner
     */
    public function setLotterytype( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <path> has a value
     *
     * @return boolean
     */
    public function hasPath(){
      return $this->_has(2);
    }
    
    /**
     * Clear <path> value
     *
     * @return \RO\Cmd\AELotteryBanner
     */
    public function clearPath(){
      return $this->_clear(2);
    }
    
    /**
     * Get <path> value
     *
     * @return string
     */
    public function getPath(){
      return $this->_get(2);
    }
    
    /**
     * Set <path> value
     *
     * @param string $value
     * @return \RO\Cmd\AELotteryBanner
     */
    public function setPath( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <urls> has a value
     *
     * @return boolean
     */
    public function hasUrls(){
      return $this->_has(3);
    }
    
    /**
     * Clear <urls> value
     *
     * @return \RO\Cmd\AELotteryBanner
     */
    public function clearUrls(){
      return $this->_clear(3);
    }
    
    /**
     * Get <urls> value
     *
     * @param int $idx
     * @return \RO\Cmd\AEUrl
     */
    public function getUrls($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <urls> value
     *
     * @param \RO\Cmd\AEUrl $value
     * @return \RO\Cmd\AELotteryBanner
     */
    public function setUrls(\RO\Cmd\AEUrl $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <urls>
     *
     * @return \RO\Cmd\AEUrl[]
     */
    public function getUrlsList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <urls>
     *
     * @param \RO\Cmd\AEUrl $value
     * @return \RO\Cmd\AELotteryBanner
     */
    public function addUrls(\RO\Cmd\AEUrl $value){
     return $this->_add(3, $value);
    }
  }
}

