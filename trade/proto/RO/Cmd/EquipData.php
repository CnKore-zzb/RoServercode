<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: SceneItem.proto

namespace RO\Cmd {

  class EquipData extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $strengthlv = 0;
    
    /**  @var int */
    public $refinelv = 0;
    
    /**  @var int */
    public $strengthCost = 0;
    
    /**  @var \RO\Cmd\RefineCompose[]  */
    public $refineCompose = array();
    
    /**  @var int */
    public $cardslot = 0;
    
    /**  @var int[]  */
    public $buffid = array();
    
    /**  @var boolean */
    public $damage = false;
    
    /**  @var int */
    public $lv = 0;
    
    /**  @var int */
    public $color = 0;
    
    /**  @var int */
    public $breakstarttime = 0;
    
    /**  @var int */
    public $breakendtime = 0;
    
    /**  @var int */
    public $strengthlv2 = 0;
    
    /**  @var \RO\Cmd\ItemInfo[]  */
    public $strengthlv2cost = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.EquipData');

      // OPTIONAL UINT32 strengthlv = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "strengthlv";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 refinelv = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "refinelv";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 strengthCost = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "strengthCost";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // REPEATED MESSAGE refineCompose = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "refineCompose";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\RefineCompose';
      $descriptor->addField($f);

      // OPTIONAL UINT32 cardslot = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "cardslot";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // REPEATED UINT32 buffid = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "buffid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL BOOL damage = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "damage";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = false;
      $descriptor->addField($f);

      // OPTIONAL UINT32 lv = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "lv";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 color = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "color";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 breakstarttime = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "breakstarttime";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 breakendtime = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "breakendtime";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 strengthlv2 = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "strengthlv2";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // REPEATED MESSAGE strengthlv2cost = 13
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 13;
      $f->name      = "strengthlv2cost";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\ItemInfo';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <strengthlv> has a value
     *
     * @return boolean
     */
    public function hasStrengthlv(){
      return $this->_has(1);
    }
    
    /**
     * Clear <strengthlv> value
     *
     * @return \RO\Cmd\EquipData
     */
    public function clearStrengthlv(){
      return $this->_clear(1);
    }
    
    /**
     * Get <strengthlv> value
     *
     * @return int
     */
    public function getStrengthlv(){
      return $this->_get(1);
    }
    
    /**
     * Set <strengthlv> value
     *
     * @param int $value
     * @return \RO\Cmd\EquipData
     */
    public function setStrengthlv( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <refinelv> has a value
     *
     * @return boolean
     */
    public function hasRefinelv(){
      return $this->_has(2);
    }
    
    /**
     * Clear <refinelv> value
     *
     * @return \RO\Cmd\EquipData
     */
    public function clearRefinelv(){
      return $this->_clear(2);
    }
    
    /**
     * Get <refinelv> value
     *
     * @return int
     */
    public function getRefinelv(){
      return $this->_get(2);
    }
    
    /**
     * Set <refinelv> value
     *
     * @param int $value
     * @return \RO\Cmd\EquipData
     */
    public function setRefinelv( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <strengthCost> has a value
     *
     * @return boolean
     */
    public function hasStrengthCost(){
      return $this->_has(3);
    }
    
    /**
     * Clear <strengthCost> value
     *
     * @return \RO\Cmd\EquipData
     */
    public function clearStrengthCost(){
      return $this->_clear(3);
    }
    
    /**
     * Get <strengthCost> value
     *
     * @return int
     */
    public function getStrengthCost(){
      return $this->_get(3);
    }
    
    /**
     * Set <strengthCost> value
     *
     * @param int $value
     * @return \RO\Cmd\EquipData
     */
    public function setStrengthCost( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <refineCompose> has a value
     *
     * @return boolean
     */
    public function hasRefineCompose(){
      return $this->_has(4);
    }
    
    /**
     * Clear <refineCompose> value
     *
     * @return \RO\Cmd\EquipData
     */
    public function clearRefineCompose(){
      return $this->_clear(4);
    }
    
    /**
     * Get <refineCompose> value
     *
     * @param int $idx
     * @return \RO\Cmd\RefineCompose
     */
    public function getRefineCompose($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <refineCompose> value
     *
     * @param \RO\Cmd\RefineCompose $value
     * @return \RO\Cmd\EquipData
     */
    public function setRefineCompose(\RO\Cmd\RefineCompose $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <refineCompose>
     *
     * @return \RO\Cmd\RefineCompose[]
     */
    public function getRefineComposeList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <refineCompose>
     *
     * @param \RO\Cmd\RefineCompose $value
     * @return \RO\Cmd\EquipData
     */
    public function addRefineCompose(\RO\Cmd\RefineCompose $value){
     return $this->_add(4, $value);
    }
    
    /**
     * Check if <cardslot> has a value
     *
     * @return boolean
     */
    public function hasCardslot(){
      return $this->_has(5);
    }
    
    /**
     * Clear <cardslot> value
     *
     * @return \RO\Cmd\EquipData
     */
    public function clearCardslot(){
      return $this->_clear(5);
    }
    
    /**
     * Get <cardslot> value
     *
     * @return int
     */
    public function getCardslot(){
      return $this->_get(5);
    }
    
    /**
     * Set <cardslot> value
     *
     * @param int $value
     * @return \RO\Cmd\EquipData
     */
    public function setCardslot( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <buffid> has a value
     *
     * @return boolean
     */
    public function hasBuffid(){
      return $this->_has(6);
    }
    
    /**
     * Clear <buffid> value
     *
     * @return \RO\Cmd\EquipData
     */
    public function clearBuffid(){
      return $this->_clear(6);
    }
    
    /**
     * Get <buffid> value
     *
     * @param int $idx
     * @return int
     */
    public function getBuffid($idx = NULL){
      return $this->_get(6, $idx);
    }
    
    /**
     * Set <buffid> value
     *
     * @param int $value
     * @return \RO\Cmd\EquipData
     */
    public function setBuffid( $value, $idx = NULL){
      return $this->_set(6, $value, $idx);
    }
    
    /**
     * Get all elements of <buffid>
     *
     * @return int[]
     */
    public function getBuffidList(){
     return $this->_get(6);
    }
    
    /**
     * Add a new element to <buffid>
     *
     * @param int $value
     * @return \RO\Cmd\EquipData
     */
    public function addBuffid( $value){
     return $this->_add(6, $value);
    }
    
    /**
     * Check if <damage> has a value
     *
     * @return boolean
     */
    public function hasDamage(){
      return $this->_has(7);
    }
    
    /**
     * Clear <damage> value
     *
     * @return \RO\Cmd\EquipData
     */
    public function clearDamage(){
      return $this->_clear(7);
    }
    
    /**
     * Get <damage> value
     *
     * @return boolean
     */
    public function getDamage(){
      return $this->_get(7);
    }
    
    /**
     * Set <damage> value
     *
     * @param boolean $value
     * @return \RO\Cmd\EquipData
     */
    public function setDamage( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <lv> has a value
     *
     * @return boolean
     */
    public function hasLv(){
      return $this->_has(8);
    }
    
    /**
     * Clear <lv> value
     *
     * @return \RO\Cmd\EquipData
     */
    public function clearLv(){
      return $this->_clear(8);
    }
    
    /**
     * Get <lv> value
     *
     * @return int
     */
    public function getLv(){
      return $this->_get(8);
    }
    
    /**
     * Set <lv> value
     *
     * @param int $value
     * @return \RO\Cmd\EquipData
     */
    public function setLv( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <color> has a value
     *
     * @return boolean
     */
    public function hasColor(){
      return $this->_has(9);
    }
    
    /**
     * Clear <color> value
     *
     * @return \RO\Cmd\EquipData
     */
    public function clearColor(){
      return $this->_clear(9);
    }
    
    /**
     * Get <color> value
     *
     * @return int
     */
    public function getColor(){
      return $this->_get(9);
    }
    
    /**
     * Set <color> value
     *
     * @param int $value
     * @return \RO\Cmd\EquipData
     */
    public function setColor( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <breakstarttime> has a value
     *
     * @return boolean
     */
    public function hasBreakstarttime(){
      return $this->_has(10);
    }
    
    /**
     * Clear <breakstarttime> value
     *
     * @return \RO\Cmd\EquipData
     */
    public function clearBreakstarttime(){
      return $this->_clear(10);
    }
    
    /**
     * Get <breakstarttime> value
     *
     * @return int
     */
    public function getBreakstarttime(){
      return $this->_get(10);
    }
    
    /**
     * Set <breakstarttime> value
     *
     * @param int $value
     * @return \RO\Cmd\EquipData
     */
    public function setBreakstarttime( $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <breakendtime> has a value
     *
     * @return boolean
     */
    public function hasBreakendtime(){
      return $this->_has(11);
    }
    
    /**
     * Clear <breakendtime> value
     *
     * @return \RO\Cmd\EquipData
     */
    public function clearBreakendtime(){
      return $this->_clear(11);
    }
    
    /**
     * Get <breakendtime> value
     *
     * @return int
     */
    public function getBreakendtime(){
      return $this->_get(11);
    }
    
    /**
     * Set <breakendtime> value
     *
     * @param int $value
     * @return \RO\Cmd\EquipData
     */
    public function setBreakendtime( $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <strengthlv2> has a value
     *
     * @return boolean
     */
    public function hasStrengthlv2(){
      return $this->_has(12);
    }
    
    /**
     * Clear <strengthlv2> value
     *
     * @return \RO\Cmd\EquipData
     */
    public function clearStrengthlv2(){
      return $this->_clear(12);
    }
    
    /**
     * Get <strengthlv2> value
     *
     * @return int
     */
    public function getStrengthlv2(){
      return $this->_get(12);
    }
    
    /**
     * Set <strengthlv2> value
     *
     * @param int $value
     * @return \RO\Cmd\EquipData
     */
    public function setStrengthlv2( $value){
      return $this->_set(12, $value);
    }
    
    /**
     * Check if <strengthlv2cost> has a value
     *
     * @return boolean
     */
    public function hasStrengthlv2cost(){
      return $this->_has(13);
    }
    
    /**
     * Clear <strengthlv2cost> value
     *
     * @return \RO\Cmd\EquipData
     */
    public function clearStrengthlv2cost(){
      return $this->_clear(13);
    }
    
    /**
     * Get <strengthlv2cost> value
     *
     * @param int $idx
     * @return \RO\Cmd\ItemInfo
     */
    public function getStrengthlv2cost($idx = NULL){
      return $this->_get(13, $idx);
    }
    
    /**
     * Set <strengthlv2cost> value
     *
     * @param \RO\Cmd\ItemInfo $value
     * @return \RO\Cmd\EquipData
     */
    public function setStrengthlv2cost(\RO\Cmd\ItemInfo $value, $idx = NULL){
      return $this->_set(13, $value, $idx);
    }
    
    /**
     * Get all elements of <strengthlv2cost>
     *
     * @return \RO\Cmd\ItemInfo[]
     */
    public function getStrengthlv2costList(){
     return $this->_get(13);
    }
    
    /**
     * Add a new element to <strengthlv2cost>
     *
     * @param \RO\Cmd\ItemInfo $value
     * @return \RO\Cmd\EquipData
     */
    public function addStrengthlv2cost(\RO\Cmd\ItemInfo $value){
     return $this->_add(13, $value);
    }
  }
}

