<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: TeamCmd.proto

namespace RO\Cmd {

  class TeamInfo extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $teamid = 0;
    
    /**  @var int */
    public $leaderid = 0;
    
    /**  @var int */
    public $pickupmode = 0;
    
    /**  @var \RO\Cmd\TeamMemberInfo[]  */
    public $member = array();
    
    /**  @var string */
    public $name = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.TeamInfo');

      // OPTIONAL UINT64 teamid = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "teamid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT64 leaderid = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "leaderid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 pickupmode = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "pickupmode";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // REPEATED MESSAGE member = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "member";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\TeamMemberInfo';
      $descriptor->addField($f);

      // OPTIONAL STRING name = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <teamid> has a value
     *
     * @return boolean
     */
    public function hasTeamid(){
      return $this->_has(1);
    }
    
    /**
     * Clear <teamid> value
     *
     * @return \RO\Cmd\TeamInfo
     */
    public function clearTeamid(){
      return $this->_clear(1);
    }
    
    /**
     * Get <teamid> value
     *
     * @return int
     */
    public function getTeamid(){
      return $this->_get(1);
    }
    
    /**
     * Set <teamid> value
     *
     * @param int $value
     * @return \RO\Cmd\TeamInfo
     */
    public function setTeamid( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <leaderid> has a value
     *
     * @return boolean
     */
    public function hasLeaderid(){
      return $this->_has(2);
    }
    
    /**
     * Clear <leaderid> value
     *
     * @return \RO\Cmd\TeamInfo
     */
    public function clearLeaderid(){
      return $this->_clear(2);
    }
    
    /**
     * Get <leaderid> value
     *
     * @return int
     */
    public function getLeaderid(){
      return $this->_get(2);
    }
    
    /**
     * Set <leaderid> value
     *
     * @param int $value
     * @return \RO\Cmd\TeamInfo
     */
    public function setLeaderid( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <pickupmode> has a value
     *
     * @return boolean
     */
    public function hasPickupmode(){
      return $this->_has(3);
    }
    
    /**
     * Clear <pickupmode> value
     *
     * @return \RO\Cmd\TeamInfo
     */
    public function clearPickupmode(){
      return $this->_clear(3);
    }
    
    /**
     * Get <pickupmode> value
     *
     * @return int
     */
    public function getPickupmode(){
      return $this->_get(3);
    }
    
    /**
     * Set <pickupmode> value
     *
     * @param int $value
     * @return \RO\Cmd\TeamInfo
     */
    public function setPickupmode( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <member> has a value
     *
     * @return boolean
     */
    public function hasMember(){
      return $this->_has(4);
    }
    
    /**
     * Clear <member> value
     *
     * @return \RO\Cmd\TeamInfo
     */
    public function clearMember(){
      return $this->_clear(4);
    }
    
    /**
     * Get <member> value
     *
     * @param int $idx
     * @return \RO\Cmd\TeamMemberInfo
     */
    public function getMember($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <member> value
     *
     * @param \RO\Cmd\TeamMemberInfo $value
     * @return \RO\Cmd\TeamInfo
     */
    public function setMember(\RO\Cmd\TeamMemberInfo $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <member>
     *
     * @return \RO\Cmd\TeamMemberInfo[]
     */
    public function getMemberList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <member>
     *
     * @param \RO\Cmd\TeamMemberInfo $value
     * @return \RO\Cmd\TeamInfo
     */
    public function addMember(\RO\Cmd\TeamMemberInfo $value){
     return $this->_add(4, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(5);
    }
    
    /**
     * Clear <name> value
     *
     * @return \RO\Cmd\TeamInfo
     */
    public function clearName(){
      return $this->_clear(5);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(5);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \RO\Cmd\TeamInfo
     */
    public function setName( $value){
      return $this->_set(5, $value);
    }
  }
}

