<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: WeddingCCmd.proto

namespace RO\Cmd {

  class ReplyReserveWeddingDateCCmd extends \DrSlump\Protobuf\Message {

    /**  @var int - \RO\Cmd\Command */
    public $cmd = \RO\Cmd\Command::WEDDINGC_PROTOCMD;
    
    /**  @var int - \RO\Cmd\WeddingCParam */
    public $param = \RO\Cmd\WeddingCParam::WEDDINGCPARAM_REPLY_RESERVE_WEDDINGDATE;
    
    /**  @var int */
    public $date = null;
    
    /**  @var int */
    public $configid = null;
    
    /**  @var int */
    public $charid1 = null;
    
    /**  @var int - \RO\Cmd\EReply */
    public $reply = null;
    
    /**  @var int */
    public $time = null;
    
    /**  @var boolean */
    public $use_ticket = null;
    
    /**  @var int */
    public $zoneid = null;
    
    /**  @var string */
    public $sign = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.ReplyReserveWeddingDateCCmd');

      // OPTIONAL ENUM cmd = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "cmd";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\Command';
      $f->default   = \RO\Cmd\Command::WEDDINGC_PROTOCMD;
      $descriptor->addField($f);

      // OPTIONAL ENUM param = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "param";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\WeddingCParam';
      $f->default   = \RO\Cmd\WeddingCParam::WEDDINGCPARAM_REPLY_RESERVE_WEDDINGDATE;
      $descriptor->addField($f);

      // OPTIONAL UINT32 date = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "date";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 configid = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "configid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT64 charid1 = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "charid1";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM reply = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "reply";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\EReply';
      $descriptor->addField($f);

      // OPTIONAL UINT32 time = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "time";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL use_ticket = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "use_ticket";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 zoneid = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "zoneid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING sign = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "sign";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <cmd> has a value
     *
     * @return boolean
     */
    public function hasCmd(){
      return $this->_has(1);
    }
    
    /**
     * Clear <cmd> value
     *
     * @return \RO\Cmd\ReplyReserveWeddingDateCCmd
     */
    public function clearCmd(){
      return $this->_clear(1);
    }
    
    /**
     * Get <cmd> value
     *
     * @return int - \RO\Cmd\Command
     */
    public function getCmd(){
      return $this->_get(1);
    }
    
    /**
     * Set <cmd> value
     *
     * @param int - \RO\Cmd\Command $value
     * @return \RO\Cmd\ReplyReserveWeddingDateCCmd
     */
    public function setCmd( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <param> has a value
     *
     * @return boolean
     */
    public function hasParam(){
      return $this->_has(2);
    }
    
    /**
     * Clear <param> value
     *
     * @return \RO\Cmd\ReplyReserveWeddingDateCCmd
     */
    public function clearParam(){
      return $this->_clear(2);
    }
    
    /**
     * Get <param> value
     *
     * @return int - \RO\Cmd\WeddingCParam
     */
    public function getParam(){
      return $this->_get(2);
    }
    
    /**
     * Set <param> value
     *
     * @param int - \RO\Cmd\WeddingCParam $value
     * @return \RO\Cmd\ReplyReserveWeddingDateCCmd
     */
    public function setParam( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <date> has a value
     *
     * @return boolean
     */
    public function hasDate(){
      return $this->_has(3);
    }
    
    /**
     * Clear <date> value
     *
     * @return \RO\Cmd\ReplyReserveWeddingDateCCmd
     */
    public function clearDate(){
      return $this->_clear(3);
    }
    
    /**
     * Get <date> value
     *
     * @return int
     */
    public function getDate(){
      return $this->_get(3);
    }
    
    /**
     * Set <date> value
     *
     * @param int $value
     * @return \RO\Cmd\ReplyReserveWeddingDateCCmd
     */
    public function setDate( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <configid> has a value
     *
     * @return boolean
     */
    public function hasConfigid(){
      return $this->_has(4);
    }
    
    /**
     * Clear <configid> value
     *
     * @return \RO\Cmd\ReplyReserveWeddingDateCCmd
     */
    public function clearConfigid(){
      return $this->_clear(4);
    }
    
    /**
     * Get <configid> value
     *
     * @return int
     */
    public function getConfigid(){
      return $this->_get(4);
    }
    
    /**
     * Set <configid> value
     *
     * @param int $value
     * @return \RO\Cmd\ReplyReserveWeddingDateCCmd
     */
    public function setConfigid( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <charid1> has a value
     *
     * @return boolean
     */
    public function hasCharid1(){
      return $this->_has(5);
    }
    
    /**
     * Clear <charid1> value
     *
     * @return \RO\Cmd\ReplyReserveWeddingDateCCmd
     */
    public function clearCharid1(){
      return $this->_clear(5);
    }
    
    /**
     * Get <charid1> value
     *
     * @return int
     */
    public function getCharid1(){
      return $this->_get(5);
    }
    
    /**
     * Set <charid1> value
     *
     * @param int $value
     * @return \RO\Cmd\ReplyReserveWeddingDateCCmd
     */
    public function setCharid1( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <reply> has a value
     *
     * @return boolean
     */
    public function hasReply(){
      return $this->_has(6);
    }
    
    /**
     * Clear <reply> value
     *
     * @return \RO\Cmd\ReplyReserveWeddingDateCCmd
     */
    public function clearReply(){
      return $this->_clear(6);
    }
    
    /**
     * Get <reply> value
     *
     * @return int - \RO\Cmd\EReply
     */
    public function getReply(){
      return $this->_get(6);
    }
    
    /**
     * Set <reply> value
     *
     * @param int - \RO\Cmd\EReply $value
     * @return \RO\Cmd\ReplyReserveWeddingDateCCmd
     */
    public function setReply( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <time> has a value
     *
     * @return boolean
     */
    public function hasTime(){
      return $this->_has(7);
    }
    
    /**
     * Clear <time> value
     *
     * @return \RO\Cmd\ReplyReserveWeddingDateCCmd
     */
    public function clearTime(){
      return $this->_clear(7);
    }
    
    /**
     * Get <time> value
     *
     * @return int
     */
    public function getTime(){
      return $this->_get(7);
    }
    
    /**
     * Set <time> value
     *
     * @param int $value
     * @return \RO\Cmd\ReplyReserveWeddingDateCCmd
     */
    public function setTime( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <use_ticket> has a value
     *
     * @return boolean
     */
    public function hasUseTicket(){
      return $this->_has(8);
    }
    
    /**
     * Clear <use_ticket> value
     *
     * @return \RO\Cmd\ReplyReserveWeddingDateCCmd
     */
    public function clearUseTicket(){
      return $this->_clear(8);
    }
    
    /**
     * Get <use_ticket> value
     *
     * @return boolean
     */
    public function getUseTicket(){
      return $this->_get(8);
    }
    
    /**
     * Set <use_ticket> value
     *
     * @param boolean $value
     * @return \RO\Cmd\ReplyReserveWeddingDateCCmd
     */
    public function setUseTicket( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <zoneid> has a value
     *
     * @return boolean
     */
    public function hasZoneid(){
      return $this->_has(9);
    }
    
    /**
     * Clear <zoneid> value
     *
     * @return \RO\Cmd\ReplyReserveWeddingDateCCmd
     */
    public function clearZoneid(){
      return $this->_clear(9);
    }
    
    /**
     * Get <zoneid> value
     *
     * @return int
     */
    public function getZoneid(){
      return $this->_get(9);
    }
    
    /**
     * Set <zoneid> value
     *
     * @param int $value
     * @return \RO\Cmd\ReplyReserveWeddingDateCCmd
     */
    public function setZoneid( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <sign> has a value
     *
     * @return boolean
     */
    public function hasSign(){
      return $this->_has(10);
    }
    
    /**
     * Clear <sign> value
     *
     * @return \RO\Cmd\ReplyReserveWeddingDateCCmd
     */
    public function clearSign(){
      return $this->_clear(10);
    }
    
    /**
     * Get <sign> value
     *
     * @return string
     */
    public function getSign(){
      return $this->_get(10);
    }
    
    /**
     * Set <sign> value
     *
     * @param string $value
     * @return \RO\Cmd\ReplyReserveWeddingDateCCmd
     */
    public function setSign( $value){
      return $this->_set(10, $value);
    }
  }
}

