<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: GuildCmd.proto

namespace RO\Cmd {

  class GuildMemberPray extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $pray = 0;
    
    /**  @var int */
    public $lv = 0;
    
    /**  @var \RO\Cmd\GuildPrayCFG */
    public $cur = null;
    
    /**  @var \RO\Cmd\GuildPrayCFG */
    public $next = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.GuildMemberPray');

      // OPTIONAL UINT32 pray = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "pray";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 lv = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "lv";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE cur = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "cur";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\GuildPrayCFG';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE next = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "next";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\GuildPrayCFG';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <pray> has a value
     *
     * @return boolean
     */
    public function hasPray(){
      return $this->_has(1);
    }
    
    /**
     * Clear <pray> value
     *
     * @return \RO\Cmd\GuildMemberPray
     */
    public function clearPray(){
      return $this->_clear(1);
    }
    
    /**
     * Get <pray> value
     *
     * @return int
     */
    public function getPray(){
      return $this->_get(1);
    }
    
    /**
     * Set <pray> value
     *
     * @param int $value
     * @return \RO\Cmd\GuildMemberPray
     */
    public function setPray( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <lv> has a value
     *
     * @return boolean
     */
    public function hasLv(){
      return $this->_has(2);
    }
    
    /**
     * Clear <lv> value
     *
     * @return \RO\Cmd\GuildMemberPray
     */
    public function clearLv(){
      return $this->_clear(2);
    }
    
    /**
     * Get <lv> value
     *
     * @return int
     */
    public function getLv(){
      return $this->_get(2);
    }
    
    /**
     * Set <lv> value
     *
     * @param int $value
     * @return \RO\Cmd\GuildMemberPray
     */
    public function setLv( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <cur> has a value
     *
     * @return boolean
     */
    public function hasCur(){
      return $this->_has(3);
    }
    
    /**
     * Clear <cur> value
     *
     * @return \RO\Cmd\GuildMemberPray
     */
    public function clearCur(){
      return $this->_clear(3);
    }
    
    /**
     * Get <cur> value
     *
     * @return \RO\Cmd\GuildPrayCFG
     */
    public function getCur(){
      return $this->_get(3);
    }
    
    /**
     * Set <cur> value
     *
     * @param \RO\Cmd\GuildPrayCFG $value
     * @return \RO\Cmd\GuildMemberPray
     */
    public function setCur(\RO\Cmd\GuildPrayCFG $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <next> has a value
     *
     * @return boolean
     */
    public function hasNext(){
      return $this->_has(4);
    }
    
    /**
     * Clear <next> value
     *
     * @return \RO\Cmd\GuildMemberPray
     */
    public function clearNext(){
      return $this->_clear(4);
    }
    
    /**
     * Get <next> value
     *
     * @return \RO\Cmd\GuildPrayCFG
     */
    public function getNext(){
      return $this->_get(4);
    }
    
    /**
     * Set <next> value
     *
     * @param \RO\Cmd\GuildPrayCFG $value
     * @return \RO\Cmd\GuildMemberPray
     */
    public function setNext(\RO\Cmd\GuildPrayCFG $value){
      return $this->_set(4, $value);
    }
  }
}

