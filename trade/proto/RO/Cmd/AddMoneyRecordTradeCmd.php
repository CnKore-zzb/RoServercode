<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: SceneTrade.proto

namespace RO\Cmd {

  class AddMoneyRecordTradeCmd extends \DrSlump\Protobuf\Message {

    /**  @var int - \RO\Cmd\Command */
    public $cmd = \RO\Cmd\Command::TRADE_PROTOCMD;
    
    /**  @var int - \RO\Cmd\RecordServerTradeParam */
    public $param = \RO\Cmd\RecordServerTradeParam::ADD_MONEY_RECORDTRADE;
    
    /**  @var int */
    public $money_type = null;
    
    /**  @var int */
    public $total_money = null;
    
    /**  @var int */
    public $charid = null;
    
    /**  @var int */
    public $itemid = null;
    
    /**  @var int */
    public $count = null;
    
    /**  @var int */
    public $price = null;
    
    /**  @var int - \RO\Cmd\EOperType */
    public $type = null;
    
    /**  @var int */
    public $money2 = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.AddMoneyRecordTradeCmd');

      // OPTIONAL ENUM cmd = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "cmd";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\Command';
      $f->default   = \RO\Cmd\Command::TRADE_PROTOCMD;
      $descriptor->addField($f);

      // OPTIONAL ENUM param = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "param";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\RecordServerTradeParam';
      $f->default   = \RO\Cmd\RecordServerTradeParam::ADD_MONEY_RECORDTRADE;
      $descriptor->addField($f);

      // OPTIONAL UINT32 money_type = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "money_type";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 total_money = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "total_money";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT64 charid = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "charid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 itemid = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "itemid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 count = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "count";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 price = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "price";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM type = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\EOperType';
      $descriptor->addField($f);

      // OPTIONAL UINT32 money2 = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "money2";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <cmd> has a value
     *
     * @return boolean
     */
    public function hasCmd(){
      return $this->_has(1);
    }
    
    /**
     * Clear <cmd> value
     *
     * @return \RO\Cmd\AddMoneyRecordTradeCmd
     */
    public function clearCmd(){
      return $this->_clear(1);
    }
    
    /**
     * Get <cmd> value
     *
     * @return int - \RO\Cmd\Command
     */
    public function getCmd(){
      return $this->_get(1);
    }
    
    /**
     * Set <cmd> value
     *
     * @param int - \RO\Cmd\Command $value
     * @return \RO\Cmd\AddMoneyRecordTradeCmd
     */
    public function setCmd( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <param> has a value
     *
     * @return boolean
     */
    public function hasParam(){
      return $this->_has(2);
    }
    
    /**
     * Clear <param> value
     *
     * @return \RO\Cmd\AddMoneyRecordTradeCmd
     */
    public function clearParam(){
      return $this->_clear(2);
    }
    
    /**
     * Get <param> value
     *
     * @return int - \RO\Cmd\RecordServerTradeParam
     */
    public function getParam(){
      return $this->_get(2);
    }
    
    /**
     * Set <param> value
     *
     * @param int - \RO\Cmd\RecordServerTradeParam $value
     * @return \RO\Cmd\AddMoneyRecordTradeCmd
     */
    public function setParam( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <money_type> has a value
     *
     * @return boolean
     */
    public function hasMoneyType(){
      return $this->_has(3);
    }
    
    /**
     * Clear <money_type> value
     *
     * @return \RO\Cmd\AddMoneyRecordTradeCmd
     */
    public function clearMoneyType(){
      return $this->_clear(3);
    }
    
    /**
     * Get <money_type> value
     *
     * @return int
     */
    public function getMoneyType(){
      return $this->_get(3);
    }
    
    /**
     * Set <money_type> value
     *
     * @param int $value
     * @return \RO\Cmd\AddMoneyRecordTradeCmd
     */
    public function setMoneyType( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <total_money> has a value
     *
     * @return boolean
     */
    public function hasTotalMoney(){
      return $this->_has(4);
    }
    
    /**
     * Clear <total_money> value
     *
     * @return \RO\Cmd\AddMoneyRecordTradeCmd
     */
    public function clearTotalMoney(){
      return $this->_clear(4);
    }
    
    /**
     * Get <total_money> value
     *
     * @return int
     */
    public function getTotalMoney(){
      return $this->_get(4);
    }
    
    /**
     * Set <total_money> value
     *
     * @param int $value
     * @return \RO\Cmd\AddMoneyRecordTradeCmd
     */
    public function setTotalMoney( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <charid> has a value
     *
     * @return boolean
     */
    public function hasCharid(){
      return $this->_has(5);
    }
    
    /**
     * Clear <charid> value
     *
     * @return \RO\Cmd\AddMoneyRecordTradeCmd
     */
    public function clearCharid(){
      return $this->_clear(5);
    }
    
    /**
     * Get <charid> value
     *
     * @return int
     */
    public function getCharid(){
      return $this->_get(5);
    }
    
    /**
     * Set <charid> value
     *
     * @param int $value
     * @return \RO\Cmd\AddMoneyRecordTradeCmd
     */
    public function setCharid( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <itemid> has a value
     *
     * @return boolean
     */
    public function hasItemid(){
      return $this->_has(6);
    }
    
    /**
     * Clear <itemid> value
     *
     * @return \RO\Cmd\AddMoneyRecordTradeCmd
     */
    public function clearItemid(){
      return $this->_clear(6);
    }
    
    /**
     * Get <itemid> value
     *
     * @return int
     */
    public function getItemid(){
      return $this->_get(6);
    }
    
    /**
     * Set <itemid> value
     *
     * @param int $value
     * @return \RO\Cmd\AddMoneyRecordTradeCmd
     */
    public function setItemid( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <count> has a value
     *
     * @return boolean
     */
    public function hasCount(){
      return $this->_has(7);
    }
    
    /**
     * Clear <count> value
     *
     * @return \RO\Cmd\AddMoneyRecordTradeCmd
     */
    public function clearCount(){
      return $this->_clear(7);
    }
    
    /**
     * Get <count> value
     *
     * @return int
     */
    public function getCount(){
      return $this->_get(7);
    }
    
    /**
     * Set <count> value
     *
     * @param int $value
     * @return \RO\Cmd\AddMoneyRecordTradeCmd
     */
    public function setCount( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <price> has a value
     *
     * @return boolean
     */
    public function hasPrice(){
      return $this->_has(8);
    }
    
    /**
     * Clear <price> value
     *
     * @return \RO\Cmd\AddMoneyRecordTradeCmd
     */
    public function clearPrice(){
      return $this->_clear(8);
    }
    
    /**
     * Get <price> value
     *
     * @return int
     */
    public function getPrice(){
      return $this->_get(8);
    }
    
    /**
     * Set <price> value
     *
     * @param int $value
     * @return \RO\Cmd\AddMoneyRecordTradeCmd
     */
    public function setPrice( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(9);
    }
    
    /**
     * Clear <type> value
     *
     * @return \RO\Cmd\AddMoneyRecordTradeCmd
     */
    public function clearType(){
      return $this->_clear(9);
    }
    
    /**
     * Get <type> value
     *
     * @return int - \RO\Cmd\EOperType
     */
    public function getType(){
      return $this->_get(9);
    }
    
    /**
     * Set <type> value
     *
     * @param int - \RO\Cmd\EOperType $value
     * @return \RO\Cmd\AddMoneyRecordTradeCmd
     */
    public function setType( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <money2> has a value
     *
     * @return boolean
     */
    public function hasMoney2(){
      return $this->_has(10);
    }
    
    /**
     * Clear <money2> value
     *
     * @return \RO\Cmd\AddMoneyRecordTradeCmd
     */
    public function clearMoney2(){
      return $this->_clear(10);
    }
    
    /**
     * Get <money2> value
     *
     * @return int
     */
    public function getMoney2(){
      return $this->_get(10);
    }
    
    /**
     * Set <money2> value
     *
     * @param int $value
     * @return \RO\Cmd\AddMoneyRecordTradeCmd
     */
    public function setMoney2( $value){
      return $this->_set(10, $value);
    }
  }
}

