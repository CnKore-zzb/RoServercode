<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: SessionCmd.proto

namespace RO\Cmd {

  class SetTeamSeal extends \DrSlump\Protobuf\Message {

    /**  @var int - \RO\Cmd\Command */
    public $cmd = \RO\Cmd\Command::SESSION_PROTOCMD;
    
    /**  @var int - \RO\Cmd\SessionParam */
    public $param = \RO\Cmd\SessionParam::CMDPARAM_SET_SEAL;
    
    /**  @var int */
    public $sealid = 0;
    
    /**  @var int */
    public $teamid = 0;
    
    /**  @var int */
    public $mapid = 0;
    
    /**  @var int - \RO\Cmd\ESetSealStatus */
    public $estatus = \RO\Cmd\ESetSealStatus::ESETSEALSTATUS_MIN;
    
    /**  @var \RO\Cmd\ScenePos */
    public $pos = null;
    
    /**  @var int */
    public $leaderid = 0;
    
    /**  @var int[]  */
    public $teamers = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.SetTeamSeal');

      // OPTIONAL ENUM cmd = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "cmd";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\Command';
      $f->default   = \RO\Cmd\Command::SESSION_PROTOCMD;
      $descriptor->addField($f);

      // OPTIONAL ENUM param = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "param";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\SessionParam';
      $f->default   = \RO\Cmd\SessionParam::CMDPARAM_SET_SEAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 sealid = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "sealid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT64 teamid = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "teamid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 mapid = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "mapid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL ENUM estatus = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "estatus";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\ESetSealStatus';
      $f->default   = \RO\Cmd\ESetSealStatus::ESETSEALSTATUS_MIN;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE pos = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "pos";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\ScenePos';
      $descriptor->addField($f);

      // OPTIONAL UINT64 leaderid = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "leaderid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // REPEATED UINT64 teamers = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "teamers";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <cmd> has a value
     *
     * @return boolean
     */
    public function hasCmd(){
      return $this->_has(1);
    }
    
    /**
     * Clear <cmd> value
     *
     * @return \RO\Cmd\SetTeamSeal
     */
    public function clearCmd(){
      return $this->_clear(1);
    }
    
    /**
     * Get <cmd> value
     *
     * @return int - \RO\Cmd\Command
     */
    public function getCmd(){
      return $this->_get(1);
    }
    
    /**
     * Set <cmd> value
     *
     * @param int - \RO\Cmd\Command $value
     * @return \RO\Cmd\SetTeamSeal
     */
    public function setCmd( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <param> has a value
     *
     * @return boolean
     */
    public function hasParam(){
      return $this->_has(2);
    }
    
    /**
     * Clear <param> value
     *
     * @return \RO\Cmd\SetTeamSeal
     */
    public function clearParam(){
      return $this->_clear(2);
    }
    
    /**
     * Get <param> value
     *
     * @return int - \RO\Cmd\SessionParam
     */
    public function getParam(){
      return $this->_get(2);
    }
    
    /**
     * Set <param> value
     *
     * @param int - \RO\Cmd\SessionParam $value
     * @return \RO\Cmd\SetTeamSeal
     */
    public function setParam( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <sealid> has a value
     *
     * @return boolean
     */
    public function hasSealid(){
      return $this->_has(3);
    }
    
    /**
     * Clear <sealid> value
     *
     * @return \RO\Cmd\SetTeamSeal
     */
    public function clearSealid(){
      return $this->_clear(3);
    }
    
    /**
     * Get <sealid> value
     *
     * @return int
     */
    public function getSealid(){
      return $this->_get(3);
    }
    
    /**
     * Set <sealid> value
     *
     * @param int $value
     * @return \RO\Cmd\SetTeamSeal
     */
    public function setSealid( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <teamid> has a value
     *
     * @return boolean
     */
    public function hasTeamid(){
      return $this->_has(4);
    }
    
    /**
     * Clear <teamid> value
     *
     * @return \RO\Cmd\SetTeamSeal
     */
    public function clearTeamid(){
      return $this->_clear(4);
    }
    
    /**
     * Get <teamid> value
     *
     * @return int
     */
    public function getTeamid(){
      return $this->_get(4);
    }
    
    /**
     * Set <teamid> value
     *
     * @param int $value
     * @return \RO\Cmd\SetTeamSeal
     */
    public function setTeamid( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <mapid> has a value
     *
     * @return boolean
     */
    public function hasMapid(){
      return $this->_has(5);
    }
    
    /**
     * Clear <mapid> value
     *
     * @return \RO\Cmd\SetTeamSeal
     */
    public function clearMapid(){
      return $this->_clear(5);
    }
    
    /**
     * Get <mapid> value
     *
     * @return int
     */
    public function getMapid(){
      return $this->_get(5);
    }
    
    /**
     * Set <mapid> value
     *
     * @param int $value
     * @return \RO\Cmd\SetTeamSeal
     */
    public function setMapid( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <estatus> has a value
     *
     * @return boolean
     */
    public function hasEstatus(){
      return $this->_has(6);
    }
    
    /**
     * Clear <estatus> value
     *
     * @return \RO\Cmd\SetTeamSeal
     */
    public function clearEstatus(){
      return $this->_clear(6);
    }
    
    /**
     * Get <estatus> value
     *
     * @return int - \RO\Cmd\ESetSealStatus
     */
    public function getEstatus(){
      return $this->_get(6);
    }
    
    /**
     * Set <estatus> value
     *
     * @param int - \RO\Cmd\ESetSealStatus $value
     * @return \RO\Cmd\SetTeamSeal
     */
    public function setEstatus( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <pos> has a value
     *
     * @return boolean
     */
    public function hasPos(){
      return $this->_has(7);
    }
    
    /**
     * Clear <pos> value
     *
     * @return \RO\Cmd\SetTeamSeal
     */
    public function clearPos(){
      return $this->_clear(7);
    }
    
    /**
     * Get <pos> value
     *
     * @return \RO\Cmd\ScenePos
     */
    public function getPos(){
      return $this->_get(7);
    }
    
    /**
     * Set <pos> value
     *
     * @param \RO\Cmd\ScenePos $value
     * @return \RO\Cmd\SetTeamSeal
     */
    public function setPos(\RO\Cmd\ScenePos $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <leaderid> has a value
     *
     * @return boolean
     */
    public function hasLeaderid(){
      return $this->_has(8);
    }
    
    /**
     * Clear <leaderid> value
     *
     * @return \RO\Cmd\SetTeamSeal
     */
    public function clearLeaderid(){
      return $this->_clear(8);
    }
    
    /**
     * Get <leaderid> value
     *
     * @return int
     */
    public function getLeaderid(){
      return $this->_get(8);
    }
    
    /**
     * Set <leaderid> value
     *
     * @param int $value
     * @return \RO\Cmd\SetTeamSeal
     */
    public function setLeaderid( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <teamers> has a value
     *
     * @return boolean
     */
    public function hasTeamers(){
      return $this->_has(9);
    }
    
    /**
     * Clear <teamers> value
     *
     * @return \RO\Cmd\SetTeamSeal
     */
    public function clearTeamers(){
      return $this->_clear(9);
    }
    
    /**
     * Get <teamers> value
     *
     * @param int $idx
     * @return int
     */
    public function getTeamers($idx = NULL){
      return $this->_get(9, $idx);
    }
    
    /**
     * Set <teamers> value
     *
     * @param int $value
     * @return \RO\Cmd\SetTeamSeal
     */
    public function setTeamers( $value, $idx = NULL){
      return $this->_set(9, $value, $idx);
    }
    
    /**
     * Get all elements of <teamers>
     *
     * @return int[]
     */
    public function getTeamersList(){
     return $this->_get(9);
    }
    
    /**
     * Add a new element to <teamers>
     *
     * @param int $value
     * @return \RO\Cmd\SetTeamSeal
     */
    public function addTeamers( $value){
     return $this->_add(9, $value);
    }
  }
}

