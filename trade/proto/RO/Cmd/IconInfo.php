<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: GuildCmd.proto

namespace RO\Cmd {

  class IconInfo extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $index = null;
    
    /**  @var int - \RO\Cmd\EIconState */
    public $state = null;
    
    /**  @var int */
    public $time = null;
    
    /**  @var boolean */
    public $isread = true;
    
    /**  @var string */
    public $type = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.IconInfo');

      // OPTIONAL UINT32 index = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "index";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM state = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\EIconState';
      $descriptor->addField($f);

      // OPTIONAL UINT32 time = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "time";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL isread = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "isread";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = true;
      $descriptor->addField($f);

      // OPTIONAL STRING type = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <index> has a value
     *
     * @return boolean
     */
    public function hasIndex(){
      return $this->_has(1);
    }
    
    /**
     * Clear <index> value
     *
     * @return \RO\Cmd\IconInfo
     */
    public function clearIndex(){
      return $this->_clear(1);
    }
    
    /**
     * Get <index> value
     *
     * @return int
     */
    public function getIndex(){
      return $this->_get(1);
    }
    
    /**
     * Set <index> value
     *
     * @param int $value
     * @return \RO\Cmd\IconInfo
     */
    public function setIndex( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(2);
    }
    
    /**
     * Clear <state> value
     *
     * @return \RO\Cmd\IconInfo
     */
    public function clearState(){
      return $this->_clear(2);
    }
    
    /**
     * Get <state> value
     *
     * @return int - \RO\Cmd\EIconState
     */
    public function getState(){
      return $this->_get(2);
    }
    
    /**
     * Set <state> value
     *
     * @param int - \RO\Cmd\EIconState $value
     * @return \RO\Cmd\IconInfo
     */
    public function setState( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <time> has a value
     *
     * @return boolean
     */
    public function hasTime(){
      return $this->_has(3);
    }
    
    /**
     * Clear <time> value
     *
     * @return \RO\Cmd\IconInfo
     */
    public function clearTime(){
      return $this->_clear(3);
    }
    
    /**
     * Get <time> value
     *
     * @return int
     */
    public function getTime(){
      return $this->_get(3);
    }
    
    /**
     * Set <time> value
     *
     * @param int $value
     * @return \RO\Cmd\IconInfo
     */
    public function setTime( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <isread> has a value
     *
     * @return boolean
     */
    public function hasIsread(){
      return $this->_has(4);
    }
    
    /**
     * Clear <isread> value
     *
     * @return \RO\Cmd\IconInfo
     */
    public function clearIsread(){
      return $this->_clear(4);
    }
    
    /**
     * Get <isread> value
     *
     * @return boolean
     */
    public function getIsread(){
      return $this->_get(4);
    }
    
    /**
     * Set <isread> value
     *
     * @param boolean $value
     * @return \RO\Cmd\IconInfo
     */
    public function setIsread( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(5);
    }
    
    /**
     * Clear <type> value
     *
     * @return \RO\Cmd\IconInfo
     */
    public function clearType(){
      return $this->_clear(5);
    }
    
    /**
     * Get <type> value
     *
     * @return string
     */
    public function getType(){
      return $this->_get(5);
    }
    
    /**
     * Set <type> value
     *
     * @param string $value
     * @return \RO\Cmd\IconInfo
     */
    public function setType( $value){
      return $this->_set(5, $value);
    }
  }
}

