<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: SceneItem.proto

namespace RO\Cmd {

  class LoveLetterData extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $sendUserName = null;
    
    /**  @var string */
    public $bg = null;
    
    /**  @var int */
    public $configID = null;
    
    /**  @var string */
    public $content = null;
    
    /**  @var string */
    public $content2 = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.LoveLetterData');

      // OPTIONAL STRING sendUserName = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "sendUserName";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING bg = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "bg";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 configID = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "configID";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING content = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "content";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING content2 = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "content2";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <sendUserName> has a value
     *
     * @return boolean
     */
    public function hasSendUserName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <sendUserName> value
     *
     * @return \RO\Cmd\LoveLetterData
     */
    public function clearSendUserName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <sendUserName> value
     *
     * @return string
     */
    public function getSendUserName(){
      return $this->_get(1);
    }
    
    /**
     * Set <sendUserName> value
     *
     * @param string $value
     * @return \RO\Cmd\LoveLetterData
     */
    public function setSendUserName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <bg> has a value
     *
     * @return boolean
     */
    public function hasBg(){
      return $this->_has(2);
    }
    
    /**
     * Clear <bg> value
     *
     * @return \RO\Cmd\LoveLetterData
     */
    public function clearBg(){
      return $this->_clear(2);
    }
    
    /**
     * Get <bg> value
     *
     * @return string
     */
    public function getBg(){
      return $this->_get(2);
    }
    
    /**
     * Set <bg> value
     *
     * @param string $value
     * @return \RO\Cmd\LoveLetterData
     */
    public function setBg( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <configID> has a value
     *
     * @return boolean
     */
    public function hasConfigID(){
      return $this->_has(3);
    }
    
    /**
     * Clear <configID> value
     *
     * @return \RO\Cmd\LoveLetterData
     */
    public function clearConfigID(){
      return $this->_clear(3);
    }
    
    /**
     * Get <configID> value
     *
     * @return int
     */
    public function getConfigID(){
      return $this->_get(3);
    }
    
    /**
     * Set <configID> value
     *
     * @param int $value
     * @return \RO\Cmd\LoveLetterData
     */
    public function setConfigID( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <content> has a value
     *
     * @return boolean
     */
    public function hasContent(){
      return $this->_has(4);
    }
    
    /**
     * Clear <content> value
     *
     * @return \RO\Cmd\LoveLetterData
     */
    public function clearContent(){
      return $this->_clear(4);
    }
    
    /**
     * Get <content> value
     *
     * @return string
     */
    public function getContent(){
      return $this->_get(4);
    }
    
    /**
     * Set <content> value
     *
     * @param string $value
     * @return \RO\Cmd\LoveLetterData
     */
    public function setContent( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <content2> has a value
     *
     * @return boolean
     */
    public function hasContent2(){
      return $this->_has(5);
    }
    
    /**
     * Clear <content2> value
     *
     * @return \RO\Cmd\LoveLetterData
     */
    public function clearContent2(){
      return $this->_clear(5);
    }
    
    /**
     * Get <content2> value
     *
     * @return string
     */
    public function getContent2(){
      return $this->_get(5);
    }
    
    /**
     * Set <content2> value
     *
     * @param string $value
     * @return \RO\Cmd\LoveLetterData
     */
    public function setContent2( $value){
      return $this->_set(5, $value);
    }
  }
}

