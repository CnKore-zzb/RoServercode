<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: RecordCmd.proto

namespace RO\Cmd {

  class BlobSettings extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $transmap = 0;
    
    /**  @var float */
    public $trans_x = 0;
    
    /**  @var float */
    public $trans_y = 0;
    
    /**  @var float */
    public $trans_z = 0;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.BlobSettings');

      // OPTIONAL UINT32 transmap = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "transmap";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL FLOAT trans_x = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "trans_x";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL FLOAT trans_y = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "trans_y";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL FLOAT trans_z = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "trans_z";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <transmap> has a value
     *
     * @return boolean
     */
    public function hasTransmap(){
      return $this->_has(1);
    }
    
    /**
     * Clear <transmap> value
     *
     * @return \RO\Cmd\BlobSettings
     */
    public function clearTransmap(){
      return $this->_clear(1);
    }
    
    /**
     * Get <transmap> value
     *
     * @return int
     */
    public function getTransmap(){
      return $this->_get(1);
    }
    
    /**
     * Set <transmap> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobSettings
     */
    public function setTransmap( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <trans_x> has a value
     *
     * @return boolean
     */
    public function hasTransX(){
      return $this->_has(2);
    }
    
    /**
     * Clear <trans_x> value
     *
     * @return \RO\Cmd\BlobSettings
     */
    public function clearTransX(){
      return $this->_clear(2);
    }
    
    /**
     * Get <trans_x> value
     *
     * @return float
     */
    public function getTransX(){
      return $this->_get(2);
    }
    
    /**
     * Set <trans_x> value
     *
     * @param float $value
     * @return \RO\Cmd\BlobSettings
     */
    public function setTransX( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <trans_y> has a value
     *
     * @return boolean
     */
    public function hasTransY(){
      return $this->_has(3);
    }
    
    /**
     * Clear <trans_y> value
     *
     * @return \RO\Cmd\BlobSettings
     */
    public function clearTransY(){
      return $this->_clear(3);
    }
    
    /**
     * Get <trans_y> value
     *
     * @return float
     */
    public function getTransY(){
      return $this->_get(3);
    }
    
    /**
     * Set <trans_y> value
     *
     * @param float $value
     * @return \RO\Cmd\BlobSettings
     */
    public function setTransY( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <trans_z> has a value
     *
     * @return boolean
     */
    public function hasTransZ(){
      return $this->_has(4);
    }
    
    /**
     * Clear <trans_z> value
     *
     * @return \RO\Cmd\BlobSettings
     */
    public function clearTransZ(){
      return $this->_clear(4);
    }
    
    /**
     * Get <trans_z> value
     *
     * @return float
     */
    public function getTransZ(){
      return $this->_get(4);
    }
    
    /**
     * Set <trans_z> value
     *
     * @param float $value
     * @return \RO\Cmd\BlobSettings
     */
    public function setTransZ( $value){
      return $this->_set(4, $value);
    }
  }
}

