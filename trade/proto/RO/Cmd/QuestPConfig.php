<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: SceneQuest.proto

namespace RO\Cmd {

  class QuestPConfig extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $RewardGroup = 0;
    
    /**  @var int */
    public $SubGroup = 0;
    
    /**  @var int */
    public $FinishJump = 0;
    
    /**  @var int */
    public $FailJump = 0;
    
    /**  @var int */
    public $Map = 0;
    
    /**  @var int */
    public $WhetherTrace = 0;
    
    /**  @var int */
    public $Auto = 0;
    
    /**  @var int */
    public $FirstClass = 0;
    
    /**  @var int */
    public $Class = 0;
    
    /**  @var int */
    public $Level = 0;
    
    /**  @var string */
    public $QuestName = null;
    
    /**  @var string */
    public $Name = null;
    
    /**  @var string */
    public $Type = null;
    
    /**  @var string */
    public $Content = null;
    
    /**  @var string */
    public $TraceInfo = null;
    
    /**  @var \RO\Cmd\ConfigParam */
    public $params = null;
    
    /**  @var int[]  */
    public $allrewardid = array();
    
    /**  @var int[]  */
    public $PreQuest = array();
    
    /**  @var int[]  */
    public $MustPreQuest = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.QuestPConfig');

      // OPTIONAL UINT32 RewardGroup = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "RewardGroup";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 SubGroup = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "SubGroup";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 FinishJump = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "FinishJump";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 FailJump = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "FailJump";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 Map = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "Map";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 WhetherTrace = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "WhetherTrace";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 Auto = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "Auto";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 FirstClass = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "FirstClass";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 Class = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "Class";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 Level = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "Level";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL STRING QuestName = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "QuestName";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING Name = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "Name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING Type = 13
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 13;
      $f->name      = "Type";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING Content = 14
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 14;
      $f->name      = "Content";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING TraceInfo = 15
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 15;
      $f->name      = "TraceInfo";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE params = 16
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 16;
      $f->name      = "params";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\ConfigParam';
      $descriptor->addField($f);

      // REPEATED UINT32 allrewardid = 17
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 17;
      $f->name      = "allrewardid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED UINT32 PreQuest = 18
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 18;
      $f->name      = "PreQuest";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED UINT32 MustPreQuest = 19
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 19;
      $f->name      = "MustPreQuest";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <RewardGroup> has a value
     *
     * @return boolean
     */
    public function hasRewardGroup(){
      return $this->_has(1);
    }
    
    /**
     * Clear <RewardGroup> value
     *
     * @return \RO\Cmd\QuestPConfig
     */
    public function clearRewardGroup(){
      return $this->_clear(1);
    }
    
    /**
     * Get <RewardGroup> value
     *
     * @return int
     */
    public function getRewardGroup(){
      return $this->_get(1);
    }
    
    /**
     * Set <RewardGroup> value
     *
     * @param int $value
     * @return \RO\Cmd\QuestPConfig
     */
    public function setRewardGroup( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <SubGroup> has a value
     *
     * @return boolean
     */
    public function hasSubGroup(){
      return $this->_has(2);
    }
    
    /**
     * Clear <SubGroup> value
     *
     * @return \RO\Cmd\QuestPConfig
     */
    public function clearSubGroup(){
      return $this->_clear(2);
    }
    
    /**
     * Get <SubGroup> value
     *
     * @return int
     */
    public function getSubGroup(){
      return $this->_get(2);
    }
    
    /**
     * Set <SubGroup> value
     *
     * @param int $value
     * @return \RO\Cmd\QuestPConfig
     */
    public function setSubGroup( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <FinishJump> has a value
     *
     * @return boolean
     */
    public function hasFinishJump(){
      return $this->_has(3);
    }
    
    /**
     * Clear <FinishJump> value
     *
     * @return \RO\Cmd\QuestPConfig
     */
    public function clearFinishJump(){
      return $this->_clear(3);
    }
    
    /**
     * Get <FinishJump> value
     *
     * @return int
     */
    public function getFinishJump(){
      return $this->_get(3);
    }
    
    /**
     * Set <FinishJump> value
     *
     * @param int $value
     * @return \RO\Cmd\QuestPConfig
     */
    public function setFinishJump( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <FailJump> has a value
     *
     * @return boolean
     */
    public function hasFailJump(){
      return $this->_has(4);
    }
    
    /**
     * Clear <FailJump> value
     *
     * @return \RO\Cmd\QuestPConfig
     */
    public function clearFailJump(){
      return $this->_clear(4);
    }
    
    /**
     * Get <FailJump> value
     *
     * @return int
     */
    public function getFailJump(){
      return $this->_get(4);
    }
    
    /**
     * Set <FailJump> value
     *
     * @param int $value
     * @return \RO\Cmd\QuestPConfig
     */
    public function setFailJump( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <Map> has a value
     *
     * @return boolean
     */
    public function hasMap(){
      return $this->_has(5);
    }
    
    /**
     * Clear <Map> value
     *
     * @return \RO\Cmd\QuestPConfig
     */
    public function clearMap(){
      return $this->_clear(5);
    }
    
    /**
     * Get <Map> value
     *
     * @return int
     */
    public function getMap(){
      return $this->_get(5);
    }
    
    /**
     * Set <Map> value
     *
     * @param int $value
     * @return \RO\Cmd\QuestPConfig
     */
    public function setMap( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <WhetherTrace> has a value
     *
     * @return boolean
     */
    public function hasWhetherTrace(){
      return $this->_has(6);
    }
    
    /**
     * Clear <WhetherTrace> value
     *
     * @return \RO\Cmd\QuestPConfig
     */
    public function clearWhetherTrace(){
      return $this->_clear(6);
    }
    
    /**
     * Get <WhetherTrace> value
     *
     * @return int
     */
    public function getWhetherTrace(){
      return $this->_get(6);
    }
    
    /**
     * Set <WhetherTrace> value
     *
     * @param int $value
     * @return \RO\Cmd\QuestPConfig
     */
    public function setWhetherTrace( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <Auto> has a value
     *
     * @return boolean
     */
    public function hasAuto(){
      return $this->_has(7);
    }
    
    /**
     * Clear <Auto> value
     *
     * @return \RO\Cmd\QuestPConfig
     */
    public function clearAuto(){
      return $this->_clear(7);
    }
    
    /**
     * Get <Auto> value
     *
     * @return int
     */
    public function getAuto(){
      return $this->_get(7);
    }
    
    /**
     * Set <Auto> value
     *
     * @param int $value
     * @return \RO\Cmd\QuestPConfig
     */
    public function setAuto( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <FirstClass> has a value
     *
     * @return boolean
     */
    public function hasFirstClass(){
      return $this->_has(8);
    }
    
    /**
     * Clear <FirstClass> value
     *
     * @return \RO\Cmd\QuestPConfig
     */
    public function clearFirstClass(){
      return $this->_clear(8);
    }
    
    /**
     * Get <FirstClass> value
     *
     * @return int
     */
    public function getFirstClass(){
      return $this->_get(8);
    }
    
    /**
     * Set <FirstClass> value
     *
     * @param int $value
     * @return \RO\Cmd\QuestPConfig
     */
    public function setFirstClass( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <Class> has a value
     *
     * @return boolean
     */
    public function hasClass(){
      return $this->_has(9);
    }
    
    /**
     * Clear <Class> value
     *
     * @return \RO\Cmd\QuestPConfig
     */
    public function clearClass(){
      return $this->_clear(9);
    }
    
    /**
     * Get <Class> value
     *
     * @return int
     */
    public function getClass(){
      return $this->_get(9);
    }
    
    /**
     * Set <Class> value
     *
     * @param int $value
     * @return \RO\Cmd\QuestPConfig
     */
    public function setClass( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <Level> has a value
     *
     * @return boolean
     */
    public function hasLevel(){
      return $this->_has(10);
    }
    
    /**
     * Clear <Level> value
     *
     * @return \RO\Cmd\QuestPConfig
     */
    public function clearLevel(){
      return $this->_clear(10);
    }
    
    /**
     * Get <Level> value
     *
     * @return int
     */
    public function getLevel(){
      return $this->_get(10);
    }
    
    /**
     * Set <Level> value
     *
     * @param int $value
     * @return \RO\Cmd\QuestPConfig
     */
    public function setLevel( $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <QuestName> has a value
     *
     * @return boolean
     */
    public function hasQuestName(){
      return $this->_has(11);
    }
    
    /**
     * Clear <QuestName> value
     *
     * @return \RO\Cmd\QuestPConfig
     */
    public function clearQuestName(){
      return $this->_clear(11);
    }
    
    /**
     * Get <QuestName> value
     *
     * @return string
     */
    public function getQuestName(){
      return $this->_get(11);
    }
    
    /**
     * Set <QuestName> value
     *
     * @param string $value
     * @return \RO\Cmd\QuestPConfig
     */
    public function setQuestName( $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <Name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(12);
    }
    
    /**
     * Clear <Name> value
     *
     * @return \RO\Cmd\QuestPConfig
     */
    public function clearName(){
      return $this->_clear(12);
    }
    
    /**
     * Get <Name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(12);
    }
    
    /**
     * Set <Name> value
     *
     * @param string $value
     * @return \RO\Cmd\QuestPConfig
     */
    public function setName( $value){
      return $this->_set(12, $value);
    }
    
    /**
     * Check if <Type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(13);
    }
    
    /**
     * Clear <Type> value
     *
     * @return \RO\Cmd\QuestPConfig
     */
    public function clearType(){
      return $this->_clear(13);
    }
    
    /**
     * Get <Type> value
     *
     * @return string
     */
    public function getType(){
      return $this->_get(13);
    }
    
    /**
     * Set <Type> value
     *
     * @param string $value
     * @return \RO\Cmd\QuestPConfig
     */
    public function setType( $value){
      return $this->_set(13, $value);
    }
    
    /**
     * Check if <Content> has a value
     *
     * @return boolean
     */
    public function hasContent(){
      return $this->_has(14);
    }
    
    /**
     * Clear <Content> value
     *
     * @return \RO\Cmd\QuestPConfig
     */
    public function clearContent(){
      return $this->_clear(14);
    }
    
    /**
     * Get <Content> value
     *
     * @return string
     */
    public function getContent(){
      return $this->_get(14);
    }
    
    /**
     * Set <Content> value
     *
     * @param string $value
     * @return \RO\Cmd\QuestPConfig
     */
    public function setContent( $value){
      return $this->_set(14, $value);
    }
    
    /**
     * Check if <TraceInfo> has a value
     *
     * @return boolean
     */
    public function hasTraceInfo(){
      return $this->_has(15);
    }
    
    /**
     * Clear <TraceInfo> value
     *
     * @return \RO\Cmd\QuestPConfig
     */
    public function clearTraceInfo(){
      return $this->_clear(15);
    }
    
    /**
     * Get <TraceInfo> value
     *
     * @return string
     */
    public function getTraceInfo(){
      return $this->_get(15);
    }
    
    /**
     * Set <TraceInfo> value
     *
     * @param string $value
     * @return \RO\Cmd\QuestPConfig
     */
    public function setTraceInfo( $value){
      return $this->_set(15, $value);
    }
    
    /**
     * Check if <params> has a value
     *
     * @return boolean
     */
    public function hasParams(){
      return $this->_has(16);
    }
    
    /**
     * Clear <params> value
     *
     * @return \RO\Cmd\QuestPConfig
     */
    public function clearParams(){
      return $this->_clear(16);
    }
    
    /**
     * Get <params> value
     *
     * @return \RO\Cmd\ConfigParam
     */
    public function getParams(){
      return $this->_get(16);
    }
    
    /**
     * Set <params> value
     *
     * @param \RO\Cmd\ConfigParam $value
     * @return \RO\Cmd\QuestPConfig
     */
    public function setParams(\RO\Cmd\ConfigParam $value){
      return $this->_set(16, $value);
    }
    
    /**
     * Check if <allrewardid> has a value
     *
     * @return boolean
     */
    public function hasAllrewardid(){
      return $this->_has(17);
    }
    
    /**
     * Clear <allrewardid> value
     *
     * @return \RO\Cmd\QuestPConfig
     */
    public function clearAllrewardid(){
      return $this->_clear(17);
    }
    
    /**
     * Get <allrewardid> value
     *
     * @param int $idx
     * @return int
     */
    public function getAllrewardid($idx = NULL){
      return $this->_get(17, $idx);
    }
    
    /**
     * Set <allrewardid> value
     *
     * @param int $value
     * @return \RO\Cmd\QuestPConfig
     */
    public function setAllrewardid( $value, $idx = NULL){
      return $this->_set(17, $value, $idx);
    }
    
    /**
     * Get all elements of <allrewardid>
     *
     * @return int[]
     */
    public function getAllrewardidList(){
     return $this->_get(17);
    }
    
    /**
     * Add a new element to <allrewardid>
     *
     * @param int $value
     * @return \RO\Cmd\QuestPConfig
     */
    public function addAllrewardid( $value){
     return $this->_add(17, $value);
    }
    
    /**
     * Check if <PreQuest> has a value
     *
     * @return boolean
     */
    public function hasPreQuest(){
      return $this->_has(18);
    }
    
    /**
     * Clear <PreQuest> value
     *
     * @return \RO\Cmd\QuestPConfig
     */
    public function clearPreQuest(){
      return $this->_clear(18);
    }
    
    /**
     * Get <PreQuest> value
     *
     * @param int $idx
     * @return int
     */
    public function getPreQuest($idx = NULL){
      return $this->_get(18, $idx);
    }
    
    /**
     * Set <PreQuest> value
     *
     * @param int $value
     * @return \RO\Cmd\QuestPConfig
     */
    public function setPreQuest( $value, $idx = NULL){
      return $this->_set(18, $value, $idx);
    }
    
    /**
     * Get all elements of <PreQuest>
     *
     * @return int[]
     */
    public function getPreQuestList(){
     return $this->_get(18);
    }
    
    /**
     * Add a new element to <PreQuest>
     *
     * @param int $value
     * @return \RO\Cmd\QuestPConfig
     */
    public function addPreQuest( $value){
     return $this->_add(18, $value);
    }
    
    /**
     * Check if <MustPreQuest> has a value
     *
     * @return boolean
     */
    public function hasMustPreQuest(){
      return $this->_has(19);
    }
    
    /**
     * Clear <MustPreQuest> value
     *
     * @return \RO\Cmd\QuestPConfig
     */
    public function clearMustPreQuest(){
      return $this->_clear(19);
    }
    
    /**
     * Get <MustPreQuest> value
     *
     * @param int $idx
     * @return int
     */
    public function getMustPreQuest($idx = NULL){
      return $this->_get(19, $idx);
    }
    
    /**
     * Set <MustPreQuest> value
     *
     * @param int $value
     * @return \RO\Cmd\QuestPConfig
     */
    public function setMustPreQuest( $value, $idx = NULL){
      return $this->_set(19, $value, $idx);
    }
    
    /**
     * Get all elements of <MustPreQuest>
     *
     * @return int[]
     */
    public function getMustPreQuestList(){
     return $this->_get(19);
    }
    
    /**
     * Add a new element to <MustPreQuest>
     *
     * @param int $value
     * @return \RO\Cmd\QuestPConfig
     */
    public function addMustPreQuest( $value){
     return $this->_add(19, $value);
    }
  }
}

