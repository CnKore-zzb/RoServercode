<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: SceneUser.proto

namespace RO\Cmd {

  class TestUint64 extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $i = null;
    
    /**  @var int */
    public $j = null;
    
    /**  @var int */
    public $k = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.TestUint64');

      // REQUIRED INT32 i = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "i";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL UINT64 j = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "j";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 k = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "k";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <i> has a value
     *
     * @return boolean
     */
    public function hasI(){
      return $this->_has(1);
    }
    
    /**
     * Clear <i> value
     *
     * @return \RO\Cmd\TestUint64
     */
    public function clearI(){
      return $this->_clear(1);
    }
    
    /**
     * Get <i> value
     *
     * @return int
     */
    public function getI(){
      return $this->_get(1);
    }
    
    /**
     * Set <i> value
     *
     * @param int $value
     * @return \RO\Cmd\TestUint64
     */
    public function setI( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <j> has a value
     *
     * @return boolean
     */
    public function hasJ(){
      return $this->_has(2);
    }
    
    /**
     * Clear <j> value
     *
     * @return \RO\Cmd\TestUint64
     */
    public function clearJ(){
      return $this->_clear(2);
    }
    
    /**
     * Get <j> value
     *
     * @return int
     */
    public function getJ(){
      return $this->_get(2);
    }
    
    /**
     * Set <j> value
     *
     * @param int $value
     * @return \RO\Cmd\TestUint64
     */
    public function setJ( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <k> has a value
     *
     * @return boolean
     */
    public function hasK(){
      return $this->_has(3);
    }
    
    /**
     * Clear <k> value
     *
     * @return \RO\Cmd\TestUint64
     */
    public function clearK(){
      return $this->_clear(3);
    }
    
    /**
     * Get <k> value
     *
     * @return int
     */
    public function getK(){
      return $this->_get(3);
    }
    
    /**
     * Set <k> value
     *
     * @param int $value
     * @return \RO\Cmd\TestUint64
     */
    public function setK( $value){
      return $this->_set(3, $value);
    }
  }
}

