<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: RecordCmd.proto

namespace RO\Cmd {

  class BlobPortrait extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $curportrait = 0;
    
    /**  @var int */
    public $curframe = 0;
    
    /**  @var int[]  */
    public $unlockportrait = array();
    
    /**  @var int[]  */
    public $unlockframe = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.BlobPortrait');

      // OPTIONAL UINT32 curportrait = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "curportrait";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 curframe = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "curframe";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // REPEATED UINT32 unlockportrait = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "unlockportrait";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED UINT32 unlockframe = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "unlockframe";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <curportrait> has a value
     *
     * @return boolean
     */
    public function hasCurportrait(){
      return $this->_has(1);
    }
    
    /**
     * Clear <curportrait> value
     *
     * @return \RO\Cmd\BlobPortrait
     */
    public function clearCurportrait(){
      return $this->_clear(1);
    }
    
    /**
     * Get <curportrait> value
     *
     * @return int
     */
    public function getCurportrait(){
      return $this->_get(1);
    }
    
    /**
     * Set <curportrait> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobPortrait
     */
    public function setCurportrait( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <curframe> has a value
     *
     * @return boolean
     */
    public function hasCurframe(){
      return $this->_has(2);
    }
    
    /**
     * Clear <curframe> value
     *
     * @return \RO\Cmd\BlobPortrait
     */
    public function clearCurframe(){
      return $this->_clear(2);
    }
    
    /**
     * Get <curframe> value
     *
     * @return int
     */
    public function getCurframe(){
      return $this->_get(2);
    }
    
    /**
     * Set <curframe> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobPortrait
     */
    public function setCurframe( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <unlockportrait> has a value
     *
     * @return boolean
     */
    public function hasUnlockportrait(){
      return $this->_has(3);
    }
    
    /**
     * Clear <unlockportrait> value
     *
     * @return \RO\Cmd\BlobPortrait
     */
    public function clearUnlockportrait(){
      return $this->_clear(3);
    }
    
    /**
     * Get <unlockportrait> value
     *
     * @param int $idx
     * @return int
     */
    public function getUnlockportrait($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <unlockportrait> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobPortrait
     */
    public function setUnlockportrait( $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <unlockportrait>
     *
     * @return int[]
     */
    public function getUnlockportraitList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <unlockportrait>
     *
     * @param int $value
     * @return \RO\Cmd\BlobPortrait
     */
    public function addUnlockportrait( $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <unlockframe> has a value
     *
     * @return boolean
     */
    public function hasUnlockframe(){
      return $this->_has(4);
    }
    
    /**
     * Clear <unlockframe> value
     *
     * @return \RO\Cmd\BlobPortrait
     */
    public function clearUnlockframe(){
      return $this->_clear(4);
    }
    
    /**
     * Get <unlockframe> value
     *
     * @param int $idx
     * @return int
     */
    public function getUnlockframe($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <unlockframe> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobPortrait
     */
    public function setUnlockframe( $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <unlockframe>
     *
     * @return int[]
     */
    public function getUnlockframeList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <unlockframe>
     *
     * @param int $value
     * @return \RO\Cmd\BlobPortrait
     */
    public function addUnlockframe( $value){
     return $this->_add(4, $value);
    }
  }
}

