<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: RecordTrade.proto

namespace RO\Cmd {

  class SearchCond extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $item_id = null;
    
    /**  @var int */
    public $page_index = null;
    
    /**  @var int */
    public $page_count = null;
    
    /**  @var int - \RO\Cmd\RankType */
    public $rank_type = \RO\Cmd\RankType::RANKTYPE_ITEM_ID_INC;
    
    /**  @var int - \RO\Cmd\ETradeType */
    public $trade_type = \RO\Cmd\ETradeType::ETRADETYPE_TRADE;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.SearchCond');

      // OPTIONAL UINT32 item_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "item_id";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 page_index = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "page_index";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 page_count = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "page_count";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM rank_type = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "rank_type";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\RankType';
      $f->default   = \RO\Cmd\RankType::RANKTYPE_ITEM_ID_INC;
      $descriptor->addField($f);

      // OPTIONAL ENUM trade_type = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "trade_type";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\ETradeType';
      $f->default   = \RO\Cmd\ETradeType::ETRADETYPE_TRADE;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <item_id> has a value
     *
     * @return boolean
     */
    public function hasItemId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <item_id> value
     *
     * @return \RO\Cmd\SearchCond
     */
    public function clearItemId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <item_id> value
     *
     * @return int
     */
    public function getItemId(){
      return $this->_get(1);
    }
    
    /**
     * Set <item_id> value
     *
     * @param int $value
     * @return \RO\Cmd\SearchCond
     */
    public function setItemId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <page_index> has a value
     *
     * @return boolean
     */
    public function hasPageIndex(){
      return $this->_has(7);
    }
    
    /**
     * Clear <page_index> value
     *
     * @return \RO\Cmd\SearchCond
     */
    public function clearPageIndex(){
      return $this->_clear(7);
    }
    
    /**
     * Get <page_index> value
     *
     * @return int
     */
    public function getPageIndex(){
      return $this->_get(7);
    }
    
    /**
     * Set <page_index> value
     *
     * @param int $value
     * @return \RO\Cmd\SearchCond
     */
    public function setPageIndex( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <page_count> has a value
     *
     * @return boolean
     */
    public function hasPageCount(){
      return $this->_has(8);
    }
    
    /**
     * Clear <page_count> value
     *
     * @return \RO\Cmd\SearchCond
     */
    public function clearPageCount(){
      return $this->_clear(8);
    }
    
    /**
     * Get <page_count> value
     *
     * @return int
     */
    public function getPageCount(){
      return $this->_get(8);
    }
    
    /**
     * Set <page_count> value
     *
     * @param int $value
     * @return \RO\Cmd\SearchCond
     */
    public function setPageCount( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <rank_type> has a value
     *
     * @return boolean
     */
    public function hasRankType(){
      return $this->_has(9);
    }
    
    /**
     * Clear <rank_type> value
     *
     * @return \RO\Cmd\SearchCond
     */
    public function clearRankType(){
      return $this->_clear(9);
    }
    
    /**
     * Get <rank_type> value
     *
     * @return int - \RO\Cmd\RankType
     */
    public function getRankType(){
      return $this->_get(9);
    }
    
    /**
     * Set <rank_type> value
     *
     * @param int - \RO\Cmd\RankType $value
     * @return \RO\Cmd\SearchCond
     */
    public function setRankType( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <trade_type> has a value
     *
     * @return boolean
     */
    public function hasTradeType(){
      return $this->_has(10);
    }
    
    /**
     * Clear <trade_type> value
     *
     * @return \RO\Cmd\SearchCond
     */
    public function clearTradeType(){
      return $this->_clear(10);
    }
    
    /**
     * Get <trade_type> value
     *
     * @return int - \RO\Cmd\ETradeType
     */
    public function getTradeType(){
      return $this->_get(10);
    }
    
    /**
     * Set <trade_type> value
     *
     * @param int - \RO\Cmd\ETradeType $value
     * @return \RO\Cmd\SearchCond
     */
    public function setTradeType( $value){
      return $this->_set(10, $value);
    }
  }
}

