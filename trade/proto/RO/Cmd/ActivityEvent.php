<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: ActivityEvent.proto

namespace RO\Cmd {

  class ActivityEvent extends \DrSlump\Protobuf\Message {

    /**  @var int - \RO\Cmd\EActivityEventType */
    public $type = \RO\Cmd\EActivityEventType::EACTIVITYEVENTTYPE_MIN;
    
    /**  @var int */
    public $begintime = 0;
    
    /**  @var int */
    public $endtime = 0;
    
    /**  @var \RO\Cmd\AEFreeTransferInfo */
    public $freetransfer = null;
    
    /**  @var \RO\Cmd\AERewardInfo[]  */
    public $reward = array();
    
    /**  @var \RO\Cmd\AEResetInfo[]  */
    public $resetinfo = array();
    
    /**  @var \RO\Cmd\AELotteryDiscount */
    public $lotterydiscount = null;
    
    /**  @var \RO\Cmd\AELotteryBanner */
    public $lotterybanner = null;
    
    /**  @var int */
    public $id = null;
    
    /**  @var \RO\Cmd\AEGuildBuildingSubmitInfo */
    public $gbuildingsubmit = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.ActivityEvent');

      // OPTIONAL ENUM type = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\EActivityEventType';
      $f->default   = \RO\Cmd\EActivityEventType::EACTIVITYEVENTTYPE_MIN;
      $descriptor->addField($f);

      // OPTIONAL UINT64 begintime = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "begintime";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT64 endtime = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "endtime";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE freetransfer = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "freetransfer";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\AEFreeTransferInfo';
      $descriptor->addField($f);

      // REPEATED MESSAGE reward = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "reward";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\AERewardInfo';
      $descriptor->addField($f);

      // REPEATED MESSAGE resetinfo = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "resetinfo";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\AEResetInfo';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE lotterydiscount = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "lotterydiscount";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\AELotteryDiscount';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE lotterybanner = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "lotterybanner";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\AELotteryBanner';
      $descriptor->addField($f);

      // OPTIONAL UINT64 id = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE gbuildingsubmit = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "gbuildingsubmit";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\AEGuildBuildingSubmitInfo';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(1);
    }
    
    /**
     * Clear <type> value
     *
     * @return \RO\Cmd\ActivityEvent
     */
    public function clearType(){
      return $this->_clear(1);
    }
    
    /**
     * Get <type> value
     *
     * @return int - \RO\Cmd\EActivityEventType
     */
    public function getType(){
      return $this->_get(1);
    }
    
    /**
     * Set <type> value
     *
     * @param int - \RO\Cmd\EActivityEventType $value
     * @return \RO\Cmd\ActivityEvent
     */
    public function setType( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <begintime> has a value
     *
     * @return boolean
     */
    public function hasBegintime(){
      return $this->_has(2);
    }
    
    /**
     * Clear <begintime> value
     *
     * @return \RO\Cmd\ActivityEvent
     */
    public function clearBegintime(){
      return $this->_clear(2);
    }
    
    /**
     * Get <begintime> value
     *
     * @return int
     */
    public function getBegintime(){
      return $this->_get(2);
    }
    
    /**
     * Set <begintime> value
     *
     * @param int $value
     * @return \RO\Cmd\ActivityEvent
     */
    public function setBegintime( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <endtime> has a value
     *
     * @return boolean
     */
    public function hasEndtime(){
      return $this->_has(3);
    }
    
    /**
     * Clear <endtime> value
     *
     * @return \RO\Cmd\ActivityEvent
     */
    public function clearEndtime(){
      return $this->_clear(3);
    }
    
    /**
     * Get <endtime> value
     *
     * @return int
     */
    public function getEndtime(){
      return $this->_get(3);
    }
    
    /**
     * Set <endtime> value
     *
     * @param int $value
     * @return \RO\Cmd\ActivityEvent
     */
    public function setEndtime( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <freetransfer> has a value
     *
     * @return boolean
     */
    public function hasFreetransfer(){
      return $this->_has(4);
    }
    
    /**
     * Clear <freetransfer> value
     *
     * @return \RO\Cmd\ActivityEvent
     */
    public function clearFreetransfer(){
      return $this->_clear(4);
    }
    
    /**
     * Get <freetransfer> value
     *
     * @return \RO\Cmd\AEFreeTransferInfo
     */
    public function getFreetransfer(){
      return $this->_get(4);
    }
    
    /**
     * Set <freetransfer> value
     *
     * @param \RO\Cmd\AEFreeTransferInfo $value
     * @return \RO\Cmd\ActivityEvent
     */
    public function setFreetransfer(\RO\Cmd\AEFreeTransferInfo $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <reward> has a value
     *
     * @return boolean
     */
    public function hasReward(){
      return $this->_has(5);
    }
    
    /**
     * Clear <reward> value
     *
     * @return \RO\Cmd\ActivityEvent
     */
    public function clearReward(){
      return $this->_clear(5);
    }
    
    /**
     * Get <reward> value
     *
     * @param int $idx
     * @return \RO\Cmd\AERewardInfo
     */
    public function getReward($idx = NULL){
      return $this->_get(5, $idx);
    }
    
    /**
     * Set <reward> value
     *
     * @param \RO\Cmd\AERewardInfo $value
     * @return \RO\Cmd\ActivityEvent
     */
    public function setReward(\RO\Cmd\AERewardInfo $value, $idx = NULL){
      return $this->_set(5, $value, $idx);
    }
    
    /**
     * Get all elements of <reward>
     *
     * @return \RO\Cmd\AERewardInfo[]
     */
    public function getRewardList(){
     return $this->_get(5);
    }
    
    /**
     * Add a new element to <reward>
     *
     * @param \RO\Cmd\AERewardInfo $value
     * @return \RO\Cmd\ActivityEvent
     */
    public function addReward(\RO\Cmd\AERewardInfo $value){
     return $this->_add(5, $value);
    }
    
    /**
     * Check if <resetinfo> has a value
     *
     * @return boolean
     */
    public function hasResetinfo(){
      return $this->_has(6);
    }
    
    /**
     * Clear <resetinfo> value
     *
     * @return \RO\Cmd\ActivityEvent
     */
    public function clearResetinfo(){
      return $this->_clear(6);
    }
    
    /**
     * Get <resetinfo> value
     *
     * @param int $idx
     * @return \RO\Cmd\AEResetInfo
     */
    public function getResetinfo($idx = NULL){
      return $this->_get(6, $idx);
    }
    
    /**
     * Set <resetinfo> value
     *
     * @param \RO\Cmd\AEResetInfo $value
     * @return \RO\Cmd\ActivityEvent
     */
    public function setResetinfo(\RO\Cmd\AEResetInfo $value, $idx = NULL){
      return $this->_set(6, $value, $idx);
    }
    
    /**
     * Get all elements of <resetinfo>
     *
     * @return \RO\Cmd\AEResetInfo[]
     */
    public function getResetinfoList(){
     return $this->_get(6);
    }
    
    /**
     * Add a new element to <resetinfo>
     *
     * @param \RO\Cmd\AEResetInfo $value
     * @return \RO\Cmd\ActivityEvent
     */
    public function addResetinfo(\RO\Cmd\AEResetInfo $value){
     return $this->_add(6, $value);
    }
    
    /**
     * Check if <lotterydiscount> has a value
     *
     * @return boolean
     */
    public function hasLotterydiscount(){
      return $this->_has(7);
    }
    
    /**
     * Clear <lotterydiscount> value
     *
     * @return \RO\Cmd\ActivityEvent
     */
    public function clearLotterydiscount(){
      return $this->_clear(7);
    }
    
    /**
     * Get <lotterydiscount> value
     *
     * @return \RO\Cmd\AELotteryDiscount
     */
    public function getLotterydiscount(){
      return $this->_get(7);
    }
    
    /**
     * Set <lotterydiscount> value
     *
     * @param \RO\Cmd\AELotteryDiscount $value
     * @return \RO\Cmd\ActivityEvent
     */
    public function setLotterydiscount(\RO\Cmd\AELotteryDiscount $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <lotterybanner> has a value
     *
     * @return boolean
     */
    public function hasLotterybanner(){
      return $this->_has(8);
    }
    
    /**
     * Clear <lotterybanner> value
     *
     * @return \RO\Cmd\ActivityEvent
     */
    public function clearLotterybanner(){
      return $this->_clear(8);
    }
    
    /**
     * Get <lotterybanner> value
     *
     * @return \RO\Cmd\AELotteryBanner
     */
    public function getLotterybanner(){
      return $this->_get(8);
    }
    
    /**
     * Set <lotterybanner> value
     *
     * @param \RO\Cmd\AELotteryBanner $value
     * @return \RO\Cmd\ActivityEvent
     */
    public function setLotterybanner(\RO\Cmd\AELotteryBanner $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(9);
    }
    
    /**
     * Clear <id> value
     *
     * @return \RO\Cmd\ActivityEvent
     */
    public function clearId(){
      return $this->_clear(9);
    }
    
    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(9);
    }
    
    /**
     * Set <id> value
     *
     * @param int $value
     * @return \RO\Cmd\ActivityEvent
     */
    public function setId( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <gbuildingsubmit> has a value
     *
     * @return boolean
     */
    public function hasGbuildingsubmit(){
      return $this->_has(10);
    }
    
    /**
     * Clear <gbuildingsubmit> value
     *
     * @return \RO\Cmd\ActivityEvent
     */
    public function clearGbuildingsubmit(){
      return $this->_clear(10);
    }
    
    /**
     * Get <gbuildingsubmit> value
     *
     * @return \RO\Cmd\AEGuildBuildingSubmitInfo
     */
    public function getGbuildingsubmit(){
      return $this->_get(10);
    }
    
    /**
     * Set <gbuildingsubmit> value
     *
     * @param \RO\Cmd\AEGuildBuildingSubmitInfo $value
     * @return \RO\Cmd\ActivityEvent
     */
    public function setGbuildingsubmit(\RO\Cmd\AEGuildBuildingSubmitInfo $value){
      return $this->_set(10, $value);
    }
  }
}

