<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: SessionTeam.proto

namespace RO\Cmd {

  class MemberWantedQuest extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $charid = 0;
    
    /**  @var int */
    public $questid = 0;
    
    /**  @var int - \RO\Cmd\EQuestAction */
    public $action = \RO\Cmd\EQuestAction::EQUESTACTION_MIN;
    
    /**  @var int */
    public $step = 0;
    
    /**  @var \RO\Cmd\QuestStep */
    public $questdata = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.MemberWantedQuest');

      // OPTIONAL UINT64 charid = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "charid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 questid = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "questid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL ENUM action = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "action";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\EQuestAction';
      $f->default   = \RO\Cmd\EQuestAction::EQUESTACTION_MIN;
      $descriptor->addField($f);

      // OPTIONAL UINT32 step = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "step";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE questdata = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "questdata";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\QuestStep';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <charid> has a value
     *
     * @return boolean
     */
    public function hasCharid(){
      return $this->_has(1);
    }
    
    /**
     * Clear <charid> value
     *
     * @return \RO\Cmd\MemberWantedQuest
     */
    public function clearCharid(){
      return $this->_clear(1);
    }
    
    /**
     * Get <charid> value
     *
     * @return int
     */
    public function getCharid(){
      return $this->_get(1);
    }
    
    /**
     * Set <charid> value
     *
     * @param int $value
     * @return \RO\Cmd\MemberWantedQuest
     */
    public function setCharid( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <questid> has a value
     *
     * @return boolean
     */
    public function hasQuestid(){
      return $this->_has(2);
    }
    
    /**
     * Clear <questid> value
     *
     * @return \RO\Cmd\MemberWantedQuest
     */
    public function clearQuestid(){
      return $this->_clear(2);
    }
    
    /**
     * Get <questid> value
     *
     * @return int
     */
    public function getQuestid(){
      return $this->_get(2);
    }
    
    /**
     * Set <questid> value
     *
     * @param int $value
     * @return \RO\Cmd\MemberWantedQuest
     */
    public function setQuestid( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <action> has a value
     *
     * @return boolean
     */
    public function hasAction(){
      return $this->_has(3);
    }
    
    /**
     * Clear <action> value
     *
     * @return \RO\Cmd\MemberWantedQuest
     */
    public function clearAction(){
      return $this->_clear(3);
    }
    
    /**
     * Get <action> value
     *
     * @return int - \RO\Cmd\EQuestAction
     */
    public function getAction(){
      return $this->_get(3);
    }
    
    /**
     * Set <action> value
     *
     * @param int - \RO\Cmd\EQuestAction $value
     * @return \RO\Cmd\MemberWantedQuest
     */
    public function setAction( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <step> has a value
     *
     * @return boolean
     */
    public function hasStep(){
      return $this->_has(4);
    }
    
    /**
     * Clear <step> value
     *
     * @return \RO\Cmd\MemberWantedQuest
     */
    public function clearStep(){
      return $this->_clear(4);
    }
    
    /**
     * Get <step> value
     *
     * @return int
     */
    public function getStep(){
      return $this->_get(4);
    }
    
    /**
     * Set <step> value
     *
     * @param int $value
     * @return \RO\Cmd\MemberWantedQuest
     */
    public function setStep( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <questdata> has a value
     *
     * @return boolean
     */
    public function hasQuestdata(){
      return $this->_has(5);
    }
    
    /**
     * Clear <questdata> value
     *
     * @return \RO\Cmd\MemberWantedQuest
     */
    public function clearQuestdata(){
      return $this->_clear(5);
    }
    
    /**
     * Get <questdata> value
     *
     * @return \RO\Cmd\QuestStep
     */
    public function getQuestdata(){
      return $this->_get(5);
    }
    
    /**
     * Set <questdata> value
     *
     * @param \RO\Cmd\QuestStep $value
     * @return \RO\Cmd\MemberWantedQuest
     */
    public function setQuestdata(\RO\Cmd\QuestStep $value){
      return $this->_set(5, $value);
    }
  }
}

