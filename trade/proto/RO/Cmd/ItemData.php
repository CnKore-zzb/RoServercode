<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: SceneItem.proto

namespace RO\Cmd {

  class ItemData extends \DrSlump\Protobuf\Message {

    /**  @var \RO\Cmd\ItemInfo */
    public $base = null;
    
    /**  @var boolean */
    public $equiped = false;
    
    /**  @var int */
    public $battlepoint = 0;
    
    /**  @var \RO\Cmd\EquipData */
    public $equip = null;
    
    /**  @var \RO\Cmd\CardData[]  */
    public $card = array();
    
    /**  @var \RO\Cmd\EnchantData */
    public $enchant = null;
    
    /**  @var \RO\Cmd\EnchantData */
    public $previewenchant = null;
    
    /**  @var \RO\Cmd\RefineData */
    public $refine = null;
    
    /**  @var \RO\Cmd\EggData */
    public $egg = null;
    
    /**  @var \RO\Cmd\LoveLetterData */
    public $letter = null;
    
    /**  @var \RO\Cmd\CodeData */
    public $code = null;
    
    /**  @var \RO\Cmd\WeddingData */
    public $wedding = null;
    
    /**  @var \RO\Cmd\SenderData */
    public $sender = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.ItemData');

      // OPTIONAL MESSAGE base = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "base";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\ItemInfo';
      $descriptor->addField($f);

      // OPTIONAL BOOL equiped = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "equiped";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = false;
      $descriptor->addField($f);

      // OPTIONAL UINT32 battlepoint = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "battlepoint";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE equip = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "equip";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\EquipData';
      $descriptor->addField($f);

      // REPEATED MESSAGE card = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "card";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\CardData';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE enchant = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "enchant";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\EnchantData';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE previewenchant = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "previewenchant";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\EnchantData';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE refine = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "refine";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\RefineData';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE egg = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "egg";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\EggData';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE letter = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "letter";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\LoveLetterData';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE code = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "code";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\CodeData';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE wedding = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "wedding";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\WeddingData';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE sender = 13
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 13;
      $f->name      = "sender";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\SenderData';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <base> has a value
     *
     * @return boolean
     */
    public function hasBase(){
      return $this->_has(1);
    }
    
    /**
     * Clear <base> value
     *
     * @return \RO\Cmd\ItemData
     */
    public function clearBase(){
      return $this->_clear(1);
    }
    
    /**
     * Get <base> value
     *
     * @return \RO\Cmd\ItemInfo
     */
    public function getBase(){
      return $this->_get(1);
    }
    
    /**
     * Set <base> value
     *
     * @param \RO\Cmd\ItemInfo $value
     * @return \RO\Cmd\ItemData
     */
    public function setBase(\RO\Cmd\ItemInfo $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <equiped> has a value
     *
     * @return boolean
     */
    public function hasEquiped(){
      return $this->_has(2);
    }
    
    /**
     * Clear <equiped> value
     *
     * @return \RO\Cmd\ItemData
     */
    public function clearEquiped(){
      return $this->_clear(2);
    }
    
    /**
     * Get <equiped> value
     *
     * @return boolean
     */
    public function getEquiped(){
      return $this->_get(2);
    }
    
    /**
     * Set <equiped> value
     *
     * @param boolean $value
     * @return \RO\Cmd\ItemData
     */
    public function setEquiped( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <battlepoint> has a value
     *
     * @return boolean
     */
    public function hasBattlepoint(){
      return $this->_has(3);
    }
    
    /**
     * Clear <battlepoint> value
     *
     * @return \RO\Cmd\ItemData
     */
    public function clearBattlepoint(){
      return $this->_clear(3);
    }
    
    /**
     * Get <battlepoint> value
     *
     * @return int
     */
    public function getBattlepoint(){
      return $this->_get(3);
    }
    
    /**
     * Set <battlepoint> value
     *
     * @param int $value
     * @return \RO\Cmd\ItemData
     */
    public function setBattlepoint( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <equip> has a value
     *
     * @return boolean
     */
    public function hasEquip(){
      return $this->_has(4);
    }
    
    /**
     * Clear <equip> value
     *
     * @return \RO\Cmd\ItemData
     */
    public function clearEquip(){
      return $this->_clear(4);
    }
    
    /**
     * Get <equip> value
     *
     * @return \RO\Cmd\EquipData
     */
    public function getEquip(){
      return $this->_get(4);
    }
    
    /**
     * Set <equip> value
     *
     * @param \RO\Cmd\EquipData $value
     * @return \RO\Cmd\ItemData
     */
    public function setEquip(\RO\Cmd\EquipData $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <card> has a value
     *
     * @return boolean
     */
    public function hasCard(){
      return $this->_has(5);
    }
    
    /**
     * Clear <card> value
     *
     * @return \RO\Cmd\ItemData
     */
    public function clearCard(){
      return $this->_clear(5);
    }
    
    /**
     * Get <card> value
     *
     * @param int $idx
     * @return \RO\Cmd\CardData
     */
    public function getCard($idx = NULL){
      return $this->_get(5, $idx);
    }
    
    /**
     * Set <card> value
     *
     * @param \RO\Cmd\CardData $value
     * @return \RO\Cmd\ItemData
     */
    public function setCard(\RO\Cmd\CardData $value, $idx = NULL){
      return $this->_set(5, $value, $idx);
    }
    
    /**
     * Get all elements of <card>
     *
     * @return \RO\Cmd\CardData[]
     */
    public function getCardList(){
     return $this->_get(5);
    }
    
    /**
     * Add a new element to <card>
     *
     * @param \RO\Cmd\CardData $value
     * @return \RO\Cmd\ItemData
     */
    public function addCard(\RO\Cmd\CardData $value){
     return $this->_add(5, $value);
    }
    
    /**
     * Check if <enchant> has a value
     *
     * @return boolean
     */
    public function hasEnchant(){
      return $this->_has(6);
    }
    
    /**
     * Clear <enchant> value
     *
     * @return \RO\Cmd\ItemData
     */
    public function clearEnchant(){
      return $this->_clear(6);
    }
    
    /**
     * Get <enchant> value
     *
     * @return \RO\Cmd\EnchantData
     */
    public function getEnchant(){
      return $this->_get(6);
    }
    
    /**
     * Set <enchant> value
     *
     * @param \RO\Cmd\EnchantData $value
     * @return \RO\Cmd\ItemData
     */
    public function setEnchant(\RO\Cmd\EnchantData $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <previewenchant> has a value
     *
     * @return boolean
     */
    public function hasPreviewenchant(){
      return $this->_has(7);
    }
    
    /**
     * Clear <previewenchant> value
     *
     * @return \RO\Cmd\ItemData
     */
    public function clearPreviewenchant(){
      return $this->_clear(7);
    }
    
    /**
     * Get <previewenchant> value
     *
     * @return \RO\Cmd\EnchantData
     */
    public function getPreviewenchant(){
      return $this->_get(7);
    }
    
    /**
     * Set <previewenchant> value
     *
     * @param \RO\Cmd\EnchantData $value
     * @return \RO\Cmd\ItemData
     */
    public function setPreviewenchant(\RO\Cmd\EnchantData $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <refine> has a value
     *
     * @return boolean
     */
    public function hasRefine(){
      return $this->_has(8);
    }
    
    /**
     * Clear <refine> value
     *
     * @return \RO\Cmd\ItemData
     */
    public function clearRefine(){
      return $this->_clear(8);
    }
    
    /**
     * Get <refine> value
     *
     * @return \RO\Cmd\RefineData
     */
    public function getRefine(){
      return $this->_get(8);
    }
    
    /**
     * Set <refine> value
     *
     * @param \RO\Cmd\RefineData $value
     * @return \RO\Cmd\ItemData
     */
    public function setRefine(\RO\Cmd\RefineData $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <egg> has a value
     *
     * @return boolean
     */
    public function hasEgg(){
      return $this->_has(9);
    }
    
    /**
     * Clear <egg> value
     *
     * @return \RO\Cmd\ItemData
     */
    public function clearEgg(){
      return $this->_clear(9);
    }
    
    /**
     * Get <egg> value
     *
     * @return \RO\Cmd\EggData
     */
    public function getEgg(){
      return $this->_get(9);
    }
    
    /**
     * Set <egg> value
     *
     * @param \RO\Cmd\EggData $value
     * @return \RO\Cmd\ItemData
     */
    public function setEgg(\RO\Cmd\EggData $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <letter> has a value
     *
     * @return boolean
     */
    public function hasLetter(){
      return $this->_has(10);
    }
    
    /**
     * Clear <letter> value
     *
     * @return \RO\Cmd\ItemData
     */
    public function clearLetter(){
      return $this->_clear(10);
    }
    
    /**
     * Get <letter> value
     *
     * @return \RO\Cmd\LoveLetterData
     */
    public function getLetter(){
      return $this->_get(10);
    }
    
    /**
     * Set <letter> value
     *
     * @param \RO\Cmd\LoveLetterData $value
     * @return \RO\Cmd\ItemData
     */
    public function setLetter(\RO\Cmd\LoveLetterData $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <code> has a value
     *
     * @return boolean
     */
    public function hasCode(){
      return $this->_has(11);
    }
    
    /**
     * Clear <code> value
     *
     * @return \RO\Cmd\ItemData
     */
    public function clearCode(){
      return $this->_clear(11);
    }
    
    /**
     * Get <code> value
     *
     * @return \RO\Cmd\CodeData
     */
    public function getCode(){
      return $this->_get(11);
    }
    
    /**
     * Set <code> value
     *
     * @param \RO\Cmd\CodeData $value
     * @return \RO\Cmd\ItemData
     */
    public function setCode(\RO\Cmd\CodeData $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <wedding> has a value
     *
     * @return boolean
     */
    public function hasWedding(){
      return $this->_has(12);
    }
    
    /**
     * Clear <wedding> value
     *
     * @return \RO\Cmd\ItemData
     */
    public function clearWedding(){
      return $this->_clear(12);
    }
    
    /**
     * Get <wedding> value
     *
     * @return \RO\Cmd\WeddingData
     */
    public function getWedding(){
      return $this->_get(12);
    }
    
    /**
     * Set <wedding> value
     *
     * @param \RO\Cmd\WeddingData $value
     * @return \RO\Cmd\ItemData
     */
    public function setWedding(\RO\Cmd\WeddingData $value){
      return $this->_set(12, $value);
    }
    
    /**
     * Check if <sender> has a value
     *
     * @return boolean
     */
    public function hasSender(){
      return $this->_has(13);
    }
    
    /**
     * Clear <sender> value
     *
     * @return \RO\Cmd\ItemData
     */
    public function clearSender(){
      return $this->_clear(13);
    }
    
    /**
     * Get <sender> value
     *
     * @return \RO\Cmd\SenderData
     */
    public function getSender(){
      return $this->_get(13);
    }
    
    /**
     * Set <sender> value
     *
     * @param \RO\Cmd\SenderData $value
     * @return \RO\Cmd\ItemData
     */
    public function setSender(\RO\Cmd\SenderData $value){
      return $this->_set(13, $value);
    }
  }
}

