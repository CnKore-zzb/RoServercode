<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: SceneItem.proto

namespace RO\Cmd {

  class EggData extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $exp = 0;
    
    /**  @var int */
    public $friendexp = 0;
    
    /**  @var int */
    public $rewardexp = 0;
    
    /**  @var int */
    public $id = 0;
    
    /**  @var int */
    public $lv = 0;
    
    /**  @var int */
    public $friendlv = 0;
    
    /**  @var int */
    public $body = 0;
    
    /**  @var int */
    public $relivetime = 0;
    
    /**  @var int */
    public $hp = 0;
    
    /**  @var int */
    public $restoretime = 0;
    
    /**  @var int */
    public $time_happly = 0;
    
    /**  @var int */
    public $time_excite = 0;
    
    /**  @var int */
    public $time_happiness = 0;
    
    /**  @var int */
    public $time_happly_gift = 0;
    
    /**  @var int */
    public $time_excite_gift = 0;
    
    /**  @var int */
    public $time_happiness_gift = 0;
    
    /**  @var int */
    public $touch_tick = 0;
    
    /**  @var int */
    public $feed_tick = 0;
    
    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $var = null;
    
    /**  @var int[]  */
    public $skillids = array();
    
    /**  @var \RO\Cmd\EggEquip[]  */
    public $equips = array();
    
    /**  @var string */
    public $buff = null;
    
    /**  @var int[]  */
    public $unlock_equip = array();
    
    /**  @var int[]  */
    public $unlock_body = array();
    
    /**  @var int */
    public $version = 0;
    
    /**  @var boolean */
    public $skilloff = false;
    
    /**  @var int */
    public $exchange_count = 0;
    
    /**  @var string */
    public $guid = null;
    
    /**  @var \RO\Cmd\PetEquipData[]  */
    public $defaultwears = array();
    
    /**  @var \RO\Cmd\PetEquipData[]  */
    public $wears = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.EggData');

      // OPTIONAL UINT64 exp = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "exp";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT64 friendexp = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "friendexp";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT64 rewardexp = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "rewardexp";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 id = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 lv = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "lv";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 friendlv = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "friendlv";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 body = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "body";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 relivetime = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "relivetime";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 hp = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "hp";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 restoretime = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "restoretime";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 time_happly = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "time_happly";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 time_excite = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "time_excite";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 time_happiness = 13
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 13;
      $f->name      = "time_happiness";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 time_happly_gift = 14
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 14;
      $f->name      = "time_happly_gift";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 time_excite_gift = 15
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 15;
      $f->name      = "time_excite_gift";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 time_happiness_gift = 16
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 16;
      $f->name      = "time_happiness_gift";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 touch_tick = 22
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 22;
      $f->name      = "touch_tick";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 feed_tick = 23
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 23;
      $f->name      = "feed_tick";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL STRING name = 17
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 17;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES var = 18
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 18;
      $f->name      = "var";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED UINT32 skillids = 19
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 19;
      $f->name      = "skillids";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED MESSAGE equips = 20
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 20;
      $f->name      = "equips";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\EggEquip';
      $descriptor->addField($f);

      // OPTIONAL BYTES buff = 21
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 21;
      $f->name      = "buff";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED UINT32 unlock_equip = 24
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 24;
      $f->name      = "unlock_equip";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED UINT32 unlock_body = 25
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 25;
      $f->name      = "unlock_body";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL UINT32 version = 26
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 26;
      $f->name      = "version";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL BOOL skilloff = 27
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 27;
      $f->name      = "skilloff";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = false;
      $descriptor->addField($f);

      // OPTIONAL UINT32 exchange_count = 28
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 28;
      $f->name      = "exchange_count";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL STRING guid = 29
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 29;
      $f->name      = "guid";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE defaultwears = 30
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 30;
      $f->name      = "defaultwears";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\PetEquipData';
      $descriptor->addField($f);

      // REPEATED MESSAGE wears = 31
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 31;
      $f->name      = "wears";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\PetEquipData';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <exp> has a value
     *
     * @return boolean
     */
    public function hasExp(){
      return $this->_has(1);
    }
    
    /**
     * Clear <exp> value
     *
     * @return \RO\Cmd\EggData
     */
    public function clearExp(){
      return $this->_clear(1);
    }
    
    /**
     * Get <exp> value
     *
     * @return int
     */
    public function getExp(){
      return $this->_get(1);
    }
    
    /**
     * Set <exp> value
     *
     * @param int $value
     * @return \RO\Cmd\EggData
     */
    public function setExp( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <friendexp> has a value
     *
     * @return boolean
     */
    public function hasFriendexp(){
      return $this->_has(2);
    }
    
    /**
     * Clear <friendexp> value
     *
     * @return \RO\Cmd\EggData
     */
    public function clearFriendexp(){
      return $this->_clear(2);
    }
    
    /**
     * Get <friendexp> value
     *
     * @return int
     */
    public function getFriendexp(){
      return $this->_get(2);
    }
    
    /**
     * Set <friendexp> value
     *
     * @param int $value
     * @return \RO\Cmd\EggData
     */
    public function setFriendexp( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <rewardexp> has a value
     *
     * @return boolean
     */
    public function hasRewardexp(){
      return $this->_has(3);
    }
    
    /**
     * Clear <rewardexp> value
     *
     * @return \RO\Cmd\EggData
     */
    public function clearRewardexp(){
      return $this->_clear(3);
    }
    
    /**
     * Get <rewardexp> value
     *
     * @return int
     */
    public function getRewardexp(){
      return $this->_get(3);
    }
    
    /**
     * Set <rewardexp> value
     *
     * @param int $value
     * @return \RO\Cmd\EggData
     */
    public function setRewardexp( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(4);
    }
    
    /**
     * Clear <id> value
     *
     * @return \RO\Cmd\EggData
     */
    public function clearId(){
      return $this->_clear(4);
    }
    
    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(4);
    }
    
    /**
     * Set <id> value
     *
     * @param int $value
     * @return \RO\Cmd\EggData
     */
    public function setId( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <lv> has a value
     *
     * @return boolean
     */
    public function hasLv(){
      return $this->_has(5);
    }
    
    /**
     * Clear <lv> value
     *
     * @return \RO\Cmd\EggData
     */
    public function clearLv(){
      return $this->_clear(5);
    }
    
    /**
     * Get <lv> value
     *
     * @return int
     */
    public function getLv(){
      return $this->_get(5);
    }
    
    /**
     * Set <lv> value
     *
     * @param int $value
     * @return \RO\Cmd\EggData
     */
    public function setLv( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <friendlv> has a value
     *
     * @return boolean
     */
    public function hasFriendlv(){
      return $this->_has(6);
    }
    
    /**
     * Clear <friendlv> value
     *
     * @return \RO\Cmd\EggData
     */
    public function clearFriendlv(){
      return $this->_clear(6);
    }
    
    /**
     * Get <friendlv> value
     *
     * @return int
     */
    public function getFriendlv(){
      return $this->_get(6);
    }
    
    /**
     * Set <friendlv> value
     *
     * @param int $value
     * @return \RO\Cmd\EggData
     */
    public function setFriendlv( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <body> has a value
     *
     * @return boolean
     */
    public function hasBody(){
      return $this->_has(7);
    }
    
    /**
     * Clear <body> value
     *
     * @return \RO\Cmd\EggData
     */
    public function clearBody(){
      return $this->_clear(7);
    }
    
    /**
     * Get <body> value
     *
     * @return int
     */
    public function getBody(){
      return $this->_get(7);
    }
    
    /**
     * Set <body> value
     *
     * @param int $value
     * @return \RO\Cmd\EggData
     */
    public function setBody( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <relivetime> has a value
     *
     * @return boolean
     */
    public function hasRelivetime(){
      return $this->_has(8);
    }
    
    /**
     * Clear <relivetime> value
     *
     * @return \RO\Cmd\EggData
     */
    public function clearRelivetime(){
      return $this->_clear(8);
    }
    
    /**
     * Get <relivetime> value
     *
     * @return int
     */
    public function getRelivetime(){
      return $this->_get(8);
    }
    
    /**
     * Set <relivetime> value
     *
     * @param int $value
     * @return \RO\Cmd\EggData
     */
    public function setRelivetime( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <hp> has a value
     *
     * @return boolean
     */
    public function hasHp(){
      return $this->_has(9);
    }
    
    /**
     * Clear <hp> value
     *
     * @return \RO\Cmd\EggData
     */
    public function clearHp(){
      return $this->_clear(9);
    }
    
    /**
     * Get <hp> value
     *
     * @return int
     */
    public function getHp(){
      return $this->_get(9);
    }
    
    /**
     * Set <hp> value
     *
     * @param int $value
     * @return \RO\Cmd\EggData
     */
    public function setHp( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <restoretime> has a value
     *
     * @return boolean
     */
    public function hasRestoretime(){
      return $this->_has(10);
    }
    
    /**
     * Clear <restoretime> value
     *
     * @return \RO\Cmd\EggData
     */
    public function clearRestoretime(){
      return $this->_clear(10);
    }
    
    /**
     * Get <restoretime> value
     *
     * @return int
     */
    public function getRestoretime(){
      return $this->_get(10);
    }
    
    /**
     * Set <restoretime> value
     *
     * @param int $value
     * @return \RO\Cmd\EggData
     */
    public function setRestoretime( $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <time_happly> has a value
     *
     * @return boolean
     */
    public function hasTimeHapply(){
      return $this->_has(11);
    }
    
    /**
     * Clear <time_happly> value
     *
     * @return \RO\Cmd\EggData
     */
    public function clearTimeHapply(){
      return $this->_clear(11);
    }
    
    /**
     * Get <time_happly> value
     *
     * @return int
     */
    public function getTimeHapply(){
      return $this->_get(11);
    }
    
    /**
     * Set <time_happly> value
     *
     * @param int $value
     * @return \RO\Cmd\EggData
     */
    public function setTimeHapply( $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <time_excite> has a value
     *
     * @return boolean
     */
    public function hasTimeExcite(){
      return $this->_has(12);
    }
    
    /**
     * Clear <time_excite> value
     *
     * @return \RO\Cmd\EggData
     */
    public function clearTimeExcite(){
      return $this->_clear(12);
    }
    
    /**
     * Get <time_excite> value
     *
     * @return int
     */
    public function getTimeExcite(){
      return $this->_get(12);
    }
    
    /**
     * Set <time_excite> value
     *
     * @param int $value
     * @return \RO\Cmd\EggData
     */
    public function setTimeExcite( $value){
      return $this->_set(12, $value);
    }
    
    /**
     * Check if <time_happiness> has a value
     *
     * @return boolean
     */
    public function hasTimeHappiness(){
      return $this->_has(13);
    }
    
    /**
     * Clear <time_happiness> value
     *
     * @return \RO\Cmd\EggData
     */
    public function clearTimeHappiness(){
      return $this->_clear(13);
    }
    
    /**
     * Get <time_happiness> value
     *
     * @return int
     */
    public function getTimeHappiness(){
      return $this->_get(13);
    }
    
    /**
     * Set <time_happiness> value
     *
     * @param int $value
     * @return \RO\Cmd\EggData
     */
    public function setTimeHappiness( $value){
      return $this->_set(13, $value);
    }
    
    /**
     * Check if <time_happly_gift> has a value
     *
     * @return boolean
     */
    public function hasTimeHapplyGift(){
      return $this->_has(14);
    }
    
    /**
     * Clear <time_happly_gift> value
     *
     * @return \RO\Cmd\EggData
     */
    public function clearTimeHapplyGift(){
      return $this->_clear(14);
    }
    
    /**
     * Get <time_happly_gift> value
     *
     * @return int
     */
    public function getTimeHapplyGift(){
      return $this->_get(14);
    }
    
    /**
     * Set <time_happly_gift> value
     *
     * @param int $value
     * @return \RO\Cmd\EggData
     */
    public function setTimeHapplyGift( $value){
      return $this->_set(14, $value);
    }
    
    /**
     * Check if <time_excite_gift> has a value
     *
     * @return boolean
     */
    public function hasTimeExciteGift(){
      return $this->_has(15);
    }
    
    /**
     * Clear <time_excite_gift> value
     *
     * @return \RO\Cmd\EggData
     */
    public function clearTimeExciteGift(){
      return $this->_clear(15);
    }
    
    /**
     * Get <time_excite_gift> value
     *
     * @return int
     */
    public function getTimeExciteGift(){
      return $this->_get(15);
    }
    
    /**
     * Set <time_excite_gift> value
     *
     * @param int $value
     * @return \RO\Cmd\EggData
     */
    public function setTimeExciteGift( $value){
      return $this->_set(15, $value);
    }
    
    /**
     * Check if <time_happiness_gift> has a value
     *
     * @return boolean
     */
    public function hasTimeHappinessGift(){
      return $this->_has(16);
    }
    
    /**
     * Clear <time_happiness_gift> value
     *
     * @return \RO\Cmd\EggData
     */
    public function clearTimeHappinessGift(){
      return $this->_clear(16);
    }
    
    /**
     * Get <time_happiness_gift> value
     *
     * @return int
     */
    public function getTimeHappinessGift(){
      return $this->_get(16);
    }
    
    /**
     * Set <time_happiness_gift> value
     *
     * @param int $value
     * @return \RO\Cmd\EggData
     */
    public function setTimeHappinessGift( $value){
      return $this->_set(16, $value);
    }
    
    /**
     * Check if <touch_tick> has a value
     *
     * @return boolean
     */
    public function hasTouchTick(){
      return $this->_has(22);
    }
    
    /**
     * Clear <touch_tick> value
     *
     * @return \RO\Cmd\EggData
     */
    public function clearTouchTick(){
      return $this->_clear(22);
    }
    
    /**
     * Get <touch_tick> value
     *
     * @return int
     */
    public function getTouchTick(){
      return $this->_get(22);
    }
    
    /**
     * Set <touch_tick> value
     *
     * @param int $value
     * @return \RO\Cmd\EggData
     */
    public function setTouchTick( $value){
      return $this->_set(22, $value);
    }
    
    /**
     * Check if <feed_tick> has a value
     *
     * @return boolean
     */
    public function hasFeedTick(){
      return $this->_has(23);
    }
    
    /**
     * Clear <feed_tick> value
     *
     * @return \RO\Cmd\EggData
     */
    public function clearFeedTick(){
      return $this->_clear(23);
    }
    
    /**
     * Get <feed_tick> value
     *
     * @return int
     */
    public function getFeedTick(){
      return $this->_get(23);
    }
    
    /**
     * Set <feed_tick> value
     *
     * @param int $value
     * @return \RO\Cmd\EggData
     */
    public function setFeedTick( $value){
      return $this->_set(23, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(17);
    }
    
    /**
     * Clear <name> value
     *
     * @return \RO\Cmd\EggData
     */
    public function clearName(){
      return $this->_clear(17);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(17);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \RO\Cmd\EggData
     */
    public function setName( $value){
      return $this->_set(17, $value);
    }
    
    /**
     * Check if <var> has a value
     *
     * @return boolean
     */
    public function hasVar(){
      return $this->_has(18);
    }
    
    /**
     * Clear <var> value
     *
     * @return \RO\Cmd\EggData
     */
    public function clearVar(){
      return $this->_clear(18);
    }
    
    /**
     * Get <var> value
     *
     * @return string
     */
    public function getVar(){
      return $this->_get(18);
    }
    
    /**
     * Set <var> value
     *
     * @param string $value
     * @return \RO\Cmd\EggData
     */
    public function setVar( $value){
      return $this->_set(18, $value);
    }
    
    /**
     * Check if <skillids> has a value
     *
     * @return boolean
     */
    public function hasSkillids(){
      return $this->_has(19);
    }
    
    /**
     * Clear <skillids> value
     *
     * @return \RO\Cmd\EggData
     */
    public function clearSkillids(){
      return $this->_clear(19);
    }
    
    /**
     * Get <skillids> value
     *
     * @param int $idx
     * @return int
     */
    public function getSkillids($idx = NULL){
      return $this->_get(19, $idx);
    }
    
    /**
     * Set <skillids> value
     *
     * @param int $value
     * @return \RO\Cmd\EggData
     */
    public function setSkillids( $value, $idx = NULL){
      return $this->_set(19, $value, $idx);
    }
    
    /**
     * Get all elements of <skillids>
     *
     * @return int[]
     */
    public function getSkillidsList(){
     return $this->_get(19);
    }
    
    /**
     * Add a new element to <skillids>
     *
     * @param int $value
     * @return \RO\Cmd\EggData
     */
    public function addSkillids( $value){
     return $this->_add(19, $value);
    }
    
    /**
     * Check if <equips> has a value
     *
     * @return boolean
     */
    public function hasEquips(){
      return $this->_has(20);
    }
    
    /**
     * Clear <equips> value
     *
     * @return \RO\Cmd\EggData
     */
    public function clearEquips(){
      return $this->_clear(20);
    }
    
    /**
     * Get <equips> value
     *
     * @param int $idx
     * @return \RO\Cmd\EggEquip
     */
    public function getEquips($idx = NULL){
      return $this->_get(20, $idx);
    }
    
    /**
     * Set <equips> value
     *
     * @param \RO\Cmd\EggEquip $value
     * @return \RO\Cmd\EggData
     */
    public function setEquips(\RO\Cmd\EggEquip $value, $idx = NULL){
      return $this->_set(20, $value, $idx);
    }
    
    /**
     * Get all elements of <equips>
     *
     * @return \RO\Cmd\EggEquip[]
     */
    public function getEquipsList(){
     return $this->_get(20);
    }
    
    /**
     * Add a new element to <equips>
     *
     * @param \RO\Cmd\EggEquip $value
     * @return \RO\Cmd\EggData
     */
    public function addEquips(\RO\Cmd\EggEquip $value){
     return $this->_add(20, $value);
    }
    
    /**
     * Check if <buff> has a value
     *
     * @return boolean
     */
    public function hasBuff(){
      return $this->_has(21);
    }
    
    /**
     * Clear <buff> value
     *
     * @return \RO\Cmd\EggData
     */
    public function clearBuff(){
      return $this->_clear(21);
    }
    
    /**
     * Get <buff> value
     *
     * @return string
     */
    public function getBuff(){
      return $this->_get(21);
    }
    
    /**
     * Set <buff> value
     *
     * @param string $value
     * @return \RO\Cmd\EggData
     */
    public function setBuff( $value){
      return $this->_set(21, $value);
    }
    
    /**
     * Check if <unlock_equip> has a value
     *
     * @return boolean
     */
    public function hasUnlockEquip(){
      return $this->_has(24);
    }
    
    /**
     * Clear <unlock_equip> value
     *
     * @return \RO\Cmd\EggData
     */
    public function clearUnlockEquip(){
      return $this->_clear(24);
    }
    
    /**
     * Get <unlock_equip> value
     *
     * @param int $idx
     * @return int
     */
    public function getUnlockEquip($idx = NULL){
      return $this->_get(24, $idx);
    }
    
    /**
     * Set <unlock_equip> value
     *
     * @param int $value
     * @return \RO\Cmd\EggData
     */
    public function setUnlockEquip( $value, $idx = NULL){
      return $this->_set(24, $value, $idx);
    }
    
    /**
     * Get all elements of <unlock_equip>
     *
     * @return int[]
     */
    public function getUnlockEquipList(){
     return $this->_get(24);
    }
    
    /**
     * Add a new element to <unlock_equip>
     *
     * @param int $value
     * @return \RO\Cmd\EggData
     */
    public function addUnlockEquip( $value){
     return $this->_add(24, $value);
    }
    
    /**
     * Check if <unlock_body> has a value
     *
     * @return boolean
     */
    public function hasUnlockBody(){
      return $this->_has(25);
    }
    
    /**
     * Clear <unlock_body> value
     *
     * @return \RO\Cmd\EggData
     */
    public function clearUnlockBody(){
      return $this->_clear(25);
    }
    
    /**
     * Get <unlock_body> value
     *
     * @param int $idx
     * @return int
     */
    public function getUnlockBody($idx = NULL){
      return $this->_get(25, $idx);
    }
    
    /**
     * Set <unlock_body> value
     *
     * @param int $value
     * @return \RO\Cmd\EggData
     */
    public function setUnlockBody( $value, $idx = NULL){
      return $this->_set(25, $value, $idx);
    }
    
    /**
     * Get all elements of <unlock_body>
     *
     * @return int[]
     */
    public function getUnlockBodyList(){
     return $this->_get(25);
    }
    
    /**
     * Add a new element to <unlock_body>
     *
     * @param int $value
     * @return \RO\Cmd\EggData
     */
    public function addUnlockBody( $value){
     return $this->_add(25, $value);
    }
    
    /**
     * Check if <version> has a value
     *
     * @return boolean
     */
    public function hasVersion(){
      return $this->_has(26);
    }
    
    /**
     * Clear <version> value
     *
     * @return \RO\Cmd\EggData
     */
    public function clearVersion(){
      return $this->_clear(26);
    }
    
    /**
     * Get <version> value
     *
     * @return int
     */
    public function getVersion(){
      return $this->_get(26);
    }
    
    /**
     * Set <version> value
     *
     * @param int $value
     * @return \RO\Cmd\EggData
     */
    public function setVersion( $value){
      return $this->_set(26, $value);
    }
    
    /**
     * Check if <skilloff> has a value
     *
     * @return boolean
     */
    public function hasSkilloff(){
      return $this->_has(27);
    }
    
    /**
     * Clear <skilloff> value
     *
     * @return \RO\Cmd\EggData
     */
    public function clearSkilloff(){
      return $this->_clear(27);
    }
    
    /**
     * Get <skilloff> value
     *
     * @return boolean
     */
    public function getSkilloff(){
      return $this->_get(27);
    }
    
    /**
     * Set <skilloff> value
     *
     * @param boolean $value
     * @return \RO\Cmd\EggData
     */
    public function setSkilloff( $value){
      return $this->_set(27, $value);
    }
    
    /**
     * Check if <exchange_count> has a value
     *
     * @return boolean
     */
    public function hasExchangeCount(){
      return $this->_has(28);
    }
    
    /**
     * Clear <exchange_count> value
     *
     * @return \RO\Cmd\EggData
     */
    public function clearExchangeCount(){
      return $this->_clear(28);
    }
    
    /**
     * Get <exchange_count> value
     *
     * @return int
     */
    public function getExchangeCount(){
      return $this->_get(28);
    }
    
    /**
     * Set <exchange_count> value
     *
     * @param int $value
     * @return \RO\Cmd\EggData
     */
    public function setExchangeCount( $value){
      return $this->_set(28, $value);
    }
    
    /**
     * Check if <guid> has a value
     *
     * @return boolean
     */
    public function hasGuid(){
      return $this->_has(29);
    }
    
    /**
     * Clear <guid> value
     *
     * @return \RO\Cmd\EggData
     */
    public function clearGuid(){
      return $this->_clear(29);
    }
    
    /**
     * Get <guid> value
     *
     * @return string
     */
    public function getGuid(){
      return $this->_get(29);
    }
    
    /**
     * Set <guid> value
     *
     * @param string $value
     * @return \RO\Cmd\EggData
     */
    public function setGuid( $value){
      return $this->_set(29, $value);
    }
    
    /**
     * Check if <defaultwears> has a value
     *
     * @return boolean
     */
    public function hasDefaultwears(){
      return $this->_has(30);
    }
    
    /**
     * Clear <defaultwears> value
     *
     * @return \RO\Cmd\EggData
     */
    public function clearDefaultwears(){
      return $this->_clear(30);
    }
    
    /**
     * Get <defaultwears> value
     *
     * @param int $idx
     * @return \RO\Cmd\PetEquipData
     */
    public function getDefaultwears($idx = NULL){
      return $this->_get(30, $idx);
    }
    
    /**
     * Set <defaultwears> value
     *
     * @param \RO\Cmd\PetEquipData $value
     * @return \RO\Cmd\EggData
     */
    public function setDefaultwears(\RO\Cmd\PetEquipData $value, $idx = NULL){
      return $this->_set(30, $value, $idx);
    }
    
    /**
     * Get all elements of <defaultwears>
     *
     * @return \RO\Cmd\PetEquipData[]
     */
    public function getDefaultwearsList(){
     return $this->_get(30);
    }
    
    /**
     * Add a new element to <defaultwears>
     *
     * @param \RO\Cmd\PetEquipData $value
     * @return \RO\Cmd\EggData
     */
    public function addDefaultwears(\RO\Cmd\PetEquipData $value){
     return $this->_add(30, $value);
    }
    
    /**
     * Check if <wears> has a value
     *
     * @return boolean
     */
    public function hasWears(){
      return $this->_has(31);
    }
    
    /**
     * Clear <wears> value
     *
     * @return \RO\Cmd\EggData
     */
    public function clearWears(){
      return $this->_clear(31);
    }
    
    /**
     * Get <wears> value
     *
     * @param int $idx
     * @return \RO\Cmd\PetEquipData
     */
    public function getWears($idx = NULL){
      return $this->_get(31, $idx);
    }
    
    /**
     * Set <wears> value
     *
     * @param \RO\Cmd\PetEquipData $value
     * @return \RO\Cmd\EggData
     */
    public function setWears(\RO\Cmd\PetEquipData $value, $idx = NULL){
      return $this->_set(31, $value, $idx);
    }
    
    /**
     * Get all elements of <wears>
     *
     * @return \RO\Cmd\PetEquipData[]
     */
    public function getWearsList(){
     return $this->_get(31);
    }
    
    /**
     * Add a new element to <wears>
     *
     * @param \RO\Cmd\PetEquipData $value
     * @return \RO\Cmd\EggData
     */
    public function addWears(\RO\Cmd\PetEquipData $value){
     return $this->_add(31, $value);
    }
  }
}

