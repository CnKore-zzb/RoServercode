<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: SceneItem.proto

namespace RO\Cmd {

  class EquipStrength extends \DrSlump\Protobuf\Message {

    /**  @var int - \RO\Cmd\Command */
    public $cmd = \RO\Cmd\Command::SCENE_USER_ITEM_PROTOCMD;
    
    /**  @var int - \RO\Cmd\ItemParam */
    public $param = \RO\Cmd\ItemParam::ITEMPARAM_EQUIPSTRENGTH;
    
    /**  @var string */
    public $guid = null;
    
    /**  @var int */
    public $destcount = 0;
    
    /**  @var int */
    public $count = 0;
    
    /**  @var int */
    public $cricount = 0;
    
    /**  @var int */
    public $oldlv = 0;
    
    /**  @var int */
    public $newlv = 0;
    
    /**  @var int - \RO\Cmd\EStrengthResult */
    public $result = \RO\Cmd\EStrengthResult::ESTRENGTHRESULT_MIN;
    
    /**  @var int - \RO\Cmd\EStrengthType */
    public $type = \RO\Cmd\EStrengthType::ESTRENGTHTYPE_MIN;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.EquipStrength');

      // OPTIONAL ENUM cmd = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "cmd";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\Command';
      $f->default   = \RO\Cmd\Command::SCENE_USER_ITEM_PROTOCMD;
      $descriptor->addField($f);

      // OPTIONAL ENUM param = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "param";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\ItemParam';
      $f->default   = \RO\Cmd\ItemParam::ITEMPARAM_EQUIPSTRENGTH;
      $descriptor->addField($f);

      // OPTIONAL STRING guid = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "guid";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 destcount = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "destcount";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 count = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "count";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 cricount = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "cricount";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 oldlv = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "oldlv";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 newlv = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "newlv";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL ENUM result = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "result";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\EStrengthResult';
      $f->default   = \RO\Cmd\EStrengthResult::ESTRENGTHRESULT_MIN;
      $descriptor->addField($f);

      // OPTIONAL ENUM type = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\EStrengthType';
      $f->default   = \RO\Cmd\EStrengthType::ESTRENGTHTYPE_MIN;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <cmd> has a value
     *
     * @return boolean
     */
    public function hasCmd(){
      return $this->_has(1);
    }
    
    /**
     * Clear <cmd> value
     *
     * @return \RO\Cmd\EquipStrength
     */
    public function clearCmd(){
      return $this->_clear(1);
    }
    
    /**
     * Get <cmd> value
     *
     * @return int - \RO\Cmd\Command
     */
    public function getCmd(){
      return $this->_get(1);
    }
    
    /**
     * Set <cmd> value
     *
     * @param int - \RO\Cmd\Command $value
     * @return \RO\Cmd\EquipStrength
     */
    public function setCmd( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <param> has a value
     *
     * @return boolean
     */
    public function hasParam(){
      return $this->_has(2);
    }
    
    /**
     * Clear <param> value
     *
     * @return \RO\Cmd\EquipStrength
     */
    public function clearParam(){
      return $this->_clear(2);
    }
    
    /**
     * Get <param> value
     *
     * @return int - \RO\Cmd\ItemParam
     */
    public function getParam(){
      return $this->_get(2);
    }
    
    /**
     * Set <param> value
     *
     * @param int - \RO\Cmd\ItemParam $value
     * @return \RO\Cmd\EquipStrength
     */
    public function setParam( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <guid> has a value
     *
     * @return boolean
     */
    public function hasGuid(){
      return $this->_has(3);
    }
    
    /**
     * Clear <guid> value
     *
     * @return \RO\Cmd\EquipStrength
     */
    public function clearGuid(){
      return $this->_clear(3);
    }
    
    /**
     * Get <guid> value
     *
     * @return string
     */
    public function getGuid(){
      return $this->_get(3);
    }
    
    /**
     * Set <guid> value
     *
     * @param string $value
     * @return \RO\Cmd\EquipStrength
     */
    public function setGuid( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <destcount> has a value
     *
     * @return boolean
     */
    public function hasDestcount(){
      return $this->_has(4);
    }
    
    /**
     * Clear <destcount> value
     *
     * @return \RO\Cmd\EquipStrength
     */
    public function clearDestcount(){
      return $this->_clear(4);
    }
    
    /**
     * Get <destcount> value
     *
     * @return int
     */
    public function getDestcount(){
      return $this->_get(4);
    }
    
    /**
     * Set <destcount> value
     *
     * @param int $value
     * @return \RO\Cmd\EquipStrength
     */
    public function setDestcount( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <count> has a value
     *
     * @return boolean
     */
    public function hasCount(){
      return $this->_has(5);
    }
    
    /**
     * Clear <count> value
     *
     * @return \RO\Cmd\EquipStrength
     */
    public function clearCount(){
      return $this->_clear(5);
    }
    
    /**
     * Get <count> value
     *
     * @return int
     */
    public function getCount(){
      return $this->_get(5);
    }
    
    /**
     * Set <count> value
     *
     * @param int $value
     * @return \RO\Cmd\EquipStrength
     */
    public function setCount( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <cricount> has a value
     *
     * @return boolean
     */
    public function hasCricount(){
      return $this->_has(6);
    }
    
    /**
     * Clear <cricount> value
     *
     * @return \RO\Cmd\EquipStrength
     */
    public function clearCricount(){
      return $this->_clear(6);
    }
    
    /**
     * Get <cricount> value
     *
     * @return int
     */
    public function getCricount(){
      return $this->_get(6);
    }
    
    /**
     * Set <cricount> value
     *
     * @param int $value
     * @return \RO\Cmd\EquipStrength
     */
    public function setCricount( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <oldlv> has a value
     *
     * @return boolean
     */
    public function hasOldlv(){
      return $this->_has(7);
    }
    
    /**
     * Clear <oldlv> value
     *
     * @return \RO\Cmd\EquipStrength
     */
    public function clearOldlv(){
      return $this->_clear(7);
    }
    
    /**
     * Get <oldlv> value
     *
     * @return int
     */
    public function getOldlv(){
      return $this->_get(7);
    }
    
    /**
     * Set <oldlv> value
     *
     * @param int $value
     * @return \RO\Cmd\EquipStrength
     */
    public function setOldlv( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <newlv> has a value
     *
     * @return boolean
     */
    public function hasNewlv(){
      return $this->_has(8);
    }
    
    /**
     * Clear <newlv> value
     *
     * @return \RO\Cmd\EquipStrength
     */
    public function clearNewlv(){
      return $this->_clear(8);
    }
    
    /**
     * Get <newlv> value
     *
     * @return int
     */
    public function getNewlv(){
      return $this->_get(8);
    }
    
    /**
     * Set <newlv> value
     *
     * @param int $value
     * @return \RO\Cmd\EquipStrength
     */
    public function setNewlv( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <result> has a value
     *
     * @return boolean
     */
    public function hasResult(){
      return $this->_has(9);
    }
    
    /**
     * Clear <result> value
     *
     * @return \RO\Cmd\EquipStrength
     */
    public function clearResult(){
      return $this->_clear(9);
    }
    
    /**
     * Get <result> value
     *
     * @return int - \RO\Cmd\EStrengthResult
     */
    public function getResult(){
      return $this->_get(9);
    }
    
    /**
     * Set <result> value
     *
     * @param int - \RO\Cmd\EStrengthResult $value
     * @return \RO\Cmd\EquipStrength
     */
    public function setResult( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(10);
    }
    
    /**
     * Clear <type> value
     *
     * @return \RO\Cmd\EquipStrength
     */
    public function clearType(){
      return $this->_clear(10);
    }
    
    /**
     * Get <type> value
     *
     * @return int - \RO\Cmd\EStrengthType
     */
    public function getType(){
      return $this->_get(10);
    }
    
    /**
     * Set <type> value
     *
     * @param int - \RO\Cmd\EStrengthType $value
     * @return \RO\Cmd\EquipStrength
     */
    public function setType( $value){
      return $this->_set(10, $value);
    }
  }
}

