<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: RecordCmd.proto

namespace RO\Cmd {

  class UserRoleData extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $jobExp = 0;
    
    /**  @var int */
    public $jobLv = 0;
    
    /**  @var int - \RO\Cmd\EProfession */
    public $profession = \RO\Cmd\EProfession::EPROFESSION_MIN;
    
    /**  @var int */
    public $strPoint = 0;
    
    /**  @var int */
    public $intPoint = 0;
    
    /**  @var int */
    public $agiPoint = 0;
    
    /**  @var int */
    public $dexPoint = 0;
    
    /**  @var int */
    public $vitPoint = 0;
    
    /**  @var int */
    public $lukPoint = 0;
    
    /**  @var int */
    public $totalPoint = 0;
    
    /**  @var int */
    public $usedPoint = 0;
    
    /**  @var int */
    public $hp = 0;
    
    /**  @var int */
    public $sp = 0;
    
    /**  @var \RO\Cmd\UserSkillData */
    public $skill = null;
    
    /**  @var int[]  */
    public $unlocklv = array();
    
    /**  @var int */
    public $maxjoblv = 0;
    
    /**  @var int */
    public $branch = 0;
    
    /**  @var boolean */
    public $isbuy = false;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.UserRoleData');

      // OPTIONAL UINT64 jobExp = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "jobExp";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 jobLv = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "jobLv";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL ENUM profession = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "profession";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\EProfession';
      $f->default   = \RO\Cmd\EProfession::EPROFESSION_MIN;
      $descriptor->addField($f);

      // OPTIONAL UINT32 strPoint = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "strPoint";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 intPoint = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "intPoint";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 agiPoint = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "agiPoint";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 dexPoint = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "dexPoint";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 vitPoint = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "vitPoint";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 lukPoint = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "lukPoint";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 totalPoint = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "totalPoint";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 usedPoint = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "usedPoint";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 hp = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "hp";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 sp = 13
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 13;
      $f->name      = "sp";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE skill = 14
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 14;
      $f->name      = "skill";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\UserSkillData';
      $descriptor->addField($f);

      // REPEATED UINT32 unlocklv = 15
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 15;
      $f->name      = "unlocklv";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL UINT32 maxjoblv = 16
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 16;
      $f->name      = "maxjoblv";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 branch = 17
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 17;
      $f->name      = "branch";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL BOOL isbuy = 18
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 18;
      $f->name      = "isbuy";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = false;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <jobExp> has a value
     *
     * @return boolean
     */
    public function hasJobExp(){
      return $this->_has(1);
    }
    
    /**
     * Clear <jobExp> value
     *
     * @return \RO\Cmd\UserRoleData
     */
    public function clearJobExp(){
      return $this->_clear(1);
    }
    
    /**
     * Get <jobExp> value
     *
     * @return int
     */
    public function getJobExp(){
      return $this->_get(1);
    }
    
    /**
     * Set <jobExp> value
     *
     * @param int $value
     * @return \RO\Cmd\UserRoleData
     */
    public function setJobExp( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <jobLv> has a value
     *
     * @return boolean
     */
    public function hasJobLv(){
      return $this->_has(2);
    }
    
    /**
     * Clear <jobLv> value
     *
     * @return \RO\Cmd\UserRoleData
     */
    public function clearJobLv(){
      return $this->_clear(2);
    }
    
    /**
     * Get <jobLv> value
     *
     * @return int
     */
    public function getJobLv(){
      return $this->_get(2);
    }
    
    /**
     * Set <jobLv> value
     *
     * @param int $value
     * @return \RO\Cmd\UserRoleData
     */
    public function setJobLv( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <profession> has a value
     *
     * @return boolean
     */
    public function hasProfession(){
      return $this->_has(3);
    }
    
    /**
     * Clear <profession> value
     *
     * @return \RO\Cmd\UserRoleData
     */
    public function clearProfession(){
      return $this->_clear(3);
    }
    
    /**
     * Get <profession> value
     *
     * @return int - \RO\Cmd\EProfession
     */
    public function getProfession(){
      return $this->_get(3);
    }
    
    /**
     * Set <profession> value
     *
     * @param int - \RO\Cmd\EProfession $value
     * @return \RO\Cmd\UserRoleData
     */
    public function setProfession( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <strPoint> has a value
     *
     * @return boolean
     */
    public function hasStrPoint(){
      return $this->_has(4);
    }
    
    /**
     * Clear <strPoint> value
     *
     * @return \RO\Cmd\UserRoleData
     */
    public function clearStrPoint(){
      return $this->_clear(4);
    }
    
    /**
     * Get <strPoint> value
     *
     * @return int
     */
    public function getStrPoint(){
      return $this->_get(4);
    }
    
    /**
     * Set <strPoint> value
     *
     * @param int $value
     * @return \RO\Cmd\UserRoleData
     */
    public function setStrPoint( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <intPoint> has a value
     *
     * @return boolean
     */
    public function hasIntPoint(){
      return $this->_has(5);
    }
    
    /**
     * Clear <intPoint> value
     *
     * @return \RO\Cmd\UserRoleData
     */
    public function clearIntPoint(){
      return $this->_clear(5);
    }
    
    /**
     * Get <intPoint> value
     *
     * @return int
     */
    public function getIntPoint(){
      return $this->_get(5);
    }
    
    /**
     * Set <intPoint> value
     *
     * @param int $value
     * @return \RO\Cmd\UserRoleData
     */
    public function setIntPoint( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <agiPoint> has a value
     *
     * @return boolean
     */
    public function hasAgiPoint(){
      return $this->_has(6);
    }
    
    /**
     * Clear <agiPoint> value
     *
     * @return \RO\Cmd\UserRoleData
     */
    public function clearAgiPoint(){
      return $this->_clear(6);
    }
    
    /**
     * Get <agiPoint> value
     *
     * @return int
     */
    public function getAgiPoint(){
      return $this->_get(6);
    }
    
    /**
     * Set <agiPoint> value
     *
     * @param int $value
     * @return \RO\Cmd\UserRoleData
     */
    public function setAgiPoint( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <dexPoint> has a value
     *
     * @return boolean
     */
    public function hasDexPoint(){
      return $this->_has(7);
    }
    
    /**
     * Clear <dexPoint> value
     *
     * @return \RO\Cmd\UserRoleData
     */
    public function clearDexPoint(){
      return $this->_clear(7);
    }
    
    /**
     * Get <dexPoint> value
     *
     * @return int
     */
    public function getDexPoint(){
      return $this->_get(7);
    }
    
    /**
     * Set <dexPoint> value
     *
     * @param int $value
     * @return \RO\Cmd\UserRoleData
     */
    public function setDexPoint( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <vitPoint> has a value
     *
     * @return boolean
     */
    public function hasVitPoint(){
      return $this->_has(8);
    }
    
    /**
     * Clear <vitPoint> value
     *
     * @return \RO\Cmd\UserRoleData
     */
    public function clearVitPoint(){
      return $this->_clear(8);
    }
    
    /**
     * Get <vitPoint> value
     *
     * @return int
     */
    public function getVitPoint(){
      return $this->_get(8);
    }
    
    /**
     * Set <vitPoint> value
     *
     * @param int $value
     * @return \RO\Cmd\UserRoleData
     */
    public function setVitPoint( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <lukPoint> has a value
     *
     * @return boolean
     */
    public function hasLukPoint(){
      return $this->_has(9);
    }
    
    /**
     * Clear <lukPoint> value
     *
     * @return \RO\Cmd\UserRoleData
     */
    public function clearLukPoint(){
      return $this->_clear(9);
    }
    
    /**
     * Get <lukPoint> value
     *
     * @return int
     */
    public function getLukPoint(){
      return $this->_get(9);
    }
    
    /**
     * Set <lukPoint> value
     *
     * @param int $value
     * @return \RO\Cmd\UserRoleData
     */
    public function setLukPoint( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <totalPoint> has a value
     *
     * @return boolean
     */
    public function hasTotalPoint(){
      return $this->_has(10);
    }
    
    /**
     * Clear <totalPoint> value
     *
     * @return \RO\Cmd\UserRoleData
     */
    public function clearTotalPoint(){
      return $this->_clear(10);
    }
    
    /**
     * Get <totalPoint> value
     *
     * @return int
     */
    public function getTotalPoint(){
      return $this->_get(10);
    }
    
    /**
     * Set <totalPoint> value
     *
     * @param int $value
     * @return \RO\Cmd\UserRoleData
     */
    public function setTotalPoint( $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <usedPoint> has a value
     *
     * @return boolean
     */
    public function hasUsedPoint(){
      return $this->_has(11);
    }
    
    /**
     * Clear <usedPoint> value
     *
     * @return \RO\Cmd\UserRoleData
     */
    public function clearUsedPoint(){
      return $this->_clear(11);
    }
    
    /**
     * Get <usedPoint> value
     *
     * @return int
     */
    public function getUsedPoint(){
      return $this->_get(11);
    }
    
    /**
     * Set <usedPoint> value
     *
     * @param int $value
     * @return \RO\Cmd\UserRoleData
     */
    public function setUsedPoint( $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <hp> has a value
     *
     * @return boolean
     */
    public function hasHp(){
      return $this->_has(12);
    }
    
    /**
     * Clear <hp> value
     *
     * @return \RO\Cmd\UserRoleData
     */
    public function clearHp(){
      return $this->_clear(12);
    }
    
    /**
     * Get <hp> value
     *
     * @return int
     */
    public function getHp(){
      return $this->_get(12);
    }
    
    /**
     * Set <hp> value
     *
     * @param int $value
     * @return \RO\Cmd\UserRoleData
     */
    public function setHp( $value){
      return $this->_set(12, $value);
    }
    
    /**
     * Check if <sp> has a value
     *
     * @return boolean
     */
    public function hasSp(){
      return $this->_has(13);
    }
    
    /**
     * Clear <sp> value
     *
     * @return \RO\Cmd\UserRoleData
     */
    public function clearSp(){
      return $this->_clear(13);
    }
    
    /**
     * Get <sp> value
     *
     * @return int
     */
    public function getSp(){
      return $this->_get(13);
    }
    
    /**
     * Set <sp> value
     *
     * @param int $value
     * @return \RO\Cmd\UserRoleData
     */
    public function setSp( $value){
      return $this->_set(13, $value);
    }
    
    /**
     * Check if <skill> has a value
     *
     * @return boolean
     */
    public function hasSkill(){
      return $this->_has(14);
    }
    
    /**
     * Clear <skill> value
     *
     * @return \RO\Cmd\UserRoleData
     */
    public function clearSkill(){
      return $this->_clear(14);
    }
    
    /**
     * Get <skill> value
     *
     * @return \RO\Cmd\UserSkillData
     */
    public function getSkill(){
      return $this->_get(14);
    }
    
    /**
     * Set <skill> value
     *
     * @param \RO\Cmd\UserSkillData $value
     * @return \RO\Cmd\UserRoleData
     */
    public function setSkill(\RO\Cmd\UserSkillData $value){
      return $this->_set(14, $value);
    }
    
    /**
     * Check if <unlocklv> has a value
     *
     * @return boolean
     */
    public function hasUnlocklv(){
      return $this->_has(15);
    }
    
    /**
     * Clear <unlocklv> value
     *
     * @return \RO\Cmd\UserRoleData
     */
    public function clearUnlocklv(){
      return $this->_clear(15);
    }
    
    /**
     * Get <unlocklv> value
     *
     * @param int $idx
     * @return int
     */
    public function getUnlocklv($idx = NULL){
      return $this->_get(15, $idx);
    }
    
    /**
     * Set <unlocklv> value
     *
     * @param int $value
     * @return \RO\Cmd\UserRoleData
     */
    public function setUnlocklv( $value, $idx = NULL){
      return $this->_set(15, $value, $idx);
    }
    
    /**
     * Get all elements of <unlocklv>
     *
     * @return int[]
     */
    public function getUnlocklvList(){
     return $this->_get(15);
    }
    
    /**
     * Add a new element to <unlocklv>
     *
     * @param int $value
     * @return \RO\Cmd\UserRoleData
     */
    public function addUnlocklv( $value){
     return $this->_add(15, $value);
    }
    
    /**
     * Check if <maxjoblv> has a value
     *
     * @return boolean
     */
    public function hasMaxjoblv(){
      return $this->_has(16);
    }
    
    /**
     * Clear <maxjoblv> value
     *
     * @return \RO\Cmd\UserRoleData
     */
    public function clearMaxjoblv(){
      return $this->_clear(16);
    }
    
    /**
     * Get <maxjoblv> value
     *
     * @return int
     */
    public function getMaxjoblv(){
      return $this->_get(16);
    }
    
    /**
     * Set <maxjoblv> value
     *
     * @param int $value
     * @return \RO\Cmd\UserRoleData
     */
    public function setMaxjoblv( $value){
      return $this->_set(16, $value);
    }
    
    /**
     * Check if <branch> has a value
     *
     * @return boolean
     */
    public function hasBranch(){
      return $this->_has(17);
    }
    
    /**
     * Clear <branch> value
     *
     * @return \RO\Cmd\UserRoleData
     */
    public function clearBranch(){
      return $this->_clear(17);
    }
    
    /**
     * Get <branch> value
     *
     * @return int
     */
    public function getBranch(){
      return $this->_get(17);
    }
    
    /**
     * Set <branch> value
     *
     * @param int $value
     * @return \RO\Cmd\UserRoleData
     */
    public function setBranch( $value){
      return $this->_set(17, $value);
    }
    
    /**
     * Check if <isbuy> has a value
     *
     * @return boolean
     */
    public function hasIsbuy(){
      return $this->_has(18);
    }
    
    /**
     * Clear <isbuy> value
     *
     * @return \RO\Cmd\UserRoleData
     */
    public function clearIsbuy(){
      return $this->_clear(18);
    }
    
    /**
     * Get <isbuy> value
     *
     * @return boolean
     */
    public function getIsbuy(){
      return $this->_get(18);
    }
    
    /**
     * Set <isbuy> value
     *
     * @param boolean $value
     * @return \RO\Cmd\UserRoleData
     */
    public function setIsbuy( $value){
      return $this->_set(18, $value);
    }
  }
}

