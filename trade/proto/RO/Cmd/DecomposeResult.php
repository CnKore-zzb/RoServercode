<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: SceneItem.proto

namespace RO\Cmd {

  class DecomposeResult extends \DrSlump\Protobuf\Message {

    /**  @var \RO\Cmd\ItemInfo */
    public $item = null;
    
    /**  @var int */
    public $rate = 0;
    
    /**  @var int */
    public $min_count = 0;
    
    /**  @var int */
    public $max_count = 0;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.DecomposeResult');

      // OPTIONAL MESSAGE item = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "item";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\ItemInfo';
      $descriptor->addField($f);

      // OPTIONAL UINT32 rate = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "rate";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 min_count = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "min_count";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 max_count = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "max_count";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <item> has a value
     *
     * @return boolean
     */
    public function hasItem(){
      return $this->_has(1);
    }
    
    /**
     * Clear <item> value
     *
     * @return \RO\Cmd\DecomposeResult
     */
    public function clearItem(){
      return $this->_clear(1);
    }
    
    /**
     * Get <item> value
     *
     * @return \RO\Cmd\ItemInfo
     */
    public function getItem(){
      return $this->_get(1);
    }
    
    /**
     * Set <item> value
     *
     * @param \RO\Cmd\ItemInfo $value
     * @return \RO\Cmd\DecomposeResult
     */
    public function setItem(\RO\Cmd\ItemInfo $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <rate> has a value
     *
     * @return boolean
     */
    public function hasRate(){
      return $this->_has(2);
    }
    
    /**
     * Clear <rate> value
     *
     * @return \RO\Cmd\DecomposeResult
     */
    public function clearRate(){
      return $this->_clear(2);
    }
    
    /**
     * Get <rate> value
     *
     * @return int
     */
    public function getRate(){
      return $this->_get(2);
    }
    
    /**
     * Set <rate> value
     *
     * @param int $value
     * @return \RO\Cmd\DecomposeResult
     */
    public function setRate( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <min_count> has a value
     *
     * @return boolean
     */
    public function hasMinCount(){
      return $this->_has(3);
    }
    
    /**
     * Clear <min_count> value
     *
     * @return \RO\Cmd\DecomposeResult
     */
    public function clearMinCount(){
      return $this->_clear(3);
    }
    
    /**
     * Get <min_count> value
     *
     * @return int
     */
    public function getMinCount(){
      return $this->_get(3);
    }
    
    /**
     * Set <min_count> value
     *
     * @param int $value
     * @return \RO\Cmd\DecomposeResult
     */
    public function setMinCount( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <max_count> has a value
     *
     * @return boolean
     */
    public function hasMaxCount(){
      return $this->_has(4);
    }
    
    /**
     * Clear <max_count> value
     *
     * @return \RO\Cmd\DecomposeResult
     */
    public function clearMaxCount(){
      return $this->_clear(4);
    }
    
    /**
     * Get <max_count> value
     *
     * @return int
     */
    public function getMaxCount(){
      return $this->_get(4);
    }
    
    /**
     * Set <max_count> value
     *
     * @param int $value
     * @return \RO\Cmd\DecomposeResult
     */
    public function setMaxCount( $value){
      return $this->_set(4, $value);
    }
  }
}

