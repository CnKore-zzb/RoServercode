<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: RecordCmd.proto

namespace RO\Cmd {

  class BlobFighter extends \DrSlump\Protobuf\Message {

    /**  @var \RO\Cmd\UserRoleData[]  */
    public $datas = array();
    
    /**  @var int */
    public $totalpoint = 0;
    
    /**  @var int */
    public $maxskillpos = 0;
    
    /**  @var int */
    public $maxautopos = 0;
    
    /**  @var int */
    public $maxextendpos = 0;
    
    /**  @var int */
    public $maxjoblv = 0;
    
    /**  @var int */
    public $maxcurjoblv = 0;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.BlobFighter');

      // REPEATED MESSAGE datas = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "datas";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\UserRoleData';
      $descriptor->addField($f);

      // OPTIONAL UINT32 totalpoint = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "totalpoint";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 maxskillpos = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "maxskillpos";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 maxautopos = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "maxautopos";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 maxextendpos = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "maxextendpos";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 maxjoblv = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "maxjoblv";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 maxcurjoblv = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "maxcurjoblv";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <datas> has a value
     *
     * @return boolean
     */
    public function hasDatas(){
      return $this->_has(1);
    }
    
    /**
     * Clear <datas> value
     *
     * @return \RO\Cmd\BlobFighter
     */
    public function clearDatas(){
      return $this->_clear(1);
    }
    
    /**
     * Get <datas> value
     *
     * @param int $idx
     * @return \RO\Cmd\UserRoleData
     */
    public function getDatas($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <datas> value
     *
     * @param \RO\Cmd\UserRoleData $value
     * @return \RO\Cmd\BlobFighter
     */
    public function setDatas(\RO\Cmd\UserRoleData $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <datas>
     *
     * @return \RO\Cmd\UserRoleData[]
     */
    public function getDatasList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <datas>
     *
     * @param \RO\Cmd\UserRoleData $value
     * @return \RO\Cmd\BlobFighter
     */
    public function addDatas(\RO\Cmd\UserRoleData $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <totalpoint> has a value
     *
     * @return boolean
     */
    public function hasTotalpoint(){
      return $this->_has(2);
    }
    
    /**
     * Clear <totalpoint> value
     *
     * @return \RO\Cmd\BlobFighter
     */
    public function clearTotalpoint(){
      return $this->_clear(2);
    }
    
    /**
     * Get <totalpoint> value
     *
     * @return int
     */
    public function getTotalpoint(){
      return $this->_get(2);
    }
    
    /**
     * Set <totalpoint> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobFighter
     */
    public function setTotalpoint( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <maxskillpos> has a value
     *
     * @return boolean
     */
    public function hasMaxskillpos(){
      return $this->_has(3);
    }
    
    /**
     * Clear <maxskillpos> value
     *
     * @return \RO\Cmd\BlobFighter
     */
    public function clearMaxskillpos(){
      return $this->_clear(3);
    }
    
    /**
     * Get <maxskillpos> value
     *
     * @return int
     */
    public function getMaxskillpos(){
      return $this->_get(3);
    }
    
    /**
     * Set <maxskillpos> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobFighter
     */
    public function setMaxskillpos( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <maxautopos> has a value
     *
     * @return boolean
     */
    public function hasMaxautopos(){
      return $this->_has(4);
    }
    
    /**
     * Clear <maxautopos> value
     *
     * @return \RO\Cmd\BlobFighter
     */
    public function clearMaxautopos(){
      return $this->_clear(4);
    }
    
    /**
     * Get <maxautopos> value
     *
     * @return int
     */
    public function getMaxautopos(){
      return $this->_get(4);
    }
    
    /**
     * Set <maxautopos> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobFighter
     */
    public function setMaxautopos( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <maxextendpos> has a value
     *
     * @return boolean
     */
    public function hasMaxextendpos(){
      return $this->_has(5);
    }
    
    /**
     * Clear <maxextendpos> value
     *
     * @return \RO\Cmd\BlobFighter
     */
    public function clearMaxextendpos(){
      return $this->_clear(5);
    }
    
    /**
     * Get <maxextendpos> value
     *
     * @return int
     */
    public function getMaxextendpos(){
      return $this->_get(5);
    }
    
    /**
     * Set <maxextendpos> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobFighter
     */
    public function setMaxextendpos( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <maxjoblv> has a value
     *
     * @return boolean
     */
    public function hasMaxjoblv(){
      return $this->_has(6);
    }
    
    /**
     * Clear <maxjoblv> value
     *
     * @return \RO\Cmd\BlobFighter
     */
    public function clearMaxjoblv(){
      return $this->_clear(6);
    }
    
    /**
     * Get <maxjoblv> value
     *
     * @return int
     */
    public function getMaxjoblv(){
      return $this->_get(6);
    }
    
    /**
     * Set <maxjoblv> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobFighter
     */
    public function setMaxjoblv( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <maxcurjoblv> has a value
     *
     * @return boolean
     */
    public function hasMaxcurjoblv(){
      return $this->_has(7);
    }
    
    /**
     * Clear <maxcurjoblv> value
     *
     * @return \RO\Cmd\BlobFighter
     */
    public function clearMaxcurjoblv(){
      return $this->_clear(7);
    }
    
    /**
     * Get <maxcurjoblv> value
     *
     * @return int
     */
    public function getMaxcurjoblv(){
      return $this->_get(7);
    }
    
    /**
     * Set <maxcurjoblv> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobFighter
     */
    public function setMaxcurjoblv( $value){
      return $this->_set(7, $value);
    }
  }
}

