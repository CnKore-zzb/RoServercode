<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: SessionMail.proto

namespace RO\Cmd {

  class MailAttach extends \DrSlump\Protobuf\Message {

    /**  @var int - \RO\Cmd\EMailAttachType */
    public $type = \RO\Cmd\EMailAttachType::EMAILATTACHTYPE_MIN;
    
    /**  @var int */
    public $id = 0;
    
    /**  @var \RO\Cmd\ItemInfo[]  */
    public $items = array();
    
    /**  @var \RO\Cmd\ItemData[]  */
    public $itemdatas = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.MailAttach');

      // OPTIONAL ENUM type = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\EMailAttachType';
      $f->default   = \RO\Cmd\EMailAttachType::EMAILATTACHTYPE_MIN;
      $descriptor->addField($f);

      // OPTIONAL UINT32 id = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // REPEATED MESSAGE items = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "items";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\ItemInfo';
      $descriptor->addField($f);

      // REPEATED MESSAGE itemdatas = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "itemdatas";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\ItemData';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(1);
    }
    
    /**
     * Clear <type> value
     *
     * @return \RO\Cmd\MailAttach
     */
    public function clearType(){
      return $this->_clear(1);
    }
    
    /**
     * Get <type> value
     *
     * @return int - \RO\Cmd\EMailAttachType
     */
    public function getType(){
      return $this->_get(1);
    }
    
    /**
     * Set <type> value
     *
     * @param int - \RO\Cmd\EMailAttachType $value
     * @return \RO\Cmd\MailAttach
     */
    public function setType( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <id> value
     *
     * @return \RO\Cmd\MailAttach
     */
    public function clearId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(2);
    }
    
    /**
     * Set <id> value
     *
     * @param int $value
     * @return \RO\Cmd\MailAttach
     */
    public function setId( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <items> has a value
     *
     * @return boolean
     */
    public function hasItems(){
      return $this->_has(3);
    }
    
    /**
     * Clear <items> value
     *
     * @return \RO\Cmd\MailAttach
     */
    public function clearItems(){
      return $this->_clear(3);
    }
    
    /**
     * Get <items> value
     *
     * @param int $idx
     * @return \RO\Cmd\ItemInfo
     */
    public function getItems($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <items> value
     *
     * @param \RO\Cmd\ItemInfo $value
     * @return \RO\Cmd\MailAttach
     */
    public function setItems(\RO\Cmd\ItemInfo $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <items>
     *
     * @return \RO\Cmd\ItemInfo[]
     */
    public function getItemsList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <items>
     *
     * @param \RO\Cmd\ItemInfo $value
     * @return \RO\Cmd\MailAttach
     */
    public function addItems(\RO\Cmd\ItemInfo $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <itemdatas> has a value
     *
     * @return boolean
     */
    public function hasItemdatas(){
      return $this->_has(4);
    }
    
    /**
     * Clear <itemdatas> value
     *
     * @return \RO\Cmd\MailAttach
     */
    public function clearItemdatas(){
      return $this->_clear(4);
    }
    
    /**
     * Get <itemdatas> value
     *
     * @param int $idx
     * @return \RO\Cmd\ItemData
     */
    public function getItemdatas($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <itemdatas> value
     *
     * @param \RO\Cmd\ItemData $value
     * @return \RO\Cmd\MailAttach
     */
    public function setItemdatas(\RO\Cmd\ItemData $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <itemdatas>
     *
     * @return \RO\Cmd\ItemData[]
     */
    public function getItemdatasList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <itemdatas>
     *
     * @param \RO\Cmd\ItemData $value
     * @return \RO\Cmd\MailAttach
     */
    public function addItemdatas(\RO\Cmd\ItemData $value){
     return $this->_add(4, $value);
    }
  }
}

