<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: RecordCmd.proto

namespace RO\Cmd {

  class UserBaseData extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $platformid = 0;
    
    /**  @var int */
    public $zoneid = 0;
    
    /**  @var int */
    public $accid = 0;
    
    /**  @var int */
    public $charid = 0;
    
    /**  @var int */
    public $guildid = 0;
    
    /**  @var string */
    public $name = null;
    
    /**  @var int */
    public $mapid = 0;
    
    /**  @var int */
    public $rolelv = 0;
    
    /**  @var int */
    public $roleexp = 0;
    
    /**  @var int */
    public $charge = 0;
    
    /**  @var int */
    public $diamond = 0;
    
    /**  @var int */
    public $silver = 0;
    
    /**  @var int */
    public $gold = 0;
    
    /**  @var int */
    public $garden = 0;
    
    /**  @var int */
    public $friendship = 0;
    
    /**  @var int */
    public $createTime = 0;
    
    /**  @var int */
    public $onlinetime = 0;
    
    /**  @var int */
    public $offlinetime = 0;
    
    /**  @var int */
    public $addict = 0;
    
    /**  @var int */
    public $battletime = 0;
    
    /**  @var int */
    public $body = 0;
    
    /**  @var int */
    public $addictTipsTime = 0;
    
    /**  @var int */
    public $gagtime = 0;
    
    /**  @var int */
    public $nologintime = 0;
    
    /**  @var int */
    public $rebattletime = 0;
    
    /**  @var int */
    public $usedbattletime = 0;
    
    /**  @var int */
    public $hair = 0;
    
    /**  @var int */
    public $haircolor = 0;
    
    /**  @var int */
    public $lefthand = 0;
    
    /**  @var int */
    public $righthand = 0;
    
    /**  @var int */
    public $head = 0;
    
    /**  @var int */
    public $back = 0;
    
    /**  @var int */
    public $face = 0;
    
    /**  @var int */
    public $tail = 0;
    
    /**  @var int */
    public $mount = 0;
    
    /**  @var int */
    public $title = 0;
    
    /**  @var int */
    public $eye = 0;
    
    /**  @var int */
    public $partnerid = 0;
    
    /**  @var int */
    public $portrait = 0;
    
    /**  @var int */
    public $mouth = 0;
    
    /**  @var int */
    public $clothcolor = 0;
    
    /**  @var int - \RO\Cmd\EGender */
    public $gender = \RO\Cmd\EGender::EGENDER_MIN;
    
    /**  @var int - \RO\Cmd\EProfession */
    public $profession = \RO\Cmd\EProfession::EPROFESSION_MIN;
    
    /**  @var int - \RO\Cmd\EProfession */
    public $destprofession = \RO\Cmd\EProfession::EPROFESSION_MIN;
    
    /**  @var int */
    public $destzoneid = 0;
    
    /**  @var int */
    public $originalzoneid = 0;
    
    /**  @var int */
    public $maxbaselv = 0;
    
    /**  @var string */
    public $lock_reason = null;
    
    /**  @var string */
    public $gag_reason = null;
    
    /**  @var int[]  */
    public $questmapntf = array();
    
    /**  @var int */
    public $maincharid = null;
    
    /**  @var int */
    public $maxpro = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.UserBaseData');

      // OPTIONAL UINT32 platformid = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "platformid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 zoneid = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "zoneid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT64 accid = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "accid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT64 charid = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "charid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT64 guildid = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "guildid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL STRING name = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 mapid = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "mapid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 rolelv = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "rolelv";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT64 roleexp = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "roleexp";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 charge = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "charge";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 diamond = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "diamond";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT64 silver = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "silver";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 gold = 13
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 13;
      $f->name      = "gold";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 garden = 14
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 14;
      $f->name      = "garden";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 friendship = 15
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 15;
      $f->name      = "friendship";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 createTime = 16
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 16;
      $f->name      = "createTime";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 onlinetime = 17
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 17;
      $f->name      = "onlinetime";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 offlinetime = 18
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 18;
      $f->name      = "offlinetime";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 addict = 19
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 19;
      $f->name      = "addict";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 battletime = 20
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 20;
      $f->name      = "battletime";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 body = 21
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 21;
      $f->name      = "body";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 addictTipsTime = 22
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 22;
      $f->name      = "addictTipsTime";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 gagtime = 23
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 23;
      $f->name      = "gagtime";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 nologintime = 24
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 24;
      $f->name      = "nologintime";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 rebattletime = 25
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 25;
      $f->name      = "rebattletime";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 usedbattletime = 26
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 26;
      $f->name      = "usedbattletime";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 hair = 27
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 27;
      $f->name      = "hair";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 haircolor = 28
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 28;
      $f->name      = "haircolor";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 lefthand = 29
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 29;
      $f->name      = "lefthand";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 righthand = 30
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 30;
      $f->name      = "righthand";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 head = 31
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 31;
      $f->name      = "head";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 back = 32
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 32;
      $f->name      = "back";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 face = 33
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 33;
      $f->name      = "face";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 tail = 34
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 34;
      $f->name      = "tail";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 mount = 35
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 35;
      $f->name      = "mount";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 title = 36
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 36;
      $f->name      = "title";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 eye = 37
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 37;
      $f->name      = "eye";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 partnerid = 38
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 38;
      $f->name      = "partnerid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 portrait = 39
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 39;
      $f->name      = "portrait";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 mouth = 40
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 40;
      $f->name      = "mouth";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 clothcolor = 41
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 41;
      $f->name      = "clothcolor";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL ENUM gender = 42
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 42;
      $f->name      = "gender";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\EGender';
      $f->default   = \RO\Cmd\EGender::EGENDER_MIN;
      $descriptor->addField($f);

      // OPTIONAL ENUM profession = 43
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 43;
      $f->name      = "profession";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\EProfession';
      $f->default   = \RO\Cmd\EProfession::EPROFESSION_MIN;
      $descriptor->addField($f);

      // OPTIONAL ENUM destprofession = 44
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 44;
      $f->name      = "destprofession";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\EProfession';
      $f->default   = \RO\Cmd\EProfession::EPROFESSION_MIN;
      $descriptor->addField($f);

      // OPTIONAL UINT32 destzoneid = 45
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 45;
      $f->name      = "destzoneid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 originalzoneid = 46
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 46;
      $f->name      = "originalzoneid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 maxbaselv = 47
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 47;
      $f->name      = "maxbaselv";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL STRING lock_reason = 48
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 48;
      $f->name      = "lock_reason";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING gag_reason = 49
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 49;
      $f->name      = "gag_reason";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED UINT32 questmapntf = 50
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 50;
      $f->name      = "questmapntf";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL UINT64 maincharid = 51
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 51;
      $f->name      = "maincharid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 maxpro = 52
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 52;
      $f->name      = "maxpro";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <platformid> has a value
     *
     * @return boolean
     */
    public function hasPlatformid(){
      return $this->_has(1);
    }
    
    /**
     * Clear <platformid> value
     *
     * @return \RO\Cmd\UserBaseData
     */
    public function clearPlatformid(){
      return $this->_clear(1);
    }
    
    /**
     * Get <platformid> value
     *
     * @return int
     */
    public function getPlatformid(){
      return $this->_get(1);
    }
    
    /**
     * Set <platformid> value
     *
     * @param int $value
     * @return \RO\Cmd\UserBaseData
     */
    public function setPlatformid( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <zoneid> has a value
     *
     * @return boolean
     */
    public function hasZoneid(){
      return $this->_has(2);
    }
    
    /**
     * Clear <zoneid> value
     *
     * @return \RO\Cmd\UserBaseData
     */
    public function clearZoneid(){
      return $this->_clear(2);
    }
    
    /**
     * Get <zoneid> value
     *
     * @return int
     */
    public function getZoneid(){
      return $this->_get(2);
    }
    
    /**
     * Set <zoneid> value
     *
     * @param int $value
     * @return \RO\Cmd\UserBaseData
     */
    public function setZoneid( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <accid> has a value
     *
     * @return boolean
     */
    public function hasAccid(){
      return $this->_has(3);
    }
    
    /**
     * Clear <accid> value
     *
     * @return \RO\Cmd\UserBaseData
     */
    public function clearAccid(){
      return $this->_clear(3);
    }
    
    /**
     * Get <accid> value
     *
     * @return int
     */
    public function getAccid(){
      return $this->_get(3);
    }
    
    /**
     * Set <accid> value
     *
     * @param int $value
     * @return \RO\Cmd\UserBaseData
     */
    public function setAccid( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <charid> has a value
     *
     * @return boolean
     */
    public function hasCharid(){
      return $this->_has(4);
    }
    
    /**
     * Clear <charid> value
     *
     * @return \RO\Cmd\UserBaseData
     */
    public function clearCharid(){
      return $this->_clear(4);
    }
    
    /**
     * Get <charid> value
     *
     * @return int
     */
    public function getCharid(){
      return $this->_get(4);
    }
    
    /**
     * Set <charid> value
     *
     * @param int $value
     * @return \RO\Cmd\UserBaseData
     */
    public function setCharid( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <guildid> has a value
     *
     * @return boolean
     */
    public function hasGuildid(){
      return $this->_has(5);
    }
    
    /**
     * Clear <guildid> value
     *
     * @return \RO\Cmd\UserBaseData
     */
    public function clearGuildid(){
      return $this->_clear(5);
    }
    
    /**
     * Get <guildid> value
     *
     * @return int
     */
    public function getGuildid(){
      return $this->_get(5);
    }
    
    /**
     * Set <guildid> value
     *
     * @param int $value
     * @return \RO\Cmd\UserBaseData
     */
    public function setGuildid( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(6);
    }
    
    /**
     * Clear <name> value
     *
     * @return \RO\Cmd\UserBaseData
     */
    public function clearName(){
      return $this->_clear(6);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(6);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \RO\Cmd\UserBaseData
     */
    public function setName( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <mapid> has a value
     *
     * @return boolean
     */
    public function hasMapid(){
      return $this->_has(7);
    }
    
    /**
     * Clear <mapid> value
     *
     * @return \RO\Cmd\UserBaseData
     */
    public function clearMapid(){
      return $this->_clear(7);
    }
    
    /**
     * Get <mapid> value
     *
     * @return int
     */
    public function getMapid(){
      return $this->_get(7);
    }
    
    /**
     * Set <mapid> value
     *
     * @param int $value
     * @return \RO\Cmd\UserBaseData
     */
    public function setMapid( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <rolelv> has a value
     *
     * @return boolean
     */
    public function hasRolelv(){
      return $this->_has(8);
    }
    
    /**
     * Clear <rolelv> value
     *
     * @return \RO\Cmd\UserBaseData
     */
    public function clearRolelv(){
      return $this->_clear(8);
    }
    
    /**
     * Get <rolelv> value
     *
     * @return int
     */
    public function getRolelv(){
      return $this->_get(8);
    }
    
    /**
     * Set <rolelv> value
     *
     * @param int $value
     * @return \RO\Cmd\UserBaseData
     */
    public function setRolelv( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <roleexp> has a value
     *
     * @return boolean
     */
    public function hasRoleexp(){
      return $this->_has(9);
    }
    
    /**
     * Clear <roleexp> value
     *
     * @return \RO\Cmd\UserBaseData
     */
    public function clearRoleexp(){
      return $this->_clear(9);
    }
    
    /**
     * Get <roleexp> value
     *
     * @return int
     */
    public function getRoleexp(){
      return $this->_get(9);
    }
    
    /**
     * Set <roleexp> value
     *
     * @param int $value
     * @return \RO\Cmd\UserBaseData
     */
    public function setRoleexp( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <charge> has a value
     *
     * @return boolean
     */
    public function hasCharge(){
      return $this->_has(10);
    }
    
    /**
     * Clear <charge> value
     *
     * @return \RO\Cmd\UserBaseData
     */
    public function clearCharge(){
      return $this->_clear(10);
    }
    
    /**
     * Get <charge> value
     *
     * @return int
     */
    public function getCharge(){
      return $this->_get(10);
    }
    
    /**
     * Set <charge> value
     *
     * @param int $value
     * @return \RO\Cmd\UserBaseData
     */
    public function setCharge( $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <diamond> has a value
     *
     * @return boolean
     */
    public function hasDiamond(){
      return $this->_has(11);
    }
    
    /**
     * Clear <diamond> value
     *
     * @return \RO\Cmd\UserBaseData
     */
    public function clearDiamond(){
      return $this->_clear(11);
    }
    
    /**
     * Get <diamond> value
     *
     * @return int
     */
    public function getDiamond(){
      return $this->_get(11);
    }
    
    /**
     * Set <diamond> value
     *
     * @param int $value
     * @return \RO\Cmd\UserBaseData
     */
    public function setDiamond( $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <silver> has a value
     *
     * @return boolean
     */
    public function hasSilver(){
      return $this->_has(12);
    }
    
    /**
     * Clear <silver> value
     *
     * @return \RO\Cmd\UserBaseData
     */
    public function clearSilver(){
      return $this->_clear(12);
    }
    
    /**
     * Get <silver> value
     *
     * @return int
     */
    public function getSilver(){
      return $this->_get(12);
    }
    
    /**
     * Set <silver> value
     *
     * @param int $value
     * @return \RO\Cmd\UserBaseData
     */
    public function setSilver( $value){
      return $this->_set(12, $value);
    }
    
    /**
     * Check if <gold> has a value
     *
     * @return boolean
     */
    public function hasGold(){
      return $this->_has(13);
    }
    
    /**
     * Clear <gold> value
     *
     * @return \RO\Cmd\UserBaseData
     */
    public function clearGold(){
      return $this->_clear(13);
    }
    
    /**
     * Get <gold> value
     *
     * @return int
     */
    public function getGold(){
      return $this->_get(13);
    }
    
    /**
     * Set <gold> value
     *
     * @param int $value
     * @return \RO\Cmd\UserBaseData
     */
    public function setGold( $value){
      return $this->_set(13, $value);
    }
    
    /**
     * Check if <garden> has a value
     *
     * @return boolean
     */
    public function hasGarden(){
      return $this->_has(14);
    }
    
    /**
     * Clear <garden> value
     *
     * @return \RO\Cmd\UserBaseData
     */
    public function clearGarden(){
      return $this->_clear(14);
    }
    
    /**
     * Get <garden> value
     *
     * @return int
     */
    public function getGarden(){
      return $this->_get(14);
    }
    
    /**
     * Set <garden> value
     *
     * @param int $value
     * @return \RO\Cmd\UserBaseData
     */
    public function setGarden( $value){
      return $this->_set(14, $value);
    }
    
    /**
     * Check if <friendship> has a value
     *
     * @return boolean
     */
    public function hasFriendship(){
      return $this->_has(15);
    }
    
    /**
     * Clear <friendship> value
     *
     * @return \RO\Cmd\UserBaseData
     */
    public function clearFriendship(){
      return $this->_clear(15);
    }
    
    /**
     * Get <friendship> value
     *
     * @return int
     */
    public function getFriendship(){
      return $this->_get(15);
    }
    
    /**
     * Set <friendship> value
     *
     * @param int $value
     * @return \RO\Cmd\UserBaseData
     */
    public function setFriendship( $value){
      return $this->_set(15, $value);
    }
    
    /**
     * Check if <createTime> has a value
     *
     * @return boolean
     */
    public function hasCreateTime(){
      return $this->_has(16);
    }
    
    /**
     * Clear <createTime> value
     *
     * @return \RO\Cmd\UserBaseData
     */
    public function clearCreateTime(){
      return $this->_clear(16);
    }
    
    /**
     * Get <createTime> value
     *
     * @return int
     */
    public function getCreateTime(){
      return $this->_get(16);
    }
    
    /**
     * Set <createTime> value
     *
     * @param int $value
     * @return \RO\Cmd\UserBaseData
     */
    public function setCreateTime( $value){
      return $this->_set(16, $value);
    }
    
    /**
     * Check if <onlinetime> has a value
     *
     * @return boolean
     */
    public function hasOnlinetime(){
      return $this->_has(17);
    }
    
    /**
     * Clear <onlinetime> value
     *
     * @return \RO\Cmd\UserBaseData
     */
    public function clearOnlinetime(){
      return $this->_clear(17);
    }
    
    /**
     * Get <onlinetime> value
     *
     * @return int
     */
    public function getOnlinetime(){
      return $this->_get(17);
    }
    
    /**
     * Set <onlinetime> value
     *
     * @param int $value
     * @return \RO\Cmd\UserBaseData
     */
    public function setOnlinetime( $value){
      return $this->_set(17, $value);
    }
    
    /**
     * Check if <offlinetime> has a value
     *
     * @return boolean
     */
    public function hasOfflinetime(){
      return $this->_has(18);
    }
    
    /**
     * Clear <offlinetime> value
     *
     * @return \RO\Cmd\UserBaseData
     */
    public function clearOfflinetime(){
      return $this->_clear(18);
    }
    
    /**
     * Get <offlinetime> value
     *
     * @return int
     */
    public function getOfflinetime(){
      return $this->_get(18);
    }
    
    /**
     * Set <offlinetime> value
     *
     * @param int $value
     * @return \RO\Cmd\UserBaseData
     */
    public function setOfflinetime( $value){
      return $this->_set(18, $value);
    }
    
    /**
     * Check if <addict> has a value
     *
     * @return boolean
     */
    public function hasAddict(){
      return $this->_has(19);
    }
    
    /**
     * Clear <addict> value
     *
     * @return \RO\Cmd\UserBaseData
     */
    public function clearAddict(){
      return $this->_clear(19);
    }
    
    /**
     * Get <addict> value
     *
     * @return int
     */
    public function getAddict(){
      return $this->_get(19);
    }
    
    /**
     * Set <addict> value
     *
     * @param int $value
     * @return \RO\Cmd\UserBaseData
     */
    public function setAddict( $value){
      return $this->_set(19, $value);
    }
    
    /**
     * Check if <battletime> has a value
     *
     * @return boolean
     */
    public function hasBattletime(){
      return $this->_has(20);
    }
    
    /**
     * Clear <battletime> value
     *
     * @return \RO\Cmd\UserBaseData
     */
    public function clearBattletime(){
      return $this->_clear(20);
    }
    
    /**
     * Get <battletime> value
     *
     * @return int
     */
    public function getBattletime(){
      return $this->_get(20);
    }
    
    /**
     * Set <battletime> value
     *
     * @param int $value
     * @return \RO\Cmd\UserBaseData
     */
    public function setBattletime( $value){
      return $this->_set(20, $value);
    }
    
    /**
     * Check if <body> has a value
     *
     * @return boolean
     */
    public function hasBody(){
      return $this->_has(21);
    }
    
    /**
     * Clear <body> value
     *
     * @return \RO\Cmd\UserBaseData
     */
    public function clearBody(){
      return $this->_clear(21);
    }
    
    /**
     * Get <body> value
     *
     * @return int
     */
    public function getBody(){
      return $this->_get(21);
    }
    
    /**
     * Set <body> value
     *
     * @param int $value
     * @return \RO\Cmd\UserBaseData
     */
    public function setBody( $value){
      return $this->_set(21, $value);
    }
    
    /**
     * Check if <addictTipsTime> has a value
     *
     * @return boolean
     */
    public function hasAddictTipsTime(){
      return $this->_has(22);
    }
    
    /**
     * Clear <addictTipsTime> value
     *
     * @return \RO\Cmd\UserBaseData
     */
    public function clearAddictTipsTime(){
      return $this->_clear(22);
    }
    
    /**
     * Get <addictTipsTime> value
     *
     * @return int
     */
    public function getAddictTipsTime(){
      return $this->_get(22);
    }
    
    /**
     * Set <addictTipsTime> value
     *
     * @param int $value
     * @return \RO\Cmd\UserBaseData
     */
    public function setAddictTipsTime( $value){
      return $this->_set(22, $value);
    }
    
    /**
     * Check if <gagtime> has a value
     *
     * @return boolean
     */
    public function hasGagtime(){
      return $this->_has(23);
    }
    
    /**
     * Clear <gagtime> value
     *
     * @return \RO\Cmd\UserBaseData
     */
    public function clearGagtime(){
      return $this->_clear(23);
    }
    
    /**
     * Get <gagtime> value
     *
     * @return int
     */
    public function getGagtime(){
      return $this->_get(23);
    }
    
    /**
     * Set <gagtime> value
     *
     * @param int $value
     * @return \RO\Cmd\UserBaseData
     */
    public function setGagtime( $value){
      return $this->_set(23, $value);
    }
    
    /**
     * Check if <nologintime> has a value
     *
     * @return boolean
     */
    public function hasNologintime(){
      return $this->_has(24);
    }
    
    /**
     * Clear <nologintime> value
     *
     * @return \RO\Cmd\UserBaseData
     */
    public function clearNologintime(){
      return $this->_clear(24);
    }
    
    /**
     * Get <nologintime> value
     *
     * @return int
     */
    public function getNologintime(){
      return $this->_get(24);
    }
    
    /**
     * Set <nologintime> value
     *
     * @param int $value
     * @return \RO\Cmd\UserBaseData
     */
    public function setNologintime( $value){
      return $this->_set(24, $value);
    }
    
    /**
     * Check if <rebattletime> has a value
     *
     * @return boolean
     */
    public function hasRebattletime(){
      return $this->_has(25);
    }
    
    /**
     * Clear <rebattletime> value
     *
     * @return \RO\Cmd\UserBaseData
     */
    public function clearRebattletime(){
      return $this->_clear(25);
    }
    
    /**
     * Get <rebattletime> value
     *
     * @return int
     */
    public function getRebattletime(){
      return $this->_get(25);
    }
    
    /**
     * Set <rebattletime> value
     *
     * @param int $value
     * @return \RO\Cmd\UserBaseData
     */
    public function setRebattletime( $value){
      return $this->_set(25, $value);
    }
    
    /**
     * Check if <usedbattletime> has a value
     *
     * @return boolean
     */
    public function hasUsedbattletime(){
      return $this->_has(26);
    }
    
    /**
     * Clear <usedbattletime> value
     *
     * @return \RO\Cmd\UserBaseData
     */
    public function clearUsedbattletime(){
      return $this->_clear(26);
    }
    
    /**
     * Get <usedbattletime> value
     *
     * @return int
     */
    public function getUsedbattletime(){
      return $this->_get(26);
    }
    
    /**
     * Set <usedbattletime> value
     *
     * @param int $value
     * @return \RO\Cmd\UserBaseData
     */
    public function setUsedbattletime( $value){
      return $this->_set(26, $value);
    }
    
    /**
     * Check if <hair> has a value
     *
     * @return boolean
     */
    public function hasHair(){
      return $this->_has(27);
    }
    
    /**
     * Clear <hair> value
     *
     * @return \RO\Cmd\UserBaseData
     */
    public function clearHair(){
      return $this->_clear(27);
    }
    
    /**
     * Get <hair> value
     *
     * @return int
     */
    public function getHair(){
      return $this->_get(27);
    }
    
    /**
     * Set <hair> value
     *
     * @param int $value
     * @return \RO\Cmd\UserBaseData
     */
    public function setHair( $value){
      return $this->_set(27, $value);
    }
    
    /**
     * Check if <haircolor> has a value
     *
     * @return boolean
     */
    public function hasHaircolor(){
      return $this->_has(28);
    }
    
    /**
     * Clear <haircolor> value
     *
     * @return \RO\Cmd\UserBaseData
     */
    public function clearHaircolor(){
      return $this->_clear(28);
    }
    
    /**
     * Get <haircolor> value
     *
     * @return int
     */
    public function getHaircolor(){
      return $this->_get(28);
    }
    
    /**
     * Set <haircolor> value
     *
     * @param int $value
     * @return \RO\Cmd\UserBaseData
     */
    public function setHaircolor( $value){
      return $this->_set(28, $value);
    }
    
    /**
     * Check if <lefthand> has a value
     *
     * @return boolean
     */
    public function hasLefthand(){
      return $this->_has(29);
    }
    
    /**
     * Clear <lefthand> value
     *
     * @return \RO\Cmd\UserBaseData
     */
    public function clearLefthand(){
      return $this->_clear(29);
    }
    
    /**
     * Get <lefthand> value
     *
     * @return int
     */
    public function getLefthand(){
      return $this->_get(29);
    }
    
    /**
     * Set <lefthand> value
     *
     * @param int $value
     * @return \RO\Cmd\UserBaseData
     */
    public function setLefthand( $value){
      return $this->_set(29, $value);
    }
    
    /**
     * Check if <righthand> has a value
     *
     * @return boolean
     */
    public function hasRighthand(){
      return $this->_has(30);
    }
    
    /**
     * Clear <righthand> value
     *
     * @return \RO\Cmd\UserBaseData
     */
    public function clearRighthand(){
      return $this->_clear(30);
    }
    
    /**
     * Get <righthand> value
     *
     * @return int
     */
    public function getRighthand(){
      return $this->_get(30);
    }
    
    /**
     * Set <righthand> value
     *
     * @param int $value
     * @return \RO\Cmd\UserBaseData
     */
    public function setRighthand( $value){
      return $this->_set(30, $value);
    }
    
    /**
     * Check if <head> has a value
     *
     * @return boolean
     */
    public function hasHead(){
      return $this->_has(31);
    }
    
    /**
     * Clear <head> value
     *
     * @return \RO\Cmd\UserBaseData
     */
    public function clearHead(){
      return $this->_clear(31);
    }
    
    /**
     * Get <head> value
     *
     * @return int
     */
    public function getHead(){
      return $this->_get(31);
    }
    
    /**
     * Set <head> value
     *
     * @param int $value
     * @return \RO\Cmd\UserBaseData
     */
    public function setHead( $value){
      return $this->_set(31, $value);
    }
    
    /**
     * Check if <back> has a value
     *
     * @return boolean
     */
    public function hasBack(){
      return $this->_has(32);
    }
    
    /**
     * Clear <back> value
     *
     * @return \RO\Cmd\UserBaseData
     */
    public function clearBack(){
      return $this->_clear(32);
    }
    
    /**
     * Get <back> value
     *
     * @return int
     */
    public function getBack(){
      return $this->_get(32);
    }
    
    /**
     * Set <back> value
     *
     * @param int $value
     * @return \RO\Cmd\UserBaseData
     */
    public function setBack( $value){
      return $this->_set(32, $value);
    }
    
    /**
     * Check if <face> has a value
     *
     * @return boolean
     */
    public function hasFace(){
      return $this->_has(33);
    }
    
    /**
     * Clear <face> value
     *
     * @return \RO\Cmd\UserBaseData
     */
    public function clearFace(){
      return $this->_clear(33);
    }
    
    /**
     * Get <face> value
     *
     * @return int
     */
    public function getFace(){
      return $this->_get(33);
    }
    
    /**
     * Set <face> value
     *
     * @param int $value
     * @return \RO\Cmd\UserBaseData
     */
    public function setFace( $value){
      return $this->_set(33, $value);
    }
    
    /**
     * Check if <tail> has a value
     *
     * @return boolean
     */
    public function hasTail(){
      return $this->_has(34);
    }
    
    /**
     * Clear <tail> value
     *
     * @return \RO\Cmd\UserBaseData
     */
    public function clearTail(){
      return $this->_clear(34);
    }
    
    /**
     * Get <tail> value
     *
     * @return int
     */
    public function getTail(){
      return $this->_get(34);
    }
    
    /**
     * Set <tail> value
     *
     * @param int $value
     * @return \RO\Cmd\UserBaseData
     */
    public function setTail( $value){
      return $this->_set(34, $value);
    }
    
    /**
     * Check if <mount> has a value
     *
     * @return boolean
     */
    public function hasMount(){
      return $this->_has(35);
    }
    
    /**
     * Clear <mount> value
     *
     * @return \RO\Cmd\UserBaseData
     */
    public function clearMount(){
      return $this->_clear(35);
    }
    
    /**
     * Get <mount> value
     *
     * @return int
     */
    public function getMount(){
      return $this->_get(35);
    }
    
    /**
     * Set <mount> value
     *
     * @param int $value
     * @return \RO\Cmd\UserBaseData
     */
    public function setMount( $value){
      return $this->_set(35, $value);
    }
    
    /**
     * Check if <title> has a value
     *
     * @return boolean
     */
    public function hasTitle(){
      return $this->_has(36);
    }
    
    /**
     * Clear <title> value
     *
     * @return \RO\Cmd\UserBaseData
     */
    public function clearTitle(){
      return $this->_clear(36);
    }
    
    /**
     * Get <title> value
     *
     * @return int
     */
    public function getTitle(){
      return $this->_get(36);
    }
    
    /**
     * Set <title> value
     *
     * @param int $value
     * @return \RO\Cmd\UserBaseData
     */
    public function setTitle( $value){
      return $this->_set(36, $value);
    }
    
    /**
     * Check if <eye> has a value
     *
     * @return boolean
     */
    public function hasEye(){
      return $this->_has(37);
    }
    
    /**
     * Clear <eye> value
     *
     * @return \RO\Cmd\UserBaseData
     */
    public function clearEye(){
      return $this->_clear(37);
    }
    
    /**
     * Get <eye> value
     *
     * @return int
     */
    public function getEye(){
      return $this->_get(37);
    }
    
    /**
     * Set <eye> value
     *
     * @param int $value
     * @return \RO\Cmd\UserBaseData
     */
    public function setEye( $value){
      return $this->_set(37, $value);
    }
    
    /**
     * Check if <partnerid> has a value
     *
     * @return boolean
     */
    public function hasPartnerid(){
      return $this->_has(38);
    }
    
    /**
     * Clear <partnerid> value
     *
     * @return \RO\Cmd\UserBaseData
     */
    public function clearPartnerid(){
      return $this->_clear(38);
    }
    
    /**
     * Get <partnerid> value
     *
     * @return int
     */
    public function getPartnerid(){
      return $this->_get(38);
    }
    
    /**
     * Set <partnerid> value
     *
     * @param int $value
     * @return \RO\Cmd\UserBaseData
     */
    public function setPartnerid( $value){
      return $this->_set(38, $value);
    }
    
    /**
     * Check if <portrait> has a value
     *
     * @return boolean
     */
    public function hasPortrait(){
      return $this->_has(39);
    }
    
    /**
     * Clear <portrait> value
     *
     * @return \RO\Cmd\UserBaseData
     */
    public function clearPortrait(){
      return $this->_clear(39);
    }
    
    /**
     * Get <portrait> value
     *
     * @return int
     */
    public function getPortrait(){
      return $this->_get(39);
    }
    
    /**
     * Set <portrait> value
     *
     * @param int $value
     * @return \RO\Cmd\UserBaseData
     */
    public function setPortrait( $value){
      return $this->_set(39, $value);
    }
    
    /**
     * Check if <mouth> has a value
     *
     * @return boolean
     */
    public function hasMouth(){
      return $this->_has(40);
    }
    
    /**
     * Clear <mouth> value
     *
     * @return \RO\Cmd\UserBaseData
     */
    public function clearMouth(){
      return $this->_clear(40);
    }
    
    /**
     * Get <mouth> value
     *
     * @return int
     */
    public function getMouth(){
      return $this->_get(40);
    }
    
    /**
     * Set <mouth> value
     *
     * @param int $value
     * @return \RO\Cmd\UserBaseData
     */
    public function setMouth( $value){
      return $this->_set(40, $value);
    }
    
    /**
     * Check if <clothcolor> has a value
     *
     * @return boolean
     */
    public function hasClothcolor(){
      return $this->_has(41);
    }
    
    /**
     * Clear <clothcolor> value
     *
     * @return \RO\Cmd\UserBaseData
     */
    public function clearClothcolor(){
      return $this->_clear(41);
    }
    
    /**
     * Get <clothcolor> value
     *
     * @return int
     */
    public function getClothcolor(){
      return $this->_get(41);
    }
    
    /**
     * Set <clothcolor> value
     *
     * @param int $value
     * @return \RO\Cmd\UserBaseData
     */
    public function setClothcolor( $value){
      return $this->_set(41, $value);
    }
    
    /**
     * Check if <gender> has a value
     *
     * @return boolean
     */
    public function hasGender(){
      return $this->_has(42);
    }
    
    /**
     * Clear <gender> value
     *
     * @return \RO\Cmd\UserBaseData
     */
    public function clearGender(){
      return $this->_clear(42);
    }
    
    /**
     * Get <gender> value
     *
     * @return int - \RO\Cmd\EGender
     */
    public function getGender(){
      return $this->_get(42);
    }
    
    /**
     * Set <gender> value
     *
     * @param int - \RO\Cmd\EGender $value
     * @return \RO\Cmd\UserBaseData
     */
    public function setGender( $value){
      return $this->_set(42, $value);
    }
    
    /**
     * Check if <profession> has a value
     *
     * @return boolean
     */
    public function hasProfession(){
      return $this->_has(43);
    }
    
    /**
     * Clear <profession> value
     *
     * @return \RO\Cmd\UserBaseData
     */
    public function clearProfession(){
      return $this->_clear(43);
    }
    
    /**
     * Get <profession> value
     *
     * @return int - \RO\Cmd\EProfession
     */
    public function getProfession(){
      return $this->_get(43);
    }
    
    /**
     * Set <profession> value
     *
     * @param int - \RO\Cmd\EProfession $value
     * @return \RO\Cmd\UserBaseData
     */
    public function setProfession( $value){
      return $this->_set(43, $value);
    }
    
    /**
     * Check if <destprofession> has a value
     *
     * @return boolean
     */
    public function hasDestprofession(){
      return $this->_has(44);
    }
    
    /**
     * Clear <destprofession> value
     *
     * @return \RO\Cmd\UserBaseData
     */
    public function clearDestprofession(){
      return $this->_clear(44);
    }
    
    /**
     * Get <destprofession> value
     *
     * @return int - \RO\Cmd\EProfession
     */
    public function getDestprofession(){
      return $this->_get(44);
    }
    
    /**
     * Set <destprofession> value
     *
     * @param int - \RO\Cmd\EProfession $value
     * @return \RO\Cmd\UserBaseData
     */
    public function setDestprofession( $value){
      return $this->_set(44, $value);
    }
    
    /**
     * Check if <destzoneid> has a value
     *
     * @return boolean
     */
    public function hasDestzoneid(){
      return $this->_has(45);
    }
    
    /**
     * Clear <destzoneid> value
     *
     * @return \RO\Cmd\UserBaseData
     */
    public function clearDestzoneid(){
      return $this->_clear(45);
    }
    
    /**
     * Get <destzoneid> value
     *
     * @return int
     */
    public function getDestzoneid(){
      return $this->_get(45);
    }
    
    /**
     * Set <destzoneid> value
     *
     * @param int $value
     * @return \RO\Cmd\UserBaseData
     */
    public function setDestzoneid( $value){
      return $this->_set(45, $value);
    }
    
    /**
     * Check if <originalzoneid> has a value
     *
     * @return boolean
     */
    public function hasOriginalzoneid(){
      return $this->_has(46);
    }
    
    /**
     * Clear <originalzoneid> value
     *
     * @return \RO\Cmd\UserBaseData
     */
    public function clearOriginalzoneid(){
      return $this->_clear(46);
    }
    
    /**
     * Get <originalzoneid> value
     *
     * @return int
     */
    public function getOriginalzoneid(){
      return $this->_get(46);
    }
    
    /**
     * Set <originalzoneid> value
     *
     * @param int $value
     * @return \RO\Cmd\UserBaseData
     */
    public function setOriginalzoneid( $value){
      return $this->_set(46, $value);
    }
    
    /**
     * Check if <maxbaselv> has a value
     *
     * @return boolean
     */
    public function hasMaxbaselv(){
      return $this->_has(47);
    }
    
    /**
     * Clear <maxbaselv> value
     *
     * @return \RO\Cmd\UserBaseData
     */
    public function clearMaxbaselv(){
      return $this->_clear(47);
    }
    
    /**
     * Get <maxbaselv> value
     *
     * @return int
     */
    public function getMaxbaselv(){
      return $this->_get(47);
    }
    
    /**
     * Set <maxbaselv> value
     *
     * @param int $value
     * @return \RO\Cmd\UserBaseData
     */
    public function setMaxbaselv( $value){
      return $this->_set(47, $value);
    }
    
    /**
     * Check if <lock_reason> has a value
     *
     * @return boolean
     */
    public function hasLockReason(){
      return $this->_has(48);
    }
    
    /**
     * Clear <lock_reason> value
     *
     * @return \RO\Cmd\UserBaseData
     */
    public function clearLockReason(){
      return $this->_clear(48);
    }
    
    /**
     * Get <lock_reason> value
     *
     * @return string
     */
    public function getLockReason(){
      return $this->_get(48);
    }
    
    /**
     * Set <lock_reason> value
     *
     * @param string $value
     * @return \RO\Cmd\UserBaseData
     */
    public function setLockReason( $value){
      return $this->_set(48, $value);
    }
    
    /**
     * Check if <gag_reason> has a value
     *
     * @return boolean
     */
    public function hasGagReason(){
      return $this->_has(49);
    }
    
    /**
     * Clear <gag_reason> value
     *
     * @return \RO\Cmd\UserBaseData
     */
    public function clearGagReason(){
      return $this->_clear(49);
    }
    
    /**
     * Get <gag_reason> value
     *
     * @return string
     */
    public function getGagReason(){
      return $this->_get(49);
    }
    
    /**
     * Set <gag_reason> value
     *
     * @param string $value
     * @return \RO\Cmd\UserBaseData
     */
    public function setGagReason( $value){
      return $this->_set(49, $value);
    }
    
    /**
     * Check if <questmapntf> has a value
     *
     * @return boolean
     */
    public function hasQuestmapntf(){
      return $this->_has(50);
    }
    
    /**
     * Clear <questmapntf> value
     *
     * @return \RO\Cmd\UserBaseData
     */
    public function clearQuestmapntf(){
      return $this->_clear(50);
    }
    
    /**
     * Get <questmapntf> value
     *
     * @param int $idx
     * @return int
     */
    public function getQuestmapntf($idx = NULL){
      return $this->_get(50, $idx);
    }
    
    /**
     * Set <questmapntf> value
     *
     * @param int $value
     * @return \RO\Cmd\UserBaseData
     */
    public function setQuestmapntf( $value, $idx = NULL){
      return $this->_set(50, $value, $idx);
    }
    
    /**
     * Get all elements of <questmapntf>
     *
     * @return int[]
     */
    public function getQuestmapntfList(){
     return $this->_get(50);
    }
    
    /**
     * Add a new element to <questmapntf>
     *
     * @param int $value
     * @return \RO\Cmd\UserBaseData
     */
    public function addQuestmapntf( $value){
     return $this->_add(50, $value);
    }
    
    /**
     * Check if <maincharid> has a value
     *
     * @return boolean
     */
    public function hasMaincharid(){
      return $this->_has(51);
    }
    
    /**
     * Clear <maincharid> value
     *
     * @return \RO\Cmd\UserBaseData
     */
    public function clearMaincharid(){
      return $this->_clear(51);
    }
    
    /**
     * Get <maincharid> value
     *
     * @return int
     */
    public function getMaincharid(){
      return $this->_get(51);
    }
    
    /**
     * Set <maincharid> value
     *
     * @param int $value
     * @return \RO\Cmd\UserBaseData
     */
    public function setMaincharid( $value){
      return $this->_set(51, $value);
    }
    
    /**
     * Check if <maxpro> has a value
     *
     * @return boolean
     */
    public function hasMaxpro(){
      return $this->_has(52);
    }
    
    /**
     * Clear <maxpro> value
     *
     * @return \RO\Cmd\UserBaseData
     */
    public function clearMaxpro(){
      return $this->_clear(52);
    }
    
    /**
     * Get <maxpro> value
     *
     * @return int
     */
    public function getMaxpro(){
      return $this->_get(52);
    }
    
    /**
     * Set <maxpro> value
     *
     * @param int $value
     * @return \RO\Cmd\UserBaseData
     */
    public function setMaxpro( $value){
      return $this->_set(52, $value);
    }
  }
}

