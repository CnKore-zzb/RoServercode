<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: SceneUser.proto

namespace RO\Cmd {

  class MainUserData extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $id = null;
    
    /**  @var string */
    public $name = null;
    
    /**  @var int */
    public $male = null;
    
    /**  @var int */
    public $body = null;
    
    /**  @var int */
    public $hair = null;
    
    /**  @var int */
    public $rightHand = null;
    
    /**  @var int */
    public $profession = null;
    
    /**  @var int */
    public $accessory = null;
    
    /**  @var int */
    public $wing = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.MainUserData');

      // OPTIONAL UINT64 id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 male = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "male";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 body = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "body";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 hair = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "hair";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 rightHand = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "rightHand";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 profession = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "profession";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 accessory = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "accessory";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 wing = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "wing";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \RO\Cmd\MainUserData
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param int $value
     * @return \RO\Cmd\MainUserData
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <name> value
     *
     * @return \RO\Cmd\MainUserData
     */
    public function clearName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(2);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \RO\Cmd\MainUserData
     */
    public function setName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <male> has a value
     *
     * @return boolean
     */
    public function hasMale(){
      return $this->_has(3);
    }
    
    /**
     * Clear <male> value
     *
     * @return \RO\Cmd\MainUserData
     */
    public function clearMale(){
      return $this->_clear(3);
    }
    
    /**
     * Get <male> value
     *
     * @return int
     */
    public function getMale(){
      return $this->_get(3);
    }
    
    /**
     * Set <male> value
     *
     * @param int $value
     * @return \RO\Cmd\MainUserData
     */
    public function setMale( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <body> has a value
     *
     * @return boolean
     */
    public function hasBody(){
      return $this->_has(4);
    }
    
    /**
     * Clear <body> value
     *
     * @return \RO\Cmd\MainUserData
     */
    public function clearBody(){
      return $this->_clear(4);
    }
    
    /**
     * Get <body> value
     *
     * @return int
     */
    public function getBody(){
      return $this->_get(4);
    }
    
    /**
     * Set <body> value
     *
     * @param int $value
     * @return \RO\Cmd\MainUserData
     */
    public function setBody( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <hair> has a value
     *
     * @return boolean
     */
    public function hasHair(){
      return $this->_has(5);
    }
    
    /**
     * Clear <hair> value
     *
     * @return \RO\Cmd\MainUserData
     */
    public function clearHair(){
      return $this->_clear(5);
    }
    
    /**
     * Get <hair> value
     *
     * @return int
     */
    public function getHair(){
      return $this->_get(5);
    }
    
    /**
     * Set <hair> value
     *
     * @param int $value
     * @return \RO\Cmd\MainUserData
     */
    public function setHair( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <rightHand> has a value
     *
     * @return boolean
     */
    public function hasRightHand(){
      return $this->_has(6);
    }
    
    /**
     * Clear <rightHand> value
     *
     * @return \RO\Cmd\MainUserData
     */
    public function clearRightHand(){
      return $this->_clear(6);
    }
    
    /**
     * Get <rightHand> value
     *
     * @return int
     */
    public function getRightHand(){
      return $this->_get(6);
    }
    
    /**
     * Set <rightHand> value
     *
     * @param int $value
     * @return \RO\Cmd\MainUserData
     */
    public function setRightHand( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <profession> has a value
     *
     * @return boolean
     */
    public function hasProfession(){
      return $this->_has(7);
    }
    
    /**
     * Clear <profession> value
     *
     * @return \RO\Cmd\MainUserData
     */
    public function clearProfession(){
      return $this->_clear(7);
    }
    
    /**
     * Get <profession> value
     *
     * @return int
     */
    public function getProfession(){
      return $this->_get(7);
    }
    
    /**
     * Set <profession> value
     *
     * @param int $value
     * @return \RO\Cmd\MainUserData
     */
    public function setProfession( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <accessory> has a value
     *
     * @return boolean
     */
    public function hasAccessory(){
      return $this->_has(8);
    }
    
    /**
     * Clear <accessory> value
     *
     * @return \RO\Cmd\MainUserData
     */
    public function clearAccessory(){
      return $this->_clear(8);
    }
    
    /**
     * Get <accessory> value
     *
     * @return int
     */
    public function getAccessory(){
      return $this->_get(8);
    }
    
    /**
     * Set <accessory> value
     *
     * @param int $value
     * @return \RO\Cmd\MainUserData
     */
    public function setAccessory( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <wing> has a value
     *
     * @return boolean
     */
    public function hasWing(){
      return $this->_has(9);
    }
    
    /**
     * Clear <wing> value
     *
     * @return \RO\Cmd\MainUserData
     */
    public function clearWing(){
      return $this->_clear(9);
    }
    
    /**
     * Get <wing> value
     *
     * @return int
     */
    public function getWing(){
      return $this->_get(9);
    }
    
    /**
     * Set <wing> value
     *
     * @param int $value
     * @return \RO\Cmd\MainUserData
     */
    public function setWing( $value){
      return $this->_set(9, $value);
    }
  }
}

