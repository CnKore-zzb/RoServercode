<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: InfiniteTower.proto

namespace RO\Cmd {

  class UserTowerInfo extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $oldmaxlayer = 0;
    
    /**  @var int */
    public $curmaxlayer = 0;
    
    /**  @var \RO\Cmd\UserTowerLayer[]  */
    public $layers = array();
    
    /**  @var int */
    public $maxlayer = 0;
    
    /**  @var int */
    public $record_layer = 0;
    
    /**  @var \RO\Cmd\UserTowerLayer[]  */
    public $everpasslayers = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.UserTowerInfo');

      // OPTIONAL UINT32 oldmaxlayer = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "oldmaxlayer";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 curmaxlayer = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "curmaxlayer";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // REPEATED MESSAGE layers = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "layers";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\UserTowerLayer';
      $descriptor->addField($f);

      // OPTIONAL UINT32 maxlayer = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "maxlayer";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 record_layer = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "record_layer";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // REPEATED MESSAGE everpasslayers = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "everpasslayers";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\UserTowerLayer';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <oldmaxlayer> has a value
     *
     * @return boolean
     */
    public function hasOldmaxlayer(){
      return $this->_has(1);
    }
    
    /**
     * Clear <oldmaxlayer> value
     *
     * @return \RO\Cmd\UserTowerInfo
     */
    public function clearOldmaxlayer(){
      return $this->_clear(1);
    }
    
    /**
     * Get <oldmaxlayer> value
     *
     * @return int
     */
    public function getOldmaxlayer(){
      return $this->_get(1);
    }
    
    /**
     * Set <oldmaxlayer> value
     *
     * @param int $value
     * @return \RO\Cmd\UserTowerInfo
     */
    public function setOldmaxlayer( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <curmaxlayer> has a value
     *
     * @return boolean
     */
    public function hasCurmaxlayer(){
      return $this->_has(2);
    }
    
    /**
     * Clear <curmaxlayer> value
     *
     * @return \RO\Cmd\UserTowerInfo
     */
    public function clearCurmaxlayer(){
      return $this->_clear(2);
    }
    
    /**
     * Get <curmaxlayer> value
     *
     * @return int
     */
    public function getCurmaxlayer(){
      return $this->_get(2);
    }
    
    /**
     * Set <curmaxlayer> value
     *
     * @param int $value
     * @return \RO\Cmd\UserTowerInfo
     */
    public function setCurmaxlayer( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <layers> has a value
     *
     * @return boolean
     */
    public function hasLayers(){
      return $this->_has(3);
    }
    
    /**
     * Clear <layers> value
     *
     * @return \RO\Cmd\UserTowerInfo
     */
    public function clearLayers(){
      return $this->_clear(3);
    }
    
    /**
     * Get <layers> value
     *
     * @param int $idx
     * @return \RO\Cmd\UserTowerLayer
     */
    public function getLayers($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <layers> value
     *
     * @param \RO\Cmd\UserTowerLayer $value
     * @return \RO\Cmd\UserTowerInfo
     */
    public function setLayers(\RO\Cmd\UserTowerLayer $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <layers>
     *
     * @return \RO\Cmd\UserTowerLayer[]
     */
    public function getLayersList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <layers>
     *
     * @param \RO\Cmd\UserTowerLayer $value
     * @return \RO\Cmd\UserTowerInfo
     */
    public function addLayers(\RO\Cmd\UserTowerLayer $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <maxlayer> has a value
     *
     * @return boolean
     */
    public function hasMaxlayer(){
      return $this->_has(4);
    }
    
    /**
     * Clear <maxlayer> value
     *
     * @return \RO\Cmd\UserTowerInfo
     */
    public function clearMaxlayer(){
      return $this->_clear(4);
    }
    
    /**
     * Get <maxlayer> value
     *
     * @return int
     */
    public function getMaxlayer(){
      return $this->_get(4);
    }
    
    /**
     * Set <maxlayer> value
     *
     * @param int $value
     * @return \RO\Cmd\UserTowerInfo
     */
    public function setMaxlayer( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <record_layer> has a value
     *
     * @return boolean
     */
    public function hasRecordLayer(){
      return $this->_has(5);
    }
    
    /**
     * Clear <record_layer> value
     *
     * @return \RO\Cmd\UserTowerInfo
     */
    public function clearRecordLayer(){
      return $this->_clear(5);
    }
    
    /**
     * Get <record_layer> value
     *
     * @return int
     */
    public function getRecordLayer(){
      return $this->_get(5);
    }
    
    /**
     * Set <record_layer> value
     *
     * @param int $value
     * @return \RO\Cmd\UserTowerInfo
     */
    public function setRecordLayer( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <everpasslayers> has a value
     *
     * @return boolean
     */
    public function hasEverpasslayers(){
      return $this->_has(6);
    }
    
    /**
     * Clear <everpasslayers> value
     *
     * @return \RO\Cmd\UserTowerInfo
     */
    public function clearEverpasslayers(){
      return $this->_clear(6);
    }
    
    /**
     * Get <everpasslayers> value
     *
     * @param int $idx
     * @return \RO\Cmd\UserTowerLayer
     */
    public function getEverpasslayers($idx = NULL){
      return $this->_get(6, $idx);
    }
    
    /**
     * Set <everpasslayers> value
     *
     * @param \RO\Cmd\UserTowerLayer $value
     * @return \RO\Cmd\UserTowerInfo
     */
    public function setEverpasslayers(\RO\Cmd\UserTowerLayer $value, $idx = NULL){
      return $this->_set(6, $value, $idx);
    }
    
    /**
     * Get all elements of <everpasslayers>
     *
     * @return \RO\Cmd\UserTowerLayer[]
     */
    public function getEverpasslayersList(){
     return $this->_get(6);
    }
    
    /**
     * Add a new element to <everpasslayers>
     *
     * @param \RO\Cmd\UserTowerLayer $value
     * @return \RO\Cmd\UserTowerInfo
     */
    public function addEverpasslayers(\RO\Cmd\UserTowerLayer $value){
     return $this->_add(6, $value);
    }
  }
}

