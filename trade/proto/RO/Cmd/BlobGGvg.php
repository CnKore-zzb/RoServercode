<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: GuildCmd.proto

namespace RO\Cmd {

  class BlobGGvg extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $partin_time = 0;
    
    /**  @var int[]  */
    public $partin_users = array();
    
    /**  @var int */
    public $sugvgtime = 0;
    
    /**  @var int */
    public $sugvgcnt = 0;
    
    /**  @var int */
    public $sugvgscore = 0;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.BlobGGvg');

      // OPTIONAL UINT32 partin_time = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "partin_time";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // REPEATED UINT64 partin_users = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "partin_users";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL UINT32 sugvgtime = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "sugvgtime";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 sugvgcnt = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "sugvgcnt";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 sugvgscore = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "sugvgscore";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <partin_time> has a value
     *
     * @return boolean
     */
    public function hasPartinTime(){
      return $this->_has(1);
    }
    
    /**
     * Clear <partin_time> value
     *
     * @return \RO\Cmd\BlobGGvg
     */
    public function clearPartinTime(){
      return $this->_clear(1);
    }
    
    /**
     * Get <partin_time> value
     *
     * @return int
     */
    public function getPartinTime(){
      return $this->_get(1);
    }
    
    /**
     * Set <partin_time> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobGGvg
     */
    public function setPartinTime( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <partin_users> has a value
     *
     * @return boolean
     */
    public function hasPartinUsers(){
      return $this->_has(2);
    }
    
    /**
     * Clear <partin_users> value
     *
     * @return \RO\Cmd\BlobGGvg
     */
    public function clearPartinUsers(){
      return $this->_clear(2);
    }
    
    /**
     * Get <partin_users> value
     *
     * @param int $idx
     * @return int
     */
    public function getPartinUsers($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <partin_users> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobGGvg
     */
    public function setPartinUsers( $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <partin_users>
     *
     * @return int[]
     */
    public function getPartinUsersList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <partin_users>
     *
     * @param int $value
     * @return \RO\Cmd\BlobGGvg
     */
    public function addPartinUsers( $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <sugvgtime> has a value
     *
     * @return boolean
     */
    public function hasSugvgtime(){
      return $this->_has(3);
    }
    
    /**
     * Clear <sugvgtime> value
     *
     * @return \RO\Cmd\BlobGGvg
     */
    public function clearSugvgtime(){
      return $this->_clear(3);
    }
    
    /**
     * Get <sugvgtime> value
     *
     * @return int
     */
    public function getSugvgtime(){
      return $this->_get(3);
    }
    
    /**
     * Set <sugvgtime> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobGGvg
     */
    public function setSugvgtime( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <sugvgcnt> has a value
     *
     * @return boolean
     */
    public function hasSugvgcnt(){
      return $this->_has(4);
    }
    
    /**
     * Clear <sugvgcnt> value
     *
     * @return \RO\Cmd\BlobGGvg
     */
    public function clearSugvgcnt(){
      return $this->_clear(4);
    }
    
    /**
     * Get <sugvgcnt> value
     *
     * @return int
     */
    public function getSugvgcnt(){
      return $this->_get(4);
    }
    
    /**
     * Set <sugvgcnt> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobGGvg
     */
    public function setSugvgcnt( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <sugvgscore> has a value
     *
     * @return boolean
     */
    public function hasSugvgscore(){
      return $this->_has(5);
    }
    
    /**
     * Clear <sugvgscore> value
     *
     * @return \RO\Cmd\BlobGGvg
     */
    public function clearSugvgscore(){
      return $this->_clear(5);
    }
    
    /**
     * Get <sugvgscore> value
     *
     * @return int
     */
    public function getSugvgscore(){
      return $this->_get(5);
    }
    
    /**
     * Set <sugvgscore> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobGGvg
     */
    public function setSugvgscore( $value){
      return $this->_set(5, $value);
    }
  }
}

