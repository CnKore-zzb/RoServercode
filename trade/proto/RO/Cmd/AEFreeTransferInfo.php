<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: ActivityEvent.proto

namespace RO\Cmd {

  class AEFreeTransferInfo extends \DrSlump\Protobuf\Message {

    /**  @var int[]  */
    public $mapids = array();
    
    /**  @var boolean */
    public $allfree = false;
    
    /**  @var int[]  */
    public $teammapids = array();
    
    /**  @var boolean */
    public $teamallfree = false;
    
    /**  @var boolean */
    public $storefree = false;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.AEFreeTransferInfo');

      // REPEATED UINT32 mapids = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "mapids";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL BOOL allfree = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "allfree";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = false;
      $descriptor->addField($f);

      // REPEATED UINT32 teammapids = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "teammapids";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL BOOL teamallfree = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "teamallfree";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = false;
      $descriptor->addField($f);

      // OPTIONAL BOOL storefree = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "storefree";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = false;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <mapids> has a value
     *
     * @return boolean
     */
    public function hasMapids(){
      return $this->_has(1);
    }
    
    /**
     * Clear <mapids> value
     *
     * @return \RO\Cmd\AEFreeTransferInfo
     */
    public function clearMapids(){
      return $this->_clear(1);
    }
    
    /**
     * Get <mapids> value
     *
     * @param int $idx
     * @return int
     */
    public function getMapids($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <mapids> value
     *
     * @param int $value
     * @return \RO\Cmd\AEFreeTransferInfo
     */
    public function setMapids( $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <mapids>
     *
     * @return int[]
     */
    public function getMapidsList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <mapids>
     *
     * @param int $value
     * @return \RO\Cmd\AEFreeTransferInfo
     */
    public function addMapids( $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <allfree> has a value
     *
     * @return boolean
     */
    public function hasAllfree(){
      return $this->_has(2);
    }
    
    /**
     * Clear <allfree> value
     *
     * @return \RO\Cmd\AEFreeTransferInfo
     */
    public function clearAllfree(){
      return $this->_clear(2);
    }
    
    /**
     * Get <allfree> value
     *
     * @return boolean
     */
    public function getAllfree(){
      return $this->_get(2);
    }
    
    /**
     * Set <allfree> value
     *
     * @param boolean $value
     * @return \RO\Cmd\AEFreeTransferInfo
     */
    public function setAllfree( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <teammapids> has a value
     *
     * @return boolean
     */
    public function hasTeammapids(){
      return $this->_has(3);
    }
    
    /**
     * Clear <teammapids> value
     *
     * @return \RO\Cmd\AEFreeTransferInfo
     */
    public function clearTeammapids(){
      return $this->_clear(3);
    }
    
    /**
     * Get <teammapids> value
     *
     * @param int $idx
     * @return int
     */
    public function getTeammapids($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <teammapids> value
     *
     * @param int $value
     * @return \RO\Cmd\AEFreeTransferInfo
     */
    public function setTeammapids( $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <teammapids>
     *
     * @return int[]
     */
    public function getTeammapidsList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <teammapids>
     *
     * @param int $value
     * @return \RO\Cmd\AEFreeTransferInfo
     */
    public function addTeammapids( $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <teamallfree> has a value
     *
     * @return boolean
     */
    public function hasTeamallfree(){
      return $this->_has(4);
    }
    
    /**
     * Clear <teamallfree> value
     *
     * @return \RO\Cmd\AEFreeTransferInfo
     */
    public function clearTeamallfree(){
      return $this->_clear(4);
    }
    
    /**
     * Get <teamallfree> value
     *
     * @return boolean
     */
    public function getTeamallfree(){
      return $this->_get(4);
    }
    
    /**
     * Set <teamallfree> value
     *
     * @param boolean $value
     * @return \RO\Cmd\AEFreeTransferInfo
     */
    public function setTeamallfree( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <storefree> has a value
     *
     * @return boolean
     */
    public function hasStorefree(){
      return $this->_has(5);
    }
    
    /**
     * Clear <storefree> value
     *
     * @return \RO\Cmd\AEFreeTransferInfo
     */
    public function clearStorefree(){
      return $this->_clear(5);
    }
    
    /**
     * Get <storefree> value
     *
     * @return boolean
     */
    public function getStorefree(){
      return $this->_get(5);
    }
    
    /**
     * Set <storefree> value
     *
     * @param boolean $value
     * @return \RO\Cmd\AEFreeTransferInfo
     */
    public function setStorefree( $value){
      return $this->_set(5, $value);
    }
  }
}

