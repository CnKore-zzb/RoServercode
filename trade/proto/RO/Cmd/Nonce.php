<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: xCmd.proto

namespace RO\Cmd {

  class Nonce extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $timestamp = null;
    
    /**  @var int */
    public $index = null;
    
    /**  @var string */
    public $sign = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.Nonce');

      // OPTIONAL UINT32 timestamp = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "timestamp";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 index = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "index";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING sign = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "sign";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <timestamp> has a value
     *
     * @return boolean
     */
    public function hasTimestamp(){
      return $this->_has(1);
    }
    
    /**
     * Clear <timestamp> value
     *
     * @return \RO\Cmd\Nonce
     */
    public function clearTimestamp(){
      return $this->_clear(1);
    }
    
    /**
     * Get <timestamp> value
     *
     * @return int
     */
    public function getTimestamp(){
      return $this->_get(1);
    }
    
    /**
     * Set <timestamp> value
     *
     * @param int $value
     * @return \RO\Cmd\Nonce
     */
    public function setTimestamp( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <index> has a value
     *
     * @return boolean
     */
    public function hasIndex(){
      return $this->_has(2);
    }
    
    /**
     * Clear <index> value
     *
     * @return \RO\Cmd\Nonce
     */
    public function clearIndex(){
      return $this->_clear(2);
    }
    
    /**
     * Get <index> value
     *
     * @return int
     */
    public function getIndex(){
      return $this->_get(2);
    }
    
    /**
     * Set <index> value
     *
     * @param int $value
     * @return \RO\Cmd\Nonce
     */
    public function setIndex( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <sign> has a value
     *
     * @return boolean
     */
    public function hasSign(){
      return $this->_has(3);
    }
    
    /**
     * Clear <sign> value
     *
     * @return \RO\Cmd\Nonce
     */
    public function clearSign(){
      return $this->_clear(3);
    }
    
    /**
     * Get <sign> value
     *
     * @return string
     */
    public function getSign(){
      return $this->_get(3);
    }
    
    /**
     * Set <sign> value
     *
     * @param string $value
     * @return \RO\Cmd\Nonce
     */
    public function setSign( $value){
      return $this->_set(3, $value);
    }
  }
}

