<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: SceneItem.proto

namespace RO\Cmd {

  class ItemInfo extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $guid = null;
    
    /**  @var int */
    public $id = 0;
    
    /**  @var int */
    public $count = 1;
    
    /**  @var int */
    public $index = 0;
    
    /**  @var int */
    public $createtime = 0;
    
    /**  @var int */
    public $cd = 0;
    
    /**  @var int - \RO\Cmd\EItemType */
    public $type = \RO\Cmd\EItemType::EITEMTYPE_MIN;
    
    /**  @var int - \RO\Cmd\EBindType */
    public $bind = \RO\Cmd\EBindType::EBINDTYPE_MIN;
    
    /**  @var int - \RO\Cmd\EExpireType */
    public $expire = \RO\Cmd\EExpireType::EEXPIRETYPE_MIN;
    
    /**  @var int - \RO\Cmd\EQualityType */
    public $quality = \RO\Cmd\EQualityType::EQUALITYTYPE_MIN;
    
    /**  @var int - \RO\Cmd\EEquipType */
    public $equipType = \RO\Cmd\EEquipType::EEQUIPTYPE_MIN;
    
    /**  @var int - \RO\Cmd\ESource */
    public $source = \RO\Cmd\ESource::ESOURCE_NORMAL;
    
    /**  @var boolean */
    public $isnew = false;
    
    /**  @var int */
    public $maxcardslot = 0;
    
    /**  @var boolean */
    public $ishint = false;
    
    /**  @var boolean */
    public $isactive = false;
    
    /**  @var int */
    public $source_npc = 0;
    
    /**  @var int */
    public $refinelv = 0;
    
    /**  @var int */
    public $chargemoney = 0;
    
    /**  @var int */
    public $overtime = 0;
    
    /**  @var int */
    public $quota = 0;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.ItemInfo');

      // OPTIONAL STRING guid = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "guid";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 id = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 count = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "count";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 1;
      $descriptor->addField($f);

      // OPTIONAL UINT32 index = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "index";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 createtime = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "createtime";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT64 cd = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "cd";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL ENUM type = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\EItemType';
      $f->default   = \RO\Cmd\EItemType::EITEMTYPE_MIN;
      $descriptor->addField($f);

      // OPTIONAL ENUM bind = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "bind";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\EBindType';
      $f->default   = \RO\Cmd\EBindType::EBINDTYPE_MIN;
      $descriptor->addField($f);

      // OPTIONAL ENUM expire = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "expire";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\EExpireType';
      $f->default   = \RO\Cmd\EExpireType::EEXPIRETYPE_MIN;
      $descriptor->addField($f);

      // OPTIONAL ENUM quality = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "quality";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\EQualityType';
      $f->default   = \RO\Cmd\EQualityType::EQUALITYTYPE_MIN;
      $descriptor->addField($f);

      // OPTIONAL ENUM equipType = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "equipType";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\EEquipType';
      $f->default   = \RO\Cmd\EEquipType::EEQUIPTYPE_MIN;
      $descriptor->addField($f);

      // OPTIONAL ENUM source = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "source";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\ESource';
      $f->default   = \RO\Cmd\ESource::ESOURCE_NORMAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL isnew = 13
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 13;
      $f->name      = "isnew";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = false;
      $descriptor->addField($f);

      // OPTIONAL UINT32 maxcardslot = 14
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 14;
      $f->name      = "maxcardslot";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL BOOL ishint = 15
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 15;
      $f->name      = "ishint";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = false;
      $descriptor->addField($f);

      // OPTIONAL BOOL isactive = 16
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 16;
      $f->name      = "isactive";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = false;
      $descriptor->addField($f);

      // OPTIONAL UINT32 source_npc = 17
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 17;
      $f->name      = "source_npc";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 refinelv = 18
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 18;
      $f->name      = "refinelv";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 chargemoney = 19
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 19;
      $f->name      = "chargemoney";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 overtime = 20
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 20;
      $f->name      = "overtime";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT64 quota = 21
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 21;
      $f->name      = "quota";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <guid> has a value
     *
     * @return boolean
     */
    public function hasGuid(){
      return $this->_has(1);
    }
    
    /**
     * Clear <guid> value
     *
     * @return \RO\Cmd\ItemInfo
     */
    public function clearGuid(){
      return $this->_clear(1);
    }
    
    /**
     * Get <guid> value
     *
     * @return string
     */
    public function getGuid(){
      return $this->_get(1);
    }
    
    /**
     * Set <guid> value
     *
     * @param string $value
     * @return \RO\Cmd\ItemInfo
     */
    public function setGuid( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <id> value
     *
     * @return \RO\Cmd\ItemInfo
     */
    public function clearId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(2);
    }
    
    /**
     * Set <id> value
     *
     * @param int $value
     * @return \RO\Cmd\ItemInfo
     */
    public function setId( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <count> has a value
     *
     * @return boolean
     */
    public function hasCount(){
      return $this->_has(3);
    }
    
    /**
     * Clear <count> value
     *
     * @return \RO\Cmd\ItemInfo
     */
    public function clearCount(){
      return $this->_clear(3);
    }
    
    /**
     * Get <count> value
     *
     * @return int
     */
    public function getCount(){
      return $this->_get(3);
    }
    
    /**
     * Set <count> value
     *
     * @param int $value
     * @return \RO\Cmd\ItemInfo
     */
    public function setCount( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <index> has a value
     *
     * @return boolean
     */
    public function hasIndex(){
      return $this->_has(4);
    }
    
    /**
     * Clear <index> value
     *
     * @return \RO\Cmd\ItemInfo
     */
    public function clearIndex(){
      return $this->_clear(4);
    }
    
    /**
     * Get <index> value
     *
     * @return int
     */
    public function getIndex(){
      return $this->_get(4);
    }
    
    /**
     * Set <index> value
     *
     * @param int $value
     * @return \RO\Cmd\ItemInfo
     */
    public function setIndex( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <createtime> has a value
     *
     * @return boolean
     */
    public function hasCreatetime(){
      return $this->_has(5);
    }
    
    /**
     * Clear <createtime> value
     *
     * @return \RO\Cmd\ItemInfo
     */
    public function clearCreatetime(){
      return $this->_clear(5);
    }
    
    /**
     * Get <createtime> value
     *
     * @return int
     */
    public function getCreatetime(){
      return $this->_get(5);
    }
    
    /**
     * Set <createtime> value
     *
     * @param int $value
     * @return \RO\Cmd\ItemInfo
     */
    public function setCreatetime( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <cd> has a value
     *
     * @return boolean
     */
    public function hasCd(){
      return $this->_has(6);
    }
    
    /**
     * Clear <cd> value
     *
     * @return \RO\Cmd\ItemInfo
     */
    public function clearCd(){
      return $this->_clear(6);
    }
    
    /**
     * Get <cd> value
     *
     * @return int
     */
    public function getCd(){
      return $this->_get(6);
    }
    
    /**
     * Set <cd> value
     *
     * @param int $value
     * @return \RO\Cmd\ItemInfo
     */
    public function setCd( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(7);
    }
    
    /**
     * Clear <type> value
     *
     * @return \RO\Cmd\ItemInfo
     */
    public function clearType(){
      return $this->_clear(7);
    }
    
    /**
     * Get <type> value
     *
     * @return int - \RO\Cmd\EItemType
     */
    public function getType(){
      return $this->_get(7);
    }
    
    /**
     * Set <type> value
     *
     * @param int - \RO\Cmd\EItemType $value
     * @return \RO\Cmd\ItemInfo
     */
    public function setType( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <bind> has a value
     *
     * @return boolean
     */
    public function hasBind(){
      return $this->_has(8);
    }
    
    /**
     * Clear <bind> value
     *
     * @return \RO\Cmd\ItemInfo
     */
    public function clearBind(){
      return $this->_clear(8);
    }
    
    /**
     * Get <bind> value
     *
     * @return int - \RO\Cmd\EBindType
     */
    public function getBind(){
      return $this->_get(8);
    }
    
    /**
     * Set <bind> value
     *
     * @param int - \RO\Cmd\EBindType $value
     * @return \RO\Cmd\ItemInfo
     */
    public function setBind( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <expire> has a value
     *
     * @return boolean
     */
    public function hasExpire(){
      return $this->_has(9);
    }
    
    /**
     * Clear <expire> value
     *
     * @return \RO\Cmd\ItemInfo
     */
    public function clearExpire(){
      return $this->_clear(9);
    }
    
    /**
     * Get <expire> value
     *
     * @return int - \RO\Cmd\EExpireType
     */
    public function getExpire(){
      return $this->_get(9);
    }
    
    /**
     * Set <expire> value
     *
     * @param int - \RO\Cmd\EExpireType $value
     * @return \RO\Cmd\ItemInfo
     */
    public function setExpire( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <quality> has a value
     *
     * @return boolean
     */
    public function hasQuality(){
      return $this->_has(10);
    }
    
    /**
     * Clear <quality> value
     *
     * @return \RO\Cmd\ItemInfo
     */
    public function clearQuality(){
      return $this->_clear(10);
    }
    
    /**
     * Get <quality> value
     *
     * @return int - \RO\Cmd\EQualityType
     */
    public function getQuality(){
      return $this->_get(10);
    }
    
    /**
     * Set <quality> value
     *
     * @param int - \RO\Cmd\EQualityType $value
     * @return \RO\Cmd\ItemInfo
     */
    public function setQuality( $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <equipType> has a value
     *
     * @return boolean
     */
    public function hasEquipType(){
      return $this->_has(11);
    }
    
    /**
     * Clear <equipType> value
     *
     * @return \RO\Cmd\ItemInfo
     */
    public function clearEquipType(){
      return $this->_clear(11);
    }
    
    /**
     * Get <equipType> value
     *
     * @return int - \RO\Cmd\EEquipType
     */
    public function getEquipType(){
      return $this->_get(11);
    }
    
    /**
     * Set <equipType> value
     *
     * @param int - \RO\Cmd\EEquipType $value
     * @return \RO\Cmd\ItemInfo
     */
    public function setEquipType( $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <source> has a value
     *
     * @return boolean
     */
    public function hasSource(){
      return $this->_has(12);
    }
    
    /**
     * Clear <source> value
     *
     * @return \RO\Cmd\ItemInfo
     */
    public function clearSource(){
      return $this->_clear(12);
    }
    
    /**
     * Get <source> value
     *
     * @return int - \RO\Cmd\ESource
     */
    public function getSource(){
      return $this->_get(12);
    }
    
    /**
     * Set <source> value
     *
     * @param int - \RO\Cmd\ESource $value
     * @return \RO\Cmd\ItemInfo
     */
    public function setSource( $value){
      return $this->_set(12, $value);
    }
    
    /**
     * Check if <isnew> has a value
     *
     * @return boolean
     */
    public function hasIsnew(){
      return $this->_has(13);
    }
    
    /**
     * Clear <isnew> value
     *
     * @return \RO\Cmd\ItemInfo
     */
    public function clearIsnew(){
      return $this->_clear(13);
    }
    
    /**
     * Get <isnew> value
     *
     * @return boolean
     */
    public function getIsnew(){
      return $this->_get(13);
    }
    
    /**
     * Set <isnew> value
     *
     * @param boolean $value
     * @return \RO\Cmd\ItemInfo
     */
    public function setIsnew( $value){
      return $this->_set(13, $value);
    }
    
    /**
     * Check if <maxcardslot> has a value
     *
     * @return boolean
     */
    public function hasMaxcardslot(){
      return $this->_has(14);
    }
    
    /**
     * Clear <maxcardslot> value
     *
     * @return \RO\Cmd\ItemInfo
     */
    public function clearMaxcardslot(){
      return $this->_clear(14);
    }
    
    /**
     * Get <maxcardslot> value
     *
     * @return int
     */
    public function getMaxcardslot(){
      return $this->_get(14);
    }
    
    /**
     * Set <maxcardslot> value
     *
     * @param int $value
     * @return \RO\Cmd\ItemInfo
     */
    public function setMaxcardslot( $value){
      return $this->_set(14, $value);
    }
    
    /**
     * Check if <ishint> has a value
     *
     * @return boolean
     */
    public function hasIshint(){
      return $this->_has(15);
    }
    
    /**
     * Clear <ishint> value
     *
     * @return \RO\Cmd\ItemInfo
     */
    public function clearIshint(){
      return $this->_clear(15);
    }
    
    /**
     * Get <ishint> value
     *
     * @return boolean
     */
    public function getIshint(){
      return $this->_get(15);
    }
    
    /**
     * Set <ishint> value
     *
     * @param boolean $value
     * @return \RO\Cmd\ItemInfo
     */
    public function setIshint( $value){
      return $this->_set(15, $value);
    }
    
    /**
     * Check if <isactive> has a value
     *
     * @return boolean
     */
    public function hasIsactive(){
      return $this->_has(16);
    }
    
    /**
     * Clear <isactive> value
     *
     * @return \RO\Cmd\ItemInfo
     */
    public function clearIsactive(){
      return $this->_clear(16);
    }
    
    /**
     * Get <isactive> value
     *
     * @return boolean
     */
    public function getIsactive(){
      return $this->_get(16);
    }
    
    /**
     * Set <isactive> value
     *
     * @param boolean $value
     * @return \RO\Cmd\ItemInfo
     */
    public function setIsactive( $value){
      return $this->_set(16, $value);
    }
    
    /**
     * Check if <source_npc> has a value
     *
     * @return boolean
     */
    public function hasSourceNpc(){
      return $this->_has(17);
    }
    
    /**
     * Clear <source_npc> value
     *
     * @return \RO\Cmd\ItemInfo
     */
    public function clearSourceNpc(){
      return $this->_clear(17);
    }
    
    /**
     * Get <source_npc> value
     *
     * @return int
     */
    public function getSourceNpc(){
      return $this->_get(17);
    }
    
    /**
     * Set <source_npc> value
     *
     * @param int $value
     * @return \RO\Cmd\ItemInfo
     */
    public function setSourceNpc( $value){
      return $this->_set(17, $value);
    }
    
    /**
     * Check if <refinelv> has a value
     *
     * @return boolean
     */
    public function hasRefinelv(){
      return $this->_has(18);
    }
    
    /**
     * Clear <refinelv> value
     *
     * @return \RO\Cmd\ItemInfo
     */
    public function clearRefinelv(){
      return $this->_clear(18);
    }
    
    /**
     * Get <refinelv> value
     *
     * @return int
     */
    public function getRefinelv(){
      return $this->_get(18);
    }
    
    /**
     * Set <refinelv> value
     *
     * @param int $value
     * @return \RO\Cmd\ItemInfo
     */
    public function setRefinelv( $value){
      return $this->_set(18, $value);
    }
    
    /**
     * Check if <chargemoney> has a value
     *
     * @return boolean
     */
    public function hasChargemoney(){
      return $this->_has(19);
    }
    
    /**
     * Clear <chargemoney> value
     *
     * @return \RO\Cmd\ItemInfo
     */
    public function clearChargemoney(){
      return $this->_clear(19);
    }
    
    /**
     * Get <chargemoney> value
     *
     * @return int
     */
    public function getChargemoney(){
      return $this->_get(19);
    }
    
    /**
     * Set <chargemoney> value
     *
     * @param int $value
     * @return \RO\Cmd\ItemInfo
     */
    public function setChargemoney( $value){
      return $this->_set(19, $value);
    }
    
    /**
     * Check if <overtime> has a value
     *
     * @return boolean
     */
    public function hasOvertime(){
      return $this->_has(20);
    }
    
    /**
     * Clear <overtime> value
     *
     * @return \RO\Cmd\ItemInfo
     */
    public function clearOvertime(){
      return $this->_clear(20);
    }
    
    /**
     * Get <overtime> value
     *
     * @return int
     */
    public function getOvertime(){
      return $this->_get(20);
    }
    
    /**
     * Set <overtime> value
     *
     * @param int $value
     * @return \RO\Cmd\ItemInfo
     */
    public function setOvertime( $value){
      return $this->_set(20, $value);
    }
    
    /**
     * Check if <quota> has a value
     *
     * @return boolean
     */
    public function hasQuota(){
      return $this->_has(21);
    }
    
    /**
     * Clear <quota> value
     *
     * @return \RO\Cmd\ItemInfo
     */
    public function clearQuota(){
      return $this->_clear(21);
    }
    
    /**
     * Get <quota> value
     *
     * @return int
     */
    public function getQuota(){
      return $this->_get(21);
    }
    
    /**
     * Set <quota> value
     *
     * @param int $value
     * @return \RO\Cmd\ItemInfo
     */
    public function setQuota( $value){
      return $this->_set(21, $value);
    }
  }
}

