<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: SceneUser2.proto

namespace RO\Cmd {

  class ProfessionInfo extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $branch = null;
    
    /**  @var int */
    public $profession = null;
    
    /**  @var int */
    public $joblv = null;
    
    /**  @var boolean */
    public $iscurrent = false;
    
    /**  @var boolean */
    public $isbuy = false;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.ProfessionInfo');

      // OPTIONAL UINT32 branch = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "branch";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 profession = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "profession";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 joblv = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "joblv";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL iscurrent = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "iscurrent";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = false;
      $descriptor->addField($f);

      // OPTIONAL BOOL isbuy = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "isbuy";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = false;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <branch> has a value
     *
     * @return boolean
     */
    public function hasBranch(){
      return $this->_has(1);
    }
    
    /**
     * Clear <branch> value
     *
     * @return \RO\Cmd\ProfessionInfo
     */
    public function clearBranch(){
      return $this->_clear(1);
    }
    
    /**
     * Get <branch> value
     *
     * @return int
     */
    public function getBranch(){
      return $this->_get(1);
    }
    
    /**
     * Set <branch> value
     *
     * @param int $value
     * @return \RO\Cmd\ProfessionInfo
     */
    public function setBranch( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <profession> has a value
     *
     * @return boolean
     */
    public function hasProfession(){
      return $this->_has(2);
    }
    
    /**
     * Clear <profession> value
     *
     * @return \RO\Cmd\ProfessionInfo
     */
    public function clearProfession(){
      return $this->_clear(2);
    }
    
    /**
     * Get <profession> value
     *
     * @return int
     */
    public function getProfession(){
      return $this->_get(2);
    }
    
    /**
     * Set <profession> value
     *
     * @param int $value
     * @return \RO\Cmd\ProfessionInfo
     */
    public function setProfession( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <joblv> has a value
     *
     * @return boolean
     */
    public function hasJoblv(){
      return $this->_has(3);
    }
    
    /**
     * Clear <joblv> value
     *
     * @return \RO\Cmd\ProfessionInfo
     */
    public function clearJoblv(){
      return $this->_clear(3);
    }
    
    /**
     * Get <joblv> value
     *
     * @return int
     */
    public function getJoblv(){
      return $this->_get(3);
    }
    
    /**
     * Set <joblv> value
     *
     * @param int $value
     * @return \RO\Cmd\ProfessionInfo
     */
    public function setJoblv( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <iscurrent> has a value
     *
     * @return boolean
     */
    public function hasIscurrent(){
      return $this->_has(4);
    }
    
    /**
     * Clear <iscurrent> value
     *
     * @return \RO\Cmd\ProfessionInfo
     */
    public function clearIscurrent(){
      return $this->_clear(4);
    }
    
    /**
     * Get <iscurrent> value
     *
     * @return boolean
     */
    public function getIscurrent(){
      return $this->_get(4);
    }
    
    /**
     * Set <iscurrent> value
     *
     * @param boolean $value
     * @return \RO\Cmd\ProfessionInfo
     */
    public function setIscurrent( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <isbuy> has a value
     *
     * @return boolean
     */
    public function hasIsbuy(){
      return $this->_has(5);
    }
    
    /**
     * Clear <isbuy> value
     *
     * @return \RO\Cmd\ProfessionInfo
     */
    public function clearIsbuy(){
      return $this->_clear(5);
    }
    
    /**
     * Get <isbuy> value
     *
     * @return boolean
     */
    public function getIsbuy(){
      return $this->_get(5);
    }
    
    /**
     * Set <isbuy> value
     *
     * @param boolean $value
     * @return \RO\Cmd\ProfessionInfo
     */
    public function setIsbuy( $value){
      return $this->_set(5, $value);
    }
  }
}

