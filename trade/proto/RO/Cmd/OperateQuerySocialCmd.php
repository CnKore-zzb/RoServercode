<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: SessionSociality.proto

namespace RO\Cmd {

  class OperateQuerySocialCmd extends \DrSlump\Protobuf\Message {

    /**  @var int - \RO\Cmd\Command */
    public $cmd = \RO\Cmd\Command::SESSION_USER_SOCIALITY_PROTOCMD;
    
    /**  @var int - \RO\Cmd\SocialityParam */
    public $param = \RO\Cmd\SocialityParam::SOCIALITYPARAM_OPERATE_QUERY;
    
    /**  @var int - \RO\Cmd\EOperateType */
    public $type = null;
    
    /**  @var int - \RO\Cmd\EOperateState */
    public $state = null;
    
    /**  @var int */
    public $param1 = null;
    
    /**  @var int */
    public $param2 = null;
    
    /**  @var int */
    public $param3 = null;
    
    /**  @var int[]  */
    public $param4 = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.OperateQuerySocialCmd');

      // OPTIONAL ENUM cmd = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "cmd";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\Command';
      $f->default   = \RO\Cmd\Command::SESSION_USER_SOCIALITY_PROTOCMD;
      $descriptor->addField($f);

      // OPTIONAL ENUM param = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "param";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\SocialityParam';
      $f->default   = \RO\Cmd\SocialityParam::SOCIALITYPARAM_OPERATE_QUERY;
      $descriptor->addField($f);

      // OPTIONAL ENUM type = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\EOperateType';
      $descriptor->addField($f);

      // OPTIONAL ENUM state = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\EOperateState';
      $descriptor->addField($f);

      // OPTIONAL UINT32 param1 = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "param1";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 param2 = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "param2";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 param3 = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "param3";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED UINT32 param4 = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "param4";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <cmd> has a value
     *
     * @return boolean
     */
    public function hasCmd(){
      return $this->_has(1);
    }
    
    /**
     * Clear <cmd> value
     *
     * @return \RO\Cmd\OperateQuerySocialCmd
     */
    public function clearCmd(){
      return $this->_clear(1);
    }
    
    /**
     * Get <cmd> value
     *
     * @return int - \RO\Cmd\Command
     */
    public function getCmd(){
      return $this->_get(1);
    }
    
    /**
     * Set <cmd> value
     *
     * @param int - \RO\Cmd\Command $value
     * @return \RO\Cmd\OperateQuerySocialCmd
     */
    public function setCmd( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <param> has a value
     *
     * @return boolean
     */
    public function hasParam(){
      return $this->_has(2);
    }
    
    /**
     * Clear <param> value
     *
     * @return \RO\Cmd\OperateQuerySocialCmd
     */
    public function clearParam(){
      return $this->_clear(2);
    }
    
    /**
     * Get <param> value
     *
     * @return int - \RO\Cmd\SocialityParam
     */
    public function getParam(){
      return $this->_get(2);
    }
    
    /**
     * Set <param> value
     *
     * @param int - \RO\Cmd\SocialityParam $value
     * @return \RO\Cmd\OperateQuerySocialCmd
     */
    public function setParam( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(3);
    }
    
    /**
     * Clear <type> value
     *
     * @return \RO\Cmd\OperateQuerySocialCmd
     */
    public function clearType(){
      return $this->_clear(3);
    }
    
    /**
     * Get <type> value
     *
     * @return int - \RO\Cmd\EOperateType
     */
    public function getType(){
      return $this->_get(3);
    }
    
    /**
     * Set <type> value
     *
     * @param int - \RO\Cmd\EOperateType $value
     * @return \RO\Cmd\OperateQuerySocialCmd
     */
    public function setType( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(4);
    }
    
    /**
     * Clear <state> value
     *
     * @return \RO\Cmd\OperateQuerySocialCmd
     */
    public function clearState(){
      return $this->_clear(4);
    }
    
    /**
     * Get <state> value
     *
     * @return int - \RO\Cmd\EOperateState
     */
    public function getState(){
      return $this->_get(4);
    }
    
    /**
     * Set <state> value
     *
     * @param int - \RO\Cmd\EOperateState $value
     * @return \RO\Cmd\OperateQuerySocialCmd
     */
    public function setState( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <param1> has a value
     *
     * @return boolean
     */
    public function hasParam1(){
      return $this->_has(5);
    }
    
    /**
     * Clear <param1> value
     *
     * @return \RO\Cmd\OperateQuerySocialCmd
     */
    public function clearParam1(){
      return $this->_clear(5);
    }
    
    /**
     * Get <param1> value
     *
     * @return int
     */
    public function getParam1(){
      return $this->_get(5);
    }
    
    /**
     * Set <param1> value
     *
     * @param int $value
     * @return \RO\Cmd\OperateQuerySocialCmd
     */
    public function setParam1( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <param2> has a value
     *
     * @return boolean
     */
    public function hasParam2(){
      return $this->_has(6);
    }
    
    /**
     * Clear <param2> value
     *
     * @return \RO\Cmd\OperateQuerySocialCmd
     */
    public function clearParam2(){
      return $this->_clear(6);
    }
    
    /**
     * Get <param2> value
     *
     * @return int
     */
    public function getParam2(){
      return $this->_get(6);
    }
    
    /**
     * Set <param2> value
     *
     * @param int $value
     * @return \RO\Cmd\OperateQuerySocialCmd
     */
    public function setParam2( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <param3> has a value
     *
     * @return boolean
     */
    public function hasParam3(){
      return $this->_has(7);
    }
    
    /**
     * Clear <param3> value
     *
     * @return \RO\Cmd\OperateQuerySocialCmd
     */
    public function clearParam3(){
      return $this->_clear(7);
    }
    
    /**
     * Get <param3> value
     *
     * @return int
     */
    public function getParam3(){
      return $this->_get(7);
    }
    
    /**
     * Set <param3> value
     *
     * @param int $value
     * @return \RO\Cmd\OperateQuerySocialCmd
     */
    public function setParam3( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <param4> has a value
     *
     * @return boolean
     */
    public function hasParam4(){
      return $this->_has(8);
    }
    
    /**
     * Clear <param4> value
     *
     * @return \RO\Cmd\OperateQuerySocialCmd
     */
    public function clearParam4(){
      return $this->_clear(8);
    }
    
    /**
     * Get <param4> value
     *
     * @param int $idx
     * @return int
     */
    public function getParam4($idx = NULL){
      return $this->_get(8, $idx);
    }
    
    /**
     * Set <param4> value
     *
     * @param int $value
     * @return \RO\Cmd\OperateQuerySocialCmd
     */
    public function setParam4( $value, $idx = NULL){
      return $this->_set(8, $value, $idx);
    }
    
    /**
     * Get all elements of <param4>
     *
     * @return int[]
     */
    public function getParam4List(){
     return $this->_get(8);
    }
    
    /**
     * Add a new element to <param4>
     *
     * @param int $value
     * @return \RO\Cmd\OperateQuerySocialCmd
     */
    public function addParam4( $value){
     return $this->_add(8, $value);
    }
  }
}

