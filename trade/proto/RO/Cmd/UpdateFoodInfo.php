<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: SceneFood.proto

namespace RO\Cmd {

  class UpdateFoodInfo extends \DrSlump\Protobuf\Message {

    /**  @var int - \RO\Cmd\Command */
    public $cmd = \RO\Cmd\Command::SCENE_USER_FOOD_PROTOCMD;
    
    /**  @var int - \RO\Cmd\FoodParam */
    public $param = \RO\Cmd\FoodParam::FOODPARAM_UPDATE_FOOD_INFO_NTF;
    
    /**  @var int[]  */
    public $last_cooked_foods = array();
    
    /**  @var \RO\Cmd\FoodItemInfo2[]  */
    public $eat_foods = array();
    
    /**  @var int[]  */
    public $del_eat_foods = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.UpdateFoodInfo');

      // OPTIONAL ENUM cmd = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "cmd";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\Command';
      $f->default   = \RO\Cmd\Command::SCENE_USER_FOOD_PROTOCMD;
      $descriptor->addField($f);

      // OPTIONAL ENUM param = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "param";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\FoodParam';
      $f->default   = \RO\Cmd\FoodParam::FOODPARAM_UPDATE_FOOD_INFO_NTF;
      $descriptor->addField($f);

      // REPEATED UINT32 last_cooked_foods = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "last_cooked_foods";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED MESSAGE eat_foods = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "eat_foods";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\FoodItemInfo2';
      $descriptor->addField($f);

      // REPEATED UINT32 del_eat_foods = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "del_eat_foods";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <cmd> has a value
     *
     * @return boolean
     */
    public function hasCmd(){
      return $this->_has(1);
    }
    
    /**
     * Clear <cmd> value
     *
     * @return \RO\Cmd\UpdateFoodInfo
     */
    public function clearCmd(){
      return $this->_clear(1);
    }
    
    /**
     * Get <cmd> value
     *
     * @return int - \RO\Cmd\Command
     */
    public function getCmd(){
      return $this->_get(1);
    }
    
    /**
     * Set <cmd> value
     *
     * @param int - \RO\Cmd\Command $value
     * @return \RO\Cmd\UpdateFoodInfo
     */
    public function setCmd( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <param> has a value
     *
     * @return boolean
     */
    public function hasParam(){
      return $this->_has(2);
    }
    
    /**
     * Clear <param> value
     *
     * @return \RO\Cmd\UpdateFoodInfo
     */
    public function clearParam(){
      return $this->_clear(2);
    }
    
    /**
     * Get <param> value
     *
     * @return int - \RO\Cmd\FoodParam
     */
    public function getParam(){
      return $this->_get(2);
    }
    
    /**
     * Set <param> value
     *
     * @param int - \RO\Cmd\FoodParam $value
     * @return \RO\Cmd\UpdateFoodInfo
     */
    public function setParam( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <last_cooked_foods> has a value
     *
     * @return boolean
     */
    public function hasLastCookedFoods(){
      return $this->_has(4);
    }
    
    /**
     * Clear <last_cooked_foods> value
     *
     * @return \RO\Cmd\UpdateFoodInfo
     */
    public function clearLastCookedFoods(){
      return $this->_clear(4);
    }
    
    /**
     * Get <last_cooked_foods> value
     *
     * @param int $idx
     * @return int
     */
    public function getLastCookedFoods($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <last_cooked_foods> value
     *
     * @param int $value
     * @return \RO\Cmd\UpdateFoodInfo
     */
    public function setLastCookedFoods( $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <last_cooked_foods>
     *
     * @return int[]
     */
    public function getLastCookedFoodsList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <last_cooked_foods>
     *
     * @param int $value
     * @return \RO\Cmd\UpdateFoodInfo
     */
    public function addLastCookedFoods( $value){
     return $this->_add(4, $value);
    }
    
    /**
     * Check if <eat_foods> has a value
     *
     * @return boolean
     */
    public function hasEatFoods(){
      return $this->_has(5);
    }
    
    /**
     * Clear <eat_foods> value
     *
     * @return \RO\Cmd\UpdateFoodInfo
     */
    public function clearEatFoods(){
      return $this->_clear(5);
    }
    
    /**
     * Get <eat_foods> value
     *
     * @param int $idx
     * @return \RO\Cmd\FoodItemInfo2
     */
    public function getEatFoods($idx = NULL){
      return $this->_get(5, $idx);
    }
    
    /**
     * Set <eat_foods> value
     *
     * @param \RO\Cmd\FoodItemInfo2 $value
     * @return \RO\Cmd\UpdateFoodInfo
     */
    public function setEatFoods(\RO\Cmd\FoodItemInfo2 $value, $idx = NULL){
      return $this->_set(5, $value, $idx);
    }
    
    /**
     * Get all elements of <eat_foods>
     *
     * @return \RO\Cmd\FoodItemInfo2[]
     */
    public function getEatFoodsList(){
     return $this->_get(5);
    }
    
    /**
     * Add a new element to <eat_foods>
     *
     * @param \RO\Cmd\FoodItemInfo2 $value
     * @return \RO\Cmd\UpdateFoodInfo
     */
    public function addEatFoods(\RO\Cmd\FoodItemInfo2 $value){
     return $this->_add(5, $value);
    }
    
    /**
     * Check if <del_eat_foods> has a value
     *
     * @return boolean
     */
    public function hasDelEatFoods(){
      return $this->_has(6);
    }
    
    /**
     * Clear <del_eat_foods> value
     *
     * @return \RO\Cmd\UpdateFoodInfo
     */
    public function clearDelEatFoods(){
      return $this->_clear(6);
    }
    
    /**
     * Get <del_eat_foods> value
     *
     * @param int $idx
     * @return int
     */
    public function getDelEatFoods($idx = NULL){
      return $this->_get(6, $idx);
    }
    
    /**
     * Set <del_eat_foods> value
     *
     * @param int $value
     * @return \RO\Cmd\UpdateFoodInfo
     */
    public function setDelEatFoods( $value, $idx = NULL){
      return $this->_set(6, $value, $idx);
    }
    
    /**
     * Get all elements of <del_eat_foods>
     *
     * @return int[]
     */
    public function getDelEatFoodsList(){
     return $this->_get(6);
    }
    
    /**
     * Add a new element to <del_eat_foods>
     *
     * @param int $value
     * @return \RO\Cmd\UpdateFoodInfo
     */
    public function addDelEatFoods( $value){
     return $this->_add(6, $value);
    }
  }
}

