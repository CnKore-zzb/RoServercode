<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: GuildSCmd.proto

namespace RO\Cmd {

  class SubmitMaterialGuildSCmd extends \DrSlump\Protobuf\Message {

    /**  @var int - \RO\Cmd\Command */
    public $cmd = \RO\Cmd\Command::GUILD_PROTOCMD;
    
    /**  @var int - \RO\Cmd\GuildSParam */
    public $param = \RO\Cmd\GuildSParam::GUILDSPARAM_SUBMIT_MATERIAL;
    
    /**  @var int */
    public $charid = 0;
    
    /**  @var int - \RO\Cmd\EGuildBuilding */
    public $building = \RO\Cmd\EGuildBuilding::EGUILDBUILDING_MIN;
    
    /**  @var \RO\Cmd\BuildingMaterial[]  */
    public $materials = array();
    
    /**  @var int */
    public $submitcount = 0;
    
    /**  @var int */
    public $counter = 0;
    
    /**  @var boolean */
    public $success = false;
    
    /**  @var int */
    public $curlevel = 0;
    
    /**  @var int */
    public $submitinc = 0;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.SubmitMaterialGuildSCmd');

      // OPTIONAL ENUM cmd = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "cmd";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\Command';
      $f->default   = \RO\Cmd\Command::GUILD_PROTOCMD;
      $descriptor->addField($f);

      // OPTIONAL ENUM param = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "param";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\GuildSParam';
      $f->default   = \RO\Cmd\GuildSParam::GUILDSPARAM_SUBMIT_MATERIAL;
      $descriptor->addField($f);

      // OPTIONAL UINT64 charid = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "charid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL ENUM building = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "building";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\EGuildBuilding';
      $f->default   = \RO\Cmd\EGuildBuilding::EGUILDBUILDING_MIN;
      $descriptor->addField($f);

      // REPEATED MESSAGE materials = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "materials";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\BuildingMaterial';
      $descriptor->addField($f);

      // OPTIONAL UINT32 submitcount = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "submitcount";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 counter = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "counter";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL BOOL success = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "success";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = false;
      $descriptor->addField($f);

      // OPTIONAL UINT32 curlevel = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "curlevel";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 submitinc = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "submitinc";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <cmd> has a value
     *
     * @return boolean
     */
    public function hasCmd(){
      return $this->_has(1);
    }
    
    /**
     * Clear <cmd> value
     *
     * @return \RO\Cmd\SubmitMaterialGuildSCmd
     */
    public function clearCmd(){
      return $this->_clear(1);
    }
    
    /**
     * Get <cmd> value
     *
     * @return int - \RO\Cmd\Command
     */
    public function getCmd(){
      return $this->_get(1);
    }
    
    /**
     * Set <cmd> value
     *
     * @param int - \RO\Cmd\Command $value
     * @return \RO\Cmd\SubmitMaterialGuildSCmd
     */
    public function setCmd( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <param> has a value
     *
     * @return boolean
     */
    public function hasParam(){
      return $this->_has(2);
    }
    
    /**
     * Clear <param> value
     *
     * @return \RO\Cmd\SubmitMaterialGuildSCmd
     */
    public function clearParam(){
      return $this->_clear(2);
    }
    
    /**
     * Get <param> value
     *
     * @return int - \RO\Cmd\GuildSParam
     */
    public function getParam(){
      return $this->_get(2);
    }
    
    /**
     * Set <param> value
     *
     * @param int - \RO\Cmd\GuildSParam $value
     * @return \RO\Cmd\SubmitMaterialGuildSCmd
     */
    public function setParam( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <charid> has a value
     *
     * @return boolean
     */
    public function hasCharid(){
      return $this->_has(3);
    }
    
    /**
     * Clear <charid> value
     *
     * @return \RO\Cmd\SubmitMaterialGuildSCmd
     */
    public function clearCharid(){
      return $this->_clear(3);
    }
    
    /**
     * Get <charid> value
     *
     * @return int
     */
    public function getCharid(){
      return $this->_get(3);
    }
    
    /**
     * Set <charid> value
     *
     * @param int $value
     * @return \RO\Cmd\SubmitMaterialGuildSCmd
     */
    public function setCharid( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <building> has a value
     *
     * @return boolean
     */
    public function hasBuilding(){
      return $this->_has(4);
    }
    
    /**
     * Clear <building> value
     *
     * @return \RO\Cmd\SubmitMaterialGuildSCmd
     */
    public function clearBuilding(){
      return $this->_clear(4);
    }
    
    /**
     * Get <building> value
     *
     * @return int - \RO\Cmd\EGuildBuilding
     */
    public function getBuilding(){
      return $this->_get(4);
    }
    
    /**
     * Set <building> value
     *
     * @param int - \RO\Cmd\EGuildBuilding $value
     * @return \RO\Cmd\SubmitMaterialGuildSCmd
     */
    public function setBuilding( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <materials> has a value
     *
     * @return boolean
     */
    public function hasMaterials(){
      return $this->_has(5);
    }
    
    /**
     * Clear <materials> value
     *
     * @return \RO\Cmd\SubmitMaterialGuildSCmd
     */
    public function clearMaterials(){
      return $this->_clear(5);
    }
    
    /**
     * Get <materials> value
     *
     * @param int $idx
     * @return \RO\Cmd\BuildingMaterial
     */
    public function getMaterials($idx = NULL){
      return $this->_get(5, $idx);
    }
    
    /**
     * Set <materials> value
     *
     * @param \RO\Cmd\BuildingMaterial $value
     * @return \RO\Cmd\SubmitMaterialGuildSCmd
     */
    public function setMaterials(\RO\Cmd\BuildingMaterial $value, $idx = NULL){
      return $this->_set(5, $value, $idx);
    }
    
    /**
     * Get all elements of <materials>
     *
     * @return \RO\Cmd\BuildingMaterial[]
     */
    public function getMaterialsList(){
     return $this->_get(5);
    }
    
    /**
     * Add a new element to <materials>
     *
     * @param \RO\Cmd\BuildingMaterial $value
     * @return \RO\Cmd\SubmitMaterialGuildSCmd
     */
    public function addMaterials(\RO\Cmd\BuildingMaterial $value){
     return $this->_add(5, $value);
    }
    
    /**
     * Check if <submitcount> has a value
     *
     * @return boolean
     */
    public function hasSubmitcount(){
      return $this->_has(6);
    }
    
    /**
     * Clear <submitcount> value
     *
     * @return \RO\Cmd\SubmitMaterialGuildSCmd
     */
    public function clearSubmitcount(){
      return $this->_clear(6);
    }
    
    /**
     * Get <submitcount> value
     *
     * @return int
     */
    public function getSubmitcount(){
      return $this->_get(6);
    }
    
    /**
     * Set <submitcount> value
     *
     * @param int $value
     * @return \RO\Cmd\SubmitMaterialGuildSCmd
     */
    public function setSubmitcount( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <counter> has a value
     *
     * @return boolean
     */
    public function hasCounter(){
      return $this->_has(7);
    }
    
    /**
     * Clear <counter> value
     *
     * @return \RO\Cmd\SubmitMaterialGuildSCmd
     */
    public function clearCounter(){
      return $this->_clear(7);
    }
    
    /**
     * Get <counter> value
     *
     * @return int
     */
    public function getCounter(){
      return $this->_get(7);
    }
    
    /**
     * Set <counter> value
     *
     * @param int $value
     * @return \RO\Cmd\SubmitMaterialGuildSCmd
     */
    public function setCounter( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <success> has a value
     *
     * @return boolean
     */
    public function hasSuccess(){
      return $this->_has(8);
    }
    
    /**
     * Clear <success> value
     *
     * @return \RO\Cmd\SubmitMaterialGuildSCmd
     */
    public function clearSuccess(){
      return $this->_clear(8);
    }
    
    /**
     * Get <success> value
     *
     * @return boolean
     */
    public function getSuccess(){
      return $this->_get(8);
    }
    
    /**
     * Set <success> value
     *
     * @param boolean $value
     * @return \RO\Cmd\SubmitMaterialGuildSCmd
     */
    public function setSuccess( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <curlevel> has a value
     *
     * @return boolean
     */
    public function hasCurlevel(){
      return $this->_has(9);
    }
    
    /**
     * Clear <curlevel> value
     *
     * @return \RO\Cmd\SubmitMaterialGuildSCmd
     */
    public function clearCurlevel(){
      return $this->_clear(9);
    }
    
    /**
     * Get <curlevel> value
     *
     * @return int
     */
    public function getCurlevel(){
      return $this->_get(9);
    }
    
    /**
     * Set <curlevel> value
     *
     * @param int $value
     * @return \RO\Cmd\SubmitMaterialGuildSCmd
     */
    public function setCurlevel( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <submitinc> has a value
     *
     * @return boolean
     */
    public function hasSubmitinc(){
      return $this->_has(10);
    }
    
    /**
     * Clear <submitinc> value
     *
     * @return \RO\Cmd\SubmitMaterialGuildSCmd
     */
    public function clearSubmitinc(){
      return $this->_clear(10);
    }
    
    /**
     * Get <submitinc> value
     *
     * @return int
     */
    public function getSubmitinc(){
      return $this->_get(10);
    }
    
    /**
     * Set <submitinc> value
     *
     * @param int $value
     * @return \RO\Cmd\SubmitMaterialGuildSCmd
     */
    public function setSubmitinc( $value){
      return $this->_set(10, $value);
    }
  }
}

