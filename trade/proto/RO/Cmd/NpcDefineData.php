<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: ProtoCommon.proto

namespace RO\Cmd {

  class NpcDefineData extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $id = 0;
    
    /**  @var string */
    public $name = null;
    
    /**  @var \RO\Cmd\Pos */
    public $pos = null;
    
    /**  @var int */
    public $range = 0;
    
    /**  @var int */
    public $dir = 0;
    
    /**  @var int */
    public $reborn = 0;
    
    /**  @var int */
    public $territory = 0;
    
    /**  @var float */
    public $scalemin = 0;
    
    /**  @var float */
    public $scalemax = 0;
    
    /**  @var int */
    public $life = 0;
    
    /**  @var int */
    public $behaviours = 0;
    
    /**  @var int */
    public $search = 0;
    
    /**  @var int */
    public $uniqueid = 0;
    
    /**  @var int */
    public $gearorgstate = 0;
    
    /**  @var int */
    public $purify = 0;
    
    /**  @var int */
    public $attsafelv = 0;
    
    /**  @var int */
    public $disptime = 0;
    
    /**  @var int */
    public $gearprivate = 0;
    
    /**  @var int */
    public $level = 0;
    
    /**  @var string */
    public $waitaction = null;
    
    /**  @var int - \RO\Cmd\ESummonType */
    public $stype = \RO\Cmd\ESummonType::ESUMMONTYPE_MIN;
    
    /**  @var int[]  */
    public $superai = array();
    
    /**  @var int */
    public $pursue = 0;
    
    /**  @var int */
    public $pursuetime = 0;
    
    /**  @var int */
    public $weaponpetid = 0;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.NpcDefineData');

      // OPTIONAL INT32 id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL STRING name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE pos = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "pos";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\Pos';
      $descriptor->addField($f);

      // OPTIONAL INT32 range = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "range";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL INT32 dir = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "dir";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL INT32 reborn = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "reborn";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL INT32 territory = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "territory";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL FLOAT scalemin = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "scalemin";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL FLOAT scalemax = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "scalemax";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL INT32 life = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "life";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL INT32 behaviours = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "behaviours";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL INT32 search = 13
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 13;
      $f->name      = "search";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL INT32 uniqueid = 14
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 14;
      $f->name      = "uniqueid";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL INT32 gearorgstate = 15
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 15;
      $f->name      = "gearorgstate";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL INT32 purify = 16
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 16;
      $f->name      = "purify";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL INT32 attsafelv = 17
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 17;
      $f->name      = "attsafelv";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL INT32 disptime = 18
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 18;
      $f->name      = "disptime";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL INT32 gearprivate = 19
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 19;
      $f->name      = "gearprivate";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL INT32 level = 20
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 20;
      $f->name      = "level";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL STRING waitaction = 21
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 21;
      $f->name      = "waitaction";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM stype = 22
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 22;
      $f->name      = "stype";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\ESummonType';
      $f->default   = \RO\Cmd\ESummonType::ESUMMONTYPE_MIN;
      $descriptor->addField($f);

      // REPEATED INT32 superai = 23
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 23;
      $f->name      = "superai";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL INT32 pursue = 24
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 24;
      $f->name      = "pursue";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL INT32 pursuetime = 25
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 25;
      $f->name      = "pursuetime";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL INT32 weaponpetid = 26
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 26;
      $f->name      = "weaponpetid";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \RO\Cmd\NpcDefineData
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param int $value
     * @return \RO\Cmd\NpcDefineData
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <name> value
     *
     * @return \RO\Cmd\NpcDefineData
     */
    public function clearName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(2);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \RO\Cmd\NpcDefineData
     */
    public function setName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <pos> has a value
     *
     * @return boolean
     */
    public function hasPos(){
      return $this->_has(3);
    }
    
    /**
     * Clear <pos> value
     *
     * @return \RO\Cmd\NpcDefineData
     */
    public function clearPos(){
      return $this->_clear(3);
    }
    
    /**
     * Get <pos> value
     *
     * @return \RO\Cmd\Pos
     */
    public function getPos(){
      return $this->_get(3);
    }
    
    /**
     * Set <pos> value
     *
     * @param \RO\Cmd\Pos $value
     * @return \RO\Cmd\NpcDefineData
     */
    public function setPos(\RO\Cmd\Pos $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <range> has a value
     *
     * @return boolean
     */
    public function hasRange(){
      return $this->_has(4);
    }
    
    /**
     * Clear <range> value
     *
     * @return \RO\Cmd\NpcDefineData
     */
    public function clearRange(){
      return $this->_clear(4);
    }
    
    /**
     * Get <range> value
     *
     * @return int
     */
    public function getRange(){
      return $this->_get(4);
    }
    
    /**
     * Set <range> value
     *
     * @param int $value
     * @return \RO\Cmd\NpcDefineData
     */
    public function setRange( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <dir> has a value
     *
     * @return boolean
     */
    public function hasDir(){
      return $this->_has(5);
    }
    
    /**
     * Clear <dir> value
     *
     * @return \RO\Cmd\NpcDefineData
     */
    public function clearDir(){
      return $this->_clear(5);
    }
    
    /**
     * Get <dir> value
     *
     * @return int
     */
    public function getDir(){
      return $this->_get(5);
    }
    
    /**
     * Set <dir> value
     *
     * @param int $value
     * @return \RO\Cmd\NpcDefineData
     */
    public function setDir( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <reborn> has a value
     *
     * @return boolean
     */
    public function hasReborn(){
      return $this->_has(6);
    }
    
    /**
     * Clear <reborn> value
     *
     * @return \RO\Cmd\NpcDefineData
     */
    public function clearReborn(){
      return $this->_clear(6);
    }
    
    /**
     * Get <reborn> value
     *
     * @return int
     */
    public function getReborn(){
      return $this->_get(6);
    }
    
    /**
     * Set <reborn> value
     *
     * @param int $value
     * @return \RO\Cmd\NpcDefineData
     */
    public function setReborn( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <territory> has a value
     *
     * @return boolean
     */
    public function hasTerritory(){
      return $this->_has(7);
    }
    
    /**
     * Clear <territory> value
     *
     * @return \RO\Cmd\NpcDefineData
     */
    public function clearTerritory(){
      return $this->_clear(7);
    }
    
    /**
     * Get <territory> value
     *
     * @return int
     */
    public function getTerritory(){
      return $this->_get(7);
    }
    
    /**
     * Set <territory> value
     *
     * @param int $value
     * @return \RO\Cmd\NpcDefineData
     */
    public function setTerritory( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <scalemin> has a value
     *
     * @return boolean
     */
    public function hasScalemin(){
      return $this->_has(8);
    }
    
    /**
     * Clear <scalemin> value
     *
     * @return \RO\Cmd\NpcDefineData
     */
    public function clearScalemin(){
      return $this->_clear(8);
    }
    
    /**
     * Get <scalemin> value
     *
     * @return float
     */
    public function getScalemin(){
      return $this->_get(8);
    }
    
    /**
     * Set <scalemin> value
     *
     * @param float $value
     * @return \RO\Cmd\NpcDefineData
     */
    public function setScalemin( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <scalemax> has a value
     *
     * @return boolean
     */
    public function hasScalemax(){
      return $this->_has(9);
    }
    
    /**
     * Clear <scalemax> value
     *
     * @return \RO\Cmd\NpcDefineData
     */
    public function clearScalemax(){
      return $this->_clear(9);
    }
    
    /**
     * Get <scalemax> value
     *
     * @return float
     */
    public function getScalemax(){
      return $this->_get(9);
    }
    
    /**
     * Set <scalemax> value
     *
     * @param float $value
     * @return \RO\Cmd\NpcDefineData
     */
    public function setScalemax( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <life> has a value
     *
     * @return boolean
     */
    public function hasLife(){
      return $this->_has(10);
    }
    
    /**
     * Clear <life> value
     *
     * @return \RO\Cmd\NpcDefineData
     */
    public function clearLife(){
      return $this->_clear(10);
    }
    
    /**
     * Get <life> value
     *
     * @return int
     */
    public function getLife(){
      return $this->_get(10);
    }
    
    /**
     * Set <life> value
     *
     * @param int $value
     * @return \RO\Cmd\NpcDefineData
     */
    public function setLife( $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <behaviours> has a value
     *
     * @return boolean
     */
    public function hasBehaviours(){
      return $this->_has(11);
    }
    
    /**
     * Clear <behaviours> value
     *
     * @return \RO\Cmd\NpcDefineData
     */
    public function clearBehaviours(){
      return $this->_clear(11);
    }
    
    /**
     * Get <behaviours> value
     *
     * @return int
     */
    public function getBehaviours(){
      return $this->_get(11);
    }
    
    /**
     * Set <behaviours> value
     *
     * @param int $value
     * @return \RO\Cmd\NpcDefineData
     */
    public function setBehaviours( $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <search> has a value
     *
     * @return boolean
     */
    public function hasSearch(){
      return $this->_has(13);
    }
    
    /**
     * Clear <search> value
     *
     * @return \RO\Cmd\NpcDefineData
     */
    public function clearSearch(){
      return $this->_clear(13);
    }
    
    /**
     * Get <search> value
     *
     * @return int
     */
    public function getSearch(){
      return $this->_get(13);
    }
    
    /**
     * Set <search> value
     *
     * @param int $value
     * @return \RO\Cmd\NpcDefineData
     */
    public function setSearch( $value){
      return $this->_set(13, $value);
    }
    
    /**
     * Check if <uniqueid> has a value
     *
     * @return boolean
     */
    public function hasUniqueid(){
      return $this->_has(14);
    }
    
    /**
     * Clear <uniqueid> value
     *
     * @return \RO\Cmd\NpcDefineData
     */
    public function clearUniqueid(){
      return $this->_clear(14);
    }
    
    /**
     * Get <uniqueid> value
     *
     * @return int
     */
    public function getUniqueid(){
      return $this->_get(14);
    }
    
    /**
     * Set <uniqueid> value
     *
     * @param int $value
     * @return \RO\Cmd\NpcDefineData
     */
    public function setUniqueid( $value){
      return $this->_set(14, $value);
    }
    
    /**
     * Check if <gearorgstate> has a value
     *
     * @return boolean
     */
    public function hasGearorgstate(){
      return $this->_has(15);
    }
    
    /**
     * Clear <gearorgstate> value
     *
     * @return \RO\Cmd\NpcDefineData
     */
    public function clearGearorgstate(){
      return $this->_clear(15);
    }
    
    /**
     * Get <gearorgstate> value
     *
     * @return int
     */
    public function getGearorgstate(){
      return $this->_get(15);
    }
    
    /**
     * Set <gearorgstate> value
     *
     * @param int $value
     * @return \RO\Cmd\NpcDefineData
     */
    public function setGearorgstate( $value){
      return $this->_set(15, $value);
    }
    
    /**
     * Check if <purify> has a value
     *
     * @return boolean
     */
    public function hasPurify(){
      return $this->_has(16);
    }
    
    /**
     * Clear <purify> value
     *
     * @return \RO\Cmd\NpcDefineData
     */
    public function clearPurify(){
      return $this->_clear(16);
    }
    
    /**
     * Get <purify> value
     *
     * @return int
     */
    public function getPurify(){
      return $this->_get(16);
    }
    
    /**
     * Set <purify> value
     *
     * @param int $value
     * @return \RO\Cmd\NpcDefineData
     */
    public function setPurify( $value){
      return $this->_set(16, $value);
    }
    
    /**
     * Check if <attsafelv> has a value
     *
     * @return boolean
     */
    public function hasAttsafelv(){
      return $this->_has(17);
    }
    
    /**
     * Clear <attsafelv> value
     *
     * @return \RO\Cmd\NpcDefineData
     */
    public function clearAttsafelv(){
      return $this->_clear(17);
    }
    
    /**
     * Get <attsafelv> value
     *
     * @return int
     */
    public function getAttsafelv(){
      return $this->_get(17);
    }
    
    /**
     * Set <attsafelv> value
     *
     * @param int $value
     * @return \RO\Cmd\NpcDefineData
     */
    public function setAttsafelv( $value){
      return $this->_set(17, $value);
    }
    
    /**
     * Check if <disptime> has a value
     *
     * @return boolean
     */
    public function hasDisptime(){
      return $this->_has(18);
    }
    
    /**
     * Clear <disptime> value
     *
     * @return \RO\Cmd\NpcDefineData
     */
    public function clearDisptime(){
      return $this->_clear(18);
    }
    
    /**
     * Get <disptime> value
     *
     * @return int
     */
    public function getDisptime(){
      return $this->_get(18);
    }
    
    /**
     * Set <disptime> value
     *
     * @param int $value
     * @return \RO\Cmd\NpcDefineData
     */
    public function setDisptime( $value){
      return $this->_set(18, $value);
    }
    
    /**
     * Check if <gearprivate> has a value
     *
     * @return boolean
     */
    public function hasGearprivate(){
      return $this->_has(19);
    }
    
    /**
     * Clear <gearprivate> value
     *
     * @return \RO\Cmd\NpcDefineData
     */
    public function clearGearprivate(){
      return $this->_clear(19);
    }
    
    /**
     * Get <gearprivate> value
     *
     * @return int
     */
    public function getGearprivate(){
      return $this->_get(19);
    }
    
    /**
     * Set <gearprivate> value
     *
     * @param int $value
     * @return \RO\Cmd\NpcDefineData
     */
    public function setGearprivate( $value){
      return $this->_set(19, $value);
    }
    
    /**
     * Check if <level> has a value
     *
     * @return boolean
     */
    public function hasLevel(){
      return $this->_has(20);
    }
    
    /**
     * Clear <level> value
     *
     * @return \RO\Cmd\NpcDefineData
     */
    public function clearLevel(){
      return $this->_clear(20);
    }
    
    /**
     * Get <level> value
     *
     * @return int
     */
    public function getLevel(){
      return $this->_get(20);
    }
    
    /**
     * Set <level> value
     *
     * @param int $value
     * @return \RO\Cmd\NpcDefineData
     */
    public function setLevel( $value){
      return $this->_set(20, $value);
    }
    
    /**
     * Check if <waitaction> has a value
     *
     * @return boolean
     */
    public function hasWaitaction(){
      return $this->_has(21);
    }
    
    /**
     * Clear <waitaction> value
     *
     * @return \RO\Cmd\NpcDefineData
     */
    public function clearWaitaction(){
      return $this->_clear(21);
    }
    
    /**
     * Get <waitaction> value
     *
     * @return string
     */
    public function getWaitaction(){
      return $this->_get(21);
    }
    
    /**
     * Set <waitaction> value
     *
     * @param string $value
     * @return \RO\Cmd\NpcDefineData
     */
    public function setWaitaction( $value){
      return $this->_set(21, $value);
    }
    
    /**
     * Check if <stype> has a value
     *
     * @return boolean
     */
    public function hasStype(){
      return $this->_has(22);
    }
    
    /**
     * Clear <stype> value
     *
     * @return \RO\Cmd\NpcDefineData
     */
    public function clearStype(){
      return $this->_clear(22);
    }
    
    /**
     * Get <stype> value
     *
     * @return int - \RO\Cmd\ESummonType
     */
    public function getStype(){
      return $this->_get(22);
    }
    
    /**
     * Set <stype> value
     *
     * @param int - \RO\Cmd\ESummonType $value
     * @return \RO\Cmd\NpcDefineData
     */
    public function setStype( $value){
      return $this->_set(22, $value);
    }
    
    /**
     * Check if <superai> has a value
     *
     * @return boolean
     */
    public function hasSuperai(){
      return $this->_has(23);
    }
    
    /**
     * Clear <superai> value
     *
     * @return \RO\Cmd\NpcDefineData
     */
    public function clearSuperai(){
      return $this->_clear(23);
    }
    
    /**
     * Get <superai> value
     *
     * @param int $idx
     * @return int
     */
    public function getSuperai($idx = NULL){
      return $this->_get(23, $idx);
    }
    
    /**
     * Set <superai> value
     *
     * @param int $value
     * @return \RO\Cmd\NpcDefineData
     */
    public function setSuperai( $value, $idx = NULL){
      return $this->_set(23, $value, $idx);
    }
    
    /**
     * Get all elements of <superai>
     *
     * @return int[]
     */
    public function getSuperaiList(){
     return $this->_get(23);
    }
    
    /**
     * Add a new element to <superai>
     *
     * @param int $value
     * @return \RO\Cmd\NpcDefineData
     */
    public function addSuperai( $value){
     return $this->_add(23, $value);
    }
    
    /**
     * Check if <pursue> has a value
     *
     * @return boolean
     */
    public function hasPursue(){
      return $this->_has(24);
    }
    
    /**
     * Clear <pursue> value
     *
     * @return \RO\Cmd\NpcDefineData
     */
    public function clearPursue(){
      return $this->_clear(24);
    }
    
    /**
     * Get <pursue> value
     *
     * @return int
     */
    public function getPursue(){
      return $this->_get(24);
    }
    
    /**
     * Set <pursue> value
     *
     * @param int $value
     * @return \RO\Cmd\NpcDefineData
     */
    public function setPursue( $value){
      return $this->_set(24, $value);
    }
    
    /**
     * Check if <pursuetime> has a value
     *
     * @return boolean
     */
    public function hasPursuetime(){
      return $this->_has(25);
    }
    
    /**
     * Clear <pursuetime> value
     *
     * @return \RO\Cmd\NpcDefineData
     */
    public function clearPursuetime(){
      return $this->_clear(25);
    }
    
    /**
     * Get <pursuetime> value
     *
     * @return int
     */
    public function getPursuetime(){
      return $this->_get(25);
    }
    
    /**
     * Set <pursuetime> value
     *
     * @param int $value
     * @return \RO\Cmd\NpcDefineData
     */
    public function setPursuetime( $value){
      return $this->_set(25, $value);
    }
    
    /**
     * Check if <weaponpetid> has a value
     *
     * @return boolean
     */
    public function hasWeaponpetid(){
      return $this->_has(26);
    }
    
    /**
     * Clear <weaponpetid> value
     *
     * @return \RO\Cmd\NpcDefineData
     */
    public function clearWeaponpetid(){
      return $this->_clear(26);
    }
    
    /**
     * Get <weaponpetid> value
     *
     * @return int
     */
    public function getWeaponpetid(){
      return $this->_get(26);
    }
    
    /**
     * Set <weaponpetid> value
     *
     * @param int $value
     * @return \RO\Cmd\NpcDefineData
     */
    public function setWeaponpetid( $value){
      return $this->_set(26, $value);
    }
  }
}

