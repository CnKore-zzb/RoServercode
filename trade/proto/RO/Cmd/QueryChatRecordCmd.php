<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: RecordCmd.proto

namespace RO\Cmd {

  class QueryChatRecordCmd extends \DrSlump\Protobuf\Message {

    /**  @var int - \RO\Cmd\Command */
    public $cmd = \RO\Cmd\Command::RECORD_DATA_PROTOCMD;
    
    /**  @var int - \RO\Cmd\RecordParam */
    public $param = \RO\Cmd\RecordParam::RECORDPARAM_CHAT_QUERY;
    
    /**  @var int */
    public $charid = 0;
    
    /**  @var int */
    public $targetid = 0;
    
    /**  @var int */
    public $start = 0;
    
    /**  @var int */
    public $end = 0;
    
    /**  @var int */
    public $selfport = 0;
    
    /**  @var int */
    public $targetport = 0;
    
    /**  @var string */
    public $scenename = null;
    
    /**  @var string[]  */
    public $datas = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.QueryChatRecordCmd');

      // OPTIONAL ENUM cmd = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "cmd";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\Command';
      $f->default   = \RO\Cmd\Command::RECORD_DATA_PROTOCMD;
      $descriptor->addField($f);

      // OPTIONAL ENUM param = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "param";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\RecordParam';
      $f->default   = \RO\Cmd\RecordParam::RECORDPARAM_CHAT_QUERY;
      $descriptor->addField($f);

      // OPTIONAL UINT64 charid = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "charid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT64 targetid = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "targetid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 start = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "start";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 end = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "end";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 selfport = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "selfport";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 targetport = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "targetport";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL STRING scenename = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "scenename";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED BYTES datas = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "datas";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <cmd> has a value
     *
     * @return boolean
     */
    public function hasCmd(){
      return $this->_has(1);
    }
    
    /**
     * Clear <cmd> value
     *
     * @return \RO\Cmd\QueryChatRecordCmd
     */
    public function clearCmd(){
      return $this->_clear(1);
    }
    
    /**
     * Get <cmd> value
     *
     * @return int - \RO\Cmd\Command
     */
    public function getCmd(){
      return $this->_get(1);
    }
    
    /**
     * Set <cmd> value
     *
     * @param int - \RO\Cmd\Command $value
     * @return \RO\Cmd\QueryChatRecordCmd
     */
    public function setCmd( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <param> has a value
     *
     * @return boolean
     */
    public function hasParam(){
      return $this->_has(2);
    }
    
    /**
     * Clear <param> value
     *
     * @return \RO\Cmd\QueryChatRecordCmd
     */
    public function clearParam(){
      return $this->_clear(2);
    }
    
    /**
     * Get <param> value
     *
     * @return int - \RO\Cmd\RecordParam
     */
    public function getParam(){
      return $this->_get(2);
    }
    
    /**
     * Set <param> value
     *
     * @param int - \RO\Cmd\RecordParam $value
     * @return \RO\Cmd\QueryChatRecordCmd
     */
    public function setParam( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <charid> has a value
     *
     * @return boolean
     */
    public function hasCharid(){
      return $this->_has(3);
    }
    
    /**
     * Clear <charid> value
     *
     * @return \RO\Cmd\QueryChatRecordCmd
     */
    public function clearCharid(){
      return $this->_clear(3);
    }
    
    /**
     * Get <charid> value
     *
     * @return int
     */
    public function getCharid(){
      return $this->_get(3);
    }
    
    /**
     * Set <charid> value
     *
     * @param int $value
     * @return \RO\Cmd\QueryChatRecordCmd
     */
    public function setCharid( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <targetid> has a value
     *
     * @return boolean
     */
    public function hasTargetid(){
      return $this->_has(4);
    }
    
    /**
     * Clear <targetid> value
     *
     * @return \RO\Cmd\QueryChatRecordCmd
     */
    public function clearTargetid(){
      return $this->_clear(4);
    }
    
    /**
     * Get <targetid> value
     *
     * @return int
     */
    public function getTargetid(){
      return $this->_get(4);
    }
    
    /**
     * Set <targetid> value
     *
     * @param int $value
     * @return \RO\Cmd\QueryChatRecordCmd
     */
    public function setTargetid( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <start> has a value
     *
     * @return boolean
     */
    public function hasStart(){
      return $this->_has(5);
    }
    
    /**
     * Clear <start> value
     *
     * @return \RO\Cmd\QueryChatRecordCmd
     */
    public function clearStart(){
      return $this->_clear(5);
    }
    
    /**
     * Get <start> value
     *
     * @return int
     */
    public function getStart(){
      return $this->_get(5);
    }
    
    /**
     * Set <start> value
     *
     * @param int $value
     * @return \RO\Cmd\QueryChatRecordCmd
     */
    public function setStart( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <end> has a value
     *
     * @return boolean
     */
    public function hasEnd(){
      return $this->_has(6);
    }
    
    /**
     * Clear <end> value
     *
     * @return \RO\Cmd\QueryChatRecordCmd
     */
    public function clearEnd(){
      return $this->_clear(6);
    }
    
    /**
     * Get <end> value
     *
     * @return int
     */
    public function getEnd(){
      return $this->_get(6);
    }
    
    /**
     * Set <end> value
     *
     * @param int $value
     * @return \RO\Cmd\QueryChatRecordCmd
     */
    public function setEnd( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <selfport> has a value
     *
     * @return boolean
     */
    public function hasSelfport(){
      return $this->_has(7);
    }
    
    /**
     * Clear <selfport> value
     *
     * @return \RO\Cmd\QueryChatRecordCmd
     */
    public function clearSelfport(){
      return $this->_clear(7);
    }
    
    /**
     * Get <selfport> value
     *
     * @return int
     */
    public function getSelfport(){
      return $this->_get(7);
    }
    
    /**
     * Set <selfport> value
     *
     * @param int $value
     * @return \RO\Cmd\QueryChatRecordCmd
     */
    public function setSelfport( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <targetport> has a value
     *
     * @return boolean
     */
    public function hasTargetport(){
      return $this->_has(8);
    }
    
    /**
     * Clear <targetport> value
     *
     * @return \RO\Cmd\QueryChatRecordCmd
     */
    public function clearTargetport(){
      return $this->_clear(8);
    }
    
    /**
     * Get <targetport> value
     *
     * @return int
     */
    public function getTargetport(){
      return $this->_get(8);
    }
    
    /**
     * Set <targetport> value
     *
     * @param int $value
     * @return \RO\Cmd\QueryChatRecordCmd
     */
    public function setTargetport( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <scenename> has a value
     *
     * @return boolean
     */
    public function hasScenename(){
      return $this->_has(9);
    }
    
    /**
     * Clear <scenename> value
     *
     * @return \RO\Cmd\QueryChatRecordCmd
     */
    public function clearScenename(){
      return $this->_clear(9);
    }
    
    /**
     * Get <scenename> value
     *
     * @return string
     */
    public function getScenename(){
      return $this->_get(9);
    }
    
    /**
     * Set <scenename> value
     *
     * @param string $value
     * @return \RO\Cmd\QueryChatRecordCmd
     */
    public function setScenename( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <datas> has a value
     *
     * @return boolean
     */
    public function hasDatas(){
      return $this->_has(10);
    }
    
    /**
     * Clear <datas> value
     *
     * @return \RO\Cmd\QueryChatRecordCmd
     */
    public function clearDatas(){
      return $this->_clear(10);
    }
    
    /**
     * Get <datas> value
     *
     * @param int $idx
     * @return string
     */
    public function getDatas($idx = NULL){
      return $this->_get(10, $idx);
    }
    
    /**
     * Set <datas> value
     *
     * @param string $value
     * @return \RO\Cmd\QueryChatRecordCmd
     */
    public function setDatas( $value, $idx = NULL){
      return $this->_set(10, $value, $idx);
    }
    
    /**
     * Get all elements of <datas>
     *
     * @return string[]
     */
    public function getDatasList(){
     return $this->_get(10);
    }
    
    /**
     * Add a new element to <datas>
     *
     * @param string $value
     * @return \RO\Cmd\QueryChatRecordCmd
     */
    public function addDatas( $value){
     return $this->_add(10, $value);
    }
  }
}

