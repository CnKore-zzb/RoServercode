<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: RecordCmd.proto

namespace RO\Cmd {

  class BlobUser extends \DrSlump\Protobuf\Message {

    /**  @var float */
    public $x = 0;
    
    /**  @var float */
    public $y = 0;
    
    /**  @var float */
    public $z = 0;
    
    /**  @var int */
    public $clothcolor = 0;
    
    /**  @var int */
    public $purify = 0;
    
    /**  @var int */
    public $savemap = 0;
    
    /**  @var int */
    public $lastmapid = null;
    
    /**  @var int */
    public $lastrealmapid = null;
    
    /**  @var int[]  */
    public $shownpcs = array();
    
    /**  @var int[]  */
    public $mapareas = array();
    
    /**  @var int[]  */
    public $patchversion = array();
    
    /**  @var int */
    public $teamtimelen = 0;
    
    /**  @var int */
    public $followerid = 0;
    
    /**  @var int */
    public $leveluptime = 0;
    
    /**  @var int */
    public $lastsmapid = 0;
    
    /**  @var float */
    public $sx = 0;
    
    /**  @var float */
    public $sy = 0;
    
    /**  @var float */
    public $sz = 0;
    
    /**  @var int */
    public $healcount = 0;
    
    /**  @var int */
    public $zeny_max = 0;
    
    /**  @var int */
    public $zeny_debt = 0;
    
    /**  @var int */
    public $pvp_coin = 0;
    
    /**  @var int */
    public $con = 0;
    
    /**  @var boolean */
    public $coninit = false;
    
    /**  @var int */
    public $charge_zeny = null;
    
    /**  @var int */
    public $charge_lottery = null;
    
    /**  @var int */
    public $lottery_coin = 0;
    
    /**  @var int */
    public $rename_time = 0;
    
    /**  @var int */
    public $guild_honor = 0;
    
    /**  @var int */
    public $save_index = 0;
    
    /**  @var boolean */
    public $divorce_roller_coaster = false;
    
    /**  @var int */
    public $daily_normal_zeny = null;
    
    /**  @var int */
    public $daily_charge_zeny = null;
    
    /**  @var int */
    public $last_offlinetime = null;
    
    /**  @var int */
    public $last_baselv = null;
    
    /**  @var int */
    public $last_joblv = null;
    
    /**  @var int */
    public $dead_coin = 0;
    
    /**  @var int */
    public $dead_lv = 0;
    
    /**  @var int */
    public $dead_exp = 0;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.BlobUser');

      // OPTIONAL FLOAT x = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "x";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL FLOAT y = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "y";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL FLOAT z = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "z";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 clothcolor = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "clothcolor";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 purify = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "purify";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 savemap = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "savemap";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 lastmapid = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "lastmapid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 lastrealmapid = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "lastrealmapid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED UINT32 shownpcs = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "shownpcs";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED UINT32 mapareas = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "mapareas";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED UINT32 patchversion = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "patchversion";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL UINT32 teamtimelen = 13
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 13;
      $f->name      = "teamtimelen";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT64 followerid = 14
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 14;
      $f->name      = "followerid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 leveluptime = 15
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 15;
      $f->name      = "leveluptime";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 lastsmapid = 16
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 16;
      $f->name      = "lastsmapid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL FLOAT sx = 17
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 17;
      $f->name      = "sx";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL FLOAT sy = 18
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 18;
      $f->name      = "sy";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL FLOAT sz = 19
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 19;
      $f->name      = "sz";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 healcount = 20
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 20;
      $f->name      = "healcount";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 zeny_max = 21
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 21;
      $f->name      = "zeny_max";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 zeny_debt = 22
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 22;
      $f->name      = "zeny_debt";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 pvp_coin = 23
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 23;
      $f->name      = "pvp_coin";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 con = 24
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 24;
      $f->name      = "con";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL BOOL coninit = 25
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 25;
      $f->name      = "coninit";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = false;
      $descriptor->addField($f);

      // OPTIONAL UINT64 charge_zeny = 26
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 26;
      $f->name      = "charge_zeny";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 charge_lottery = 27
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 27;
      $f->name      = "charge_lottery";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 lottery_coin = 28
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 28;
      $f->name      = "lottery_coin";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 rename_time = 29
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 29;
      $f->name      = "rename_time";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 guild_honor = 30
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 30;
      $f->name      = "guild_honor";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT64 save_index = 31
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 31;
      $f->name      = "save_index";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL BOOL divorce_roller_coaster = 32
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 32;
      $f->name      = "divorce_roller_coaster";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = false;
      $descriptor->addField($f);

      // OPTIONAL UINT64 daily_normal_zeny = 33
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 33;
      $f->name      = "daily_normal_zeny";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT64 daily_charge_zeny = 34
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 34;
      $f->name      = "daily_charge_zeny";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 last_offlinetime = 35
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 35;
      $f->name      = "last_offlinetime";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 last_baselv = 36
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 36;
      $f->name      = "last_baselv";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 last_joblv = 37
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 37;
      $f->name      = "last_joblv";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 dead_coin = 38
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 38;
      $f->name      = "dead_coin";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 dead_lv = 39
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 39;
      $f->name      = "dead_lv";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 dead_exp = 40
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 40;
      $f->name      = "dead_exp";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <x> has a value
     *
     * @return boolean
     */
    public function hasX(){
      return $this->_has(1);
    }
    
    /**
     * Clear <x> value
     *
     * @return \RO\Cmd\BlobUser
     */
    public function clearX(){
      return $this->_clear(1);
    }
    
    /**
     * Get <x> value
     *
     * @return float
     */
    public function getX(){
      return $this->_get(1);
    }
    
    /**
     * Set <x> value
     *
     * @param float $value
     * @return \RO\Cmd\BlobUser
     */
    public function setX( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <y> has a value
     *
     * @return boolean
     */
    public function hasY(){
      return $this->_has(2);
    }
    
    /**
     * Clear <y> value
     *
     * @return \RO\Cmd\BlobUser
     */
    public function clearY(){
      return $this->_clear(2);
    }
    
    /**
     * Get <y> value
     *
     * @return float
     */
    public function getY(){
      return $this->_get(2);
    }
    
    /**
     * Set <y> value
     *
     * @param float $value
     * @return \RO\Cmd\BlobUser
     */
    public function setY( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <z> has a value
     *
     * @return boolean
     */
    public function hasZ(){
      return $this->_has(3);
    }
    
    /**
     * Clear <z> value
     *
     * @return \RO\Cmd\BlobUser
     */
    public function clearZ(){
      return $this->_clear(3);
    }
    
    /**
     * Get <z> value
     *
     * @return float
     */
    public function getZ(){
      return $this->_get(3);
    }
    
    /**
     * Set <z> value
     *
     * @param float $value
     * @return \RO\Cmd\BlobUser
     */
    public function setZ( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <clothcolor> has a value
     *
     * @return boolean
     */
    public function hasClothcolor(){
      return $this->_has(4);
    }
    
    /**
     * Clear <clothcolor> value
     *
     * @return \RO\Cmd\BlobUser
     */
    public function clearClothcolor(){
      return $this->_clear(4);
    }
    
    /**
     * Get <clothcolor> value
     *
     * @return int
     */
    public function getClothcolor(){
      return $this->_get(4);
    }
    
    /**
     * Set <clothcolor> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobUser
     */
    public function setClothcolor( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <purify> has a value
     *
     * @return boolean
     */
    public function hasPurify(){
      return $this->_has(6);
    }
    
    /**
     * Clear <purify> value
     *
     * @return \RO\Cmd\BlobUser
     */
    public function clearPurify(){
      return $this->_clear(6);
    }
    
    /**
     * Get <purify> value
     *
     * @return int
     */
    public function getPurify(){
      return $this->_get(6);
    }
    
    /**
     * Set <purify> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobUser
     */
    public function setPurify( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <savemap> has a value
     *
     * @return boolean
     */
    public function hasSavemap(){
      return $this->_has(7);
    }
    
    /**
     * Clear <savemap> value
     *
     * @return \RO\Cmd\BlobUser
     */
    public function clearSavemap(){
      return $this->_clear(7);
    }
    
    /**
     * Get <savemap> value
     *
     * @return int
     */
    public function getSavemap(){
      return $this->_get(7);
    }
    
    /**
     * Set <savemap> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobUser
     */
    public function setSavemap( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <lastmapid> has a value
     *
     * @return boolean
     */
    public function hasLastmapid(){
      return $this->_has(8);
    }
    
    /**
     * Clear <lastmapid> value
     *
     * @return \RO\Cmd\BlobUser
     */
    public function clearLastmapid(){
      return $this->_clear(8);
    }
    
    /**
     * Get <lastmapid> value
     *
     * @return int
     */
    public function getLastmapid(){
      return $this->_get(8);
    }
    
    /**
     * Set <lastmapid> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobUser
     */
    public function setLastmapid( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <lastrealmapid> has a value
     *
     * @return boolean
     */
    public function hasLastrealmapid(){
      return $this->_has(11);
    }
    
    /**
     * Clear <lastrealmapid> value
     *
     * @return \RO\Cmd\BlobUser
     */
    public function clearLastrealmapid(){
      return $this->_clear(11);
    }
    
    /**
     * Get <lastrealmapid> value
     *
     * @return int
     */
    public function getLastrealmapid(){
      return $this->_get(11);
    }
    
    /**
     * Set <lastrealmapid> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobUser
     */
    public function setLastrealmapid( $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <shownpcs> has a value
     *
     * @return boolean
     */
    public function hasShownpcs(){
      return $this->_has(9);
    }
    
    /**
     * Clear <shownpcs> value
     *
     * @return \RO\Cmd\BlobUser
     */
    public function clearShownpcs(){
      return $this->_clear(9);
    }
    
    /**
     * Get <shownpcs> value
     *
     * @param int $idx
     * @return int
     */
    public function getShownpcs($idx = NULL){
      return $this->_get(9, $idx);
    }
    
    /**
     * Set <shownpcs> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobUser
     */
    public function setShownpcs( $value, $idx = NULL){
      return $this->_set(9, $value, $idx);
    }
    
    /**
     * Get all elements of <shownpcs>
     *
     * @return int[]
     */
    public function getShownpcsList(){
     return $this->_get(9);
    }
    
    /**
     * Add a new element to <shownpcs>
     *
     * @param int $value
     * @return \RO\Cmd\BlobUser
     */
    public function addShownpcs( $value){
     return $this->_add(9, $value);
    }
    
    /**
     * Check if <mapareas> has a value
     *
     * @return boolean
     */
    public function hasMapareas(){
      return $this->_has(10);
    }
    
    /**
     * Clear <mapareas> value
     *
     * @return \RO\Cmd\BlobUser
     */
    public function clearMapareas(){
      return $this->_clear(10);
    }
    
    /**
     * Get <mapareas> value
     *
     * @param int $idx
     * @return int
     */
    public function getMapareas($idx = NULL){
      return $this->_get(10, $idx);
    }
    
    /**
     * Set <mapareas> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobUser
     */
    public function setMapareas( $value, $idx = NULL){
      return $this->_set(10, $value, $idx);
    }
    
    /**
     * Get all elements of <mapareas>
     *
     * @return int[]
     */
    public function getMapareasList(){
     return $this->_get(10);
    }
    
    /**
     * Add a new element to <mapareas>
     *
     * @param int $value
     * @return \RO\Cmd\BlobUser
     */
    public function addMapareas( $value){
     return $this->_add(10, $value);
    }
    
    /**
     * Check if <patchversion> has a value
     *
     * @return boolean
     */
    public function hasPatchversion(){
      return $this->_has(12);
    }
    
    /**
     * Clear <patchversion> value
     *
     * @return \RO\Cmd\BlobUser
     */
    public function clearPatchversion(){
      return $this->_clear(12);
    }
    
    /**
     * Get <patchversion> value
     *
     * @param int $idx
     * @return int
     */
    public function getPatchversion($idx = NULL){
      return $this->_get(12, $idx);
    }
    
    /**
     * Set <patchversion> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobUser
     */
    public function setPatchversion( $value, $idx = NULL){
      return $this->_set(12, $value, $idx);
    }
    
    /**
     * Get all elements of <patchversion>
     *
     * @return int[]
     */
    public function getPatchversionList(){
     return $this->_get(12);
    }
    
    /**
     * Add a new element to <patchversion>
     *
     * @param int $value
     * @return \RO\Cmd\BlobUser
     */
    public function addPatchversion( $value){
     return $this->_add(12, $value);
    }
    
    /**
     * Check if <teamtimelen> has a value
     *
     * @return boolean
     */
    public function hasTeamtimelen(){
      return $this->_has(13);
    }
    
    /**
     * Clear <teamtimelen> value
     *
     * @return \RO\Cmd\BlobUser
     */
    public function clearTeamtimelen(){
      return $this->_clear(13);
    }
    
    /**
     * Get <teamtimelen> value
     *
     * @return int
     */
    public function getTeamtimelen(){
      return $this->_get(13);
    }
    
    /**
     * Set <teamtimelen> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobUser
     */
    public function setTeamtimelen( $value){
      return $this->_set(13, $value);
    }
    
    /**
     * Check if <followerid> has a value
     *
     * @return boolean
     */
    public function hasFollowerid(){
      return $this->_has(14);
    }
    
    /**
     * Clear <followerid> value
     *
     * @return \RO\Cmd\BlobUser
     */
    public function clearFollowerid(){
      return $this->_clear(14);
    }
    
    /**
     * Get <followerid> value
     *
     * @return int
     */
    public function getFollowerid(){
      return $this->_get(14);
    }
    
    /**
     * Set <followerid> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobUser
     */
    public function setFollowerid( $value){
      return $this->_set(14, $value);
    }
    
    /**
     * Check if <leveluptime> has a value
     *
     * @return boolean
     */
    public function hasLeveluptime(){
      return $this->_has(15);
    }
    
    /**
     * Clear <leveluptime> value
     *
     * @return \RO\Cmd\BlobUser
     */
    public function clearLeveluptime(){
      return $this->_clear(15);
    }
    
    /**
     * Get <leveluptime> value
     *
     * @return int
     */
    public function getLeveluptime(){
      return $this->_get(15);
    }
    
    /**
     * Set <leveluptime> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobUser
     */
    public function setLeveluptime( $value){
      return $this->_set(15, $value);
    }
    
    /**
     * Check if <lastsmapid> has a value
     *
     * @return boolean
     */
    public function hasLastsmapid(){
      return $this->_has(16);
    }
    
    /**
     * Clear <lastsmapid> value
     *
     * @return \RO\Cmd\BlobUser
     */
    public function clearLastsmapid(){
      return $this->_clear(16);
    }
    
    /**
     * Get <lastsmapid> value
     *
     * @return int
     */
    public function getLastsmapid(){
      return $this->_get(16);
    }
    
    /**
     * Set <lastsmapid> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobUser
     */
    public function setLastsmapid( $value){
      return $this->_set(16, $value);
    }
    
    /**
     * Check if <sx> has a value
     *
     * @return boolean
     */
    public function hasSx(){
      return $this->_has(17);
    }
    
    /**
     * Clear <sx> value
     *
     * @return \RO\Cmd\BlobUser
     */
    public function clearSx(){
      return $this->_clear(17);
    }
    
    /**
     * Get <sx> value
     *
     * @return float
     */
    public function getSx(){
      return $this->_get(17);
    }
    
    /**
     * Set <sx> value
     *
     * @param float $value
     * @return \RO\Cmd\BlobUser
     */
    public function setSx( $value){
      return $this->_set(17, $value);
    }
    
    /**
     * Check if <sy> has a value
     *
     * @return boolean
     */
    public function hasSy(){
      return $this->_has(18);
    }
    
    /**
     * Clear <sy> value
     *
     * @return \RO\Cmd\BlobUser
     */
    public function clearSy(){
      return $this->_clear(18);
    }
    
    /**
     * Get <sy> value
     *
     * @return float
     */
    public function getSy(){
      return $this->_get(18);
    }
    
    /**
     * Set <sy> value
     *
     * @param float $value
     * @return \RO\Cmd\BlobUser
     */
    public function setSy( $value){
      return $this->_set(18, $value);
    }
    
    /**
     * Check if <sz> has a value
     *
     * @return boolean
     */
    public function hasSz(){
      return $this->_has(19);
    }
    
    /**
     * Clear <sz> value
     *
     * @return \RO\Cmd\BlobUser
     */
    public function clearSz(){
      return $this->_clear(19);
    }
    
    /**
     * Get <sz> value
     *
     * @return float
     */
    public function getSz(){
      return $this->_get(19);
    }
    
    /**
     * Set <sz> value
     *
     * @param float $value
     * @return \RO\Cmd\BlobUser
     */
    public function setSz( $value){
      return $this->_set(19, $value);
    }
    
    /**
     * Check if <healcount> has a value
     *
     * @return boolean
     */
    public function hasHealcount(){
      return $this->_has(20);
    }
    
    /**
     * Clear <healcount> value
     *
     * @return \RO\Cmd\BlobUser
     */
    public function clearHealcount(){
      return $this->_clear(20);
    }
    
    /**
     * Get <healcount> value
     *
     * @return int
     */
    public function getHealcount(){
      return $this->_get(20);
    }
    
    /**
     * Set <healcount> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobUser
     */
    public function setHealcount( $value){
      return $this->_set(20, $value);
    }
    
    /**
     * Check if <zeny_max> has a value
     *
     * @return boolean
     */
    public function hasZenyMax(){
      return $this->_has(21);
    }
    
    /**
     * Clear <zeny_max> value
     *
     * @return \RO\Cmd\BlobUser
     */
    public function clearZenyMax(){
      return $this->_clear(21);
    }
    
    /**
     * Get <zeny_max> value
     *
     * @return int
     */
    public function getZenyMax(){
      return $this->_get(21);
    }
    
    /**
     * Set <zeny_max> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobUser
     */
    public function setZenyMax( $value){
      return $this->_set(21, $value);
    }
    
    /**
     * Check if <zeny_debt> has a value
     *
     * @return boolean
     */
    public function hasZenyDebt(){
      return $this->_has(22);
    }
    
    /**
     * Clear <zeny_debt> value
     *
     * @return \RO\Cmd\BlobUser
     */
    public function clearZenyDebt(){
      return $this->_clear(22);
    }
    
    /**
     * Get <zeny_debt> value
     *
     * @return int
     */
    public function getZenyDebt(){
      return $this->_get(22);
    }
    
    /**
     * Set <zeny_debt> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobUser
     */
    public function setZenyDebt( $value){
      return $this->_set(22, $value);
    }
    
    /**
     * Check if <pvp_coin> has a value
     *
     * @return boolean
     */
    public function hasPvpCoin(){
      return $this->_has(23);
    }
    
    /**
     * Clear <pvp_coin> value
     *
     * @return \RO\Cmd\BlobUser
     */
    public function clearPvpCoin(){
      return $this->_clear(23);
    }
    
    /**
     * Get <pvp_coin> value
     *
     * @return int
     */
    public function getPvpCoin(){
      return $this->_get(23);
    }
    
    /**
     * Set <pvp_coin> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobUser
     */
    public function setPvpCoin( $value){
      return $this->_set(23, $value);
    }
    
    /**
     * Check if <con> has a value
     *
     * @return boolean
     */
    public function hasCon(){
      return $this->_has(24);
    }
    
    /**
     * Clear <con> value
     *
     * @return \RO\Cmd\BlobUser
     */
    public function clearCon(){
      return $this->_clear(24);
    }
    
    /**
     * Get <con> value
     *
     * @return int
     */
    public function getCon(){
      return $this->_get(24);
    }
    
    /**
     * Set <con> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobUser
     */
    public function setCon( $value){
      return $this->_set(24, $value);
    }
    
    /**
     * Check if <coninit> has a value
     *
     * @return boolean
     */
    public function hasConinit(){
      return $this->_has(25);
    }
    
    /**
     * Clear <coninit> value
     *
     * @return \RO\Cmd\BlobUser
     */
    public function clearConinit(){
      return $this->_clear(25);
    }
    
    /**
     * Get <coninit> value
     *
     * @return boolean
     */
    public function getConinit(){
      return $this->_get(25);
    }
    
    /**
     * Set <coninit> value
     *
     * @param boolean $value
     * @return \RO\Cmd\BlobUser
     */
    public function setConinit( $value){
      return $this->_set(25, $value);
    }
    
    /**
     * Check if <charge_zeny> has a value
     *
     * @return boolean
     */
    public function hasChargeZeny(){
      return $this->_has(26);
    }
    
    /**
     * Clear <charge_zeny> value
     *
     * @return \RO\Cmd\BlobUser
     */
    public function clearChargeZeny(){
      return $this->_clear(26);
    }
    
    /**
     * Get <charge_zeny> value
     *
     * @return int
     */
    public function getChargeZeny(){
      return $this->_get(26);
    }
    
    /**
     * Set <charge_zeny> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobUser
     */
    public function setChargeZeny( $value){
      return $this->_set(26, $value);
    }
    
    /**
     * Check if <charge_lottery> has a value
     *
     * @return boolean
     */
    public function hasChargeLottery(){
      return $this->_has(27);
    }
    
    /**
     * Clear <charge_lottery> value
     *
     * @return \RO\Cmd\BlobUser
     */
    public function clearChargeLottery(){
      return $this->_clear(27);
    }
    
    /**
     * Get <charge_lottery> value
     *
     * @return int
     */
    public function getChargeLottery(){
      return $this->_get(27);
    }
    
    /**
     * Set <charge_lottery> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobUser
     */
    public function setChargeLottery( $value){
      return $this->_set(27, $value);
    }
    
    /**
     * Check if <lottery_coin> has a value
     *
     * @return boolean
     */
    public function hasLotteryCoin(){
      return $this->_has(28);
    }
    
    /**
     * Clear <lottery_coin> value
     *
     * @return \RO\Cmd\BlobUser
     */
    public function clearLotteryCoin(){
      return $this->_clear(28);
    }
    
    /**
     * Get <lottery_coin> value
     *
     * @return int
     */
    public function getLotteryCoin(){
      return $this->_get(28);
    }
    
    /**
     * Set <lottery_coin> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobUser
     */
    public function setLotteryCoin( $value){
      return $this->_set(28, $value);
    }
    
    /**
     * Check if <rename_time> has a value
     *
     * @return boolean
     */
    public function hasRenameTime(){
      return $this->_has(29);
    }
    
    /**
     * Clear <rename_time> value
     *
     * @return \RO\Cmd\BlobUser
     */
    public function clearRenameTime(){
      return $this->_clear(29);
    }
    
    /**
     * Get <rename_time> value
     *
     * @return int
     */
    public function getRenameTime(){
      return $this->_get(29);
    }
    
    /**
     * Set <rename_time> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobUser
     */
    public function setRenameTime( $value){
      return $this->_set(29, $value);
    }
    
    /**
     * Check if <guild_honor> has a value
     *
     * @return boolean
     */
    public function hasGuildHonor(){
      return $this->_has(30);
    }
    
    /**
     * Clear <guild_honor> value
     *
     * @return \RO\Cmd\BlobUser
     */
    public function clearGuildHonor(){
      return $this->_clear(30);
    }
    
    /**
     * Get <guild_honor> value
     *
     * @return int
     */
    public function getGuildHonor(){
      return $this->_get(30);
    }
    
    /**
     * Set <guild_honor> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobUser
     */
    public function setGuildHonor( $value){
      return $this->_set(30, $value);
    }
    
    /**
     * Check if <save_index> has a value
     *
     * @return boolean
     */
    public function hasSaveIndex(){
      return $this->_has(31);
    }
    
    /**
     * Clear <save_index> value
     *
     * @return \RO\Cmd\BlobUser
     */
    public function clearSaveIndex(){
      return $this->_clear(31);
    }
    
    /**
     * Get <save_index> value
     *
     * @return int
     */
    public function getSaveIndex(){
      return $this->_get(31);
    }
    
    /**
     * Set <save_index> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobUser
     */
    public function setSaveIndex( $value){
      return $this->_set(31, $value);
    }
    
    /**
     * Check if <divorce_roller_coaster> has a value
     *
     * @return boolean
     */
    public function hasDivorceRollerCoaster(){
      return $this->_has(32);
    }
    
    /**
     * Clear <divorce_roller_coaster> value
     *
     * @return \RO\Cmd\BlobUser
     */
    public function clearDivorceRollerCoaster(){
      return $this->_clear(32);
    }
    
    /**
     * Get <divorce_roller_coaster> value
     *
     * @return boolean
     */
    public function getDivorceRollerCoaster(){
      return $this->_get(32);
    }
    
    /**
     * Set <divorce_roller_coaster> value
     *
     * @param boolean $value
     * @return \RO\Cmd\BlobUser
     */
    public function setDivorceRollerCoaster( $value){
      return $this->_set(32, $value);
    }
    
    /**
     * Check if <daily_normal_zeny> has a value
     *
     * @return boolean
     */
    public function hasDailyNormalZeny(){
      return $this->_has(33);
    }
    
    /**
     * Clear <daily_normal_zeny> value
     *
     * @return \RO\Cmd\BlobUser
     */
    public function clearDailyNormalZeny(){
      return $this->_clear(33);
    }
    
    /**
     * Get <daily_normal_zeny> value
     *
     * @return int
     */
    public function getDailyNormalZeny(){
      return $this->_get(33);
    }
    
    /**
     * Set <daily_normal_zeny> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobUser
     */
    public function setDailyNormalZeny( $value){
      return $this->_set(33, $value);
    }
    
    /**
     * Check if <daily_charge_zeny> has a value
     *
     * @return boolean
     */
    public function hasDailyChargeZeny(){
      return $this->_has(34);
    }
    
    /**
     * Clear <daily_charge_zeny> value
     *
     * @return \RO\Cmd\BlobUser
     */
    public function clearDailyChargeZeny(){
      return $this->_clear(34);
    }
    
    /**
     * Get <daily_charge_zeny> value
     *
     * @return int
     */
    public function getDailyChargeZeny(){
      return $this->_get(34);
    }
    
    /**
     * Set <daily_charge_zeny> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobUser
     */
    public function setDailyChargeZeny( $value){
      return $this->_set(34, $value);
    }
    
    /**
     * Check if <last_offlinetime> has a value
     *
     * @return boolean
     */
    public function hasLastOfflinetime(){
      return $this->_has(35);
    }
    
    /**
     * Clear <last_offlinetime> value
     *
     * @return \RO\Cmd\BlobUser
     */
    public function clearLastOfflinetime(){
      return $this->_clear(35);
    }
    
    /**
     * Get <last_offlinetime> value
     *
     * @return int
     */
    public function getLastOfflinetime(){
      return $this->_get(35);
    }
    
    /**
     * Set <last_offlinetime> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobUser
     */
    public function setLastOfflinetime( $value){
      return $this->_set(35, $value);
    }
    
    /**
     * Check if <last_baselv> has a value
     *
     * @return boolean
     */
    public function hasLastBaselv(){
      return $this->_has(36);
    }
    
    /**
     * Clear <last_baselv> value
     *
     * @return \RO\Cmd\BlobUser
     */
    public function clearLastBaselv(){
      return $this->_clear(36);
    }
    
    /**
     * Get <last_baselv> value
     *
     * @return int
     */
    public function getLastBaselv(){
      return $this->_get(36);
    }
    
    /**
     * Set <last_baselv> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobUser
     */
    public function setLastBaselv( $value){
      return $this->_set(36, $value);
    }
    
    /**
     * Check if <last_joblv> has a value
     *
     * @return boolean
     */
    public function hasLastJoblv(){
      return $this->_has(37);
    }
    
    /**
     * Clear <last_joblv> value
     *
     * @return \RO\Cmd\BlobUser
     */
    public function clearLastJoblv(){
      return $this->_clear(37);
    }
    
    /**
     * Get <last_joblv> value
     *
     * @return int
     */
    public function getLastJoblv(){
      return $this->_get(37);
    }
    
    /**
     * Set <last_joblv> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobUser
     */
    public function setLastJoblv( $value){
      return $this->_set(37, $value);
    }
    
    /**
     * Check if <dead_coin> has a value
     *
     * @return boolean
     */
    public function hasDeadCoin(){
      return $this->_has(38);
    }
    
    /**
     * Clear <dead_coin> value
     *
     * @return \RO\Cmd\BlobUser
     */
    public function clearDeadCoin(){
      return $this->_clear(38);
    }
    
    /**
     * Get <dead_coin> value
     *
     * @return int
     */
    public function getDeadCoin(){
      return $this->_get(38);
    }
    
    /**
     * Set <dead_coin> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobUser
     */
    public function setDeadCoin( $value){
      return $this->_set(38, $value);
    }
    
    /**
     * Check if <dead_lv> has a value
     *
     * @return boolean
     */
    public function hasDeadLv(){
      return $this->_has(39);
    }
    
    /**
     * Clear <dead_lv> value
     *
     * @return \RO\Cmd\BlobUser
     */
    public function clearDeadLv(){
      return $this->_clear(39);
    }
    
    /**
     * Get <dead_lv> value
     *
     * @return int
     */
    public function getDeadLv(){
      return $this->_get(39);
    }
    
    /**
     * Set <dead_lv> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobUser
     */
    public function setDeadLv( $value){
      return $this->_set(39, $value);
    }
    
    /**
     * Check if <dead_exp> has a value
     *
     * @return boolean
     */
    public function hasDeadExp(){
      return $this->_has(40);
    }
    
    /**
     * Clear <dead_exp> value
     *
     * @return \RO\Cmd\BlobUser
     */
    public function clearDeadExp(){
      return $this->_clear(40);
    }
    
    /**
     * Get <dead_exp> value
     *
     * @return int
     */
    public function getDeadExp(){
      return $this->_get(40);
    }
    
    /**
     * Set <dead_exp> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobUser
     */
    public function setDeadExp( $value){
      return $this->_set(40, $value);
    }
  }
}

