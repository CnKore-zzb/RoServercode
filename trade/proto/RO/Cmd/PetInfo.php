<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: ScenePet.proto

namespace RO\Cmd {

  class PetInfo extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $guid = 0;
    
    /**  @var int */
    public $exp = 0;
    
    /**  @var int */
    public $friendexp = 0;
    
    /**  @var int */
    public $rewardexp = 0;
    
    /**  @var int */
    public $petid = null;
    
    /**  @var string */
    public $name = null;
    
    /**  @var int */
    public $lv = 0;
    
    /**  @var int */
    public $friendlv = 0;
    
    /**  @var int */
    public $relivetime = 0;
    
    /**  @var int */
    public $body = 0;
    
    /**  @var int */
    public $time_happly = 0;
    
    /**  @var int */
    public $time_excite = 0;
    
    /**  @var int */
    public $time_happiness = 0;
    
    /**  @var int[]  */
    public $unlock_equip = array();
    
    /**  @var int[]  */
    public $unlock_body = array();
    
    /**  @var int[]  */
    public $skills = array();
    
    /**  @var \RO\Cmd\ItemData[]  */
    public $equips = array();
    
    /**  @var boolean */
    public $skilloff = false;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.PetInfo');

      // OPTIONAL UINT64 guid = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "guid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT64 exp = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "exp";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT64 friendexp = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "friendexp";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT64 rewardexp = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "rewardexp";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // REQUIRED UINT32 petid = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "petid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING name = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL UINT32 lv = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "lv";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 friendlv = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "friendlv";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 relivetime = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "relivetime";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 body = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "body";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 time_happly = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "time_happly";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 time_excite = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "time_excite";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 time_happiness = 13
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 13;
      $f->name      = "time_happiness";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // REPEATED UINT32 unlock_equip = 14
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 14;
      $f->name      = "unlock_equip";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED UINT32 unlock_body = 15
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 15;
      $f->name      = "unlock_body";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED UINT32 skills = 16
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 16;
      $f->name      = "skills";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED MESSAGE equips = 17
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 17;
      $f->name      = "equips";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\ItemData';
      $descriptor->addField($f);

      // OPTIONAL BOOL skilloff = 18
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 18;
      $f->name      = "skilloff";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = false;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <guid> has a value
     *
     * @return boolean
     */
    public function hasGuid(){
      return $this->_has(1);
    }
    
    /**
     * Clear <guid> value
     *
     * @return \RO\Cmd\PetInfo
     */
    public function clearGuid(){
      return $this->_clear(1);
    }
    
    /**
     * Get <guid> value
     *
     * @return int
     */
    public function getGuid(){
      return $this->_get(1);
    }
    
    /**
     * Set <guid> value
     *
     * @param int $value
     * @return \RO\Cmd\PetInfo
     */
    public function setGuid( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <exp> has a value
     *
     * @return boolean
     */
    public function hasExp(){
      return $this->_has(2);
    }
    
    /**
     * Clear <exp> value
     *
     * @return \RO\Cmd\PetInfo
     */
    public function clearExp(){
      return $this->_clear(2);
    }
    
    /**
     * Get <exp> value
     *
     * @return int
     */
    public function getExp(){
      return $this->_get(2);
    }
    
    /**
     * Set <exp> value
     *
     * @param int $value
     * @return \RO\Cmd\PetInfo
     */
    public function setExp( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <friendexp> has a value
     *
     * @return boolean
     */
    public function hasFriendexp(){
      return $this->_has(3);
    }
    
    /**
     * Clear <friendexp> value
     *
     * @return \RO\Cmd\PetInfo
     */
    public function clearFriendexp(){
      return $this->_clear(3);
    }
    
    /**
     * Get <friendexp> value
     *
     * @return int
     */
    public function getFriendexp(){
      return $this->_get(3);
    }
    
    /**
     * Set <friendexp> value
     *
     * @param int $value
     * @return \RO\Cmd\PetInfo
     */
    public function setFriendexp( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <rewardexp> has a value
     *
     * @return boolean
     */
    public function hasRewardexp(){
      return $this->_has(4);
    }
    
    /**
     * Clear <rewardexp> value
     *
     * @return \RO\Cmd\PetInfo
     */
    public function clearRewardexp(){
      return $this->_clear(4);
    }
    
    /**
     * Get <rewardexp> value
     *
     * @return int
     */
    public function getRewardexp(){
      return $this->_get(4);
    }
    
    /**
     * Set <rewardexp> value
     *
     * @param int $value
     * @return \RO\Cmd\PetInfo
     */
    public function setRewardexp( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <petid> has a value
     *
     * @return boolean
     */
    public function hasPetid(){
      return $this->_has(5);
    }
    
    /**
     * Clear <petid> value
     *
     * @return \RO\Cmd\PetInfo
     */
    public function clearPetid(){
      return $this->_clear(5);
    }
    
    /**
     * Get <petid> value
     *
     * @return int
     */
    public function getPetid(){
      return $this->_get(5);
    }
    
    /**
     * Set <petid> value
     *
     * @param int $value
     * @return \RO\Cmd\PetInfo
     */
    public function setPetid( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(6);
    }
    
    /**
     * Clear <name> value
     *
     * @return \RO\Cmd\PetInfo
     */
    public function clearName(){
      return $this->_clear(6);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(6);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \RO\Cmd\PetInfo
     */
    public function setName( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <lv> has a value
     *
     * @return boolean
     */
    public function hasLv(){
      return $this->_has(7);
    }
    
    /**
     * Clear <lv> value
     *
     * @return \RO\Cmd\PetInfo
     */
    public function clearLv(){
      return $this->_clear(7);
    }
    
    /**
     * Get <lv> value
     *
     * @return int
     */
    public function getLv(){
      return $this->_get(7);
    }
    
    /**
     * Set <lv> value
     *
     * @param int $value
     * @return \RO\Cmd\PetInfo
     */
    public function setLv( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <friendlv> has a value
     *
     * @return boolean
     */
    public function hasFriendlv(){
      return $this->_has(8);
    }
    
    /**
     * Clear <friendlv> value
     *
     * @return \RO\Cmd\PetInfo
     */
    public function clearFriendlv(){
      return $this->_clear(8);
    }
    
    /**
     * Get <friendlv> value
     *
     * @return int
     */
    public function getFriendlv(){
      return $this->_get(8);
    }
    
    /**
     * Set <friendlv> value
     *
     * @param int $value
     * @return \RO\Cmd\PetInfo
     */
    public function setFriendlv( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <relivetime> has a value
     *
     * @return boolean
     */
    public function hasRelivetime(){
      return $this->_has(9);
    }
    
    /**
     * Clear <relivetime> value
     *
     * @return \RO\Cmd\PetInfo
     */
    public function clearRelivetime(){
      return $this->_clear(9);
    }
    
    /**
     * Get <relivetime> value
     *
     * @return int
     */
    public function getRelivetime(){
      return $this->_get(9);
    }
    
    /**
     * Set <relivetime> value
     *
     * @param int $value
     * @return \RO\Cmd\PetInfo
     */
    public function setRelivetime( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <body> has a value
     *
     * @return boolean
     */
    public function hasBody(){
      return $this->_has(10);
    }
    
    /**
     * Clear <body> value
     *
     * @return \RO\Cmd\PetInfo
     */
    public function clearBody(){
      return $this->_clear(10);
    }
    
    /**
     * Get <body> value
     *
     * @return int
     */
    public function getBody(){
      return $this->_get(10);
    }
    
    /**
     * Set <body> value
     *
     * @param int $value
     * @return \RO\Cmd\PetInfo
     */
    public function setBody( $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <time_happly> has a value
     *
     * @return boolean
     */
    public function hasTimeHapply(){
      return $this->_has(11);
    }
    
    /**
     * Clear <time_happly> value
     *
     * @return \RO\Cmd\PetInfo
     */
    public function clearTimeHapply(){
      return $this->_clear(11);
    }
    
    /**
     * Get <time_happly> value
     *
     * @return int
     */
    public function getTimeHapply(){
      return $this->_get(11);
    }
    
    /**
     * Set <time_happly> value
     *
     * @param int $value
     * @return \RO\Cmd\PetInfo
     */
    public function setTimeHapply( $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <time_excite> has a value
     *
     * @return boolean
     */
    public function hasTimeExcite(){
      return $this->_has(12);
    }
    
    /**
     * Clear <time_excite> value
     *
     * @return \RO\Cmd\PetInfo
     */
    public function clearTimeExcite(){
      return $this->_clear(12);
    }
    
    /**
     * Get <time_excite> value
     *
     * @return int
     */
    public function getTimeExcite(){
      return $this->_get(12);
    }
    
    /**
     * Set <time_excite> value
     *
     * @param int $value
     * @return \RO\Cmd\PetInfo
     */
    public function setTimeExcite( $value){
      return $this->_set(12, $value);
    }
    
    /**
     * Check if <time_happiness> has a value
     *
     * @return boolean
     */
    public function hasTimeHappiness(){
      return $this->_has(13);
    }
    
    /**
     * Clear <time_happiness> value
     *
     * @return \RO\Cmd\PetInfo
     */
    public function clearTimeHappiness(){
      return $this->_clear(13);
    }
    
    /**
     * Get <time_happiness> value
     *
     * @return int
     */
    public function getTimeHappiness(){
      return $this->_get(13);
    }
    
    /**
     * Set <time_happiness> value
     *
     * @param int $value
     * @return \RO\Cmd\PetInfo
     */
    public function setTimeHappiness( $value){
      return $this->_set(13, $value);
    }
    
    /**
     * Check if <unlock_equip> has a value
     *
     * @return boolean
     */
    public function hasUnlockEquip(){
      return $this->_has(14);
    }
    
    /**
     * Clear <unlock_equip> value
     *
     * @return \RO\Cmd\PetInfo
     */
    public function clearUnlockEquip(){
      return $this->_clear(14);
    }
    
    /**
     * Get <unlock_equip> value
     *
     * @param int $idx
     * @return int
     */
    public function getUnlockEquip($idx = NULL){
      return $this->_get(14, $idx);
    }
    
    /**
     * Set <unlock_equip> value
     *
     * @param int $value
     * @return \RO\Cmd\PetInfo
     */
    public function setUnlockEquip( $value, $idx = NULL){
      return $this->_set(14, $value, $idx);
    }
    
    /**
     * Get all elements of <unlock_equip>
     *
     * @return int[]
     */
    public function getUnlockEquipList(){
     return $this->_get(14);
    }
    
    /**
     * Add a new element to <unlock_equip>
     *
     * @param int $value
     * @return \RO\Cmd\PetInfo
     */
    public function addUnlockEquip( $value){
     return $this->_add(14, $value);
    }
    
    /**
     * Check if <unlock_body> has a value
     *
     * @return boolean
     */
    public function hasUnlockBody(){
      return $this->_has(15);
    }
    
    /**
     * Clear <unlock_body> value
     *
     * @return \RO\Cmd\PetInfo
     */
    public function clearUnlockBody(){
      return $this->_clear(15);
    }
    
    /**
     * Get <unlock_body> value
     *
     * @param int $idx
     * @return int
     */
    public function getUnlockBody($idx = NULL){
      return $this->_get(15, $idx);
    }
    
    /**
     * Set <unlock_body> value
     *
     * @param int $value
     * @return \RO\Cmd\PetInfo
     */
    public function setUnlockBody( $value, $idx = NULL){
      return $this->_set(15, $value, $idx);
    }
    
    /**
     * Get all elements of <unlock_body>
     *
     * @return int[]
     */
    public function getUnlockBodyList(){
     return $this->_get(15);
    }
    
    /**
     * Add a new element to <unlock_body>
     *
     * @param int $value
     * @return \RO\Cmd\PetInfo
     */
    public function addUnlockBody( $value){
     return $this->_add(15, $value);
    }
    
    /**
     * Check if <skills> has a value
     *
     * @return boolean
     */
    public function hasSkills(){
      return $this->_has(16);
    }
    
    /**
     * Clear <skills> value
     *
     * @return \RO\Cmd\PetInfo
     */
    public function clearSkills(){
      return $this->_clear(16);
    }
    
    /**
     * Get <skills> value
     *
     * @param int $idx
     * @return int
     */
    public function getSkills($idx = NULL){
      return $this->_get(16, $idx);
    }
    
    /**
     * Set <skills> value
     *
     * @param int $value
     * @return \RO\Cmd\PetInfo
     */
    public function setSkills( $value, $idx = NULL){
      return $this->_set(16, $value, $idx);
    }
    
    /**
     * Get all elements of <skills>
     *
     * @return int[]
     */
    public function getSkillsList(){
     return $this->_get(16);
    }
    
    /**
     * Add a new element to <skills>
     *
     * @param int $value
     * @return \RO\Cmd\PetInfo
     */
    public function addSkills( $value){
     return $this->_add(16, $value);
    }
    
    /**
     * Check if <equips> has a value
     *
     * @return boolean
     */
    public function hasEquips(){
      return $this->_has(17);
    }
    
    /**
     * Clear <equips> value
     *
     * @return \RO\Cmd\PetInfo
     */
    public function clearEquips(){
      return $this->_clear(17);
    }
    
    /**
     * Get <equips> value
     *
     * @param int $idx
     * @return \RO\Cmd\ItemData
     */
    public function getEquips($idx = NULL){
      return $this->_get(17, $idx);
    }
    
    /**
     * Set <equips> value
     *
     * @param \RO\Cmd\ItemData $value
     * @return \RO\Cmd\PetInfo
     */
    public function setEquips(\RO\Cmd\ItemData $value, $idx = NULL){
      return $this->_set(17, $value, $idx);
    }
    
    /**
     * Get all elements of <equips>
     *
     * @return \RO\Cmd\ItemData[]
     */
    public function getEquipsList(){
     return $this->_get(17);
    }
    
    /**
     * Add a new element to <equips>
     *
     * @param \RO\Cmd\ItemData $value
     * @return \RO\Cmd\PetInfo
     */
    public function addEquips(\RO\Cmd\ItemData $value){
     return $this->_add(17, $value);
    }
    
    /**
     * Check if <skilloff> has a value
     *
     * @return boolean
     */
    public function hasSkilloff(){
      return $this->_has(18);
    }
    
    /**
     * Clear <skilloff> value
     *
     * @return \RO\Cmd\PetInfo
     */
    public function clearSkilloff(){
      return $this->_clear(18);
    }
    
    /**
     * Get <skilloff> value
     *
     * @return boolean
     */
    public function getSkilloff(){
      return $this->_get(18);
    }
    
    /**
     * Set <skilloff> value
     *
     * @param boolean $value
     * @return \RO\Cmd\PetInfo
     */
    public function setSkilloff( $value){
      return $this->_set(18, $value);
    }
  }
}

