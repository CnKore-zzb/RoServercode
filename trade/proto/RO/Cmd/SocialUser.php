<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: SocialCmd.proto

namespace RO\Cmd {

  class SocialUser extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $accid = 0;
    
    /**  @var int */
    public $charid = 0;
    
    /**  @var int */
    public $zoneid = 0;
    
    /**  @var int */
    public $mapid = 0;
    
    /**  @var int */
    public $baselv = 0;
    
    /**  @var int - \RO\Cmd\EProfession */
    public $profession = \RO\Cmd\EProfession::EPROFESSION_MIN;
    
    /**  @var string */
    public $name = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.SocialUser');

      // OPTIONAL UINT64 accid = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "accid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT64 charid = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "charid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 zoneid = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "zoneid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 mapid = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "mapid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 baselv = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "baselv";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL ENUM profession = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "profession";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\EProfession';
      $f->default   = \RO\Cmd\EProfession::EPROFESSION_MIN;
      $descriptor->addField($f);

      // OPTIONAL STRING name = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <accid> has a value
     *
     * @return boolean
     */
    public function hasAccid(){
      return $this->_has(1);
    }
    
    /**
     * Clear <accid> value
     *
     * @return \RO\Cmd\SocialUser
     */
    public function clearAccid(){
      return $this->_clear(1);
    }
    
    /**
     * Get <accid> value
     *
     * @return int
     */
    public function getAccid(){
      return $this->_get(1);
    }
    
    /**
     * Set <accid> value
     *
     * @param int $value
     * @return \RO\Cmd\SocialUser
     */
    public function setAccid( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <charid> has a value
     *
     * @return boolean
     */
    public function hasCharid(){
      return $this->_has(2);
    }
    
    /**
     * Clear <charid> value
     *
     * @return \RO\Cmd\SocialUser
     */
    public function clearCharid(){
      return $this->_clear(2);
    }
    
    /**
     * Get <charid> value
     *
     * @return int
     */
    public function getCharid(){
      return $this->_get(2);
    }
    
    /**
     * Set <charid> value
     *
     * @param int $value
     * @return \RO\Cmd\SocialUser
     */
    public function setCharid( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <zoneid> has a value
     *
     * @return boolean
     */
    public function hasZoneid(){
      return $this->_has(3);
    }
    
    /**
     * Clear <zoneid> value
     *
     * @return \RO\Cmd\SocialUser
     */
    public function clearZoneid(){
      return $this->_clear(3);
    }
    
    /**
     * Get <zoneid> value
     *
     * @return int
     */
    public function getZoneid(){
      return $this->_get(3);
    }
    
    /**
     * Set <zoneid> value
     *
     * @param int $value
     * @return \RO\Cmd\SocialUser
     */
    public function setZoneid( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <mapid> has a value
     *
     * @return boolean
     */
    public function hasMapid(){
      return $this->_has(4);
    }
    
    /**
     * Clear <mapid> value
     *
     * @return \RO\Cmd\SocialUser
     */
    public function clearMapid(){
      return $this->_clear(4);
    }
    
    /**
     * Get <mapid> value
     *
     * @return int
     */
    public function getMapid(){
      return $this->_get(4);
    }
    
    /**
     * Set <mapid> value
     *
     * @param int $value
     * @return \RO\Cmd\SocialUser
     */
    public function setMapid( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <baselv> has a value
     *
     * @return boolean
     */
    public function hasBaselv(){
      return $this->_has(5);
    }
    
    /**
     * Clear <baselv> value
     *
     * @return \RO\Cmd\SocialUser
     */
    public function clearBaselv(){
      return $this->_clear(5);
    }
    
    /**
     * Get <baselv> value
     *
     * @return int
     */
    public function getBaselv(){
      return $this->_get(5);
    }
    
    /**
     * Set <baselv> value
     *
     * @param int $value
     * @return \RO\Cmd\SocialUser
     */
    public function setBaselv( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <profession> has a value
     *
     * @return boolean
     */
    public function hasProfession(){
      return $this->_has(6);
    }
    
    /**
     * Clear <profession> value
     *
     * @return \RO\Cmd\SocialUser
     */
    public function clearProfession(){
      return $this->_clear(6);
    }
    
    /**
     * Get <profession> value
     *
     * @return int - \RO\Cmd\EProfession
     */
    public function getProfession(){
      return $this->_get(6);
    }
    
    /**
     * Set <profession> value
     *
     * @param int - \RO\Cmd\EProfession $value
     * @return \RO\Cmd\SocialUser
     */
    public function setProfession( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(7);
    }
    
    /**
     * Clear <name> value
     *
     * @return \RO\Cmd\SocialUser
     */
    public function clearName(){
      return $this->_clear(7);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(7);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \RO\Cmd\SocialUser
     */
    public function setName( $value){
      return $this->_set(7, $value);
    }
  }
}

