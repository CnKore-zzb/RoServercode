<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: SceneManual.proto

namespace RO\Cmd {

  class ManualItem extends \DrSlump\Protobuf\Message {

    /**  @var int - \RO\Cmd\EManualType */
    public $type = \RO\Cmd\EManualType::EMANUALTYPE_MIN;
    
    /**  @var int */
    public $version = 0;
    
    /**  @var \RO\Cmd\ManualSubItem[]  */
    public $items = array();
    
    /**  @var \RO\Cmd\ManualQuest[]  */
    public $quests = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.ManualItem');

      // OPTIONAL ENUM type = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\EManualType';
      $f->default   = \RO\Cmd\EManualType::EMANUALTYPE_MIN;
      $descriptor->addField($f);

      // OPTIONAL UINT32 version = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "version";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // REPEATED MESSAGE items = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "items";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\ManualSubItem';
      $descriptor->addField($f);

      // REPEATED MESSAGE quests = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "quests";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\ManualQuest';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(1);
    }
    
    /**
     * Clear <type> value
     *
     * @return \RO\Cmd\ManualItem
     */
    public function clearType(){
      return $this->_clear(1);
    }
    
    /**
     * Get <type> value
     *
     * @return int - \RO\Cmd\EManualType
     */
    public function getType(){
      return $this->_get(1);
    }
    
    /**
     * Set <type> value
     *
     * @param int - \RO\Cmd\EManualType $value
     * @return \RO\Cmd\ManualItem
     */
    public function setType( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <version> has a value
     *
     * @return boolean
     */
    public function hasVersion(){
      return $this->_has(2);
    }
    
    /**
     * Clear <version> value
     *
     * @return \RO\Cmd\ManualItem
     */
    public function clearVersion(){
      return $this->_clear(2);
    }
    
    /**
     * Get <version> value
     *
     * @return int
     */
    public function getVersion(){
      return $this->_get(2);
    }
    
    /**
     * Set <version> value
     *
     * @param int $value
     * @return \RO\Cmd\ManualItem
     */
    public function setVersion( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <items> has a value
     *
     * @return boolean
     */
    public function hasItems(){
      return $this->_has(3);
    }
    
    /**
     * Clear <items> value
     *
     * @return \RO\Cmd\ManualItem
     */
    public function clearItems(){
      return $this->_clear(3);
    }
    
    /**
     * Get <items> value
     *
     * @param int $idx
     * @return \RO\Cmd\ManualSubItem
     */
    public function getItems($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <items> value
     *
     * @param \RO\Cmd\ManualSubItem $value
     * @return \RO\Cmd\ManualItem
     */
    public function setItems(\RO\Cmd\ManualSubItem $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <items>
     *
     * @return \RO\Cmd\ManualSubItem[]
     */
    public function getItemsList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <items>
     *
     * @param \RO\Cmd\ManualSubItem $value
     * @return \RO\Cmd\ManualItem
     */
    public function addItems(\RO\Cmd\ManualSubItem $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <quests> has a value
     *
     * @return boolean
     */
    public function hasQuests(){
      return $this->_has(4);
    }
    
    /**
     * Clear <quests> value
     *
     * @return \RO\Cmd\ManualItem
     */
    public function clearQuests(){
      return $this->_clear(4);
    }
    
    /**
     * Get <quests> value
     *
     * @param int $idx
     * @return \RO\Cmd\ManualQuest
     */
    public function getQuests($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <quests> value
     *
     * @param \RO\Cmd\ManualQuest $value
     * @return \RO\Cmd\ManualItem
     */
    public function setQuests(\RO\Cmd\ManualQuest $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <quests>
     *
     * @return \RO\Cmd\ManualQuest[]
     */
    public function getQuestsList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <quests>
     *
     * @param \RO\Cmd\ManualQuest $value
     * @return \RO\Cmd\ManualItem
     */
    public function addQuests(\RO\Cmd\ManualQuest $value){
     return $this->_add(4, $value);
    }
  }
}

