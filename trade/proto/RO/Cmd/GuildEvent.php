<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: GuildCmd.proto

namespace RO\Cmd {

  class GuildEvent extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $guid = 0;
    
    /**  @var int */
    public $eventid = 0;
    
    /**  @var int */
    public $time = 0;
    
    /**  @var string[]  */
    public $param = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.GuildEvent');

      // OPTIONAL UINT32 guid = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "guid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 eventid = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "eventid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 time = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "time";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // REPEATED STRING param = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "param";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <guid> has a value
     *
     * @return boolean
     */
    public function hasGuid(){
      return $this->_has(1);
    }
    
    /**
     * Clear <guid> value
     *
     * @return \RO\Cmd\GuildEvent
     */
    public function clearGuid(){
      return $this->_clear(1);
    }
    
    /**
     * Get <guid> value
     *
     * @return int
     */
    public function getGuid(){
      return $this->_get(1);
    }
    
    /**
     * Set <guid> value
     *
     * @param int $value
     * @return \RO\Cmd\GuildEvent
     */
    public function setGuid( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <eventid> has a value
     *
     * @return boolean
     */
    public function hasEventid(){
      return $this->_has(2);
    }
    
    /**
     * Clear <eventid> value
     *
     * @return \RO\Cmd\GuildEvent
     */
    public function clearEventid(){
      return $this->_clear(2);
    }
    
    /**
     * Get <eventid> value
     *
     * @return int
     */
    public function getEventid(){
      return $this->_get(2);
    }
    
    /**
     * Set <eventid> value
     *
     * @param int $value
     * @return \RO\Cmd\GuildEvent
     */
    public function setEventid( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <time> has a value
     *
     * @return boolean
     */
    public function hasTime(){
      return $this->_has(3);
    }
    
    /**
     * Clear <time> value
     *
     * @return \RO\Cmd\GuildEvent
     */
    public function clearTime(){
      return $this->_clear(3);
    }
    
    /**
     * Get <time> value
     *
     * @return int
     */
    public function getTime(){
      return $this->_get(3);
    }
    
    /**
     * Set <time> value
     *
     * @param int $value
     * @return \RO\Cmd\GuildEvent
     */
    public function setTime( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <param> has a value
     *
     * @return boolean
     */
    public function hasParam(){
      return $this->_has(4);
    }
    
    /**
     * Clear <param> value
     *
     * @return \RO\Cmd\GuildEvent
     */
    public function clearParam(){
      return $this->_clear(4);
    }
    
    /**
     * Get <param> value
     *
     * @param int $idx
     * @return string
     */
    public function getParam($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <param> value
     *
     * @param string $value
     * @return \RO\Cmd\GuildEvent
     */
    public function setParam( $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <param>
     *
     * @return string[]
     */
    public function getParamList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <param>
     *
     * @param string $value
     * @return \RO\Cmd\GuildEvent
     */
    public function addParam( $value){
     return $this->_add(4, $value);
    }
  }
}

