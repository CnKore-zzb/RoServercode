<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: SceneItem.proto

namespace RO\Cmd {

  class LotteryCmd extends \DrSlump\Protobuf\Message {

    /**  @var int - \RO\Cmd\Command */
    public $cmd = \RO\Cmd\Command::SCENE_USER_ITEM_PROTOCMD;
    
    /**  @var int - \RO\Cmd\ItemParam */
    public $param = \RO\Cmd\ItemParam::ITEMPARAM_LOTTERY;
    
    /**  @var int */
    public $year = null;
    
    /**  @var int */
    public $month = null;
    
    /**  @var int */
    public $npcid = null;
    
    /**  @var boolean */
    public $skip_anim = false;
    
    /**  @var int */
    public $price = null;
    
    /**  @var int */
    public $ticket = null;
    
    /**  @var int - \RO\Cmd\ELotteryType */
    public $type = null;
    
    /**  @var int */
    public $count = null;
    
    /**  @var \RO\Cmd\ItemInfo[]  */
    public $items = array();
    
    /**  @var int */
    public $charid = null;
    
    /**  @var string */
    public $guid = null;
    
    /**  @var int */
    public $today_cnt = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.LotteryCmd');

      // OPTIONAL ENUM cmd = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "cmd";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\Command';
      $f->default   = \RO\Cmd\Command::SCENE_USER_ITEM_PROTOCMD;
      $descriptor->addField($f);

      // OPTIONAL ENUM param = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "param";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\ItemParam';
      $f->default   = \RO\Cmd\ItemParam::ITEMPARAM_LOTTERY;
      $descriptor->addField($f);

      // OPTIONAL UINT32 year = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "year";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 month = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "month";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT64 npcid = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "npcid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL skip_anim = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "skip_anim";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = false;
      $descriptor->addField($f);

      // OPTIONAL UINT32 price = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "price";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 ticket = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "ticket";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM type = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\ELotteryType';
      $descriptor->addField($f);

      // OPTIONAL UINT32 count = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "count";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE items = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "items";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\ItemInfo';
      $descriptor->addField($f);

      // OPTIONAL UINT64 charid = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "charid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING guid = 13
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 13;
      $f->name      = "guid";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 today_cnt = 14
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 14;
      $f->name      = "today_cnt";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <cmd> has a value
     *
     * @return boolean
     */
    public function hasCmd(){
      return $this->_has(1);
    }
    
    /**
     * Clear <cmd> value
     *
     * @return \RO\Cmd\LotteryCmd
     */
    public function clearCmd(){
      return $this->_clear(1);
    }
    
    /**
     * Get <cmd> value
     *
     * @return int - \RO\Cmd\Command
     */
    public function getCmd(){
      return $this->_get(1);
    }
    
    /**
     * Set <cmd> value
     *
     * @param int - \RO\Cmd\Command $value
     * @return \RO\Cmd\LotteryCmd
     */
    public function setCmd( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <param> has a value
     *
     * @return boolean
     */
    public function hasParam(){
      return $this->_has(2);
    }
    
    /**
     * Clear <param> value
     *
     * @return \RO\Cmd\LotteryCmd
     */
    public function clearParam(){
      return $this->_clear(2);
    }
    
    /**
     * Get <param> value
     *
     * @return int - \RO\Cmd\ItemParam
     */
    public function getParam(){
      return $this->_get(2);
    }
    
    /**
     * Set <param> value
     *
     * @param int - \RO\Cmd\ItemParam $value
     * @return \RO\Cmd\LotteryCmd
     */
    public function setParam( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <year> has a value
     *
     * @return boolean
     */
    public function hasYear(){
      return $this->_has(3);
    }
    
    /**
     * Clear <year> value
     *
     * @return \RO\Cmd\LotteryCmd
     */
    public function clearYear(){
      return $this->_clear(3);
    }
    
    /**
     * Get <year> value
     *
     * @return int
     */
    public function getYear(){
      return $this->_get(3);
    }
    
    /**
     * Set <year> value
     *
     * @param int $value
     * @return \RO\Cmd\LotteryCmd
     */
    public function setYear( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <month> has a value
     *
     * @return boolean
     */
    public function hasMonth(){
      return $this->_has(4);
    }
    
    /**
     * Clear <month> value
     *
     * @return \RO\Cmd\LotteryCmd
     */
    public function clearMonth(){
      return $this->_clear(4);
    }
    
    /**
     * Get <month> value
     *
     * @return int
     */
    public function getMonth(){
      return $this->_get(4);
    }
    
    /**
     * Set <month> value
     *
     * @param int $value
     * @return \RO\Cmd\LotteryCmd
     */
    public function setMonth( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <npcid> has a value
     *
     * @return boolean
     */
    public function hasNpcid(){
      return $this->_has(5);
    }
    
    /**
     * Clear <npcid> value
     *
     * @return \RO\Cmd\LotteryCmd
     */
    public function clearNpcid(){
      return $this->_clear(5);
    }
    
    /**
     * Get <npcid> value
     *
     * @return int
     */
    public function getNpcid(){
      return $this->_get(5);
    }
    
    /**
     * Set <npcid> value
     *
     * @param int $value
     * @return \RO\Cmd\LotteryCmd
     */
    public function setNpcid( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <skip_anim> has a value
     *
     * @return boolean
     */
    public function hasSkipAnim(){
      return $this->_has(6);
    }
    
    /**
     * Clear <skip_anim> value
     *
     * @return \RO\Cmd\LotteryCmd
     */
    public function clearSkipAnim(){
      return $this->_clear(6);
    }
    
    /**
     * Get <skip_anim> value
     *
     * @return boolean
     */
    public function getSkipAnim(){
      return $this->_get(6);
    }
    
    /**
     * Set <skip_anim> value
     *
     * @param boolean $value
     * @return \RO\Cmd\LotteryCmd
     */
    public function setSkipAnim( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <price> has a value
     *
     * @return boolean
     */
    public function hasPrice(){
      return $this->_has(7);
    }
    
    /**
     * Clear <price> value
     *
     * @return \RO\Cmd\LotteryCmd
     */
    public function clearPrice(){
      return $this->_clear(7);
    }
    
    /**
     * Get <price> value
     *
     * @return int
     */
    public function getPrice(){
      return $this->_get(7);
    }
    
    /**
     * Set <price> value
     *
     * @param int $value
     * @return \RO\Cmd\LotteryCmd
     */
    public function setPrice( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <ticket> has a value
     *
     * @return boolean
     */
    public function hasTicket(){
      return $this->_has(8);
    }
    
    /**
     * Clear <ticket> value
     *
     * @return \RO\Cmd\LotteryCmd
     */
    public function clearTicket(){
      return $this->_clear(8);
    }
    
    /**
     * Get <ticket> value
     *
     * @return int
     */
    public function getTicket(){
      return $this->_get(8);
    }
    
    /**
     * Set <ticket> value
     *
     * @param int $value
     * @return \RO\Cmd\LotteryCmd
     */
    public function setTicket( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(9);
    }
    
    /**
     * Clear <type> value
     *
     * @return \RO\Cmd\LotteryCmd
     */
    public function clearType(){
      return $this->_clear(9);
    }
    
    /**
     * Get <type> value
     *
     * @return int - \RO\Cmd\ELotteryType
     */
    public function getType(){
      return $this->_get(9);
    }
    
    /**
     * Set <type> value
     *
     * @param int - \RO\Cmd\ELotteryType $value
     * @return \RO\Cmd\LotteryCmd
     */
    public function setType( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <count> has a value
     *
     * @return boolean
     */
    public function hasCount(){
      return $this->_has(10);
    }
    
    /**
     * Clear <count> value
     *
     * @return \RO\Cmd\LotteryCmd
     */
    public function clearCount(){
      return $this->_clear(10);
    }
    
    /**
     * Get <count> value
     *
     * @return int
     */
    public function getCount(){
      return $this->_get(10);
    }
    
    /**
     * Set <count> value
     *
     * @param int $value
     * @return \RO\Cmd\LotteryCmd
     */
    public function setCount( $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <items> has a value
     *
     * @return boolean
     */
    public function hasItems(){
      return $this->_has(11);
    }
    
    /**
     * Clear <items> value
     *
     * @return \RO\Cmd\LotteryCmd
     */
    public function clearItems(){
      return $this->_clear(11);
    }
    
    /**
     * Get <items> value
     *
     * @param int $idx
     * @return \RO\Cmd\ItemInfo
     */
    public function getItems($idx = NULL){
      return $this->_get(11, $idx);
    }
    
    /**
     * Set <items> value
     *
     * @param \RO\Cmd\ItemInfo $value
     * @return \RO\Cmd\LotteryCmd
     */
    public function setItems(\RO\Cmd\ItemInfo $value, $idx = NULL){
      return $this->_set(11, $value, $idx);
    }
    
    /**
     * Get all elements of <items>
     *
     * @return \RO\Cmd\ItemInfo[]
     */
    public function getItemsList(){
     return $this->_get(11);
    }
    
    /**
     * Add a new element to <items>
     *
     * @param \RO\Cmd\ItemInfo $value
     * @return \RO\Cmd\LotteryCmd
     */
    public function addItems(\RO\Cmd\ItemInfo $value){
     return $this->_add(11, $value);
    }
    
    /**
     * Check if <charid> has a value
     *
     * @return boolean
     */
    public function hasCharid(){
      return $this->_has(12);
    }
    
    /**
     * Clear <charid> value
     *
     * @return \RO\Cmd\LotteryCmd
     */
    public function clearCharid(){
      return $this->_clear(12);
    }
    
    /**
     * Get <charid> value
     *
     * @return int
     */
    public function getCharid(){
      return $this->_get(12);
    }
    
    /**
     * Set <charid> value
     *
     * @param int $value
     * @return \RO\Cmd\LotteryCmd
     */
    public function setCharid( $value){
      return $this->_set(12, $value);
    }
    
    /**
     * Check if <guid> has a value
     *
     * @return boolean
     */
    public function hasGuid(){
      return $this->_has(13);
    }
    
    /**
     * Clear <guid> value
     *
     * @return \RO\Cmd\LotteryCmd
     */
    public function clearGuid(){
      return $this->_clear(13);
    }
    
    /**
     * Get <guid> value
     *
     * @return string
     */
    public function getGuid(){
      return $this->_get(13);
    }
    
    /**
     * Set <guid> value
     *
     * @param string $value
     * @return \RO\Cmd\LotteryCmd
     */
    public function setGuid( $value){
      return $this->_set(13, $value);
    }
    
    /**
     * Check if <today_cnt> has a value
     *
     * @return boolean
     */
    public function hasTodayCnt(){
      return $this->_has(14);
    }
    
    /**
     * Clear <today_cnt> value
     *
     * @return \RO\Cmd\LotteryCmd
     */
    public function clearTodayCnt(){
      return $this->_clear(14);
    }
    
    /**
     * Get <today_cnt> value
     *
     * @return int
     */
    public function getTodayCnt(){
      return $this->_get(14);
    }
    
    /**
     * Set <today_cnt> value
     *
     * @param int $value
     * @return \RO\Cmd\LotteryCmd
     */
    public function setTodayCnt( $value){
      return $this->_set(14, $value);
    }
  }
}

