<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: SceneItem.proto

namespace RO\Cmd {

  class EquipCard extends \DrSlump\Protobuf\Message {

    /**  @var int - \RO\Cmd\Command */
    public $cmd = \RO\Cmd\Command::SCENE_USER_ITEM_PROTOCMD;
    
    /**  @var int - \RO\Cmd\ItemParam */
    public $param = \RO\Cmd\ItemParam::ITEMPARAM_EQUIPCARD;
    
    /**  @var int - \RO\Cmd\ECardOper */
    public $oper = \RO\Cmd\ECardOper::ECARDOPER_MIN;
    
    /**  @var string */
    public $cardguid = null;
    
    /**  @var string */
    public $equipguid = null;
    
    /**  @var int */
    public $pos = 0;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.EquipCard');

      // OPTIONAL ENUM cmd = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "cmd";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\Command';
      $f->default   = \RO\Cmd\Command::SCENE_USER_ITEM_PROTOCMD;
      $descriptor->addField($f);

      // OPTIONAL ENUM param = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "param";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\ItemParam';
      $f->default   = \RO\Cmd\ItemParam::ITEMPARAM_EQUIPCARD;
      $descriptor->addField($f);

      // OPTIONAL ENUM oper = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "oper";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\ECardOper';
      $f->default   = \RO\Cmd\ECardOper::ECARDOPER_MIN;
      $descriptor->addField($f);

      // OPTIONAL STRING cardguid = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "cardguid";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING equipguid = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "equipguid";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 pos = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "pos";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <cmd> has a value
     *
     * @return boolean
     */
    public function hasCmd(){
      return $this->_has(1);
    }
    
    /**
     * Clear <cmd> value
     *
     * @return \RO\Cmd\EquipCard
     */
    public function clearCmd(){
      return $this->_clear(1);
    }
    
    /**
     * Get <cmd> value
     *
     * @return int - \RO\Cmd\Command
     */
    public function getCmd(){
      return $this->_get(1);
    }
    
    /**
     * Set <cmd> value
     *
     * @param int - \RO\Cmd\Command $value
     * @return \RO\Cmd\EquipCard
     */
    public function setCmd( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <param> has a value
     *
     * @return boolean
     */
    public function hasParam(){
      return $this->_has(2);
    }
    
    /**
     * Clear <param> value
     *
     * @return \RO\Cmd\EquipCard
     */
    public function clearParam(){
      return $this->_clear(2);
    }
    
    /**
     * Get <param> value
     *
     * @return int - \RO\Cmd\ItemParam
     */
    public function getParam(){
      return $this->_get(2);
    }
    
    /**
     * Set <param> value
     *
     * @param int - \RO\Cmd\ItemParam $value
     * @return \RO\Cmd\EquipCard
     */
    public function setParam( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <oper> has a value
     *
     * @return boolean
     */
    public function hasOper(){
      return $this->_has(3);
    }
    
    /**
     * Clear <oper> value
     *
     * @return \RO\Cmd\EquipCard
     */
    public function clearOper(){
      return $this->_clear(3);
    }
    
    /**
     * Get <oper> value
     *
     * @return int - \RO\Cmd\ECardOper
     */
    public function getOper(){
      return $this->_get(3);
    }
    
    /**
     * Set <oper> value
     *
     * @param int - \RO\Cmd\ECardOper $value
     * @return \RO\Cmd\EquipCard
     */
    public function setOper( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <cardguid> has a value
     *
     * @return boolean
     */
    public function hasCardguid(){
      return $this->_has(4);
    }
    
    /**
     * Clear <cardguid> value
     *
     * @return \RO\Cmd\EquipCard
     */
    public function clearCardguid(){
      return $this->_clear(4);
    }
    
    /**
     * Get <cardguid> value
     *
     * @return string
     */
    public function getCardguid(){
      return $this->_get(4);
    }
    
    /**
     * Set <cardguid> value
     *
     * @param string $value
     * @return \RO\Cmd\EquipCard
     */
    public function setCardguid( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <equipguid> has a value
     *
     * @return boolean
     */
    public function hasEquipguid(){
      return $this->_has(5);
    }
    
    /**
     * Clear <equipguid> value
     *
     * @return \RO\Cmd\EquipCard
     */
    public function clearEquipguid(){
      return $this->_clear(5);
    }
    
    /**
     * Get <equipguid> value
     *
     * @return string
     */
    public function getEquipguid(){
      return $this->_get(5);
    }
    
    /**
     * Set <equipguid> value
     *
     * @param string $value
     * @return \RO\Cmd\EquipCard
     */
    public function setEquipguid( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <pos> has a value
     *
     * @return boolean
     */
    public function hasPos(){
      return $this->_has(6);
    }
    
    /**
     * Clear <pos> value
     *
     * @return \RO\Cmd\EquipCard
     */
    public function clearPos(){
      return $this->_clear(6);
    }
    
    /**
     * Get <pos> value
     *
     * @return int
     */
    public function getPos(){
      return $this->_get(6);
    }
    
    /**
     * Set <pos> value
     *
     * @param int $value
     * @return \RO\Cmd\EquipCard
     */
    public function setPos( $value){
      return $this->_set(6, $value);
    }
  }
}

