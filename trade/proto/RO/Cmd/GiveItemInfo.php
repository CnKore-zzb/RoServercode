<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: RecordTrade.proto

namespace RO\Cmd {

  class GiveItemInfo extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $id = null;
    
    /**  @var int - \RO\Cmd\ETakeStatus */
    public $status = null;
    
    /**  @var int */
    public $itemid = null;
    
    /**  @var int */
    public $count = null;
    
    /**  @var \RO\Cmd\ItemData */
    public $itemdata = null;
    
    /**  @var int */
    public $senderid = null;
    
    /**  @var string */
    public $sendername = null;
    
    /**  @var boolean */
    public $anonymous = null;
    
    /**  @var int */
    public $expiretime = null;
    
    /**  @var string */
    public $content = null;
    
    /**  @var int */
    public $quota = null;
    
    /**  @var string */
    public $receivername = null;
    
    /**  @var int */
    public $background = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.GiveItemInfo');

      // OPTIONAL UINT64 id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM status = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\ETakeStatus';
      $descriptor->addField($f);

      // OPTIONAL UINT32 itemid = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "itemid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 count = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "count";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE itemdata = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "itemdata";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\ItemData';
      $descriptor->addField($f);

      // OPTIONAL UINT64 senderid = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "senderid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING sendername = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "sendername";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL anonymous = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "anonymous";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 expiretime = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "expiretime";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING content = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "content";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT64 quota = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "quota";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING receivername = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "receivername";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 background = 13
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 13;
      $f->name      = "background";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \RO\Cmd\GiveItemInfo
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param int $value
     * @return \RO\Cmd\GiveItemInfo
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(2);
    }
    
    /**
     * Clear <status> value
     *
     * @return \RO\Cmd\GiveItemInfo
     */
    public function clearStatus(){
      return $this->_clear(2);
    }
    
    /**
     * Get <status> value
     *
     * @return int - \RO\Cmd\ETakeStatus
     */
    public function getStatus(){
      return $this->_get(2);
    }
    
    /**
     * Set <status> value
     *
     * @param int - \RO\Cmd\ETakeStatus $value
     * @return \RO\Cmd\GiveItemInfo
     */
    public function setStatus( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <itemid> has a value
     *
     * @return boolean
     */
    public function hasItemid(){
      return $this->_has(3);
    }
    
    /**
     * Clear <itemid> value
     *
     * @return \RO\Cmd\GiveItemInfo
     */
    public function clearItemid(){
      return $this->_clear(3);
    }
    
    /**
     * Get <itemid> value
     *
     * @return int
     */
    public function getItemid(){
      return $this->_get(3);
    }
    
    /**
     * Set <itemid> value
     *
     * @param int $value
     * @return \RO\Cmd\GiveItemInfo
     */
    public function setItemid( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <count> has a value
     *
     * @return boolean
     */
    public function hasCount(){
      return $this->_has(4);
    }
    
    /**
     * Clear <count> value
     *
     * @return \RO\Cmd\GiveItemInfo
     */
    public function clearCount(){
      return $this->_clear(4);
    }
    
    /**
     * Get <count> value
     *
     * @return int
     */
    public function getCount(){
      return $this->_get(4);
    }
    
    /**
     * Set <count> value
     *
     * @param int $value
     * @return \RO\Cmd\GiveItemInfo
     */
    public function setCount( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <itemdata> has a value
     *
     * @return boolean
     */
    public function hasItemdata(){
      return $this->_has(5);
    }
    
    /**
     * Clear <itemdata> value
     *
     * @return \RO\Cmd\GiveItemInfo
     */
    public function clearItemdata(){
      return $this->_clear(5);
    }
    
    /**
     * Get <itemdata> value
     *
     * @return \RO\Cmd\ItemData
     */
    public function getItemdata(){
      return $this->_get(5);
    }
    
    /**
     * Set <itemdata> value
     *
     * @param \RO\Cmd\ItemData $value
     * @return \RO\Cmd\GiveItemInfo
     */
    public function setItemdata(\RO\Cmd\ItemData $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <senderid> has a value
     *
     * @return boolean
     */
    public function hasSenderid(){
      return $this->_has(6);
    }
    
    /**
     * Clear <senderid> value
     *
     * @return \RO\Cmd\GiveItemInfo
     */
    public function clearSenderid(){
      return $this->_clear(6);
    }
    
    /**
     * Get <senderid> value
     *
     * @return int
     */
    public function getSenderid(){
      return $this->_get(6);
    }
    
    /**
     * Set <senderid> value
     *
     * @param int $value
     * @return \RO\Cmd\GiveItemInfo
     */
    public function setSenderid( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <sendername> has a value
     *
     * @return boolean
     */
    public function hasSendername(){
      return $this->_has(7);
    }
    
    /**
     * Clear <sendername> value
     *
     * @return \RO\Cmd\GiveItemInfo
     */
    public function clearSendername(){
      return $this->_clear(7);
    }
    
    /**
     * Get <sendername> value
     *
     * @return string
     */
    public function getSendername(){
      return $this->_get(7);
    }
    
    /**
     * Set <sendername> value
     *
     * @param string $value
     * @return \RO\Cmd\GiveItemInfo
     */
    public function setSendername( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <anonymous> has a value
     *
     * @return boolean
     */
    public function hasAnonymous(){
      return $this->_has(8);
    }
    
    /**
     * Clear <anonymous> value
     *
     * @return \RO\Cmd\GiveItemInfo
     */
    public function clearAnonymous(){
      return $this->_clear(8);
    }
    
    /**
     * Get <anonymous> value
     *
     * @return boolean
     */
    public function getAnonymous(){
      return $this->_get(8);
    }
    
    /**
     * Set <anonymous> value
     *
     * @param boolean $value
     * @return \RO\Cmd\GiveItemInfo
     */
    public function setAnonymous( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <expiretime> has a value
     *
     * @return boolean
     */
    public function hasExpiretime(){
      return $this->_has(9);
    }
    
    /**
     * Clear <expiretime> value
     *
     * @return \RO\Cmd\GiveItemInfo
     */
    public function clearExpiretime(){
      return $this->_clear(9);
    }
    
    /**
     * Get <expiretime> value
     *
     * @return int
     */
    public function getExpiretime(){
      return $this->_get(9);
    }
    
    /**
     * Set <expiretime> value
     *
     * @param int $value
     * @return \RO\Cmd\GiveItemInfo
     */
    public function setExpiretime( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <content> has a value
     *
     * @return boolean
     */
    public function hasContent(){
      return $this->_has(10);
    }
    
    /**
     * Clear <content> value
     *
     * @return \RO\Cmd\GiveItemInfo
     */
    public function clearContent(){
      return $this->_clear(10);
    }
    
    /**
     * Get <content> value
     *
     * @return string
     */
    public function getContent(){
      return $this->_get(10);
    }
    
    /**
     * Set <content> value
     *
     * @param string $value
     * @return \RO\Cmd\GiveItemInfo
     */
    public function setContent( $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <quota> has a value
     *
     * @return boolean
     */
    public function hasQuota(){
      return $this->_has(11);
    }
    
    /**
     * Clear <quota> value
     *
     * @return \RO\Cmd\GiveItemInfo
     */
    public function clearQuota(){
      return $this->_clear(11);
    }
    
    /**
     * Get <quota> value
     *
     * @return int
     */
    public function getQuota(){
      return $this->_get(11);
    }
    
    /**
     * Set <quota> value
     *
     * @param int $value
     * @return \RO\Cmd\GiveItemInfo
     */
    public function setQuota( $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <receivername> has a value
     *
     * @return boolean
     */
    public function hasReceivername(){
      return $this->_has(12);
    }
    
    /**
     * Clear <receivername> value
     *
     * @return \RO\Cmd\GiveItemInfo
     */
    public function clearReceivername(){
      return $this->_clear(12);
    }
    
    /**
     * Get <receivername> value
     *
     * @return string
     */
    public function getReceivername(){
      return $this->_get(12);
    }
    
    /**
     * Set <receivername> value
     *
     * @param string $value
     * @return \RO\Cmd\GiveItemInfo
     */
    public function setReceivername( $value){
      return $this->_set(12, $value);
    }
    
    /**
     * Check if <background> has a value
     *
     * @return boolean
     */
    public function hasBackground(){
      return $this->_has(13);
    }
    
    /**
     * Clear <background> value
     *
     * @return \RO\Cmd\GiveItemInfo
     */
    public function clearBackground(){
      return $this->_clear(13);
    }
    
    /**
     * Get <background> value
     *
     * @return int
     */
    public function getBackground(){
      return $this->_get(13);
    }
    
    /**
     * Set <background> value
     *
     * @param int $value
     * @return \RO\Cmd\GiveItemInfo
     */
    public function setBackground( $value){
      return $this->_set(13, $value);
    }
  }
}

