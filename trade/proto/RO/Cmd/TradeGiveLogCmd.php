<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: LogCmd.proto

namespace RO\Cmd {

  class TradeGiveLogCmd extends \DrSlump\Protobuf\Message {

    /**  @var int - \RO\Cmd\Command */
    public $cmd = \RO\Cmd\Command::LOG_PROTOCMD;
    
    /**  @var int - \RO\Cmd\LogParam */
    public $param = \RO\Cmd\LogParam::TRADE_GIVE_LOG_CMD;
    
    /**  @var int */
    public $cid = null;
    
    /**  @var int */
    public $sid = null;
    
    /**  @var int */
    public $pid = null;
    
    /**  @var int */
    public $time = null;
    
    /**  @var int - \RO\Cmd\EGiveEvent */
    public $event = null;
    
    /**  @var int */
    public $itemid = null;
    
    /**  @var int */
    public $quota = null;
    
    /**  @var string */
    public $iteminfo = null;
    
    /**  @var int */
    public $otherid = null;
    
    /**  @var string */
    public $logid = null;
    
    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $othername = null;
    
    /**  @var int */
    public $givetime = null;
    
    /**  @var int - \RO\Cmd\ELogGiveType */
    public $givetype = null;
    
    /**  @var int */
    public $itemcount = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.TradeGiveLogCmd');

      // OPTIONAL ENUM cmd = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "cmd";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\Command';
      $f->default   = \RO\Cmd\Command::LOG_PROTOCMD;
      $descriptor->addField($f);

      // OPTIONAL ENUM param = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "param";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\LogParam';
      $f->default   = \RO\Cmd\LogParam::TRADE_GIVE_LOG_CMD;
      $descriptor->addField($f);

      // OPTIONAL UINT32 cid = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "cid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 sid = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "sid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT64 pid = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "pid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 time = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "time";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM event = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "event";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\EGiveEvent';
      $descriptor->addField($f);

      // OPTIONAL UINT32 itemid = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "itemid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT64 quota = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "quota";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING iteminfo = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "iteminfo";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT64 otherid = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "otherid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING logid = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "logid";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING name = 13
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 13;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING othername = 14
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 14;
      $f->name      = "othername";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 givetime = 15
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 15;
      $f->name      = "givetime";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM givetype = 16
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 16;
      $f->name      = "givetype";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\ELogGiveType';
      $descriptor->addField($f);

      // OPTIONAL UINT32 itemcount = 17
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 17;
      $f->name      = "itemcount";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <cmd> has a value
     *
     * @return boolean
     */
    public function hasCmd(){
      return $this->_has(1);
    }
    
    /**
     * Clear <cmd> value
     *
     * @return \RO\Cmd\TradeGiveLogCmd
     */
    public function clearCmd(){
      return $this->_clear(1);
    }
    
    /**
     * Get <cmd> value
     *
     * @return int - \RO\Cmd\Command
     */
    public function getCmd(){
      return $this->_get(1);
    }
    
    /**
     * Set <cmd> value
     *
     * @param int - \RO\Cmd\Command $value
     * @return \RO\Cmd\TradeGiveLogCmd
     */
    public function setCmd( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <param> has a value
     *
     * @return boolean
     */
    public function hasParam(){
      return $this->_has(2);
    }
    
    /**
     * Clear <param> value
     *
     * @return \RO\Cmd\TradeGiveLogCmd
     */
    public function clearParam(){
      return $this->_clear(2);
    }
    
    /**
     * Get <param> value
     *
     * @return int - \RO\Cmd\LogParam
     */
    public function getParam(){
      return $this->_get(2);
    }
    
    /**
     * Set <param> value
     *
     * @param int - \RO\Cmd\LogParam $value
     * @return \RO\Cmd\TradeGiveLogCmd
     */
    public function setParam( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <cid> has a value
     *
     * @return boolean
     */
    public function hasCid(){
      return $this->_has(3);
    }
    
    /**
     * Clear <cid> value
     *
     * @return \RO\Cmd\TradeGiveLogCmd
     */
    public function clearCid(){
      return $this->_clear(3);
    }
    
    /**
     * Get <cid> value
     *
     * @return int
     */
    public function getCid(){
      return $this->_get(3);
    }
    
    /**
     * Set <cid> value
     *
     * @param int $value
     * @return \RO\Cmd\TradeGiveLogCmd
     */
    public function setCid( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <sid> has a value
     *
     * @return boolean
     */
    public function hasSid(){
      return $this->_has(4);
    }
    
    /**
     * Clear <sid> value
     *
     * @return \RO\Cmd\TradeGiveLogCmd
     */
    public function clearSid(){
      return $this->_clear(4);
    }
    
    /**
     * Get <sid> value
     *
     * @return int
     */
    public function getSid(){
      return $this->_get(4);
    }
    
    /**
     * Set <sid> value
     *
     * @param int $value
     * @return \RO\Cmd\TradeGiveLogCmd
     */
    public function setSid( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <pid> has a value
     *
     * @return boolean
     */
    public function hasPid(){
      return $this->_has(5);
    }
    
    /**
     * Clear <pid> value
     *
     * @return \RO\Cmd\TradeGiveLogCmd
     */
    public function clearPid(){
      return $this->_clear(5);
    }
    
    /**
     * Get <pid> value
     *
     * @return int
     */
    public function getPid(){
      return $this->_get(5);
    }
    
    /**
     * Set <pid> value
     *
     * @param int $value
     * @return \RO\Cmd\TradeGiveLogCmd
     */
    public function setPid( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <time> has a value
     *
     * @return boolean
     */
    public function hasTime(){
      return $this->_has(6);
    }
    
    /**
     * Clear <time> value
     *
     * @return \RO\Cmd\TradeGiveLogCmd
     */
    public function clearTime(){
      return $this->_clear(6);
    }
    
    /**
     * Get <time> value
     *
     * @return int
     */
    public function getTime(){
      return $this->_get(6);
    }
    
    /**
     * Set <time> value
     *
     * @param int $value
     * @return \RO\Cmd\TradeGiveLogCmd
     */
    public function setTime( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <event> has a value
     *
     * @return boolean
     */
    public function hasEvent(){
      return $this->_has(7);
    }
    
    /**
     * Clear <event> value
     *
     * @return \RO\Cmd\TradeGiveLogCmd
     */
    public function clearEvent(){
      return $this->_clear(7);
    }
    
    /**
     * Get <event> value
     *
     * @return int - \RO\Cmd\EGiveEvent
     */
    public function getEvent(){
      return $this->_get(7);
    }
    
    /**
     * Set <event> value
     *
     * @param int - \RO\Cmd\EGiveEvent $value
     * @return \RO\Cmd\TradeGiveLogCmd
     */
    public function setEvent( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <itemid> has a value
     *
     * @return boolean
     */
    public function hasItemid(){
      return $this->_has(8);
    }
    
    /**
     * Clear <itemid> value
     *
     * @return \RO\Cmd\TradeGiveLogCmd
     */
    public function clearItemid(){
      return $this->_clear(8);
    }
    
    /**
     * Get <itemid> value
     *
     * @return int
     */
    public function getItemid(){
      return $this->_get(8);
    }
    
    /**
     * Set <itemid> value
     *
     * @param int $value
     * @return \RO\Cmd\TradeGiveLogCmd
     */
    public function setItemid( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <quota> has a value
     *
     * @return boolean
     */
    public function hasQuota(){
      return $this->_has(9);
    }
    
    /**
     * Clear <quota> value
     *
     * @return \RO\Cmd\TradeGiveLogCmd
     */
    public function clearQuota(){
      return $this->_clear(9);
    }
    
    /**
     * Get <quota> value
     *
     * @return int
     */
    public function getQuota(){
      return $this->_get(9);
    }
    
    /**
     * Set <quota> value
     *
     * @param int $value
     * @return \RO\Cmd\TradeGiveLogCmd
     */
    public function setQuota( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <iteminfo> has a value
     *
     * @return boolean
     */
    public function hasIteminfo(){
      return $this->_has(10);
    }
    
    /**
     * Clear <iteminfo> value
     *
     * @return \RO\Cmd\TradeGiveLogCmd
     */
    public function clearIteminfo(){
      return $this->_clear(10);
    }
    
    /**
     * Get <iteminfo> value
     *
     * @return string
     */
    public function getIteminfo(){
      return $this->_get(10);
    }
    
    /**
     * Set <iteminfo> value
     *
     * @param string $value
     * @return \RO\Cmd\TradeGiveLogCmd
     */
    public function setIteminfo( $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <otherid> has a value
     *
     * @return boolean
     */
    public function hasOtherid(){
      return $this->_has(11);
    }
    
    /**
     * Clear <otherid> value
     *
     * @return \RO\Cmd\TradeGiveLogCmd
     */
    public function clearOtherid(){
      return $this->_clear(11);
    }
    
    /**
     * Get <otherid> value
     *
     * @return int
     */
    public function getOtherid(){
      return $this->_get(11);
    }
    
    /**
     * Set <otherid> value
     *
     * @param int $value
     * @return \RO\Cmd\TradeGiveLogCmd
     */
    public function setOtherid( $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <logid> has a value
     *
     * @return boolean
     */
    public function hasLogid(){
      return $this->_has(12);
    }
    
    /**
     * Clear <logid> value
     *
     * @return \RO\Cmd\TradeGiveLogCmd
     */
    public function clearLogid(){
      return $this->_clear(12);
    }
    
    /**
     * Get <logid> value
     *
     * @return string
     */
    public function getLogid(){
      return $this->_get(12);
    }
    
    /**
     * Set <logid> value
     *
     * @param string $value
     * @return \RO\Cmd\TradeGiveLogCmd
     */
    public function setLogid( $value){
      return $this->_set(12, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(13);
    }
    
    /**
     * Clear <name> value
     *
     * @return \RO\Cmd\TradeGiveLogCmd
     */
    public function clearName(){
      return $this->_clear(13);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(13);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \RO\Cmd\TradeGiveLogCmd
     */
    public function setName( $value){
      return $this->_set(13, $value);
    }
    
    /**
     * Check if <othername> has a value
     *
     * @return boolean
     */
    public function hasOthername(){
      return $this->_has(14);
    }
    
    /**
     * Clear <othername> value
     *
     * @return \RO\Cmd\TradeGiveLogCmd
     */
    public function clearOthername(){
      return $this->_clear(14);
    }
    
    /**
     * Get <othername> value
     *
     * @return string
     */
    public function getOthername(){
      return $this->_get(14);
    }
    
    /**
     * Set <othername> value
     *
     * @param string $value
     * @return \RO\Cmd\TradeGiveLogCmd
     */
    public function setOthername( $value){
      return $this->_set(14, $value);
    }
    
    /**
     * Check if <givetime> has a value
     *
     * @return boolean
     */
    public function hasGivetime(){
      return $this->_has(15);
    }
    
    /**
     * Clear <givetime> value
     *
     * @return \RO\Cmd\TradeGiveLogCmd
     */
    public function clearGivetime(){
      return $this->_clear(15);
    }
    
    /**
     * Get <givetime> value
     *
     * @return int
     */
    public function getGivetime(){
      return $this->_get(15);
    }
    
    /**
     * Set <givetime> value
     *
     * @param int $value
     * @return \RO\Cmd\TradeGiveLogCmd
     */
    public function setGivetime( $value){
      return $this->_set(15, $value);
    }
    
    /**
     * Check if <givetype> has a value
     *
     * @return boolean
     */
    public function hasGivetype(){
      return $this->_has(16);
    }
    
    /**
     * Clear <givetype> value
     *
     * @return \RO\Cmd\TradeGiveLogCmd
     */
    public function clearGivetype(){
      return $this->_clear(16);
    }
    
    /**
     * Get <givetype> value
     *
     * @return int - \RO\Cmd\ELogGiveType
     */
    public function getGivetype(){
      return $this->_get(16);
    }
    
    /**
     * Set <givetype> value
     *
     * @param int - \RO\Cmd\ELogGiveType $value
     * @return \RO\Cmd\TradeGiveLogCmd
     */
    public function setGivetype( $value){
      return $this->_set(16, $value);
    }
    
    /**
     * Check if <itemcount> has a value
     *
     * @return boolean
     */
    public function hasItemcount(){
      return $this->_has(17);
    }
    
    /**
     * Clear <itemcount> value
     *
     * @return \RO\Cmd\TradeGiveLogCmd
     */
    public function clearItemcount(){
      return $this->_clear(17);
    }
    
    /**
     * Get <itemcount> value
     *
     * @return int
     */
    public function getItemcount(){
      return $this->_get(17);
    }
    
    /**
     * Set <itemcount> value
     *
     * @param int $value
     * @return \RO\Cmd\TradeGiveLogCmd
     */
    public function setItemcount( $value){
      return $this->_set(17, $value);
    }
  }
}

