<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: RecordCmd.proto

namespace RO\Cmd {

  class BlobTransfer extends \DrSlump\Protobuf\Message {

    /**  @var int[]  */
    public $npcid = array();
    
    /**  @var boolean */
    public $map1AllActivated = false;
    
    /**  @var boolean */
    public $map2AllActivated = false;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.BlobTransfer');

      // REPEATED UINT32 npcid = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "npcid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL BOOL map1AllActivated = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "map1AllActivated";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = false;
      $descriptor->addField($f);

      // OPTIONAL BOOL map2AllActivated = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "map2AllActivated";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = false;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <npcid> has a value
     *
     * @return boolean
     */
    public function hasNpcid(){
      return $this->_has(1);
    }
    
    /**
     * Clear <npcid> value
     *
     * @return \RO\Cmd\BlobTransfer
     */
    public function clearNpcid(){
      return $this->_clear(1);
    }
    
    /**
     * Get <npcid> value
     *
     * @param int $idx
     * @return int
     */
    public function getNpcid($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <npcid> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobTransfer
     */
    public function setNpcid( $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <npcid>
     *
     * @return int[]
     */
    public function getNpcidList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <npcid>
     *
     * @param int $value
     * @return \RO\Cmd\BlobTransfer
     */
    public function addNpcid( $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <map1AllActivated> has a value
     *
     * @return boolean
     */
    public function hasMap1AllActivated(){
      return $this->_has(2);
    }
    
    /**
     * Clear <map1AllActivated> value
     *
     * @return \RO\Cmd\BlobTransfer
     */
    public function clearMap1AllActivated(){
      return $this->_clear(2);
    }
    
    /**
     * Get <map1AllActivated> value
     *
     * @return boolean
     */
    public function getMap1AllActivated(){
      return $this->_get(2);
    }
    
    /**
     * Set <map1AllActivated> value
     *
     * @param boolean $value
     * @return \RO\Cmd\BlobTransfer
     */
    public function setMap1AllActivated( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <map2AllActivated> has a value
     *
     * @return boolean
     */
    public function hasMap2AllActivated(){
      return $this->_has(3);
    }
    
    /**
     * Clear <map2AllActivated> value
     *
     * @return \RO\Cmd\BlobTransfer
     */
    public function clearMap2AllActivated(){
      return $this->_clear(3);
    }
    
    /**
     * Get <map2AllActivated> value
     *
     * @return boolean
     */
    public function getMap2AllActivated(){
      return $this->_get(3);
    }
    
    /**
     * Set <map2AllActivated> value
     *
     * @param boolean $value
     * @return \RO\Cmd\BlobTransfer
     */
    public function setMap2AllActivated( $value){
      return $this->_set(3, $value);
    }
  }
}

