<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: RecordCmd.proto

namespace RO\Cmd {

  class BlobNewCredit extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $version = 0;
    
    /**  @var int */
    public $credit = 0;
    
    /**  @var int */
    public $monster_value = 0;
    
    /**  @var int */
    public $savedtime = 0;
    
    /**  @var int */
    public $forbidtime = 0;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.BlobNewCredit');

      // OPTIONAL UINT32 version = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "version";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL INT32 credit = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "credit";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 monster_value = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "monster_value";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 savedtime = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "savedtime";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 forbidtime = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "forbidtime";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <version> has a value
     *
     * @return boolean
     */
    public function hasVersion(){
      return $this->_has(1);
    }
    
    /**
     * Clear <version> value
     *
     * @return \RO\Cmd\BlobNewCredit
     */
    public function clearVersion(){
      return $this->_clear(1);
    }
    
    /**
     * Get <version> value
     *
     * @return int
     */
    public function getVersion(){
      return $this->_get(1);
    }
    
    /**
     * Set <version> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobNewCredit
     */
    public function setVersion( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <credit> has a value
     *
     * @return boolean
     */
    public function hasCredit(){
      return $this->_has(2);
    }
    
    /**
     * Clear <credit> value
     *
     * @return \RO\Cmd\BlobNewCredit
     */
    public function clearCredit(){
      return $this->_clear(2);
    }
    
    /**
     * Get <credit> value
     *
     * @return int
     */
    public function getCredit(){
      return $this->_get(2);
    }
    
    /**
     * Set <credit> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobNewCredit
     */
    public function setCredit( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <monster_value> has a value
     *
     * @return boolean
     */
    public function hasMonsterValue(){
      return $this->_has(3);
    }
    
    /**
     * Clear <monster_value> value
     *
     * @return \RO\Cmd\BlobNewCredit
     */
    public function clearMonsterValue(){
      return $this->_clear(3);
    }
    
    /**
     * Get <monster_value> value
     *
     * @return int
     */
    public function getMonsterValue(){
      return $this->_get(3);
    }
    
    /**
     * Set <monster_value> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobNewCredit
     */
    public function setMonsterValue( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <savedtime> has a value
     *
     * @return boolean
     */
    public function hasSavedtime(){
      return $this->_has(4);
    }
    
    /**
     * Clear <savedtime> value
     *
     * @return \RO\Cmd\BlobNewCredit
     */
    public function clearSavedtime(){
      return $this->_clear(4);
    }
    
    /**
     * Get <savedtime> value
     *
     * @return int
     */
    public function getSavedtime(){
      return $this->_get(4);
    }
    
    /**
     * Set <savedtime> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobNewCredit
     */
    public function setSavedtime( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <forbidtime> has a value
     *
     * @return boolean
     */
    public function hasForbidtime(){
      return $this->_has(5);
    }
    
    /**
     * Clear <forbidtime> value
     *
     * @return \RO\Cmd\BlobNewCredit
     */
    public function clearForbidtime(){
      return $this->_clear(5);
    }
    
    /**
     * Get <forbidtime> value
     *
     * @return int
     */
    public function getForbidtime(){
      return $this->_get(5);
    }
    
    /**
     * Set <forbidtime> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobNewCredit
     */
    public function setForbidtime( $value){
      return $this->_set(5, $value);
    }
  }
}

