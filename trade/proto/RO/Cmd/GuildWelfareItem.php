<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: GuildCmd.proto

namespace RO\Cmd {

  class GuildWelfareItem extends \DrSlump\Protobuf\Message {

    /**  @var int - \RO\Cmd\EGuildWelfare */
    public $type = \RO\Cmd\EGuildWelfare::EGUILDWELFARE_MIN;
    
    /**  @var int */
    public $id = 0;
    
    /**  @var int - \RO\Cmd\ESource */
    public $source = \RO\Cmd\ESource::ESOURCE_MIN;
    
    /**  @var int */
    public $rewardid = 0;
    
    /**  @var int */
    public $createtime = 0;
    
    /**  @var int */
    public $overduetime = 0;
    
    /**  @var int[]  */
    public $charids = array();
    
    /**  @var string */
    public $ownername = null;
    
    /**  @var int */
    public $sourceid = 0;
    
    /**  @var int */
    public $eventguid = 0;
    
    /**  @var int */
    public $index = 0;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.GuildWelfareItem');

      // OPTIONAL ENUM type = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\EGuildWelfare';
      $f->default   = \RO\Cmd\EGuildWelfare::EGUILDWELFARE_MIN;
      $descriptor->addField($f);

      // OPTIONAL UINT64 id = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL ENUM source = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "source";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\ESource';
      $f->default   = \RO\Cmd\ESource::ESOURCE_MIN;
      $descriptor->addField($f);

      // OPTIONAL UINT32 rewardid = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "rewardid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 createtime = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "createtime";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 overduetime = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "overduetime";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // REPEATED UINT64 charids = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "charids";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL STRING ownername = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "ownername";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 sourceid = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "sourceid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 eventguid = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "eventguid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 index = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "index";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(1);
    }
    
    /**
     * Clear <type> value
     *
     * @return \RO\Cmd\GuildWelfareItem
     */
    public function clearType(){
      return $this->_clear(1);
    }
    
    /**
     * Get <type> value
     *
     * @return int - \RO\Cmd\EGuildWelfare
     */
    public function getType(){
      return $this->_get(1);
    }
    
    /**
     * Set <type> value
     *
     * @param int - \RO\Cmd\EGuildWelfare $value
     * @return \RO\Cmd\GuildWelfareItem
     */
    public function setType( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <id> value
     *
     * @return \RO\Cmd\GuildWelfareItem
     */
    public function clearId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(2);
    }
    
    /**
     * Set <id> value
     *
     * @param int $value
     * @return \RO\Cmd\GuildWelfareItem
     */
    public function setId( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <source> has a value
     *
     * @return boolean
     */
    public function hasSource(){
      return $this->_has(3);
    }
    
    /**
     * Clear <source> value
     *
     * @return \RO\Cmd\GuildWelfareItem
     */
    public function clearSource(){
      return $this->_clear(3);
    }
    
    /**
     * Get <source> value
     *
     * @return int - \RO\Cmd\ESource
     */
    public function getSource(){
      return $this->_get(3);
    }
    
    /**
     * Set <source> value
     *
     * @param int - \RO\Cmd\ESource $value
     * @return \RO\Cmd\GuildWelfareItem
     */
    public function setSource( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <rewardid> has a value
     *
     * @return boolean
     */
    public function hasRewardid(){
      return $this->_has(4);
    }
    
    /**
     * Clear <rewardid> value
     *
     * @return \RO\Cmd\GuildWelfareItem
     */
    public function clearRewardid(){
      return $this->_clear(4);
    }
    
    /**
     * Get <rewardid> value
     *
     * @return int
     */
    public function getRewardid(){
      return $this->_get(4);
    }
    
    /**
     * Set <rewardid> value
     *
     * @param int $value
     * @return \RO\Cmd\GuildWelfareItem
     */
    public function setRewardid( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <createtime> has a value
     *
     * @return boolean
     */
    public function hasCreatetime(){
      return $this->_has(5);
    }
    
    /**
     * Clear <createtime> value
     *
     * @return \RO\Cmd\GuildWelfareItem
     */
    public function clearCreatetime(){
      return $this->_clear(5);
    }
    
    /**
     * Get <createtime> value
     *
     * @return int
     */
    public function getCreatetime(){
      return $this->_get(5);
    }
    
    /**
     * Set <createtime> value
     *
     * @param int $value
     * @return \RO\Cmd\GuildWelfareItem
     */
    public function setCreatetime( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <overduetime> has a value
     *
     * @return boolean
     */
    public function hasOverduetime(){
      return $this->_has(6);
    }
    
    /**
     * Clear <overduetime> value
     *
     * @return \RO\Cmd\GuildWelfareItem
     */
    public function clearOverduetime(){
      return $this->_clear(6);
    }
    
    /**
     * Get <overduetime> value
     *
     * @return int
     */
    public function getOverduetime(){
      return $this->_get(6);
    }
    
    /**
     * Set <overduetime> value
     *
     * @param int $value
     * @return \RO\Cmd\GuildWelfareItem
     */
    public function setOverduetime( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <charids> has a value
     *
     * @return boolean
     */
    public function hasCharids(){
      return $this->_has(7);
    }
    
    /**
     * Clear <charids> value
     *
     * @return \RO\Cmd\GuildWelfareItem
     */
    public function clearCharids(){
      return $this->_clear(7);
    }
    
    /**
     * Get <charids> value
     *
     * @param int $idx
     * @return int
     */
    public function getCharids($idx = NULL){
      return $this->_get(7, $idx);
    }
    
    /**
     * Set <charids> value
     *
     * @param int $value
     * @return \RO\Cmd\GuildWelfareItem
     */
    public function setCharids( $value, $idx = NULL){
      return $this->_set(7, $value, $idx);
    }
    
    /**
     * Get all elements of <charids>
     *
     * @return int[]
     */
    public function getCharidsList(){
     return $this->_get(7);
    }
    
    /**
     * Add a new element to <charids>
     *
     * @param int $value
     * @return \RO\Cmd\GuildWelfareItem
     */
    public function addCharids( $value){
     return $this->_add(7, $value);
    }
    
    /**
     * Check if <ownername> has a value
     *
     * @return boolean
     */
    public function hasOwnername(){
      return $this->_has(8);
    }
    
    /**
     * Clear <ownername> value
     *
     * @return \RO\Cmd\GuildWelfareItem
     */
    public function clearOwnername(){
      return $this->_clear(8);
    }
    
    /**
     * Get <ownername> value
     *
     * @return string
     */
    public function getOwnername(){
      return $this->_get(8);
    }
    
    /**
     * Set <ownername> value
     *
     * @param string $value
     * @return \RO\Cmd\GuildWelfareItem
     */
    public function setOwnername( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <sourceid> has a value
     *
     * @return boolean
     */
    public function hasSourceid(){
      return $this->_has(9);
    }
    
    /**
     * Clear <sourceid> value
     *
     * @return \RO\Cmd\GuildWelfareItem
     */
    public function clearSourceid(){
      return $this->_clear(9);
    }
    
    /**
     * Get <sourceid> value
     *
     * @return int
     */
    public function getSourceid(){
      return $this->_get(9);
    }
    
    /**
     * Set <sourceid> value
     *
     * @param int $value
     * @return \RO\Cmd\GuildWelfareItem
     */
    public function setSourceid( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <eventguid> has a value
     *
     * @return boolean
     */
    public function hasEventguid(){
      return $this->_has(10);
    }
    
    /**
     * Clear <eventguid> value
     *
     * @return \RO\Cmd\GuildWelfareItem
     */
    public function clearEventguid(){
      return $this->_clear(10);
    }
    
    /**
     * Get <eventguid> value
     *
     * @return int
     */
    public function getEventguid(){
      return $this->_get(10);
    }
    
    /**
     * Set <eventguid> value
     *
     * @param int $value
     * @return \RO\Cmd\GuildWelfareItem
     */
    public function setEventguid( $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <index> has a value
     *
     * @return boolean
     */
    public function hasIndex(){
      return $this->_has(11);
    }
    
    /**
     * Clear <index> value
     *
     * @return \RO\Cmd\GuildWelfareItem
     */
    public function clearIndex(){
      return $this->_clear(11);
    }
    
    /**
     * Get <index> value
     *
     * @return int
     */
    public function getIndex(){
      return $this->_get(11);
    }
    
    /**
     * Set <index> value
     *
     * @param int $value
     * @return \RO\Cmd\GuildWelfareItem
     */
    public function setIndex( $value){
      return $this->_set(11, $value);
    }
  }
}

