<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: ActivityEvent.proto

namespace RO\Cmd {

  class AEResetInfo extends \DrSlump\Protobuf\Message {

    /**  @var int - \RO\Cmd\EAERewardMode */
    public $mode = \RO\Cmd\EAERewardMode::EAEREWARDMODE_MIN;
    
    /**  @var int */
    public $times = 0;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.AEResetInfo');

      // OPTIONAL ENUM mode = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "mode";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\EAERewardMode';
      $f->default   = \RO\Cmd\EAERewardMode::EAEREWARDMODE_MIN;
      $descriptor->addField($f);

      // OPTIONAL UINT32 times = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "times";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <mode> has a value
     *
     * @return boolean
     */
    public function hasMode(){
      return $this->_has(1);
    }
    
    /**
     * Clear <mode> value
     *
     * @return \RO\Cmd\AEResetInfo
     */
    public function clearMode(){
      return $this->_clear(1);
    }
    
    /**
     * Get <mode> value
     *
     * @return int - \RO\Cmd\EAERewardMode
     */
    public function getMode(){
      return $this->_get(1);
    }
    
    /**
     * Set <mode> value
     *
     * @param int - \RO\Cmd\EAERewardMode $value
     * @return \RO\Cmd\AEResetInfo
     */
    public function setMode( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <times> has a value
     *
     * @return boolean
     */
    public function hasTimes(){
      return $this->_has(2);
    }
    
    /**
     * Clear <times> value
     *
     * @return \RO\Cmd\AEResetInfo
     */
    public function clearTimes(){
      return $this->_clear(2);
    }
    
    /**
     * Get <times> value
     *
     * @return int
     */
    public function getTimes(){
      return $this->_get(2);
    }
    
    /**
     * Set <times> value
     *
     * @param int $value
     * @return \RO\Cmd\AEResetInfo
     */
    public function setTimes( $value){
      return $this->_set(2, $value);
    }
  }
}

