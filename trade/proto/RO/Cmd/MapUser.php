<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: SceneMap.proto

namespace RO\Cmd {

  class MapUser extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $guid = 0;
    
    /**  @var string */
    public $name = null;
    
    /**  @var int - \RO\Cmd\EGender */
    public $gender = \RO\Cmd\EGender::EGENDER_MIN;
    
    /**  @var \RO\Cmd\ScenePos */
    public $pos = null;
    
    /**  @var \RO\Cmd\ScenePos */
    public $dest = null;
    
    /**  @var \RO\Cmd\UserAttr[]  */
    public $attrs = array();
    
    /**  @var \RO\Cmd\UserData[]  */
    public $datas = array();
    
    /**  @var \RO\Cmd\BufferData[]  */
    public $buffs = array();
    
    /**  @var int */
    public $skillid = null;
    
    /**  @var int */
    public $teamid = null;
    
    /**  @var string */
    public $teamname = null;
    
    /**  @var \RO\Cmd\CarrierInfo */
    public $carrier = null;
    
    /**  @var \RO\Cmd\ChatRoomSummary */
    public $chatroom = null;
    
    /**  @var int */
    public $handsmaster = null;
    
    /**  @var \RO\Cmd\SpEffectData[]  */
    public $speffectdata = array();
    
    /**  @var int */
    public $guildid = 0;
    
    /**  @var string */
    public $guildname = null;
    
    /**  @var string */
    public $guildicon = null;
    
    /**  @var string */
    public $guildjob = null;
    
    /**  @var \RO\Cmd\HandNpcData */
    public $handnpc = null;
    
    /**  @var int */
    public $motionactionid = null;
    
    /**  @var int */
    public $seatid = null;
    
    /**  @var \RO\Cmd\GingerBreadNpcData[]  */
    public $givenpcdatas = array();
    
    /**  @var int */
    public $achievetitle = null;
    
    /**  @var \RO\Cmd\CookStateMsg */
    public $cookstate = null;
    
    /**  @var \RO\Cmd\BoothInfo */
    public $info = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.MapUser');

      // OPTIONAL UINT64 guid = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "guid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL STRING name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM gender = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "gender";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\EGender';
      $f->default   = \RO\Cmd\EGender::EGENDER_MIN;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE pos = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "pos";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\ScenePos';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE dest = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "dest";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\ScenePos';
      $descriptor->addField($f);

      // REPEATED MESSAGE attrs = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "attrs";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\UserAttr';
      $descriptor->addField($f);

      // REPEATED MESSAGE datas = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "datas";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\UserData';
      $descriptor->addField($f);

      // REPEATED MESSAGE buffs = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "buffs";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\BufferData';
      $descriptor->addField($f);

      // OPTIONAL UINT32 skillid = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "skillid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT64 teamid = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "teamid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING teamname = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "teamname";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE carrier = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "carrier";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\CarrierInfo';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE chatroom = 13
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 13;
      $f->name      = "chatroom";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\ChatRoomSummary';
      $descriptor->addField($f);

      // OPTIONAL UINT64 handsmaster = 14
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 14;
      $f->name      = "handsmaster";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE speffectdata = 15
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 15;
      $f->name      = "speffectdata";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\SpEffectData';
      $descriptor->addField($f);

      // OPTIONAL UINT64 guildid = 16
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 16;
      $f->name      = "guildid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL STRING guildname = 17
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 17;
      $f->name      = "guildname";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING guildicon = 18
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 18;
      $f->name      = "guildicon";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING guildjob = 19
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 19;
      $f->name      = "guildjob";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE handnpc = 20
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 20;
      $f->name      = "handnpc";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\HandNpcData';
      $descriptor->addField($f);

      // OPTIONAL UINT32 motionactionid = 21
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 21;
      $f->name      = "motionactionid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 seatid = 22
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 22;
      $f->name      = "seatid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE givenpcdatas = 23
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 23;
      $f->name      = "givenpcdatas";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\GingerBreadNpcData';
      $descriptor->addField($f);

      // OPTIONAL UINT32 achievetitle = 24
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 24;
      $f->name      = "achievetitle";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE cookstate = 25
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 25;
      $f->name      = "cookstate";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\CookStateMsg';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE info = 26
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 26;
      $f->name      = "info";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BoothInfo';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <guid> has a value
     *
     * @return boolean
     */
    public function hasGuid(){
      return $this->_has(1);
    }
    
    /**
     * Clear <guid> value
     *
     * @return \RO\Cmd\MapUser
     */
    public function clearGuid(){
      return $this->_clear(1);
    }
    
    /**
     * Get <guid> value
     *
     * @return int
     */
    public function getGuid(){
      return $this->_get(1);
    }
    
    /**
     * Set <guid> value
     *
     * @param int $value
     * @return \RO\Cmd\MapUser
     */
    public function setGuid( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <name> value
     *
     * @return \RO\Cmd\MapUser
     */
    public function clearName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(2);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \RO\Cmd\MapUser
     */
    public function setName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <gender> has a value
     *
     * @return boolean
     */
    public function hasGender(){
      return $this->_has(3);
    }
    
    /**
     * Clear <gender> value
     *
     * @return \RO\Cmd\MapUser
     */
    public function clearGender(){
      return $this->_clear(3);
    }
    
    /**
     * Get <gender> value
     *
     * @return int - \RO\Cmd\EGender
     */
    public function getGender(){
      return $this->_get(3);
    }
    
    /**
     * Set <gender> value
     *
     * @param int - \RO\Cmd\EGender $value
     * @return \RO\Cmd\MapUser
     */
    public function setGender( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <pos> has a value
     *
     * @return boolean
     */
    public function hasPos(){
      return $this->_has(4);
    }
    
    /**
     * Clear <pos> value
     *
     * @return \RO\Cmd\MapUser
     */
    public function clearPos(){
      return $this->_clear(4);
    }
    
    /**
     * Get <pos> value
     *
     * @return \RO\Cmd\ScenePos
     */
    public function getPos(){
      return $this->_get(4);
    }
    
    /**
     * Set <pos> value
     *
     * @param \RO\Cmd\ScenePos $value
     * @return \RO\Cmd\MapUser
     */
    public function setPos(\RO\Cmd\ScenePos $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <dest> has a value
     *
     * @return boolean
     */
    public function hasDest(){
      return $this->_has(5);
    }
    
    /**
     * Clear <dest> value
     *
     * @return \RO\Cmd\MapUser
     */
    public function clearDest(){
      return $this->_clear(5);
    }
    
    /**
     * Get <dest> value
     *
     * @return \RO\Cmd\ScenePos
     */
    public function getDest(){
      return $this->_get(5);
    }
    
    /**
     * Set <dest> value
     *
     * @param \RO\Cmd\ScenePos $value
     * @return \RO\Cmd\MapUser
     */
    public function setDest(\RO\Cmd\ScenePos $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <attrs> has a value
     *
     * @return boolean
     */
    public function hasAttrs(){
      return $this->_has(6);
    }
    
    /**
     * Clear <attrs> value
     *
     * @return \RO\Cmd\MapUser
     */
    public function clearAttrs(){
      return $this->_clear(6);
    }
    
    /**
     * Get <attrs> value
     *
     * @param int $idx
     * @return \RO\Cmd\UserAttr
     */
    public function getAttrs($idx = NULL){
      return $this->_get(6, $idx);
    }
    
    /**
     * Set <attrs> value
     *
     * @param \RO\Cmd\UserAttr $value
     * @return \RO\Cmd\MapUser
     */
    public function setAttrs(\RO\Cmd\UserAttr $value, $idx = NULL){
      return $this->_set(6, $value, $idx);
    }
    
    /**
     * Get all elements of <attrs>
     *
     * @return \RO\Cmd\UserAttr[]
     */
    public function getAttrsList(){
     return $this->_get(6);
    }
    
    /**
     * Add a new element to <attrs>
     *
     * @param \RO\Cmd\UserAttr $value
     * @return \RO\Cmd\MapUser
     */
    public function addAttrs(\RO\Cmd\UserAttr $value){
     return $this->_add(6, $value);
    }
    
    /**
     * Check if <datas> has a value
     *
     * @return boolean
     */
    public function hasDatas(){
      return $this->_has(7);
    }
    
    /**
     * Clear <datas> value
     *
     * @return \RO\Cmd\MapUser
     */
    public function clearDatas(){
      return $this->_clear(7);
    }
    
    /**
     * Get <datas> value
     *
     * @param int $idx
     * @return \RO\Cmd\UserData
     */
    public function getDatas($idx = NULL){
      return $this->_get(7, $idx);
    }
    
    /**
     * Set <datas> value
     *
     * @param \RO\Cmd\UserData $value
     * @return \RO\Cmd\MapUser
     */
    public function setDatas(\RO\Cmd\UserData $value, $idx = NULL){
      return $this->_set(7, $value, $idx);
    }
    
    /**
     * Get all elements of <datas>
     *
     * @return \RO\Cmd\UserData[]
     */
    public function getDatasList(){
     return $this->_get(7);
    }
    
    /**
     * Add a new element to <datas>
     *
     * @param \RO\Cmd\UserData $value
     * @return \RO\Cmd\MapUser
     */
    public function addDatas(\RO\Cmd\UserData $value){
     return $this->_add(7, $value);
    }
    
    /**
     * Check if <buffs> has a value
     *
     * @return boolean
     */
    public function hasBuffs(){
      return $this->_has(8);
    }
    
    /**
     * Clear <buffs> value
     *
     * @return \RO\Cmd\MapUser
     */
    public function clearBuffs(){
      return $this->_clear(8);
    }
    
    /**
     * Get <buffs> value
     *
     * @param int $idx
     * @return \RO\Cmd\BufferData
     */
    public function getBuffs($idx = NULL){
      return $this->_get(8, $idx);
    }
    
    /**
     * Set <buffs> value
     *
     * @param \RO\Cmd\BufferData $value
     * @return \RO\Cmd\MapUser
     */
    public function setBuffs(\RO\Cmd\BufferData $value, $idx = NULL){
      return $this->_set(8, $value, $idx);
    }
    
    /**
     * Get all elements of <buffs>
     *
     * @return \RO\Cmd\BufferData[]
     */
    public function getBuffsList(){
     return $this->_get(8);
    }
    
    /**
     * Add a new element to <buffs>
     *
     * @param \RO\Cmd\BufferData $value
     * @return \RO\Cmd\MapUser
     */
    public function addBuffs(\RO\Cmd\BufferData $value){
     return $this->_add(8, $value);
    }
    
    /**
     * Check if <skillid> has a value
     *
     * @return boolean
     */
    public function hasSkillid(){
      return $this->_has(9);
    }
    
    /**
     * Clear <skillid> value
     *
     * @return \RO\Cmd\MapUser
     */
    public function clearSkillid(){
      return $this->_clear(9);
    }
    
    /**
     * Get <skillid> value
     *
     * @return int
     */
    public function getSkillid(){
      return $this->_get(9);
    }
    
    /**
     * Set <skillid> value
     *
     * @param int $value
     * @return \RO\Cmd\MapUser
     */
    public function setSkillid( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <teamid> has a value
     *
     * @return boolean
     */
    public function hasTeamid(){
      return $this->_has(10);
    }
    
    /**
     * Clear <teamid> value
     *
     * @return \RO\Cmd\MapUser
     */
    public function clearTeamid(){
      return $this->_clear(10);
    }
    
    /**
     * Get <teamid> value
     *
     * @return int
     */
    public function getTeamid(){
      return $this->_get(10);
    }
    
    /**
     * Set <teamid> value
     *
     * @param int $value
     * @return \RO\Cmd\MapUser
     */
    public function setTeamid( $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <teamname> has a value
     *
     * @return boolean
     */
    public function hasTeamname(){
      return $this->_has(11);
    }
    
    /**
     * Clear <teamname> value
     *
     * @return \RO\Cmd\MapUser
     */
    public function clearTeamname(){
      return $this->_clear(11);
    }
    
    /**
     * Get <teamname> value
     *
     * @return string
     */
    public function getTeamname(){
      return $this->_get(11);
    }
    
    /**
     * Set <teamname> value
     *
     * @param string $value
     * @return \RO\Cmd\MapUser
     */
    public function setTeamname( $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <carrier> has a value
     *
     * @return boolean
     */
    public function hasCarrier(){
      return $this->_has(12);
    }
    
    /**
     * Clear <carrier> value
     *
     * @return \RO\Cmd\MapUser
     */
    public function clearCarrier(){
      return $this->_clear(12);
    }
    
    /**
     * Get <carrier> value
     *
     * @return \RO\Cmd\CarrierInfo
     */
    public function getCarrier(){
      return $this->_get(12);
    }
    
    /**
     * Set <carrier> value
     *
     * @param \RO\Cmd\CarrierInfo $value
     * @return \RO\Cmd\MapUser
     */
    public function setCarrier(\RO\Cmd\CarrierInfo $value){
      return $this->_set(12, $value);
    }
    
    /**
     * Check if <chatroom> has a value
     *
     * @return boolean
     */
    public function hasChatroom(){
      return $this->_has(13);
    }
    
    /**
     * Clear <chatroom> value
     *
     * @return \RO\Cmd\MapUser
     */
    public function clearChatroom(){
      return $this->_clear(13);
    }
    
    /**
     * Get <chatroom> value
     *
     * @return \RO\Cmd\ChatRoomSummary
     */
    public function getChatroom(){
      return $this->_get(13);
    }
    
    /**
     * Set <chatroom> value
     *
     * @param \RO\Cmd\ChatRoomSummary $value
     * @return \RO\Cmd\MapUser
     */
    public function setChatroom(\RO\Cmd\ChatRoomSummary $value){
      return $this->_set(13, $value);
    }
    
    /**
     * Check if <handsmaster> has a value
     *
     * @return boolean
     */
    public function hasHandsmaster(){
      return $this->_has(14);
    }
    
    /**
     * Clear <handsmaster> value
     *
     * @return \RO\Cmd\MapUser
     */
    public function clearHandsmaster(){
      return $this->_clear(14);
    }
    
    /**
     * Get <handsmaster> value
     *
     * @return int
     */
    public function getHandsmaster(){
      return $this->_get(14);
    }
    
    /**
     * Set <handsmaster> value
     *
     * @param int $value
     * @return \RO\Cmd\MapUser
     */
    public function setHandsmaster( $value){
      return $this->_set(14, $value);
    }
    
    /**
     * Check if <speffectdata> has a value
     *
     * @return boolean
     */
    public function hasSpeffectdata(){
      return $this->_has(15);
    }
    
    /**
     * Clear <speffectdata> value
     *
     * @return \RO\Cmd\MapUser
     */
    public function clearSpeffectdata(){
      return $this->_clear(15);
    }
    
    /**
     * Get <speffectdata> value
     *
     * @param int $idx
     * @return \RO\Cmd\SpEffectData
     */
    public function getSpeffectdata($idx = NULL){
      return $this->_get(15, $idx);
    }
    
    /**
     * Set <speffectdata> value
     *
     * @param \RO\Cmd\SpEffectData $value
     * @return \RO\Cmd\MapUser
     */
    public function setSpeffectdata(\RO\Cmd\SpEffectData $value, $idx = NULL){
      return $this->_set(15, $value, $idx);
    }
    
    /**
     * Get all elements of <speffectdata>
     *
     * @return \RO\Cmd\SpEffectData[]
     */
    public function getSpeffectdataList(){
     return $this->_get(15);
    }
    
    /**
     * Add a new element to <speffectdata>
     *
     * @param \RO\Cmd\SpEffectData $value
     * @return \RO\Cmd\MapUser
     */
    public function addSpeffectdata(\RO\Cmd\SpEffectData $value){
     return $this->_add(15, $value);
    }
    
    /**
     * Check if <guildid> has a value
     *
     * @return boolean
     */
    public function hasGuildid(){
      return $this->_has(16);
    }
    
    /**
     * Clear <guildid> value
     *
     * @return \RO\Cmd\MapUser
     */
    public function clearGuildid(){
      return $this->_clear(16);
    }
    
    /**
     * Get <guildid> value
     *
     * @return int
     */
    public function getGuildid(){
      return $this->_get(16);
    }
    
    /**
     * Set <guildid> value
     *
     * @param int $value
     * @return \RO\Cmd\MapUser
     */
    public function setGuildid( $value){
      return $this->_set(16, $value);
    }
    
    /**
     * Check if <guildname> has a value
     *
     * @return boolean
     */
    public function hasGuildname(){
      return $this->_has(17);
    }
    
    /**
     * Clear <guildname> value
     *
     * @return \RO\Cmd\MapUser
     */
    public function clearGuildname(){
      return $this->_clear(17);
    }
    
    /**
     * Get <guildname> value
     *
     * @return string
     */
    public function getGuildname(){
      return $this->_get(17);
    }
    
    /**
     * Set <guildname> value
     *
     * @param string $value
     * @return \RO\Cmd\MapUser
     */
    public function setGuildname( $value){
      return $this->_set(17, $value);
    }
    
    /**
     * Check if <guildicon> has a value
     *
     * @return boolean
     */
    public function hasGuildicon(){
      return $this->_has(18);
    }
    
    /**
     * Clear <guildicon> value
     *
     * @return \RO\Cmd\MapUser
     */
    public function clearGuildicon(){
      return $this->_clear(18);
    }
    
    /**
     * Get <guildicon> value
     *
     * @return string
     */
    public function getGuildicon(){
      return $this->_get(18);
    }
    
    /**
     * Set <guildicon> value
     *
     * @param string $value
     * @return \RO\Cmd\MapUser
     */
    public function setGuildicon( $value){
      return $this->_set(18, $value);
    }
    
    /**
     * Check if <guildjob> has a value
     *
     * @return boolean
     */
    public function hasGuildjob(){
      return $this->_has(19);
    }
    
    /**
     * Clear <guildjob> value
     *
     * @return \RO\Cmd\MapUser
     */
    public function clearGuildjob(){
      return $this->_clear(19);
    }
    
    /**
     * Get <guildjob> value
     *
     * @return string
     */
    public function getGuildjob(){
      return $this->_get(19);
    }
    
    /**
     * Set <guildjob> value
     *
     * @param string $value
     * @return \RO\Cmd\MapUser
     */
    public function setGuildjob( $value){
      return $this->_set(19, $value);
    }
    
    /**
     * Check if <handnpc> has a value
     *
     * @return boolean
     */
    public function hasHandnpc(){
      return $this->_has(20);
    }
    
    /**
     * Clear <handnpc> value
     *
     * @return \RO\Cmd\MapUser
     */
    public function clearHandnpc(){
      return $this->_clear(20);
    }
    
    /**
     * Get <handnpc> value
     *
     * @return \RO\Cmd\HandNpcData
     */
    public function getHandnpc(){
      return $this->_get(20);
    }
    
    /**
     * Set <handnpc> value
     *
     * @param \RO\Cmd\HandNpcData $value
     * @return \RO\Cmd\MapUser
     */
    public function setHandnpc(\RO\Cmd\HandNpcData $value){
      return $this->_set(20, $value);
    }
    
    /**
     * Check if <motionactionid> has a value
     *
     * @return boolean
     */
    public function hasMotionactionid(){
      return $this->_has(21);
    }
    
    /**
     * Clear <motionactionid> value
     *
     * @return \RO\Cmd\MapUser
     */
    public function clearMotionactionid(){
      return $this->_clear(21);
    }
    
    /**
     * Get <motionactionid> value
     *
     * @return int
     */
    public function getMotionactionid(){
      return $this->_get(21);
    }
    
    /**
     * Set <motionactionid> value
     *
     * @param int $value
     * @return \RO\Cmd\MapUser
     */
    public function setMotionactionid( $value){
      return $this->_set(21, $value);
    }
    
    /**
     * Check if <seatid> has a value
     *
     * @return boolean
     */
    public function hasSeatid(){
      return $this->_has(22);
    }
    
    /**
     * Clear <seatid> value
     *
     * @return \RO\Cmd\MapUser
     */
    public function clearSeatid(){
      return $this->_clear(22);
    }
    
    /**
     * Get <seatid> value
     *
     * @return int
     */
    public function getSeatid(){
      return $this->_get(22);
    }
    
    /**
     * Set <seatid> value
     *
     * @param int $value
     * @return \RO\Cmd\MapUser
     */
    public function setSeatid( $value){
      return $this->_set(22, $value);
    }
    
    /**
     * Check if <givenpcdatas> has a value
     *
     * @return boolean
     */
    public function hasGivenpcdatas(){
      return $this->_has(23);
    }
    
    /**
     * Clear <givenpcdatas> value
     *
     * @return \RO\Cmd\MapUser
     */
    public function clearGivenpcdatas(){
      return $this->_clear(23);
    }
    
    /**
     * Get <givenpcdatas> value
     *
     * @param int $idx
     * @return \RO\Cmd\GingerBreadNpcData
     */
    public function getGivenpcdatas($idx = NULL){
      return $this->_get(23, $idx);
    }
    
    /**
     * Set <givenpcdatas> value
     *
     * @param \RO\Cmd\GingerBreadNpcData $value
     * @return \RO\Cmd\MapUser
     */
    public function setGivenpcdatas(\RO\Cmd\GingerBreadNpcData $value, $idx = NULL){
      return $this->_set(23, $value, $idx);
    }
    
    /**
     * Get all elements of <givenpcdatas>
     *
     * @return \RO\Cmd\GingerBreadNpcData[]
     */
    public function getGivenpcdatasList(){
     return $this->_get(23);
    }
    
    /**
     * Add a new element to <givenpcdatas>
     *
     * @param \RO\Cmd\GingerBreadNpcData $value
     * @return \RO\Cmd\MapUser
     */
    public function addGivenpcdatas(\RO\Cmd\GingerBreadNpcData $value){
     return $this->_add(23, $value);
    }
    
    /**
     * Check if <achievetitle> has a value
     *
     * @return boolean
     */
    public function hasAchievetitle(){
      return $this->_has(24);
    }
    
    /**
     * Clear <achievetitle> value
     *
     * @return \RO\Cmd\MapUser
     */
    public function clearAchievetitle(){
      return $this->_clear(24);
    }
    
    /**
     * Get <achievetitle> value
     *
     * @return int
     */
    public function getAchievetitle(){
      return $this->_get(24);
    }
    
    /**
     * Set <achievetitle> value
     *
     * @param int $value
     * @return \RO\Cmd\MapUser
     */
    public function setAchievetitle( $value){
      return $this->_set(24, $value);
    }
    
    /**
     * Check if <cookstate> has a value
     *
     * @return boolean
     */
    public function hasCookstate(){
      return $this->_has(25);
    }
    
    /**
     * Clear <cookstate> value
     *
     * @return \RO\Cmd\MapUser
     */
    public function clearCookstate(){
      return $this->_clear(25);
    }
    
    /**
     * Get <cookstate> value
     *
     * @return \RO\Cmd\CookStateMsg
     */
    public function getCookstate(){
      return $this->_get(25);
    }
    
    /**
     * Set <cookstate> value
     *
     * @param \RO\Cmd\CookStateMsg $value
     * @return \RO\Cmd\MapUser
     */
    public function setCookstate(\RO\Cmd\CookStateMsg $value){
      return $this->_set(25, $value);
    }
    
    /**
     * Check if <info> has a value
     *
     * @return boolean
     */
    public function hasInfo(){
      return $this->_has(26);
    }
    
    /**
     * Clear <info> value
     *
     * @return \RO\Cmd\MapUser
     */
    public function clearInfo(){
      return $this->_clear(26);
    }
    
    /**
     * Get <info> value
     *
     * @return \RO\Cmd\BoothInfo
     */
    public function getInfo(){
      return $this->_get(26);
    }
    
    /**
     * Set <info> value
     *
     * @param \RO\Cmd\BoothInfo $value
     * @return \RO\Cmd\MapUser
     */
    public function setInfo(\RO\Cmd\BoothInfo $value){
      return $this->_set(26, $value);
    }
  }
}

