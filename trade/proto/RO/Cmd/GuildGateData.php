<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: FuBenCmd.proto

namespace RO\Cmd {

  class GuildGateData extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $gatenpcid = null;
    
    /**  @var int */
    public $killedbossnum = 0;
    
    /**  @var int */
    public $groupindex = 0;
    
    /**  @var int */
    public $closetime = 0;
    
    /**  @var int */
    public $level = 0;
    
    /**  @var boolean */
    public $isspecial = false;
    
    /**  @var int - \RO\Cmd\EGuildGateState */
    public $state = \RO\Cmd\EGuildGateState::EGUILDGATESTATE_LOCK;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.GuildGateData');

      // REQUIRED UINT64 gatenpcid = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "gatenpcid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL UINT32 killedbossnum = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "killedbossnum";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 groupindex = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "groupindex";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 closetime = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "closetime";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 level = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "level";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL BOOL isspecial = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "isspecial";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = false;
      $descriptor->addField($f);

      // OPTIONAL ENUM state = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\EGuildGateState';
      $f->default   = \RO\Cmd\EGuildGateState::EGUILDGATESTATE_LOCK;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <gatenpcid> has a value
     *
     * @return boolean
     */
    public function hasGatenpcid(){
      return $this->_has(1);
    }
    
    /**
     * Clear <gatenpcid> value
     *
     * @return \RO\Cmd\GuildGateData
     */
    public function clearGatenpcid(){
      return $this->_clear(1);
    }
    
    /**
     * Get <gatenpcid> value
     *
     * @return int
     */
    public function getGatenpcid(){
      return $this->_get(1);
    }
    
    /**
     * Set <gatenpcid> value
     *
     * @param int $value
     * @return \RO\Cmd\GuildGateData
     */
    public function setGatenpcid( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <killedbossnum> has a value
     *
     * @return boolean
     */
    public function hasKilledbossnum(){
      return $this->_has(2);
    }
    
    /**
     * Clear <killedbossnum> value
     *
     * @return \RO\Cmd\GuildGateData
     */
    public function clearKilledbossnum(){
      return $this->_clear(2);
    }
    
    /**
     * Get <killedbossnum> value
     *
     * @return int
     */
    public function getKilledbossnum(){
      return $this->_get(2);
    }
    
    /**
     * Set <killedbossnum> value
     *
     * @param int $value
     * @return \RO\Cmd\GuildGateData
     */
    public function setKilledbossnum( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <groupindex> has a value
     *
     * @return boolean
     */
    public function hasGroupindex(){
      return $this->_has(3);
    }
    
    /**
     * Clear <groupindex> value
     *
     * @return \RO\Cmd\GuildGateData
     */
    public function clearGroupindex(){
      return $this->_clear(3);
    }
    
    /**
     * Get <groupindex> value
     *
     * @return int
     */
    public function getGroupindex(){
      return $this->_get(3);
    }
    
    /**
     * Set <groupindex> value
     *
     * @param int $value
     * @return \RO\Cmd\GuildGateData
     */
    public function setGroupindex( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <closetime> has a value
     *
     * @return boolean
     */
    public function hasClosetime(){
      return $this->_has(4);
    }
    
    /**
     * Clear <closetime> value
     *
     * @return \RO\Cmd\GuildGateData
     */
    public function clearClosetime(){
      return $this->_clear(4);
    }
    
    /**
     * Get <closetime> value
     *
     * @return int
     */
    public function getClosetime(){
      return $this->_get(4);
    }
    
    /**
     * Set <closetime> value
     *
     * @param int $value
     * @return \RO\Cmd\GuildGateData
     */
    public function setClosetime( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <level> has a value
     *
     * @return boolean
     */
    public function hasLevel(){
      return $this->_has(5);
    }
    
    /**
     * Clear <level> value
     *
     * @return \RO\Cmd\GuildGateData
     */
    public function clearLevel(){
      return $this->_clear(5);
    }
    
    /**
     * Get <level> value
     *
     * @return int
     */
    public function getLevel(){
      return $this->_get(5);
    }
    
    /**
     * Set <level> value
     *
     * @param int $value
     * @return \RO\Cmd\GuildGateData
     */
    public function setLevel( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <isspecial> has a value
     *
     * @return boolean
     */
    public function hasIsspecial(){
      return $this->_has(6);
    }
    
    /**
     * Clear <isspecial> value
     *
     * @return \RO\Cmd\GuildGateData
     */
    public function clearIsspecial(){
      return $this->_clear(6);
    }
    
    /**
     * Get <isspecial> value
     *
     * @return boolean
     */
    public function getIsspecial(){
      return $this->_get(6);
    }
    
    /**
     * Set <isspecial> value
     *
     * @param boolean $value
     * @return \RO\Cmd\GuildGateData
     */
    public function setIsspecial( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(7);
    }
    
    /**
     * Clear <state> value
     *
     * @return \RO\Cmd\GuildGateData
     */
    public function clearState(){
      return $this->_clear(7);
    }
    
    /**
     * Get <state> value
     *
     * @return int - \RO\Cmd\EGuildGateState
     */
    public function getState(){
      return $this->_get(7);
    }
    
    /**
     * Set <state> value
     *
     * @param int - \RO\Cmd\EGuildGateState $value
     * @return \RO\Cmd\GuildGateData
     */
    public function setState( $value){
      return $this->_set(7, $value);
    }
  }
}

