<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: RecordCmd.proto

namespace RO\Cmd {

  class BlobUserData extends \DrSlump\Protobuf\Message {

    /**  @var float */
    public $x = 0;
    
    /**  @var float */
    public $y = 0;
    
    /**  @var float */
    public $z = 0;
    
    /**  @var \RO\Cmd\BlobCDTime */
    public $cdtime = null;
    
    /**  @var \RO\Cmd\BlobShortcut */
    public $shortcuts = null;
    
    /**  @var \RO\Cmd\BlobFollower */
    public $follower = null;
    
    /**  @var \RO\Cmd\BlobStage */
    public $stage = null;
    
    /**  @var \RO\Cmd\BlobQuestNpc */
    public $questnpc = null;
    
    /**  @var \RO\Cmd\BlobBuffer */
    public $buffer = null;
    
    /**  @var \RO\Cmd\BlobMenu */
    public $menu = null;
    
    /**  @var int */
    public $clothcolor = 0;
    
    /**  @var \RO\Cmd\BlobPortrait */
    public $port = null;
    
    /**  @var \RO\Cmd\BlobShopGotItem */
    public $items = null;
    
    /**  @var \RO\Cmd\BlobHair */
    public $hair = null;
    
    /**  @var \RO\Cmd\BlobKnownMaps */
    public $maps = null;
    
    /**  @var \RO\Cmd\BlobGears */
    public $gear = null;
    
    /**  @var int */
    public $garden = 0;
    
    /**  @var int */
    public $purify = 0;
    
    /**  @var \RO\Cmd\BlobTips */
    public $tips = null;
    
    /**  @var int */
    public $savemap = 0;
    
    /**  @var \RO\Cmd\BlobGMEffects */
    public $gms = null;
    
    /**  @var \RO\Cmd\BlobFreyja */
    public $freyja = null;
    
    /**  @var \RO\Cmd\BlobInter */
    public $inters = null;
    
    /**  @var \RO\Cmd\BlobLaboratory */
    public $laboratory = null;
    
    /**  @var \RO\Cmd\BlobScenery */
    public $scenery = null;
    
    /**  @var \RO\Cmd\BlobCarrier */
    public $carrier = null;
    
    /**  @var int */
    public $lastmapid = null;
    
    /**  @var int[]  */
    public $shownpcs = array();
    
    /**  @var int[]  */
    public $mapareas = array();
    
    /**  @var \RO\Cmd\BlobHands */
    public $hands = null;
    
    /**  @var \RO\Cmd\BlobShow */
    public $usershow = null;
    
    /**  @var int */
    public $lastrealmapid = null;
    
    /**  @var \RO\Cmd\BlobTrace */
    public $trace = null;
    
    /**  @var \RO\Cmd\BlobOption */
    public $option = null;
    
    /**  @var \RO\Cmd\BlobFirstActionDone */
    public $firstaction = null;
    
    /**  @var \RO\Cmd\BlobTitle */
    public $title = null;
    
    /**  @var \RO\Cmd\BlobLine */
    public $lines = null;
    
    /**  @var \RO\Cmd\BlobDojo */
    public $dojo = null;
    
    /**  @var int[]  */
    public $patchversion = array();
    
    /**  @var \RO\Cmd\BlobFood */
    public $food = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.BlobUserData');

      // OPTIONAL FLOAT x = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "x";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL FLOAT y = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "y";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL FLOAT z = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "z";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE cdtime = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "cdtime";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobCDTime';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE shortcuts = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "shortcuts";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobShortcut';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE follower = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "follower";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobFollower';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE stage = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "stage";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobStage';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE questnpc = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "questnpc";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobQuestNpc';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE buffer = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "buffer";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobBuffer';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE menu = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "menu";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobMenu';
      $descriptor->addField($f);

      // OPTIONAL UINT32 clothcolor = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "clothcolor";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE port = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "port";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobPortrait';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE items = 13
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 13;
      $f->name      = "items";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobShopGotItem';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE hair = 14
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 14;
      $f->name      = "hair";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobHair';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE maps = 15
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 15;
      $f->name      = "maps";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobKnownMaps';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE gear = 16
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 16;
      $f->name      = "gear";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobGears';
      $descriptor->addField($f);

      // OPTIONAL UINT32 garden = 17
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 17;
      $f->name      = "garden";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 purify = 18
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 18;
      $f->name      = "purify";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE tips = 19
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 19;
      $f->name      = "tips";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobTips';
      $descriptor->addField($f);

      // OPTIONAL UINT32 savemap = 20
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 20;
      $f->name      = "savemap";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE gms = 21
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 21;
      $f->name      = "gms";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobGMEffects';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE freyja = 22
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 22;
      $f->name      = "freyja";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobFreyja';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE inters = 23
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 23;
      $f->name      = "inters";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobInter';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE laboratory = 24
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 24;
      $f->name      = "laboratory";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobLaboratory';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE scenery = 25
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 25;
      $f->name      = "scenery";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobScenery';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE carrier = 27
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 27;
      $f->name      = "carrier";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobCarrier';
      $descriptor->addField($f);

      // OPTIONAL UINT32 lastmapid = 28
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 28;
      $f->name      = "lastmapid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED UINT32 shownpcs = 29
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 29;
      $f->name      = "shownpcs";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED UINT32 mapareas = 30
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 30;
      $f->name      = "mapareas";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE hands = 31
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 31;
      $f->name      = "hands";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobHands';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE usershow = 32
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 32;
      $f->name      = "usershow";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobShow';
      $descriptor->addField($f);

      // OPTIONAL UINT32 lastrealmapid = 33
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 33;
      $f->name      = "lastrealmapid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE trace = 34
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 34;
      $f->name      = "trace";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobTrace';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE option = 35
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 35;
      $f->name      = "option";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobOption';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE firstaction = 36
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 36;
      $f->name      = "firstaction";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobFirstActionDone';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE title = 37
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 37;
      $f->name      = "title";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobTitle';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE lines = 38
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 38;
      $f->name      = "lines";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobLine';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE dojo = 39
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 39;
      $f->name      = "dojo";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobDojo';
      $descriptor->addField($f);

      // REPEATED UINT32 patchversion = 40
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 40;
      $f->name      = "patchversion";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE food = 41
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 41;
      $f->name      = "food";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobFood';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <x> has a value
     *
     * @return boolean
     */
    public function hasX(){
      return $this->_has(1);
    }
    
    /**
     * Clear <x> value
     *
     * @return \RO\Cmd\BlobUserData
     */
    public function clearX(){
      return $this->_clear(1);
    }
    
    /**
     * Get <x> value
     *
     * @return float
     */
    public function getX(){
      return $this->_get(1);
    }
    
    /**
     * Set <x> value
     *
     * @param float $value
     * @return \RO\Cmd\BlobUserData
     */
    public function setX( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <y> has a value
     *
     * @return boolean
     */
    public function hasY(){
      return $this->_has(2);
    }
    
    /**
     * Clear <y> value
     *
     * @return \RO\Cmd\BlobUserData
     */
    public function clearY(){
      return $this->_clear(2);
    }
    
    /**
     * Get <y> value
     *
     * @return float
     */
    public function getY(){
      return $this->_get(2);
    }
    
    /**
     * Set <y> value
     *
     * @param float $value
     * @return \RO\Cmd\BlobUserData
     */
    public function setY( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <z> has a value
     *
     * @return boolean
     */
    public function hasZ(){
      return $this->_has(3);
    }
    
    /**
     * Clear <z> value
     *
     * @return \RO\Cmd\BlobUserData
     */
    public function clearZ(){
      return $this->_clear(3);
    }
    
    /**
     * Get <z> value
     *
     * @return float
     */
    public function getZ(){
      return $this->_get(3);
    }
    
    /**
     * Set <z> value
     *
     * @param float $value
     * @return \RO\Cmd\BlobUserData
     */
    public function setZ( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <cdtime> has a value
     *
     * @return boolean
     */
    public function hasCdtime(){
      return $this->_has(4);
    }
    
    /**
     * Clear <cdtime> value
     *
     * @return \RO\Cmd\BlobUserData
     */
    public function clearCdtime(){
      return $this->_clear(4);
    }
    
    /**
     * Get <cdtime> value
     *
     * @return \RO\Cmd\BlobCDTime
     */
    public function getCdtime(){
      return $this->_get(4);
    }
    
    /**
     * Set <cdtime> value
     *
     * @param \RO\Cmd\BlobCDTime $value
     * @return \RO\Cmd\BlobUserData
     */
    public function setCdtime(\RO\Cmd\BlobCDTime $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <shortcuts> has a value
     *
     * @return boolean
     */
    public function hasShortcuts(){
      return $this->_has(5);
    }
    
    /**
     * Clear <shortcuts> value
     *
     * @return \RO\Cmd\BlobUserData
     */
    public function clearShortcuts(){
      return $this->_clear(5);
    }
    
    /**
     * Get <shortcuts> value
     *
     * @return \RO\Cmd\BlobShortcut
     */
    public function getShortcuts(){
      return $this->_get(5);
    }
    
    /**
     * Set <shortcuts> value
     *
     * @param \RO\Cmd\BlobShortcut $value
     * @return \RO\Cmd\BlobUserData
     */
    public function setShortcuts(\RO\Cmd\BlobShortcut $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <follower> has a value
     *
     * @return boolean
     */
    public function hasFollower(){
      return $this->_has(6);
    }
    
    /**
     * Clear <follower> value
     *
     * @return \RO\Cmd\BlobUserData
     */
    public function clearFollower(){
      return $this->_clear(6);
    }
    
    /**
     * Get <follower> value
     *
     * @return \RO\Cmd\BlobFollower
     */
    public function getFollower(){
      return $this->_get(6);
    }
    
    /**
     * Set <follower> value
     *
     * @param \RO\Cmd\BlobFollower $value
     * @return \RO\Cmd\BlobUserData
     */
    public function setFollower(\RO\Cmd\BlobFollower $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <stage> has a value
     *
     * @return boolean
     */
    public function hasStage(){
      return $this->_has(7);
    }
    
    /**
     * Clear <stage> value
     *
     * @return \RO\Cmd\BlobUserData
     */
    public function clearStage(){
      return $this->_clear(7);
    }
    
    /**
     * Get <stage> value
     *
     * @return \RO\Cmd\BlobStage
     */
    public function getStage(){
      return $this->_get(7);
    }
    
    /**
     * Set <stage> value
     *
     * @param \RO\Cmd\BlobStage $value
     * @return \RO\Cmd\BlobUserData
     */
    public function setStage(\RO\Cmd\BlobStage $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <questnpc> has a value
     *
     * @return boolean
     */
    public function hasQuestnpc(){
      return $this->_has(8);
    }
    
    /**
     * Clear <questnpc> value
     *
     * @return \RO\Cmd\BlobUserData
     */
    public function clearQuestnpc(){
      return $this->_clear(8);
    }
    
    /**
     * Get <questnpc> value
     *
     * @return \RO\Cmd\BlobQuestNpc
     */
    public function getQuestnpc(){
      return $this->_get(8);
    }
    
    /**
     * Set <questnpc> value
     *
     * @param \RO\Cmd\BlobQuestNpc $value
     * @return \RO\Cmd\BlobUserData
     */
    public function setQuestnpc(\RO\Cmd\BlobQuestNpc $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <buffer> has a value
     *
     * @return boolean
     */
    public function hasBuffer(){
      return $this->_has(9);
    }
    
    /**
     * Clear <buffer> value
     *
     * @return \RO\Cmd\BlobUserData
     */
    public function clearBuffer(){
      return $this->_clear(9);
    }
    
    /**
     * Get <buffer> value
     *
     * @return \RO\Cmd\BlobBuffer
     */
    public function getBuffer(){
      return $this->_get(9);
    }
    
    /**
     * Set <buffer> value
     *
     * @param \RO\Cmd\BlobBuffer $value
     * @return \RO\Cmd\BlobUserData
     */
    public function setBuffer(\RO\Cmd\BlobBuffer $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <menu> has a value
     *
     * @return boolean
     */
    public function hasMenu(){
      return $this->_has(10);
    }
    
    /**
     * Clear <menu> value
     *
     * @return \RO\Cmd\BlobUserData
     */
    public function clearMenu(){
      return $this->_clear(10);
    }
    
    /**
     * Get <menu> value
     *
     * @return \RO\Cmd\BlobMenu
     */
    public function getMenu(){
      return $this->_get(10);
    }
    
    /**
     * Set <menu> value
     *
     * @param \RO\Cmd\BlobMenu $value
     * @return \RO\Cmd\BlobUserData
     */
    public function setMenu(\RO\Cmd\BlobMenu $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <clothcolor> has a value
     *
     * @return boolean
     */
    public function hasClothcolor(){
      return $this->_has(11);
    }
    
    /**
     * Clear <clothcolor> value
     *
     * @return \RO\Cmd\BlobUserData
     */
    public function clearClothcolor(){
      return $this->_clear(11);
    }
    
    /**
     * Get <clothcolor> value
     *
     * @return int
     */
    public function getClothcolor(){
      return $this->_get(11);
    }
    
    /**
     * Set <clothcolor> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobUserData
     */
    public function setClothcolor( $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <port> has a value
     *
     * @return boolean
     */
    public function hasPort(){
      return $this->_has(12);
    }
    
    /**
     * Clear <port> value
     *
     * @return \RO\Cmd\BlobUserData
     */
    public function clearPort(){
      return $this->_clear(12);
    }
    
    /**
     * Get <port> value
     *
     * @return \RO\Cmd\BlobPortrait
     */
    public function getPort(){
      return $this->_get(12);
    }
    
    /**
     * Set <port> value
     *
     * @param \RO\Cmd\BlobPortrait $value
     * @return \RO\Cmd\BlobUserData
     */
    public function setPort(\RO\Cmd\BlobPortrait $value){
      return $this->_set(12, $value);
    }
    
    /**
     * Check if <items> has a value
     *
     * @return boolean
     */
    public function hasItems(){
      return $this->_has(13);
    }
    
    /**
     * Clear <items> value
     *
     * @return \RO\Cmd\BlobUserData
     */
    public function clearItems(){
      return $this->_clear(13);
    }
    
    /**
     * Get <items> value
     *
     * @return \RO\Cmd\BlobShopGotItem
     */
    public function getItems(){
      return $this->_get(13);
    }
    
    /**
     * Set <items> value
     *
     * @param \RO\Cmd\BlobShopGotItem $value
     * @return \RO\Cmd\BlobUserData
     */
    public function setItems(\RO\Cmd\BlobShopGotItem $value){
      return $this->_set(13, $value);
    }
    
    /**
     * Check if <hair> has a value
     *
     * @return boolean
     */
    public function hasHair(){
      return $this->_has(14);
    }
    
    /**
     * Clear <hair> value
     *
     * @return \RO\Cmd\BlobUserData
     */
    public function clearHair(){
      return $this->_clear(14);
    }
    
    /**
     * Get <hair> value
     *
     * @return \RO\Cmd\BlobHair
     */
    public function getHair(){
      return $this->_get(14);
    }
    
    /**
     * Set <hair> value
     *
     * @param \RO\Cmd\BlobHair $value
     * @return \RO\Cmd\BlobUserData
     */
    public function setHair(\RO\Cmd\BlobHair $value){
      return $this->_set(14, $value);
    }
    
    /**
     * Check if <maps> has a value
     *
     * @return boolean
     */
    public function hasMaps(){
      return $this->_has(15);
    }
    
    /**
     * Clear <maps> value
     *
     * @return \RO\Cmd\BlobUserData
     */
    public function clearMaps(){
      return $this->_clear(15);
    }
    
    /**
     * Get <maps> value
     *
     * @return \RO\Cmd\BlobKnownMaps
     */
    public function getMaps(){
      return $this->_get(15);
    }
    
    /**
     * Set <maps> value
     *
     * @param \RO\Cmd\BlobKnownMaps $value
     * @return \RO\Cmd\BlobUserData
     */
    public function setMaps(\RO\Cmd\BlobKnownMaps $value){
      return $this->_set(15, $value);
    }
    
    /**
     * Check if <gear> has a value
     *
     * @return boolean
     */
    public function hasGear(){
      return $this->_has(16);
    }
    
    /**
     * Clear <gear> value
     *
     * @return \RO\Cmd\BlobUserData
     */
    public function clearGear(){
      return $this->_clear(16);
    }
    
    /**
     * Get <gear> value
     *
     * @return \RO\Cmd\BlobGears
     */
    public function getGear(){
      return $this->_get(16);
    }
    
    /**
     * Set <gear> value
     *
     * @param \RO\Cmd\BlobGears $value
     * @return \RO\Cmd\BlobUserData
     */
    public function setGear(\RO\Cmd\BlobGears $value){
      return $this->_set(16, $value);
    }
    
    /**
     * Check if <garden> has a value
     *
     * @return boolean
     */
    public function hasGarden(){
      return $this->_has(17);
    }
    
    /**
     * Clear <garden> value
     *
     * @return \RO\Cmd\BlobUserData
     */
    public function clearGarden(){
      return $this->_clear(17);
    }
    
    /**
     * Get <garden> value
     *
     * @return int
     */
    public function getGarden(){
      return $this->_get(17);
    }
    
    /**
     * Set <garden> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobUserData
     */
    public function setGarden( $value){
      return $this->_set(17, $value);
    }
    
    /**
     * Check if <purify> has a value
     *
     * @return boolean
     */
    public function hasPurify(){
      return $this->_has(18);
    }
    
    /**
     * Clear <purify> value
     *
     * @return \RO\Cmd\BlobUserData
     */
    public function clearPurify(){
      return $this->_clear(18);
    }
    
    /**
     * Get <purify> value
     *
     * @return int
     */
    public function getPurify(){
      return $this->_get(18);
    }
    
    /**
     * Set <purify> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobUserData
     */
    public function setPurify( $value){
      return $this->_set(18, $value);
    }
    
    /**
     * Check if <tips> has a value
     *
     * @return boolean
     */
    public function hasTips(){
      return $this->_has(19);
    }
    
    /**
     * Clear <tips> value
     *
     * @return \RO\Cmd\BlobUserData
     */
    public function clearTips(){
      return $this->_clear(19);
    }
    
    /**
     * Get <tips> value
     *
     * @return \RO\Cmd\BlobTips
     */
    public function getTips(){
      return $this->_get(19);
    }
    
    /**
     * Set <tips> value
     *
     * @param \RO\Cmd\BlobTips $value
     * @return \RO\Cmd\BlobUserData
     */
    public function setTips(\RO\Cmd\BlobTips $value){
      return $this->_set(19, $value);
    }
    
    /**
     * Check if <savemap> has a value
     *
     * @return boolean
     */
    public function hasSavemap(){
      return $this->_has(20);
    }
    
    /**
     * Clear <savemap> value
     *
     * @return \RO\Cmd\BlobUserData
     */
    public function clearSavemap(){
      return $this->_clear(20);
    }
    
    /**
     * Get <savemap> value
     *
     * @return int
     */
    public function getSavemap(){
      return $this->_get(20);
    }
    
    /**
     * Set <savemap> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobUserData
     */
    public function setSavemap( $value){
      return $this->_set(20, $value);
    }
    
    /**
     * Check if <gms> has a value
     *
     * @return boolean
     */
    public function hasGms(){
      return $this->_has(21);
    }
    
    /**
     * Clear <gms> value
     *
     * @return \RO\Cmd\BlobUserData
     */
    public function clearGms(){
      return $this->_clear(21);
    }
    
    /**
     * Get <gms> value
     *
     * @return \RO\Cmd\BlobGMEffects
     */
    public function getGms(){
      return $this->_get(21);
    }
    
    /**
     * Set <gms> value
     *
     * @param \RO\Cmd\BlobGMEffects $value
     * @return \RO\Cmd\BlobUserData
     */
    public function setGms(\RO\Cmd\BlobGMEffects $value){
      return $this->_set(21, $value);
    }
    
    /**
     * Check if <freyja> has a value
     *
     * @return boolean
     */
    public function hasFreyja(){
      return $this->_has(22);
    }
    
    /**
     * Clear <freyja> value
     *
     * @return \RO\Cmd\BlobUserData
     */
    public function clearFreyja(){
      return $this->_clear(22);
    }
    
    /**
     * Get <freyja> value
     *
     * @return \RO\Cmd\BlobFreyja
     */
    public function getFreyja(){
      return $this->_get(22);
    }
    
    /**
     * Set <freyja> value
     *
     * @param \RO\Cmd\BlobFreyja $value
     * @return \RO\Cmd\BlobUserData
     */
    public function setFreyja(\RO\Cmd\BlobFreyja $value){
      return $this->_set(22, $value);
    }
    
    /**
     * Check if <inters> has a value
     *
     * @return boolean
     */
    public function hasInters(){
      return $this->_has(23);
    }
    
    /**
     * Clear <inters> value
     *
     * @return \RO\Cmd\BlobUserData
     */
    public function clearInters(){
      return $this->_clear(23);
    }
    
    /**
     * Get <inters> value
     *
     * @return \RO\Cmd\BlobInter
     */
    public function getInters(){
      return $this->_get(23);
    }
    
    /**
     * Set <inters> value
     *
     * @param \RO\Cmd\BlobInter $value
     * @return \RO\Cmd\BlobUserData
     */
    public function setInters(\RO\Cmd\BlobInter $value){
      return $this->_set(23, $value);
    }
    
    /**
     * Check if <laboratory> has a value
     *
     * @return boolean
     */
    public function hasLaboratory(){
      return $this->_has(24);
    }
    
    /**
     * Clear <laboratory> value
     *
     * @return \RO\Cmd\BlobUserData
     */
    public function clearLaboratory(){
      return $this->_clear(24);
    }
    
    /**
     * Get <laboratory> value
     *
     * @return \RO\Cmd\BlobLaboratory
     */
    public function getLaboratory(){
      return $this->_get(24);
    }
    
    /**
     * Set <laboratory> value
     *
     * @param \RO\Cmd\BlobLaboratory $value
     * @return \RO\Cmd\BlobUserData
     */
    public function setLaboratory(\RO\Cmd\BlobLaboratory $value){
      return $this->_set(24, $value);
    }
    
    /**
     * Check if <scenery> has a value
     *
     * @return boolean
     */
    public function hasScenery(){
      return $this->_has(25);
    }
    
    /**
     * Clear <scenery> value
     *
     * @return \RO\Cmd\BlobUserData
     */
    public function clearScenery(){
      return $this->_clear(25);
    }
    
    /**
     * Get <scenery> value
     *
     * @return \RO\Cmd\BlobScenery
     */
    public function getScenery(){
      return $this->_get(25);
    }
    
    /**
     * Set <scenery> value
     *
     * @param \RO\Cmd\BlobScenery $value
     * @return \RO\Cmd\BlobUserData
     */
    public function setScenery(\RO\Cmd\BlobScenery $value){
      return $this->_set(25, $value);
    }
    
    /**
     * Check if <carrier> has a value
     *
     * @return boolean
     */
    public function hasCarrier(){
      return $this->_has(27);
    }
    
    /**
     * Clear <carrier> value
     *
     * @return \RO\Cmd\BlobUserData
     */
    public function clearCarrier(){
      return $this->_clear(27);
    }
    
    /**
     * Get <carrier> value
     *
     * @return \RO\Cmd\BlobCarrier
     */
    public function getCarrier(){
      return $this->_get(27);
    }
    
    /**
     * Set <carrier> value
     *
     * @param \RO\Cmd\BlobCarrier $value
     * @return \RO\Cmd\BlobUserData
     */
    public function setCarrier(\RO\Cmd\BlobCarrier $value){
      return $this->_set(27, $value);
    }
    
    /**
     * Check if <lastmapid> has a value
     *
     * @return boolean
     */
    public function hasLastmapid(){
      return $this->_has(28);
    }
    
    /**
     * Clear <lastmapid> value
     *
     * @return \RO\Cmd\BlobUserData
     */
    public function clearLastmapid(){
      return $this->_clear(28);
    }
    
    /**
     * Get <lastmapid> value
     *
     * @return int
     */
    public function getLastmapid(){
      return $this->_get(28);
    }
    
    /**
     * Set <lastmapid> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobUserData
     */
    public function setLastmapid( $value){
      return $this->_set(28, $value);
    }
    
    /**
     * Check if <shownpcs> has a value
     *
     * @return boolean
     */
    public function hasShownpcs(){
      return $this->_has(29);
    }
    
    /**
     * Clear <shownpcs> value
     *
     * @return \RO\Cmd\BlobUserData
     */
    public function clearShownpcs(){
      return $this->_clear(29);
    }
    
    /**
     * Get <shownpcs> value
     *
     * @param int $idx
     * @return int
     */
    public function getShownpcs($idx = NULL){
      return $this->_get(29, $idx);
    }
    
    /**
     * Set <shownpcs> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobUserData
     */
    public function setShownpcs( $value, $idx = NULL){
      return $this->_set(29, $value, $idx);
    }
    
    /**
     * Get all elements of <shownpcs>
     *
     * @return int[]
     */
    public function getShownpcsList(){
     return $this->_get(29);
    }
    
    /**
     * Add a new element to <shownpcs>
     *
     * @param int $value
     * @return \RO\Cmd\BlobUserData
     */
    public function addShownpcs( $value){
     return $this->_add(29, $value);
    }
    
    /**
     * Check if <mapareas> has a value
     *
     * @return boolean
     */
    public function hasMapareas(){
      return $this->_has(30);
    }
    
    /**
     * Clear <mapareas> value
     *
     * @return \RO\Cmd\BlobUserData
     */
    public function clearMapareas(){
      return $this->_clear(30);
    }
    
    /**
     * Get <mapareas> value
     *
     * @param int $idx
     * @return int
     */
    public function getMapareas($idx = NULL){
      return $this->_get(30, $idx);
    }
    
    /**
     * Set <mapareas> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobUserData
     */
    public function setMapareas( $value, $idx = NULL){
      return $this->_set(30, $value, $idx);
    }
    
    /**
     * Get all elements of <mapareas>
     *
     * @return int[]
     */
    public function getMapareasList(){
     return $this->_get(30);
    }
    
    /**
     * Add a new element to <mapareas>
     *
     * @param int $value
     * @return \RO\Cmd\BlobUserData
     */
    public function addMapareas( $value){
     return $this->_add(30, $value);
    }
    
    /**
     * Check if <hands> has a value
     *
     * @return boolean
     */
    public function hasHands(){
      return $this->_has(31);
    }
    
    /**
     * Clear <hands> value
     *
     * @return \RO\Cmd\BlobUserData
     */
    public function clearHands(){
      return $this->_clear(31);
    }
    
    /**
     * Get <hands> value
     *
     * @return \RO\Cmd\BlobHands
     */
    public function getHands(){
      return $this->_get(31);
    }
    
    /**
     * Set <hands> value
     *
     * @param \RO\Cmd\BlobHands $value
     * @return \RO\Cmd\BlobUserData
     */
    public function setHands(\RO\Cmd\BlobHands $value){
      return $this->_set(31, $value);
    }
    
    /**
     * Check if <usershow> has a value
     *
     * @return boolean
     */
    public function hasUsershow(){
      return $this->_has(32);
    }
    
    /**
     * Clear <usershow> value
     *
     * @return \RO\Cmd\BlobUserData
     */
    public function clearUsershow(){
      return $this->_clear(32);
    }
    
    /**
     * Get <usershow> value
     *
     * @return \RO\Cmd\BlobShow
     */
    public function getUsershow(){
      return $this->_get(32);
    }
    
    /**
     * Set <usershow> value
     *
     * @param \RO\Cmd\BlobShow $value
     * @return \RO\Cmd\BlobUserData
     */
    public function setUsershow(\RO\Cmd\BlobShow $value){
      return $this->_set(32, $value);
    }
    
    /**
     * Check if <lastrealmapid> has a value
     *
     * @return boolean
     */
    public function hasLastrealmapid(){
      return $this->_has(33);
    }
    
    /**
     * Clear <lastrealmapid> value
     *
     * @return \RO\Cmd\BlobUserData
     */
    public function clearLastrealmapid(){
      return $this->_clear(33);
    }
    
    /**
     * Get <lastrealmapid> value
     *
     * @return int
     */
    public function getLastrealmapid(){
      return $this->_get(33);
    }
    
    /**
     * Set <lastrealmapid> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobUserData
     */
    public function setLastrealmapid( $value){
      return $this->_set(33, $value);
    }
    
    /**
     * Check if <trace> has a value
     *
     * @return boolean
     */
    public function hasTrace(){
      return $this->_has(34);
    }
    
    /**
     * Clear <trace> value
     *
     * @return \RO\Cmd\BlobUserData
     */
    public function clearTrace(){
      return $this->_clear(34);
    }
    
    /**
     * Get <trace> value
     *
     * @return \RO\Cmd\BlobTrace
     */
    public function getTrace(){
      return $this->_get(34);
    }
    
    /**
     * Set <trace> value
     *
     * @param \RO\Cmd\BlobTrace $value
     * @return \RO\Cmd\BlobUserData
     */
    public function setTrace(\RO\Cmd\BlobTrace $value){
      return $this->_set(34, $value);
    }
    
    /**
     * Check if <option> has a value
     *
     * @return boolean
     */
    public function hasOption(){
      return $this->_has(35);
    }
    
    /**
     * Clear <option> value
     *
     * @return \RO\Cmd\BlobUserData
     */
    public function clearOption(){
      return $this->_clear(35);
    }
    
    /**
     * Get <option> value
     *
     * @return \RO\Cmd\BlobOption
     */
    public function getOption(){
      return $this->_get(35);
    }
    
    /**
     * Set <option> value
     *
     * @param \RO\Cmd\BlobOption $value
     * @return \RO\Cmd\BlobUserData
     */
    public function setOption(\RO\Cmd\BlobOption $value){
      return $this->_set(35, $value);
    }
    
    /**
     * Check if <firstaction> has a value
     *
     * @return boolean
     */
    public function hasFirstaction(){
      return $this->_has(36);
    }
    
    /**
     * Clear <firstaction> value
     *
     * @return \RO\Cmd\BlobUserData
     */
    public function clearFirstaction(){
      return $this->_clear(36);
    }
    
    /**
     * Get <firstaction> value
     *
     * @return \RO\Cmd\BlobFirstActionDone
     */
    public function getFirstaction(){
      return $this->_get(36);
    }
    
    /**
     * Set <firstaction> value
     *
     * @param \RO\Cmd\BlobFirstActionDone $value
     * @return \RO\Cmd\BlobUserData
     */
    public function setFirstaction(\RO\Cmd\BlobFirstActionDone $value){
      return $this->_set(36, $value);
    }
    
    /**
     * Check if <title> has a value
     *
     * @return boolean
     */
    public function hasTitle(){
      return $this->_has(37);
    }
    
    /**
     * Clear <title> value
     *
     * @return \RO\Cmd\BlobUserData
     */
    public function clearTitle(){
      return $this->_clear(37);
    }
    
    /**
     * Get <title> value
     *
     * @return \RO\Cmd\BlobTitle
     */
    public function getTitle(){
      return $this->_get(37);
    }
    
    /**
     * Set <title> value
     *
     * @param \RO\Cmd\BlobTitle $value
     * @return \RO\Cmd\BlobUserData
     */
    public function setTitle(\RO\Cmd\BlobTitle $value){
      return $this->_set(37, $value);
    }
    
    /**
     * Check if <lines> has a value
     *
     * @return boolean
     */
    public function hasLines(){
      return $this->_has(38);
    }
    
    /**
     * Clear <lines> value
     *
     * @return \RO\Cmd\BlobUserData
     */
    public function clearLines(){
      return $this->_clear(38);
    }
    
    /**
     * Get <lines> value
     *
     * @return \RO\Cmd\BlobLine
     */
    public function getLines(){
      return $this->_get(38);
    }
    
    /**
     * Set <lines> value
     *
     * @param \RO\Cmd\BlobLine $value
     * @return \RO\Cmd\BlobUserData
     */
    public function setLines(\RO\Cmd\BlobLine $value){
      return $this->_set(38, $value);
    }
    
    /**
     * Check if <dojo> has a value
     *
     * @return boolean
     */
    public function hasDojo(){
      return $this->_has(39);
    }
    
    /**
     * Clear <dojo> value
     *
     * @return \RO\Cmd\BlobUserData
     */
    public function clearDojo(){
      return $this->_clear(39);
    }
    
    /**
     * Get <dojo> value
     *
     * @return \RO\Cmd\BlobDojo
     */
    public function getDojo(){
      return $this->_get(39);
    }
    
    /**
     * Set <dojo> value
     *
     * @param \RO\Cmd\BlobDojo $value
     * @return \RO\Cmd\BlobUserData
     */
    public function setDojo(\RO\Cmd\BlobDojo $value){
      return $this->_set(39, $value);
    }
    
    /**
     * Check if <patchversion> has a value
     *
     * @return boolean
     */
    public function hasPatchversion(){
      return $this->_has(40);
    }
    
    /**
     * Clear <patchversion> value
     *
     * @return \RO\Cmd\BlobUserData
     */
    public function clearPatchversion(){
      return $this->_clear(40);
    }
    
    /**
     * Get <patchversion> value
     *
     * @param int $idx
     * @return int
     */
    public function getPatchversion($idx = NULL){
      return $this->_get(40, $idx);
    }
    
    /**
     * Set <patchversion> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobUserData
     */
    public function setPatchversion( $value, $idx = NULL){
      return $this->_set(40, $value, $idx);
    }
    
    /**
     * Get all elements of <patchversion>
     *
     * @return int[]
     */
    public function getPatchversionList(){
     return $this->_get(40);
    }
    
    /**
     * Add a new element to <patchversion>
     *
     * @param int $value
     * @return \RO\Cmd\BlobUserData
     */
    public function addPatchversion( $value){
     return $this->_add(40, $value);
    }
    
    /**
     * Check if <food> has a value
     *
     * @return boolean
     */
    public function hasFood(){
      return $this->_has(41);
    }
    
    /**
     * Clear <food> value
     *
     * @return \RO\Cmd\BlobUserData
     */
    public function clearFood(){
      return $this->_clear(41);
    }
    
    /**
     * Get <food> value
     *
     * @return \RO\Cmd\BlobFood
     */
    public function getFood(){
      return $this->_get(41);
    }
    
    /**
     * Set <food> value
     *
     * @param \RO\Cmd\BlobFood $value
     * @return \RO\Cmd\BlobUserData
     */
    public function setFood(\RO\Cmd\BlobFood $value){
      return $this->_set(41, $value);
    }
  }
}

