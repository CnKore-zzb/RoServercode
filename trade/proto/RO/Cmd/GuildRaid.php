<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: RecordCmd.proto

namespace RO\Cmd {

  class GuildRaid extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $npcid = null;
    
    /**  @var int - \RO\Cmd\EGuildGateState */
    public $state = null;
    
    /**  @var int[]  */
    public $killedboss = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.GuildRaid');

      // OPTIONAL UINT64 npcid = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "npcid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM state = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\EGuildGateState';
      $descriptor->addField($f);

      // REPEATED UINT32 killedboss = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "killedboss";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <npcid> has a value
     *
     * @return boolean
     */
    public function hasNpcid(){
      return $this->_has(1);
    }
    
    /**
     * Clear <npcid> value
     *
     * @return \RO\Cmd\GuildRaid
     */
    public function clearNpcid(){
      return $this->_clear(1);
    }
    
    /**
     * Get <npcid> value
     *
     * @return int
     */
    public function getNpcid(){
      return $this->_get(1);
    }
    
    /**
     * Set <npcid> value
     *
     * @param int $value
     * @return \RO\Cmd\GuildRaid
     */
    public function setNpcid( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(2);
    }
    
    /**
     * Clear <state> value
     *
     * @return \RO\Cmd\GuildRaid
     */
    public function clearState(){
      return $this->_clear(2);
    }
    
    /**
     * Get <state> value
     *
     * @return int - \RO\Cmd\EGuildGateState
     */
    public function getState(){
      return $this->_get(2);
    }
    
    /**
     * Set <state> value
     *
     * @param int - \RO\Cmd\EGuildGateState $value
     * @return \RO\Cmd\GuildRaid
     */
    public function setState( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <killedboss> has a value
     *
     * @return boolean
     */
    public function hasKilledboss(){
      return $this->_has(3);
    }
    
    /**
     * Clear <killedboss> value
     *
     * @return \RO\Cmd\GuildRaid
     */
    public function clearKilledboss(){
      return $this->_clear(3);
    }
    
    /**
     * Get <killedboss> value
     *
     * @param int $idx
     * @return int
     */
    public function getKilledboss($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <killedboss> value
     *
     * @param int $value
     * @return \RO\Cmd\GuildRaid
     */
    public function setKilledboss( $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <killedboss>
     *
     * @return int[]
     */
    public function getKilledbossList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <killedboss>
     *
     * @param int $value
     * @return \RO\Cmd\GuildRaid
     */
    public function addKilledboss( $value){
     return $this->_add(3, $value);
    }
  }
}

