<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: SceneItem.proto

namespace RO\Cmd {

  class EggEquip extends \DrSlump\Protobuf\Message {

    /**  @var \RO\Cmd\ItemInfo */
    public $base = null;
    
    /**  @var \RO\Cmd\EquipData */
    public $data = null;
    
    /**  @var \RO\Cmd\CardData[]  */
    public $card = array();
    
    /**  @var \RO\Cmd\EnchantData */
    public $enchant = null;
    
    /**  @var \RO\Cmd\EnchantData */
    public $previewenchant = null;
    
    /**  @var \RO\Cmd\RefineData */
    public $refine = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.EggEquip');

      // OPTIONAL MESSAGE base = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "base";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\ItemInfo';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE data = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "data";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\EquipData';
      $descriptor->addField($f);

      // REPEATED MESSAGE card = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "card";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\CardData';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE enchant = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "enchant";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\EnchantData';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE previewenchant = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "previewenchant";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\EnchantData';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE refine = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "refine";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\RefineData';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <base> has a value
     *
     * @return boolean
     */
    public function hasBase(){
      return $this->_has(1);
    }
    
    /**
     * Clear <base> value
     *
     * @return \RO\Cmd\EggEquip
     */
    public function clearBase(){
      return $this->_clear(1);
    }
    
    /**
     * Get <base> value
     *
     * @return \RO\Cmd\ItemInfo
     */
    public function getBase(){
      return $this->_get(1);
    }
    
    /**
     * Set <base> value
     *
     * @param \RO\Cmd\ItemInfo $value
     * @return \RO\Cmd\EggEquip
     */
    public function setBase(\RO\Cmd\ItemInfo $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <data> has a value
     *
     * @return boolean
     */
    public function hasData(){
      return $this->_has(2);
    }
    
    /**
     * Clear <data> value
     *
     * @return \RO\Cmd\EggEquip
     */
    public function clearData(){
      return $this->_clear(2);
    }
    
    /**
     * Get <data> value
     *
     * @return \RO\Cmd\EquipData
     */
    public function getData(){
      return $this->_get(2);
    }
    
    /**
     * Set <data> value
     *
     * @param \RO\Cmd\EquipData $value
     * @return \RO\Cmd\EggEquip
     */
    public function setData(\RO\Cmd\EquipData $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <card> has a value
     *
     * @return boolean
     */
    public function hasCard(){
      return $this->_has(3);
    }
    
    /**
     * Clear <card> value
     *
     * @return \RO\Cmd\EggEquip
     */
    public function clearCard(){
      return $this->_clear(3);
    }
    
    /**
     * Get <card> value
     *
     * @param int $idx
     * @return \RO\Cmd\CardData
     */
    public function getCard($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <card> value
     *
     * @param \RO\Cmd\CardData $value
     * @return \RO\Cmd\EggEquip
     */
    public function setCard(\RO\Cmd\CardData $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <card>
     *
     * @return \RO\Cmd\CardData[]
     */
    public function getCardList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <card>
     *
     * @param \RO\Cmd\CardData $value
     * @return \RO\Cmd\EggEquip
     */
    public function addCard(\RO\Cmd\CardData $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <enchant> has a value
     *
     * @return boolean
     */
    public function hasEnchant(){
      return $this->_has(4);
    }
    
    /**
     * Clear <enchant> value
     *
     * @return \RO\Cmd\EggEquip
     */
    public function clearEnchant(){
      return $this->_clear(4);
    }
    
    /**
     * Get <enchant> value
     *
     * @return \RO\Cmd\EnchantData
     */
    public function getEnchant(){
      return $this->_get(4);
    }
    
    /**
     * Set <enchant> value
     *
     * @param \RO\Cmd\EnchantData $value
     * @return \RO\Cmd\EggEquip
     */
    public function setEnchant(\RO\Cmd\EnchantData $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <previewenchant> has a value
     *
     * @return boolean
     */
    public function hasPreviewenchant(){
      return $this->_has(5);
    }
    
    /**
     * Clear <previewenchant> value
     *
     * @return \RO\Cmd\EggEquip
     */
    public function clearPreviewenchant(){
      return $this->_clear(5);
    }
    
    /**
     * Get <previewenchant> value
     *
     * @return \RO\Cmd\EnchantData
     */
    public function getPreviewenchant(){
      return $this->_get(5);
    }
    
    /**
     * Set <previewenchant> value
     *
     * @param \RO\Cmd\EnchantData $value
     * @return \RO\Cmd\EggEquip
     */
    public function setPreviewenchant(\RO\Cmd\EnchantData $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <refine> has a value
     *
     * @return boolean
     */
    public function hasRefine(){
      return $this->_has(7);
    }
    
    /**
     * Clear <refine> value
     *
     * @return \RO\Cmd\EggEquip
     */
    public function clearRefine(){
      return $this->_clear(7);
    }
    
    /**
     * Get <refine> value
     *
     * @return \RO\Cmd\RefineData
     */
    public function getRefine(){
      return $this->_get(7);
    }
    
    /**
     * Set <refine> value
     *
     * @param \RO\Cmd\RefineData $value
     * @return \RO\Cmd\EggEquip
     */
    public function setRefine(\RO\Cmd\RefineData $value){
      return $this->_set(7, $value);
    }
  }
}

