<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: ActivityEvent.proto

namespace RO\Cmd {

  class AEMap extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $id = 0;
    
    /**  @var string */
    public $desc = null;
    
    /**  @var \RO\Cmd\AEMapPos[]  */
    public $coord = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.AEMap');

      // OPTIONAL UINT32 id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL STRING desc = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "desc";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE coord = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "coord";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\AEMapPos';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \RO\Cmd\AEMap
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param int $value
     * @return \RO\Cmd\AEMap
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <desc> has a value
     *
     * @return boolean
     */
    public function hasDesc(){
      return $this->_has(2);
    }
    
    /**
     * Clear <desc> value
     *
     * @return \RO\Cmd\AEMap
     */
    public function clearDesc(){
      return $this->_clear(2);
    }
    
    /**
     * Get <desc> value
     *
     * @return string
     */
    public function getDesc(){
      return $this->_get(2);
    }
    
    /**
     * Set <desc> value
     *
     * @param string $value
     * @return \RO\Cmd\AEMap
     */
    public function setDesc( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <coord> has a value
     *
     * @return boolean
     */
    public function hasCoord(){
      return $this->_has(3);
    }
    
    /**
     * Clear <coord> value
     *
     * @return \RO\Cmd\AEMap
     */
    public function clearCoord(){
      return $this->_clear(3);
    }
    
    /**
     * Get <coord> value
     *
     * @param int $idx
     * @return \RO\Cmd\AEMapPos
     */
    public function getCoord($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <coord> value
     *
     * @param \RO\Cmd\AEMapPos $value
     * @return \RO\Cmd\AEMap
     */
    public function setCoord(\RO\Cmd\AEMapPos $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <coord>
     *
     * @return \RO\Cmd\AEMapPos[]
     */
    public function getCoordList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <coord>
     *
     * @param \RO\Cmd\AEMapPos $value
     * @return \RO\Cmd\AEMap
     */
    public function addCoord(\RO\Cmd\AEMapPos $value){
     return $this->_add(3, $value);
    }
  }
}

