<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: AchieveCmd.proto

namespace RO\Cmd {

  class UserResume extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $createtime = 0;
    
    /**  @var int */
    public $logintime = 0;
    
    /**  @var int */
    public $bepro_1_time = 0;
    
    /**  @var int */
    public $bepro_2_time = 0;
    
    /**  @var int */
    public $bepro_3_time = 0;
    
    /**  @var int */
    public $walk_distance = 0;
    
    /**  @var string */
    public $max_team = null;
    
    /**  @var string */
    public $max_hand = null;
    
    /**  @var string */
    public $max_wheel = null;
    
    /**  @var string */
    public $max_chat = null;
    
    /**  @var string[]  */
    public $max_teams = array();
    
    /**  @var string[]  */
    public $max_hands = array();
    
    /**  @var string[]  */
    public $max_wheels = array();
    
    /**  @var string[]  */
    public $max_chats = array();
    
    /**  @var string[]  */
    public $max_music = array();
    
    /**  @var string[]  */
    public $max_save = array();
    
    /**  @var string[]  */
    public $max_besave = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.UserResume');

      // OPTIONAL UINT32 createtime = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "createtime";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 logintime = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "logintime";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 bepro_1_time = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "bepro_1_time";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 bepro_2_time = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "bepro_2_time";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 bepro_3_time = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "bepro_3_time";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT64 walk_distance = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "walk_distance";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL STRING max_team = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "max_team";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING max_hand = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "max_hand";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING max_wheel = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "max_wheel";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING max_chat = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "max_chat";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED STRING max_teams = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "max_teams";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED STRING max_hands = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "max_hands";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED STRING max_wheels = 13
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 13;
      $f->name      = "max_wheels";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED STRING max_chats = 14
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 14;
      $f->name      = "max_chats";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED STRING max_music = 15
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 15;
      $f->name      = "max_music";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED STRING max_save = 16
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 16;
      $f->name      = "max_save";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED STRING max_besave = 17
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 17;
      $f->name      = "max_besave";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <createtime> has a value
     *
     * @return boolean
     */
    public function hasCreatetime(){
      return $this->_has(1);
    }
    
    /**
     * Clear <createtime> value
     *
     * @return \RO\Cmd\UserResume
     */
    public function clearCreatetime(){
      return $this->_clear(1);
    }
    
    /**
     * Get <createtime> value
     *
     * @return int
     */
    public function getCreatetime(){
      return $this->_get(1);
    }
    
    /**
     * Set <createtime> value
     *
     * @param int $value
     * @return \RO\Cmd\UserResume
     */
    public function setCreatetime( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <logintime> has a value
     *
     * @return boolean
     */
    public function hasLogintime(){
      return $this->_has(2);
    }
    
    /**
     * Clear <logintime> value
     *
     * @return \RO\Cmd\UserResume
     */
    public function clearLogintime(){
      return $this->_clear(2);
    }
    
    /**
     * Get <logintime> value
     *
     * @return int
     */
    public function getLogintime(){
      return $this->_get(2);
    }
    
    /**
     * Set <logintime> value
     *
     * @param int $value
     * @return \RO\Cmd\UserResume
     */
    public function setLogintime( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <bepro_1_time> has a value
     *
     * @return boolean
     */
    public function hasBepro1Time(){
      return $this->_has(3);
    }
    
    /**
     * Clear <bepro_1_time> value
     *
     * @return \RO\Cmd\UserResume
     */
    public function clearBepro1Time(){
      return $this->_clear(3);
    }
    
    /**
     * Get <bepro_1_time> value
     *
     * @return int
     */
    public function getBepro1Time(){
      return $this->_get(3);
    }
    
    /**
     * Set <bepro_1_time> value
     *
     * @param int $value
     * @return \RO\Cmd\UserResume
     */
    public function setBepro1Time( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <bepro_2_time> has a value
     *
     * @return boolean
     */
    public function hasBepro2Time(){
      return $this->_has(4);
    }
    
    /**
     * Clear <bepro_2_time> value
     *
     * @return \RO\Cmd\UserResume
     */
    public function clearBepro2Time(){
      return $this->_clear(4);
    }
    
    /**
     * Get <bepro_2_time> value
     *
     * @return int
     */
    public function getBepro2Time(){
      return $this->_get(4);
    }
    
    /**
     * Set <bepro_2_time> value
     *
     * @param int $value
     * @return \RO\Cmd\UserResume
     */
    public function setBepro2Time( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <bepro_3_time> has a value
     *
     * @return boolean
     */
    public function hasBepro3Time(){
      return $this->_has(5);
    }
    
    /**
     * Clear <bepro_3_time> value
     *
     * @return \RO\Cmd\UserResume
     */
    public function clearBepro3Time(){
      return $this->_clear(5);
    }
    
    /**
     * Get <bepro_3_time> value
     *
     * @return int
     */
    public function getBepro3Time(){
      return $this->_get(5);
    }
    
    /**
     * Set <bepro_3_time> value
     *
     * @param int $value
     * @return \RO\Cmd\UserResume
     */
    public function setBepro3Time( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <walk_distance> has a value
     *
     * @return boolean
     */
    public function hasWalkDistance(){
      return $this->_has(6);
    }
    
    /**
     * Clear <walk_distance> value
     *
     * @return \RO\Cmd\UserResume
     */
    public function clearWalkDistance(){
      return $this->_clear(6);
    }
    
    /**
     * Get <walk_distance> value
     *
     * @return int
     */
    public function getWalkDistance(){
      return $this->_get(6);
    }
    
    /**
     * Set <walk_distance> value
     *
     * @param int $value
     * @return \RO\Cmd\UserResume
     */
    public function setWalkDistance( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <max_team> has a value
     *
     * @return boolean
     */
    public function hasMaxTeam(){
      return $this->_has(7);
    }
    
    /**
     * Clear <max_team> value
     *
     * @return \RO\Cmd\UserResume
     */
    public function clearMaxTeam(){
      return $this->_clear(7);
    }
    
    /**
     * Get <max_team> value
     *
     * @return string
     */
    public function getMaxTeam(){
      return $this->_get(7);
    }
    
    /**
     * Set <max_team> value
     *
     * @param string $value
     * @return \RO\Cmd\UserResume
     */
    public function setMaxTeam( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <max_hand> has a value
     *
     * @return boolean
     */
    public function hasMaxHand(){
      return $this->_has(8);
    }
    
    /**
     * Clear <max_hand> value
     *
     * @return \RO\Cmd\UserResume
     */
    public function clearMaxHand(){
      return $this->_clear(8);
    }
    
    /**
     * Get <max_hand> value
     *
     * @return string
     */
    public function getMaxHand(){
      return $this->_get(8);
    }
    
    /**
     * Set <max_hand> value
     *
     * @param string $value
     * @return \RO\Cmd\UserResume
     */
    public function setMaxHand( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <max_wheel> has a value
     *
     * @return boolean
     */
    public function hasMaxWheel(){
      return $this->_has(9);
    }
    
    /**
     * Clear <max_wheel> value
     *
     * @return \RO\Cmd\UserResume
     */
    public function clearMaxWheel(){
      return $this->_clear(9);
    }
    
    /**
     * Get <max_wheel> value
     *
     * @return string
     */
    public function getMaxWheel(){
      return $this->_get(9);
    }
    
    /**
     * Set <max_wheel> value
     *
     * @param string $value
     * @return \RO\Cmd\UserResume
     */
    public function setMaxWheel( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <max_chat> has a value
     *
     * @return boolean
     */
    public function hasMaxChat(){
      return $this->_has(10);
    }
    
    /**
     * Clear <max_chat> value
     *
     * @return \RO\Cmd\UserResume
     */
    public function clearMaxChat(){
      return $this->_clear(10);
    }
    
    /**
     * Get <max_chat> value
     *
     * @return string
     */
    public function getMaxChat(){
      return $this->_get(10);
    }
    
    /**
     * Set <max_chat> value
     *
     * @param string $value
     * @return \RO\Cmd\UserResume
     */
    public function setMaxChat( $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <max_teams> has a value
     *
     * @return boolean
     */
    public function hasMaxTeams(){
      return $this->_has(11);
    }
    
    /**
     * Clear <max_teams> value
     *
     * @return \RO\Cmd\UserResume
     */
    public function clearMaxTeams(){
      return $this->_clear(11);
    }
    
    /**
     * Get <max_teams> value
     *
     * @param int $idx
     * @return string
     */
    public function getMaxTeams($idx = NULL){
      return $this->_get(11, $idx);
    }
    
    /**
     * Set <max_teams> value
     *
     * @param string $value
     * @return \RO\Cmd\UserResume
     */
    public function setMaxTeams( $value, $idx = NULL){
      return $this->_set(11, $value, $idx);
    }
    
    /**
     * Get all elements of <max_teams>
     *
     * @return string[]
     */
    public function getMaxTeamsList(){
     return $this->_get(11);
    }
    
    /**
     * Add a new element to <max_teams>
     *
     * @param string $value
     * @return \RO\Cmd\UserResume
     */
    public function addMaxTeams( $value){
     return $this->_add(11, $value);
    }
    
    /**
     * Check if <max_hands> has a value
     *
     * @return boolean
     */
    public function hasMaxHands(){
      return $this->_has(12);
    }
    
    /**
     * Clear <max_hands> value
     *
     * @return \RO\Cmd\UserResume
     */
    public function clearMaxHands(){
      return $this->_clear(12);
    }
    
    /**
     * Get <max_hands> value
     *
     * @param int $idx
     * @return string
     */
    public function getMaxHands($idx = NULL){
      return $this->_get(12, $idx);
    }
    
    /**
     * Set <max_hands> value
     *
     * @param string $value
     * @return \RO\Cmd\UserResume
     */
    public function setMaxHands( $value, $idx = NULL){
      return $this->_set(12, $value, $idx);
    }
    
    /**
     * Get all elements of <max_hands>
     *
     * @return string[]
     */
    public function getMaxHandsList(){
     return $this->_get(12);
    }
    
    /**
     * Add a new element to <max_hands>
     *
     * @param string $value
     * @return \RO\Cmd\UserResume
     */
    public function addMaxHands( $value){
     return $this->_add(12, $value);
    }
    
    /**
     * Check if <max_wheels> has a value
     *
     * @return boolean
     */
    public function hasMaxWheels(){
      return $this->_has(13);
    }
    
    /**
     * Clear <max_wheels> value
     *
     * @return \RO\Cmd\UserResume
     */
    public function clearMaxWheels(){
      return $this->_clear(13);
    }
    
    /**
     * Get <max_wheels> value
     *
     * @param int $idx
     * @return string
     */
    public function getMaxWheels($idx = NULL){
      return $this->_get(13, $idx);
    }
    
    /**
     * Set <max_wheels> value
     *
     * @param string $value
     * @return \RO\Cmd\UserResume
     */
    public function setMaxWheels( $value, $idx = NULL){
      return $this->_set(13, $value, $idx);
    }
    
    /**
     * Get all elements of <max_wheels>
     *
     * @return string[]
     */
    public function getMaxWheelsList(){
     return $this->_get(13);
    }
    
    /**
     * Add a new element to <max_wheels>
     *
     * @param string $value
     * @return \RO\Cmd\UserResume
     */
    public function addMaxWheels( $value){
     return $this->_add(13, $value);
    }
    
    /**
     * Check if <max_chats> has a value
     *
     * @return boolean
     */
    public function hasMaxChats(){
      return $this->_has(14);
    }
    
    /**
     * Clear <max_chats> value
     *
     * @return \RO\Cmd\UserResume
     */
    public function clearMaxChats(){
      return $this->_clear(14);
    }
    
    /**
     * Get <max_chats> value
     *
     * @param int $idx
     * @return string
     */
    public function getMaxChats($idx = NULL){
      return $this->_get(14, $idx);
    }
    
    /**
     * Set <max_chats> value
     *
     * @param string $value
     * @return \RO\Cmd\UserResume
     */
    public function setMaxChats( $value, $idx = NULL){
      return $this->_set(14, $value, $idx);
    }
    
    /**
     * Get all elements of <max_chats>
     *
     * @return string[]
     */
    public function getMaxChatsList(){
     return $this->_get(14);
    }
    
    /**
     * Add a new element to <max_chats>
     *
     * @param string $value
     * @return \RO\Cmd\UserResume
     */
    public function addMaxChats( $value){
     return $this->_add(14, $value);
    }
    
    /**
     * Check if <max_music> has a value
     *
     * @return boolean
     */
    public function hasMaxMusic(){
      return $this->_has(15);
    }
    
    /**
     * Clear <max_music> value
     *
     * @return \RO\Cmd\UserResume
     */
    public function clearMaxMusic(){
      return $this->_clear(15);
    }
    
    /**
     * Get <max_music> value
     *
     * @param int $idx
     * @return string
     */
    public function getMaxMusic($idx = NULL){
      return $this->_get(15, $idx);
    }
    
    /**
     * Set <max_music> value
     *
     * @param string $value
     * @return \RO\Cmd\UserResume
     */
    public function setMaxMusic( $value, $idx = NULL){
      return $this->_set(15, $value, $idx);
    }
    
    /**
     * Get all elements of <max_music>
     *
     * @return string[]
     */
    public function getMaxMusicList(){
     return $this->_get(15);
    }
    
    /**
     * Add a new element to <max_music>
     *
     * @param string $value
     * @return \RO\Cmd\UserResume
     */
    public function addMaxMusic( $value){
     return $this->_add(15, $value);
    }
    
    /**
     * Check if <max_save> has a value
     *
     * @return boolean
     */
    public function hasMaxSave(){
      return $this->_has(16);
    }
    
    /**
     * Clear <max_save> value
     *
     * @return \RO\Cmd\UserResume
     */
    public function clearMaxSave(){
      return $this->_clear(16);
    }
    
    /**
     * Get <max_save> value
     *
     * @param int $idx
     * @return string
     */
    public function getMaxSave($idx = NULL){
      return $this->_get(16, $idx);
    }
    
    /**
     * Set <max_save> value
     *
     * @param string $value
     * @return \RO\Cmd\UserResume
     */
    public function setMaxSave( $value, $idx = NULL){
      return $this->_set(16, $value, $idx);
    }
    
    /**
     * Get all elements of <max_save>
     *
     * @return string[]
     */
    public function getMaxSaveList(){
     return $this->_get(16);
    }
    
    /**
     * Add a new element to <max_save>
     *
     * @param string $value
     * @return \RO\Cmd\UserResume
     */
    public function addMaxSave( $value){
     return $this->_add(16, $value);
    }
    
    /**
     * Check if <max_besave> has a value
     *
     * @return boolean
     */
    public function hasMaxBesave(){
      return $this->_has(17);
    }
    
    /**
     * Clear <max_besave> value
     *
     * @return \RO\Cmd\UserResume
     */
    public function clearMaxBesave(){
      return $this->_clear(17);
    }
    
    /**
     * Get <max_besave> value
     *
     * @param int $idx
     * @return string
     */
    public function getMaxBesave($idx = NULL){
      return $this->_get(17, $idx);
    }
    
    /**
     * Set <max_besave> value
     *
     * @param string $value
     * @return \RO\Cmd\UserResume
     */
    public function setMaxBesave( $value, $idx = NULL){
      return $this->_set(17, $value, $idx);
    }
    
    /**
     * Get all elements of <max_besave>
     *
     * @return string[]
     */
    public function getMaxBesaveList(){
     return $this->_get(17);
    }
    
    /**
     * Add a new element to <max_besave>
     *
     * @param string $value
     * @return \RO\Cmd\UserResume
     */
    public function addMaxBesave( $value){
     return $this->_add(17, $value);
    }
  }
}

