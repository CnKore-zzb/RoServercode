<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: ChatCmd.proto

namespace RO\Cmd {

  class NpcChatNtf extends \DrSlump\Protobuf\Message {

    /**  @var int - \RO\Cmd\Command */
    public $cmd = \RO\Cmd\Command::CHAT_PROTOCMD;
    
    /**  @var int - \RO\Cmd\ChatParam */
    public $param = \RO\Cmd\ChatParam::CHATPARAM_NPC_CHAT_NTF;
    
    /**  @var int - \RO\Cmd\EGameChatChannel */
    public $channel = \RO\Cmd\EGameChatChannel::ECHAT_CHANNEL_MIN;
    
    /**  @var int */
    public $npcid = 0;
    
    /**  @var int */
    public $msgid = 0;
    
    /**  @var \RO\Cmd\MsgParam[]  */
    public $params = array();
    
    /**  @var string */
    public $msg = null;
    
    /**  @var int */
    public $npcguid = 0;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.NpcChatNtf');

      // OPTIONAL ENUM cmd = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "cmd";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\Command';
      $f->default   = \RO\Cmd\Command::CHAT_PROTOCMD;
      $descriptor->addField($f);

      // OPTIONAL ENUM param = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "param";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\ChatParam';
      $f->default   = \RO\Cmd\ChatParam::CHATPARAM_NPC_CHAT_NTF;
      $descriptor->addField($f);

      // OPTIONAL ENUM channel = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "channel";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\EGameChatChannel';
      $f->default   = \RO\Cmd\EGameChatChannel::ECHAT_CHANNEL_MIN;
      $descriptor->addField($f);

      // OPTIONAL UINT32 npcid = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "npcid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 msgid = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "msgid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // REPEATED MESSAGE params = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "params";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\MsgParam';
      $descriptor->addField($f);

      // OPTIONAL STRING msg = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "msg";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT64 npcguid = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "npcguid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <cmd> has a value
     *
     * @return boolean
     */
    public function hasCmd(){
      return $this->_has(1);
    }
    
    /**
     * Clear <cmd> value
     *
     * @return \RO\Cmd\NpcChatNtf
     */
    public function clearCmd(){
      return $this->_clear(1);
    }
    
    /**
     * Get <cmd> value
     *
     * @return int - \RO\Cmd\Command
     */
    public function getCmd(){
      return $this->_get(1);
    }
    
    /**
     * Set <cmd> value
     *
     * @param int - \RO\Cmd\Command $value
     * @return \RO\Cmd\NpcChatNtf
     */
    public function setCmd( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <param> has a value
     *
     * @return boolean
     */
    public function hasParam(){
      return $this->_has(2);
    }
    
    /**
     * Clear <param> value
     *
     * @return \RO\Cmd\NpcChatNtf
     */
    public function clearParam(){
      return $this->_clear(2);
    }
    
    /**
     * Get <param> value
     *
     * @return int - \RO\Cmd\ChatParam
     */
    public function getParam(){
      return $this->_get(2);
    }
    
    /**
     * Set <param> value
     *
     * @param int - \RO\Cmd\ChatParam $value
     * @return \RO\Cmd\NpcChatNtf
     */
    public function setParam( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <channel> has a value
     *
     * @return boolean
     */
    public function hasChannel(){
      return $this->_has(3);
    }
    
    /**
     * Clear <channel> value
     *
     * @return \RO\Cmd\NpcChatNtf
     */
    public function clearChannel(){
      return $this->_clear(3);
    }
    
    /**
     * Get <channel> value
     *
     * @return int - \RO\Cmd\EGameChatChannel
     */
    public function getChannel(){
      return $this->_get(3);
    }
    
    /**
     * Set <channel> value
     *
     * @param int - \RO\Cmd\EGameChatChannel $value
     * @return \RO\Cmd\NpcChatNtf
     */
    public function setChannel( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <npcid> has a value
     *
     * @return boolean
     */
    public function hasNpcid(){
      return $this->_has(4);
    }
    
    /**
     * Clear <npcid> value
     *
     * @return \RO\Cmd\NpcChatNtf
     */
    public function clearNpcid(){
      return $this->_clear(4);
    }
    
    /**
     * Get <npcid> value
     *
     * @return int
     */
    public function getNpcid(){
      return $this->_get(4);
    }
    
    /**
     * Set <npcid> value
     *
     * @param int $value
     * @return \RO\Cmd\NpcChatNtf
     */
    public function setNpcid( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <msgid> has a value
     *
     * @return boolean
     */
    public function hasMsgid(){
      return $this->_has(5);
    }
    
    /**
     * Clear <msgid> value
     *
     * @return \RO\Cmd\NpcChatNtf
     */
    public function clearMsgid(){
      return $this->_clear(5);
    }
    
    /**
     * Get <msgid> value
     *
     * @return int
     */
    public function getMsgid(){
      return $this->_get(5);
    }
    
    /**
     * Set <msgid> value
     *
     * @param int $value
     * @return \RO\Cmd\NpcChatNtf
     */
    public function setMsgid( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <params> has a value
     *
     * @return boolean
     */
    public function hasParams(){
      return $this->_has(6);
    }
    
    /**
     * Clear <params> value
     *
     * @return \RO\Cmd\NpcChatNtf
     */
    public function clearParams(){
      return $this->_clear(6);
    }
    
    /**
     * Get <params> value
     *
     * @param int $idx
     * @return \RO\Cmd\MsgParam
     */
    public function getParams($idx = NULL){
      return $this->_get(6, $idx);
    }
    
    /**
     * Set <params> value
     *
     * @param \RO\Cmd\MsgParam $value
     * @return \RO\Cmd\NpcChatNtf
     */
    public function setParams(\RO\Cmd\MsgParam $value, $idx = NULL){
      return $this->_set(6, $value, $idx);
    }
    
    /**
     * Get all elements of <params>
     *
     * @return \RO\Cmd\MsgParam[]
     */
    public function getParamsList(){
     return $this->_get(6);
    }
    
    /**
     * Add a new element to <params>
     *
     * @param \RO\Cmd\MsgParam $value
     * @return \RO\Cmd\NpcChatNtf
     */
    public function addParams(\RO\Cmd\MsgParam $value){
     return $this->_add(6, $value);
    }
    
    /**
     * Check if <msg> has a value
     *
     * @return boolean
     */
    public function hasMsg(){
      return $this->_has(7);
    }
    
    /**
     * Clear <msg> value
     *
     * @return \RO\Cmd\NpcChatNtf
     */
    public function clearMsg(){
      return $this->_clear(7);
    }
    
    /**
     * Get <msg> value
     *
     * @return string
     */
    public function getMsg(){
      return $this->_get(7);
    }
    
    /**
     * Set <msg> value
     *
     * @param string $value
     * @return \RO\Cmd\NpcChatNtf
     */
    public function setMsg( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <npcguid> has a value
     *
     * @return boolean
     */
    public function hasNpcguid(){
      return $this->_has(8);
    }
    
    /**
     * Clear <npcguid> value
     *
     * @return \RO\Cmd\NpcChatNtf
     */
    public function clearNpcguid(){
      return $this->_clear(8);
    }
    
    /**
     * Get <npcguid> value
     *
     * @return int
     */
    public function getNpcguid(){
      return $this->_get(8);
    }
    
    /**
     * Set <npcguid> value
     *
     * @param int $value
     * @return \RO\Cmd\NpcChatNtf
     */
    public function setNpcguid( $value){
      return $this->_set(8, $value);
    }
  }
}

