<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: RecordCmd.proto

namespace RO\Cmd {

  class GuildMusicQueryRecordCmd extends \DrSlump\Protobuf\Message {

    /**  @var int - \RO\Cmd\Command */
    public $cmd = \RO\Cmd\Command::RECORD_DATA_PROTOCMD;
    
    /**  @var int - \RO\Cmd\RecordParam */
    public $param = \RO\Cmd\RecordParam::RECORDPARAM_GUILD_MUSIC_QUERY;
    
    /**  @var string */
    public $scenename = null;
    
    /**  @var int */
    public $sceneid = 0;
    
    /**  @var int */
    public $guildid = 0;
    
    /**  @var \RO\Cmd\MusicItem[]  */
    public $items = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.GuildMusicQueryRecordCmd');

      // OPTIONAL ENUM cmd = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "cmd";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\Command';
      $f->default   = \RO\Cmd\Command::RECORD_DATA_PROTOCMD;
      $descriptor->addField($f);

      // OPTIONAL ENUM param = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "param";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\RecordParam';
      $f->default   = \RO\Cmd\RecordParam::RECORDPARAM_GUILD_MUSIC_QUERY;
      $descriptor->addField($f);

      // OPTIONAL STRING scenename = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "scenename";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 sceneid = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "sceneid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT64 guildid = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "guildid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // REPEATED MESSAGE items = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "items";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\MusicItem';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <cmd> has a value
     *
     * @return boolean
     */
    public function hasCmd(){
      return $this->_has(1);
    }
    
    /**
     * Clear <cmd> value
     *
     * @return \RO\Cmd\GuildMusicQueryRecordCmd
     */
    public function clearCmd(){
      return $this->_clear(1);
    }
    
    /**
     * Get <cmd> value
     *
     * @return int - \RO\Cmd\Command
     */
    public function getCmd(){
      return $this->_get(1);
    }
    
    /**
     * Set <cmd> value
     *
     * @param int - \RO\Cmd\Command $value
     * @return \RO\Cmd\GuildMusicQueryRecordCmd
     */
    public function setCmd( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <param> has a value
     *
     * @return boolean
     */
    public function hasParam(){
      return $this->_has(2);
    }
    
    /**
     * Clear <param> value
     *
     * @return \RO\Cmd\GuildMusicQueryRecordCmd
     */
    public function clearParam(){
      return $this->_clear(2);
    }
    
    /**
     * Get <param> value
     *
     * @return int - \RO\Cmd\RecordParam
     */
    public function getParam(){
      return $this->_get(2);
    }
    
    /**
     * Set <param> value
     *
     * @param int - \RO\Cmd\RecordParam $value
     * @return \RO\Cmd\GuildMusicQueryRecordCmd
     */
    public function setParam( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <scenename> has a value
     *
     * @return boolean
     */
    public function hasScenename(){
      return $this->_has(3);
    }
    
    /**
     * Clear <scenename> value
     *
     * @return \RO\Cmd\GuildMusicQueryRecordCmd
     */
    public function clearScenename(){
      return $this->_clear(3);
    }
    
    /**
     * Get <scenename> value
     *
     * @return string
     */
    public function getScenename(){
      return $this->_get(3);
    }
    
    /**
     * Set <scenename> value
     *
     * @param string $value
     * @return \RO\Cmd\GuildMusicQueryRecordCmd
     */
    public function setScenename( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <sceneid> has a value
     *
     * @return boolean
     */
    public function hasSceneid(){
      return $this->_has(4);
    }
    
    /**
     * Clear <sceneid> value
     *
     * @return \RO\Cmd\GuildMusicQueryRecordCmd
     */
    public function clearSceneid(){
      return $this->_clear(4);
    }
    
    /**
     * Get <sceneid> value
     *
     * @return int
     */
    public function getSceneid(){
      return $this->_get(4);
    }
    
    /**
     * Set <sceneid> value
     *
     * @param int $value
     * @return \RO\Cmd\GuildMusicQueryRecordCmd
     */
    public function setSceneid( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <guildid> has a value
     *
     * @return boolean
     */
    public function hasGuildid(){
      return $this->_has(5);
    }
    
    /**
     * Clear <guildid> value
     *
     * @return \RO\Cmd\GuildMusicQueryRecordCmd
     */
    public function clearGuildid(){
      return $this->_clear(5);
    }
    
    /**
     * Get <guildid> value
     *
     * @return int
     */
    public function getGuildid(){
      return $this->_get(5);
    }
    
    /**
     * Set <guildid> value
     *
     * @param int $value
     * @return \RO\Cmd\GuildMusicQueryRecordCmd
     */
    public function setGuildid( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <items> has a value
     *
     * @return boolean
     */
    public function hasItems(){
      return $this->_has(6);
    }
    
    /**
     * Clear <items> value
     *
     * @return \RO\Cmd\GuildMusicQueryRecordCmd
     */
    public function clearItems(){
      return $this->_clear(6);
    }
    
    /**
     * Get <items> value
     *
     * @param int $idx
     * @return \RO\Cmd\MusicItem
     */
    public function getItems($idx = NULL){
      return $this->_get(6, $idx);
    }
    
    /**
     * Set <items> value
     *
     * @param \RO\Cmd\MusicItem $value
     * @return \RO\Cmd\GuildMusicQueryRecordCmd
     */
    public function setItems(\RO\Cmd\MusicItem $value, $idx = NULL){
      return $this->_set(6, $value, $idx);
    }
    
    /**
     * Get all elements of <items>
     *
     * @return \RO\Cmd\MusicItem[]
     */
    public function getItemsList(){
     return $this->_get(6);
    }
    
    /**
     * Add a new element to <items>
     *
     * @param \RO\Cmd\MusicItem $value
     * @return \RO\Cmd\GuildMusicQueryRecordCmd
     */
    public function addItems(\RO\Cmd\MusicItem $value){
     return $this->_add(6, $value);
    }
  }
}

