<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: SceneUser2.proto

namespace RO\Cmd {

  class BufferData extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $id = 0;
    
    /**  @var int */
    public $layer = 0;
    
    /**  @var int */
    public $time = 0;
    
    /**  @var boolean */
    public $active = true;
    
    /**  @var string */
    public $fromname = null;
    
    /**  @var int */
    public $fromid = 0;
    
    /**  @var int */
    public $level = 0;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.BufferData');

      // OPTIONAL UINT32 id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 layer = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "layer";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT64 time = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "time";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL BOOL active = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "active";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = true;
      $descriptor->addField($f);

      // OPTIONAL STRING fromname = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "fromname";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT64 fromid = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "fromid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 level = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "level";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \RO\Cmd\BufferData
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param int $value
     * @return \RO\Cmd\BufferData
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <layer> has a value
     *
     * @return boolean
     */
    public function hasLayer(){
      return $this->_has(2);
    }
    
    /**
     * Clear <layer> value
     *
     * @return \RO\Cmd\BufferData
     */
    public function clearLayer(){
      return $this->_clear(2);
    }
    
    /**
     * Get <layer> value
     *
     * @return int
     */
    public function getLayer(){
      return $this->_get(2);
    }
    
    /**
     * Set <layer> value
     *
     * @param int $value
     * @return \RO\Cmd\BufferData
     */
    public function setLayer( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <time> has a value
     *
     * @return boolean
     */
    public function hasTime(){
      return $this->_has(3);
    }
    
    /**
     * Clear <time> value
     *
     * @return \RO\Cmd\BufferData
     */
    public function clearTime(){
      return $this->_clear(3);
    }
    
    /**
     * Get <time> value
     *
     * @return int
     */
    public function getTime(){
      return $this->_get(3);
    }
    
    /**
     * Set <time> value
     *
     * @param int $value
     * @return \RO\Cmd\BufferData
     */
    public function setTime( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <active> has a value
     *
     * @return boolean
     */
    public function hasActive(){
      return $this->_has(4);
    }
    
    /**
     * Clear <active> value
     *
     * @return \RO\Cmd\BufferData
     */
    public function clearActive(){
      return $this->_clear(4);
    }
    
    /**
     * Get <active> value
     *
     * @return boolean
     */
    public function getActive(){
      return $this->_get(4);
    }
    
    /**
     * Set <active> value
     *
     * @param boolean $value
     * @return \RO\Cmd\BufferData
     */
    public function setActive( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <fromname> has a value
     *
     * @return boolean
     */
    public function hasFromname(){
      return $this->_has(5);
    }
    
    /**
     * Clear <fromname> value
     *
     * @return \RO\Cmd\BufferData
     */
    public function clearFromname(){
      return $this->_clear(5);
    }
    
    /**
     * Get <fromname> value
     *
     * @return string
     */
    public function getFromname(){
      return $this->_get(5);
    }
    
    /**
     * Set <fromname> value
     *
     * @param string $value
     * @return \RO\Cmd\BufferData
     */
    public function setFromname( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <fromid> has a value
     *
     * @return boolean
     */
    public function hasFromid(){
      return $this->_has(6);
    }
    
    /**
     * Clear <fromid> value
     *
     * @return \RO\Cmd\BufferData
     */
    public function clearFromid(){
      return $this->_clear(6);
    }
    
    /**
     * Get <fromid> value
     *
     * @return int
     */
    public function getFromid(){
      return $this->_get(6);
    }
    
    /**
     * Set <fromid> value
     *
     * @param int $value
     * @return \RO\Cmd\BufferData
     */
    public function setFromid( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <level> has a value
     *
     * @return boolean
     */
    public function hasLevel(){
      return $this->_has(7);
    }
    
    /**
     * Clear <level> value
     *
     * @return \RO\Cmd\BufferData
     */
    public function clearLevel(){
      return $this->_clear(7);
    }
    
    /**
     * Get <level> value
     *
     * @return int
     */
    public function getLevel(){
      return $this->_get(7);
    }
    
    /**
     * Set <level> value
     *
     * @param int $value
     * @return \RO\Cmd\BufferData
     */
    public function setLevel( $value){
      return $this->_set(7, $value);
    }
  }
}

