<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: StatCmd.proto

namespace RO\Cmd {

  class TradeToStatLogCmd extends \DrSlump\Protobuf\Message {

    /**  @var int - \RO\Cmd\Command */
    public $cmd = \RO\Cmd\Command::STAT_PROTOCMD;
    
    /**  @var int - \RO\Cmd\StatParam */
    public $param = \RO\Cmd\StatParam::LOG_TRADE_TO_STAT;
    
    /**  @var int - \RO\Cmd\EOperType */
    public $eType = null;
    
    /**  @var int */
    public $itemid = 0;
    
    /**  @var int */
    public $price = 0;
    
    /**  @var int */
    public $count = 0;
    
    /**  @var int */
    public $sellerid = 0;
    
    /**  @var int */
    public $buyerid = 0;
    
    /**  @var int */
    public $pendingtime = 0;
    
    /**  @var int */
    public $tradetime = 0;
    
    /**  @var int */
    public $refinelv = 0;
    
    /**  @var \RO\Cmd\ItemData */
    public $itemdata = null;
    
    /**  @var string */
    public $buyername = null;
    
    /**  @var int - \RO\Cmd\ETradeListType */
    public $elisttype = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.TradeToStatLogCmd');

      // OPTIONAL ENUM cmd = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "cmd";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\Command';
      $f->default   = \RO\Cmd\Command::STAT_PROTOCMD;
      $descriptor->addField($f);

      // OPTIONAL ENUM param = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "param";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\StatParam';
      $f->default   = \RO\Cmd\StatParam::LOG_TRADE_TO_STAT;
      $descriptor->addField($f);

      // REQUIRED ENUM eType = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "eType";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\RO\Cmd\EOperType';
      $descriptor->addField($f);

      // OPTIONAL UINT32 itemid = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "itemid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 price = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "price";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 count = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "count";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT64 sellerid = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "sellerid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT64 buyerid = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "buyerid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 pendingtime = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "pendingtime";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 tradetime = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "tradetime";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 refinelv = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "refinelv";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE itemdata = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "itemdata";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\ItemData';
      $descriptor->addField($f);

      // OPTIONAL STRING buyername = 13
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 13;
      $f->name      = "buyername";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REQUIRED ENUM elisttype = 14
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 14;
      $f->name      = "elisttype";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\RO\Cmd\ETradeListType';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <cmd> has a value
     *
     * @return boolean
     */
    public function hasCmd(){
      return $this->_has(1);
    }
    
    /**
     * Clear <cmd> value
     *
     * @return \RO\Cmd\TradeToStatLogCmd
     */
    public function clearCmd(){
      return $this->_clear(1);
    }
    
    /**
     * Get <cmd> value
     *
     * @return int - \RO\Cmd\Command
     */
    public function getCmd(){
      return $this->_get(1);
    }
    
    /**
     * Set <cmd> value
     *
     * @param int - \RO\Cmd\Command $value
     * @return \RO\Cmd\TradeToStatLogCmd
     */
    public function setCmd( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <param> has a value
     *
     * @return boolean
     */
    public function hasParam(){
      return $this->_has(2);
    }
    
    /**
     * Clear <param> value
     *
     * @return \RO\Cmd\TradeToStatLogCmd
     */
    public function clearParam(){
      return $this->_clear(2);
    }
    
    /**
     * Get <param> value
     *
     * @return int - \RO\Cmd\StatParam
     */
    public function getParam(){
      return $this->_get(2);
    }
    
    /**
     * Set <param> value
     *
     * @param int - \RO\Cmd\StatParam $value
     * @return \RO\Cmd\TradeToStatLogCmd
     */
    public function setParam( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <eType> has a value
     *
     * @return boolean
     */
    public function hasEType(){
      return $this->_has(3);
    }
    
    /**
     * Clear <eType> value
     *
     * @return \RO\Cmd\TradeToStatLogCmd
     */
    public function clearEType(){
      return $this->_clear(3);
    }
    
    /**
     * Get <eType> value
     *
     * @return int - \RO\Cmd\EOperType
     */
    public function getEType(){
      return $this->_get(3);
    }
    
    /**
     * Set <eType> value
     *
     * @param int - \RO\Cmd\EOperType $value
     * @return \RO\Cmd\TradeToStatLogCmd
     */
    public function setEType( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <itemid> has a value
     *
     * @return boolean
     */
    public function hasItemid(){
      return $this->_has(4);
    }
    
    /**
     * Clear <itemid> value
     *
     * @return \RO\Cmd\TradeToStatLogCmd
     */
    public function clearItemid(){
      return $this->_clear(4);
    }
    
    /**
     * Get <itemid> value
     *
     * @return int
     */
    public function getItemid(){
      return $this->_get(4);
    }
    
    /**
     * Set <itemid> value
     *
     * @param int $value
     * @return \RO\Cmd\TradeToStatLogCmd
     */
    public function setItemid( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <price> has a value
     *
     * @return boolean
     */
    public function hasPrice(){
      return $this->_has(5);
    }
    
    /**
     * Clear <price> value
     *
     * @return \RO\Cmd\TradeToStatLogCmd
     */
    public function clearPrice(){
      return $this->_clear(5);
    }
    
    /**
     * Get <price> value
     *
     * @return int
     */
    public function getPrice(){
      return $this->_get(5);
    }
    
    /**
     * Set <price> value
     *
     * @param int $value
     * @return \RO\Cmd\TradeToStatLogCmd
     */
    public function setPrice( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <count> has a value
     *
     * @return boolean
     */
    public function hasCount(){
      return $this->_has(6);
    }
    
    /**
     * Clear <count> value
     *
     * @return \RO\Cmd\TradeToStatLogCmd
     */
    public function clearCount(){
      return $this->_clear(6);
    }
    
    /**
     * Get <count> value
     *
     * @return int
     */
    public function getCount(){
      return $this->_get(6);
    }
    
    /**
     * Set <count> value
     *
     * @param int $value
     * @return \RO\Cmd\TradeToStatLogCmd
     */
    public function setCount( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <sellerid> has a value
     *
     * @return boolean
     */
    public function hasSellerid(){
      return $this->_has(7);
    }
    
    /**
     * Clear <sellerid> value
     *
     * @return \RO\Cmd\TradeToStatLogCmd
     */
    public function clearSellerid(){
      return $this->_clear(7);
    }
    
    /**
     * Get <sellerid> value
     *
     * @return int
     */
    public function getSellerid(){
      return $this->_get(7);
    }
    
    /**
     * Set <sellerid> value
     *
     * @param int $value
     * @return \RO\Cmd\TradeToStatLogCmd
     */
    public function setSellerid( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <buyerid> has a value
     *
     * @return boolean
     */
    public function hasBuyerid(){
      return $this->_has(8);
    }
    
    /**
     * Clear <buyerid> value
     *
     * @return \RO\Cmd\TradeToStatLogCmd
     */
    public function clearBuyerid(){
      return $this->_clear(8);
    }
    
    /**
     * Get <buyerid> value
     *
     * @return int
     */
    public function getBuyerid(){
      return $this->_get(8);
    }
    
    /**
     * Set <buyerid> value
     *
     * @param int $value
     * @return \RO\Cmd\TradeToStatLogCmd
     */
    public function setBuyerid( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <pendingtime> has a value
     *
     * @return boolean
     */
    public function hasPendingtime(){
      return $this->_has(9);
    }
    
    /**
     * Clear <pendingtime> value
     *
     * @return \RO\Cmd\TradeToStatLogCmd
     */
    public function clearPendingtime(){
      return $this->_clear(9);
    }
    
    /**
     * Get <pendingtime> value
     *
     * @return int
     */
    public function getPendingtime(){
      return $this->_get(9);
    }
    
    /**
     * Set <pendingtime> value
     *
     * @param int $value
     * @return \RO\Cmd\TradeToStatLogCmd
     */
    public function setPendingtime( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <tradetime> has a value
     *
     * @return boolean
     */
    public function hasTradetime(){
      return $this->_has(10);
    }
    
    /**
     * Clear <tradetime> value
     *
     * @return \RO\Cmd\TradeToStatLogCmd
     */
    public function clearTradetime(){
      return $this->_clear(10);
    }
    
    /**
     * Get <tradetime> value
     *
     * @return int
     */
    public function getTradetime(){
      return $this->_get(10);
    }
    
    /**
     * Set <tradetime> value
     *
     * @param int $value
     * @return \RO\Cmd\TradeToStatLogCmd
     */
    public function setTradetime( $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <refinelv> has a value
     *
     * @return boolean
     */
    public function hasRefinelv(){
      return $this->_has(11);
    }
    
    /**
     * Clear <refinelv> value
     *
     * @return \RO\Cmd\TradeToStatLogCmd
     */
    public function clearRefinelv(){
      return $this->_clear(11);
    }
    
    /**
     * Get <refinelv> value
     *
     * @return int
     */
    public function getRefinelv(){
      return $this->_get(11);
    }
    
    /**
     * Set <refinelv> value
     *
     * @param int $value
     * @return \RO\Cmd\TradeToStatLogCmd
     */
    public function setRefinelv( $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <itemdata> has a value
     *
     * @return boolean
     */
    public function hasItemdata(){
      return $this->_has(12);
    }
    
    /**
     * Clear <itemdata> value
     *
     * @return \RO\Cmd\TradeToStatLogCmd
     */
    public function clearItemdata(){
      return $this->_clear(12);
    }
    
    /**
     * Get <itemdata> value
     *
     * @return \RO\Cmd\ItemData
     */
    public function getItemdata(){
      return $this->_get(12);
    }
    
    /**
     * Set <itemdata> value
     *
     * @param \RO\Cmd\ItemData $value
     * @return \RO\Cmd\TradeToStatLogCmd
     */
    public function setItemdata(\RO\Cmd\ItemData $value){
      return $this->_set(12, $value);
    }
    
    /**
     * Check if <buyername> has a value
     *
     * @return boolean
     */
    public function hasBuyername(){
      return $this->_has(13);
    }
    
    /**
     * Clear <buyername> value
     *
     * @return \RO\Cmd\TradeToStatLogCmd
     */
    public function clearBuyername(){
      return $this->_clear(13);
    }
    
    /**
     * Get <buyername> value
     *
     * @return string
     */
    public function getBuyername(){
      return $this->_get(13);
    }
    
    /**
     * Set <buyername> value
     *
     * @param string $value
     * @return \RO\Cmd\TradeToStatLogCmd
     */
    public function setBuyername( $value){
      return $this->_set(13, $value);
    }
    
    /**
     * Check if <elisttype> has a value
     *
     * @return boolean
     */
    public function hasElisttype(){
      return $this->_has(14);
    }
    
    /**
     * Clear <elisttype> value
     *
     * @return \RO\Cmd\TradeToStatLogCmd
     */
    public function clearElisttype(){
      return $this->_clear(14);
    }
    
    /**
     * Get <elisttype> value
     *
     * @return int - \RO\Cmd\ETradeListType
     */
    public function getElisttype(){
      return $this->_get(14);
    }
    
    /**
     * Set <elisttype> value
     *
     * @param int - \RO\Cmd\ETradeListType $value
     * @return \RO\Cmd\TradeToStatLogCmd
     */
    public function setElisttype( $value){
      return $this->_set(14, $value);
    }
  }
}

