<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: SceneTrade.proto

namespace RO\Cmd {

  class GiveCheckMoneySceneTradeCmd extends \DrSlump\Protobuf\Message {

    /**  @var int - \RO\Cmd\Command */
    public $cmd = \RO\Cmd\Command::TRADE_PROTOCMD;
    
    /**  @var int - \RO\Cmd\RecordServerTradeParam */
    public $param = \RO\Cmd\RecordServerTradeParam::GIVE_CHECK_MONEY_RECORDTRADE;
    
    /**  @var int */
    public $charid = null;
    
    /**  @var int - \RO\Cmd\EOperType */
    public $type = null;
    
    /**  @var int */
    public $id = null;
    
    /**  @var int */
    public $friendid = null;
    
    /**  @var string */
    public $content = null;
    
    /**  @var boolean */
    public $anonymous = null;
    
    /**  @var int */
    public $quota = null;
    
    /**  @var int */
    public $fee = null;
    
    /**  @var int */
    public $background = null;
    
    /**  @var boolean */
    public $ret = null;
    
    /**  @var \RO\Cmd\ItemData */
    public $itemdata = null;
    
    /**  @var boolean */
    public $fromtrade = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.GiveCheckMoneySceneTradeCmd');

      // OPTIONAL ENUM cmd = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "cmd";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\Command';
      $f->default   = \RO\Cmd\Command::TRADE_PROTOCMD;
      $descriptor->addField($f);

      // OPTIONAL ENUM param = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "param";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\RecordServerTradeParam';
      $f->default   = \RO\Cmd\RecordServerTradeParam::GIVE_CHECK_MONEY_RECORDTRADE;
      $descriptor->addField($f);

      // OPTIONAL UINT64 charid = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "charid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM type = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\EOperType';
      $descriptor->addField($f);

      // OPTIONAL UINT64 id = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT64 friendid = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "friendid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING content = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "content";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL anonymous = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "anonymous";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT64 quota = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "quota";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT64 fee = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "fee";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 background = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "background";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL ret = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "ret";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE itemdata = 13
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 13;
      $f->name      = "itemdata";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\ItemData';
      $descriptor->addField($f);

      // OPTIONAL BOOL fromtrade = 14
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 14;
      $f->name      = "fromtrade";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <cmd> has a value
     *
     * @return boolean
     */
    public function hasCmd(){
      return $this->_has(1);
    }
    
    /**
     * Clear <cmd> value
     *
     * @return \RO\Cmd\GiveCheckMoneySceneTradeCmd
     */
    public function clearCmd(){
      return $this->_clear(1);
    }
    
    /**
     * Get <cmd> value
     *
     * @return int - \RO\Cmd\Command
     */
    public function getCmd(){
      return $this->_get(1);
    }
    
    /**
     * Set <cmd> value
     *
     * @param int - \RO\Cmd\Command $value
     * @return \RO\Cmd\GiveCheckMoneySceneTradeCmd
     */
    public function setCmd( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <param> has a value
     *
     * @return boolean
     */
    public function hasParam(){
      return $this->_has(2);
    }
    
    /**
     * Clear <param> value
     *
     * @return \RO\Cmd\GiveCheckMoneySceneTradeCmd
     */
    public function clearParam(){
      return $this->_clear(2);
    }
    
    /**
     * Get <param> value
     *
     * @return int - \RO\Cmd\RecordServerTradeParam
     */
    public function getParam(){
      return $this->_get(2);
    }
    
    /**
     * Set <param> value
     *
     * @param int - \RO\Cmd\RecordServerTradeParam $value
     * @return \RO\Cmd\GiveCheckMoneySceneTradeCmd
     */
    public function setParam( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <charid> has a value
     *
     * @return boolean
     */
    public function hasCharid(){
      return $this->_has(3);
    }
    
    /**
     * Clear <charid> value
     *
     * @return \RO\Cmd\GiveCheckMoneySceneTradeCmd
     */
    public function clearCharid(){
      return $this->_clear(3);
    }
    
    /**
     * Get <charid> value
     *
     * @return int
     */
    public function getCharid(){
      return $this->_get(3);
    }
    
    /**
     * Set <charid> value
     *
     * @param int $value
     * @return \RO\Cmd\GiveCheckMoneySceneTradeCmd
     */
    public function setCharid( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(4);
    }
    
    /**
     * Clear <type> value
     *
     * @return \RO\Cmd\GiveCheckMoneySceneTradeCmd
     */
    public function clearType(){
      return $this->_clear(4);
    }
    
    /**
     * Get <type> value
     *
     * @return int - \RO\Cmd\EOperType
     */
    public function getType(){
      return $this->_get(4);
    }
    
    /**
     * Set <type> value
     *
     * @param int - \RO\Cmd\EOperType $value
     * @return \RO\Cmd\GiveCheckMoneySceneTradeCmd
     */
    public function setType( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(5);
    }
    
    /**
     * Clear <id> value
     *
     * @return \RO\Cmd\GiveCheckMoneySceneTradeCmd
     */
    public function clearId(){
      return $this->_clear(5);
    }
    
    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(5);
    }
    
    /**
     * Set <id> value
     *
     * @param int $value
     * @return \RO\Cmd\GiveCheckMoneySceneTradeCmd
     */
    public function setId( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <friendid> has a value
     *
     * @return boolean
     */
    public function hasFriendid(){
      return $this->_has(6);
    }
    
    /**
     * Clear <friendid> value
     *
     * @return \RO\Cmd\GiveCheckMoneySceneTradeCmd
     */
    public function clearFriendid(){
      return $this->_clear(6);
    }
    
    /**
     * Get <friendid> value
     *
     * @return int
     */
    public function getFriendid(){
      return $this->_get(6);
    }
    
    /**
     * Set <friendid> value
     *
     * @param int $value
     * @return \RO\Cmd\GiveCheckMoneySceneTradeCmd
     */
    public function setFriendid( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <content> has a value
     *
     * @return boolean
     */
    public function hasContent(){
      return $this->_has(7);
    }
    
    /**
     * Clear <content> value
     *
     * @return \RO\Cmd\GiveCheckMoneySceneTradeCmd
     */
    public function clearContent(){
      return $this->_clear(7);
    }
    
    /**
     * Get <content> value
     *
     * @return string
     */
    public function getContent(){
      return $this->_get(7);
    }
    
    /**
     * Set <content> value
     *
     * @param string $value
     * @return \RO\Cmd\GiveCheckMoneySceneTradeCmd
     */
    public function setContent( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <anonymous> has a value
     *
     * @return boolean
     */
    public function hasAnonymous(){
      return $this->_has(8);
    }
    
    /**
     * Clear <anonymous> value
     *
     * @return \RO\Cmd\GiveCheckMoneySceneTradeCmd
     */
    public function clearAnonymous(){
      return $this->_clear(8);
    }
    
    /**
     * Get <anonymous> value
     *
     * @return boolean
     */
    public function getAnonymous(){
      return $this->_get(8);
    }
    
    /**
     * Set <anonymous> value
     *
     * @param boolean $value
     * @return \RO\Cmd\GiveCheckMoneySceneTradeCmd
     */
    public function setAnonymous( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <quota> has a value
     *
     * @return boolean
     */
    public function hasQuota(){
      return $this->_has(9);
    }
    
    /**
     * Clear <quota> value
     *
     * @return \RO\Cmd\GiveCheckMoneySceneTradeCmd
     */
    public function clearQuota(){
      return $this->_clear(9);
    }
    
    /**
     * Get <quota> value
     *
     * @return int
     */
    public function getQuota(){
      return $this->_get(9);
    }
    
    /**
     * Set <quota> value
     *
     * @param int $value
     * @return \RO\Cmd\GiveCheckMoneySceneTradeCmd
     */
    public function setQuota( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <fee> has a value
     *
     * @return boolean
     */
    public function hasFee(){
      return $this->_has(10);
    }
    
    /**
     * Clear <fee> value
     *
     * @return \RO\Cmd\GiveCheckMoneySceneTradeCmd
     */
    public function clearFee(){
      return $this->_clear(10);
    }
    
    /**
     * Get <fee> value
     *
     * @return int
     */
    public function getFee(){
      return $this->_get(10);
    }
    
    /**
     * Set <fee> value
     *
     * @param int $value
     * @return \RO\Cmd\GiveCheckMoneySceneTradeCmd
     */
    public function setFee( $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <background> has a value
     *
     * @return boolean
     */
    public function hasBackground(){
      return $this->_has(11);
    }
    
    /**
     * Clear <background> value
     *
     * @return \RO\Cmd\GiveCheckMoneySceneTradeCmd
     */
    public function clearBackground(){
      return $this->_clear(11);
    }
    
    /**
     * Get <background> value
     *
     * @return int
     */
    public function getBackground(){
      return $this->_get(11);
    }
    
    /**
     * Set <background> value
     *
     * @param int $value
     * @return \RO\Cmd\GiveCheckMoneySceneTradeCmd
     */
    public function setBackground( $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <ret> has a value
     *
     * @return boolean
     */
    public function hasRet(){
      return $this->_has(12);
    }
    
    /**
     * Clear <ret> value
     *
     * @return \RO\Cmd\GiveCheckMoneySceneTradeCmd
     */
    public function clearRet(){
      return $this->_clear(12);
    }
    
    /**
     * Get <ret> value
     *
     * @return boolean
     */
    public function getRet(){
      return $this->_get(12);
    }
    
    /**
     * Set <ret> value
     *
     * @param boolean $value
     * @return \RO\Cmd\GiveCheckMoneySceneTradeCmd
     */
    public function setRet( $value){
      return $this->_set(12, $value);
    }
    
    /**
     * Check if <itemdata> has a value
     *
     * @return boolean
     */
    public function hasItemdata(){
      return $this->_has(13);
    }
    
    /**
     * Clear <itemdata> value
     *
     * @return \RO\Cmd\GiveCheckMoneySceneTradeCmd
     */
    public function clearItemdata(){
      return $this->_clear(13);
    }
    
    /**
     * Get <itemdata> value
     *
     * @return \RO\Cmd\ItemData
     */
    public function getItemdata(){
      return $this->_get(13);
    }
    
    /**
     * Set <itemdata> value
     *
     * @param \RO\Cmd\ItemData $value
     * @return \RO\Cmd\GiveCheckMoneySceneTradeCmd
     */
    public function setItemdata(\RO\Cmd\ItemData $value){
      return $this->_set(13, $value);
    }
    
    /**
     * Check if <fromtrade> has a value
     *
     * @return boolean
     */
    public function hasFromtrade(){
      return $this->_has(14);
    }
    
    /**
     * Clear <fromtrade> value
     *
     * @return \RO\Cmd\GiveCheckMoneySceneTradeCmd
     */
    public function clearFromtrade(){
      return $this->_clear(14);
    }
    
    /**
     * Get <fromtrade> value
     *
     * @return boolean
     */
    public function getFromtrade(){
      return $this->_get(14);
    }
    
    /**
     * Set <fromtrade> value
     *
     * @param boolean $value
     * @return \RO\Cmd\GiveCheckMoneySceneTradeCmd
     */
    public function setFromtrade( $value){
      return $this->_set(14, $value);
    }
  }
}

