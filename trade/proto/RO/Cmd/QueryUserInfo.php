<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: ChatCmd.proto

namespace RO\Cmd {

  class QueryUserInfo extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $charid = 0;
    
    /**  @var int */
    public $guildid = 0;
    
    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $guildname = null;
    
    /**  @var string */
    public $guildportrait = null;
    
    /**  @var string */
    public $guildjob = null;
    
    /**  @var \RO\Cmd\UserData[]  */
    public $datas = array();
    
    /**  @var \RO\Cmd\UserAttr[]  */
    public $attrs = array();
    
    /**  @var \RO\Cmd\ItemData[]  */
    public $equip = array();
    
    /**  @var \RO\Cmd\ItemData[]  */
    public $fashion = array();
    
    /**  @var \RO\Cmd\HighRefineData[]  */
    public $highrefine = array();
    
    /**  @var string */
    public $partner = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.QueryUserInfo');

      // OPTIONAL UINT64 charid = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "charid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT64 guildid = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "guildid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL STRING name = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING guildname = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "guildname";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING guildportrait = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "guildportrait";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING guildjob = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "guildjob";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE datas = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "datas";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\UserData';
      $descriptor->addField($f);

      // REPEATED MESSAGE attrs = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "attrs";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\UserAttr';
      $descriptor->addField($f);

      // REPEATED MESSAGE equip = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "equip";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\ItemData';
      $descriptor->addField($f);

      // REPEATED MESSAGE fashion = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "fashion";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\ItemData';
      $descriptor->addField($f);

      // REPEATED MESSAGE highrefine = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "highrefine";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\HighRefineData';
      $descriptor->addField($f);

      // OPTIONAL STRING partner = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "partner";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <charid> has a value
     *
     * @return boolean
     */
    public function hasCharid(){
      return $this->_has(1);
    }
    
    /**
     * Clear <charid> value
     *
     * @return \RO\Cmd\QueryUserInfo
     */
    public function clearCharid(){
      return $this->_clear(1);
    }
    
    /**
     * Get <charid> value
     *
     * @return int
     */
    public function getCharid(){
      return $this->_get(1);
    }
    
    /**
     * Set <charid> value
     *
     * @param int $value
     * @return \RO\Cmd\QueryUserInfo
     */
    public function setCharid( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <guildid> has a value
     *
     * @return boolean
     */
    public function hasGuildid(){
      return $this->_has(2);
    }
    
    /**
     * Clear <guildid> value
     *
     * @return \RO\Cmd\QueryUserInfo
     */
    public function clearGuildid(){
      return $this->_clear(2);
    }
    
    /**
     * Get <guildid> value
     *
     * @return int
     */
    public function getGuildid(){
      return $this->_get(2);
    }
    
    /**
     * Set <guildid> value
     *
     * @param int $value
     * @return \RO\Cmd\QueryUserInfo
     */
    public function setGuildid( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(3);
    }
    
    /**
     * Clear <name> value
     *
     * @return \RO\Cmd\QueryUserInfo
     */
    public function clearName(){
      return $this->_clear(3);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(3);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \RO\Cmd\QueryUserInfo
     */
    public function setName( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <guildname> has a value
     *
     * @return boolean
     */
    public function hasGuildname(){
      return $this->_has(4);
    }
    
    /**
     * Clear <guildname> value
     *
     * @return \RO\Cmd\QueryUserInfo
     */
    public function clearGuildname(){
      return $this->_clear(4);
    }
    
    /**
     * Get <guildname> value
     *
     * @return string
     */
    public function getGuildname(){
      return $this->_get(4);
    }
    
    /**
     * Set <guildname> value
     *
     * @param string $value
     * @return \RO\Cmd\QueryUserInfo
     */
    public function setGuildname( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <guildportrait> has a value
     *
     * @return boolean
     */
    public function hasGuildportrait(){
      return $this->_has(5);
    }
    
    /**
     * Clear <guildportrait> value
     *
     * @return \RO\Cmd\QueryUserInfo
     */
    public function clearGuildportrait(){
      return $this->_clear(5);
    }
    
    /**
     * Get <guildportrait> value
     *
     * @return string
     */
    public function getGuildportrait(){
      return $this->_get(5);
    }
    
    /**
     * Set <guildportrait> value
     *
     * @param string $value
     * @return \RO\Cmd\QueryUserInfo
     */
    public function setGuildportrait( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <guildjob> has a value
     *
     * @return boolean
     */
    public function hasGuildjob(){
      return $this->_has(6);
    }
    
    /**
     * Clear <guildjob> value
     *
     * @return \RO\Cmd\QueryUserInfo
     */
    public function clearGuildjob(){
      return $this->_clear(6);
    }
    
    /**
     * Get <guildjob> value
     *
     * @return string
     */
    public function getGuildjob(){
      return $this->_get(6);
    }
    
    /**
     * Set <guildjob> value
     *
     * @param string $value
     * @return \RO\Cmd\QueryUserInfo
     */
    public function setGuildjob( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <datas> has a value
     *
     * @return boolean
     */
    public function hasDatas(){
      return $this->_has(7);
    }
    
    /**
     * Clear <datas> value
     *
     * @return \RO\Cmd\QueryUserInfo
     */
    public function clearDatas(){
      return $this->_clear(7);
    }
    
    /**
     * Get <datas> value
     *
     * @param int $idx
     * @return \RO\Cmd\UserData
     */
    public function getDatas($idx = NULL){
      return $this->_get(7, $idx);
    }
    
    /**
     * Set <datas> value
     *
     * @param \RO\Cmd\UserData $value
     * @return \RO\Cmd\QueryUserInfo
     */
    public function setDatas(\RO\Cmd\UserData $value, $idx = NULL){
      return $this->_set(7, $value, $idx);
    }
    
    /**
     * Get all elements of <datas>
     *
     * @return \RO\Cmd\UserData[]
     */
    public function getDatasList(){
     return $this->_get(7);
    }
    
    /**
     * Add a new element to <datas>
     *
     * @param \RO\Cmd\UserData $value
     * @return \RO\Cmd\QueryUserInfo
     */
    public function addDatas(\RO\Cmd\UserData $value){
     return $this->_add(7, $value);
    }
    
    /**
     * Check if <attrs> has a value
     *
     * @return boolean
     */
    public function hasAttrs(){
      return $this->_has(8);
    }
    
    /**
     * Clear <attrs> value
     *
     * @return \RO\Cmd\QueryUserInfo
     */
    public function clearAttrs(){
      return $this->_clear(8);
    }
    
    /**
     * Get <attrs> value
     *
     * @param int $idx
     * @return \RO\Cmd\UserAttr
     */
    public function getAttrs($idx = NULL){
      return $this->_get(8, $idx);
    }
    
    /**
     * Set <attrs> value
     *
     * @param \RO\Cmd\UserAttr $value
     * @return \RO\Cmd\QueryUserInfo
     */
    public function setAttrs(\RO\Cmd\UserAttr $value, $idx = NULL){
      return $this->_set(8, $value, $idx);
    }
    
    /**
     * Get all elements of <attrs>
     *
     * @return \RO\Cmd\UserAttr[]
     */
    public function getAttrsList(){
     return $this->_get(8);
    }
    
    /**
     * Add a new element to <attrs>
     *
     * @param \RO\Cmd\UserAttr $value
     * @return \RO\Cmd\QueryUserInfo
     */
    public function addAttrs(\RO\Cmd\UserAttr $value){
     return $this->_add(8, $value);
    }
    
    /**
     * Check if <equip> has a value
     *
     * @return boolean
     */
    public function hasEquip(){
      return $this->_has(9);
    }
    
    /**
     * Clear <equip> value
     *
     * @return \RO\Cmd\QueryUserInfo
     */
    public function clearEquip(){
      return $this->_clear(9);
    }
    
    /**
     * Get <equip> value
     *
     * @param int $idx
     * @return \RO\Cmd\ItemData
     */
    public function getEquip($idx = NULL){
      return $this->_get(9, $idx);
    }
    
    /**
     * Set <equip> value
     *
     * @param \RO\Cmd\ItemData $value
     * @return \RO\Cmd\QueryUserInfo
     */
    public function setEquip(\RO\Cmd\ItemData $value, $idx = NULL){
      return $this->_set(9, $value, $idx);
    }
    
    /**
     * Get all elements of <equip>
     *
     * @return \RO\Cmd\ItemData[]
     */
    public function getEquipList(){
     return $this->_get(9);
    }
    
    /**
     * Add a new element to <equip>
     *
     * @param \RO\Cmd\ItemData $value
     * @return \RO\Cmd\QueryUserInfo
     */
    public function addEquip(\RO\Cmd\ItemData $value){
     return $this->_add(9, $value);
    }
    
    /**
     * Check if <fashion> has a value
     *
     * @return boolean
     */
    public function hasFashion(){
      return $this->_has(12);
    }
    
    /**
     * Clear <fashion> value
     *
     * @return \RO\Cmd\QueryUserInfo
     */
    public function clearFashion(){
      return $this->_clear(12);
    }
    
    /**
     * Get <fashion> value
     *
     * @param int $idx
     * @return \RO\Cmd\ItemData
     */
    public function getFashion($idx = NULL){
      return $this->_get(12, $idx);
    }
    
    /**
     * Set <fashion> value
     *
     * @param \RO\Cmd\ItemData $value
     * @return \RO\Cmd\QueryUserInfo
     */
    public function setFashion(\RO\Cmd\ItemData $value, $idx = NULL){
      return $this->_set(12, $value, $idx);
    }
    
    /**
     * Get all elements of <fashion>
     *
     * @return \RO\Cmd\ItemData[]
     */
    public function getFashionList(){
     return $this->_get(12);
    }
    
    /**
     * Add a new element to <fashion>
     *
     * @param \RO\Cmd\ItemData $value
     * @return \RO\Cmd\QueryUserInfo
     */
    public function addFashion(\RO\Cmd\ItemData $value){
     return $this->_add(12, $value);
    }
    
    /**
     * Check if <highrefine> has a value
     *
     * @return boolean
     */
    public function hasHighrefine(){
      return $this->_has(10);
    }
    
    /**
     * Clear <highrefine> value
     *
     * @return \RO\Cmd\QueryUserInfo
     */
    public function clearHighrefine(){
      return $this->_clear(10);
    }
    
    /**
     * Get <highrefine> value
     *
     * @param int $idx
     * @return \RO\Cmd\HighRefineData
     */
    public function getHighrefine($idx = NULL){
      return $this->_get(10, $idx);
    }
    
    /**
     * Set <highrefine> value
     *
     * @param \RO\Cmd\HighRefineData $value
     * @return \RO\Cmd\QueryUserInfo
     */
    public function setHighrefine(\RO\Cmd\HighRefineData $value, $idx = NULL){
      return $this->_set(10, $value, $idx);
    }
    
    /**
     * Get all elements of <highrefine>
     *
     * @return \RO\Cmd\HighRefineData[]
     */
    public function getHighrefineList(){
     return $this->_get(10);
    }
    
    /**
     * Add a new element to <highrefine>
     *
     * @param \RO\Cmd\HighRefineData $value
     * @return \RO\Cmd\QueryUserInfo
     */
    public function addHighrefine(\RO\Cmd\HighRefineData $value){
     return $this->_add(10, $value);
    }
    
    /**
     * Check if <partner> has a value
     *
     * @return boolean
     */
    public function hasPartner(){
      return $this->_has(11);
    }
    
    /**
     * Clear <partner> value
     *
     * @return \RO\Cmd\QueryUserInfo
     */
    public function clearPartner(){
      return $this->_clear(11);
    }
    
    /**
     * Get <partner> value
     *
     * @return string
     */
    public function getPartner(){
      return $this->_get(11);
    }
    
    /**
     * Set <partner> value
     *
     * @param string $value
     * @return \RO\Cmd\QueryUserInfo
     */
    public function setPartner( $value){
      return $this->_set(11, $value);
    }
  }
}

