<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: ActivityEvent.proto

namespace RO\Cmd {

  class AEReward extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $id = 0;
    
    /**  @var int */
    public $count = 0;
    
    /**  @var int */
    public $weight = 0;
    
    /**  @var int */
    public $minlayer = 0;
    
    /**  @var int */
    public $maxlayer = 0;
    
    /**  @var int[]  */
    public $difficultys = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.AEReward');

      // OPTIONAL UINT32 id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 count = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "count";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 weight = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "weight";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 minlayer = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "minlayer";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 maxlayer = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "maxlayer";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // REPEATED UINT32 difficultys = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "difficultys";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \RO\Cmd\AEReward
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param int $value
     * @return \RO\Cmd\AEReward
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <count> has a value
     *
     * @return boolean
     */
    public function hasCount(){
      return $this->_has(2);
    }
    
    /**
     * Clear <count> value
     *
     * @return \RO\Cmd\AEReward
     */
    public function clearCount(){
      return $this->_clear(2);
    }
    
    /**
     * Get <count> value
     *
     * @return int
     */
    public function getCount(){
      return $this->_get(2);
    }
    
    /**
     * Set <count> value
     *
     * @param int $value
     * @return \RO\Cmd\AEReward
     */
    public function setCount( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <weight> has a value
     *
     * @return boolean
     */
    public function hasWeight(){
      return $this->_has(3);
    }
    
    /**
     * Clear <weight> value
     *
     * @return \RO\Cmd\AEReward
     */
    public function clearWeight(){
      return $this->_clear(3);
    }
    
    /**
     * Get <weight> value
     *
     * @return int
     */
    public function getWeight(){
      return $this->_get(3);
    }
    
    /**
     * Set <weight> value
     *
     * @param int $value
     * @return \RO\Cmd\AEReward
     */
    public function setWeight( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <minlayer> has a value
     *
     * @return boolean
     */
    public function hasMinlayer(){
      return $this->_has(4);
    }
    
    /**
     * Clear <minlayer> value
     *
     * @return \RO\Cmd\AEReward
     */
    public function clearMinlayer(){
      return $this->_clear(4);
    }
    
    /**
     * Get <minlayer> value
     *
     * @return int
     */
    public function getMinlayer(){
      return $this->_get(4);
    }
    
    /**
     * Set <minlayer> value
     *
     * @param int $value
     * @return \RO\Cmd\AEReward
     */
    public function setMinlayer( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <maxlayer> has a value
     *
     * @return boolean
     */
    public function hasMaxlayer(){
      return $this->_has(5);
    }
    
    /**
     * Clear <maxlayer> value
     *
     * @return \RO\Cmd\AEReward
     */
    public function clearMaxlayer(){
      return $this->_clear(5);
    }
    
    /**
     * Get <maxlayer> value
     *
     * @return int
     */
    public function getMaxlayer(){
      return $this->_get(5);
    }
    
    /**
     * Set <maxlayer> value
     *
     * @param int $value
     * @return \RO\Cmd\AEReward
     */
    public function setMaxlayer( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <difficultys> has a value
     *
     * @return boolean
     */
    public function hasDifficultys(){
      return $this->_has(6);
    }
    
    /**
     * Clear <difficultys> value
     *
     * @return \RO\Cmd\AEReward
     */
    public function clearDifficultys(){
      return $this->_clear(6);
    }
    
    /**
     * Get <difficultys> value
     *
     * @param int $idx
     * @return int
     */
    public function getDifficultys($idx = NULL){
      return $this->_get(6, $idx);
    }
    
    /**
     * Set <difficultys> value
     *
     * @param int $value
     * @return \RO\Cmd\AEReward
     */
    public function setDifficultys( $value, $idx = NULL){
      return $this->_set(6, $value, $idx);
    }
    
    /**
     * Get all elements of <difficultys>
     *
     * @return int[]
     */
    public function getDifficultysList(){
     return $this->_get(6);
    }
    
    /**
     * Add a new element to <difficultys>
     *
     * @param int $value
     * @return \RO\Cmd\AEReward
     */
    public function addDifficultys( $value){
     return $this->_add(6, $value);
    }
  }
}

