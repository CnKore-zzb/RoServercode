<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: SceneMap.proto

namespace RO\Cmd {

  class HandNpcData extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $body = null;
    
    /**  @var int */
    public $head = null;
    
    /**  @var int */
    public $hair = null;
    
    /**  @var int */
    public $haircolor = null;
    
    /**  @var int */
    public $guid = null;
    
    /**  @var int */
    public $speffect = null;
    
    /**  @var string */
    public $name = null;
    
    /**  @var int */
    public $eye = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.HandNpcData');

      // OPTIONAL UINT32 body = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "body";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 head = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "head";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 hair = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "hair";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 haircolor = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "haircolor";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT64 guid = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "guid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 speffect = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "speffect";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING name = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 eye = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "eye";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <body> has a value
     *
     * @return boolean
     */
    public function hasBody(){
      return $this->_has(1);
    }
    
    /**
     * Clear <body> value
     *
     * @return \RO\Cmd\HandNpcData
     */
    public function clearBody(){
      return $this->_clear(1);
    }
    
    /**
     * Get <body> value
     *
     * @return int
     */
    public function getBody(){
      return $this->_get(1);
    }
    
    /**
     * Set <body> value
     *
     * @param int $value
     * @return \RO\Cmd\HandNpcData
     */
    public function setBody( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <head> has a value
     *
     * @return boolean
     */
    public function hasHead(){
      return $this->_has(2);
    }
    
    /**
     * Clear <head> value
     *
     * @return \RO\Cmd\HandNpcData
     */
    public function clearHead(){
      return $this->_clear(2);
    }
    
    /**
     * Get <head> value
     *
     * @return int
     */
    public function getHead(){
      return $this->_get(2);
    }
    
    /**
     * Set <head> value
     *
     * @param int $value
     * @return \RO\Cmd\HandNpcData
     */
    public function setHead( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <hair> has a value
     *
     * @return boolean
     */
    public function hasHair(){
      return $this->_has(3);
    }
    
    /**
     * Clear <hair> value
     *
     * @return \RO\Cmd\HandNpcData
     */
    public function clearHair(){
      return $this->_clear(3);
    }
    
    /**
     * Get <hair> value
     *
     * @return int
     */
    public function getHair(){
      return $this->_get(3);
    }
    
    /**
     * Set <hair> value
     *
     * @param int $value
     * @return \RO\Cmd\HandNpcData
     */
    public function setHair( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <haircolor> has a value
     *
     * @return boolean
     */
    public function hasHaircolor(){
      return $this->_has(4);
    }
    
    /**
     * Clear <haircolor> value
     *
     * @return \RO\Cmd\HandNpcData
     */
    public function clearHaircolor(){
      return $this->_clear(4);
    }
    
    /**
     * Get <haircolor> value
     *
     * @return int
     */
    public function getHaircolor(){
      return $this->_get(4);
    }
    
    /**
     * Set <haircolor> value
     *
     * @param int $value
     * @return \RO\Cmd\HandNpcData
     */
    public function setHaircolor( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <guid> has a value
     *
     * @return boolean
     */
    public function hasGuid(){
      return $this->_has(5);
    }
    
    /**
     * Clear <guid> value
     *
     * @return \RO\Cmd\HandNpcData
     */
    public function clearGuid(){
      return $this->_clear(5);
    }
    
    /**
     * Get <guid> value
     *
     * @return int
     */
    public function getGuid(){
      return $this->_get(5);
    }
    
    /**
     * Set <guid> value
     *
     * @param int $value
     * @return \RO\Cmd\HandNpcData
     */
    public function setGuid( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <speffect> has a value
     *
     * @return boolean
     */
    public function hasSpeffect(){
      return $this->_has(6);
    }
    
    /**
     * Clear <speffect> value
     *
     * @return \RO\Cmd\HandNpcData
     */
    public function clearSpeffect(){
      return $this->_clear(6);
    }
    
    /**
     * Get <speffect> value
     *
     * @return int
     */
    public function getSpeffect(){
      return $this->_get(6);
    }
    
    /**
     * Set <speffect> value
     *
     * @param int $value
     * @return \RO\Cmd\HandNpcData
     */
    public function setSpeffect( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(7);
    }
    
    /**
     * Clear <name> value
     *
     * @return \RO\Cmd\HandNpcData
     */
    public function clearName(){
      return $this->_clear(7);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(7);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \RO\Cmd\HandNpcData
     */
    public function setName( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <eye> has a value
     *
     * @return boolean
     */
    public function hasEye(){
      return $this->_has(8);
    }
    
    /**
     * Clear <eye> value
     *
     * @return \RO\Cmd\HandNpcData
     */
    public function clearEye(){
      return $this->_clear(8);
    }
    
    /**
     * Get <eye> value
     *
     * @return int
     */
    public function getEye(){
      return $this->_get(8);
    }
    
    /**
     * Set <eye> value
     *
     * @param int $value
     * @return \RO\Cmd\HandNpcData
     */
    public function setEye( $value){
      return $this->_set(8, $value);
    }
  }
}

