<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: SceneSkill.proto

namespace RO\Cmd {

  class EquipSkill extends \DrSlump\Protobuf\Message {

    /**  @var int - \RO\Cmd\Command */
    public $cmd = \RO\Cmd\Command::SCENE_USER_SKILL_PROTOCMD;
    
    /**  @var int - \RO\Cmd\SkillParam */
    public $param = \RO\Cmd\SkillParam::SKILLPARAM_EQUIPSKILL;
    
    /**  @var int */
    public $skillid = 0;
    
    /**  @var int */
    public $pos = 0;
    
    /**  @var int */
    public $sourceid = 0;
    
    /**  @var int - \RO\Cmd\ESkillShortcut */
    public $efrom = \RO\Cmd\ESkillShortcut::ESKILLSHORTCUT_MIN;
    
    /**  @var int - \RO\Cmd\ESkillShortcut */
    public $eto = \RO\Cmd\ESkillShortcut::ESKILLSHORTCUT_MIN;
    
    /**  @var int */
    public $beingid = 0;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.EquipSkill');

      // OPTIONAL ENUM cmd = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "cmd";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\Command';
      $f->default   = \RO\Cmd\Command::SCENE_USER_SKILL_PROTOCMD;
      $descriptor->addField($f);

      // OPTIONAL ENUM param = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "param";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\SkillParam';
      $f->default   = \RO\Cmd\SkillParam::SKILLPARAM_EQUIPSKILL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 skillid = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "skillid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 pos = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "pos";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 sourceid = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "sourceid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL ENUM efrom = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "efrom";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\ESkillShortcut';
      $f->default   = \RO\Cmd\ESkillShortcut::ESKILLSHORTCUT_MIN;
      $descriptor->addField($f);

      // OPTIONAL ENUM eto = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "eto";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\ESkillShortcut';
      $f->default   = \RO\Cmd\ESkillShortcut::ESKILLSHORTCUT_MIN;
      $descriptor->addField($f);

      // OPTIONAL UINT32 beingid = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "beingid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <cmd> has a value
     *
     * @return boolean
     */
    public function hasCmd(){
      return $this->_has(1);
    }
    
    /**
     * Clear <cmd> value
     *
     * @return \RO\Cmd\EquipSkill
     */
    public function clearCmd(){
      return $this->_clear(1);
    }
    
    /**
     * Get <cmd> value
     *
     * @return int - \RO\Cmd\Command
     */
    public function getCmd(){
      return $this->_get(1);
    }
    
    /**
     * Set <cmd> value
     *
     * @param int - \RO\Cmd\Command $value
     * @return \RO\Cmd\EquipSkill
     */
    public function setCmd( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <param> has a value
     *
     * @return boolean
     */
    public function hasParam(){
      return $this->_has(2);
    }
    
    /**
     * Clear <param> value
     *
     * @return \RO\Cmd\EquipSkill
     */
    public function clearParam(){
      return $this->_clear(2);
    }
    
    /**
     * Get <param> value
     *
     * @return int - \RO\Cmd\SkillParam
     */
    public function getParam(){
      return $this->_get(2);
    }
    
    /**
     * Set <param> value
     *
     * @param int - \RO\Cmd\SkillParam $value
     * @return \RO\Cmd\EquipSkill
     */
    public function setParam( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <skillid> has a value
     *
     * @return boolean
     */
    public function hasSkillid(){
      return $this->_has(3);
    }
    
    /**
     * Clear <skillid> value
     *
     * @return \RO\Cmd\EquipSkill
     */
    public function clearSkillid(){
      return $this->_clear(3);
    }
    
    /**
     * Get <skillid> value
     *
     * @return int
     */
    public function getSkillid(){
      return $this->_get(3);
    }
    
    /**
     * Set <skillid> value
     *
     * @param int $value
     * @return \RO\Cmd\EquipSkill
     */
    public function setSkillid( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <pos> has a value
     *
     * @return boolean
     */
    public function hasPos(){
      return $this->_has(4);
    }
    
    /**
     * Clear <pos> value
     *
     * @return \RO\Cmd\EquipSkill
     */
    public function clearPos(){
      return $this->_clear(4);
    }
    
    /**
     * Get <pos> value
     *
     * @return int
     */
    public function getPos(){
      return $this->_get(4);
    }
    
    /**
     * Set <pos> value
     *
     * @param int $value
     * @return \RO\Cmd\EquipSkill
     */
    public function setPos( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <sourceid> has a value
     *
     * @return boolean
     */
    public function hasSourceid(){
      return $this->_has(5);
    }
    
    /**
     * Clear <sourceid> value
     *
     * @return \RO\Cmd\EquipSkill
     */
    public function clearSourceid(){
      return $this->_clear(5);
    }
    
    /**
     * Get <sourceid> value
     *
     * @return int
     */
    public function getSourceid(){
      return $this->_get(5);
    }
    
    /**
     * Set <sourceid> value
     *
     * @param int $value
     * @return \RO\Cmd\EquipSkill
     */
    public function setSourceid( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <efrom> has a value
     *
     * @return boolean
     */
    public function hasEfrom(){
      return $this->_has(6);
    }
    
    /**
     * Clear <efrom> value
     *
     * @return \RO\Cmd\EquipSkill
     */
    public function clearEfrom(){
      return $this->_clear(6);
    }
    
    /**
     * Get <efrom> value
     *
     * @return int - \RO\Cmd\ESkillShortcut
     */
    public function getEfrom(){
      return $this->_get(6);
    }
    
    /**
     * Set <efrom> value
     *
     * @param int - \RO\Cmd\ESkillShortcut $value
     * @return \RO\Cmd\EquipSkill
     */
    public function setEfrom( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <eto> has a value
     *
     * @return boolean
     */
    public function hasEto(){
      return $this->_has(7);
    }
    
    /**
     * Clear <eto> value
     *
     * @return \RO\Cmd\EquipSkill
     */
    public function clearEto(){
      return $this->_clear(7);
    }
    
    /**
     * Get <eto> value
     *
     * @return int - \RO\Cmd\ESkillShortcut
     */
    public function getEto(){
      return $this->_get(7);
    }
    
    /**
     * Set <eto> value
     *
     * @param int - \RO\Cmd\ESkillShortcut $value
     * @return \RO\Cmd\EquipSkill
     */
    public function setEto( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <beingid> has a value
     *
     * @return boolean
     */
    public function hasBeingid(){
      return $this->_has(8);
    }
    
    /**
     * Clear <beingid> value
     *
     * @return \RO\Cmd\EquipSkill
     */
    public function clearBeingid(){
      return $this->_clear(8);
    }
    
    /**
     * Get <beingid> value
     *
     * @return int
     */
    public function getBeingid(){
      return $this->_get(8);
    }
    
    /**
     * Set <beingid> value
     *
     * @param int $value
     * @return \RO\Cmd\EquipSkill
     */
    public function setBeingid( $value){
      return $this->_set(8, $value);
    }
  }
}

