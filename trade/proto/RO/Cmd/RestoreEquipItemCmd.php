<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: SceneItem.proto

namespace RO\Cmd {

  class RestoreEquipItemCmd extends \DrSlump\Protobuf\Message {

    /**  @var int - \RO\Cmd\Command */
    public $cmd = \RO\Cmd\Command::SCENE_USER_ITEM_PROTOCMD;
    
    /**  @var int - \RO\Cmd\ItemParam */
    public $param = \RO\Cmd\ItemParam::ITEMPARAM_RESTOREEQUIP;
    
    /**  @var string */
    public $equipid = null;
    
    /**  @var boolean */
    public $strengthlv = false;
    
    /**  @var string[]  */
    public $cardids = array();
    
    /**  @var boolean */
    public $enchant = false;
    
    /**  @var boolean */
    public $upgrade = false;
    
    /**  @var boolean */
    public $strengthlv2 = false;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.RestoreEquipItemCmd');

      // OPTIONAL ENUM cmd = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "cmd";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\Command';
      $f->default   = \RO\Cmd\Command::SCENE_USER_ITEM_PROTOCMD;
      $descriptor->addField($f);

      // OPTIONAL ENUM param = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "param";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\ItemParam';
      $f->default   = \RO\Cmd\ItemParam::ITEMPARAM_RESTOREEQUIP;
      $descriptor->addField($f);

      // OPTIONAL STRING equipid = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "equipid";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL strengthlv = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "strengthlv";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = false;
      $descriptor->addField($f);

      // REPEATED STRING cardids = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "cardids";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL BOOL enchant = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "enchant";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = false;
      $descriptor->addField($f);

      // OPTIONAL BOOL upgrade = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "upgrade";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = false;
      $descriptor->addField($f);

      // OPTIONAL BOOL strengthlv2 = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "strengthlv2";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = false;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <cmd> has a value
     *
     * @return boolean
     */
    public function hasCmd(){
      return $this->_has(1);
    }
    
    /**
     * Clear <cmd> value
     *
     * @return \RO\Cmd\RestoreEquipItemCmd
     */
    public function clearCmd(){
      return $this->_clear(1);
    }
    
    /**
     * Get <cmd> value
     *
     * @return int - \RO\Cmd\Command
     */
    public function getCmd(){
      return $this->_get(1);
    }
    
    /**
     * Set <cmd> value
     *
     * @param int - \RO\Cmd\Command $value
     * @return \RO\Cmd\RestoreEquipItemCmd
     */
    public function setCmd( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <param> has a value
     *
     * @return boolean
     */
    public function hasParam(){
      return $this->_has(2);
    }
    
    /**
     * Clear <param> value
     *
     * @return \RO\Cmd\RestoreEquipItemCmd
     */
    public function clearParam(){
      return $this->_clear(2);
    }
    
    /**
     * Get <param> value
     *
     * @return int - \RO\Cmd\ItemParam
     */
    public function getParam(){
      return $this->_get(2);
    }
    
    /**
     * Set <param> value
     *
     * @param int - \RO\Cmd\ItemParam $value
     * @return \RO\Cmd\RestoreEquipItemCmd
     */
    public function setParam( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <equipid> has a value
     *
     * @return boolean
     */
    public function hasEquipid(){
      return $this->_has(3);
    }
    
    /**
     * Clear <equipid> value
     *
     * @return \RO\Cmd\RestoreEquipItemCmd
     */
    public function clearEquipid(){
      return $this->_clear(3);
    }
    
    /**
     * Get <equipid> value
     *
     * @return string
     */
    public function getEquipid(){
      return $this->_get(3);
    }
    
    /**
     * Set <equipid> value
     *
     * @param string $value
     * @return \RO\Cmd\RestoreEquipItemCmd
     */
    public function setEquipid( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <strengthlv> has a value
     *
     * @return boolean
     */
    public function hasStrengthlv(){
      return $this->_has(4);
    }
    
    /**
     * Clear <strengthlv> value
     *
     * @return \RO\Cmd\RestoreEquipItemCmd
     */
    public function clearStrengthlv(){
      return $this->_clear(4);
    }
    
    /**
     * Get <strengthlv> value
     *
     * @return boolean
     */
    public function getStrengthlv(){
      return $this->_get(4);
    }
    
    /**
     * Set <strengthlv> value
     *
     * @param boolean $value
     * @return \RO\Cmd\RestoreEquipItemCmd
     */
    public function setStrengthlv( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <cardids> has a value
     *
     * @return boolean
     */
    public function hasCardids(){
      return $this->_has(5);
    }
    
    /**
     * Clear <cardids> value
     *
     * @return \RO\Cmd\RestoreEquipItemCmd
     */
    public function clearCardids(){
      return $this->_clear(5);
    }
    
    /**
     * Get <cardids> value
     *
     * @param int $idx
     * @return string
     */
    public function getCardids($idx = NULL){
      return $this->_get(5, $idx);
    }
    
    /**
     * Set <cardids> value
     *
     * @param string $value
     * @return \RO\Cmd\RestoreEquipItemCmd
     */
    public function setCardids( $value, $idx = NULL){
      return $this->_set(5, $value, $idx);
    }
    
    /**
     * Get all elements of <cardids>
     *
     * @return string[]
     */
    public function getCardidsList(){
     return $this->_get(5);
    }
    
    /**
     * Add a new element to <cardids>
     *
     * @param string $value
     * @return \RO\Cmd\RestoreEquipItemCmd
     */
    public function addCardids( $value){
     return $this->_add(5, $value);
    }
    
    /**
     * Check if <enchant> has a value
     *
     * @return boolean
     */
    public function hasEnchant(){
      return $this->_has(6);
    }
    
    /**
     * Clear <enchant> value
     *
     * @return \RO\Cmd\RestoreEquipItemCmd
     */
    public function clearEnchant(){
      return $this->_clear(6);
    }
    
    /**
     * Get <enchant> value
     *
     * @return boolean
     */
    public function getEnchant(){
      return $this->_get(6);
    }
    
    /**
     * Set <enchant> value
     *
     * @param boolean $value
     * @return \RO\Cmd\RestoreEquipItemCmd
     */
    public function setEnchant( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <upgrade> has a value
     *
     * @return boolean
     */
    public function hasUpgrade(){
      return $this->_has(7);
    }
    
    /**
     * Clear <upgrade> value
     *
     * @return \RO\Cmd\RestoreEquipItemCmd
     */
    public function clearUpgrade(){
      return $this->_clear(7);
    }
    
    /**
     * Get <upgrade> value
     *
     * @return boolean
     */
    public function getUpgrade(){
      return $this->_get(7);
    }
    
    /**
     * Set <upgrade> value
     *
     * @param boolean $value
     * @return \RO\Cmd\RestoreEquipItemCmd
     */
    public function setUpgrade( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <strengthlv2> has a value
     *
     * @return boolean
     */
    public function hasStrengthlv2(){
      return $this->_has(8);
    }
    
    /**
     * Clear <strengthlv2> value
     *
     * @return \RO\Cmd\RestoreEquipItemCmd
     */
    public function clearStrengthlv2(){
      return $this->_clear(8);
    }
    
    /**
     * Get <strengthlv2> value
     *
     * @return boolean
     */
    public function getStrengthlv2(){
      return $this->_get(8);
    }
    
    /**
     * Set <strengthlv2> value
     *
     * @param boolean $value
     * @return \RO\Cmd\RestoreEquipItemCmd
     */
    public function setStrengthlv2( $value){
      return $this->_set(8, $value);
    }
  }
}

