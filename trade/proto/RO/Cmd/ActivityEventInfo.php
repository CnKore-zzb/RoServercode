<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: ActivityEvent.proto

namespace RO\Cmd {

  class ActivityEventInfo extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $id = 0;
    
    /**  @var int */
    public $begintime = 0;
    
    /**  @var int */
    public $endtime = 0;
    
    /**  @var int - \RO\Cmd\EActivityEventType */
    public $type = null;
    
    /**  @var \RO\Cmd\AEFreeTransferInfo */
    public $freetransferinfo = null;
    
    /**  @var \RO\Cmd\AESummonInfo */
    public $summoninfo = null;
    
    /**  @var \RO\Cmd\AERewardInfo */
    public $rewardinfo = null;
    
    /**  @var \RO\Cmd\AEResetInfo */
    public $resetinfo = null;
    
    /**  @var \RO\Cmd\AELotteryDiscount */
    public $lotterydiscount = null;
    
    /**  @var \RO\Cmd\AELotteryNpc */
    public $lotterynpc = null;
    
    /**  @var \RO\Cmd\AELotteryBanner */
    public $lotterybanner = null;
    
    /**  @var \RO\Cmd\AEGuildBuildingSubmitInfo */
    public $gbuildingsubmitinfo = null;
    
    /**  @var \RO\Cmd\AEShopInfo */
    public $shopinfo = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.ActivityEventInfo');

      // OPTIONAL UINT64 id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT64 begintime = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "begintime";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT64 endtime = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "endtime";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL ENUM type = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\EActivityEventType';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE freetransferinfo = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "freetransferinfo";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\AEFreeTransferInfo';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE summoninfo = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "summoninfo";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\AESummonInfo';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE rewardinfo = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "rewardinfo";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\AERewardInfo';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE resetinfo = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "resetinfo";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\AEResetInfo';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE lotterydiscount = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "lotterydiscount";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\AELotteryDiscount';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE lotterynpc = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "lotterynpc";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\AELotteryNpc';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE lotterybanner = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "lotterybanner";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\AELotteryBanner';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE gbuildingsubmitinfo = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "gbuildingsubmitinfo";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\AEGuildBuildingSubmitInfo';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE shopinfo = 13
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 13;
      $f->name      = "shopinfo";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\AEShopInfo';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \RO\Cmd\ActivityEventInfo
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param int $value
     * @return \RO\Cmd\ActivityEventInfo
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <begintime> has a value
     *
     * @return boolean
     */
    public function hasBegintime(){
      return $this->_has(2);
    }
    
    /**
     * Clear <begintime> value
     *
     * @return \RO\Cmd\ActivityEventInfo
     */
    public function clearBegintime(){
      return $this->_clear(2);
    }
    
    /**
     * Get <begintime> value
     *
     * @return int
     */
    public function getBegintime(){
      return $this->_get(2);
    }
    
    /**
     * Set <begintime> value
     *
     * @param int $value
     * @return \RO\Cmd\ActivityEventInfo
     */
    public function setBegintime( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <endtime> has a value
     *
     * @return boolean
     */
    public function hasEndtime(){
      return $this->_has(3);
    }
    
    /**
     * Clear <endtime> value
     *
     * @return \RO\Cmd\ActivityEventInfo
     */
    public function clearEndtime(){
      return $this->_clear(3);
    }
    
    /**
     * Get <endtime> value
     *
     * @return int
     */
    public function getEndtime(){
      return $this->_get(3);
    }
    
    /**
     * Set <endtime> value
     *
     * @param int $value
     * @return \RO\Cmd\ActivityEventInfo
     */
    public function setEndtime( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(4);
    }
    
    /**
     * Clear <type> value
     *
     * @return \RO\Cmd\ActivityEventInfo
     */
    public function clearType(){
      return $this->_clear(4);
    }
    
    /**
     * Get <type> value
     *
     * @return int - \RO\Cmd\EActivityEventType
     */
    public function getType(){
      return $this->_get(4);
    }
    
    /**
     * Set <type> value
     *
     * @param int - \RO\Cmd\EActivityEventType $value
     * @return \RO\Cmd\ActivityEventInfo
     */
    public function setType( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <freetransferinfo> has a value
     *
     * @return boolean
     */
    public function hasFreetransferinfo(){
      return $this->_has(5);
    }
    
    /**
     * Clear <freetransferinfo> value
     *
     * @return \RO\Cmd\ActivityEventInfo
     */
    public function clearFreetransferinfo(){
      return $this->_clear(5);
    }
    
    /**
     * Get <freetransferinfo> value
     *
     * @return \RO\Cmd\AEFreeTransferInfo
     */
    public function getFreetransferinfo(){
      return $this->_get(5);
    }
    
    /**
     * Set <freetransferinfo> value
     *
     * @param \RO\Cmd\AEFreeTransferInfo $value
     * @return \RO\Cmd\ActivityEventInfo
     */
    public function setFreetransferinfo(\RO\Cmd\AEFreeTransferInfo $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <summoninfo> has a value
     *
     * @return boolean
     */
    public function hasSummoninfo(){
      return $this->_has(6);
    }
    
    /**
     * Clear <summoninfo> value
     *
     * @return \RO\Cmd\ActivityEventInfo
     */
    public function clearSummoninfo(){
      return $this->_clear(6);
    }
    
    /**
     * Get <summoninfo> value
     *
     * @return \RO\Cmd\AESummonInfo
     */
    public function getSummoninfo(){
      return $this->_get(6);
    }
    
    /**
     * Set <summoninfo> value
     *
     * @param \RO\Cmd\AESummonInfo $value
     * @return \RO\Cmd\ActivityEventInfo
     */
    public function setSummoninfo(\RO\Cmd\AESummonInfo $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <rewardinfo> has a value
     *
     * @return boolean
     */
    public function hasRewardinfo(){
      return $this->_has(7);
    }
    
    /**
     * Clear <rewardinfo> value
     *
     * @return \RO\Cmd\ActivityEventInfo
     */
    public function clearRewardinfo(){
      return $this->_clear(7);
    }
    
    /**
     * Get <rewardinfo> value
     *
     * @return \RO\Cmd\AERewardInfo
     */
    public function getRewardinfo(){
      return $this->_get(7);
    }
    
    /**
     * Set <rewardinfo> value
     *
     * @param \RO\Cmd\AERewardInfo $value
     * @return \RO\Cmd\ActivityEventInfo
     */
    public function setRewardinfo(\RO\Cmd\AERewardInfo $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <resetinfo> has a value
     *
     * @return boolean
     */
    public function hasResetinfo(){
      return $this->_has(8);
    }
    
    /**
     * Clear <resetinfo> value
     *
     * @return \RO\Cmd\ActivityEventInfo
     */
    public function clearResetinfo(){
      return $this->_clear(8);
    }
    
    /**
     * Get <resetinfo> value
     *
     * @return \RO\Cmd\AEResetInfo
     */
    public function getResetinfo(){
      return $this->_get(8);
    }
    
    /**
     * Set <resetinfo> value
     *
     * @param \RO\Cmd\AEResetInfo $value
     * @return \RO\Cmd\ActivityEventInfo
     */
    public function setResetinfo(\RO\Cmd\AEResetInfo $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <lotterydiscount> has a value
     *
     * @return boolean
     */
    public function hasLotterydiscount(){
      return $this->_has(9);
    }
    
    /**
     * Clear <lotterydiscount> value
     *
     * @return \RO\Cmd\ActivityEventInfo
     */
    public function clearLotterydiscount(){
      return $this->_clear(9);
    }
    
    /**
     * Get <lotterydiscount> value
     *
     * @return \RO\Cmd\AELotteryDiscount
     */
    public function getLotterydiscount(){
      return $this->_get(9);
    }
    
    /**
     * Set <lotterydiscount> value
     *
     * @param \RO\Cmd\AELotteryDiscount $value
     * @return \RO\Cmd\ActivityEventInfo
     */
    public function setLotterydiscount(\RO\Cmd\AELotteryDiscount $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <lotterynpc> has a value
     *
     * @return boolean
     */
    public function hasLotterynpc(){
      return $this->_has(10);
    }
    
    /**
     * Clear <lotterynpc> value
     *
     * @return \RO\Cmd\ActivityEventInfo
     */
    public function clearLotterynpc(){
      return $this->_clear(10);
    }
    
    /**
     * Get <lotterynpc> value
     *
     * @return \RO\Cmd\AELotteryNpc
     */
    public function getLotterynpc(){
      return $this->_get(10);
    }
    
    /**
     * Set <lotterynpc> value
     *
     * @param \RO\Cmd\AELotteryNpc $value
     * @return \RO\Cmd\ActivityEventInfo
     */
    public function setLotterynpc(\RO\Cmd\AELotteryNpc $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <lotterybanner> has a value
     *
     * @return boolean
     */
    public function hasLotterybanner(){
      return $this->_has(11);
    }
    
    /**
     * Clear <lotterybanner> value
     *
     * @return \RO\Cmd\ActivityEventInfo
     */
    public function clearLotterybanner(){
      return $this->_clear(11);
    }
    
    /**
     * Get <lotterybanner> value
     *
     * @return \RO\Cmd\AELotteryBanner
     */
    public function getLotterybanner(){
      return $this->_get(11);
    }
    
    /**
     * Set <lotterybanner> value
     *
     * @param \RO\Cmd\AELotteryBanner $value
     * @return \RO\Cmd\ActivityEventInfo
     */
    public function setLotterybanner(\RO\Cmd\AELotteryBanner $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <gbuildingsubmitinfo> has a value
     *
     * @return boolean
     */
    public function hasGbuildingsubmitinfo(){
      return $this->_has(12);
    }
    
    /**
     * Clear <gbuildingsubmitinfo> value
     *
     * @return \RO\Cmd\ActivityEventInfo
     */
    public function clearGbuildingsubmitinfo(){
      return $this->_clear(12);
    }
    
    /**
     * Get <gbuildingsubmitinfo> value
     *
     * @return \RO\Cmd\AEGuildBuildingSubmitInfo
     */
    public function getGbuildingsubmitinfo(){
      return $this->_get(12);
    }
    
    /**
     * Set <gbuildingsubmitinfo> value
     *
     * @param \RO\Cmd\AEGuildBuildingSubmitInfo $value
     * @return \RO\Cmd\ActivityEventInfo
     */
    public function setGbuildingsubmitinfo(\RO\Cmd\AEGuildBuildingSubmitInfo $value){
      return $this->_set(12, $value);
    }
    
    /**
     * Check if <shopinfo> has a value
     *
     * @return boolean
     */
    public function hasShopinfo(){
      return $this->_has(13);
    }
    
    /**
     * Clear <shopinfo> value
     *
     * @return \RO\Cmd\ActivityEventInfo
     */
    public function clearShopinfo(){
      return $this->_clear(13);
    }
    
    /**
     * Get <shopinfo> value
     *
     * @return \RO\Cmd\AEShopInfo
     */
    public function getShopinfo(){
      return $this->_get(13);
    }
    
    /**
     * Set <shopinfo> value
     *
     * @param \RO\Cmd\AEShopInfo $value
     * @return \RO\Cmd\ActivityEventInfo
     */
    public function setShopinfo(\RO\Cmd\AEShopInfo $value){
      return $this->_set(13, $value);
    }
  }
}

