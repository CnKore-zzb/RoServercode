<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: SceneQuest.proto

namespace RO\Cmd {

  class QuestPreview extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $questid = 0;
    
    /**  @var string */
    public $name = null;
    
    /**  @var boolean */
    public $complete = false;
    
    /**  @var int */
    public $RewardGroup = 0;
    
    /**  @var int[]  */
    public $allrewardid = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.QuestPreview');

      // OPTIONAL UINT32 questid = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "questid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL STRING name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL complete = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "complete";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = false;
      $descriptor->addField($f);

      // OPTIONAL UINT32 RewardGroup = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "RewardGroup";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // REPEATED UINT32 allrewardid = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "allrewardid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <questid> has a value
     *
     * @return boolean
     */
    public function hasQuestid(){
      return $this->_has(1);
    }
    
    /**
     * Clear <questid> value
     *
     * @return \RO\Cmd\QuestPreview
     */
    public function clearQuestid(){
      return $this->_clear(1);
    }
    
    /**
     * Get <questid> value
     *
     * @return int
     */
    public function getQuestid(){
      return $this->_get(1);
    }
    
    /**
     * Set <questid> value
     *
     * @param int $value
     * @return \RO\Cmd\QuestPreview
     */
    public function setQuestid( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <name> value
     *
     * @return \RO\Cmd\QuestPreview
     */
    public function clearName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(2);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \RO\Cmd\QuestPreview
     */
    public function setName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <complete> has a value
     *
     * @return boolean
     */
    public function hasComplete(){
      return $this->_has(3);
    }
    
    /**
     * Clear <complete> value
     *
     * @return \RO\Cmd\QuestPreview
     */
    public function clearComplete(){
      return $this->_clear(3);
    }
    
    /**
     * Get <complete> value
     *
     * @return boolean
     */
    public function getComplete(){
      return $this->_get(3);
    }
    
    /**
     * Set <complete> value
     *
     * @param boolean $value
     * @return \RO\Cmd\QuestPreview
     */
    public function setComplete( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <RewardGroup> has a value
     *
     * @return boolean
     */
    public function hasRewardGroup(){
      return $this->_has(4);
    }
    
    /**
     * Clear <RewardGroup> value
     *
     * @return \RO\Cmd\QuestPreview
     */
    public function clearRewardGroup(){
      return $this->_clear(4);
    }
    
    /**
     * Get <RewardGroup> value
     *
     * @return int
     */
    public function getRewardGroup(){
      return $this->_get(4);
    }
    
    /**
     * Set <RewardGroup> value
     *
     * @param int $value
     * @return \RO\Cmd\QuestPreview
     */
    public function setRewardGroup( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <allrewardid> has a value
     *
     * @return boolean
     */
    public function hasAllrewardid(){
      return $this->_has(5);
    }
    
    /**
     * Clear <allrewardid> value
     *
     * @return \RO\Cmd\QuestPreview
     */
    public function clearAllrewardid(){
      return $this->_clear(5);
    }
    
    /**
     * Get <allrewardid> value
     *
     * @param int $idx
     * @return int
     */
    public function getAllrewardid($idx = NULL){
      return $this->_get(5, $idx);
    }
    
    /**
     * Set <allrewardid> value
     *
     * @param int $value
     * @return \RO\Cmd\QuestPreview
     */
    public function setAllrewardid( $value, $idx = NULL){
      return $this->_set(5, $value, $idx);
    }
    
    /**
     * Get all elements of <allrewardid>
     *
     * @return int[]
     */
    public function getAllrewardidList(){
     return $this->_get(5);
    }
    
    /**
     * Add a new element to <allrewardid>
     *
     * @param int $value
     * @return \RO\Cmd\QuestPreview
     */
    public function addAllrewardid( $value){
     return $this->_add(5, $value);
    }
  }
}

