<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: RecordCmd.proto

namespace RO\Cmd {

  class BlobFood extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $cookerexp = null;
    
    /**  @var int */
    public $cookerlv = null;
    
    /**  @var int */
    public $tasterexp = null;
    
    /**  @var int */
    public $tasterlv = null;
    
    /**  @var int */
    public $savehp = null;
    
    /**  @var int */
    public $savesp = null;
    
    /**  @var int */
    public $height = null;
    
    /**  @var int */
    public $weight = null;
    
    /**  @var int[]  */
    public $recipes = array();
    
    /**  @var \RO\Cmd\FoodManualData[]  */
    public $manualdata = array();
    
    /**  @var \RO\Cmd\FoodItemInfo[]  */
    public $iteminfo = array();
    
    /**  @var int */
    public $satiety = null;
    
    /**  @var int[]  */
    public $last_cooked_ids = array();
    
    /**  @var \RO\Cmd\FoodLimitInfo[]  */
    public $limitinfo = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.BlobFood');

      // OPTIONAL UINT32 cookerexp = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "cookerexp";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 cookerlv = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "cookerlv";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 tasterexp = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "tasterexp";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 tasterlv = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "tasterlv";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT64 savehp = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "savehp";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT64 savesp = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "savesp";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 height = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "height";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 weight = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "weight";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED UINT32 recipes = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "recipes";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED MESSAGE manualdata = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "manualdata";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\FoodManualData';
      $descriptor->addField($f);

      // REPEATED MESSAGE iteminfo = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "iteminfo";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\FoodItemInfo';
      $descriptor->addField($f);

      // OPTIONAL UINT32 satiety = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "satiety";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED UINT32 last_cooked_ids = 13
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 13;
      $f->name      = "last_cooked_ids";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED MESSAGE limitinfo = 14
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 14;
      $f->name      = "limitinfo";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\FoodLimitInfo';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <cookerexp> has a value
     *
     * @return boolean
     */
    public function hasCookerexp(){
      return $this->_has(1);
    }
    
    /**
     * Clear <cookerexp> value
     *
     * @return \RO\Cmd\BlobFood
     */
    public function clearCookerexp(){
      return $this->_clear(1);
    }
    
    /**
     * Get <cookerexp> value
     *
     * @return int
     */
    public function getCookerexp(){
      return $this->_get(1);
    }
    
    /**
     * Set <cookerexp> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobFood
     */
    public function setCookerexp( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <cookerlv> has a value
     *
     * @return boolean
     */
    public function hasCookerlv(){
      return $this->_has(2);
    }
    
    /**
     * Clear <cookerlv> value
     *
     * @return \RO\Cmd\BlobFood
     */
    public function clearCookerlv(){
      return $this->_clear(2);
    }
    
    /**
     * Get <cookerlv> value
     *
     * @return int
     */
    public function getCookerlv(){
      return $this->_get(2);
    }
    
    /**
     * Set <cookerlv> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobFood
     */
    public function setCookerlv( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <tasterexp> has a value
     *
     * @return boolean
     */
    public function hasTasterexp(){
      return $this->_has(3);
    }
    
    /**
     * Clear <tasterexp> value
     *
     * @return \RO\Cmd\BlobFood
     */
    public function clearTasterexp(){
      return $this->_clear(3);
    }
    
    /**
     * Get <tasterexp> value
     *
     * @return int
     */
    public function getTasterexp(){
      return $this->_get(3);
    }
    
    /**
     * Set <tasterexp> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobFood
     */
    public function setTasterexp( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <tasterlv> has a value
     *
     * @return boolean
     */
    public function hasTasterlv(){
      return $this->_has(4);
    }
    
    /**
     * Clear <tasterlv> value
     *
     * @return \RO\Cmd\BlobFood
     */
    public function clearTasterlv(){
      return $this->_clear(4);
    }
    
    /**
     * Get <tasterlv> value
     *
     * @return int
     */
    public function getTasterlv(){
      return $this->_get(4);
    }
    
    /**
     * Set <tasterlv> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobFood
     */
    public function setTasterlv( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <savehp> has a value
     *
     * @return boolean
     */
    public function hasSavehp(){
      return $this->_has(5);
    }
    
    /**
     * Clear <savehp> value
     *
     * @return \RO\Cmd\BlobFood
     */
    public function clearSavehp(){
      return $this->_clear(5);
    }
    
    /**
     * Get <savehp> value
     *
     * @return int
     */
    public function getSavehp(){
      return $this->_get(5);
    }
    
    /**
     * Set <savehp> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobFood
     */
    public function setSavehp( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <savesp> has a value
     *
     * @return boolean
     */
    public function hasSavesp(){
      return $this->_has(6);
    }
    
    /**
     * Clear <savesp> value
     *
     * @return \RO\Cmd\BlobFood
     */
    public function clearSavesp(){
      return $this->_clear(6);
    }
    
    /**
     * Get <savesp> value
     *
     * @return int
     */
    public function getSavesp(){
      return $this->_get(6);
    }
    
    /**
     * Set <savesp> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobFood
     */
    public function setSavesp( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <height> has a value
     *
     * @return boolean
     */
    public function hasHeight(){
      return $this->_has(7);
    }
    
    /**
     * Clear <height> value
     *
     * @return \RO\Cmd\BlobFood
     */
    public function clearHeight(){
      return $this->_clear(7);
    }
    
    /**
     * Get <height> value
     *
     * @return int
     */
    public function getHeight(){
      return $this->_get(7);
    }
    
    /**
     * Set <height> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobFood
     */
    public function setHeight( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <weight> has a value
     *
     * @return boolean
     */
    public function hasWeight(){
      return $this->_has(8);
    }
    
    /**
     * Clear <weight> value
     *
     * @return \RO\Cmd\BlobFood
     */
    public function clearWeight(){
      return $this->_clear(8);
    }
    
    /**
     * Get <weight> value
     *
     * @return int
     */
    public function getWeight(){
      return $this->_get(8);
    }
    
    /**
     * Set <weight> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobFood
     */
    public function setWeight( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <recipes> has a value
     *
     * @return boolean
     */
    public function hasRecipes(){
      return $this->_has(9);
    }
    
    /**
     * Clear <recipes> value
     *
     * @return \RO\Cmd\BlobFood
     */
    public function clearRecipes(){
      return $this->_clear(9);
    }
    
    /**
     * Get <recipes> value
     *
     * @param int $idx
     * @return int
     */
    public function getRecipes($idx = NULL){
      return $this->_get(9, $idx);
    }
    
    /**
     * Set <recipes> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobFood
     */
    public function setRecipes( $value, $idx = NULL){
      return $this->_set(9, $value, $idx);
    }
    
    /**
     * Get all elements of <recipes>
     *
     * @return int[]
     */
    public function getRecipesList(){
     return $this->_get(9);
    }
    
    /**
     * Add a new element to <recipes>
     *
     * @param int $value
     * @return \RO\Cmd\BlobFood
     */
    public function addRecipes( $value){
     return $this->_add(9, $value);
    }
    
    /**
     * Check if <manualdata> has a value
     *
     * @return boolean
     */
    public function hasManualdata(){
      return $this->_has(10);
    }
    
    /**
     * Clear <manualdata> value
     *
     * @return \RO\Cmd\BlobFood
     */
    public function clearManualdata(){
      return $this->_clear(10);
    }
    
    /**
     * Get <manualdata> value
     *
     * @param int $idx
     * @return \RO\Cmd\FoodManualData
     */
    public function getManualdata($idx = NULL){
      return $this->_get(10, $idx);
    }
    
    /**
     * Set <manualdata> value
     *
     * @param \RO\Cmd\FoodManualData $value
     * @return \RO\Cmd\BlobFood
     */
    public function setManualdata(\RO\Cmd\FoodManualData $value, $idx = NULL){
      return $this->_set(10, $value, $idx);
    }
    
    /**
     * Get all elements of <manualdata>
     *
     * @return \RO\Cmd\FoodManualData[]
     */
    public function getManualdataList(){
     return $this->_get(10);
    }
    
    /**
     * Add a new element to <manualdata>
     *
     * @param \RO\Cmd\FoodManualData $value
     * @return \RO\Cmd\BlobFood
     */
    public function addManualdata(\RO\Cmd\FoodManualData $value){
     return $this->_add(10, $value);
    }
    
    /**
     * Check if <iteminfo> has a value
     *
     * @return boolean
     */
    public function hasIteminfo(){
      return $this->_has(11);
    }
    
    /**
     * Clear <iteminfo> value
     *
     * @return \RO\Cmd\BlobFood
     */
    public function clearIteminfo(){
      return $this->_clear(11);
    }
    
    /**
     * Get <iteminfo> value
     *
     * @param int $idx
     * @return \RO\Cmd\FoodItemInfo
     */
    public function getIteminfo($idx = NULL){
      return $this->_get(11, $idx);
    }
    
    /**
     * Set <iteminfo> value
     *
     * @param \RO\Cmd\FoodItemInfo $value
     * @return \RO\Cmd\BlobFood
     */
    public function setIteminfo(\RO\Cmd\FoodItemInfo $value, $idx = NULL){
      return $this->_set(11, $value, $idx);
    }
    
    /**
     * Get all elements of <iteminfo>
     *
     * @return \RO\Cmd\FoodItemInfo[]
     */
    public function getIteminfoList(){
     return $this->_get(11);
    }
    
    /**
     * Add a new element to <iteminfo>
     *
     * @param \RO\Cmd\FoodItemInfo $value
     * @return \RO\Cmd\BlobFood
     */
    public function addIteminfo(\RO\Cmd\FoodItemInfo $value){
     return $this->_add(11, $value);
    }
    
    /**
     * Check if <satiety> has a value
     *
     * @return boolean
     */
    public function hasSatiety(){
      return $this->_has(12);
    }
    
    /**
     * Clear <satiety> value
     *
     * @return \RO\Cmd\BlobFood
     */
    public function clearSatiety(){
      return $this->_clear(12);
    }
    
    /**
     * Get <satiety> value
     *
     * @return int
     */
    public function getSatiety(){
      return $this->_get(12);
    }
    
    /**
     * Set <satiety> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobFood
     */
    public function setSatiety( $value){
      return $this->_set(12, $value);
    }
    
    /**
     * Check if <last_cooked_ids> has a value
     *
     * @return boolean
     */
    public function hasLastCookedIds(){
      return $this->_has(13);
    }
    
    /**
     * Clear <last_cooked_ids> value
     *
     * @return \RO\Cmd\BlobFood
     */
    public function clearLastCookedIds(){
      return $this->_clear(13);
    }
    
    /**
     * Get <last_cooked_ids> value
     *
     * @param int $idx
     * @return int
     */
    public function getLastCookedIds($idx = NULL){
      return $this->_get(13, $idx);
    }
    
    /**
     * Set <last_cooked_ids> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobFood
     */
    public function setLastCookedIds( $value, $idx = NULL){
      return $this->_set(13, $value, $idx);
    }
    
    /**
     * Get all elements of <last_cooked_ids>
     *
     * @return int[]
     */
    public function getLastCookedIdsList(){
     return $this->_get(13);
    }
    
    /**
     * Add a new element to <last_cooked_ids>
     *
     * @param int $value
     * @return \RO\Cmd\BlobFood
     */
    public function addLastCookedIds( $value){
     return $this->_add(13, $value);
    }
    
    /**
     * Check if <limitinfo> has a value
     *
     * @return boolean
     */
    public function hasLimitinfo(){
      return $this->_has(14);
    }
    
    /**
     * Clear <limitinfo> value
     *
     * @return \RO\Cmd\BlobFood
     */
    public function clearLimitinfo(){
      return $this->_clear(14);
    }
    
    /**
     * Get <limitinfo> value
     *
     * @param int $idx
     * @return \RO\Cmd\FoodLimitInfo
     */
    public function getLimitinfo($idx = NULL){
      return $this->_get(14, $idx);
    }
    
    /**
     * Set <limitinfo> value
     *
     * @param \RO\Cmd\FoodLimitInfo $value
     * @return \RO\Cmd\BlobFood
     */
    public function setLimitinfo(\RO\Cmd\FoodLimitInfo $value, $idx = NULL){
      return $this->_set(14, $value, $idx);
    }
    
    /**
     * Get all elements of <limitinfo>
     *
     * @return \RO\Cmd\FoodLimitInfo[]
     */
    public function getLimitinfoList(){
     return $this->_get(14);
    }
    
    /**
     * Add a new element to <limitinfo>
     *
     * @param \RO\Cmd\FoodLimitInfo $value
     * @return \RO\Cmd\BlobFood
     */
    public function addLimitinfo(\RO\Cmd\FoodLimitInfo $value){
     return $this->_add(14, $value);
    }
  }
}

