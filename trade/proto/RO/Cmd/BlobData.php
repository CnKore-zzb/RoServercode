<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: RecordCmd.proto

namespace RO\Cmd {

  class BlobData extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $version = 0;
    
    /**  @var \RO\Cmd\BlobUser */
    public $user = null;
    
    /**  @var \RO\Cmd\BlobFighter */
    public $fighter = null;
    
    /**  @var \RO\Cmd\BlobStage */
    public $stage = null;
    
    /**  @var \RO\Cmd\BlobQuestNpc */
    public $questnpc = null;
    
    /**  @var \RO\Cmd\BlobBuffer */
    public $buffer = null;
    
    /**  @var \RO\Cmd\BlobPortrait */
    public $portrait = null;
    
    /**  @var \RO\Cmd\BlobHair */
    public $hair = null;
    
    /**  @var \RO\Cmd\BlobGears */
    public $gear = null;
    
    /**  @var \RO\Cmd\BlobTips */
    public $tip = null;
    
    /**  @var \RO\Cmd\BlobFollower */
    public $follower = null;
    
    /**  @var \RO\Cmd\BlobCDTime */
    public $cd = null;
    
    /**  @var \RO\Cmd\BlobShortcut */
    public $shortcut = null;
    
    /**  @var \RO\Cmd\BlobGMEffects */
    public $effect = null;
    
    /**  @var \RO\Cmd\BlobFreyja */
    public $freyja = null;
    
    /**  @var \RO\Cmd\BlobLaboratory */
    public $lab = null;
    
    /**  @var \RO\Cmd\BlobScenery */
    public $scenery = null;
    
    /**  @var \RO\Cmd\BlobCarrier */
    public $carrier = null;
    
    /**  @var \RO\Cmd\BlobMenu */
    public $menu = null;
    
    /**  @var \RO\Cmd\BlobShopGotItem */
    public $shop = null;
    
    /**  @var \RO\Cmd\BlobKnownMaps */
    public $knownmap = null;
    
    /**  @var \RO\Cmd\BlobInter */
    public $iter = null;
    
    /**  @var \RO\Cmd\BlobHands */
    public $hand = null;
    
    /**  @var \RO\Cmd\BlobShow */
    public $show = null;
    
    /**  @var \RO\Cmd\BlobTrace */
    public $trace = null;
    
    /**  @var \RO\Cmd\BlobDojo */
    public $dojo = null;
    
    /**  @var \RO\Cmd\BlobPack */
    public $pack = null;
    
    /**  @var \RO\Cmd\BlobQuest */
    public $quest = null;
    
    /**  @var \RO\Cmd\BlobTitle */
    public $title = null;
    
    /**  @var \RO\Cmd\BlobLine */
    public $line = null;
    
    /**  @var \RO\Cmd\BlobPet */
    public $pet = null;
    
    /**  @var \RO\Cmd\BlobVar */
    public $var = null;
    
    /**  @var \RO\Cmd\BlobChatMsg */
    public $chatmsg = null;
    
    /**  @var \RO\Cmd\BlobUserTower */
    public $tower = null;
    
    /**  @var \RO\Cmd\BlobSeal */
    public $seal = null;
    
    /**  @var \RO\Cmd\BlobManual */
    public $manual = null;
    
    /**  @var \RO\Cmd\BlobFirstActionDone */
    public $action = null;
    
    /**  @var \RO\Cmd\BlobAttr */
    public $attr = null;
    
    /**  @var \RO\Cmd\BlobOption */
    public $opt = null;
    
    /**  @var \RO\Cmd\BlobHandNpc */
    public $handnpc = null;
    
    /**  @var \RO\Cmd\BlobCamera */
    public $camera = null;
    
    /**  @var \RO\Cmd\BlobZone */
    public $zone = null;
    
    /**  @var \RO\Cmd\BlobGuild */
    public $guild = null;
    
    /**  @var \RO\Cmd\BlobTeam */
    public $team = null;
    
    /**  @var \RO\Cmd\BlobUserZone */
    public $userzone = null;
    
    /**  @var \RO\Cmd\BlobSpEffect */
    public $speffect = null;
    
    /**  @var \RO\Cmd\BlobDeposit */
    public $deposit = null;
    
    /**  @var \RO\Cmd\BlobActivity */
    public $activity = null;
    
    /**  @var \RO\Cmd\BlobChat */
    public $chat = null;
    
    /**  @var \RO\Cmd\BlobBattle */
    public $battle = null;
    
    /**  @var \RO\Cmd\BlobStatVar */
    public $statvar = null;
    
    /**  @var \RO\Cmd\BlobSeeNpc */
    public $seenpc = null;
    
    /**  @var \RO\Cmd\BlobWeaponPet */
    public $weaponpet = null;
    
    /**  @var \RO\Cmd\BlobTicket */
    public $ticket = null;
    
    /**  @var \RO\Cmd\BlobShare */
    public $share = null;
    
    /**  @var \RO\Cmd\BlobAchieve */
    public $achieve = null;
    
    /**  @var \RO\Cmd\BlobAuthorize */
    public $authorize = null;
    
    /**  @var \RO\Cmd\BlobGuildRaid */
    public $guildraid = null;
    
    /**  @var \RO\Cmd\BlobAstrolabe */
    public $astrolabe = null;
    
    /**  @var \RO\Cmd\BlobSettings */
    public $settings = null;
    
    /**  @var \RO\Cmd\BlobPhoto */
    public $photo = null;
    
    /**  @var \RO\Cmd\BlobFood */
    public $food = null;
    
    /**  @var \RO\Cmd\BlobUserPet */
    public $userpet = null;
    
    /**  @var \RO\Cmd\BlobPetAdventure */
    public $petadventure = null;
    
    /**  @var \RO\Cmd\BlobTutorTask */
    public $tutortask = null;
    
    /**  @var \RO\Cmd\BlobEye */
    public $eye = null;
    
    /**  @var \RO\Cmd\BlobHighRefine */
    public $highrefine = null;
    
    /**  @var \RO\Cmd\BlobActivityEvent */
    public $acevent = null;
    
    /**  @var \RO\Cmd\BlobUserBeing */
    public $being = null;
    
    /**  @var \RO\Cmd\BlobGuildChallenge */
    public $gchallenge = null;
    
    /**  @var \RO\Cmd\BlobGvgData */
    public $gvgdata = null;
    
    /**  @var \RO\Cmd\BlobLottery */
    public $lottery = null;
    
    /**  @var \RO\Cmd\BlobServant */
    public $servant = null;
    
    /**  @var \RO\Cmd\BlobProfession */
    public $profession = null;
    
    /**  @var \RO\Cmd\BlobActivityQuest */
    public $activityquest = null;
    
    /**  @var \RO\Cmd\BlobExchangeShop */
    public $exchangeshop = null;
    
    /**  @var \RO\Cmd\BlobBooth */
    public $booth = null;
    
    /**  @var \RO\Cmd\BlobElementElfData */
    public $element_elf = null;
    
    /**  @var \RO\Cmd\BlobTransfer */
    public $transfer = null;
    
    /**  @var \RO\Cmd\BlobBoss */
    public $boss = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.BlobData');

      // OPTIONAL UINT32 version = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "version";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE user = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "user";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobUser';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE fighter = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "fighter";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobFighter';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE stage = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "stage";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobStage';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE questnpc = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "questnpc";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobQuestNpc';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE buffer = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "buffer";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobBuffer';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE portrait = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "portrait";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobPortrait';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE hair = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "hair";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobHair';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE gear = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "gear";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobGears';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE tip = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "tip";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobTips';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE follower = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "follower";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobFollower';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE cd = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "cd";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobCDTime';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE shortcut = 13
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 13;
      $f->name      = "shortcut";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobShortcut';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE effect = 14
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 14;
      $f->name      = "effect";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobGMEffects';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE freyja = 15
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 15;
      $f->name      = "freyja";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobFreyja';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE lab = 16
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 16;
      $f->name      = "lab";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobLaboratory';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE scenery = 17
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 17;
      $f->name      = "scenery";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobScenery';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE carrier = 18
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 18;
      $f->name      = "carrier";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobCarrier';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE menu = 19
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 19;
      $f->name      = "menu";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobMenu';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE shop = 20
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 20;
      $f->name      = "shop";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobShopGotItem';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE knownmap = 21
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 21;
      $f->name      = "knownmap";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobKnownMaps';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE iter = 22
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 22;
      $f->name      = "iter";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobInter';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE hand = 23
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 23;
      $f->name      = "hand";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobHands';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE show = 24
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 24;
      $f->name      = "show";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobShow';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE trace = 25
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 25;
      $f->name      = "trace";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobTrace';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE dojo = 26
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 26;
      $f->name      = "dojo";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobDojo';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE pack = 27
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 27;
      $f->name      = "pack";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobPack';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE quest = 28
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 28;
      $f->name      = "quest";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobQuest';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE title = 29
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 29;
      $f->name      = "title";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobTitle';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE line = 30
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 30;
      $f->name      = "line";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobLine';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE pet = 31
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 31;
      $f->name      = "pet";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobPet';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE var = 32
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 32;
      $f->name      = "var";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobVar';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE chatmsg = 33
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 33;
      $f->name      = "chatmsg";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobChatMsg';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE tower = 34
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 34;
      $f->name      = "tower";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobUserTower';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE seal = 35
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 35;
      $f->name      = "seal";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobSeal';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE manual = 36
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 36;
      $f->name      = "manual";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobManual';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE action = 37
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 37;
      $f->name      = "action";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobFirstActionDone';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE attr = 38
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 38;
      $f->name      = "attr";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobAttr';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE opt = 39
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 39;
      $f->name      = "opt";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobOption';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE handnpc = 40
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 40;
      $f->name      = "handnpc";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobHandNpc';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE camera = 41
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 41;
      $f->name      = "camera";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobCamera';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE zone = 42
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 42;
      $f->name      = "zone";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobZone';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE guild = 43
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 43;
      $f->name      = "guild";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobGuild';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE team = 44
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 44;
      $f->name      = "team";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobTeam';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE userzone = 45
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 45;
      $f->name      = "userzone";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobUserZone';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE speffect = 46
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 46;
      $f->name      = "speffect";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobSpEffect';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE deposit = 47
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 47;
      $f->name      = "deposit";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobDeposit';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE activity = 48
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 48;
      $f->name      = "activity";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobActivity';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE chat = 51
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 51;
      $f->name      = "chat";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobChat';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE battle = 52
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 52;
      $f->name      = "battle";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobBattle';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE statvar = 53
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 53;
      $f->name      = "statvar";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobStatVar';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE seenpc = 54
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 54;
      $f->name      = "seenpc";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobSeeNpc';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE weaponpet = 55
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 55;
      $f->name      = "weaponpet";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobWeaponPet';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE ticket = 56
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 56;
      $f->name      = "ticket";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobTicket';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE share = 57
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 57;
      $f->name      = "share";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobShare';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE achieve = 58
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 58;
      $f->name      = "achieve";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobAchieve';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE authorize = 59
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 59;
      $f->name      = "authorize";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobAuthorize';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE guildraid = 60
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 60;
      $f->name      = "guildraid";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobGuildRaid';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE astrolabe = 61
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 61;
      $f->name      = "astrolabe";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobAstrolabe';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE settings = 62
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 62;
      $f->name      = "settings";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobSettings';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE photo = 63
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 63;
      $f->name      = "photo";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobPhoto';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE food = 64
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 64;
      $f->name      = "food";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobFood';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE userpet = 65
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 65;
      $f->name      = "userpet";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobUserPet';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE petadventure = 66
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 66;
      $f->name      = "petadventure";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobPetAdventure';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE tutortask = 67
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 67;
      $f->name      = "tutortask";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobTutorTask';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE eye = 68
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 68;
      $f->name      = "eye";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobEye';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE highrefine = 69
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 69;
      $f->name      = "highrefine";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobHighRefine';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE acevent = 70
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 70;
      $f->name      = "acevent";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobActivityEvent';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE being = 71
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 71;
      $f->name      = "being";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobUserBeing';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE gchallenge = 72
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 72;
      $f->name      = "gchallenge";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobGuildChallenge';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE gvgdata = 73
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 73;
      $f->name      = "gvgdata";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobGvgData';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE lottery = 74
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 74;
      $f->name      = "lottery";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobLottery';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE servant = 75
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 75;
      $f->name      = "servant";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobServant';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE profession = 76
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 76;
      $f->name      = "profession";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobProfession';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE activityquest = 77
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 77;
      $f->name      = "activityquest";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobActivityQuest';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE exchangeshop = 78
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 78;
      $f->name      = "exchangeshop";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobExchangeShop';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE booth = 79
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 79;
      $f->name      = "booth";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobBooth';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE element_elf = 80
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 80;
      $f->name      = "element_elf";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobElementElfData';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE transfer = 81
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 81;
      $f->name      = "transfer";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobTransfer';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE boss = 82
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 82;
      $f->name      = "boss";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\BlobBoss';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <version> has a value
     *
     * @return boolean
     */
    public function hasVersion(){
      return $this->_has(1);
    }
    
    /**
     * Clear <version> value
     *
     * @return \RO\Cmd\BlobData
     */
    public function clearVersion(){
      return $this->_clear(1);
    }
    
    /**
     * Get <version> value
     *
     * @return int
     */
    public function getVersion(){
      return $this->_get(1);
    }
    
    /**
     * Set <version> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobData
     */
    public function setVersion( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <user> has a value
     *
     * @return boolean
     */
    public function hasUser(){
      return $this->_has(2);
    }
    
    /**
     * Clear <user> value
     *
     * @return \RO\Cmd\BlobData
     */
    public function clearUser(){
      return $this->_clear(2);
    }
    
    /**
     * Get <user> value
     *
     * @return \RO\Cmd\BlobUser
     */
    public function getUser(){
      return $this->_get(2);
    }
    
    /**
     * Set <user> value
     *
     * @param \RO\Cmd\BlobUser $value
     * @return \RO\Cmd\BlobData
     */
    public function setUser(\RO\Cmd\BlobUser $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <fighter> has a value
     *
     * @return boolean
     */
    public function hasFighter(){
      return $this->_has(3);
    }
    
    /**
     * Clear <fighter> value
     *
     * @return \RO\Cmd\BlobData
     */
    public function clearFighter(){
      return $this->_clear(3);
    }
    
    /**
     * Get <fighter> value
     *
     * @return \RO\Cmd\BlobFighter
     */
    public function getFighter(){
      return $this->_get(3);
    }
    
    /**
     * Set <fighter> value
     *
     * @param \RO\Cmd\BlobFighter $value
     * @return \RO\Cmd\BlobData
     */
    public function setFighter(\RO\Cmd\BlobFighter $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <stage> has a value
     *
     * @return boolean
     */
    public function hasStage(){
      return $this->_has(4);
    }
    
    /**
     * Clear <stage> value
     *
     * @return \RO\Cmd\BlobData
     */
    public function clearStage(){
      return $this->_clear(4);
    }
    
    /**
     * Get <stage> value
     *
     * @return \RO\Cmd\BlobStage
     */
    public function getStage(){
      return $this->_get(4);
    }
    
    /**
     * Set <stage> value
     *
     * @param \RO\Cmd\BlobStage $value
     * @return \RO\Cmd\BlobData
     */
    public function setStage(\RO\Cmd\BlobStage $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <questnpc> has a value
     *
     * @return boolean
     */
    public function hasQuestnpc(){
      return $this->_has(5);
    }
    
    /**
     * Clear <questnpc> value
     *
     * @return \RO\Cmd\BlobData
     */
    public function clearQuestnpc(){
      return $this->_clear(5);
    }
    
    /**
     * Get <questnpc> value
     *
     * @return \RO\Cmd\BlobQuestNpc
     */
    public function getQuestnpc(){
      return $this->_get(5);
    }
    
    /**
     * Set <questnpc> value
     *
     * @param \RO\Cmd\BlobQuestNpc $value
     * @return \RO\Cmd\BlobData
     */
    public function setQuestnpc(\RO\Cmd\BlobQuestNpc $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <buffer> has a value
     *
     * @return boolean
     */
    public function hasBuffer(){
      return $this->_has(6);
    }
    
    /**
     * Clear <buffer> value
     *
     * @return \RO\Cmd\BlobData
     */
    public function clearBuffer(){
      return $this->_clear(6);
    }
    
    /**
     * Get <buffer> value
     *
     * @return \RO\Cmd\BlobBuffer
     */
    public function getBuffer(){
      return $this->_get(6);
    }
    
    /**
     * Set <buffer> value
     *
     * @param \RO\Cmd\BlobBuffer $value
     * @return \RO\Cmd\BlobData
     */
    public function setBuffer(\RO\Cmd\BlobBuffer $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <portrait> has a value
     *
     * @return boolean
     */
    public function hasPortrait(){
      return $this->_has(7);
    }
    
    /**
     * Clear <portrait> value
     *
     * @return \RO\Cmd\BlobData
     */
    public function clearPortrait(){
      return $this->_clear(7);
    }
    
    /**
     * Get <portrait> value
     *
     * @return \RO\Cmd\BlobPortrait
     */
    public function getPortrait(){
      return $this->_get(7);
    }
    
    /**
     * Set <portrait> value
     *
     * @param \RO\Cmd\BlobPortrait $value
     * @return \RO\Cmd\BlobData
     */
    public function setPortrait(\RO\Cmd\BlobPortrait $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <hair> has a value
     *
     * @return boolean
     */
    public function hasHair(){
      return $this->_has(8);
    }
    
    /**
     * Clear <hair> value
     *
     * @return \RO\Cmd\BlobData
     */
    public function clearHair(){
      return $this->_clear(8);
    }
    
    /**
     * Get <hair> value
     *
     * @return \RO\Cmd\BlobHair
     */
    public function getHair(){
      return $this->_get(8);
    }
    
    /**
     * Set <hair> value
     *
     * @param \RO\Cmd\BlobHair $value
     * @return \RO\Cmd\BlobData
     */
    public function setHair(\RO\Cmd\BlobHair $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <gear> has a value
     *
     * @return boolean
     */
    public function hasGear(){
      return $this->_has(9);
    }
    
    /**
     * Clear <gear> value
     *
     * @return \RO\Cmd\BlobData
     */
    public function clearGear(){
      return $this->_clear(9);
    }
    
    /**
     * Get <gear> value
     *
     * @return \RO\Cmd\BlobGears
     */
    public function getGear(){
      return $this->_get(9);
    }
    
    /**
     * Set <gear> value
     *
     * @param \RO\Cmd\BlobGears $value
     * @return \RO\Cmd\BlobData
     */
    public function setGear(\RO\Cmd\BlobGears $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <tip> has a value
     *
     * @return boolean
     */
    public function hasTip(){
      return $this->_has(10);
    }
    
    /**
     * Clear <tip> value
     *
     * @return \RO\Cmd\BlobData
     */
    public function clearTip(){
      return $this->_clear(10);
    }
    
    /**
     * Get <tip> value
     *
     * @return \RO\Cmd\BlobTips
     */
    public function getTip(){
      return $this->_get(10);
    }
    
    /**
     * Set <tip> value
     *
     * @param \RO\Cmd\BlobTips $value
     * @return \RO\Cmd\BlobData
     */
    public function setTip(\RO\Cmd\BlobTips $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <follower> has a value
     *
     * @return boolean
     */
    public function hasFollower(){
      return $this->_has(11);
    }
    
    /**
     * Clear <follower> value
     *
     * @return \RO\Cmd\BlobData
     */
    public function clearFollower(){
      return $this->_clear(11);
    }
    
    /**
     * Get <follower> value
     *
     * @return \RO\Cmd\BlobFollower
     */
    public function getFollower(){
      return $this->_get(11);
    }
    
    /**
     * Set <follower> value
     *
     * @param \RO\Cmd\BlobFollower $value
     * @return \RO\Cmd\BlobData
     */
    public function setFollower(\RO\Cmd\BlobFollower $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <cd> has a value
     *
     * @return boolean
     */
    public function hasCd(){
      return $this->_has(12);
    }
    
    /**
     * Clear <cd> value
     *
     * @return \RO\Cmd\BlobData
     */
    public function clearCd(){
      return $this->_clear(12);
    }
    
    /**
     * Get <cd> value
     *
     * @return \RO\Cmd\BlobCDTime
     */
    public function getCd(){
      return $this->_get(12);
    }
    
    /**
     * Set <cd> value
     *
     * @param \RO\Cmd\BlobCDTime $value
     * @return \RO\Cmd\BlobData
     */
    public function setCd(\RO\Cmd\BlobCDTime $value){
      return $this->_set(12, $value);
    }
    
    /**
     * Check if <shortcut> has a value
     *
     * @return boolean
     */
    public function hasShortcut(){
      return $this->_has(13);
    }
    
    /**
     * Clear <shortcut> value
     *
     * @return \RO\Cmd\BlobData
     */
    public function clearShortcut(){
      return $this->_clear(13);
    }
    
    /**
     * Get <shortcut> value
     *
     * @return \RO\Cmd\BlobShortcut
     */
    public function getShortcut(){
      return $this->_get(13);
    }
    
    /**
     * Set <shortcut> value
     *
     * @param \RO\Cmd\BlobShortcut $value
     * @return \RO\Cmd\BlobData
     */
    public function setShortcut(\RO\Cmd\BlobShortcut $value){
      return $this->_set(13, $value);
    }
    
    /**
     * Check if <effect> has a value
     *
     * @return boolean
     */
    public function hasEffect(){
      return $this->_has(14);
    }
    
    /**
     * Clear <effect> value
     *
     * @return \RO\Cmd\BlobData
     */
    public function clearEffect(){
      return $this->_clear(14);
    }
    
    /**
     * Get <effect> value
     *
     * @return \RO\Cmd\BlobGMEffects
     */
    public function getEffect(){
      return $this->_get(14);
    }
    
    /**
     * Set <effect> value
     *
     * @param \RO\Cmd\BlobGMEffects $value
     * @return \RO\Cmd\BlobData
     */
    public function setEffect(\RO\Cmd\BlobGMEffects $value){
      return $this->_set(14, $value);
    }
    
    /**
     * Check if <freyja> has a value
     *
     * @return boolean
     */
    public function hasFreyja(){
      return $this->_has(15);
    }
    
    /**
     * Clear <freyja> value
     *
     * @return \RO\Cmd\BlobData
     */
    public function clearFreyja(){
      return $this->_clear(15);
    }
    
    /**
     * Get <freyja> value
     *
     * @return \RO\Cmd\BlobFreyja
     */
    public function getFreyja(){
      return $this->_get(15);
    }
    
    /**
     * Set <freyja> value
     *
     * @param \RO\Cmd\BlobFreyja $value
     * @return \RO\Cmd\BlobData
     */
    public function setFreyja(\RO\Cmd\BlobFreyja $value){
      return $this->_set(15, $value);
    }
    
    /**
     * Check if <lab> has a value
     *
     * @return boolean
     */
    public function hasLab(){
      return $this->_has(16);
    }
    
    /**
     * Clear <lab> value
     *
     * @return \RO\Cmd\BlobData
     */
    public function clearLab(){
      return $this->_clear(16);
    }
    
    /**
     * Get <lab> value
     *
     * @return \RO\Cmd\BlobLaboratory
     */
    public function getLab(){
      return $this->_get(16);
    }
    
    /**
     * Set <lab> value
     *
     * @param \RO\Cmd\BlobLaboratory $value
     * @return \RO\Cmd\BlobData
     */
    public function setLab(\RO\Cmd\BlobLaboratory $value){
      return $this->_set(16, $value);
    }
    
    /**
     * Check if <scenery> has a value
     *
     * @return boolean
     */
    public function hasScenery(){
      return $this->_has(17);
    }
    
    /**
     * Clear <scenery> value
     *
     * @return \RO\Cmd\BlobData
     */
    public function clearScenery(){
      return $this->_clear(17);
    }
    
    /**
     * Get <scenery> value
     *
     * @return \RO\Cmd\BlobScenery
     */
    public function getScenery(){
      return $this->_get(17);
    }
    
    /**
     * Set <scenery> value
     *
     * @param \RO\Cmd\BlobScenery $value
     * @return \RO\Cmd\BlobData
     */
    public function setScenery(\RO\Cmd\BlobScenery $value){
      return $this->_set(17, $value);
    }
    
    /**
     * Check if <carrier> has a value
     *
     * @return boolean
     */
    public function hasCarrier(){
      return $this->_has(18);
    }
    
    /**
     * Clear <carrier> value
     *
     * @return \RO\Cmd\BlobData
     */
    public function clearCarrier(){
      return $this->_clear(18);
    }
    
    /**
     * Get <carrier> value
     *
     * @return \RO\Cmd\BlobCarrier
     */
    public function getCarrier(){
      return $this->_get(18);
    }
    
    /**
     * Set <carrier> value
     *
     * @param \RO\Cmd\BlobCarrier $value
     * @return \RO\Cmd\BlobData
     */
    public function setCarrier(\RO\Cmd\BlobCarrier $value){
      return $this->_set(18, $value);
    }
    
    /**
     * Check if <menu> has a value
     *
     * @return boolean
     */
    public function hasMenu(){
      return $this->_has(19);
    }
    
    /**
     * Clear <menu> value
     *
     * @return \RO\Cmd\BlobData
     */
    public function clearMenu(){
      return $this->_clear(19);
    }
    
    /**
     * Get <menu> value
     *
     * @return \RO\Cmd\BlobMenu
     */
    public function getMenu(){
      return $this->_get(19);
    }
    
    /**
     * Set <menu> value
     *
     * @param \RO\Cmd\BlobMenu $value
     * @return \RO\Cmd\BlobData
     */
    public function setMenu(\RO\Cmd\BlobMenu $value){
      return $this->_set(19, $value);
    }
    
    /**
     * Check if <shop> has a value
     *
     * @return boolean
     */
    public function hasShop(){
      return $this->_has(20);
    }
    
    /**
     * Clear <shop> value
     *
     * @return \RO\Cmd\BlobData
     */
    public function clearShop(){
      return $this->_clear(20);
    }
    
    /**
     * Get <shop> value
     *
     * @return \RO\Cmd\BlobShopGotItem
     */
    public function getShop(){
      return $this->_get(20);
    }
    
    /**
     * Set <shop> value
     *
     * @param \RO\Cmd\BlobShopGotItem $value
     * @return \RO\Cmd\BlobData
     */
    public function setShop(\RO\Cmd\BlobShopGotItem $value){
      return $this->_set(20, $value);
    }
    
    /**
     * Check if <knownmap> has a value
     *
     * @return boolean
     */
    public function hasKnownmap(){
      return $this->_has(21);
    }
    
    /**
     * Clear <knownmap> value
     *
     * @return \RO\Cmd\BlobData
     */
    public function clearKnownmap(){
      return $this->_clear(21);
    }
    
    /**
     * Get <knownmap> value
     *
     * @return \RO\Cmd\BlobKnownMaps
     */
    public function getKnownmap(){
      return $this->_get(21);
    }
    
    /**
     * Set <knownmap> value
     *
     * @param \RO\Cmd\BlobKnownMaps $value
     * @return \RO\Cmd\BlobData
     */
    public function setKnownmap(\RO\Cmd\BlobKnownMaps $value){
      return $this->_set(21, $value);
    }
    
    /**
     * Check if <iter> has a value
     *
     * @return boolean
     */
    public function hasIter(){
      return $this->_has(22);
    }
    
    /**
     * Clear <iter> value
     *
     * @return \RO\Cmd\BlobData
     */
    public function clearIter(){
      return $this->_clear(22);
    }
    
    /**
     * Get <iter> value
     *
     * @return \RO\Cmd\BlobInter
     */
    public function getIter(){
      return $this->_get(22);
    }
    
    /**
     * Set <iter> value
     *
     * @param \RO\Cmd\BlobInter $value
     * @return \RO\Cmd\BlobData
     */
    public function setIter(\RO\Cmd\BlobInter $value){
      return $this->_set(22, $value);
    }
    
    /**
     * Check if <hand> has a value
     *
     * @return boolean
     */
    public function hasHand(){
      return $this->_has(23);
    }
    
    /**
     * Clear <hand> value
     *
     * @return \RO\Cmd\BlobData
     */
    public function clearHand(){
      return $this->_clear(23);
    }
    
    /**
     * Get <hand> value
     *
     * @return \RO\Cmd\BlobHands
     */
    public function getHand(){
      return $this->_get(23);
    }
    
    /**
     * Set <hand> value
     *
     * @param \RO\Cmd\BlobHands $value
     * @return \RO\Cmd\BlobData
     */
    public function setHand(\RO\Cmd\BlobHands $value){
      return $this->_set(23, $value);
    }
    
    /**
     * Check if <show> has a value
     *
     * @return boolean
     */
    public function hasShow(){
      return $this->_has(24);
    }
    
    /**
     * Clear <show> value
     *
     * @return \RO\Cmd\BlobData
     */
    public function clearShow(){
      return $this->_clear(24);
    }
    
    /**
     * Get <show> value
     *
     * @return \RO\Cmd\BlobShow
     */
    public function getShow(){
      return $this->_get(24);
    }
    
    /**
     * Set <show> value
     *
     * @param \RO\Cmd\BlobShow $value
     * @return \RO\Cmd\BlobData
     */
    public function setShow(\RO\Cmd\BlobShow $value){
      return $this->_set(24, $value);
    }
    
    /**
     * Check if <trace> has a value
     *
     * @return boolean
     */
    public function hasTrace(){
      return $this->_has(25);
    }
    
    /**
     * Clear <trace> value
     *
     * @return \RO\Cmd\BlobData
     */
    public function clearTrace(){
      return $this->_clear(25);
    }
    
    /**
     * Get <trace> value
     *
     * @return \RO\Cmd\BlobTrace
     */
    public function getTrace(){
      return $this->_get(25);
    }
    
    /**
     * Set <trace> value
     *
     * @param \RO\Cmd\BlobTrace $value
     * @return \RO\Cmd\BlobData
     */
    public function setTrace(\RO\Cmd\BlobTrace $value){
      return $this->_set(25, $value);
    }
    
    /**
     * Check if <dojo> has a value
     *
     * @return boolean
     */
    public function hasDojo(){
      return $this->_has(26);
    }
    
    /**
     * Clear <dojo> value
     *
     * @return \RO\Cmd\BlobData
     */
    public function clearDojo(){
      return $this->_clear(26);
    }
    
    /**
     * Get <dojo> value
     *
     * @return \RO\Cmd\BlobDojo
     */
    public function getDojo(){
      return $this->_get(26);
    }
    
    /**
     * Set <dojo> value
     *
     * @param \RO\Cmd\BlobDojo $value
     * @return \RO\Cmd\BlobData
     */
    public function setDojo(\RO\Cmd\BlobDojo $value){
      return $this->_set(26, $value);
    }
    
    /**
     * Check if <pack> has a value
     *
     * @return boolean
     */
    public function hasPack(){
      return $this->_has(27);
    }
    
    /**
     * Clear <pack> value
     *
     * @return \RO\Cmd\BlobData
     */
    public function clearPack(){
      return $this->_clear(27);
    }
    
    /**
     * Get <pack> value
     *
     * @return \RO\Cmd\BlobPack
     */
    public function getPack(){
      return $this->_get(27);
    }
    
    /**
     * Set <pack> value
     *
     * @param \RO\Cmd\BlobPack $value
     * @return \RO\Cmd\BlobData
     */
    public function setPack(\RO\Cmd\BlobPack $value){
      return $this->_set(27, $value);
    }
    
    /**
     * Check if <quest> has a value
     *
     * @return boolean
     */
    public function hasQuest(){
      return $this->_has(28);
    }
    
    /**
     * Clear <quest> value
     *
     * @return \RO\Cmd\BlobData
     */
    public function clearQuest(){
      return $this->_clear(28);
    }
    
    /**
     * Get <quest> value
     *
     * @return \RO\Cmd\BlobQuest
     */
    public function getQuest(){
      return $this->_get(28);
    }
    
    /**
     * Set <quest> value
     *
     * @param \RO\Cmd\BlobQuest $value
     * @return \RO\Cmd\BlobData
     */
    public function setQuest(\RO\Cmd\BlobQuest $value){
      return $this->_set(28, $value);
    }
    
    /**
     * Check if <title> has a value
     *
     * @return boolean
     */
    public function hasTitle(){
      return $this->_has(29);
    }
    
    /**
     * Clear <title> value
     *
     * @return \RO\Cmd\BlobData
     */
    public function clearTitle(){
      return $this->_clear(29);
    }
    
    /**
     * Get <title> value
     *
     * @return \RO\Cmd\BlobTitle
     */
    public function getTitle(){
      return $this->_get(29);
    }
    
    /**
     * Set <title> value
     *
     * @param \RO\Cmd\BlobTitle $value
     * @return \RO\Cmd\BlobData
     */
    public function setTitle(\RO\Cmd\BlobTitle $value){
      return $this->_set(29, $value);
    }
    
    /**
     * Check if <line> has a value
     *
     * @return boolean
     */
    public function hasLine(){
      return $this->_has(30);
    }
    
    /**
     * Clear <line> value
     *
     * @return \RO\Cmd\BlobData
     */
    public function clearLine(){
      return $this->_clear(30);
    }
    
    /**
     * Get <line> value
     *
     * @return \RO\Cmd\BlobLine
     */
    public function getLine(){
      return $this->_get(30);
    }
    
    /**
     * Set <line> value
     *
     * @param \RO\Cmd\BlobLine $value
     * @return \RO\Cmd\BlobData
     */
    public function setLine(\RO\Cmd\BlobLine $value){
      return $this->_set(30, $value);
    }
    
    /**
     * Check if <pet> has a value
     *
     * @return boolean
     */
    public function hasPet(){
      return $this->_has(31);
    }
    
    /**
     * Clear <pet> value
     *
     * @return \RO\Cmd\BlobData
     */
    public function clearPet(){
      return $this->_clear(31);
    }
    
    /**
     * Get <pet> value
     *
     * @return \RO\Cmd\BlobPet
     */
    public function getPet(){
      return $this->_get(31);
    }
    
    /**
     * Set <pet> value
     *
     * @param \RO\Cmd\BlobPet $value
     * @return \RO\Cmd\BlobData
     */
    public function setPet(\RO\Cmd\BlobPet $value){
      return $this->_set(31, $value);
    }
    
    /**
     * Check if <var> has a value
     *
     * @return boolean
     */
    public function hasVar(){
      return $this->_has(32);
    }
    
    /**
     * Clear <var> value
     *
     * @return \RO\Cmd\BlobData
     */
    public function clearVar(){
      return $this->_clear(32);
    }
    
    /**
     * Get <var> value
     *
     * @return \RO\Cmd\BlobVar
     */
    public function getVar(){
      return $this->_get(32);
    }
    
    /**
     * Set <var> value
     *
     * @param \RO\Cmd\BlobVar $value
     * @return \RO\Cmd\BlobData
     */
    public function setVar(\RO\Cmd\BlobVar $value){
      return $this->_set(32, $value);
    }
    
    /**
     * Check if <chatmsg> has a value
     *
     * @return boolean
     */
    public function hasChatmsg(){
      return $this->_has(33);
    }
    
    /**
     * Clear <chatmsg> value
     *
     * @return \RO\Cmd\BlobData
     */
    public function clearChatmsg(){
      return $this->_clear(33);
    }
    
    /**
     * Get <chatmsg> value
     *
     * @return \RO\Cmd\BlobChatMsg
     */
    public function getChatmsg(){
      return $this->_get(33);
    }
    
    /**
     * Set <chatmsg> value
     *
     * @param \RO\Cmd\BlobChatMsg $value
     * @return \RO\Cmd\BlobData
     */
    public function setChatmsg(\RO\Cmd\BlobChatMsg $value){
      return $this->_set(33, $value);
    }
    
    /**
     * Check if <tower> has a value
     *
     * @return boolean
     */
    public function hasTower(){
      return $this->_has(34);
    }
    
    /**
     * Clear <tower> value
     *
     * @return \RO\Cmd\BlobData
     */
    public function clearTower(){
      return $this->_clear(34);
    }
    
    /**
     * Get <tower> value
     *
     * @return \RO\Cmd\BlobUserTower
     */
    public function getTower(){
      return $this->_get(34);
    }
    
    /**
     * Set <tower> value
     *
     * @param \RO\Cmd\BlobUserTower $value
     * @return \RO\Cmd\BlobData
     */
    public function setTower(\RO\Cmd\BlobUserTower $value){
      return $this->_set(34, $value);
    }
    
    /**
     * Check if <seal> has a value
     *
     * @return boolean
     */
    public function hasSeal(){
      return $this->_has(35);
    }
    
    /**
     * Clear <seal> value
     *
     * @return \RO\Cmd\BlobData
     */
    public function clearSeal(){
      return $this->_clear(35);
    }
    
    /**
     * Get <seal> value
     *
     * @return \RO\Cmd\BlobSeal
     */
    public function getSeal(){
      return $this->_get(35);
    }
    
    /**
     * Set <seal> value
     *
     * @param \RO\Cmd\BlobSeal $value
     * @return \RO\Cmd\BlobData
     */
    public function setSeal(\RO\Cmd\BlobSeal $value){
      return $this->_set(35, $value);
    }
    
    /**
     * Check if <manual> has a value
     *
     * @return boolean
     */
    public function hasManual(){
      return $this->_has(36);
    }
    
    /**
     * Clear <manual> value
     *
     * @return \RO\Cmd\BlobData
     */
    public function clearManual(){
      return $this->_clear(36);
    }
    
    /**
     * Get <manual> value
     *
     * @return \RO\Cmd\BlobManual
     */
    public function getManual(){
      return $this->_get(36);
    }
    
    /**
     * Set <manual> value
     *
     * @param \RO\Cmd\BlobManual $value
     * @return \RO\Cmd\BlobData
     */
    public function setManual(\RO\Cmd\BlobManual $value){
      return $this->_set(36, $value);
    }
    
    /**
     * Check if <action> has a value
     *
     * @return boolean
     */
    public function hasAction(){
      return $this->_has(37);
    }
    
    /**
     * Clear <action> value
     *
     * @return \RO\Cmd\BlobData
     */
    public function clearAction(){
      return $this->_clear(37);
    }
    
    /**
     * Get <action> value
     *
     * @return \RO\Cmd\BlobFirstActionDone
     */
    public function getAction(){
      return $this->_get(37);
    }
    
    /**
     * Set <action> value
     *
     * @param \RO\Cmd\BlobFirstActionDone $value
     * @return \RO\Cmd\BlobData
     */
    public function setAction(\RO\Cmd\BlobFirstActionDone $value){
      return $this->_set(37, $value);
    }
    
    /**
     * Check if <attr> has a value
     *
     * @return boolean
     */
    public function hasAttr(){
      return $this->_has(38);
    }
    
    /**
     * Clear <attr> value
     *
     * @return \RO\Cmd\BlobData
     */
    public function clearAttr(){
      return $this->_clear(38);
    }
    
    /**
     * Get <attr> value
     *
     * @return \RO\Cmd\BlobAttr
     */
    public function getAttr(){
      return $this->_get(38);
    }
    
    /**
     * Set <attr> value
     *
     * @param \RO\Cmd\BlobAttr $value
     * @return \RO\Cmd\BlobData
     */
    public function setAttr(\RO\Cmd\BlobAttr $value){
      return $this->_set(38, $value);
    }
    
    /**
     * Check if <opt> has a value
     *
     * @return boolean
     */
    public function hasOpt(){
      return $this->_has(39);
    }
    
    /**
     * Clear <opt> value
     *
     * @return \RO\Cmd\BlobData
     */
    public function clearOpt(){
      return $this->_clear(39);
    }
    
    /**
     * Get <opt> value
     *
     * @return \RO\Cmd\BlobOption
     */
    public function getOpt(){
      return $this->_get(39);
    }
    
    /**
     * Set <opt> value
     *
     * @param \RO\Cmd\BlobOption $value
     * @return \RO\Cmd\BlobData
     */
    public function setOpt(\RO\Cmd\BlobOption $value){
      return $this->_set(39, $value);
    }
    
    /**
     * Check if <handnpc> has a value
     *
     * @return boolean
     */
    public function hasHandnpc(){
      return $this->_has(40);
    }
    
    /**
     * Clear <handnpc> value
     *
     * @return \RO\Cmd\BlobData
     */
    public function clearHandnpc(){
      return $this->_clear(40);
    }
    
    /**
     * Get <handnpc> value
     *
     * @return \RO\Cmd\BlobHandNpc
     */
    public function getHandnpc(){
      return $this->_get(40);
    }
    
    /**
     * Set <handnpc> value
     *
     * @param \RO\Cmd\BlobHandNpc $value
     * @return \RO\Cmd\BlobData
     */
    public function setHandnpc(\RO\Cmd\BlobHandNpc $value){
      return $this->_set(40, $value);
    }
    
    /**
     * Check if <camera> has a value
     *
     * @return boolean
     */
    public function hasCamera(){
      return $this->_has(41);
    }
    
    /**
     * Clear <camera> value
     *
     * @return \RO\Cmd\BlobData
     */
    public function clearCamera(){
      return $this->_clear(41);
    }
    
    /**
     * Get <camera> value
     *
     * @return \RO\Cmd\BlobCamera
     */
    public function getCamera(){
      return $this->_get(41);
    }
    
    /**
     * Set <camera> value
     *
     * @param \RO\Cmd\BlobCamera $value
     * @return \RO\Cmd\BlobData
     */
    public function setCamera(\RO\Cmd\BlobCamera $value){
      return $this->_set(41, $value);
    }
    
    /**
     * Check if <zone> has a value
     *
     * @return boolean
     */
    public function hasZone(){
      return $this->_has(42);
    }
    
    /**
     * Clear <zone> value
     *
     * @return \RO\Cmd\BlobData
     */
    public function clearZone(){
      return $this->_clear(42);
    }
    
    /**
     * Get <zone> value
     *
     * @return \RO\Cmd\BlobZone
     */
    public function getZone(){
      return $this->_get(42);
    }
    
    /**
     * Set <zone> value
     *
     * @param \RO\Cmd\BlobZone $value
     * @return \RO\Cmd\BlobData
     */
    public function setZone(\RO\Cmd\BlobZone $value){
      return $this->_set(42, $value);
    }
    
    /**
     * Check if <guild> has a value
     *
     * @return boolean
     */
    public function hasGuild(){
      return $this->_has(43);
    }
    
    /**
     * Clear <guild> value
     *
     * @return \RO\Cmd\BlobData
     */
    public function clearGuild(){
      return $this->_clear(43);
    }
    
    /**
     * Get <guild> value
     *
     * @return \RO\Cmd\BlobGuild
     */
    public function getGuild(){
      return $this->_get(43);
    }
    
    /**
     * Set <guild> value
     *
     * @param \RO\Cmd\BlobGuild $value
     * @return \RO\Cmd\BlobData
     */
    public function setGuild(\RO\Cmd\BlobGuild $value){
      return $this->_set(43, $value);
    }
    
    /**
     * Check if <team> has a value
     *
     * @return boolean
     */
    public function hasTeam(){
      return $this->_has(44);
    }
    
    /**
     * Clear <team> value
     *
     * @return \RO\Cmd\BlobData
     */
    public function clearTeam(){
      return $this->_clear(44);
    }
    
    /**
     * Get <team> value
     *
     * @return \RO\Cmd\BlobTeam
     */
    public function getTeam(){
      return $this->_get(44);
    }
    
    /**
     * Set <team> value
     *
     * @param \RO\Cmd\BlobTeam $value
     * @return \RO\Cmd\BlobData
     */
    public function setTeam(\RO\Cmd\BlobTeam $value){
      return $this->_set(44, $value);
    }
    
    /**
     * Check if <userzone> has a value
     *
     * @return boolean
     */
    public function hasUserzone(){
      return $this->_has(45);
    }
    
    /**
     * Clear <userzone> value
     *
     * @return \RO\Cmd\BlobData
     */
    public function clearUserzone(){
      return $this->_clear(45);
    }
    
    /**
     * Get <userzone> value
     *
     * @return \RO\Cmd\BlobUserZone
     */
    public function getUserzone(){
      return $this->_get(45);
    }
    
    /**
     * Set <userzone> value
     *
     * @param \RO\Cmd\BlobUserZone $value
     * @return \RO\Cmd\BlobData
     */
    public function setUserzone(\RO\Cmd\BlobUserZone $value){
      return $this->_set(45, $value);
    }
    
    /**
     * Check if <speffect> has a value
     *
     * @return boolean
     */
    public function hasSpeffect(){
      return $this->_has(46);
    }
    
    /**
     * Clear <speffect> value
     *
     * @return \RO\Cmd\BlobData
     */
    public function clearSpeffect(){
      return $this->_clear(46);
    }
    
    /**
     * Get <speffect> value
     *
     * @return \RO\Cmd\BlobSpEffect
     */
    public function getSpeffect(){
      return $this->_get(46);
    }
    
    /**
     * Set <speffect> value
     *
     * @param \RO\Cmd\BlobSpEffect $value
     * @return \RO\Cmd\BlobData
     */
    public function setSpeffect(\RO\Cmd\BlobSpEffect $value){
      return $this->_set(46, $value);
    }
    
    /**
     * Check if <deposit> has a value
     *
     * @return boolean
     */
    public function hasDeposit(){
      return $this->_has(47);
    }
    
    /**
     * Clear <deposit> value
     *
     * @return \RO\Cmd\BlobData
     */
    public function clearDeposit(){
      return $this->_clear(47);
    }
    
    /**
     * Get <deposit> value
     *
     * @return \RO\Cmd\BlobDeposit
     */
    public function getDeposit(){
      return $this->_get(47);
    }
    
    /**
     * Set <deposit> value
     *
     * @param \RO\Cmd\BlobDeposit $value
     * @return \RO\Cmd\BlobData
     */
    public function setDeposit(\RO\Cmd\BlobDeposit $value){
      return $this->_set(47, $value);
    }
    
    /**
     * Check if <activity> has a value
     *
     * @return boolean
     */
    public function hasActivity(){
      return $this->_has(48);
    }
    
    /**
     * Clear <activity> value
     *
     * @return \RO\Cmd\BlobData
     */
    public function clearActivity(){
      return $this->_clear(48);
    }
    
    /**
     * Get <activity> value
     *
     * @return \RO\Cmd\BlobActivity
     */
    public function getActivity(){
      return $this->_get(48);
    }
    
    /**
     * Set <activity> value
     *
     * @param \RO\Cmd\BlobActivity $value
     * @return \RO\Cmd\BlobData
     */
    public function setActivity(\RO\Cmd\BlobActivity $value){
      return $this->_set(48, $value);
    }
    
    /**
     * Check if <chat> has a value
     *
     * @return boolean
     */
    public function hasChat(){
      return $this->_has(51);
    }
    
    /**
     * Clear <chat> value
     *
     * @return \RO\Cmd\BlobData
     */
    public function clearChat(){
      return $this->_clear(51);
    }
    
    /**
     * Get <chat> value
     *
     * @return \RO\Cmd\BlobChat
     */
    public function getChat(){
      return $this->_get(51);
    }
    
    /**
     * Set <chat> value
     *
     * @param \RO\Cmd\BlobChat $value
     * @return \RO\Cmd\BlobData
     */
    public function setChat(\RO\Cmd\BlobChat $value){
      return $this->_set(51, $value);
    }
    
    /**
     * Check if <battle> has a value
     *
     * @return boolean
     */
    public function hasBattle(){
      return $this->_has(52);
    }
    
    /**
     * Clear <battle> value
     *
     * @return \RO\Cmd\BlobData
     */
    public function clearBattle(){
      return $this->_clear(52);
    }
    
    /**
     * Get <battle> value
     *
     * @return \RO\Cmd\BlobBattle
     */
    public function getBattle(){
      return $this->_get(52);
    }
    
    /**
     * Set <battle> value
     *
     * @param \RO\Cmd\BlobBattle $value
     * @return \RO\Cmd\BlobData
     */
    public function setBattle(\RO\Cmd\BlobBattle $value){
      return $this->_set(52, $value);
    }
    
    /**
     * Check if <statvar> has a value
     *
     * @return boolean
     */
    public function hasStatvar(){
      return $this->_has(53);
    }
    
    /**
     * Clear <statvar> value
     *
     * @return \RO\Cmd\BlobData
     */
    public function clearStatvar(){
      return $this->_clear(53);
    }
    
    /**
     * Get <statvar> value
     *
     * @return \RO\Cmd\BlobStatVar
     */
    public function getStatvar(){
      return $this->_get(53);
    }
    
    /**
     * Set <statvar> value
     *
     * @param \RO\Cmd\BlobStatVar $value
     * @return \RO\Cmd\BlobData
     */
    public function setStatvar(\RO\Cmd\BlobStatVar $value){
      return $this->_set(53, $value);
    }
    
    /**
     * Check if <seenpc> has a value
     *
     * @return boolean
     */
    public function hasSeenpc(){
      return $this->_has(54);
    }
    
    /**
     * Clear <seenpc> value
     *
     * @return \RO\Cmd\BlobData
     */
    public function clearSeenpc(){
      return $this->_clear(54);
    }
    
    /**
     * Get <seenpc> value
     *
     * @return \RO\Cmd\BlobSeeNpc
     */
    public function getSeenpc(){
      return $this->_get(54);
    }
    
    /**
     * Set <seenpc> value
     *
     * @param \RO\Cmd\BlobSeeNpc $value
     * @return \RO\Cmd\BlobData
     */
    public function setSeenpc(\RO\Cmd\BlobSeeNpc $value){
      return $this->_set(54, $value);
    }
    
    /**
     * Check if <weaponpet> has a value
     *
     * @return boolean
     */
    public function hasWeaponpet(){
      return $this->_has(55);
    }
    
    /**
     * Clear <weaponpet> value
     *
     * @return \RO\Cmd\BlobData
     */
    public function clearWeaponpet(){
      return $this->_clear(55);
    }
    
    /**
     * Get <weaponpet> value
     *
     * @return \RO\Cmd\BlobWeaponPet
     */
    public function getWeaponpet(){
      return $this->_get(55);
    }
    
    /**
     * Set <weaponpet> value
     *
     * @param \RO\Cmd\BlobWeaponPet $value
     * @return \RO\Cmd\BlobData
     */
    public function setWeaponpet(\RO\Cmd\BlobWeaponPet $value){
      return $this->_set(55, $value);
    }
    
    /**
     * Check if <ticket> has a value
     *
     * @return boolean
     */
    public function hasTicket(){
      return $this->_has(56);
    }
    
    /**
     * Clear <ticket> value
     *
     * @return \RO\Cmd\BlobData
     */
    public function clearTicket(){
      return $this->_clear(56);
    }
    
    /**
     * Get <ticket> value
     *
     * @return \RO\Cmd\BlobTicket
     */
    public function getTicket(){
      return $this->_get(56);
    }
    
    /**
     * Set <ticket> value
     *
     * @param \RO\Cmd\BlobTicket $value
     * @return \RO\Cmd\BlobData
     */
    public function setTicket(\RO\Cmd\BlobTicket $value){
      return $this->_set(56, $value);
    }
    
    /**
     * Check if <share> has a value
     *
     * @return boolean
     */
    public function hasShare(){
      return $this->_has(57);
    }
    
    /**
     * Clear <share> value
     *
     * @return \RO\Cmd\BlobData
     */
    public function clearShare(){
      return $this->_clear(57);
    }
    
    /**
     * Get <share> value
     *
     * @return \RO\Cmd\BlobShare
     */
    public function getShare(){
      return $this->_get(57);
    }
    
    /**
     * Set <share> value
     *
     * @param \RO\Cmd\BlobShare $value
     * @return \RO\Cmd\BlobData
     */
    public function setShare(\RO\Cmd\BlobShare $value){
      return $this->_set(57, $value);
    }
    
    /**
     * Check if <achieve> has a value
     *
     * @return boolean
     */
    public function hasAchieve(){
      return $this->_has(58);
    }
    
    /**
     * Clear <achieve> value
     *
     * @return \RO\Cmd\BlobData
     */
    public function clearAchieve(){
      return $this->_clear(58);
    }
    
    /**
     * Get <achieve> value
     *
     * @return \RO\Cmd\BlobAchieve
     */
    public function getAchieve(){
      return $this->_get(58);
    }
    
    /**
     * Set <achieve> value
     *
     * @param \RO\Cmd\BlobAchieve $value
     * @return \RO\Cmd\BlobData
     */
    public function setAchieve(\RO\Cmd\BlobAchieve $value){
      return $this->_set(58, $value);
    }
    
    /**
     * Check if <authorize> has a value
     *
     * @return boolean
     */
    public function hasAuthorize(){
      return $this->_has(59);
    }
    
    /**
     * Clear <authorize> value
     *
     * @return \RO\Cmd\BlobData
     */
    public function clearAuthorize(){
      return $this->_clear(59);
    }
    
    /**
     * Get <authorize> value
     *
     * @return \RO\Cmd\BlobAuthorize
     */
    public function getAuthorize(){
      return $this->_get(59);
    }
    
    /**
     * Set <authorize> value
     *
     * @param \RO\Cmd\BlobAuthorize $value
     * @return \RO\Cmd\BlobData
     */
    public function setAuthorize(\RO\Cmd\BlobAuthorize $value){
      return $this->_set(59, $value);
    }
    
    /**
     * Check if <guildraid> has a value
     *
     * @return boolean
     */
    public function hasGuildraid(){
      return $this->_has(60);
    }
    
    /**
     * Clear <guildraid> value
     *
     * @return \RO\Cmd\BlobData
     */
    public function clearGuildraid(){
      return $this->_clear(60);
    }
    
    /**
     * Get <guildraid> value
     *
     * @return \RO\Cmd\BlobGuildRaid
     */
    public function getGuildraid(){
      return $this->_get(60);
    }
    
    /**
     * Set <guildraid> value
     *
     * @param \RO\Cmd\BlobGuildRaid $value
     * @return \RO\Cmd\BlobData
     */
    public function setGuildraid(\RO\Cmd\BlobGuildRaid $value){
      return $this->_set(60, $value);
    }
    
    /**
     * Check if <astrolabe> has a value
     *
     * @return boolean
     */
    public function hasAstrolabe(){
      return $this->_has(61);
    }
    
    /**
     * Clear <astrolabe> value
     *
     * @return \RO\Cmd\BlobData
     */
    public function clearAstrolabe(){
      return $this->_clear(61);
    }
    
    /**
     * Get <astrolabe> value
     *
     * @return \RO\Cmd\BlobAstrolabe
     */
    public function getAstrolabe(){
      return $this->_get(61);
    }
    
    /**
     * Set <astrolabe> value
     *
     * @param \RO\Cmd\BlobAstrolabe $value
     * @return \RO\Cmd\BlobData
     */
    public function setAstrolabe(\RO\Cmd\BlobAstrolabe $value){
      return $this->_set(61, $value);
    }
    
    /**
     * Check if <settings> has a value
     *
     * @return boolean
     */
    public function hasSettings(){
      return $this->_has(62);
    }
    
    /**
     * Clear <settings> value
     *
     * @return \RO\Cmd\BlobData
     */
    public function clearSettings(){
      return $this->_clear(62);
    }
    
    /**
     * Get <settings> value
     *
     * @return \RO\Cmd\BlobSettings
     */
    public function getSettings(){
      return $this->_get(62);
    }
    
    /**
     * Set <settings> value
     *
     * @param \RO\Cmd\BlobSettings $value
     * @return \RO\Cmd\BlobData
     */
    public function setSettings(\RO\Cmd\BlobSettings $value){
      return $this->_set(62, $value);
    }
    
    /**
     * Check if <photo> has a value
     *
     * @return boolean
     */
    public function hasPhoto(){
      return $this->_has(63);
    }
    
    /**
     * Clear <photo> value
     *
     * @return \RO\Cmd\BlobData
     */
    public function clearPhoto(){
      return $this->_clear(63);
    }
    
    /**
     * Get <photo> value
     *
     * @return \RO\Cmd\BlobPhoto
     */
    public function getPhoto(){
      return $this->_get(63);
    }
    
    /**
     * Set <photo> value
     *
     * @param \RO\Cmd\BlobPhoto $value
     * @return \RO\Cmd\BlobData
     */
    public function setPhoto(\RO\Cmd\BlobPhoto $value){
      return $this->_set(63, $value);
    }
    
    /**
     * Check if <food> has a value
     *
     * @return boolean
     */
    public function hasFood(){
      return $this->_has(64);
    }
    
    /**
     * Clear <food> value
     *
     * @return \RO\Cmd\BlobData
     */
    public function clearFood(){
      return $this->_clear(64);
    }
    
    /**
     * Get <food> value
     *
     * @return \RO\Cmd\BlobFood
     */
    public function getFood(){
      return $this->_get(64);
    }
    
    /**
     * Set <food> value
     *
     * @param \RO\Cmd\BlobFood $value
     * @return \RO\Cmd\BlobData
     */
    public function setFood(\RO\Cmd\BlobFood $value){
      return $this->_set(64, $value);
    }
    
    /**
     * Check if <userpet> has a value
     *
     * @return boolean
     */
    public function hasUserpet(){
      return $this->_has(65);
    }
    
    /**
     * Clear <userpet> value
     *
     * @return \RO\Cmd\BlobData
     */
    public function clearUserpet(){
      return $this->_clear(65);
    }
    
    /**
     * Get <userpet> value
     *
     * @return \RO\Cmd\BlobUserPet
     */
    public function getUserpet(){
      return $this->_get(65);
    }
    
    /**
     * Set <userpet> value
     *
     * @param \RO\Cmd\BlobUserPet $value
     * @return \RO\Cmd\BlobData
     */
    public function setUserpet(\RO\Cmd\BlobUserPet $value){
      return $this->_set(65, $value);
    }
    
    /**
     * Check if <petadventure> has a value
     *
     * @return boolean
     */
    public function hasPetadventure(){
      return $this->_has(66);
    }
    
    /**
     * Clear <petadventure> value
     *
     * @return \RO\Cmd\BlobData
     */
    public function clearPetadventure(){
      return $this->_clear(66);
    }
    
    /**
     * Get <petadventure> value
     *
     * @return \RO\Cmd\BlobPetAdventure
     */
    public function getPetadventure(){
      return $this->_get(66);
    }
    
    /**
     * Set <petadventure> value
     *
     * @param \RO\Cmd\BlobPetAdventure $value
     * @return \RO\Cmd\BlobData
     */
    public function setPetadventure(\RO\Cmd\BlobPetAdventure $value){
      return $this->_set(66, $value);
    }
    
    /**
     * Check if <tutortask> has a value
     *
     * @return boolean
     */
    public function hasTutortask(){
      return $this->_has(67);
    }
    
    /**
     * Clear <tutortask> value
     *
     * @return \RO\Cmd\BlobData
     */
    public function clearTutortask(){
      return $this->_clear(67);
    }
    
    /**
     * Get <tutortask> value
     *
     * @return \RO\Cmd\BlobTutorTask
     */
    public function getTutortask(){
      return $this->_get(67);
    }
    
    /**
     * Set <tutortask> value
     *
     * @param \RO\Cmd\BlobTutorTask $value
     * @return \RO\Cmd\BlobData
     */
    public function setTutortask(\RO\Cmd\BlobTutorTask $value){
      return $this->_set(67, $value);
    }
    
    /**
     * Check if <eye> has a value
     *
     * @return boolean
     */
    public function hasEye(){
      return $this->_has(68);
    }
    
    /**
     * Clear <eye> value
     *
     * @return \RO\Cmd\BlobData
     */
    public function clearEye(){
      return $this->_clear(68);
    }
    
    /**
     * Get <eye> value
     *
     * @return \RO\Cmd\BlobEye
     */
    public function getEye(){
      return $this->_get(68);
    }
    
    /**
     * Set <eye> value
     *
     * @param \RO\Cmd\BlobEye $value
     * @return \RO\Cmd\BlobData
     */
    public function setEye(\RO\Cmd\BlobEye $value){
      return $this->_set(68, $value);
    }
    
    /**
     * Check if <highrefine> has a value
     *
     * @return boolean
     */
    public function hasHighrefine(){
      return $this->_has(69);
    }
    
    /**
     * Clear <highrefine> value
     *
     * @return \RO\Cmd\BlobData
     */
    public function clearHighrefine(){
      return $this->_clear(69);
    }
    
    /**
     * Get <highrefine> value
     *
     * @return \RO\Cmd\BlobHighRefine
     */
    public function getHighrefine(){
      return $this->_get(69);
    }
    
    /**
     * Set <highrefine> value
     *
     * @param \RO\Cmd\BlobHighRefine $value
     * @return \RO\Cmd\BlobData
     */
    public function setHighrefine(\RO\Cmd\BlobHighRefine $value){
      return $this->_set(69, $value);
    }
    
    /**
     * Check if <acevent> has a value
     *
     * @return boolean
     */
    public function hasAcevent(){
      return $this->_has(70);
    }
    
    /**
     * Clear <acevent> value
     *
     * @return \RO\Cmd\BlobData
     */
    public function clearAcevent(){
      return $this->_clear(70);
    }
    
    /**
     * Get <acevent> value
     *
     * @return \RO\Cmd\BlobActivityEvent
     */
    public function getAcevent(){
      return $this->_get(70);
    }
    
    /**
     * Set <acevent> value
     *
     * @param \RO\Cmd\BlobActivityEvent $value
     * @return \RO\Cmd\BlobData
     */
    public function setAcevent(\RO\Cmd\BlobActivityEvent $value){
      return $this->_set(70, $value);
    }
    
    /**
     * Check if <being> has a value
     *
     * @return boolean
     */
    public function hasBeing(){
      return $this->_has(71);
    }
    
    /**
     * Clear <being> value
     *
     * @return \RO\Cmd\BlobData
     */
    public function clearBeing(){
      return $this->_clear(71);
    }
    
    /**
     * Get <being> value
     *
     * @return \RO\Cmd\BlobUserBeing
     */
    public function getBeing(){
      return $this->_get(71);
    }
    
    /**
     * Set <being> value
     *
     * @param \RO\Cmd\BlobUserBeing $value
     * @return \RO\Cmd\BlobData
     */
    public function setBeing(\RO\Cmd\BlobUserBeing $value){
      return $this->_set(71, $value);
    }
    
    /**
     * Check if <gchallenge> has a value
     *
     * @return boolean
     */
    public function hasGchallenge(){
      return $this->_has(72);
    }
    
    /**
     * Clear <gchallenge> value
     *
     * @return \RO\Cmd\BlobData
     */
    public function clearGchallenge(){
      return $this->_clear(72);
    }
    
    /**
     * Get <gchallenge> value
     *
     * @return \RO\Cmd\BlobGuildChallenge
     */
    public function getGchallenge(){
      return $this->_get(72);
    }
    
    /**
     * Set <gchallenge> value
     *
     * @param \RO\Cmd\BlobGuildChallenge $value
     * @return \RO\Cmd\BlobData
     */
    public function setGchallenge(\RO\Cmd\BlobGuildChallenge $value){
      return $this->_set(72, $value);
    }
    
    /**
     * Check if <gvgdata> has a value
     *
     * @return boolean
     */
    public function hasGvgdata(){
      return $this->_has(73);
    }
    
    /**
     * Clear <gvgdata> value
     *
     * @return \RO\Cmd\BlobData
     */
    public function clearGvgdata(){
      return $this->_clear(73);
    }
    
    /**
     * Get <gvgdata> value
     *
     * @return \RO\Cmd\BlobGvgData
     */
    public function getGvgdata(){
      return $this->_get(73);
    }
    
    /**
     * Set <gvgdata> value
     *
     * @param \RO\Cmd\BlobGvgData $value
     * @return \RO\Cmd\BlobData
     */
    public function setGvgdata(\RO\Cmd\BlobGvgData $value){
      return $this->_set(73, $value);
    }
    
    /**
     * Check if <lottery> has a value
     *
     * @return boolean
     */
    public function hasLottery(){
      return $this->_has(74);
    }
    
    /**
     * Clear <lottery> value
     *
     * @return \RO\Cmd\BlobData
     */
    public function clearLottery(){
      return $this->_clear(74);
    }
    
    /**
     * Get <lottery> value
     *
     * @return \RO\Cmd\BlobLottery
     */
    public function getLottery(){
      return $this->_get(74);
    }
    
    /**
     * Set <lottery> value
     *
     * @param \RO\Cmd\BlobLottery $value
     * @return \RO\Cmd\BlobData
     */
    public function setLottery(\RO\Cmd\BlobLottery $value){
      return $this->_set(74, $value);
    }
    
    /**
     * Check if <servant> has a value
     *
     * @return boolean
     */
    public function hasServant(){
      return $this->_has(75);
    }
    
    /**
     * Clear <servant> value
     *
     * @return \RO\Cmd\BlobData
     */
    public function clearServant(){
      return $this->_clear(75);
    }
    
    /**
     * Get <servant> value
     *
     * @return \RO\Cmd\BlobServant
     */
    public function getServant(){
      return $this->_get(75);
    }
    
    /**
     * Set <servant> value
     *
     * @param \RO\Cmd\BlobServant $value
     * @return \RO\Cmd\BlobData
     */
    public function setServant(\RO\Cmd\BlobServant $value){
      return $this->_set(75, $value);
    }
    
    /**
     * Check if <profession> has a value
     *
     * @return boolean
     */
    public function hasProfession(){
      return $this->_has(76);
    }
    
    /**
     * Clear <profession> value
     *
     * @return \RO\Cmd\BlobData
     */
    public function clearProfession(){
      return $this->_clear(76);
    }
    
    /**
     * Get <profession> value
     *
     * @return \RO\Cmd\BlobProfession
     */
    public function getProfession(){
      return $this->_get(76);
    }
    
    /**
     * Set <profession> value
     *
     * @param \RO\Cmd\BlobProfession $value
     * @return \RO\Cmd\BlobData
     */
    public function setProfession(\RO\Cmd\BlobProfession $value){
      return $this->_set(76, $value);
    }
    
    /**
     * Check if <activityquest> has a value
     *
     * @return boolean
     */
    public function hasActivityquest(){
      return $this->_has(77);
    }
    
    /**
     * Clear <activityquest> value
     *
     * @return \RO\Cmd\BlobData
     */
    public function clearActivityquest(){
      return $this->_clear(77);
    }
    
    /**
     * Get <activityquest> value
     *
     * @return \RO\Cmd\BlobActivityQuest
     */
    public function getActivityquest(){
      return $this->_get(77);
    }
    
    /**
     * Set <activityquest> value
     *
     * @param \RO\Cmd\BlobActivityQuest $value
     * @return \RO\Cmd\BlobData
     */
    public function setActivityquest(\RO\Cmd\BlobActivityQuest $value){
      return $this->_set(77, $value);
    }
    
    /**
     * Check if <exchangeshop> has a value
     *
     * @return boolean
     */
    public function hasExchangeshop(){
      return $this->_has(78);
    }
    
    /**
     * Clear <exchangeshop> value
     *
     * @return \RO\Cmd\BlobData
     */
    public function clearExchangeshop(){
      return $this->_clear(78);
    }
    
    /**
     * Get <exchangeshop> value
     *
     * @return \RO\Cmd\BlobExchangeShop
     */
    public function getExchangeshop(){
      return $this->_get(78);
    }
    
    /**
     * Set <exchangeshop> value
     *
     * @param \RO\Cmd\BlobExchangeShop $value
     * @return \RO\Cmd\BlobData
     */
    public function setExchangeshop(\RO\Cmd\BlobExchangeShop $value){
      return $this->_set(78, $value);
    }
    
    /**
     * Check if <booth> has a value
     *
     * @return boolean
     */
    public function hasBooth(){
      return $this->_has(79);
    }
    
    /**
     * Clear <booth> value
     *
     * @return \RO\Cmd\BlobData
     */
    public function clearBooth(){
      return $this->_clear(79);
    }
    
    /**
     * Get <booth> value
     *
     * @return \RO\Cmd\BlobBooth
     */
    public function getBooth(){
      return $this->_get(79);
    }
    
    /**
     * Set <booth> value
     *
     * @param \RO\Cmd\BlobBooth $value
     * @return \RO\Cmd\BlobData
     */
    public function setBooth(\RO\Cmd\BlobBooth $value){
      return $this->_set(79, $value);
    }
    
    /**
     * Check if <element_elf> has a value
     *
     * @return boolean
     */
    public function hasElementElf(){
      return $this->_has(80);
    }
    
    /**
     * Clear <element_elf> value
     *
     * @return \RO\Cmd\BlobData
     */
    public function clearElementElf(){
      return $this->_clear(80);
    }
    
    /**
     * Get <element_elf> value
     *
     * @return \RO\Cmd\BlobElementElfData
     */
    public function getElementElf(){
      return $this->_get(80);
    }
    
    /**
     * Set <element_elf> value
     *
     * @param \RO\Cmd\BlobElementElfData $value
     * @return \RO\Cmd\BlobData
     */
    public function setElementElf(\RO\Cmd\BlobElementElfData $value){
      return $this->_set(80, $value);
    }
    
    /**
     * Check if <transfer> has a value
     *
     * @return boolean
     */
    public function hasTransfer(){
      return $this->_has(81);
    }
    
    /**
     * Clear <transfer> value
     *
     * @return \RO\Cmd\BlobData
     */
    public function clearTransfer(){
      return $this->_clear(81);
    }
    
    /**
     * Get <transfer> value
     *
     * @return \RO\Cmd\BlobTransfer
     */
    public function getTransfer(){
      return $this->_get(81);
    }
    
    /**
     * Set <transfer> value
     *
     * @param \RO\Cmd\BlobTransfer $value
     * @return \RO\Cmd\BlobData
     */
    public function setTransfer(\RO\Cmd\BlobTransfer $value){
      return $this->_set(81, $value);
    }
    
    /**
     * Check if <boss> has a value
     *
     * @return boolean
     */
    public function hasBoss(){
      return $this->_has(82);
    }
    
    /**
     * Clear <boss> value
     *
     * @return \RO\Cmd\BlobData
     */
    public function clearBoss(){
      return $this->_clear(82);
    }
    
    /**
     * Get <boss> value
     *
     * @return \RO\Cmd\BlobBoss
     */
    public function getBoss(){
      return $this->_get(82);
    }
    
    /**
     * Set <boss> value
     *
     * @param \RO\Cmd\BlobBoss $value
     * @return \RO\Cmd\BlobData
     */
    public function setBoss(\RO\Cmd\BlobBoss $value){
      return $this->_set(82, $value);
    }
  }
}

