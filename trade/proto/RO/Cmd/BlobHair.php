<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: RecordCmd.proto

namespace RO\Cmd {

  class BlobHair extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $curhair = 0;
    
    /**  @var int */
    public $curcolor = 0;
    
    /**  @var int[]  */
    public $unlockhair = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.BlobHair');

      // OPTIONAL UINT32 curhair = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "curhair";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 curcolor = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "curcolor";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // REPEATED UINT32 unlockhair = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "unlockhair";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <curhair> has a value
     *
     * @return boolean
     */
    public function hasCurhair(){
      return $this->_has(1);
    }
    
    /**
     * Clear <curhair> value
     *
     * @return \RO\Cmd\BlobHair
     */
    public function clearCurhair(){
      return $this->_clear(1);
    }
    
    /**
     * Get <curhair> value
     *
     * @return int
     */
    public function getCurhair(){
      return $this->_get(1);
    }
    
    /**
     * Set <curhair> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobHair
     */
    public function setCurhair( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <curcolor> has a value
     *
     * @return boolean
     */
    public function hasCurcolor(){
      return $this->_has(2);
    }
    
    /**
     * Clear <curcolor> value
     *
     * @return \RO\Cmd\BlobHair
     */
    public function clearCurcolor(){
      return $this->_clear(2);
    }
    
    /**
     * Get <curcolor> value
     *
     * @return int
     */
    public function getCurcolor(){
      return $this->_get(2);
    }
    
    /**
     * Set <curcolor> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobHair
     */
    public function setCurcolor( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <unlockhair> has a value
     *
     * @return boolean
     */
    public function hasUnlockhair(){
      return $this->_has(3);
    }
    
    /**
     * Clear <unlockhair> value
     *
     * @return \RO\Cmd\BlobHair
     */
    public function clearUnlockhair(){
      return $this->_clear(3);
    }
    
    /**
     * Get <unlockhair> value
     *
     * @param int $idx
     * @return int
     */
    public function getUnlockhair($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <unlockhair> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobHair
     */
    public function setUnlockhair( $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <unlockhair>
     *
     * @return int[]
     */
    public function getUnlockhairList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <unlockhair>
     *
     * @param int $value
     * @return \RO\Cmd\BlobHair
     */
    public function addUnlockhair( $value){
     return $this->_add(3, $value);
    }
  }
}

