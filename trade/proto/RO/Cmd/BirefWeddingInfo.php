<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: WeddingCCmd.proto

namespace RO\Cmd {

  class BirefWeddingInfo extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $id = null;
    
    /**  @var int - \RO\Cmd\EWeddingStatus */
    public $status = null;
    
    /**  @var \RO\Cmd\CharData */
    public $char1 = null;
    
    /**  @var \RO\Cmd\CharData */
    public $char2 = null;
    
    /**  @var int */
    public $zoneid = null;
    
    /**  @var int */
    public $starttime = null;
    
    /**  @var int */
    public $endtime = null;
    
    /**  @var boolean */
    public $can_single_divorce = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.BirefWeddingInfo');

      // OPTIONAL UINT64 id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM status = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\EWeddingStatus';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE char1 = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "char1";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\CharData';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE char2 = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "char2";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\CharData';
      $descriptor->addField($f);

      // OPTIONAL UINT32 zoneid = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "zoneid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 starttime = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "starttime";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 endtime = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "endtime";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL can_single_divorce = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "can_single_divorce";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \RO\Cmd\BirefWeddingInfo
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param int $value
     * @return \RO\Cmd\BirefWeddingInfo
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(2);
    }
    
    /**
     * Clear <status> value
     *
     * @return \RO\Cmd\BirefWeddingInfo
     */
    public function clearStatus(){
      return $this->_clear(2);
    }
    
    /**
     * Get <status> value
     *
     * @return int - \RO\Cmd\EWeddingStatus
     */
    public function getStatus(){
      return $this->_get(2);
    }
    
    /**
     * Set <status> value
     *
     * @param int - \RO\Cmd\EWeddingStatus $value
     * @return \RO\Cmd\BirefWeddingInfo
     */
    public function setStatus( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <char1> has a value
     *
     * @return boolean
     */
    public function hasChar1(){
      return $this->_has(3);
    }
    
    /**
     * Clear <char1> value
     *
     * @return \RO\Cmd\BirefWeddingInfo
     */
    public function clearChar1(){
      return $this->_clear(3);
    }
    
    /**
     * Get <char1> value
     *
     * @return \RO\Cmd\CharData
     */
    public function getChar1(){
      return $this->_get(3);
    }
    
    /**
     * Set <char1> value
     *
     * @param \RO\Cmd\CharData $value
     * @return \RO\Cmd\BirefWeddingInfo
     */
    public function setChar1(\RO\Cmd\CharData $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <char2> has a value
     *
     * @return boolean
     */
    public function hasChar2(){
      return $this->_has(4);
    }
    
    /**
     * Clear <char2> value
     *
     * @return \RO\Cmd\BirefWeddingInfo
     */
    public function clearChar2(){
      return $this->_clear(4);
    }
    
    /**
     * Get <char2> value
     *
     * @return \RO\Cmd\CharData
     */
    public function getChar2(){
      return $this->_get(4);
    }
    
    /**
     * Set <char2> value
     *
     * @param \RO\Cmd\CharData $value
     * @return \RO\Cmd\BirefWeddingInfo
     */
    public function setChar2(\RO\Cmd\CharData $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <zoneid> has a value
     *
     * @return boolean
     */
    public function hasZoneid(){
      return $this->_has(5);
    }
    
    /**
     * Clear <zoneid> value
     *
     * @return \RO\Cmd\BirefWeddingInfo
     */
    public function clearZoneid(){
      return $this->_clear(5);
    }
    
    /**
     * Get <zoneid> value
     *
     * @return int
     */
    public function getZoneid(){
      return $this->_get(5);
    }
    
    /**
     * Set <zoneid> value
     *
     * @param int $value
     * @return \RO\Cmd\BirefWeddingInfo
     */
    public function setZoneid( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <starttime> has a value
     *
     * @return boolean
     */
    public function hasStarttime(){
      return $this->_has(6);
    }
    
    /**
     * Clear <starttime> value
     *
     * @return \RO\Cmd\BirefWeddingInfo
     */
    public function clearStarttime(){
      return $this->_clear(6);
    }
    
    /**
     * Get <starttime> value
     *
     * @return int
     */
    public function getStarttime(){
      return $this->_get(6);
    }
    
    /**
     * Set <starttime> value
     *
     * @param int $value
     * @return \RO\Cmd\BirefWeddingInfo
     */
    public function setStarttime( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <endtime> has a value
     *
     * @return boolean
     */
    public function hasEndtime(){
      return $this->_has(7);
    }
    
    /**
     * Clear <endtime> value
     *
     * @return \RO\Cmd\BirefWeddingInfo
     */
    public function clearEndtime(){
      return $this->_clear(7);
    }
    
    /**
     * Get <endtime> value
     *
     * @return int
     */
    public function getEndtime(){
      return $this->_get(7);
    }
    
    /**
     * Set <endtime> value
     *
     * @param int $value
     * @return \RO\Cmd\BirefWeddingInfo
     */
    public function setEndtime( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <can_single_divorce> has a value
     *
     * @return boolean
     */
    public function hasCanSingleDivorce(){
      return $this->_has(8);
    }
    
    /**
     * Clear <can_single_divorce> value
     *
     * @return \RO\Cmd\BirefWeddingInfo
     */
    public function clearCanSingleDivorce(){
      return $this->_clear(8);
    }
    
    /**
     * Get <can_single_divorce> value
     *
     * @return boolean
     */
    public function getCanSingleDivorce(){
      return $this->_get(8);
    }
    
    /**
     * Set <can_single_divorce> value
     *
     * @param boolean $value
     * @return \RO\Cmd\BirefWeddingInfo
     */
    public function setCanSingleDivorce( $value){
      return $this->_set(8, $value);
    }
  }
}

