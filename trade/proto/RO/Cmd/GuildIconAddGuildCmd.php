<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: GuildCmd.proto

namespace RO\Cmd {

  class GuildIconAddGuildCmd extends \DrSlump\Protobuf\Message {

    /**  @var int - \RO\Cmd\Command */
    public $cmd = \RO\Cmd\Command::SESSION_USER_GUILD_PROTOCMD;
    
    /**  @var int - \RO\Cmd\GuildParam */
    public $param = \RO\Cmd\GuildParam::GUILDPARAM_GUILD_ICON_ADD;
    
    /**  @var int */
    public $index = 0;
    
    /**  @var int - \RO\Cmd\EIconState */
    public $state = \RO\Cmd\EIconState::EICON_INIT;
    
    /**  @var int */
    public $createtime = 0;
    
    /**  @var boolean */
    public $isdelete = false;
    
    /**  @var string */
    public $type = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.GuildIconAddGuildCmd');

      // OPTIONAL ENUM cmd = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "cmd";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\Command';
      $f->default   = \RO\Cmd\Command::SESSION_USER_GUILD_PROTOCMD;
      $descriptor->addField($f);

      // OPTIONAL ENUM param = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "param";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\GuildParam';
      $f->default   = \RO\Cmd\GuildParam::GUILDPARAM_GUILD_ICON_ADD;
      $descriptor->addField($f);

      // OPTIONAL UINT32 index = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "index";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL ENUM state = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\EIconState';
      $f->default   = \RO\Cmd\EIconState::EICON_INIT;
      $descriptor->addField($f);

      // OPTIONAL UINT32 createtime = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "createtime";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL BOOL isdelete = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "isdelete";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = false;
      $descriptor->addField($f);

      // OPTIONAL STRING type = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <cmd> has a value
     *
     * @return boolean
     */
    public function hasCmd(){
      return $this->_has(1);
    }
    
    /**
     * Clear <cmd> value
     *
     * @return \RO\Cmd\GuildIconAddGuildCmd
     */
    public function clearCmd(){
      return $this->_clear(1);
    }
    
    /**
     * Get <cmd> value
     *
     * @return int - \RO\Cmd\Command
     */
    public function getCmd(){
      return $this->_get(1);
    }
    
    /**
     * Set <cmd> value
     *
     * @param int - \RO\Cmd\Command $value
     * @return \RO\Cmd\GuildIconAddGuildCmd
     */
    public function setCmd( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <param> has a value
     *
     * @return boolean
     */
    public function hasParam(){
      return $this->_has(2);
    }
    
    /**
     * Clear <param> value
     *
     * @return \RO\Cmd\GuildIconAddGuildCmd
     */
    public function clearParam(){
      return $this->_clear(2);
    }
    
    /**
     * Get <param> value
     *
     * @return int - \RO\Cmd\GuildParam
     */
    public function getParam(){
      return $this->_get(2);
    }
    
    /**
     * Set <param> value
     *
     * @param int - \RO\Cmd\GuildParam $value
     * @return \RO\Cmd\GuildIconAddGuildCmd
     */
    public function setParam( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <index> has a value
     *
     * @return boolean
     */
    public function hasIndex(){
      return $this->_has(3);
    }
    
    /**
     * Clear <index> value
     *
     * @return \RO\Cmd\GuildIconAddGuildCmd
     */
    public function clearIndex(){
      return $this->_clear(3);
    }
    
    /**
     * Get <index> value
     *
     * @return int
     */
    public function getIndex(){
      return $this->_get(3);
    }
    
    /**
     * Set <index> value
     *
     * @param int $value
     * @return \RO\Cmd\GuildIconAddGuildCmd
     */
    public function setIndex( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(4);
    }
    
    /**
     * Clear <state> value
     *
     * @return \RO\Cmd\GuildIconAddGuildCmd
     */
    public function clearState(){
      return $this->_clear(4);
    }
    
    /**
     * Get <state> value
     *
     * @return int - \RO\Cmd\EIconState
     */
    public function getState(){
      return $this->_get(4);
    }
    
    /**
     * Set <state> value
     *
     * @param int - \RO\Cmd\EIconState $value
     * @return \RO\Cmd\GuildIconAddGuildCmd
     */
    public function setState( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <createtime> has a value
     *
     * @return boolean
     */
    public function hasCreatetime(){
      return $this->_has(5);
    }
    
    /**
     * Clear <createtime> value
     *
     * @return \RO\Cmd\GuildIconAddGuildCmd
     */
    public function clearCreatetime(){
      return $this->_clear(5);
    }
    
    /**
     * Get <createtime> value
     *
     * @return int
     */
    public function getCreatetime(){
      return $this->_get(5);
    }
    
    /**
     * Set <createtime> value
     *
     * @param int $value
     * @return \RO\Cmd\GuildIconAddGuildCmd
     */
    public function setCreatetime( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <isdelete> has a value
     *
     * @return boolean
     */
    public function hasIsdelete(){
      return $this->_has(6);
    }
    
    /**
     * Clear <isdelete> value
     *
     * @return \RO\Cmd\GuildIconAddGuildCmd
     */
    public function clearIsdelete(){
      return $this->_clear(6);
    }
    
    /**
     * Get <isdelete> value
     *
     * @return boolean
     */
    public function getIsdelete(){
      return $this->_get(6);
    }
    
    /**
     * Set <isdelete> value
     *
     * @param boolean $value
     * @return \RO\Cmd\GuildIconAddGuildCmd
     */
    public function setIsdelete( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(7);
    }
    
    /**
     * Clear <type> value
     *
     * @return \RO\Cmd\GuildIconAddGuildCmd
     */
    public function clearType(){
      return $this->_clear(7);
    }
    
    /**
     * Get <type> value
     *
     * @return string
     */
    public function getType(){
      return $this->_get(7);
    }
    
    /**
     * Set <type> value
     *
     * @param string $value
     * @return \RO\Cmd\GuildIconAddGuildCmd
     */
    public function setType( $value){
      return $this->_set(7, $value);
    }
  }
}

