<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: SceneUser.proto

namespace RO\Cmd {

  class ChangeSceneUserCmd extends \DrSlump\Protobuf\Message {

    /**  @var int - \RO\Cmd\Command */
    public $cmd = \RO\Cmd\Command::SCENE_USER_PROTOCMD;
    
    /**  @var int - \RO\Cmd\CmdParam */
    public $param = \RO\Cmd\CmdParam::CHANGE_SCENE_USER_CMD;
    
    /**  @var int */
    public $mapID = null;
    
    /**  @var string */
    public $mapName = null;
    
    /**  @var \RO\Cmd\ScenePos */
    public $pos = null;
    
    /**  @var int */
    public $dmapID = null;
    
    /**  @var int */
    public $preview = null;
    
    /**  @var int[]  */
    public $invisiblexit = array();
    
    /**  @var int */
    public $imageid = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.ChangeSceneUserCmd');

      // OPTIONAL ENUM cmd = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "cmd";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\Command';
      $f->default   = \RO\Cmd\Command::SCENE_USER_PROTOCMD;
      $descriptor->addField($f);

      // OPTIONAL ENUM param = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "param";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\CmdParam';
      $f->default   = \RO\Cmd\CmdParam::CHANGE_SCENE_USER_CMD;
      $descriptor->addField($f);

      // OPTIONAL UINT32 mapID = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "mapID";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING mapName = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "mapName";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE pos = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "pos";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\ScenePos';
      $descriptor->addField($f);

      // OPTIONAL UINT32 dmapID = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "dmapID";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 preview = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "preview";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED UINT32 invisiblexit = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "invisiblexit";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL UINT32 imageid = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "imageid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <cmd> has a value
     *
     * @return boolean
     */
    public function hasCmd(){
      return $this->_has(1);
    }
    
    /**
     * Clear <cmd> value
     *
     * @return \RO\Cmd\ChangeSceneUserCmd
     */
    public function clearCmd(){
      return $this->_clear(1);
    }
    
    /**
     * Get <cmd> value
     *
     * @return int - \RO\Cmd\Command
     */
    public function getCmd(){
      return $this->_get(1);
    }
    
    /**
     * Set <cmd> value
     *
     * @param int - \RO\Cmd\Command $value
     * @return \RO\Cmd\ChangeSceneUserCmd
     */
    public function setCmd( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <param> has a value
     *
     * @return boolean
     */
    public function hasParam(){
      return $this->_has(2);
    }
    
    /**
     * Clear <param> value
     *
     * @return \RO\Cmd\ChangeSceneUserCmd
     */
    public function clearParam(){
      return $this->_clear(2);
    }
    
    /**
     * Get <param> value
     *
     * @return int - \RO\Cmd\CmdParam
     */
    public function getParam(){
      return $this->_get(2);
    }
    
    /**
     * Set <param> value
     *
     * @param int - \RO\Cmd\CmdParam $value
     * @return \RO\Cmd\ChangeSceneUserCmd
     */
    public function setParam( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <mapID> has a value
     *
     * @return boolean
     */
    public function hasMapID(){
      return $this->_has(3);
    }
    
    /**
     * Clear <mapID> value
     *
     * @return \RO\Cmd\ChangeSceneUserCmd
     */
    public function clearMapID(){
      return $this->_clear(3);
    }
    
    /**
     * Get <mapID> value
     *
     * @return int
     */
    public function getMapID(){
      return $this->_get(3);
    }
    
    /**
     * Set <mapID> value
     *
     * @param int $value
     * @return \RO\Cmd\ChangeSceneUserCmd
     */
    public function setMapID( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <mapName> has a value
     *
     * @return boolean
     */
    public function hasMapName(){
      return $this->_has(4);
    }
    
    /**
     * Clear <mapName> value
     *
     * @return \RO\Cmd\ChangeSceneUserCmd
     */
    public function clearMapName(){
      return $this->_clear(4);
    }
    
    /**
     * Get <mapName> value
     *
     * @return string
     */
    public function getMapName(){
      return $this->_get(4);
    }
    
    /**
     * Set <mapName> value
     *
     * @param string $value
     * @return \RO\Cmd\ChangeSceneUserCmd
     */
    public function setMapName( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <pos> has a value
     *
     * @return boolean
     */
    public function hasPos(){
      return $this->_has(5);
    }
    
    /**
     * Clear <pos> value
     *
     * @return \RO\Cmd\ChangeSceneUserCmd
     */
    public function clearPos(){
      return $this->_clear(5);
    }
    
    /**
     * Get <pos> value
     *
     * @return \RO\Cmd\ScenePos
     */
    public function getPos(){
      return $this->_get(5);
    }
    
    /**
     * Set <pos> value
     *
     * @param \RO\Cmd\ScenePos $value
     * @return \RO\Cmd\ChangeSceneUserCmd
     */
    public function setPos(\RO\Cmd\ScenePos $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <dmapID> has a value
     *
     * @return boolean
     */
    public function hasDmapID(){
      return $this->_has(6);
    }
    
    /**
     * Clear <dmapID> value
     *
     * @return \RO\Cmd\ChangeSceneUserCmd
     */
    public function clearDmapID(){
      return $this->_clear(6);
    }
    
    /**
     * Get <dmapID> value
     *
     * @return int
     */
    public function getDmapID(){
      return $this->_get(6);
    }
    
    /**
     * Set <dmapID> value
     *
     * @param int $value
     * @return \RO\Cmd\ChangeSceneUserCmd
     */
    public function setDmapID( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <preview> has a value
     *
     * @return boolean
     */
    public function hasPreview(){
      return $this->_has(7);
    }
    
    /**
     * Clear <preview> value
     *
     * @return \RO\Cmd\ChangeSceneUserCmd
     */
    public function clearPreview(){
      return $this->_clear(7);
    }
    
    /**
     * Get <preview> value
     *
     * @return int
     */
    public function getPreview(){
      return $this->_get(7);
    }
    
    /**
     * Set <preview> value
     *
     * @param int $value
     * @return \RO\Cmd\ChangeSceneUserCmd
     */
    public function setPreview( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <invisiblexit> has a value
     *
     * @return boolean
     */
    public function hasInvisiblexit(){
      return $this->_has(8);
    }
    
    /**
     * Clear <invisiblexit> value
     *
     * @return \RO\Cmd\ChangeSceneUserCmd
     */
    public function clearInvisiblexit(){
      return $this->_clear(8);
    }
    
    /**
     * Get <invisiblexit> value
     *
     * @param int $idx
     * @return int
     */
    public function getInvisiblexit($idx = NULL){
      return $this->_get(8, $idx);
    }
    
    /**
     * Set <invisiblexit> value
     *
     * @param int $value
     * @return \RO\Cmd\ChangeSceneUserCmd
     */
    public function setInvisiblexit( $value, $idx = NULL){
      return $this->_set(8, $value, $idx);
    }
    
    /**
     * Get all elements of <invisiblexit>
     *
     * @return int[]
     */
    public function getInvisiblexitList(){
     return $this->_get(8);
    }
    
    /**
     * Add a new element to <invisiblexit>
     *
     * @param int $value
     * @return \RO\Cmd\ChangeSceneUserCmd
     */
    public function addInvisiblexit( $value){
     return $this->_add(8, $value);
    }
    
    /**
     * Check if <imageid> has a value
     *
     * @return boolean
     */
    public function hasImageid(){
      return $this->_has(9);
    }
    
    /**
     * Clear <imageid> value
     *
     * @return \RO\Cmd\ChangeSceneUserCmd
     */
    public function clearImageid(){
      return $this->_clear(9);
    }
    
    /**
     * Get <imageid> value
     *
     * @return int
     */
    public function getImageid(){
      return $this->_get(9);
    }
    
    /**
     * Set <imageid> value
     *
     * @param int $value
     * @return \RO\Cmd\ChangeSceneUserCmd
     */
    public function setImageid( $value){
      return $this->_set(9, $value);
    }
  }
}

