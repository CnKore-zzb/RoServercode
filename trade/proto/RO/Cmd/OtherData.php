<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: SceneQuest.proto

namespace RO\Cmd {

  class OtherData extends \DrSlump\Protobuf\Message {

    /**  @var int - \RO\Cmd\EOtherData */
    public $data = \RO\Cmd\EOtherData::EOTHERDATA_MIN;
    
    /**  @var int */
    public $param1 = 0;
    
    /**  @var int */
    public $param2 = 0;
    
    /**  @var int */
    public $param3 = 0;
    
    /**  @var int */
    public $param4 = 0;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.OtherData');

      // OPTIONAL ENUM data = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "data";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\EOtherData';
      $f->default   = \RO\Cmd\EOtherData::EOTHERDATA_MIN;
      $descriptor->addField($f);

      // OPTIONAL UINT32 param1 = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "param1";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 param2 = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "param2";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 param3 = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "param3";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 param4 = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "param4";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <data> has a value
     *
     * @return boolean
     */
    public function hasData(){
      return $this->_has(1);
    }
    
    /**
     * Clear <data> value
     *
     * @return \RO\Cmd\OtherData
     */
    public function clearData(){
      return $this->_clear(1);
    }
    
    /**
     * Get <data> value
     *
     * @return int - \RO\Cmd\EOtherData
     */
    public function getData(){
      return $this->_get(1);
    }
    
    /**
     * Set <data> value
     *
     * @param int - \RO\Cmd\EOtherData $value
     * @return \RO\Cmd\OtherData
     */
    public function setData( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <param1> has a value
     *
     * @return boolean
     */
    public function hasParam1(){
      return $this->_has(2);
    }
    
    /**
     * Clear <param1> value
     *
     * @return \RO\Cmd\OtherData
     */
    public function clearParam1(){
      return $this->_clear(2);
    }
    
    /**
     * Get <param1> value
     *
     * @return int
     */
    public function getParam1(){
      return $this->_get(2);
    }
    
    /**
     * Set <param1> value
     *
     * @param int $value
     * @return \RO\Cmd\OtherData
     */
    public function setParam1( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <param2> has a value
     *
     * @return boolean
     */
    public function hasParam2(){
      return $this->_has(3);
    }
    
    /**
     * Clear <param2> value
     *
     * @return \RO\Cmd\OtherData
     */
    public function clearParam2(){
      return $this->_clear(3);
    }
    
    /**
     * Get <param2> value
     *
     * @return int
     */
    public function getParam2(){
      return $this->_get(3);
    }
    
    /**
     * Set <param2> value
     *
     * @param int $value
     * @return \RO\Cmd\OtherData
     */
    public function setParam2( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <param3> has a value
     *
     * @return boolean
     */
    public function hasParam3(){
      return $this->_has(4);
    }
    
    /**
     * Clear <param3> value
     *
     * @return \RO\Cmd\OtherData
     */
    public function clearParam3(){
      return $this->_clear(4);
    }
    
    /**
     * Get <param3> value
     *
     * @return int
     */
    public function getParam3(){
      return $this->_get(4);
    }
    
    /**
     * Set <param3> value
     *
     * @param int $value
     * @return \RO\Cmd\OtherData
     */
    public function setParam3( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <param4> has a value
     *
     * @return boolean
     */
    public function hasParam4(){
      return $this->_has(5);
    }
    
    /**
     * Clear <param4> value
     *
     * @return \RO\Cmd\OtherData
     */
    public function clearParam4(){
      return $this->_clear(5);
    }
    
    /**
     * Get <param4> value
     *
     * @return int
     */
    public function getParam4(){
      return $this->_get(5);
    }
    
    /**
     * Set <param4> value
     *
     * @param int $value
     * @return \RO\Cmd\OtherData
     */
    public function setParam4( $value){
      return $this->_set(5, $value);
    }
  }
}

