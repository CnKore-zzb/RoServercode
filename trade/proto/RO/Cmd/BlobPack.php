<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: RecordCmd.proto

namespace RO\Cmd {

  class BlobPack extends \DrSlump\Protobuf\Message {

    /**  @var \RO\Cmd\PackageData[]  */
    public $datas = array();
    
    /**  @var int[]  */
    public $hintitems = array();
    
    /**  @var \RO\Cmd\FrostItemInfo[]  */
    public $frost_item_infos = array();
    
    /**  @var \RO\Cmd\ItemUseCount[]  */
    public $itemuse = array();
    
    /**  @var int[]  */
    public $onceitems = array();
    
    /**  @var \RO\Cmd\ItemGetCount[]  */
    public $itemget = array();
    
    /**  @var int */
    public $arrowid = null;
    
    /**  @var int */
    public $version = 0;
    
    /**  @var \RO\Cmd\EquipPosData[]  */
    public $equipposdatas = array();
    
    /**  @var \RO\Cmd\RewardSafetyItem[]  */
    public $rewardsafetyitems = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.BlobPack');

      // REPEATED MESSAGE datas = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "datas";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\PackageData';
      $descriptor->addField($f);

      // REPEATED UINT32 hintitems = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "hintitems";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED MESSAGE frost_item_infos = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "frost_item_infos";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\FrostItemInfo';
      $descriptor->addField($f);

      // REPEATED MESSAGE itemuse = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "itemuse";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\ItemUseCount';
      $descriptor->addField($f);

      // REPEATED UINT32 onceitems = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "onceitems";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED MESSAGE itemget = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "itemget";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\ItemGetCount';
      $descriptor->addField($f);

      // OPTIONAL UINT32 arrowid = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "arrowid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 version = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "version";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // REPEATED MESSAGE equipposdatas = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "equipposdatas";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\EquipPosData';
      $descriptor->addField($f);

      // REPEATED MESSAGE rewardsafetyitems = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "rewardsafetyitems";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\RewardSafetyItem';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <datas> has a value
     *
     * @return boolean
     */
    public function hasDatas(){
      return $this->_has(1);
    }
    
    /**
     * Clear <datas> value
     *
     * @return \RO\Cmd\BlobPack
     */
    public function clearDatas(){
      return $this->_clear(1);
    }
    
    /**
     * Get <datas> value
     *
     * @param int $idx
     * @return \RO\Cmd\PackageData
     */
    public function getDatas($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <datas> value
     *
     * @param \RO\Cmd\PackageData $value
     * @return \RO\Cmd\BlobPack
     */
    public function setDatas(\RO\Cmd\PackageData $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <datas>
     *
     * @return \RO\Cmd\PackageData[]
     */
    public function getDatasList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <datas>
     *
     * @param \RO\Cmd\PackageData $value
     * @return \RO\Cmd\BlobPack
     */
    public function addDatas(\RO\Cmd\PackageData $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <hintitems> has a value
     *
     * @return boolean
     */
    public function hasHintitems(){
      return $this->_has(2);
    }
    
    /**
     * Clear <hintitems> value
     *
     * @return \RO\Cmd\BlobPack
     */
    public function clearHintitems(){
      return $this->_clear(2);
    }
    
    /**
     * Get <hintitems> value
     *
     * @param int $idx
     * @return int
     */
    public function getHintitems($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <hintitems> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobPack
     */
    public function setHintitems( $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <hintitems>
     *
     * @return int[]
     */
    public function getHintitemsList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <hintitems>
     *
     * @param int $value
     * @return \RO\Cmd\BlobPack
     */
    public function addHintitems( $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <frost_item_infos> has a value
     *
     * @return boolean
     */
    public function hasFrostItemInfos(){
      return $this->_has(3);
    }
    
    /**
     * Clear <frost_item_infos> value
     *
     * @return \RO\Cmd\BlobPack
     */
    public function clearFrostItemInfos(){
      return $this->_clear(3);
    }
    
    /**
     * Get <frost_item_infos> value
     *
     * @param int $idx
     * @return \RO\Cmd\FrostItemInfo
     */
    public function getFrostItemInfos($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <frost_item_infos> value
     *
     * @param \RO\Cmd\FrostItemInfo $value
     * @return \RO\Cmd\BlobPack
     */
    public function setFrostItemInfos(\RO\Cmd\FrostItemInfo $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <frost_item_infos>
     *
     * @return \RO\Cmd\FrostItemInfo[]
     */
    public function getFrostItemInfosList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <frost_item_infos>
     *
     * @param \RO\Cmd\FrostItemInfo $value
     * @return \RO\Cmd\BlobPack
     */
    public function addFrostItemInfos(\RO\Cmd\FrostItemInfo $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <itemuse> has a value
     *
     * @return boolean
     */
    public function hasItemuse(){
      return $this->_has(4);
    }
    
    /**
     * Clear <itemuse> value
     *
     * @return \RO\Cmd\BlobPack
     */
    public function clearItemuse(){
      return $this->_clear(4);
    }
    
    /**
     * Get <itemuse> value
     *
     * @param int $idx
     * @return \RO\Cmd\ItemUseCount
     */
    public function getItemuse($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <itemuse> value
     *
     * @param \RO\Cmd\ItemUseCount $value
     * @return \RO\Cmd\BlobPack
     */
    public function setItemuse(\RO\Cmd\ItemUseCount $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <itemuse>
     *
     * @return \RO\Cmd\ItemUseCount[]
     */
    public function getItemuseList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <itemuse>
     *
     * @param \RO\Cmd\ItemUseCount $value
     * @return \RO\Cmd\BlobPack
     */
    public function addItemuse(\RO\Cmd\ItemUseCount $value){
     return $this->_add(4, $value);
    }
    
    /**
     * Check if <onceitems> has a value
     *
     * @return boolean
     */
    public function hasOnceitems(){
      return $this->_has(5);
    }
    
    /**
     * Clear <onceitems> value
     *
     * @return \RO\Cmd\BlobPack
     */
    public function clearOnceitems(){
      return $this->_clear(5);
    }
    
    /**
     * Get <onceitems> value
     *
     * @param int $idx
     * @return int
     */
    public function getOnceitems($idx = NULL){
      return $this->_get(5, $idx);
    }
    
    /**
     * Set <onceitems> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobPack
     */
    public function setOnceitems( $value, $idx = NULL){
      return $this->_set(5, $value, $idx);
    }
    
    /**
     * Get all elements of <onceitems>
     *
     * @return int[]
     */
    public function getOnceitemsList(){
     return $this->_get(5);
    }
    
    /**
     * Add a new element to <onceitems>
     *
     * @param int $value
     * @return \RO\Cmd\BlobPack
     */
    public function addOnceitems( $value){
     return $this->_add(5, $value);
    }
    
    /**
     * Check if <itemget> has a value
     *
     * @return boolean
     */
    public function hasItemget(){
      return $this->_has(6);
    }
    
    /**
     * Clear <itemget> value
     *
     * @return \RO\Cmd\BlobPack
     */
    public function clearItemget(){
      return $this->_clear(6);
    }
    
    /**
     * Get <itemget> value
     *
     * @param int $idx
     * @return \RO\Cmd\ItemGetCount
     */
    public function getItemget($idx = NULL){
      return $this->_get(6, $idx);
    }
    
    /**
     * Set <itemget> value
     *
     * @param \RO\Cmd\ItemGetCount $value
     * @return \RO\Cmd\BlobPack
     */
    public function setItemget(\RO\Cmd\ItemGetCount $value, $idx = NULL){
      return $this->_set(6, $value, $idx);
    }
    
    /**
     * Get all elements of <itemget>
     *
     * @return \RO\Cmd\ItemGetCount[]
     */
    public function getItemgetList(){
     return $this->_get(6);
    }
    
    /**
     * Add a new element to <itemget>
     *
     * @param \RO\Cmd\ItemGetCount $value
     * @return \RO\Cmd\BlobPack
     */
    public function addItemget(\RO\Cmd\ItemGetCount $value){
     return $this->_add(6, $value);
    }
    
    /**
     * Check if <arrowid> has a value
     *
     * @return boolean
     */
    public function hasArrowid(){
      return $this->_has(8);
    }
    
    /**
     * Clear <arrowid> value
     *
     * @return \RO\Cmd\BlobPack
     */
    public function clearArrowid(){
      return $this->_clear(8);
    }
    
    /**
     * Get <arrowid> value
     *
     * @return int
     */
    public function getArrowid(){
      return $this->_get(8);
    }
    
    /**
     * Set <arrowid> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobPack
     */
    public function setArrowid( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <version> has a value
     *
     * @return boolean
     */
    public function hasVersion(){
      return $this->_has(9);
    }
    
    /**
     * Clear <version> value
     *
     * @return \RO\Cmd\BlobPack
     */
    public function clearVersion(){
      return $this->_clear(9);
    }
    
    /**
     * Get <version> value
     *
     * @return int
     */
    public function getVersion(){
      return $this->_get(9);
    }
    
    /**
     * Set <version> value
     *
     * @param int $value
     * @return \RO\Cmd\BlobPack
     */
    public function setVersion( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <equipposdatas> has a value
     *
     * @return boolean
     */
    public function hasEquipposdatas(){
      return $this->_has(10);
    }
    
    /**
     * Clear <equipposdatas> value
     *
     * @return \RO\Cmd\BlobPack
     */
    public function clearEquipposdatas(){
      return $this->_clear(10);
    }
    
    /**
     * Get <equipposdatas> value
     *
     * @param int $idx
     * @return \RO\Cmd\EquipPosData
     */
    public function getEquipposdatas($idx = NULL){
      return $this->_get(10, $idx);
    }
    
    /**
     * Set <equipposdatas> value
     *
     * @param \RO\Cmd\EquipPosData $value
     * @return \RO\Cmd\BlobPack
     */
    public function setEquipposdatas(\RO\Cmd\EquipPosData $value, $idx = NULL){
      return $this->_set(10, $value, $idx);
    }
    
    /**
     * Get all elements of <equipposdatas>
     *
     * @return \RO\Cmd\EquipPosData[]
     */
    public function getEquipposdatasList(){
     return $this->_get(10);
    }
    
    /**
     * Add a new element to <equipposdatas>
     *
     * @param \RO\Cmd\EquipPosData $value
     * @return \RO\Cmd\BlobPack
     */
    public function addEquipposdatas(\RO\Cmd\EquipPosData $value){
     return $this->_add(10, $value);
    }
    
    /**
     * Check if <rewardsafetyitems> has a value
     *
     * @return boolean
     */
    public function hasRewardsafetyitems(){
      return $this->_has(11);
    }
    
    /**
     * Clear <rewardsafetyitems> value
     *
     * @return \RO\Cmd\BlobPack
     */
    public function clearRewardsafetyitems(){
      return $this->_clear(11);
    }
    
    /**
     * Get <rewardsafetyitems> value
     *
     * @param int $idx
     * @return \RO\Cmd\RewardSafetyItem
     */
    public function getRewardsafetyitems($idx = NULL){
      return $this->_get(11, $idx);
    }
    
    /**
     * Set <rewardsafetyitems> value
     *
     * @param \RO\Cmd\RewardSafetyItem $value
     * @return \RO\Cmd\BlobPack
     */
    public function setRewardsafetyitems(\RO\Cmd\RewardSafetyItem $value, $idx = NULL){
      return $this->_set(11, $value, $idx);
    }
    
    /**
     * Get all elements of <rewardsafetyitems>
     *
     * @return \RO\Cmd\RewardSafetyItem[]
     */
    public function getRewardsafetyitemsList(){
     return $this->_get(11);
    }
    
    /**
     * Add a new element to <rewardsafetyitems>
     *
     * @param \RO\Cmd\RewardSafetyItem $value
     * @return \RO\Cmd\BlobPack
     */
    public function addRewardsafetyitems(\RO\Cmd\RewardSafetyItem $value){
     return $this->_add(11, $value);
    }
  }
}

