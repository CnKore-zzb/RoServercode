<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: SceneBeing.proto

namespace RO\Cmd {

  class UserBeingData extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $version = 0;
    
    /**  @var int */
    public $id = 0;
    
    /**  @var int */
    public $lv = 0;
    
    /**  @var int */
    public $hp = 0;
    
    /**  @var boolean */
    public $live = false;
    
    /**  @var int */
    public $exp = 0;
    
    /**  @var int */
    public $usedskillpoint = 0;
    
    /**  @var boolean */
    public $battle = false;
    
    /**  @var string */
    public $buff = null;
    
    /**  @var \RO\Cmd\SkillItem[]  */
    public $skills = array();
    
    /**  @var int[]  */
    public $buffids = array();
    
    /**  @var int */
    public $body = 0;
    
    /**  @var int[]  */
    public $bodylist = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.UserBeingData');

      // OPTIONAL UINT32 version = 13
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 13;
      $f->name      = "version";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 lv = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "lv";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 hp = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "hp";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL BOOL live = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "live";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = false;
      $descriptor->addField($f);

      // OPTIONAL UINT64 exp = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "exp";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 usedskillpoint = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "usedskillpoint";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL BOOL battle = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "battle";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = false;
      $descriptor->addField($f);

      // OPTIONAL BYTES buff = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "buff";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE skills = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "skills";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\SkillItem';
      $descriptor->addField($f);

      // REPEATED UINT32 buffids = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "buffids";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL UINT32 body = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "body";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // REPEATED UINT32 bodylist = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "bodylist";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <version> has a value
     *
     * @return boolean
     */
    public function hasVersion(){
      return $this->_has(13);
    }
    
    /**
     * Clear <version> value
     *
     * @return \RO\Cmd\UserBeingData
     */
    public function clearVersion(){
      return $this->_clear(13);
    }
    
    /**
     * Get <version> value
     *
     * @return int
     */
    public function getVersion(){
      return $this->_get(13);
    }
    
    /**
     * Set <version> value
     *
     * @param int $value
     * @return \RO\Cmd\UserBeingData
     */
    public function setVersion( $value){
      return $this->_set(13, $value);
    }
    
    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \RO\Cmd\UserBeingData
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param int $value
     * @return \RO\Cmd\UserBeingData
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <lv> has a value
     *
     * @return boolean
     */
    public function hasLv(){
      return $this->_has(2);
    }
    
    /**
     * Clear <lv> value
     *
     * @return \RO\Cmd\UserBeingData
     */
    public function clearLv(){
      return $this->_clear(2);
    }
    
    /**
     * Get <lv> value
     *
     * @return int
     */
    public function getLv(){
      return $this->_get(2);
    }
    
    /**
     * Set <lv> value
     *
     * @param int $value
     * @return \RO\Cmd\UserBeingData
     */
    public function setLv( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <hp> has a value
     *
     * @return boolean
     */
    public function hasHp(){
      return $this->_has(3);
    }
    
    /**
     * Clear <hp> value
     *
     * @return \RO\Cmd\UserBeingData
     */
    public function clearHp(){
      return $this->_clear(3);
    }
    
    /**
     * Get <hp> value
     *
     * @return int
     */
    public function getHp(){
      return $this->_get(3);
    }
    
    /**
     * Set <hp> value
     *
     * @param int $value
     * @return \RO\Cmd\UserBeingData
     */
    public function setHp( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <live> has a value
     *
     * @return boolean
     */
    public function hasLive(){
      return $this->_has(4);
    }
    
    /**
     * Clear <live> value
     *
     * @return \RO\Cmd\UserBeingData
     */
    public function clearLive(){
      return $this->_clear(4);
    }
    
    /**
     * Get <live> value
     *
     * @return boolean
     */
    public function getLive(){
      return $this->_get(4);
    }
    
    /**
     * Set <live> value
     *
     * @param boolean $value
     * @return \RO\Cmd\UserBeingData
     */
    public function setLive( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <exp> has a value
     *
     * @return boolean
     */
    public function hasExp(){
      return $this->_has(5);
    }
    
    /**
     * Clear <exp> value
     *
     * @return \RO\Cmd\UserBeingData
     */
    public function clearExp(){
      return $this->_clear(5);
    }
    
    /**
     * Get <exp> value
     *
     * @return int
     */
    public function getExp(){
      return $this->_get(5);
    }
    
    /**
     * Set <exp> value
     *
     * @param int $value
     * @return \RO\Cmd\UserBeingData
     */
    public function setExp( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <usedskillpoint> has a value
     *
     * @return boolean
     */
    public function hasUsedskillpoint(){
      return $this->_has(6);
    }
    
    /**
     * Clear <usedskillpoint> value
     *
     * @return \RO\Cmd\UserBeingData
     */
    public function clearUsedskillpoint(){
      return $this->_clear(6);
    }
    
    /**
     * Get <usedskillpoint> value
     *
     * @return int
     */
    public function getUsedskillpoint(){
      return $this->_get(6);
    }
    
    /**
     * Set <usedskillpoint> value
     *
     * @param int $value
     * @return \RO\Cmd\UserBeingData
     */
    public function setUsedskillpoint( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <battle> has a value
     *
     * @return boolean
     */
    public function hasBattle(){
      return $this->_has(7);
    }
    
    /**
     * Clear <battle> value
     *
     * @return \RO\Cmd\UserBeingData
     */
    public function clearBattle(){
      return $this->_clear(7);
    }
    
    /**
     * Get <battle> value
     *
     * @return boolean
     */
    public function getBattle(){
      return $this->_get(7);
    }
    
    /**
     * Set <battle> value
     *
     * @param boolean $value
     * @return \RO\Cmd\UserBeingData
     */
    public function setBattle( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <buff> has a value
     *
     * @return boolean
     */
    public function hasBuff(){
      return $this->_has(8);
    }
    
    /**
     * Clear <buff> value
     *
     * @return \RO\Cmd\UserBeingData
     */
    public function clearBuff(){
      return $this->_clear(8);
    }
    
    /**
     * Get <buff> value
     *
     * @return string
     */
    public function getBuff(){
      return $this->_get(8);
    }
    
    /**
     * Set <buff> value
     *
     * @param string $value
     * @return \RO\Cmd\UserBeingData
     */
    public function setBuff( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <skills> has a value
     *
     * @return boolean
     */
    public function hasSkills(){
      return $this->_has(9);
    }
    
    /**
     * Clear <skills> value
     *
     * @return \RO\Cmd\UserBeingData
     */
    public function clearSkills(){
      return $this->_clear(9);
    }
    
    /**
     * Get <skills> value
     *
     * @param int $idx
     * @return \RO\Cmd\SkillItem
     */
    public function getSkills($idx = NULL){
      return $this->_get(9, $idx);
    }
    
    /**
     * Set <skills> value
     *
     * @param \RO\Cmd\SkillItem $value
     * @return \RO\Cmd\UserBeingData
     */
    public function setSkills(\RO\Cmd\SkillItem $value, $idx = NULL){
      return $this->_set(9, $value, $idx);
    }
    
    /**
     * Get all elements of <skills>
     *
     * @return \RO\Cmd\SkillItem[]
     */
    public function getSkillsList(){
     return $this->_get(9);
    }
    
    /**
     * Add a new element to <skills>
     *
     * @param \RO\Cmd\SkillItem $value
     * @return \RO\Cmd\UserBeingData
     */
    public function addSkills(\RO\Cmd\SkillItem $value){
     return $this->_add(9, $value);
    }
    
    /**
     * Check if <buffids> has a value
     *
     * @return boolean
     */
    public function hasBuffids(){
      return $this->_has(10);
    }
    
    /**
     * Clear <buffids> value
     *
     * @return \RO\Cmd\UserBeingData
     */
    public function clearBuffids(){
      return $this->_clear(10);
    }
    
    /**
     * Get <buffids> value
     *
     * @param int $idx
     * @return int
     */
    public function getBuffids($idx = NULL){
      return $this->_get(10, $idx);
    }
    
    /**
     * Set <buffids> value
     *
     * @param int $value
     * @return \RO\Cmd\UserBeingData
     */
    public function setBuffids( $value, $idx = NULL){
      return $this->_set(10, $value, $idx);
    }
    
    /**
     * Get all elements of <buffids>
     *
     * @return int[]
     */
    public function getBuffidsList(){
     return $this->_get(10);
    }
    
    /**
     * Add a new element to <buffids>
     *
     * @param int $value
     * @return \RO\Cmd\UserBeingData
     */
    public function addBuffids( $value){
     return $this->_add(10, $value);
    }
    
    /**
     * Check if <body> has a value
     *
     * @return boolean
     */
    public function hasBody(){
      return $this->_has(11);
    }
    
    /**
     * Clear <body> value
     *
     * @return \RO\Cmd\UserBeingData
     */
    public function clearBody(){
      return $this->_clear(11);
    }
    
    /**
     * Get <body> value
     *
     * @return int
     */
    public function getBody(){
      return $this->_get(11);
    }
    
    /**
     * Set <body> value
     *
     * @param int $value
     * @return \RO\Cmd\UserBeingData
     */
    public function setBody( $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <bodylist> has a value
     *
     * @return boolean
     */
    public function hasBodylist(){
      return $this->_has(12);
    }
    
    /**
     * Clear <bodylist> value
     *
     * @return \RO\Cmd\UserBeingData
     */
    public function clearBodylist(){
      return $this->_clear(12);
    }
    
    /**
     * Get <bodylist> value
     *
     * @param int $idx
     * @return int
     */
    public function getBodylist($idx = NULL){
      return $this->_get(12, $idx);
    }
    
    /**
     * Set <bodylist> value
     *
     * @param int $value
     * @return \RO\Cmd\UserBeingData
     */
    public function setBodylist( $value, $idx = NULL){
      return $this->_set(12, $value, $idx);
    }
    
    /**
     * Get all elements of <bodylist>
     *
     * @return int[]
     */
    public function getBodylistList(){
     return $this->_get(12);
    }
    
    /**
     * Add a new element to <bodylist>
     *
     * @param int $value
     * @return \RO\Cmd\UserBeingData
     */
    public function addBodylist( $value){
     return $this->_add(12, $value);
    }
  }
}

