<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: SceneUser2.proto

namespace RO\Cmd {

  class AddAttrPoint extends \DrSlump\Protobuf\Message {

    /**  @var int - \RO\Cmd\Command */
    public $cmd = \RO\Cmd\Command::SCENE_USER2_PROTOCMD;
    
    /**  @var int - \RO\Cmd\User2Param */
    public $param = \RO\Cmd\User2Param::USER2PARAM_ADDATTRPOINT;
    
    /**  @var int - \RO\Cmd\PointType */
    public $type = \RO\Cmd\PointType::POINTTYPE_ADD;
    
    /**  @var int */
    public $strpoint = 0;
    
    /**  @var int */
    public $intpoint = 0;
    
    /**  @var int */
    public $agipoint = 0;
    
    /**  @var int */
    public $dexpoint = 0;
    
    /**  @var int */
    public $vitpoint = 0;
    
    /**  @var int */
    public $lukpoint = 0;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.AddAttrPoint');

      // OPTIONAL ENUM cmd = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "cmd";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\Command';
      $f->default   = \RO\Cmd\Command::SCENE_USER2_PROTOCMD;
      $descriptor->addField($f);

      // OPTIONAL ENUM param = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "param";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\User2Param';
      $f->default   = \RO\Cmd\User2Param::USER2PARAM_ADDATTRPOINT;
      $descriptor->addField($f);

      // OPTIONAL ENUM type = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\PointType';
      $f->default   = \RO\Cmd\PointType::POINTTYPE_ADD;
      $descriptor->addField($f);

      // OPTIONAL UINT32 strpoint = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "strpoint";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 intpoint = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "intpoint";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 agipoint = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "agipoint";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 dexpoint = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "dexpoint";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 vitpoint = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "vitpoint";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 lukpoint = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "lukpoint";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <cmd> has a value
     *
     * @return boolean
     */
    public function hasCmd(){
      return $this->_has(1);
    }
    
    /**
     * Clear <cmd> value
     *
     * @return \RO\Cmd\AddAttrPoint
     */
    public function clearCmd(){
      return $this->_clear(1);
    }
    
    /**
     * Get <cmd> value
     *
     * @return int - \RO\Cmd\Command
     */
    public function getCmd(){
      return $this->_get(1);
    }
    
    /**
     * Set <cmd> value
     *
     * @param int - \RO\Cmd\Command $value
     * @return \RO\Cmd\AddAttrPoint
     */
    public function setCmd( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <param> has a value
     *
     * @return boolean
     */
    public function hasParam(){
      return $this->_has(2);
    }
    
    /**
     * Clear <param> value
     *
     * @return \RO\Cmd\AddAttrPoint
     */
    public function clearParam(){
      return $this->_clear(2);
    }
    
    /**
     * Get <param> value
     *
     * @return int - \RO\Cmd\User2Param
     */
    public function getParam(){
      return $this->_get(2);
    }
    
    /**
     * Set <param> value
     *
     * @param int - \RO\Cmd\User2Param $value
     * @return \RO\Cmd\AddAttrPoint
     */
    public function setParam( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(3);
    }
    
    /**
     * Clear <type> value
     *
     * @return \RO\Cmd\AddAttrPoint
     */
    public function clearType(){
      return $this->_clear(3);
    }
    
    /**
     * Get <type> value
     *
     * @return int - \RO\Cmd\PointType
     */
    public function getType(){
      return $this->_get(3);
    }
    
    /**
     * Set <type> value
     *
     * @param int - \RO\Cmd\PointType $value
     * @return \RO\Cmd\AddAttrPoint
     */
    public function setType( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <strpoint> has a value
     *
     * @return boolean
     */
    public function hasStrpoint(){
      return $this->_has(4);
    }
    
    /**
     * Clear <strpoint> value
     *
     * @return \RO\Cmd\AddAttrPoint
     */
    public function clearStrpoint(){
      return $this->_clear(4);
    }
    
    /**
     * Get <strpoint> value
     *
     * @return int
     */
    public function getStrpoint(){
      return $this->_get(4);
    }
    
    /**
     * Set <strpoint> value
     *
     * @param int $value
     * @return \RO\Cmd\AddAttrPoint
     */
    public function setStrpoint( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <intpoint> has a value
     *
     * @return boolean
     */
    public function hasIntpoint(){
      return $this->_has(5);
    }
    
    /**
     * Clear <intpoint> value
     *
     * @return \RO\Cmd\AddAttrPoint
     */
    public function clearIntpoint(){
      return $this->_clear(5);
    }
    
    /**
     * Get <intpoint> value
     *
     * @return int
     */
    public function getIntpoint(){
      return $this->_get(5);
    }
    
    /**
     * Set <intpoint> value
     *
     * @param int $value
     * @return \RO\Cmd\AddAttrPoint
     */
    public function setIntpoint( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <agipoint> has a value
     *
     * @return boolean
     */
    public function hasAgipoint(){
      return $this->_has(6);
    }
    
    /**
     * Clear <agipoint> value
     *
     * @return \RO\Cmd\AddAttrPoint
     */
    public function clearAgipoint(){
      return $this->_clear(6);
    }
    
    /**
     * Get <agipoint> value
     *
     * @return int
     */
    public function getAgipoint(){
      return $this->_get(6);
    }
    
    /**
     * Set <agipoint> value
     *
     * @param int $value
     * @return \RO\Cmd\AddAttrPoint
     */
    public function setAgipoint( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <dexpoint> has a value
     *
     * @return boolean
     */
    public function hasDexpoint(){
      return $this->_has(7);
    }
    
    /**
     * Clear <dexpoint> value
     *
     * @return \RO\Cmd\AddAttrPoint
     */
    public function clearDexpoint(){
      return $this->_clear(7);
    }
    
    /**
     * Get <dexpoint> value
     *
     * @return int
     */
    public function getDexpoint(){
      return $this->_get(7);
    }
    
    /**
     * Set <dexpoint> value
     *
     * @param int $value
     * @return \RO\Cmd\AddAttrPoint
     */
    public function setDexpoint( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <vitpoint> has a value
     *
     * @return boolean
     */
    public function hasVitpoint(){
      return $this->_has(8);
    }
    
    /**
     * Clear <vitpoint> value
     *
     * @return \RO\Cmd\AddAttrPoint
     */
    public function clearVitpoint(){
      return $this->_clear(8);
    }
    
    /**
     * Get <vitpoint> value
     *
     * @return int
     */
    public function getVitpoint(){
      return $this->_get(8);
    }
    
    /**
     * Set <vitpoint> value
     *
     * @param int $value
     * @return \RO\Cmd\AddAttrPoint
     */
    public function setVitpoint( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <lukpoint> has a value
     *
     * @return boolean
     */
    public function hasLukpoint(){
      return $this->_has(9);
    }
    
    /**
     * Clear <lukpoint> value
     *
     * @return \RO\Cmd\AddAttrPoint
     */
    public function clearLukpoint(){
      return $this->_clear(9);
    }
    
    /**
     * Get <lukpoint> value
     *
     * @return int
     */
    public function getLukpoint(){
      return $this->_get(9);
    }
    
    /**
     * Set <lukpoint> value
     *
     * @param int $value
     * @return \RO\Cmd\AddAttrPoint
     */
    public function setLukpoint( $value){
      return $this->_set(9, $value);
    }
  }
}

