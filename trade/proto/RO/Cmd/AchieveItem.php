<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: AchieveCmd.proto

namespace RO\Cmd {

  class AchieveItem extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $id = 0;
    
    /**  @var int */
    public $process = 0;
    
    /**  @var int */
    public $finishtime = 0;
    
    /**  @var int[]  */
    public $params = array();
    
    /**  @var \RO\Cmd\AchieveQuest[]  */
    public $quests = array();
    
    /**  @var boolean */
    public $reward_get = false;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.AchieveItem');

      // OPTIONAL UINT32 id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 process = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "process";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 finishtime = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "finishtime";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // REPEATED UINT64 params = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "params";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED MESSAGE quests = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "quests";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\AchieveQuest';
      $descriptor->addField($f);

      // OPTIONAL BOOL reward_get = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "reward_get";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = false;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \RO\Cmd\AchieveItem
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param int $value
     * @return \RO\Cmd\AchieveItem
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <process> has a value
     *
     * @return boolean
     */
    public function hasProcess(){
      return $this->_has(2);
    }
    
    /**
     * Clear <process> value
     *
     * @return \RO\Cmd\AchieveItem
     */
    public function clearProcess(){
      return $this->_clear(2);
    }
    
    /**
     * Get <process> value
     *
     * @return int
     */
    public function getProcess(){
      return $this->_get(2);
    }
    
    /**
     * Set <process> value
     *
     * @param int $value
     * @return \RO\Cmd\AchieveItem
     */
    public function setProcess( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <finishtime> has a value
     *
     * @return boolean
     */
    public function hasFinishtime(){
      return $this->_has(3);
    }
    
    /**
     * Clear <finishtime> value
     *
     * @return \RO\Cmd\AchieveItem
     */
    public function clearFinishtime(){
      return $this->_clear(3);
    }
    
    /**
     * Get <finishtime> value
     *
     * @return int
     */
    public function getFinishtime(){
      return $this->_get(3);
    }
    
    /**
     * Set <finishtime> value
     *
     * @param int $value
     * @return \RO\Cmd\AchieveItem
     */
    public function setFinishtime( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <params> has a value
     *
     * @return boolean
     */
    public function hasParams(){
      return $this->_has(4);
    }
    
    /**
     * Clear <params> value
     *
     * @return \RO\Cmd\AchieveItem
     */
    public function clearParams(){
      return $this->_clear(4);
    }
    
    /**
     * Get <params> value
     *
     * @param int $idx
     * @return int
     */
    public function getParams($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <params> value
     *
     * @param int $value
     * @return \RO\Cmd\AchieveItem
     */
    public function setParams( $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <params>
     *
     * @return int[]
     */
    public function getParamsList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <params>
     *
     * @param int $value
     * @return \RO\Cmd\AchieveItem
     */
    public function addParams( $value){
     return $this->_add(4, $value);
    }
    
    /**
     * Check if <quests> has a value
     *
     * @return boolean
     */
    public function hasQuests(){
      return $this->_has(6);
    }
    
    /**
     * Clear <quests> value
     *
     * @return \RO\Cmd\AchieveItem
     */
    public function clearQuests(){
      return $this->_clear(6);
    }
    
    /**
     * Get <quests> value
     *
     * @param int $idx
     * @return \RO\Cmd\AchieveQuest
     */
    public function getQuests($idx = NULL){
      return $this->_get(6, $idx);
    }
    
    /**
     * Set <quests> value
     *
     * @param \RO\Cmd\AchieveQuest $value
     * @return \RO\Cmd\AchieveItem
     */
    public function setQuests(\RO\Cmd\AchieveQuest $value, $idx = NULL){
      return $this->_set(6, $value, $idx);
    }
    
    /**
     * Get all elements of <quests>
     *
     * @return \RO\Cmd\AchieveQuest[]
     */
    public function getQuestsList(){
     return $this->_get(6);
    }
    
    /**
     * Add a new element to <quests>
     *
     * @param \RO\Cmd\AchieveQuest $value
     * @return \RO\Cmd\AchieveItem
     */
    public function addQuests(\RO\Cmd\AchieveQuest $value){
     return $this->_add(6, $value);
    }
    
    /**
     * Check if <reward_get> has a value
     *
     * @return boolean
     */
    public function hasRewardGet(){
      return $this->_has(5);
    }
    
    /**
     * Clear <reward_get> value
     *
     * @return \RO\Cmd\AchieveItem
     */
    public function clearRewardGet(){
      return $this->_clear(5);
    }
    
    /**
     * Get <reward_get> value
     *
     * @return boolean
     */
    public function getRewardGet(){
      return $this->_get(5);
    }
    
    /**
     * Set <reward_get> value
     *
     * @param boolean $value
     * @return \RO\Cmd\AchieveItem
     */
    public function setRewardGet( $value){
      return $this->_set(5, $value);
    }
  }
}

