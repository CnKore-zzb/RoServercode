<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: SceneUser2.proto

namespace RO\Cmd {

  class MsgParam extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $param = null;
    
    /**  @var string[]  */
    public $subparams = array();
    
    /**  @var \RO\Cmd\MsgLangParam[]  */
    public $langparams = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.MsgParam');

      // OPTIONAL STRING param = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "param";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED STRING subparams = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "subparams";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED MESSAGE langparams = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "langparams";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\MsgLangParam';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <param> has a value
     *
     * @return boolean
     */
    public function hasParam(){
      return $this->_has(1);
    }
    
    /**
     * Clear <param> value
     *
     * @return \RO\Cmd\MsgParam
     */
    public function clearParam(){
      return $this->_clear(1);
    }
    
    /**
     * Get <param> value
     *
     * @return string
     */
    public function getParam(){
      return $this->_get(1);
    }
    
    /**
     * Set <param> value
     *
     * @param string $value
     * @return \RO\Cmd\MsgParam
     */
    public function setParam( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <subparams> has a value
     *
     * @return boolean
     */
    public function hasSubparams(){
      return $this->_has(2);
    }
    
    /**
     * Clear <subparams> value
     *
     * @return \RO\Cmd\MsgParam
     */
    public function clearSubparams(){
      return $this->_clear(2);
    }
    
    /**
     * Get <subparams> value
     *
     * @param int $idx
     * @return string
     */
    public function getSubparams($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <subparams> value
     *
     * @param string $value
     * @return \RO\Cmd\MsgParam
     */
    public function setSubparams( $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <subparams>
     *
     * @return string[]
     */
    public function getSubparamsList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <subparams>
     *
     * @param string $value
     * @return \RO\Cmd\MsgParam
     */
    public function addSubparams( $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <langparams> has a value
     *
     * @return boolean
     */
    public function hasLangparams(){
      return $this->_has(3);
    }
    
    /**
     * Clear <langparams> value
     *
     * @return \RO\Cmd\MsgParam
     */
    public function clearLangparams(){
      return $this->_clear(3);
    }
    
    /**
     * Get <langparams> value
     *
     * @param int $idx
     * @return \RO\Cmd\MsgLangParam
     */
    public function getLangparams($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <langparams> value
     *
     * @param \RO\Cmd\MsgLangParam $value
     * @return \RO\Cmd\MsgParam
     */
    public function setLangparams(\RO\Cmd\MsgLangParam $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <langparams>
     *
     * @return \RO\Cmd\MsgLangParam[]
     */
    public function getLangparamsList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <langparams>
     *
     * @param \RO\Cmd\MsgLangParam $value
     * @return \RO\Cmd\MsgParam
     */
    public function addLangparams(\RO\Cmd\MsgLangParam $value){
     return $this->_add(3, $value);
    }
  }
}

