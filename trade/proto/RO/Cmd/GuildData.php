<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: GuildCmd.proto

namespace RO\Cmd {

  class GuildData extends \DrSlump\Protobuf\Message {

    /**  @var \RO\Cmd\GuildSummaryData */
    public $summary = null;
    
    /**  @var int */
    public $questresettime = 0;
    
    /**  @var int */
    public $asset = 0;
    
    /**  @var int */
    public $dismisstime = 0;
    
    /**  @var int */
    public $zonetime = 0;
    
    /**  @var int */
    public $createtime = 0;
    
    /**  @var int */
    public $nextzone = 0;
    
    /**  @var int */
    public $donatetime1 = 0;
    
    /**  @var int */
    public $donatetime2 = 0;
    
    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $boardinfo = null;
    
    /**  @var string */
    public $recruitinfo = null;
    
    /**  @var \RO\Cmd\GuildMember[]  */
    public $members = array();
    
    /**  @var \RO\Cmd\GuildApply[]  */
    public $applys = array();
    
    /**  @var \RO\Cmd\GuildJob[]  */
    public $jobs = array();
    
    /**  @var int */
    public $assettoday = 0;
    
    /**  @var int */
    public $citygiveuptime = 0;
    
    /**  @var int */
    public $openfunction = 0;
    
    /**  @var \RO\Cmd\GuildChallenge[]  */
    public $challenges = array();
    
    /**  @var int */
    public $gvg_treasure_count = 0;
    
    /**  @var int */
    public $guild_treasure_count = 0;
    
    /**  @var int */
    public $bcoin_treasure_count = 0;
    
    /**  @var boolean */
    public $insupergvg = false;
    
    /**  @var int */
    public $supergvg_lv = 0;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.GuildData');

      // OPTIONAL MESSAGE summary = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "summary";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\GuildSummaryData';
      $descriptor->addField($f);

      // OPTIONAL UINT32 questresettime = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "questresettime";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 asset = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "asset";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 dismisstime = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "dismisstime";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 zonetime = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "zonetime";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 createtime = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "createtime";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 nextzone = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "nextzone";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 donatetime1 = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "donatetime1";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 donatetime2 = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "donatetime2";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL STRING name = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING boardinfo = 13
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 13;
      $f->name      = "boardinfo";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING recruitinfo = 14
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 14;
      $f->name      = "recruitinfo";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE members = 15
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 15;
      $f->name      = "members";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\GuildMember';
      $descriptor->addField($f);

      // REPEATED MESSAGE applys = 16
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 16;
      $f->name      = "applys";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\GuildApply';
      $descriptor->addField($f);

      // REPEATED MESSAGE jobs = 17
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 17;
      $f->name      = "jobs";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\GuildJob';
      $descriptor->addField($f);

      // OPTIONAL UINT32 assettoday = 18
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 18;
      $f->name      = "assettoday";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 citygiveuptime = 19
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 19;
      $f->name      = "citygiveuptime";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 openfunction = 20
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 20;
      $f->name      = "openfunction";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // REPEATED MESSAGE challenges = 21
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 21;
      $f->name      = "challenges";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\GuildChallenge';
      $descriptor->addField($f);

      // OPTIONAL UINT32 gvg_treasure_count = 22
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 22;
      $f->name      = "gvg_treasure_count";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 guild_treasure_count = 23
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 23;
      $f->name      = "guild_treasure_count";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 bcoin_treasure_count = 24
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 24;
      $f->name      = "bcoin_treasure_count";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL BOOL insupergvg = 25
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 25;
      $f->name      = "insupergvg";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = false;
      $descriptor->addField($f);

      // OPTIONAL UINT32 supergvg_lv = 26
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 26;
      $f->name      = "supergvg_lv";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <summary> has a value
     *
     * @return boolean
     */
    public function hasSummary(){
      return $this->_has(1);
    }
    
    /**
     * Clear <summary> value
     *
     * @return \RO\Cmd\GuildData
     */
    public function clearSummary(){
      return $this->_clear(1);
    }
    
    /**
     * Get <summary> value
     *
     * @return \RO\Cmd\GuildSummaryData
     */
    public function getSummary(){
      return $this->_get(1);
    }
    
    /**
     * Set <summary> value
     *
     * @param \RO\Cmd\GuildSummaryData $value
     * @return \RO\Cmd\GuildData
     */
    public function setSummary(\RO\Cmd\GuildSummaryData $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <questresettime> has a value
     *
     * @return boolean
     */
    public function hasQuestresettime(){
      return $this->_has(4);
    }
    
    /**
     * Clear <questresettime> value
     *
     * @return \RO\Cmd\GuildData
     */
    public function clearQuestresettime(){
      return $this->_clear(4);
    }
    
    /**
     * Get <questresettime> value
     *
     * @return int
     */
    public function getQuestresettime(){
      return $this->_get(4);
    }
    
    /**
     * Set <questresettime> value
     *
     * @param int $value
     * @return \RO\Cmd\GuildData
     */
    public function setQuestresettime( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <asset> has a value
     *
     * @return boolean
     */
    public function hasAsset(){
      return $this->_has(5);
    }
    
    /**
     * Clear <asset> value
     *
     * @return \RO\Cmd\GuildData
     */
    public function clearAsset(){
      return $this->_clear(5);
    }
    
    /**
     * Get <asset> value
     *
     * @return int
     */
    public function getAsset(){
      return $this->_get(5);
    }
    
    /**
     * Set <asset> value
     *
     * @param int $value
     * @return \RO\Cmd\GuildData
     */
    public function setAsset( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <dismisstime> has a value
     *
     * @return boolean
     */
    public function hasDismisstime(){
      return $this->_has(6);
    }
    
    /**
     * Clear <dismisstime> value
     *
     * @return \RO\Cmd\GuildData
     */
    public function clearDismisstime(){
      return $this->_clear(6);
    }
    
    /**
     * Get <dismisstime> value
     *
     * @return int
     */
    public function getDismisstime(){
      return $this->_get(6);
    }
    
    /**
     * Set <dismisstime> value
     *
     * @param int $value
     * @return \RO\Cmd\GuildData
     */
    public function setDismisstime( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <zonetime> has a value
     *
     * @return boolean
     */
    public function hasZonetime(){
      return $this->_has(7);
    }
    
    /**
     * Clear <zonetime> value
     *
     * @return \RO\Cmd\GuildData
     */
    public function clearZonetime(){
      return $this->_clear(7);
    }
    
    /**
     * Get <zonetime> value
     *
     * @return int
     */
    public function getZonetime(){
      return $this->_get(7);
    }
    
    /**
     * Set <zonetime> value
     *
     * @param int $value
     * @return \RO\Cmd\GuildData
     */
    public function setZonetime( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <createtime> has a value
     *
     * @return boolean
     */
    public function hasCreatetime(){
      return $this->_has(8);
    }
    
    /**
     * Clear <createtime> value
     *
     * @return \RO\Cmd\GuildData
     */
    public function clearCreatetime(){
      return $this->_clear(8);
    }
    
    /**
     * Get <createtime> value
     *
     * @return int
     */
    public function getCreatetime(){
      return $this->_get(8);
    }
    
    /**
     * Set <createtime> value
     *
     * @param int $value
     * @return \RO\Cmd\GuildData
     */
    public function setCreatetime( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <nextzone> has a value
     *
     * @return boolean
     */
    public function hasNextzone(){
      return $this->_has(9);
    }
    
    /**
     * Clear <nextzone> value
     *
     * @return \RO\Cmd\GuildData
     */
    public function clearNextzone(){
      return $this->_clear(9);
    }
    
    /**
     * Get <nextzone> value
     *
     * @return int
     */
    public function getNextzone(){
      return $this->_get(9);
    }
    
    /**
     * Set <nextzone> value
     *
     * @param int $value
     * @return \RO\Cmd\GuildData
     */
    public function setNextzone( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <donatetime1> has a value
     *
     * @return boolean
     */
    public function hasDonatetime1(){
      return $this->_has(10);
    }
    
    /**
     * Clear <donatetime1> value
     *
     * @return \RO\Cmd\GuildData
     */
    public function clearDonatetime1(){
      return $this->_clear(10);
    }
    
    /**
     * Get <donatetime1> value
     *
     * @return int
     */
    public function getDonatetime1(){
      return $this->_get(10);
    }
    
    /**
     * Set <donatetime1> value
     *
     * @param int $value
     * @return \RO\Cmd\GuildData
     */
    public function setDonatetime1( $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <donatetime2> has a value
     *
     * @return boolean
     */
    public function hasDonatetime2(){
      return $this->_has(11);
    }
    
    /**
     * Clear <donatetime2> value
     *
     * @return \RO\Cmd\GuildData
     */
    public function clearDonatetime2(){
      return $this->_clear(11);
    }
    
    /**
     * Get <donatetime2> value
     *
     * @return int
     */
    public function getDonatetime2(){
      return $this->_get(11);
    }
    
    /**
     * Set <donatetime2> value
     *
     * @param int $value
     * @return \RO\Cmd\GuildData
     */
    public function setDonatetime2( $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(12);
    }
    
    /**
     * Clear <name> value
     *
     * @return \RO\Cmd\GuildData
     */
    public function clearName(){
      return $this->_clear(12);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(12);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \RO\Cmd\GuildData
     */
    public function setName( $value){
      return $this->_set(12, $value);
    }
    
    /**
     * Check if <boardinfo> has a value
     *
     * @return boolean
     */
    public function hasBoardinfo(){
      return $this->_has(13);
    }
    
    /**
     * Clear <boardinfo> value
     *
     * @return \RO\Cmd\GuildData
     */
    public function clearBoardinfo(){
      return $this->_clear(13);
    }
    
    /**
     * Get <boardinfo> value
     *
     * @return string
     */
    public function getBoardinfo(){
      return $this->_get(13);
    }
    
    /**
     * Set <boardinfo> value
     *
     * @param string $value
     * @return \RO\Cmd\GuildData
     */
    public function setBoardinfo( $value){
      return $this->_set(13, $value);
    }
    
    /**
     * Check if <recruitinfo> has a value
     *
     * @return boolean
     */
    public function hasRecruitinfo(){
      return $this->_has(14);
    }
    
    /**
     * Clear <recruitinfo> value
     *
     * @return \RO\Cmd\GuildData
     */
    public function clearRecruitinfo(){
      return $this->_clear(14);
    }
    
    /**
     * Get <recruitinfo> value
     *
     * @return string
     */
    public function getRecruitinfo(){
      return $this->_get(14);
    }
    
    /**
     * Set <recruitinfo> value
     *
     * @param string $value
     * @return \RO\Cmd\GuildData
     */
    public function setRecruitinfo( $value){
      return $this->_set(14, $value);
    }
    
    /**
     * Check if <members> has a value
     *
     * @return boolean
     */
    public function hasMembers(){
      return $this->_has(15);
    }
    
    /**
     * Clear <members> value
     *
     * @return \RO\Cmd\GuildData
     */
    public function clearMembers(){
      return $this->_clear(15);
    }
    
    /**
     * Get <members> value
     *
     * @param int $idx
     * @return \RO\Cmd\GuildMember
     */
    public function getMembers($idx = NULL){
      return $this->_get(15, $idx);
    }
    
    /**
     * Set <members> value
     *
     * @param \RO\Cmd\GuildMember $value
     * @return \RO\Cmd\GuildData
     */
    public function setMembers(\RO\Cmd\GuildMember $value, $idx = NULL){
      return $this->_set(15, $value, $idx);
    }
    
    /**
     * Get all elements of <members>
     *
     * @return \RO\Cmd\GuildMember[]
     */
    public function getMembersList(){
     return $this->_get(15);
    }
    
    /**
     * Add a new element to <members>
     *
     * @param \RO\Cmd\GuildMember $value
     * @return \RO\Cmd\GuildData
     */
    public function addMembers(\RO\Cmd\GuildMember $value){
     return $this->_add(15, $value);
    }
    
    /**
     * Check if <applys> has a value
     *
     * @return boolean
     */
    public function hasApplys(){
      return $this->_has(16);
    }
    
    /**
     * Clear <applys> value
     *
     * @return \RO\Cmd\GuildData
     */
    public function clearApplys(){
      return $this->_clear(16);
    }
    
    /**
     * Get <applys> value
     *
     * @param int $idx
     * @return \RO\Cmd\GuildApply
     */
    public function getApplys($idx = NULL){
      return $this->_get(16, $idx);
    }
    
    /**
     * Set <applys> value
     *
     * @param \RO\Cmd\GuildApply $value
     * @return \RO\Cmd\GuildData
     */
    public function setApplys(\RO\Cmd\GuildApply $value, $idx = NULL){
      return $this->_set(16, $value, $idx);
    }
    
    /**
     * Get all elements of <applys>
     *
     * @return \RO\Cmd\GuildApply[]
     */
    public function getApplysList(){
     return $this->_get(16);
    }
    
    /**
     * Add a new element to <applys>
     *
     * @param \RO\Cmd\GuildApply $value
     * @return \RO\Cmd\GuildData
     */
    public function addApplys(\RO\Cmd\GuildApply $value){
     return $this->_add(16, $value);
    }
    
    /**
     * Check if <jobs> has a value
     *
     * @return boolean
     */
    public function hasJobs(){
      return $this->_has(17);
    }
    
    /**
     * Clear <jobs> value
     *
     * @return \RO\Cmd\GuildData
     */
    public function clearJobs(){
      return $this->_clear(17);
    }
    
    /**
     * Get <jobs> value
     *
     * @param int $idx
     * @return \RO\Cmd\GuildJob
     */
    public function getJobs($idx = NULL){
      return $this->_get(17, $idx);
    }
    
    /**
     * Set <jobs> value
     *
     * @param \RO\Cmd\GuildJob $value
     * @return \RO\Cmd\GuildData
     */
    public function setJobs(\RO\Cmd\GuildJob $value, $idx = NULL){
      return $this->_set(17, $value, $idx);
    }
    
    /**
     * Get all elements of <jobs>
     *
     * @return \RO\Cmd\GuildJob[]
     */
    public function getJobsList(){
     return $this->_get(17);
    }
    
    /**
     * Add a new element to <jobs>
     *
     * @param \RO\Cmd\GuildJob $value
     * @return \RO\Cmd\GuildData
     */
    public function addJobs(\RO\Cmd\GuildJob $value){
     return $this->_add(17, $value);
    }
    
    /**
     * Check if <assettoday> has a value
     *
     * @return boolean
     */
    public function hasAssettoday(){
      return $this->_has(18);
    }
    
    /**
     * Clear <assettoday> value
     *
     * @return \RO\Cmd\GuildData
     */
    public function clearAssettoday(){
      return $this->_clear(18);
    }
    
    /**
     * Get <assettoday> value
     *
     * @return int
     */
    public function getAssettoday(){
      return $this->_get(18);
    }
    
    /**
     * Set <assettoday> value
     *
     * @param int $value
     * @return \RO\Cmd\GuildData
     */
    public function setAssettoday( $value){
      return $this->_set(18, $value);
    }
    
    /**
     * Check if <citygiveuptime> has a value
     *
     * @return boolean
     */
    public function hasCitygiveuptime(){
      return $this->_has(19);
    }
    
    /**
     * Clear <citygiveuptime> value
     *
     * @return \RO\Cmd\GuildData
     */
    public function clearCitygiveuptime(){
      return $this->_clear(19);
    }
    
    /**
     * Get <citygiveuptime> value
     *
     * @return int
     */
    public function getCitygiveuptime(){
      return $this->_get(19);
    }
    
    /**
     * Set <citygiveuptime> value
     *
     * @param int $value
     * @return \RO\Cmd\GuildData
     */
    public function setCitygiveuptime( $value){
      return $this->_set(19, $value);
    }
    
    /**
     * Check if <openfunction> has a value
     *
     * @return boolean
     */
    public function hasOpenfunction(){
      return $this->_has(20);
    }
    
    /**
     * Clear <openfunction> value
     *
     * @return \RO\Cmd\GuildData
     */
    public function clearOpenfunction(){
      return $this->_clear(20);
    }
    
    /**
     * Get <openfunction> value
     *
     * @return int
     */
    public function getOpenfunction(){
      return $this->_get(20);
    }
    
    /**
     * Set <openfunction> value
     *
     * @param int $value
     * @return \RO\Cmd\GuildData
     */
    public function setOpenfunction( $value){
      return $this->_set(20, $value);
    }
    
    /**
     * Check if <challenges> has a value
     *
     * @return boolean
     */
    public function hasChallenges(){
      return $this->_has(21);
    }
    
    /**
     * Clear <challenges> value
     *
     * @return \RO\Cmd\GuildData
     */
    public function clearChallenges(){
      return $this->_clear(21);
    }
    
    /**
     * Get <challenges> value
     *
     * @param int $idx
     * @return \RO\Cmd\GuildChallenge
     */
    public function getChallenges($idx = NULL){
      return $this->_get(21, $idx);
    }
    
    /**
     * Set <challenges> value
     *
     * @param \RO\Cmd\GuildChallenge $value
     * @return \RO\Cmd\GuildData
     */
    public function setChallenges(\RO\Cmd\GuildChallenge $value, $idx = NULL){
      return $this->_set(21, $value, $idx);
    }
    
    /**
     * Get all elements of <challenges>
     *
     * @return \RO\Cmd\GuildChallenge[]
     */
    public function getChallengesList(){
     return $this->_get(21);
    }
    
    /**
     * Add a new element to <challenges>
     *
     * @param \RO\Cmd\GuildChallenge $value
     * @return \RO\Cmd\GuildData
     */
    public function addChallenges(\RO\Cmd\GuildChallenge $value){
     return $this->_add(21, $value);
    }
    
    /**
     * Check if <gvg_treasure_count> has a value
     *
     * @return boolean
     */
    public function hasGvgTreasureCount(){
      return $this->_has(22);
    }
    
    /**
     * Clear <gvg_treasure_count> value
     *
     * @return \RO\Cmd\GuildData
     */
    public function clearGvgTreasureCount(){
      return $this->_clear(22);
    }
    
    /**
     * Get <gvg_treasure_count> value
     *
     * @return int
     */
    public function getGvgTreasureCount(){
      return $this->_get(22);
    }
    
    /**
     * Set <gvg_treasure_count> value
     *
     * @param int $value
     * @return \RO\Cmd\GuildData
     */
    public function setGvgTreasureCount( $value){
      return $this->_set(22, $value);
    }
    
    /**
     * Check if <guild_treasure_count> has a value
     *
     * @return boolean
     */
    public function hasGuildTreasureCount(){
      return $this->_has(23);
    }
    
    /**
     * Clear <guild_treasure_count> value
     *
     * @return \RO\Cmd\GuildData
     */
    public function clearGuildTreasureCount(){
      return $this->_clear(23);
    }
    
    /**
     * Get <guild_treasure_count> value
     *
     * @return int
     */
    public function getGuildTreasureCount(){
      return $this->_get(23);
    }
    
    /**
     * Set <guild_treasure_count> value
     *
     * @param int $value
     * @return \RO\Cmd\GuildData
     */
    public function setGuildTreasureCount( $value){
      return $this->_set(23, $value);
    }
    
    /**
     * Check if <bcoin_treasure_count> has a value
     *
     * @return boolean
     */
    public function hasBcoinTreasureCount(){
      return $this->_has(24);
    }
    
    /**
     * Clear <bcoin_treasure_count> value
     *
     * @return \RO\Cmd\GuildData
     */
    public function clearBcoinTreasureCount(){
      return $this->_clear(24);
    }
    
    /**
     * Get <bcoin_treasure_count> value
     *
     * @return int
     */
    public function getBcoinTreasureCount(){
      return $this->_get(24);
    }
    
    /**
     * Set <bcoin_treasure_count> value
     *
     * @param int $value
     * @return \RO\Cmd\GuildData
     */
    public function setBcoinTreasureCount( $value){
      return $this->_set(24, $value);
    }
    
    /**
     * Check if <insupergvg> has a value
     *
     * @return boolean
     */
    public function hasInsupergvg(){
      return $this->_has(25);
    }
    
    /**
     * Clear <insupergvg> value
     *
     * @return \RO\Cmd\GuildData
     */
    public function clearInsupergvg(){
      return $this->_clear(25);
    }
    
    /**
     * Get <insupergvg> value
     *
     * @return boolean
     */
    public function getInsupergvg(){
      return $this->_get(25);
    }
    
    /**
     * Set <insupergvg> value
     *
     * @param boolean $value
     * @return \RO\Cmd\GuildData
     */
    public function setInsupergvg( $value){
      return $this->_set(25, $value);
    }
    
    /**
     * Check if <supergvg_lv> has a value
     *
     * @return boolean
     */
    public function hasSupergvgLv(){
      return $this->_has(26);
    }
    
    /**
     * Clear <supergvg_lv> value
     *
     * @return \RO\Cmd\GuildData
     */
    public function clearSupergvgLv(){
      return $this->_clear(26);
    }
    
    /**
     * Get <supergvg_lv> value
     *
     * @return int
     */
    public function getSupergvgLv(){
      return $this->_get(26);
    }
    
    /**
     * Set <supergvg_lv> value
     *
     * @param int $value
     * @return \RO\Cmd\GuildData
     */
    public function setSupergvgLv( $value){
      return $this->_set(26, $value);
    }
  }
}

