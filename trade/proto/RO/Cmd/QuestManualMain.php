<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: SceneQuest.proto

namespace RO\Cmd {

  class QuestManualMain extends \DrSlump\Protobuf\Message {

    /**  @var \RO\Cmd\QuestManualItem[]  */
    public $items = array();
    
    /**  @var \RO\Cmd\QuestPuzzle */
    public $puzzle = null;
    
    /**  @var int */
    public $mainstoryid = 0;
    
    /**  @var \RO\Cmd\QuestPreview[]  */
    public $previews = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.QuestManualMain');

      // REPEATED MESSAGE items = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "items";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\QuestManualItem';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE puzzle = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "puzzle";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\QuestPuzzle';
      $descriptor->addField($f);

      // OPTIONAL UINT32 mainstoryid = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "mainstoryid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // REPEATED MESSAGE previews = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "previews";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\QuestPreview';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <items> has a value
     *
     * @return boolean
     */
    public function hasItems(){
      return $this->_has(1);
    }
    
    /**
     * Clear <items> value
     *
     * @return \RO\Cmd\QuestManualMain
     */
    public function clearItems(){
      return $this->_clear(1);
    }
    
    /**
     * Get <items> value
     *
     * @param int $idx
     * @return \RO\Cmd\QuestManualItem
     */
    public function getItems($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <items> value
     *
     * @param \RO\Cmd\QuestManualItem $value
     * @return \RO\Cmd\QuestManualMain
     */
    public function setItems(\RO\Cmd\QuestManualItem $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <items>
     *
     * @return \RO\Cmd\QuestManualItem[]
     */
    public function getItemsList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <items>
     *
     * @param \RO\Cmd\QuestManualItem $value
     * @return \RO\Cmd\QuestManualMain
     */
    public function addItems(\RO\Cmd\QuestManualItem $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <puzzle> has a value
     *
     * @return boolean
     */
    public function hasPuzzle(){
      return $this->_has(2);
    }
    
    /**
     * Clear <puzzle> value
     *
     * @return \RO\Cmd\QuestManualMain
     */
    public function clearPuzzle(){
      return $this->_clear(2);
    }
    
    /**
     * Get <puzzle> value
     *
     * @return \RO\Cmd\QuestPuzzle
     */
    public function getPuzzle(){
      return $this->_get(2);
    }
    
    /**
     * Set <puzzle> value
     *
     * @param \RO\Cmd\QuestPuzzle $value
     * @return \RO\Cmd\QuestManualMain
     */
    public function setPuzzle(\RO\Cmd\QuestPuzzle $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <mainstoryid> has a value
     *
     * @return boolean
     */
    public function hasMainstoryid(){
      return $this->_has(3);
    }
    
    /**
     * Clear <mainstoryid> value
     *
     * @return \RO\Cmd\QuestManualMain
     */
    public function clearMainstoryid(){
      return $this->_clear(3);
    }
    
    /**
     * Get <mainstoryid> value
     *
     * @return int
     */
    public function getMainstoryid(){
      return $this->_get(3);
    }
    
    /**
     * Set <mainstoryid> value
     *
     * @param int $value
     * @return \RO\Cmd\QuestManualMain
     */
    public function setMainstoryid( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <previews> has a value
     *
     * @return boolean
     */
    public function hasPreviews(){
      return $this->_has(4);
    }
    
    /**
     * Clear <previews> value
     *
     * @return \RO\Cmd\QuestManualMain
     */
    public function clearPreviews(){
      return $this->_clear(4);
    }
    
    /**
     * Get <previews> value
     *
     * @param int $idx
     * @return \RO\Cmd\QuestPreview
     */
    public function getPreviews($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <previews> value
     *
     * @param \RO\Cmd\QuestPreview $value
     * @return \RO\Cmd\QuestManualMain
     */
    public function setPreviews(\RO\Cmd\QuestPreview $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <previews>
     *
     * @return \RO\Cmd\QuestPreview[]
     */
    public function getPreviewsList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <previews>
     *
     * @param \RO\Cmd\QuestPreview $value
     * @return \RO\Cmd\QuestManualMain
     */
    public function addPreviews(\RO\Cmd\QuestPreview $value){
     return $this->_add(4, $value);
    }
  }
}

