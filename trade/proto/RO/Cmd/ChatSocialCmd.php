<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: SocialCmd.proto

namespace RO\Cmd {

  class ChatSocialCmd extends \DrSlump\Protobuf\Message {

    /**  @var int - \RO\Cmd\Command */
    public $cmd = \RO\Cmd\Command::SOCIAL_PROTOCMD;
    
    /**  @var int - \RO\Cmd\SocialParam */
    public $param = \RO\Cmd\SocialParam::SOCIALPARAM_CHAT_MSG;
    
    /**  @var \RO\Cmd\ChatRetCmd */
    public $ret = null;
    
    /**  @var \RO\Cmd\ChatUser[]  */
    public $targets = array();
    
    /**  @var int */
    public $accid = 0;
    
    /**  @var int */
    public $platformid = 0;
    
    /**  @var boolean */
    public $to_global = false;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.ChatSocialCmd');

      // OPTIONAL ENUM cmd = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "cmd";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\Command';
      $f->default   = \RO\Cmd\Command::SOCIAL_PROTOCMD;
      $descriptor->addField($f);

      // OPTIONAL ENUM param = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "param";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\SocialParam';
      $f->default   = \RO\Cmd\SocialParam::SOCIALPARAM_CHAT_MSG;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE ret = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "ret";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\ChatRetCmd';
      $descriptor->addField($f);

      // REPEATED MESSAGE targets = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "targets";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\RO\Cmd\ChatUser';
      $descriptor->addField($f);

      // OPTIONAL UINT64 accid = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "accid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 platformid = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "platformid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL BOOL to_global = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "to_global";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = false;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <cmd> has a value
     *
     * @return boolean
     */
    public function hasCmd(){
      return $this->_has(1);
    }
    
    /**
     * Clear <cmd> value
     *
     * @return \RO\Cmd\ChatSocialCmd
     */
    public function clearCmd(){
      return $this->_clear(1);
    }
    
    /**
     * Get <cmd> value
     *
     * @return int - \RO\Cmd\Command
     */
    public function getCmd(){
      return $this->_get(1);
    }
    
    /**
     * Set <cmd> value
     *
     * @param int - \RO\Cmd\Command $value
     * @return \RO\Cmd\ChatSocialCmd
     */
    public function setCmd( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <param> has a value
     *
     * @return boolean
     */
    public function hasParam(){
      return $this->_has(2);
    }
    
    /**
     * Clear <param> value
     *
     * @return \RO\Cmd\ChatSocialCmd
     */
    public function clearParam(){
      return $this->_clear(2);
    }
    
    /**
     * Get <param> value
     *
     * @return int - \RO\Cmd\SocialParam
     */
    public function getParam(){
      return $this->_get(2);
    }
    
    /**
     * Set <param> value
     *
     * @param int - \RO\Cmd\SocialParam $value
     * @return \RO\Cmd\ChatSocialCmd
     */
    public function setParam( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <ret> has a value
     *
     * @return boolean
     */
    public function hasRet(){
      return $this->_has(3);
    }
    
    /**
     * Clear <ret> value
     *
     * @return \RO\Cmd\ChatSocialCmd
     */
    public function clearRet(){
      return $this->_clear(3);
    }
    
    /**
     * Get <ret> value
     *
     * @return \RO\Cmd\ChatRetCmd
     */
    public function getRet(){
      return $this->_get(3);
    }
    
    /**
     * Set <ret> value
     *
     * @param \RO\Cmd\ChatRetCmd $value
     * @return \RO\Cmd\ChatSocialCmd
     */
    public function setRet(\RO\Cmd\ChatRetCmd $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <targets> has a value
     *
     * @return boolean
     */
    public function hasTargets(){
      return $this->_has(4);
    }
    
    /**
     * Clear <targets> value
     *
     * @return \RO\Cmd\ChatSocialCmd
     */
    public function clearTargets(){
      return $this->_clear(4);
    }
    
    /**
     * Get <targets> value
     *
     * @param int $idx
     * @return \RO\Cmd\ChatUser
     */
    public function getTargets($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <targets> value
     *
     * @param \RO\Cmd\ChatUser $value
     * @return \RO\Cmd\ChatSocialCmd
     */
    public function setTargets(\RO\Cmd\ChatUser $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <targets>
     *
     * @return \RO\Cmd\ChatUser[]
     */
    public function getTargetsList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <targets>
     *
     * @param \RO\Cmd\ChatUser $value
     * @return \RO\Cmd\ChatSocialCmd
     */
    public function addTargets(\RO\Cmd\ChatUser $value){
     return $this->_add(4, $value);
    }
    
    /**
     * Check if <accid> has a value
     *
     * @return boolean
     */
    public function hasAccid(){
      return $this->_has(5);
    }
    
    /**
     * Clear <accid> value
     *
     * @return \RO\Cmd\ChatSocialCmd
     */
    public function clearAccid(){
      return $this->_clear(5);
    }
    
    /**
     * Get <accid> value
     *
     * @return int
     */
    public function getAccid(){
      return $this->_get(5);
    }
    
    /**
     * Set <accid> value
     *
     * @param int $value
     * @return \RO\Cmd\ChatSocialCmd
     */
    public function setAccid( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <platformid> has a value
     *
     * @return boolean
     */
    public function hasPlatformid(){
      return $this->_has(6);
    }
    
    /**
     * Clear <platformid> value
     *
     * @return \RO\Cmd\ChatSocialCmd
     */
    public function clearPlatformid(){
      return $this->_clear(6);
    }
    
    /**
     * Get <platformid> value
     *
     * @return int
     */
    public function getPlatformid(){
      return $this->_get(6);
    }
    
    /**
     * Set <platformid> value
     *
     * @param int $value
     * @return \RO\Cmd\ChatSocialCmd
     */
    public function setPlatformid( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <to_global> has a value
     *
     * @return boolean
     */
    public function hasToGlobal(){
      return $this->_has(7);
    }
    
    /**
     * Clear <to_global> value
     *
     * @return \RO\Cmd\ChatSocialCmd
     */
    public function clearToGlobal(){
      return $this->_clear(7);
    }
    
    /**
     * Get <to_global> value
     *
     * @return boolean
     */
    public function getToGlobal(){
      return $this->_get(7);
    }
    
    /**
     * Set <to_global> value
     *
     * @param boolean $value
     * @return \RO\Cmd\ChatSocialCmd
     */
    public function setToGlobal( $value){
      return $this->_set(7, $value);
    }
  }
}

