<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: SceneTrade.proto

namespace RO\Cmd {

  class TradePriceQueryTradeCmd extends \DrSlump\Protobuf\Message {

    /**  @var int - \RO\Cmd\Command */
    public $cmd = \RO\Cmd\Command::TRADE_PROTOCMD;
    
    /**  @var int - \RO\Cmd\RecordServerTradeParam */
    public $param = \RO\Cmd\RecordServerTradeParam::TRADE_PRICE_QUERY_RECORDTRADE;
    
    /**  @var int */
    public $batchid = null;
    
    /**  @var int */
    public $signup_id = null;
    
    /**  @var int */
    public $price = null;
    
    /**  @var \RO\Cmd\ItemData */
    public $itemdata = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.TradePriceQueryTradeCmd');

      // OPTIONAL ENUM cmd = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "cmd";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\Command';
      $f->default   = \RO\Cmd\Command::TRADE_PROTOCMD;
      $descriptor->addField($f);

      // OPTIONAL ENUM param = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "param";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\RecordServerTradeParam';
      $f->default   = \RO\Cmd\RecordServerTradeParam::TRADE_PRICE_QUERY_RECORDTRADE;
      $descriptor->addField($f);

      // OPTIONAL UINT64 batchid = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "batchid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT64 signup_id = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "signup_id";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT64 price = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "price";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE itemdata = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "itemdata";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\ItemData';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <cmd> has a value
     *
     * @return boolean
     */
    public function hasCmd(){
      return $this->_has(1);
    }
    
    /**
     * Clear <cmd> value
     *
     * @return \RO\Cmd\TradePriceQueryTradeCmd
     */
    public function clearCmd(){
      return $this->_clear(1);
    }
    
    /**
     * Get <cmd> value
     *
     * @return int - \RO\Cmd\Command
     */
    public function getCmd(){
      return $this->_get(1);
    }
    
    /**
     * Set <cmd> value
     *
     * @param int - \RO\Cmd\Command $value
     * @return \RO\Cmd\TradePriceQueryTradeCmd
     */
    public function setCmd( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <param> has a value
     *
     * @return boolean
     */
    public function hasParam(){
      return $this->_has(2);
    }
    
    /**
     * Clear <param> value
     *
     * @return \RO\Cmd\TradePriceQueryTradeCmd
     */
    public function clearParam(){
      return $this->_clear(2);
    }
    
    /**
     * Get <param> value
     *
     * @return int - \RO\Cmd\RecordServerTradeParam
     */
    public function getParam(){
      return $this->_get(2);
    }
    
    /**
     * Set <param> value
     *
     * @param int - \RO\Cmd\RecordServerTradeParam $value
     * @return \RO\Cmd\TradePriceQueryTradeCmd
     */
    public function setParam( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <batchid> has a value
     *
     * @return boolean
     */
    public function hasBatchid(){
      return $this->_has(3);
    }
    
    /**
     * Clear <batchid> value
     *
     * @return \RO\Cmd\TradePriceQueryTradeCmd
     */
    public function clearBatchid(){
      return $this->_clear(3);
    }
    
    /**
     * Get <batchid> value
     *
     * @return int
     */
    public function getBatchid(){
      return $this->_get(3);
    }
    
    /**
     * Set <batchid> value
     *
     * @param int $value
     * @return \RO\Cmd\TradePriceQueryTradeCmd
     */
    public function setBatchid( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <signup_id> has a value
     *
     * @return boolean
     */
    public function hasSignupId(){
      return $this->_has(4);
    }
    
    /**
     * Clear <signup_id> value
     *
     * @return \RO\Cmd\TradePriceQueryTradeCmd
     */
    public function clearSignupId(){
      return $this->_clear(4);
    }
    
    /**
     * Get <signup_id> value
     *
     * @return int
     */
    public function getSignupId(){
      return $this->_get(4);
    }
    
    /**
     * Set <signup_id> value
     *
     * @param int $value
     * @return \RO\Cmd\TradePriceQueryTradeCmd
     */
    public function setSignupId( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <price> has a value
     *
     * @return boolean
     */
    public function hasPrice(){
      return $this->_has(5);
    }
    
    /**
     * Clear <price> value
     *
     * @return \RO\Cmd\TradePriceQueryTradeCmd
     */
    public function clearPrice(){
      return $this->_clear(5);
    }
    
    /**
     * Get <price> value
     *
     * @return int
     */
    public function getPrice(){
      return $this->_get(5);
    }
    
    /**
     * Set <price> value
     *
     * @param int $value
     * @return \RO\Cmd\TradePriceQueryTradeCmd
     */
    public function setPrice( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <itemdata> has a value
     *
     * @return boolean
     */
    public function hasItemdata(){
      return $this->_has(6);
    }
    
    /**
     * Clear <itemdata> value
     *
     * @return \RO\Cmd\TradePriceQueryTradeCmd
     */
    public function clearItemdata(){
      return $this->_clear(6);
    }
    
    /**
     * Get <itemdata> value
     *
     * @return \RO\Cmd\ItemData
     */
    public function getItemdata(){
      return $this->_get(6);
    }
    
    /**
     * Set <itemdata> value
     *
     * @param \RO\Cmd\ItemData $value
     * @return \RO\Cmd\TradePriceQueryTradeCmd
     */
    public function setItemdata(\RO\Cmd\ItemData $value){
      return $this->_set(6, $value);
    }
  }
}

