<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: InfiniteTower.proto

namespace RO\Cmd {

  class UserTowerLayer extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $layer = 0;
    
    /**  @var int */
    public $utime = 0;
    
    /**  @var boolean */
    public $rewarded = false;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.UserTowerLayer');

      // OPTIONAL UINT32 layer = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "layer";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 utime = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "utime";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL BOOL rewarded = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "rewarded";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = false;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <layer> has a value
     *
     * @return boolean
     */
    public function hasLayer(){
      return $this->_has(1);
    }
    
    /**
     * Clear <layer> value
     *
     * @return \RO\Cmd\UserTowerLayer
     */
    public function clearLayer(){
      return $this->_clear(1);
    }
    
    /**
     * Get <layer> value
     *
     * @return int
     */
    public function getLayer(){
      return $this->_get(1);
    }
    
    /**
     * Set <layer> value
     *
     * @param int $value
     * @return \RO\Cmd\UserTowerLayer
     */
    public function setLayer( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <utime> has a value
     *
     * @return boolean
     */
    public function hasUtime(){
      return $this->_has(2);
    }
    
    /**
     * Clear <utime> value
     *
     * @return \RO\Cmd\UserTowerLayer
     */
    public function clearUtime(){
      return $this->_clear(2);
    }
    
    /**
     * Get <utime> value
     *
     * @return int
     */
    public function getUtime(){
      return $this->_get(2);
    }
    
    /**
     * Set <utime> value
     *
     * @param int $value
     * @return \RO\Cmd\UserTowerLayer
     */
    public function setUtime( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <rewarded> has a value
     *
     * @return boolean
     */
    public function hasRewarded(){
      return $this->_has(3);
    }
    
    /**
     * Clear <rewarded> value
     *
     * @return \RO\Cmd\UserTowerLayer
     */
    public function clearRewarded(){
      return $this->_clear(3);
    }
    
    /**
     * Get <rewarded> value
     *
     * @return boolean
     */
    public function getRewarded(){
      return $this->_get(3);
    }
    
    /**
     * Set <rewarded> value
     *
     * @param boolean $value
     * @return \RO\Cmd\UserTowerLayer
     */
    public function setRewarded( $value){
      return $this->_set(3, $value);
    }
  }
}

