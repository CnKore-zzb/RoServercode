<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: SceneUser2.proto

namespace RO\Cmd {

  class GrowthValueInfo extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $groupid = 0;
    
    /**  @var int */
    public $growth = 0;
    
    /**  @var int[]  */
    public $everreward = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.GrowthValueInfo');

      // OPTIONAL UINT32 groupid = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "groupid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 growth = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "growth";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // REPEATED UINT32 everreward = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "everreward";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <groupid> has a value
     *
     * @return boolean
     */
    public function hasGroupid(){
      return $this->_has(1);
    }
    
    /**
     * Clear <groupid> value
     *
     * @return \RO\Cmd\GrowthValueInfo
     */
    public function clearGroupid(){
      return $this->_clear(1);
    }
    
    /**
     * Get <groupid> value
     *
     * @return int
     */
    public function getGroupid(){
      return $this->_get(1);
    }
    
    /**
     * Set <groupid> value
     *
     * @param int $value
     * @return \RO\Cmd\GrowthValueInfo
     */
    public function setGroupid( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <growth> has a value
     *
     * @return boolean
     */
    public function hasGrowth(){
      return $this->_has(2);
    }
    
    /**
     * Clear <growth> value
     *
     * @return \RO\Cmd\GrowthValueInfo
     */
    public function clearGrowth(){
      return $this->_clear(2);
    }
    
    /**
     * Get <growth> value
     *
     * @return int
     */
    public function getGrowth(){
      return $this->_get(2);
    }
    
    /**
     * Set <growth> value
     *
     * @param int $value
     * @return \RO\Cmd\GrowthValueInfo
     */
    public function setGrowth( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <everreward> has a value
     *
     * @return boolean
     */
    public function hasEverreward(){
      return $this->_has(3);
    }
    
    /**
     * Clear <everreward> value
     *
     * @return \RO\Cmd\GrowthValueInfo
     */
    public function clearEverreward(){
      return $this->_clear(3);
    }
    
    /**
     * Get <everreward> value
     *
     * @param int $idx
     * @return int
     */
    public function getEverreward($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <everreward> value
     *
     * @param int $value
     * @return \RO\Cmd\GrowthValueInfo
     */
    public function setEverreward( $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <everreward>
     *
     * @return int[]
     */
    public function getEverrewardList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <everreward>
     *
     * @param int $value
     * @return \RO\Cmd\GrowthValueInfo
     */
    public function addEverreward( $value){
     return $this->_add(3, $value);
    }
  }
}

