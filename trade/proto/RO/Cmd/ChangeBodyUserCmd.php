<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: SceneUser.proto

namespace RO\Cmd {

  class ChangeBodyUserCmd extends \DrSlump\Protobuf\Message {

    /**  @var int - \RO\Cmd\Command */
    public $cmd = \RO\Cmd\Command::SCENE_USER_PROTOCMD;
    
    /**  @var int - \RO\Cmd\CmdParam */
    public $param = \RO\Cmd\CmdParam::CHANGE_BODY_USER_CMD;
    
    /**  @var int */
    public $charid = null;
    
    /**  @var int */
    public $male = null;
    
    /**  @var int */
    public $body = null;
    
    /**  @var int */
    public $hair = null;
    
    /**  @var int */
    public $rightHand = null;
    
    /**  @var int */
    public $profession = null;
    
    /**  @var int */
    public $accessory = null;
    
    /**  @var int */
    public $wing = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.ChangeBodyUserCmd');

      // OPTIONAL ENUM cmd = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "cmd";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\Command';
      $f->default   = \RO\Cmd\Command::SCENE_USER_PROTOCMD;
      $descriptor->addField($f);

      // OPTIONAL ENUM param = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "param";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\CmdParam';
      $f->default   = \RO\Cmd\CmdParam::CHANGE_BODY_USER_CMD;
      $descriptor->addField($f);

      // REQUIRED UINT64 charid = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "charid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL UINT32 male = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "male";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 body = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "body";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 hair = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "hair";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 rightHand = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "rightHand";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 profession = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "profession";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 accessory = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "accessory";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 wing = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "wing";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <cmd> has a value
     *
     * @return boolean
     */
    public function hasCmd(){
      return $this->_has(1);
    }
    
    /**
     * Clear <cmd> value
     *
     * @return \RO\Cmd\ChangeBodyUserCmd
     */
    public function clearCmd(){
      return $this->_clear(1);
    }
    
    /**
     * Get <cmd> value
     *
     * @return int - \RO\Cmd\Command
     */
    public function getCmd(){
      return $this->_get(1);
    }
    
    /**
     * Set <cmd> value
     *
     * @param int - \RO\Cmd\Command $value
     * @return \RO\Cmd\ChangeBodyUserCmd
     */
    public function setCmd( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <param> has a value
     *
     * @return boolean
     */
    public function hasParam(){
      return $this->_has(2);
    }
    
    /**
     * Clear <param> value
     *
     * @return \RO\Cmd\ChangeBodyUserCmd
     */
    public function clearParam(){
      return $this->_clear(2);
    }
    
    /**
     * Get <param> value
     *
     * @return int - \RO\Cmd\CmdParam
     */
    public function getParam(){
      return $this->_get(2);
    }
    
    /**
     * Set <param> value
     *
     * @param int - \RO\Cmd\CmdParam $value
     * @return \RO\Cmd\ChangeBodyUserCmd
     */
    public function setParam( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <charid> has a value
     *
     * @return boolean
     */
    public function hasCharid(){
      return $this->_has(3);
    }
    
    /**
     * Clear <charid> value
     *
     * @return \RO\Cmd\ChangeBodyUserCmd
     */
    public function clearCharid(){
      return $this->_clear(3);
    }
    
    /**
     * Get <charid> value
     *
     * @return int
     */
    public function getCharid(){
      return $this->_get(3);
    }
    
    /**
     * Set <charid> value
     *
     * @param int $value
     * @return \RO\Cmd\ChangeBodyUserCmd
     */
    public function setCharid( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <male> has a value
     *
     * @return boolean
     */
    public function hasMale(){
      return $this->_has(4);
    }
    
    /**
     * Clear <male> value
     *
     * @return \RO\Cmd\ChangeBodyUserCmd
     */
    public function clearMale(){
      return $this->_clear(4);
    }
    
    /**
     * Get <male> value
     *
     * @return int
     */
    public function getMale(){
      return $this->_get(4);
    }
    
    /**
     * Set <male> value
     *
     * @param int $value
     * @return \RO\Cmd\ChangeBodyUserCmd
     */
    public function setMale( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <body> has a value
     *
     * @return boolean
     */
    public function hasBody(){
      return $this->_has(5);
    }
    
    /**
     * Clear <body> value
     *
     * @return \RO\Cmd\ChangeBodyUserCmd
     */
    public function clearBody(){
      return $this->_clear(5);
    }
    
    /**
     * Get <body> value
     *
     * @return int
     */
    public function getBody(){
      return $this->_get(5);
    }
    
    /**
     * Set <body> value
     *
     * @param int $value
     * @return \RO\Cmd\ChangeBodyUserCmd
     */
    public function setBody( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <hair> has a value
     *
     * @return boolean
     */
    public function hasHair(){
      return $this->_has(6);
    }
    
    /**
     * Clear <hair> value
     *
     * @return \RO\Cmd\ChangeBodyUserCmd
     */
    public function clearHair(){
      return $this->_clear(6);
    }
    
    /**
     * Get <hair> value
     *
     * @return int
     */
    public function getHair(){
      return $this->_get(6);
    }
    
    /**
     * Set <hair> value
     *
     * @param int $value
     * @return \RO\Cmd\ChangeBodyUserCmd
     */
    public function setHair( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <rightHand> has a value
     *
     * @return boolean
     */
    public function hasRightHand(){
      return $this->_has(7);
    }
    
    /**
     * Clear <rightHand> value
     *
     * @return \RO\Cmd\ChangeBodyUserCmd
     */
    public function clearRightHand(){
      return $this->_clear(7);
    }
    
    /**
     * Get <rightHand> value
     *
     * @return int
     */
    public function getRightHand(){
      return $this->_get(7);
    }
    
    /**
     * Set <rightHand> value
     *
     * @param int $value
     * @return \RO\Cmd\ChangeBodyUserCmd
     */
    public function setRightHand( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <profession> has a value
     *
     * @return boolean
     */
    public function hasProfession(){
      return $this->_has(8);
    }
    
    /**
     * Clear <profession> value
     *
     * @return \RO\Cmd\ChangeBodyUserCmd
     */
    public function clearProfession(){
      return $this->_clear(8);
    }
    
    /**
     * Get <profession> value
     *
     * @return int
     */
    public function getProfession(){
      return $this->_get(8);
    }
    
    /**
     * Set <profession> value
     *
     * @param int $value
     * @return \RO\Cmd\ChangeBodyUserCmd
     */
    public function setProfession( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <accessory> has a value
     *
     * @return boolean
     */
    public function hasAccessory(){
      return $this->_has(9);
    }
    
    /**
     * Clear <accessory> value
     *
     * @return \RO\Cmd\ChangeBodyUserCmd
     */
    public function clearAccessory(){
      return $this->_clear(9);
    }
    
    /**
     * Get <accessory> value
     *
     * @return int
     */
    public function getAccessory(){
      return $this->_get(9);
    }
    
    /**
     * Set <accessory> value
     *
     * @param int $value
     * @return \RO\Cmd\ChangeBodyUserCmd
     */
    public function setAccessory( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <wing> has a value
     *
     * @return boolean
     */
    public function hasWing(){
      return $this->_has(10);
    }
    
    /**
     * Clear <wing> value
     *
     * @return \RO\Cmd\ChangeBodyUserCmd
     */
    public function clearWing(){
      return $this->_clear(10);
    }
    
    /**
     * Get <wing> value
     *
     * @return int
     */
    public function getWing(){
      return $this->_get(10);
    }
    
    /**
     * Set <wing> value
     *
     * @param int $value
     * @return \RO\Cmd\ChangeBodyUserCmd
     */
    public function setWing( $value){
      return $this->_set(10, $value);
    }
  }
}

