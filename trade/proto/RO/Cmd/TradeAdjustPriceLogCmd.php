<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: LogCmd.proto

namespace RO\Cmd {

  class TradeAdjustPriceLogCmd extends \DrSlump\Protobuf\Message {

    /**  @var int - \RO\Cmd\Command */
    public $cmd = \RO\Cmd\Command::LOG_PROTOCMD;
    
    /**  @var int - \RO\Cmd\LogParam */
    public $param = \RO\Cmd\LogParam::TRADE_ADJUST_PRICE_LOG_CMD;
    
    /**  @var int */
    public $cid = null;
    
    /**  @var int */
    public $sid = null;
    
    /**  @var int */
    public $pid = null;
    
    /**  @var int */
    public $time = null;
    
    /**  @var int */
    public $item_id = null;
    
    /**  @var int */
    public $t = null;
    
    /**  @var int */
    public $k = null;
    
    /**  @var int */
    public $sold_count = null;
    
    /**  @var int */
    public $kt = null;
    
    /**  @var int */
    public $qk = null;
    
    /**  @var float */
    public $r = null;
    
    /**  @var float */
    public $up_ratio = null;
    
    /**  @var float */
    public $down_ratio = null;
    
    /**  @var float */
    public $new_price = null;
    
    /**  @var float */
    public $old_price = null;
    
    /**  @var int */
    public $last_time = null;
    
    /**  @var int - \RO\Cmd\EPriceStatus */
    public $status = null;
    
    /**  @var string */
    public $logid = null;
    
    /**  @var int */
    public $real_price = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Cmd.TradeAdjustPriceLogCmd');

      // OPTIONAL ENUM cmd = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "cmd";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\Command';
      $f->default   = \RO\Cmd\Command::LOG_PROTOCMD;
      $descriptor->addField($f);

      // OPTIONAL ENUM param = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "param";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\LogParam';
      $f->default   = \RO\Cmd\LogParam::TRADE_ADJUST_PRICE_LOG_CMD;
      $descriptor->addField($f);

      // OPTIONAL UINT32 cid = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "cid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 sid = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "sid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT64 pid = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "pid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 time = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "time";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 item_id = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "item_id";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 t = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "t";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 k = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "k";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 sold_count = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "sold_count";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 kt = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "kt";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 qk = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "qk";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FLOAT r = 13
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 13;
      $f->name      = "r";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FLOAT up_ratio = 14
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 14;
      $f->name      = "up_ratio";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FLOAT down_ratio = 15
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 15;
      $f->name      = "down_ratio";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FLOAT new_price = 16
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 16;
      $f->name      = "new_price";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FLOAT old_price = 17
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 17;
      $f->name      = "old_price";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 last_time = 18
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 18;
      $f->name      = "last_time";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM status = 19
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 19;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\RO\Cmd\EPriceStatus';
      $descriptor->addField($f);

      // OPTIONAL STRING logid = 20
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 20;
      $f->name      = "logid";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 real_price = 21
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 21;
      $f->name      = "real_price";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <cmd> has a value
     *
     * @return boolean
     */
    public function hasCmd(){
      return $this->_has(1);
    }
    
    /**
     * Clear <cmd> value
     *
     * @return \RO\Cmd\TradeAdjustPriceLogCmd
     */
    public function clearCmd(){
      return $this->_clear(1);
    }
    
    /**
     * Get <cmd> value
     *
     * @return int - \RO\Cmd\Command
     */
    public function getCmd(){
      return $this->_get(1);
    }
    
    /**
     * Set <cmd> value
     *
     * @param int - \RO\Cmd\Command $value
     * @return \RO\Cmd\TradeAdjustPriceLogCmd
     */
    public function setCmd( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <param> has a value
     *
     * @return boolean
     */
    public function hasParam(){
      return $this->_has(2);
    }
    
    /**
     * Clear <param> value
     *
     * @return \RO\Cmd\TradeAdjustPriceLogCmd
     */
    public function clearParam(){
      return $this->_clear(2);
    }
    
    /**
     * Get <param> value
     *
     * @return int - \RO\Cmd\LogParam
     */
    public function getParam(){
      return $this->_get(2);
    }
    
    /**
     * Set <param> value
     *
     * @param int - \RO\Cmd\LogParam $value
     * @return \RO\Cmd\TradeAdjustPriceLogCmd
     */
    public function setParam( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <cid> has a value
     *
     * @return boolean
     */
    public function hasCid(){
      return $this->_has(3);
    }
    
    /**
     * Clear <cid> value
     *
     * @return \RO\Cmd\TradeAdjustPriceLogCmd
     */
    public function clearCid(){
      return $this->_clear(3);
    }
    
    /**
     * Get <cid> value
     *
     * @return int
     */
    public function getCid(){
      return $this->_get(3);
    }
    
    /**
     * Set <cid> value
     *
     * @param int $value
     * @return \RO\Cmd\TradeAdjustPriceLogCmd
     */
    public function setCid( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <sid> has a value
     *
     * @return boolean
     */
    public function hasSid(){
      return $this->_has(4);
    }
    
    /**
     * Clear <sid> value
     *
     * @return \RO\Cmd\TradeAdjustPriceLogCmd
     */
    public function clearSid(){
      return $this->_clear(4);
    }
    
    /**
     * Get <sid> value
     *
     * @return int
     */
    public function getSid(){
      return $this->_get(4);
    }
    
    /**
     * Set <sid> value
     *
     * @param int $value
     * @return \RO\Cmd\TradeAdjustPriceLogCmd
     */
    public function setSid( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <pid> has a value
     *
     * @return boolean
     */
    public function hasPid(){
      return $this->_has(5);
    }
    
    /**
     * Clear <pid> value
     *
     * @return \RO\Cmd\TradeAdjustPriceLogCmd
     */
    public function clearPid(){
      return $this->_clear(5);
    }
    
    /**
     * Get <pid> value
     *
     * @return int
     */
    public function getPid(){
      return $this->_get(5);
    }
    
    /**
     * Set <pid> value
     *
     * @param int $value
     * @return \RO\Cmd\TradeAdjustPriceLogCmd
     */
    public function setPid( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <time> has a value
     *
     * @return boolean
     */
    public function hasTime(){
      return $this->_has(6);
    }
    
    /**
     * Clear <time> value
     *
     * @return \RO\Cmd\TradeAdjustPriceLogCmd
     */
    public function clearTime(){
      return $this->_clear(6);
    }
    
    /**
     * Get <time> value
     *
     * @return int
     */
    public function getTime(){
      return $this->_get(6);
    }
    
    /**
     * Set <time> value
     *
     * @param int $value
     * @return \RO\Cmd\TradeAdjustPriceLogCmd
     */
    public function setTime( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <item_id> has a value
     *
     * @return boolean
     */
    public function hasItemId(){
      return $this->_has(7);
    }
    
    /**
     * Clear <item_id> value
     *
     * @return \RO\Cmd\TradeAdjustPriceLogCmd
     */
    public function clearItemId(){
      return $this->_clear(7);
    }
    
    /**
     * Get <item_id> value
     *
     * @return int
     */
    public function getItemId(){
      return $this->_get(7);
    }
    
    /**
     * Set <item_id> value
     *
     * @param int $value
     * @return \RO\Cmd\TradeAdjustPriceLogCmd
     */
    public function setItemId( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <t> has a value
     *
     * @return boolean
     */
    public function hasT(){
      return $this->_has(8);
    }
    
    /**
     * Clear <t> value
     *
     * @return \RO\Cmd\TradeAdjustPriceLogCmd
     */
    public function clearT(){
      return $this->_clear(8);
    }
    
    /**
     * Get <t> value
     *
     * @return int
     */
    public function getT(){
      return $this->_get(8);
    }
    
    /**
     * Set <t> value
     *
     * @param int $value
     * @return \RO\Cmd\TradeAdjustPriceLogCmd
     */
    public function setT( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <k> has a value
     *
     * @return boolean
     */
    public function hasK(){
      return $this->_has(9);
    }
    
    /**
     * Clear <k> value
     *
     * @return \RO\Cmd\TradeAdjustPriceLogCmd
     */
    public function clearK(){
      return $this->_clear(9);
    }
    
    /**
     * Get <k> value
     *
     * @return int
     */
    public function getK(){
      return $this->_get(9);
    }
    
    /**
     * Set <k> value
     *
     * @param int $value
     * @return \RO\Cmd\TradeAdjustPriceLogCmd
     */
    public function setK( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <sold_count> has a value
     *
     * @return boolean
     */
    public function hasSoldCount(){
      return $this->_has(10);
    }
    
    /**
     * Clear <sold_count> value
     *
     * @return \RO\Cmd\TradeAdjustPriceLogCmd
     */
    public function clearSoldCount(){
      return $this->_clear(10);
    }
    
    /**
     * Get <sold_count> value
     *
     * @return int
     */
    public function getSoldCount(){
      return $this->_get(10);
    }
    
    /**
     * Set <sold_count> value
     *
     * @param int $value
     * @return \RO\Cmd\TradeAdjustPriceLogCmd
     */
    public function setSoldCount( $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <kt> has a value
     *
     * @return boolean
     */
    public function hasKt(){
      return $this->_has(11);
    }
    
    /**
     * Clear <kt> value
     *
     * @return \RO\Cmd\TradeAdjustPriceLogCmd
     */
    public function clearKt(){
      return $this->_clear(11);
    }
    
    /**
     * Get <kt> value
     *
     * @return int
     */
    public function getKt(){
      return $this->_get(11);
    }
    
    /**
     * Set <kt> value
     *
     * @param int $value
     * @return \RO\Cmd\TradeAdjustPriceLogCmd
     */
    public function setKt( $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <qk> has a value
     *
     * @return boolean
     */
    public function hasQk(){
      return $this->_has(12);
    }
    
    /**
     * Clear <qk> value
     *
     * @return \RO\Cmd\TradeAdjustPriceLogCmd
     */
    public function clearQk(){
      return $this->_clear(12);
    }
    
    /**
     * Get <qk> value
     *
     * @return int
     */
    public function getQk(){
      return $this->_get(12);
    }
    
    /**
     * Set <qk> value
     *
     * @param int $value
     * @return \RO\Cmd\TradeAdjustPriceLogCmd
     */
    public function setQk( $value){
      return $this->_set(12, $value);
    }
    
    /**
     * Check if <r> has a value
     *
     * @return boolean
     */
    public function hasR(){
      return $this->_has(13);
    }
    
    /**
     * Clear <r> value
     *
     * @return \RO\Cmd\TradeAdjustPriceLogCmd
     */
    public function clearR(){
      return $this->_clear(13);
    }
    
    /**
     * Get <r> value
     *
     * @return float
     */
    public function getR(){
      return $this->_get(13);
    }
    
    /**
     * Set <r> value
     *
     * @param float $value
     * @return \RO\Cmd\TradeAdjustPriceLogCmd
     */
    public function setR( $value){
      return $this->_set(13, $value);
    }
    
    /**
     * Check if <up_ratio> has a value
     *
     * @return boolean
     */
    public function hasUpRatio(){
      return $this->_has(14);
    }
    
    /**
     * Clear <up_ratio> value
     *
     * @return \RO\Cmd\TradeAdjustPriceLogCmd
     */
    public function clearUpRatio(){
      return $this->_clear(14);
    }
    
    /**
     * Get <up_ratio> value
     *
     * @return float
     */
    public function getUpRatio(){
      return $this->_get(14);
    }
    
    /**
     * Set <up_ratio> value
     *
     * @param float $value
     * @return \RO\Cmd\TradeAdjustPriceLogCmd
     */
    public function setUpRatio( $value){
      return $this->_set(14, $value);
    }
    
    /**
     * Check if <down_ratio> has a value
     *
     * @return boolean
     */
    public function hasDownRatio(){
      return $this->_has(15);
    }
    
    /**
     * Clear <down_ratio> value
     *
     * @return \RO\Cmd\TradeAdjustPriceLogCmd
     */
    public function clearDownRatio(){
      return $this->_clear(15);
    }
    
    /**
     * Get <down_ratio> value
     *
     * @return float
     */
    public function getDownRatio(){
      return $this->_get(15);
    }
    
    /**
     * Set <down_ratio> value
     *
     * @param float $value
     * @return \RO\Cmd\TradeAdjustPriceLogCmd
     */
    public function setDownRatio( $value){
      return $this->_set(15, $value);
    }
    
    /**
     * Check if <new_price> has a value
     *
     * @return boolean
     */
    public function hasNewPrice(){
      return $this->_has(16);
    }
    
    /**
     * Clear <new_price> value
     *
     * @return \RO\Cmd\TradeAdjustPriceLogCmd
     */
    public function clearNewPrice(){
      return $this->_clear(16);
    }
    
    /**
     * Get <new_price> value
     *
     * @return float
     */
    public function getNewPrice(){
      return $this->_get(16);
    }
    
    /**
     * Set <new_price> value
     *
     * @param float $value
     * @return \RO\Cmd\TradeAdjustPriceLogCmd
     */
    public function setNewPrice( $value){
      return $this->_set(16, $value);
    }
    
    /**
     * Check if <old_price> has a value
     *
     * @return boolean
     */
    public function hasOldPrice(){
      return $this->_has(17);
    }
    
    /**
     * Clear <old_price> value
     *
     * @return \RO\Cmd\TradeAdjustPriceLogCmd
     */
    public function clearOldPrice(){
      return $this->_clear(17);
    }
    
    /**
     * Get <old_price> value
     *
     * @return float
     */
    public function getOldPrice(){
      return $this->_get(17);
    }
    
    /**
     * Set <old_price> value
     *
     * @param float $value
     * @return \RO\Cmd\TradeAdjustPriceLogCmd
     */
    public function setOldPrice( $value){
      return $this->_set(17, $value);
    }
    
    /**
     * Check if <last_time> has a value
     *
     * @return boolean
     */
    public function hasLastTime(){
      return $this->_has(18);
    }
    
    /**
     * Clear <last_time> value
     *
     * @return \RO\Cmd\TradeAdjustPriceLogCmd
     */
    public function clearLastTime(){
      return $this->_clear(18);
    }
    
    /**
     * Get <last_time> value
     *
     * @return int
     */
    public function getLastTime(){
      return $this->_get(18);
    }
    
    /**
     * Set <last_time> value
     *
     * @param int $value
     * @return \RO\Cmd\TradeAdjustPriceLogCmd
     */
    public function setLastTime( $value){
      return $this->_set(18, $value);
    }
    
    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(19);
    }
    
    /**
     * Clear <status> value
     *
     * @return \RO\Cmd\TradeAdjustPriceLogCmd
     */
    public function clearStatus(){
      return $this->_clear(19);
    }
    
    /**
     * Get <status> value
     *
     * @return int - \RO\Cmd\EPriceStatus
     */
    public function getStatus(){
      return $this->_get(19);
    }
    
    /**
     * Set <status> value
     *
     * @param int - \RO\Cmd\EPriceStatus $value
     * @return \RO\Cmd\TradeAdjustPriceLogCmd
     */
    public function setStatus( $value){
      return $this->_set(19, $value);
    }
    
    /**
     * Check if <logid> has a value
     *
     * @return boolean
     */
    public function hasLogid(){
      return $this->_has(20);
    }
    
    /**
     * Clear <logid> value
     *
     * @return \RO\Cmd\TradeAdjustPriceLogCmd
     */
    public function clearLogid(){
      return $this->_clear(20);
    }
    
    /**
     * Get <logid> value
     *
     * @return string
     */
    public function getLogid(){
      return $this->_get(20);
    }
    
    /**
     * Set <logid> value
     *
     * @param string $value
     * @return \RO\Cmd\TradeAdjustPriceLogCmd
     */
    public function setLogid( $value){
      return $this->_set(20, $value);
    }
    
    /**
     * Check if <real_price> has a value
     *
     * @return boolean
     */
    public function hasRealPrice(){
      return $this->_has(21);
    }
    
    /**
     * Clear <real_price> value
     *
     * @return \RO\Cmd\TradeAdjustPriceLogCmd
     */
    public function clearRealPrice(){
      return $this->_clear(21);
    }
    
    /**
     * Get <real_price> value
     *
     * @return int
     */
    public function getRealPrice(){
      return $this->_get(21);
    }
    
    /**
     * Set <real_price> value
     *
     * @param int $value
     * @return \RO\Cmd\TradeAdjustPriceLogCmd
     */
    public function setRealPrice( $value){
      return $this->_set(21, $value);
    }
  }
}

