#!/usr/bin/env php
<?php
# 只作为任务服务器启动功能, 使用 task-server

error_reporting(7);


$shortOpts = '';
$shortOpts .= 'h:';     // -h 0.0.0.0
$shortOpts .= 'p:';     // -p 1312
$shortOpts .= 'n:';     // -n 20 任务进程数, 默认20
$shortOpts .= 'i:';     // -i 10 服务器序号
$shortOpts .= 'g:';     // -g default 服务器所在集群组名称, 默认: default
$shortOpts .= 'l:';     // -l /var/log/register-serer.log
$shortOpts .= 'r:';     // -r 127.0.0.1:1310:abcdef
$shortOpts .= 'ehd';    // -h : 帮助.  -d: 守护进程化

$longOpts = [
    'help',             // --help
    'debug',            // --debug 等同于 -vv
    'user:',            // --user test
    'group:',           // --group test
    'daemon:',          // --daemon /var/run/test.pid
    'tz:'               // --tz Asia/Taipei, default PRC (+8:00)
];

$option = getopt($shortOpts, $longOpts);

date_default_timezone_set($option['timezone'] ?: 'PRC');

if (isset($option['help']))
{
    # 输出帮助内容
    help:
    $file = basename(__FILE__);
    echo <<<EOF
Example:
    {$file} -h 192.168.1.2 -p 1312 -i 0 -r 192.168.1.1:1310 -vv

Usage: {$file} [options]
    -h HOST                 task server ip, default 0.0.0.0
    -p PORT                 task server port, default 1312
    -i ID                   task server number id.
    -r HOST:PORT:KEY        register server ip, port and key, example: 192.168.1.1:1310:abcdef
    -l PATH                 log file path
    -e                      encrypt data
    -v, -vv, -vvv           increase verbose level.
                                -v  : warn,info
                                -vv : warn,info,debug
                                -vvv: warn,info,debug,trace
    -d, --daemon PIDFILE    daemonize server process
    --user USER             change user
    --group GROUP           change group
    --tz TIMEZONE           change the timezone, default: PRC

    --debug                 debug level, same as -vv
    --help                  show help

EOF;
    exit;
}

if (!isset($option['r']) || !$option['r'])
{
    echo "缺少注册服务器参数 -r HOST:PORT:KEY\n";
    exit;
}
elseif (!preg_match('#^([a-z0-9\.\-_]+):(\d+):(.*)$#i', $option['r']))
{
    echo "注册服务器参数 -r 格式错误, 必须是 HOST:PORT:KEY 这样的格式\n";
    exit;
}


# 配置
$config = [
    'clusters'  => [
        'host'      => $option['h'] ?: '0.0.0.0',
        'task_port' => $option['p'] ?: 1312,
        'mode'      => 'task',
        'ip'        => $option['h'] ?: '',
        'group'     => $option['g'] ?: 'default',
        'id'        => isset($option['i']) ? (int)$option['i'] : null,
        'encrypt'   => isset($option['e']) ? true : false,
        'register'  => array_combine(['ip', 'port', 'key'], explode(':', $option['r'], 3)),
    ],
    'server' => [
        'mode' => 'base',
    ],
    'log'       => [
        'level' => ['warn'],
    ],
    'swoole' => [
        'dispatch_mode'            => 5,
        'worker_num'               => 0,
        'task_worker_num'          => $option['n'] ?: 20,
        'task_max_request'         => 0,
        'open_eof_check'           => true,
        'open_eof_split'           => true,
        'package_max_length'       => 1024 * 1024 * 50,
        'package_eof'              => "\r\n",
        'heartbeat_idle_time'      => 300,
        'heartbeat_check_interval' => 60,
        'daemonize'                => false,
    ],
];

if (isset($option['user']) && $option['user'])
{
    $config['swoole']['user'] = $option['user'];
}

if (isset($option['group']) && $option['group'])
{
    $config['swoole']['group'] = $option['group'];
}

if (isset($option['daemon']) && $option['daemon'])
{
    # 写入进程ID
    file_put_contents($option['daemon'], getmypid());
    $config['swoole']['daemonize'] = 1;
}
elseif (isset($option['d']))
{
    $config['swoole']['daemonize'] = 1;
}



require __DIR__ .'/../../../autoload.php';

if (!function_exists('\\msgpack_pack'))
{
    echo "本功能需要安装 msgpack 插件，请先安装插件\n";
    exit;
}

$server = new MyQEE\Server\Server($config);

$server->startTaskServer();