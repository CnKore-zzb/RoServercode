package Cmd;

import "xCmd.proto";
import "ProtoCommon.proto";
import "SceneUser.proto";
import "ActivityEvent.proto";
import "SceneItem.proto";

enum EventParam
{
  USER_EVENT_FIRST_ACTION = 1;
  USER_EVENT_ATTACK_NPC = 2;
  USER_EVENT_NEW_TITLE = 3;
  USER_EVENT_ALL_TITLE = 4;
  USER_EVENT_UPDATE_RANDOM = 5;
  USER_EVENT_BUFF_DAMAGE = 6;
  USER_EVENT_CHARGE_NTF = 7;
  USER_EVENT_CHARGE_QUERY = 8;        //请求购买充值卡
  USER_EVENT_DEPOSIT_CARD_INFO = 9;   //充值卡信息
  USER_EVENT_DEL_TRANSFORM = 10;
  USER_EVENT_INVITECAT_FAIL = 11;
  USER_EVENT_NPC_FUNCTION = 12;
  USER_EVENT_SYSTEM_STRING = 13;
  USER_EVENT_HAND_CAT = 14;
  USER_EVENT_CHANGE_TITLE = 15;
  USER_EVENT_QUERY_CHARGE_CNT = 16;
  USER_EVENT_NTF_MONTHCARD_END = 17;
  USER_EVENT_LOVELETTER_USE = 18;
  USER_EVENT_QUERY_ACTIVITY_CNT = 19;
  USER_EVENT_UPDATE_ACTIVITY_CNT = 20;
  USER_EVENT_GET_RECALL_SHARE_REWARD = 22;
  USER_EVENT_NTF_VERSION_CARD = 23;
  USER_EVENT_WAIT_RELIVE = 24;
  USER_EVENT_QUERY_RESETTIME = 25;
  USER_EVENT_INOUT_ACT = 26;
  USER_EVENT_MAIL = 27;
  USER_EVENT_LEVELUP_DEAD = 28;
}


// 用于标记第一次 位含义, 需要与前端定义保持一致
enum EFirstActionType
{
  EFIRSTACTION_MIN = 0;
  EFIRSTACTION_SKILL_OVERFLOW = 1;
  EFIRSTACTION_EXCHANGECARD = 2;
  EFIRSTACTION_COMPOSECARD = 3;
  EFIRSTACTION_COOKFOOD = 4;
  EFIRSTACTION_LOTTERY = 5;
  EFIRSTACTION_FOOD_MAIL = 6;

  EFIRSTACTION_LOTTERY_EQUIP = 7;
  EFIRSTACTION_LOTTERY_CARD = 8;
  EFIRSTACTION_LOTTERY_MAGIC = 9;
  EFIRSTACTION_RECALL_SHARE = 10;
  EFIRSTACTION_DECOMPOSECARD = 11;
  EFIRSTACTION_KFC_SHARE = 12;
}

message FirstActionUserEvent
{
  optional Command cmd = 1 [ default = USER_EVENT_PROTOCMD ];
  optional EventParam param = 2 [ default = USER_EVENT_FIRST_ACTION ];

  optional uint32 firstaction = 3 [ default = 0 ];
}


// scene -> client , self or teamer make damage to npc
message DamageNpcUserEvent
{
  optional Command cmd = 1 [ default = USER_EVENT_PROTOCMD ];
  optional EventParam param = 2 [ default = USER_EVENT_ATTACK_NPC ];

  optional uint64 npcguid = 3 [ default = 0 ];
  optional uint64 userid = 4 [ default = 0 ];
}

enum ETitleType 
{
  ETITLE_TYPE_MIN = 0;
  ETITLE_TYPE_MANNUAL = 1;
  ETITLE_TYPE_ACHIEVEMENT = 2;
  ETITLE_TYPE_ACHIEVEMENT_ORDER = 3;
  ETITLE_TYPE_FOODCOOKER = 7;
  ETITLE_TYPE_FOODTASTER = 8;
  ETITLE_TYPE_MAX = 9;
}

// title data
message TitleData
{
  optional ETitleType title_type = 1;
  optional uint32 id = 2 [ default = 0 ];  
  optional uint32 createtime = 3 [ default = 0 ];
}

// scene -> client : new title notify
message NewTitle
{
  optional Command cmd = 1 [ default = USER_EVENT_PROTOCMD ];
  optional EventParam param = 2 [ default = USER_EVENT_NEW_TITLE ];
  optional TitleData title_data = 3;
  optional uint64 charid = 4;
}

message AllTitle
{
  optional Command cmd = 1 [ default = USER_EVENT_PROTOCMD ];
  optional EventParam param = 2 [ default = USER_EVENT_ALL_TITLE ];

  repeated TitleData title_datas = 3;
}

// scene -> client, update random number
message UpdateRandomUserEvent
{
  optional Command cmd = 1 [ default = USER_EVENT_PROTOCMD ];
  optional EventParam param = 2 [ default = USER_EVENT_UPDATE_RANDOM ];

  optional uint32 beginindex = 3 [ default = 0 ];
  optional uint32 endindex = 4 [ default = 0 ];
  repeated uint32 randoms = 5;
}

// scene -> client, buff damage
message BuffDamageUserEvent
{
  optional Command cmd = 1 [ default = USER_EVENT_PROTOCMD ];
  optional EventParam param = 2 [ default = USER_EVENT_BUFF_DAMAGE ];

  optional uint64 charid = 3 [ default = 0 ];
  optional int32 damage = 4 [ default = 0 ];
  optional DamageType etype = 5 [ default = DAMAGE_TYPE_NORMAL ];
}

// session -> client 
message ChargeNtfUserEvent 
{
  optional Command cmd = 1 [ default = USER_EVENT_PROTOCMD ];
  optional EventParam param = 2 [ default = USER_EVENT_CHARGE_NTF ];

  optional uint64 charid = 3 [ default = 0 ];
  optional uint32 dataid = 4 [ default = 0 ];
}

enum EDepositState 
{
  EDEPOSITSTAT_NONE = 0;
  EDEPOSITSTAT_VALID = 1;
  EDEPOSITSTAT_INVALID = 2;
}

message DepositTypeData
{
  optional EDepositCardType type = 1;   
  optional uint32 expiretime = 2;       //过期时间
  optional uint32 starttime = 3;        //使用时间
  //功能参数，用到再加
  optional EDepositState state = 4;     //状态 服务端用
  optional bool invalid = 5 [ default = false];     //到期后首次登陆
}

message DepositCardData
{
  optional uint32 itemid = 1;
  optional bool isused = 2 [ default = false];  
}

message ChargeQueryCmd
{
  optional Command cmd = 1 [ default = USER_EVENT_PROTOCMD ];
  optional EventParam param = 2 [ default = USER_EVENT_CHARGE_QUERY ];

  optional uint32 data_id = 3;    //
  optional bool ret = 4;  
  optional uint32 charged_count = 5;
}

message DepositCardInfo
{
  optional Command cmd = 1 [ default = USER_EVENT_PROTOCMD ];
  optional EventParam param = 2 [ default = USER_EVENT_DEPOSIT_CARD_INFO ];

  repeated DepositTypeData card_datas = 3;
}

// client -> scene
message DelTransformUserEvent
{
  optional Command cmd = 1 [ default = USER_EVENT_PROTOCMD ];
  optional EventParam param = 2 [ default = USER_EVENT_DEL_TRANSFORM ];
}

// scene -> client : invite cat fail
message InviteCatFailUserEvent
{
  optional Command cmd = 1 [ default = USER_EVENT_PROTOCMD ];
  optional EventParam param = 2 [ default = USER_EVENT_INVITECAT_FAIL ];
}

// client -> scene
message TrigNpcFuncUserEvent
{
  optional Command cmd = 1 [ default = USER_EVENT_PROTOCMD ];
  optional EventParam param = 2 [ default = USER_EVENT_NPC_FUNCTION ];

  required uint64 npcguid = 3;
  required uint32 funcid = 4;
}

enum ESystemStringType
{
  ESYSTEMSTRING_MIN = 0;
  ESYSTEMSTRING_MEMO = 1; // 设置传送之阵记录点
}
// client -> scene
message SystemStringUserEvent
{
  optional Command cmd = 1 [ default = USER_EVENT_PROTOCMD ];
  optional EventParam param = 2 [ default = USER_EVENT_SYSTEM_STRING ];

  optional ESystemStringType etype = 3 [ default = ESYSTEMSTRING_MIN ];
}

// client -> scene : invite or break hand cat
message HandCatUserEvent
{
  optional Command cmd = 1 [ default = USER_EVENT_PROTOCMD ];
  optional EventParam param = 2 [ default = USER_EVENT_HAND_CAT ];

  required uint64 catguid = 3;
  optional bool breakup = 4 [ default = false ];
}

message ChangeTitle
{
  optional Command cmd = 1 [ default = USER_EVENT_PROTOCMD ];
  optional EventParam param = 2 [ default = USER_EVENT_CHANGE_TITLE];
  optional TitleData title_data = 3;
  optional uint64 charid = 4;
}

message ChargeCntInfo
{
  optional uint32 dataid = 1;
  optional uint32 count = 2;
  optional uint32 limit = 3 [ default = 0 ];
}

message QueryChargeCnt 
{
  optional Command cmd = 1 [ default = USER_EVENT_PROTOCMD ];
  optional EventParam param = 2 [ default = USER_EVENT_QUERY_CHARGE_CNT];
  repeated ChargeCntInfo info = 3; 
}


message NTFMonthCardEnd
{
  optional Command cmd = 1 [ default = USER_EVENT_PROTOCMD ];
  optional EventParam param = 2 [ default = USER_EVENT_NTF_MONTHCARD_END];
}
//client -> session use loveletter
message LoveLetterUse
{
  optional Command cmd = 1 [ default = USER_EVENT_PROTOCMD ];
  optional EventParam param = 2 [ default = USER_EVENT_LOVELETTER_USE];

  optional string itemguid = 3;
  optional uint64 targets = 4;
  optional string content = 5;
  optional ELetterType type = 6 [ default = ELETTERTYPE_CHRISTMAS ];
}

message ActivityCntItem
{
  optional uint32 activityid = 1;
  optional uint32 count = 2; // 活动已购买次数
}

message QueryActivityCnt
{
  optional Command cmd = 1 [ default = USER_EVENT_PROTOCMD ];
  optional EventParam param = 2 [ default = USER_EVENT_QUERY_ACTIVITY_CNT];
  repeated ActivityCntItem info = 3; 
}

message UpdateActivityCnt
{
  optional Command cmd = 1 [ default = USER_EVENT_PROTOCMD ];
  optional EventParam param = 2 [ default = USER_EVENT_UPDATE_ACTIVITY_CNT];
  optional ActivityCntItem info = 3; 
}

message VersionCardInfo
{
 optional uint32 version=1;    //版本号
 optional uint32 id1=2;        //折扣前的充值id
 optional uint32 id2=3;        //折扣后的充值id，没有表示没折扣
}

//玩家上线发送版本卡信息给客户端
message NtfVersionCardInfo
{
 optional Command cmd = 1 [ default = USER_EVENT_PROTOCMD ];
 optional EventParam param = 2 [ default = USER_EVENT_NTF_VERSION_CARD];
 repeated VersionCardInfo info = 3; 
}

// scene->client : relive countdown
message DieTimeCountEventCmd
{
  optional Command cmd = 1 [ default = USER_EVENT_PROTOCMD ];
  optional EventParam param = 2 [ default = USER_EVENT_WAIT_RELIVE ];

  optional uint32 time = 3 [ default = 0 ];
  optional string name = 4;
}

// client -> scene : get recall share reward
message GetFirstShareRewardUserEvent
{
  optional Command cmd = 1 [ default = USER_EVENT_PROTOCMD ];
  optional EventParam param = 2 [ default = USER_EVENT_GET_RECALL_SHARE_REWARD ];
}

message QueryResetTimeEventCmd
{
  optional Command cmd = 1 [ default = USER_EVENT_PROTOCMD ];
  optional EventParam param = 2 [ default = USER_EVENT_QUERY_RESETTIME ];

  required EAERewardMode etype = 3;
  optional uint32 resettime = 4 [ default = 0 ];
}
message InOutActEventCmd
{
  optional Command cmd = 1 [ default = USER_EVENT_PROTOCMD ];
  optional EventParam param = 2 [ default = USER_EVENT_INOUT_ACT ];

  required uint64 actid = 3;
  optional bool inout = 4 [ default = false ];
}

enum EEventMailType
{
  EEVENTMAILTYPE_MIN = 0;
  EEVENTMAILTYPE_DELCAHR = 1;
}

message UserEventMailCmd
{
  optional Command cmd = 1 [ default = USER_EVENT_PROTOCMD ];
  optional EventParam param = 2 [ default = USER_EVENT_MAIL ];

  optional EEventMailType eType = 3 [ default = EEVENTMAILTYPE_MIN ];

  repeated uint32 param32 = 4;
  repeated uint64 param64 = 5;
}

// client <-> scene : levelup dead
message LevelupDeadUserEvent
{
  optional Command cmd = 1 [ default = USER_EVENT_PROTOCMD ];
  optional EventParam param = 2 [ default = USER_EVENT_LEVELUP_DEAD ];
}

