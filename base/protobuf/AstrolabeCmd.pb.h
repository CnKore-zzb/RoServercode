// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AstrolabeCmd.proto

#ifndef PROTOBUF_AstrolabeCmd_2eproto__INCLUDED
#define PROTOBUF_AstrolabeCmd_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "xCmd.pb.h"
// @@protoc_insertion_point(includes)

namespace Cmd {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_AstrolabeCmd_2eproto();
void protobuf_AssignDesc_AstrolabeCmd_2eproto();
void protobuf_ShutdownFile_AstrolabeCmd_2eproto();

class AstrolabeCostData;
class AstrolabeQueryCmd;
class AstrolabeActivateStarCmd;
class AstrolabeQueryResetCmd;
class AstrolabeResetCmd;

enum AstrolabeParam {
  ASTROLABEPARAM_QUERY = 1,
  ASTROLABEPARAM_ACTIVATE_STAR = 2,
  ASTROLABEPARAM_QUERY_RESET = 3,
  ASTROLABEPARAM_RESET = 4
};
bool AstrolabeParam_IsValid(int value);
const AstrolabeParam AstrolabeParam_MIN = ASTROLABEPARAM_QUERY;
const AstrolabeParam AstrolabeParam_MAX = ASTROLABEPARAM_RESET;
const int AstrolabeParam_ARRAYSIZE = AstrolabeParam_MAX + 1;

const ::google::protobuf::EnumDescriptor* AstrolabeParam_descriptor();
inline const ::std::string& AstrolabeParam_Name(AstrolabeParam value) {
  return ::google::protobuf::internal::NameOfEnum(
    AstrolabeParam_descriptor(), value);
}
inline bool AstrolabeParam_Parse(
    const ::std::string& name, AstrolabeParam* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AstrolabeParam>(
    AstrolabeParam_descriptor(), name, value);
}
enum EAstrolabeType {
  EASTROLABETYPE_MIN = 0,
  EASTROLABETYPE_PROFESSION = 1,
  EASTROLABETYPE_MAX = 2
};
bool EAstrolabeType_IsValid(int value);
const EAstrolabeType EAstrolabeType_MIN = EASTROLABETYPE_MIN;
const EAstrolabeType EAstrolabeType_MAX = EASTROLABETYPE_MAX;
const int EAstrolabeType_ARRAYSIZE = EAstrolabeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EAstrolabeType_descriptor();
inline const ::std::string& EAstrolabeType_Name(EAstrolabeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EAstrolabeType_descriptor(), value);
}
inline bool EAstrolabeType_Parse(
    const ::std::string& name, EAstrolabeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EAstrolabeType>(
    EAstrolabeType_descriptor(), name, value);
}
// ===================================================================

class AstrolabeCostData : public ::google::protobuf::Message {
 public:
  AstrolabeCostData();
  virtual ~AstrolabeCostData();

  AstrolabeCostData(const AstrolabeCostData& from);

  inline AstrolabeCostData& operator=(const AstrolabeCostData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AstrolabeCostData& default_instance();

  void Swap(AstrolabeCostData* other);

  // implements Message ----------------------------------------------

  AstrolabeCostData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AstrolabeCostData& from);
  void MergeFrom(const AstrolabeCostData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1 [default = 0];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 count = 2 [default = 0];
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.AstrolabeCostData)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 count_;
  friend void  protobuf_AddDesc_AstrolabeCmd_2eproto();
  friend void protobuf_AssignDesc_AstrolabeCmd_2eproto();
  friend void protobuf_ShutdownFile_AstrolabeCmd_2eproto();

  void InitAsDefaultInstance();
  static AstrolabeCostData* default_instance_;
};
// -------------------------------------------------------------------

class AstrolabeQueryCmd : public ::google::protobuf::Message {
 public:
  AstrolabeQueryCmd();
  virtual ~AstrolabeQueryCmd();

  AstrolabeQueryCmd(const AstrolabeQueryCmd& from);

  inline AstrolabeQueryCmd& operator=(const AstrolabeQueryCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AstrolabeQueryCmd& default_instance();

  void Swap(AstrolabeQueryCmd* other);

  // implements Message ----------------------------------------------

  AstrolabeQueryCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AstrolabeQueryCmd& from);
  void MergeFrom(const AstrolabeQueryCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ASTROLABE_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.AstrolabeParam param = 2 [default = ASTROLABEPARAM_QUERY];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::AstrolabeParam param() const;
  inline void set_param(::Cmd::AstrolabeParam value);

  // repeated uint32 stars = 3;
  inline int stars_size() const;
  inline void clear_stars();
  static const int kStarsFieldNumber = 3;
  inline ::google::protobuf::uint32 stars(int index) const;
  inline void set_stars(int index, ::google::protobuf::uint32 value);
  inline void add_stars(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      stars() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_stars();

  // @@protoc_insertion_point(class_scope:Cmd.AstrolabeQueryCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > stars_;
  friend void  protobuf_AddDesc_AstrolabeCmd_2eproto();
  friend void protobuf_AssignDesc_AstrolabeCmd_2eproto();
  friend void protobuf_ShutdownFile_AstrolabeCmd_2eproto();

  void InitAsDefaultInstance();
  static AstrolabeQueryCmd* default_instance_;
};
// -------------------------------------------------------------------

class AstrolabeActivateStarCmd : public ::google::protobuf::Message {
 public:
  AstrolabeActivateStarCmd();
  virtual ~AstrolabeActivateStarCmd();

  AstrolabeActivateStarCmd(const AstrolabeActivateStarCmd& from);

  inline AstrolabeActivateStarCmd& operator=(const AstrolabeActivateStarCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AstrolabeActivateStarCmd& default_instance();

  void Swap(AstrolabeActivateStarCmd* other);

  // implements Message ----------------------------------------------

  AstrolabeActivateStarCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AstrolabeActivateStarCmd& from);
  void MergeFrom(const AstrolabeActivateStarCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ASTROLABE_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.AstrolabeParam param = 2 [default = ASTROLABEPARAM_ACTIVATE_STAR];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::AstrolabeParam param() const;
  inline void set_param(::Cmd::AstrolabeParam value);

  // repeated uint32 stars = 3;
  inline int stars_size() const;
  inline void clear_stars();
  static const int kStarsFieldNumber = 3;
  inline ::google::protobuf::uint32 stars(int index) const;
  inline void set_stars(int index, ::google::protobuf::uint32 value);
  inline void add_stars(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      stars() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_stars();

  // optional bool success = 5;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 5;
  inline bool success() const;
  inline void set_success(bool value);

  // @@protoc_insertion_point(class_scope:Cmd.AstrolabeActivateStarCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_success();
  inline void clear_has_success();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > stars_;
  bool success_;
  friend void  protobuf_AddDesc_AstrolabeCmd_2eproto();
  friend void protobuf_AssignDesc_AstrolabeCmd_2eproto();
  friend void protobuf_ShutdownFile_AstrolabeCmd_2eproto();

  void InitAsDefaultInstance();
  static AstrolabeActivateStarCmd* default_instance_;
};
// -------------------------------------------------------------------

class AstrolabeQueryResetCmd : public ::google::protobuf::Message {
 public:
  AstrolabeQueryResetCmd();
  virtual ~AstrolabeQueryResetCmd();

  AstrolabeQueryResetCmd(const AstrolabeQueryResetCmd& from);

  inline AstrolabeQueryResetCmd& operator=(const AstrolabeQueryResetCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AstrolabeQueryResetCmd& default_instance();

  void Swap(AstrolabeQueryResetCmd* other);

  // implements Message ----------------------------------------------

  AstrolabeQueryResetCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AstrolabeQueryResetCmd& from);
  void MergeFrom(const AstrolabeQueryResetCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ASTROLABE_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.AstrolabeParam param = 2 [default = ASTROLABEPARAM_QUERY_RESET];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::AstrolabeParam param() const;
  inline void set_param(::Cmd::AstrolabeParam value);

  // optional .Cmd.EAstrolabeType type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::Cmd::EAstrolabeType type() const;
  inline void set_type(::Cmd::EAstrolabeType value);

  // repeated .Cmd.AstrolabeCostData items = 4;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 4;
  inline const ::Cmd::AstrolabeCostData& items(int index) const;
  inline ::Cmd::AstrolabeCostData* mutable_items(int index);
  inline ::Cmd::AstrolabeCostData* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::AstrolabeCostData >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::AstrolabeCostData >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:Cmd.AstrolabeQueryResetCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::AstrolabeCostData > items_;
  int type_;
  friend void  protobuf_AddDesc_AstrolabeCmd_2eproto();
  friend void protobuf_AssignDesc_AstrolabeCmd_2eproto();
  friend void protobuf_ShutdownFile_AstrolabeCmd_2eproto();

  void InitAsDefaultInstance();
  static AstrolabeQueryResetCmd* default_instance_;
};
// -------------------------------------------------------------------

class AstrolabeResetCmd : public ::google::protobuf::Message {
 public:
  AstrolabeResetCmd();
  virtual ~AstrolabeResetCmd();

  AstrolabeResetCmd(const AstrolabeResetCmd& from);

  inline AstrolabeResetCmd& operator=(const AstrolabeResetCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AstrolabeResetCmd& default_instance();

  void Swap(AstrolabeResetCmd* other);

  // implements Message ----------------------------------------------

  AstrolabeResetCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AstrolabeResetCmd& from);
  void MergeFrom(const AstrolabeResetCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ASTROLABE_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.AstrolabeParam param = 2 [default = ASTROLABEPARAM_RESET];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::AstrolabeParam param() const;
  inline void set_param(::Cmd::AstrolabeParam value);

  // repeated uint32 stars = 3;
  inline int stars_size() const;
  inline void clear_stars();
  static const int kStarsFieldNumber = 3;
  inline ::google::protobuf::uint32 stars(int index) const;
  inline void set_stars(int index, ::google::protobuf::uint32 value);
  inline void add_stars(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      stars() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_stars();

  // optional bool success = 4;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 4;
  inline bool success() const;
  inline void set_success(bool value);

  // @@protoc_insertion_point(class_scope:Cmd.AstrolabeResetCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_success();
  inline void clear_has_success();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > stars_;
  bool success_;
  friend void  protobuf_AddDesc_AstrolabeCmd_2eproto();
  friend void protobuf_AssignDesc_AstrolabeCmd_2eproto();
  friend void protobuf_ShutdownFile_AstrolabeCmd_2eproto();

  void InitAsDefaultInstance();
  static AstrolabeResetCmd* default_instance_;
};
// ===================================================================


// ===================================================================

// AstrolabeCostData

// optional uint32 id = 1 [default = 0];
inline bool AstrolabeCostData::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AstrolabeCostData::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AstrolabeCostData::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AstrolabeCostData::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 AstrolabeCostData::id() const {
  // @@protoc_insertion_point(field_get:Cmd.AstrolabeCostData.id)
  return id_;
}
inline void AstrolabeCostData::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AstrolabeCostData.id)
}

// optional uint32 count = 2 [default = 0];
inline bool AstrolabeCostData::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AstrolabeCostData::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AstrolabeCostData::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AstrolabeCostData::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 AstrolabeCostData::count() const {
  // @@protoc_insertion_point(field_get:Cmd.AstrolabeCostData.count)
  return count_;
}
inline void AstrolabeCostData::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AstrolabeCostData.count)
}

// -------------------------------------------------------------------

// AstrolabeQueryCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_ASTROLABE_PROTOCMD];
inline bool AstrolabeQueryCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AstrolabeQueryCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AstrolabeQueryCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AstrolabeQueryCmd::clear_cmd() {
  cmd_ = 28;
  clear_has_cmd();
}
inline ::Cmd::Command AstrolabeQueryCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.AstrolabeQueryCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void AstrolabeQueryCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AstrolabeQueryCmd.cmd)
}

// optional .Cmd.AstrolabeParam param = 2 [default = ASTROLABEPARAM_QUERY];
inline bool AstrolabeQueryCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AstrolabeQueryCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AstrolabeQueryCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AstrolabeQueryCmd::clear_param() {
  param_ = 1;
  clear_has_param();
}
inline ::Cmd::AstrolabeParam AstrolabeQueryCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.AstrolabeQueryCmd.param)
  return static_cast< ::Cmd::AstrolabeParam >(param_);
}
inline void AstrolabeQueryCmd::set_param(::Cmd::AstrolabeParam value) {
  assert(::Cmd::AstrolabeParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AstrolabeQueryCmd.param)
}

// repeated uint32 stars = 3;
inline int AstrolabeQueryCmd::stars_size() const {
  return stars_.size();
}
inline void AstrolabeQueryCmd::clear_stars() {
  stars_.Clear();
}
inline ::google::protobuf::uint32 AstrolabeQueryCmd::stars(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.AstrolabeQueryCmd.stars)
  return stars_.Get(index);
}
inline void AstrolabeQueryCmd::set_stars(int index, ::google::protobuf::uint32 value) {
  stars_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.AstrolabeQueryCmd.stars)
}
inline void AstrolabeQueryCmd::add_stars(::google::protobuf::uint32 value) {
  stars_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.AstrolabeQueryCmd.stars)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
AstrolabeQueryCmd::stars() const {
  // @@protoc_insertion_point(field_list:Cmd.AstrolabeQueryCmd.stars)
  return stars_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
AstrolabeQueryCmd::mutable_stars() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.AstrolabeQueryCmd.stars)
  return &stars_;
}

// -------------------------------------------------------------------

// AstrolabeActivateStarCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_ASTROLABE_PROTOCMD];
inline bool AstrolabeActivateStarCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AstrolabeActivateStarCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AstrolabeActivateStarCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AstrolabeActivateStarCmd::clear_cmd() {
  cmd_ = 28;
  clear_has_cmd();
}
inline ::Cmd::Command AstrolabeActivateStarCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.AstrolabeActivateStarCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void AstrolabeActivateStarCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AstrolabeActivateStarCmd.cmd)
}

// optional .Cmd.AstrolabeParam param = 2 [default = ASTROLABEPARAM_ACTIVATE_STAR];
inline bool AstrolabeActivateStarCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AstrolabeActivateStarCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AstrolabeActivateStarCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AstrolabeActivateStarCmd::clear_param() {
  param_ = 2;
  clear_has_param();
}
inline ::Cmd::AstrolabeParam AstrolabeActivateStarCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.AstrolabeActivateStarCmd.param)
  return static_cast< ::Cmd::AstrolabeParam >(param_);
}
inline void AstrolabeActivateStarCmd::set_param(::Cmd::AstrolabeParam value) {
  assert(::Cmd::AstrolabeParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AstrolabeActivateStarCmd.param)
}

// repeated uint32 stars = 3;
inline int AstrolabeActivateStarCmd::stars_size() const {
  return stars_.size();
}
inline void AstrolabeActivateStarCmd::clear_stars() {
  stars_.Clear();
}
inline ::google::protobuf::uint32 AstrolabeActivateStarCmd::stars(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.AstrolabeActivateStarCmd.stars)
  return stars_.Get(index);
}
inline void AstrolabeActivateStarCmd::set_stars(int index, ::google::protobuf::uint32 value) {
  stars_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.AstrolabeActivateStarCmd.stars)
}
inline void AstrolabeActivateStarCmd::add_stars(::google::protobuf::uint32 value) {
  stars_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.AstrolabeActivateStarCmd.stars)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
AstrolabeActivateStarCmd::stars() const {
  // @@protoc_insertion_point(field_list:Cmd.AstrolabeActivateStarCmd.stars)
  return stars_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
AstrolabeActivateStarCmd::mutable_stars() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.AstrolabeActivateStarCmd.stars)
  return &stars_;
}

// optional bool success = 5;
inline bool AstrolabeActivateStarCmd::has_success() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AstrolabeActivateStarCmd::set_has_success() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AstrolabeActivateStarCmd::clear_has_success() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AstrolabeActivateStarCmd::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool AstrolabeActivateStarCmd::success() const {
  // @@protoc_insertion_point(field_get:Cmd.AstrolabeActivateStarCmd.success)
  return success_;
}
inline void AstrolabeActivateStarCmd::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AstrolabeActivateStarCmd.success)
}

// -------------------------------------------------------------------

// AstrolabeQueryResetCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_ASTROLABE_PROTOCMD];
inline bool AstrolabeQueryResetCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AstrolabeQueryResetCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AstrolabeQueryResetCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AstrolabeQueryResetCmd::clear_cmd() {
  cmd_ = 28;
  clear_has_cmd();
}
inline ::Cmd::Command AstrolabeQueryResetCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.AstrolabeQueryResetCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void AstrolabeQueryResetCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AstrolabeQueryResetCmd.cmd)
}

// optional .Cmd.AstrolabeParam param = 2 [default = ASTROLABEPARAM_QUERY_RESET];
inline bool AstrolabeQueryResetCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AstrolabeQueryResetCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AstrolabeQueryResetCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AstrolabeQueryResetCmd::clear_param() {
  param_ = 3;
  clear_has_param();
}
inline ::Cmd::AstrolabeParam AstrolabeQueryResetCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.AstrolabeQueryResetCmd.param)
  return static_cast< ::Cmd::AstrolabeParam >(param_);
}
inline void AstrolabeQueryResetCmd::set_param(::Cmd::AstrolabeParam value) {
  assert(::Cmd::AstrolabeParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AstrolabeQueryResetCmd.param)
}

// optional .Cmd.EAstrolabeType type = 3;
inline bool AstrolabeQueryResetCmd::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AstrolabeQueryResetCmd::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AstrolabeQueryResetCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AstrolabeQueryResetCmd::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Cmd::EAstrolabeType AstrolabeQueryResetCmd::type() const {
  // @@protoc_insertion_point(field_get:Cmd.AstrolabeQueryResetCmd.type)
  return static_cast< ::Cmd::EAstrolabeType >(type_);
}
inline void AstrolabeQueryResetCmd::set_type(::Cmd::EAstrolabeType value) {
  assert(::Cmd::EAstrolabeType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AstrolabeQueryResetCmd.type)
}

// repeated .Cmd.AstrolabeCostData items = 4;
inline int AstrolabeQueryResetCmd::items_size() const {
  return items_.size();
}
inline void AstrolabeQueryResetCmd::clear_items() {
  items_.Clear();
}
inline const ::Cmd::AstrolabeCostData& AstrolabeQueryResetCmd::items(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.AstrolabeQueryResetCmd.items)
  return items_.Get(index);
}
inline ::Cmd::AstrolabeCostData* AstrolabeQueryResetCmd::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.AstrolabeQueryResetCmd.items)
  return items_.Mutable(index);
}
inline ::Cmd::AstrolabeCostData* AstrolabeQueryResetCmd::add_items() {
  // @@protoc_insertion_point(field_add:Cmd.AstrolabeQueryResetCmd.items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::AstrolabeCostData >&
AstrolabeQueryResetCmd::items() const {
  // @@protoc_insertion_point(field_list:Cmd.AstrolabeQueryResetCmd.items)
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::AstrolabeCostData >*
AstrolabeQueryResetCmd::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.AstrolabeQueryResetCmd.items)
  return &items_;
}

// -------------------------------------------------------------------

// AstrolabeResetCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_ASTROLABE_PROTOCMD];
inline bool AstrolabeResetCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AstrolabeResetCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AstrolabeResetCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AstrolabeResetCmd::clear_cmd() {
  cmd_ = 28;
  clear_has_cmd();
}
inline ::Cmd::Command AstrolabeResetCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.AstrolabeResetCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void AstrolabeResetCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AstrolabeResetCmd.cmd)
}

// optional .Cmd.AstrolabeParam param = 2 [default = ASTROLABEPARAM_RESET];
inline bool AstrolabeResetCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AstrolabeResetCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AstrolabeResetCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AstrolabeResetCmd::clear_param() {
  param_ = 4;
  clear_has_param();
}
inline ::Cmd::AstrolabeParam AstrolabeResetCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.AstrolabeResetCmd.param)
  return static_cast< ::Cmd::AstrolabeParam >(param_);
}
inline void AstrolabeResetCmd::set_param(::Cmd::AstrolabeParam value) {
  assert(::Cmd::AstrolabeParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AstrolabeResetCmd.param)
}

// repeated uint32 stars = 3;
inline int AstrolabeResetCmd::stars_size() const {
  return stars_.size();
}
inline void AstrolabeResetCmd::clear_stars() {
  stars_.Clear();
}
inline ::google::protobuf::uint32 AstrolabeResetCmd::stars(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.AstrolabeResetCmd.stars)
  return stars_.Get(index);
}
inline void AstrolabeResetCmd::set_stars(int index, ::google::protobuf::uint32 value) {
  stars_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.AstrolabeResetCmd.stars)
}
inline void AstrolabeResetCmd::add_stars(::google::protobuf::uint32 value) {
  stars_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.AstrolabeResetCmd.stars)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
AstrolabeResetCmd::stars() const {
  // @@protoc_insertion_point(field_list:Cmd.AstrolabeResetCmd.stars)
  return stars_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
AstrolabeResetCmd::mutable_stars() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.AstrolabeResetCmd.stars)
  return &stars_;
}

// optional bool success = 4;
inline bool AstrolabeResetCmd::has_success() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AstrolabeResetCmd::set_has_success() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AstrolabeResetCmd::clear_has_success() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AstrolabeResetCmd::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool AstrolabeResetCmd::success() const {
  // @@protoc_insertion_point(field_get:Cmd.AstrolabeResetCmd.success)
  return success_;
}
inline void AstrolabeResetCmd::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AstrolabeResetCmd.success)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Cmd::AstrolabeParam> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::AstrolabeParam>() {
  return ::Cmd::AstrolabeParam_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EAstrolabeType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EAstrolabeType>() {
  return ::Cmd::EAstrolabeType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_AstrolabeCmd_2eproto__INCLUDED
