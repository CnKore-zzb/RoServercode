// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SceneTrade.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SceneTrade.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Cmd {

namespace {

const ::google::protobuf::Descriptor* FrostItemListSceneTradeCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FrostItemListSceneTradeCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReduceMoneyRecordTradeCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReduceMoneyRecordTradeCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddItemRecordTradeCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddItemRecordTradeCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddMoneyRecordTradeCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddMoneyRecordTradeCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReduceItemRecordTrade_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReduceItemRecordTrade_reflection_ = NULL;
const ::google::protobuf::Descriptor* SessionToMeRecordTrade_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SessionToMeRecordTrade_reflection_ = NULL;
const ::google::protobuf::Descriptor* SessionForwardUsercmdTrade_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SessionForwardUsercmdTrade_reflection_ = NULL;
const ::google::protobuf::Descriptor* SessionForwardScenecmdTrade_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SessionForwardScenecmdTrade_reflection_ = NULL;
const ::google::protobuf::Descriptor* ForwardUserCmdToRecordCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ForwardUserCmdToRecordCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldMsgCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldMsgCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateTradeLogCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateTradeLogCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GiveCheckMoneySceneTradeCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GiveCheckMoneySceneTradeCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* SyncGiveItemSceneTradeCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncGiveItemSceneTradeCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddGiveSceneTradeCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddGiveSceneTradeCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* DelGiveSceneTradeCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DelGiveSceneTradeCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddGiveItemSceneTradeCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddGiveItemSceneTradeCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReceiveGiveSceneTradeCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReceiveGiveSceneTradeCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* NtfGiveStatusSceneTradeCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NtfGiveStatusSceneTradeCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReduceQuotaSceneTradeCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReduceQuotaSceneTradeCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnlockQuotaSceneTradeCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnlockQuotaSceneTradeCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExtraPermissionSceneTradeCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExtraPermissionSceneTradeCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* SecurityCmdSceneTradeCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SecurityCmdSceneTradeCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* TradePriceQueryTradeCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TradePriceQueryTradeCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* BoothOpenTradeCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BoothOpenTradeCmd_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SceneTradeParam_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RecordServerTradeParam_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EAddItemType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EGiveStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EPermission_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ESecurityType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_SceneTrade_2eproto() {
  protobuf_AddDesc_SceneTrade_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SceneTrade.proto");
  GOOGLE_CHECK(file != NULL);
  FrostItemListSceneTradeCmd_descriptor_ = file->message_type(0);
  static const int FrostItemListSceneTradeCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrostItemListSceneTradeCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrostItemListSceneTradeCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrostItemListSceneTradeCmd, lists_),
  };
  FrostItemListSceneTradeCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FrostItemListSceneTradeCmd_descriptor_,
      FrostItemListSceneTradeCmd::default_instance_,
      FrostItemListSceneTradeCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrostItemListSceneTradeCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrostItemListSceneTradeCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FrostItemListSceneTradeCmd));
  ReduceMoneyRecordTradeCmd_descriptor_ = file->message_type(1);
  static const int ReduceMoneyRecordTradeCmd_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReduceMoneyRecordTradeCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReduceMoneyRecordTradeCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReduceMoneyRecordTradeCmd, money_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReduceMoneyRecordTradeCmd, total_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReduceMoneyRecordTradeCmd, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReduceMoneyRecordTradeCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReduceMoneyRecordTradeCmd, item_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReduceMoneyRecordTradeCmd, quota_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReduceMoneyRecordTradeCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReduceMoneyRecordTradeCmd, record_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReduceMoneyRecordTradeCmd, lock_quota_),
  };
  ReduceMoneyRecordTradeCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReduceMoneyRecordTradeCmd_descriptor_,
      ReduceMoneyRecordTradeCmd::default_instance_,
      ReduceMoneyRecordTradeCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReduceMoneyRecordTradeCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReduceMoneyRecordTradeCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReduceMoneyRecordTradeCmd));
  AddItemRecordTradeCmd_descriptor_ = file->message_type(2);
  static const int AddItemRecordTradeCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddItemRecordTradeCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddItemRecordTradeCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddItemRecordTradeCmd, item_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddItemRecordTradeCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddItemRecordTradeCmd, addtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddItemRecordTradeCmd, total_quota_),
  };
  AddItemRecordTradeCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddItemRecordTradeCmd_descriptor_,
      AddItemRecordTradeCmd::default_instance_,
      AddItemRecordTradeCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddItemRecordTradeCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddItemRecordTradeCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddItemRecordTradeCmd));
  AddMoneyRecordTradeCmd_descriptor_ = file->message_type(3);
  static const int AddMoneyRecordTradeCmd_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMoneyRecordTradeCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMoneyRecordTradeCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMoneyRecordTradeCmd, money_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMoneyRecordTradeCmd, total_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMoneyRecordTradeCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMoneyRecordTradeCmd, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMoneyRecordTradeCmd, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMoneyRecordTradeCmd, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMoneyRecordTradeCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMoneyRecordTradeCmd, money2_),
  };
  AddMoneyRecordTradeCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddMoneyRecordTradeCmd_descriptor_,
      AddMoneyRecordTradeCmd::default_instance_,
      AddMoneyRecordTradeCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMoneyRecordTradeCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMoneyRecordTradeCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddMoneyRecordTradeCmd));
  ReduceItemRecordTrade_descriptor_ = file->message_type(4);
  static const int ReduceItemRecordTrade_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReduceItemRecordTrade, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReduceItemRecordTrade, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReduceItemRecordTrade, item_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReduceItemRecordTrade, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReduceItemRecordTrade, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReduceItemRecordTrade, boothfee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReduceItemRecordTrade, is_resell_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReduceItemRecordTrade, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReduceItemRecordTrade, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReduceItemRecordTrade, quota_unlock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReduceItemRecordTrade, quota_lock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReduceItemRecordTrade, quota_),
  };
  ReduceItemRecordTrade_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReduceItemRecordTrade_descriptor_,
      ReduceItemRecordTrade::default_instance_,
      ReduceItemRecordTrade_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReduceItemRecordTrade, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReduceItemRecordTrade, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReduceItemRecordTrade));
  SessionToMeRecordTrade_descriptor_ = file->message_type(5);
  static const int SessionToMeRecordTrade_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionToMeRecordTrade, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionToMeRecordTrade, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionToMeRecordTrade, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionToMeRecordTrade, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionToMeRecordTrade, len_),
  };
  SessionToMeRecordTrade_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SessionToMeRecordTrade_descriptor_,
      SessionToMeRecordTrade::default_instance_,
      SessionToMeRecordTrade_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionToMeRecordTrade, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionToMeRecordTrade, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SessionToMeRecordTrade));
  SessionForwardUsercmdTrade_descriptor_ = file->message_type(6);
  static const int SessionForwardUsercmdTrade_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionForwardUsercmdTrade, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionForwardUsercmdTrade, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionForwardUsercmdTrade, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionForwardUsercmdTrade, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionForwardUsercmdTrade, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionForwardUsercmdTrade, len_),
  };
  SessionForwardUsercmdTrade_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SessionForwardUsercmdTrade_descriptor_,
      SessionForwardUsercmdTrade::default_instance_,
      SessionForwardUsercmdTrade_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionForwardUsercmdTrade, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionForwardUsercmdTrade, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SessionForwardUsercmdTrade));
  SessionForwardScenecmdTrade_descriptor_ = file->message_type(7);
  static const int SessionForwardScenecmdTrade_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionForwardScenecmdTrade, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionForwardScenecmdTrade, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionForwardScenecmdTrade, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionForwardScenecmdTrade, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionForwardScenecmdTrade, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionForwardScenecmdTrade, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionForwardScenecmdTrade, len_),
  };
  SessionForwardScenecmdTrade_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SessionForwardScenecmdTrade_descriptor_,
      SessionForwardScenecmdTrade::default_instance_,
      SessionForwardScenecmdTrade_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionForwardScenecmdTrade, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionForwardScenecmdTrade, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SessionForwardScenecmdTrade));
  ForwardUserCmdToRecordCmd_descriptor_ = file->message_type(8);
  static const int ForwardUserCmdToRecordCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardUserCmdToRecordCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardUserCmdToRecordCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardUserCmdToRecordCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardUserCmdToRecordCmd, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardUserCmdToRecordCmd, len_),
  };
  ForwardUserCmdToRecordCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ForwardUserCmdToRecordCmd_descriptor_,
      ForwardUserCmdToRecordCmd::default_instance_,
      ForwardUserCmdToRecordCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardUserCmdToRecordCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardUserCmdToRecordCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ForwardUserCmdToRecordCmd));
  WorldMsgCmd_descriptor_ = file->message_type(9);
  static const int WorldMsgCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldMsgCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldMsgCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldMsgCmd, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldMsgCmd, len_),
  };
  WorldMsgCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldMsgCmd_descriptor_,
      WorldMsgCmd::default_instance_,
      WorldMsgCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldMsgCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldMsgCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldMsgCmd));
  UpdateTradeLogCmd_descriptor_ = file->message_type(10);
  static const int UpdateTradeLogCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateTradeLogCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateTradeLogCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateTradeLogCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateTradeLogCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateTradeLogCmd, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateTradeLogCmd, trade_type_),
  };
  UpdateTradeLogCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateTradeLogCmd_descriptor_,
      UpdateTradeLogCmd::default_instance_,
      UpdateTradeLogCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateTradeLogCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateTradeLogCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateTradeLogCmd));
  GiveCheckMoneySceneTradeCmd_descriptor_ = file->message_type(11);
  static const int GiveCheckMoneySceneTradeCmd_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiveCheckMoneySceneTradeCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiveCheckMoneySceneTradeCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiveCheckMoneySceneTradeCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiveCheckMoneySceneTradeCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiveCheckMoneySceneTradeCmd, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiveCheckMoneySceneTradeCmd, friendid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiveCheckMoneySceneTradeCmd, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiveCheckMoneySceneTradeCmd, anonymous_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiveCheckMoneySceneTradeCmd, quota_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiveCheckMoneySceneTradeCmd, fee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiveCheckMoneySceneTradeCmd, background_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiveCheckMoneySceneTradeCmd, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiveCheckMoneySceneTradeCmd, itemdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiveCheckMoneySceneTradeCmd, fromtrade_),
  };
  GiveCheckMoneySceneTradeCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GiveCheckMoneySceneTradeCmd_descriptor_,
      GiveCheckMoneySceneTradeCmd::default_instance_,
      GiveCheckMoneySceneTradeCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiveCheckMoneySceneTradeCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiveCheckMoneySceneTradeCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GiveCheckMoneySceneTradeCmd));
  SyncGiveItemSceneTradeCmd_descriptor_ = file->message_type(12);
  static const int SyncGiveItemSceneTradeCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncGiveItemSceneTradeCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncGiveItemSceneTradeCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncGiveItemSceneTradeCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncGiveItemSceneTradeCmd, iteminfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncGiveItemSceneTradeCmd, type_),
  };
  SyncGiveItemSceneTradeCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SyncGiveItemSceneTradeCmd_descriptor_,
      SyncGiveItemSceneTradeCmd::default_instance_,
      SyncGiveItemSceneTradeCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncGiveItemSceneTradeCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncGiveItemSceneTradeCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SyncGiveItemSceneTradeCmd));
  AddGiveSceneTradeCmd_descriptor_ = file->message_type(13);
  static const int AddGiveSceneTradeCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddGiveSceneTradeCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddGiveSceneTradeCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddGiveSceneTradeCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddGiveSceneTradeCmd, iteminfo_),
  };
  AddGiveSceneTradeCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddGiveSceneTradeCmd_descriptor_,
      AddGiveSceneTradeCmd::default_instance_,
      AddGiveSceneTradeCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddGiveSceneTradeCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddGiveSceneTradeCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddGiveSceneTradeCmd));
  DelGiveSceneTradeCmd_descriptor_ = file->message_type(14);
  static const int DelGiveSceneTradeCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelGiveSceneTradeCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelGiveSceneTradeCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelGiveSceneTradeCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelGiveSceneTradeCmd, id_),
  };
  DelGiveSceneTradeCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DelGiveSceneTradeCmd_descriptor_,
      DelGiveSceneTradeCmd::default_instance_,
      DelGiveSceneTradeCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelGiveSceneTradeCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelGiveSceneTradeCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DelGiveSceneTradeCmd));
  AddGiveItemSceneTradeCmd_descriptor_ = file->message_type(15);
  static const int AddGiveItemSceneTradeCmd_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddGiveItemSceneTradeCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddGiveItemSceneTradeCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddGiveItemSceneTradeCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddGiveItemSceneTradeCmd, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddGiveItemSceneTradeCmd, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddGiveItemSceneTradeCmd, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddGiveItemSceneTradeCmd, itemdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddGiveItemSceneTradeCmd, background_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddGiveItemSceneTradeCmd, ret_),
  };
  AddGiveItemSceneTradeCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddGiveItemSceneTradeCmd_descriptor_,
      AddGiveItemSceneTradeCmd::default_instance_,
      AddGiveItemSceneTradeCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddGiveItemSceneTradeCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddGiveItemSceneTradeCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddGiveItemSceneTradeCmd));
  ReceiveGiveSceneTradeCmd_descriptor_ = file->message_type(16);
  static const int ReceiveGiveSceneTradeCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiveGiveSceneTradeCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiveGiveSceneTradeCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiveGiveSceneTradeCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiveGiveSceneTradeCmd, id_),
  };
  ReceiveGiveSceneTradeCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReceiveGiveSceneTradeCmd_descriptor_,
      ReceiveGiveSceneTradeCmd::default_instance_,
      ReceiveGiveSceneTradeCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiveGiveSceneTradeCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiveGiveSceneTradeCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReceiveGiveSceneTradeCmd));
  NtfGiveStatusSceneTradeCmd_descriptor_ = file->message_type(17);
  static const int NtfGiveStatusSceneTradeCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfGiveStatusSceneTradeCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfGiveStatusSceneTradeCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfGiveStatusSceneTradeCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfGiveStatusSceneTradeCmd, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfGiveStatusSceneTradeCmd, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfGiveStatusSceneTradeCmd, name_),
  };
  NtfGiveStatusSceneTradeCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NtfGiveStatusSceneTradeCmd_descriptor_,
      NtfGiveStatusSceneTradeCmd::default_instance_,
      NtfGiveStatusSceneTradeCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfGiveStatusSceneTradeCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfGiveStatusSceneTradeCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NtfGiveStatusSceneTradeCmd));
  ReduceQuotaSceneTradeCmd_descriptor_ = file->message_type(18);
  static const int ReduceQuotaSceneTradeCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReduceQuotaSceneTradeCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReduceQuotaSceneTradeCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReduceQuotaSceneTradeCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReduceQuotaSceneTradeCmd, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReduceQuotaSceneTradeCmd, quota_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReduceQuotaSceneTradeCmd, receivername_),
  };
  ReduceQuotaSceneTradeCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReduceQuotaSceneTradeCmd_descriptor_,
      ReduceQuotaSceneTradeCmd::default_instance_,
      ReduceQuotaSceneTradeCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReduceQuotaSceneTradeCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReduceQuotaSceneTradeCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReduceQuotaSceneTradeCmd));
  UnlockQuotaSceneTradeCmd_descriptor_ = file->message_type(19);
  static const int UnlockQuotaSceneTradeCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockQuotaSceneTradeCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockQuotaSceneTradeCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockQuotaSceneTradeCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockQuotaSceneTradeCmd, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockQuotaSceneTradeCmd, quota_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockQuotaSceneTradeCmd, receivername_),
  };
  UnlockQuotaSceneTradeCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnlockQuotaSceneTradeCmd_descriptor_,
      UnlockQuotaSceneTradeCmd::default_instance_,
      UnlockQuotaSceneTradeCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockQuotaSceneTradeCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockQuotaSceneTradeCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnlockQuotaSceneTradeCmd));
  ExtraPermissionSceneTradeCmd_descriptor_ = file->message_type(20);
  static const int ExtraPermissionSceneTradeCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraPermissionSceneTradeCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraPermissionSceneTradeCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraPermissionSceneTradeCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraPermissionSceneTradeCmd, permission_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraPermissionSceneTradeCmd, value_),
  };
  ExtraPermissionSceneTradeCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExtraPermissionSceneTradeCmd_descriptor_,
      ExtraPermissionSceneTradeCmd::default_instance_,
      ExtraPermissionSceneTradeCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraPermissionSceneTradeCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraPermissionSceneTradeCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExtraPermissionSceneTradeCmd));
  SecurityCmdSceneTradeCmd_descriptor_ = file->message_type(21);
  static const int SecurityCmdSceneTradeCmd_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityCmdSceneTradeCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityCmdSceneTradeCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityCmdSceneTradeCmd, valid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityCmdSceneTradeCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityCmdSceneTradeCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityCmdSceneTradeCmd, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityCmdSceneTradeCmd, refinelv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityCmdSceneTradeCmd, key_),
  };
  SecurityCmdSceneTradeCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SecurityCmdSceneTradeCmd_descriptor_,
      SecurityCmdSceneTradeCmd::default_instance_,
      SecurityCmdSceneTradeCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityCmdSceneTradeCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityCmdSceneTradeCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SecurityCmdSceneTradeCmd));
  TradePriceQueryTradeCmd_descriptor_ = file->message_type(22);
  static const int TradePriceQueryTradeCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradePriceQueryTradeCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradePriceQueryTradeCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradePriceQueryTradeCmd, batchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradePriceQueryTradeCmd, signup_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradePriceQueryTradeCmd, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradePriceQueryTradeCmd, itemdata_),
  };
  TradePriceQueryTradeCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TradePriceQueryTradeCmd_descriptor_,
      TradePriceQueryTradeCmd::default_instance_,
      TradePriceQueryTradeCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradePriceQueryTradeCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradePriceQueryTradeCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TradePriceQueryTradeCmd));
  BoothOpenTradeCmd_descriptor_ = file->message_type(23);
  static const int BoothOpenTradeCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoothOpenTradeCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoothOpenTradeCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoothOpenTradeCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoothOpenTradeCmd, open_),
  };
  BoothOpenTradeCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BoothOpenTradeCmd_descriptor_,
      BoothOpenTradeCmd::default_instance_,
      BoothOpenTradeCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoothOpenTradeCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoothOpenTradeCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BoothOpenTradeCmd));
  SceneTradeParam_descriptor_ = file->enum_type(0);
  RecordServerTradeParam_descriptor_ = file->enum_type(1);
  EAddItemType_descriptor_ = file->enum_type(2);
  EGiveStatus_descriptor_ = file->enum_type(3);
  EPermission_descriptor_ = file->enum_type(4);
  ESecurityType_descriptor_ = file->enum_type(5);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SceneTrade_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FrostItemListSceneTradeCmd_descriptor_, &FrostItemListSceneTradeCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReduceMoneyRecordTradeCmd_descriptor_, &ReduceMoneyRecordTradeCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddItemRecordTradeCmd_descriptor_, &AddItemRecordTradeCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddMoneyRecordTradeCmd_descriptor_, &AddMoneyRecordTradeCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReduceItemRecordTrade_descriptor_, &ReduceItemRecordTrade::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SessionToMeRecordTrade_descriptor_, &SessionToMeRecordTrade::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SessionForwardUsercmdTrade_descriptor_, &SessionForwardUsercmdTrade::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SessionForwardScenecmdTrade_descriptor_, &SessionForwardScenecmdTrade::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ForwardUserCmdToRecordCmd_descriptor_, &ForwardUserCmdToRecordCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldMsgCmd_descriptor_, &WorldMsgCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateTradeLogCmd_descriptor_, &UpdateTradeLogCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GiveCheckMoneySceneTradeCmd_descriptor_, &GiveCheckMoneySceneTradeCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SyncGiveItemSceneTradeCmd_descriptor_, &SyncGiveItemSceneTradeCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddGiveSceneTradeCmd_descriptor_, &AddGiveSceneTradeCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DelGiveSceneTradeCmd_descriptor_, &DelGiveSceneTradeCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddGiveItemSceneTradeCmd_descriptor_, &AddGiveItemSceneTradeCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReceiveGiveSceneTradeCmd_descriptor_, &ReceiveGiveSceneTradeCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NtfGiveStatusSceneTradeCmd_descriptor_, &NtfGiveStatusSceneTradeCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReduceQuotaSceneTradeCmd_descriptor_, &ReduceQuotaSceneTradeCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnlockQuotaSceneTradeCmd_descriptor_, &UnlockQuotaSceneTradeCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExtraPermissionSceneTradeCmd_descriptor_, &ExtraPermissionSceneTradeCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SecurityCmdSceneTradeCmd_descriptor_, &SecurityCmdSceneTradeCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TradePriceQueryTradeCmd_descriptor_, &TradePriceQueryTradeCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BoothOpenTradeCmd_descriptor_, &BoothOpenTradeCmd::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SceneTrade_2eproto() {
  delete FrostItemListSceneTradeCmd::default_instance_;
  delete FrostItemListSceneTradeCmd_reflection_;
  delete ReduceMoneyRecordTradeCmd::default_instance_;
  delete ReduceMoneyRecordTradeCmd_reflection_;
  delete AddItemRecordTradeCmd::default_instance_;
  delete AddItemRecordTradeCmd_reflection_;
  delete AddMoneyRecordTradeCmd::default_instance_;
  delete AddMoneyRecordTradeCmd_reflection_;
  delete ReduceItemRecordTrade::default_instance_;
  delete ReduceItemRecordTrade_reflection_;
  delete SessionToMeRecordTrade::default_instance_;
  delete SessionToMeRecordTrade_reflection_;
  delete SessionForwardUsercmdTrade::default_instance_;
  delete SessionForwardUsercmdTrade_reflection_;
  delete SessionForwardScenecmdTrade::default_instance_;
  delete SessionForwardScenecmdTrade_reflection_;
  delete ForwardUserCmdToRecordCmd::default_instance_;
  delete ForwardUserCmdToRecordCmd_reflection_;
  delete WorldMsgCmd::default_instance_;
  delete WorldMsgCmd_reflection_;
  delete UpdateTradeLogCmd::default_instance_;
  delete UpdateTradeLogCmd_reflection_;
  delete GiveCheckMoneySceneTradeCmd::default_instance_;
  delete GiveCheckMoneySceneTradeCmd_reflection_;
  delete SyncGiveItemSceneTradeCmd::default_instance_;
  delete SyncGiveItemSceneTradeCmd_reflection_;
  delete AddGiveSceneTradeCmd::default_instance_;
  delete AddGiveSceneTradeCmd_reflection_;
  delete DelGiveSceneTradeCmd::default_instance_;
  delete DelGiveSceneTradeCmd_reflection_;
  delete AddGiveItemSceneTradeCmd::default_instance_;
  delete AddGiveItemSceneTradeCmd_reflection_;
  delete ReceiveGiveSceneTradeCmd::default_instance_;
  delete ReceiveGiveSceneTradeCmd_reflection_;
  delete NtfGiveStatusSceneTradeCmd::default_instance_;
  delete NtfGiveStatusSceneTradeCmd_reflection_;
  delete ReduceQuotaSceneTradeCmd::default_instance_;
  delete ReduceQuotaSceneTradeCmd_reflection_;
  delete UnlockQuotaSceneTradeCmd::default_instance_;
  delete UnlockQuotaSceneTradeCmd_reflection_;
  delete ExtraPermissionSceneTradeCmd::default_instance_;
  delete ExtraPermissionSceneTradeCmd_reflection_;
  delete SecurityCmdSceneTradeCmd::default_instance_;
  delete SecurityCmdSceneTradeCmd_reflection_;
  delete TradePriceQueryTradeCmd::default_instance_;
  delete TradePriceQueryTradeCmd_reflection_;
  delete BoothOpenTradeCmd::default_instance_;
  delete BoothOpenTradeCmd_reflection_;
}

void protobuf_AddDesc_SceneTrade_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Cmd::protobuf_AddDesc_xCmd_2eproto();
  ::Cmd::protobuf_AddDesc_ProtoCommon_2eproto();
  ::Cmd::protobuf_AddDesc_SceneItem_2eproto();
  ::Cmd::protobuf_AddDesc_RecordTrade_2eproto();
  ::Cmd::protobuf_AddDesc_SceneMap_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020SceneTrade.proto\022\003Cmd\032\nxCmd.proto\032\021Pro"
    "toCommon.proto\032\017SceneItem.proto\032\021RecordT"
    "rade.proto\032\016SceneMap.proto\"\275\001\n\032FrostItem"
    "ListSceneTradeCmd\0224\n\003cmd\030\001 \001(\0162\014.Cmd.Com"
    "mand:\031SCENE_USER_TRADE_PROTOCMD\022F\n\005param"
    "\030\002 \001(\0162\024.Cmd.SceneTradeParam:!FROST_ITEM"
    "_LIST_SCENE_TRADE_PARAM\022!\n\005lists\030\003 \003(\0132\022"
    ".Cmd.FrostItemInfo\"\203\003\n\031ReduceMoneyRecord"
    "TradeCmd\022)\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\016TRA"
    "DE_PROTOCMD\022D\n\005param\030\002 \001(\0162\033.Cmd.RecordS"
    "erverTradeParam:\030REDUCE_MONEY_RECORDTRAD"
    "E\022\022\n\nmoney_type\030\003 \001(\r\022\023\n\013total_money\030\004 \001"
    "(\r\022!\n\003ret\030\005 \001(\0162\024.Cmd.ETRADE_RET_CODE\022\016\n"
    "\006charid\030\006 \001(\004\022)\n\titem_info\030\007 \001(\0132\026.Cmd.T"
    "radeItemBaseInfo\022\020\n\005quota\030\010 \001(\004:\0010\022/\n\004ty"
    "pe\030\t \001(\0162\017.Cmd.ETradeType:\020ETRADETYPE_TR"
    "ADE\022\024\n\trecord_id\030\n \001(\004:\0010\022\025\n\nlock_quota\030"
    "\013 \001(\004:\0010\"\370\001\n\025AddItemRecordTradeCmd\022)\n\003cm"
    "d\030\001 \001(\0162\014.Cmd.Command:\016TRADE_PROTOCMD\022@\n"
    "\005param\030\002 \001(\0162\033.Cmd.RecordServerTradePara"
    "m:\024ADD_ITEM_RECORDTRADE\022)\n\titem_info\030\003 \001"
    "(\0132\026.Cmd.TradeItemBaseInfo\022\016\n\006charid\030\004 \001"
    "(\004\022\"\n\007addtype\030\005 \001(\0162\021.Cmd.EAddItemType\022\023"
    "\n\013total_quota\030\006 \001(\004\"\233\002\n\026AddMoneyRecordTr"
    "adeCmd\022)\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\016TRADE"
    "_PROTOCMD\022A\n\005param\030\002 \001(\0162\033.Cmd.RecordSer"
    "verTradeParam:\025ADD_MONEY_RECORDTRADE\022\022\n\n"
    "money_type\030\003 \001(\r\022\023\n\013total_money\030\004 \001(\r\022\016\n"
    "\006charid\030\005 \001(\004\022\016\n\006itemid\030\006 \001(\r\022\r\n\005count\030\007"
    " \001(\r\022\r\n\005price\030\010 \001(\r\022\034\n\004type\030\t \001(\0162\016.Cmd."
    "EOperType\022\016\n\006money2\030\n \001(\r\"\205\003\n\025ReduceItem"
    "RecordTrade\022)\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\016"
    "TRADE_PROTOCMD\022C\n\005param\030\002 \001(\0162\033.Cmd.Reco"
    "rdServerTradeParam:\027REDUCE_ITEM_RECORDTR"
    "ADE\022)\n\titem_info\030\003 \001(\0132\026.Cmd.TradeItemBa"
    "seInfo\022\016\n\006charid\030\004 \001(\004\022!\n\003ret\030\005 \001(\0162\024.Cm"
    "d.ETRADE_RET_CODE\022\020\n\010boothfee\030\006 \001(\r\022\021\n\ti"
    "s_resell\030\007 \001(\010\022\017\n\007orderid\030\010 \001(\004\022/\n\004type\030"
    "\t \001(\0162\017.Cmd.ETradeType:\020ETRADETYPE_TRADE"
    "\022\024\n\014quota_unlock\030\n \001(\004\022\022\n\nquota_lock\030\013 \001"
    "(\004\022\r\n\005quota\030\014 \001(\004\"\265\001\n\026SessionToMeRecordT"
    "rade\022)\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\016TRADE_P"
    "ROTOCMD\022E\n\005param\030\002 \001(\0162\033.Cmd.RecordServe"
    "rTradeParam:\031SESSION_TO_ME_RECORDTRADE\022\016"
    "\n\006charid\030\003 \001(\004\022\014\n\004data\030\004 \001(\014\022\013\n\003len\030\005 \001("
    "\r\"\315\001\n\032SessionForwardUsercmdTrade\022)\n\003cmd\030"
    "\001 \001(\0162\014.Cmd.Command:\016TRADE_PROTOCMD\022I\n\005p"
    "aram\030\002 \001(\0162\033.Cmd.RecordServerTradeParam:"
    "\035SESSION_FORWARD_USERCMD_TRADE\022\016\n\006charid"
    "\030\003 \001(\004\022\016\n\006zoneid\030\004 \001(\r\022\014\n\004data\030\005 \001(\014\022\013\n\003"
    "len\030\006 \001(\r\"\335\001\n\033SessionForwardScenecmdTrad"
    "e\022)\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\016TRADE_PROT"
    "OCMD\022J\n\005param\030\002 \001(\0162\033.Cmd.RecordServerTr"
    "adeParam:\036SESSION_FORWARD_SCENECMD_TRADE"
    "\022\016\n\006charid\030\003 \001(\004\022\016\n\006zoneid\030\004 \001(\r\022\014\n\004name"
    "\030\005 \001(\t\022\014\n\004data\030\006 \001(\014\022\013\n\003len\030\007 \001(\r\"\270\001\n\031Fo"
    "rwardUserCmdToRecordCmd\022)\n\003cmd\030\001 \001(\0162\014.C"
    "md.Command:\016TRADE_PROTOCMD\022E\n\005param\030\002 \001("
    "\0162\033.Cmd.RecordServerTradeParam:\031FORWARD_"
    "USERCMD_TO_RECORD\022\016\n\006charid\030\003 \001(\004\022\014\n\004dat"
    "a\030\004 \001(\014\022\013\n\003len\030\005 \001(\r\"\212\001\n\013WorldMsgCmd\022)\n\003"
    "cmd\030\001 \001(\0162\014.Cmd.Command:\016TRADE_PROTOCMD\022"
    "5\n\005param\030\002 \001(\0162\033.Cmd.RecordServerTradePa"
    "ram:\tWORLD_MSG\022\014\n\004data\030\003 \001(\014\022\013\n\003len\030\004 \001("
    "\r\"\370\001\n\021UpdateTradeLogCmd\022)\n\003cmd\030\001 \001(\0162\014.C"
    "md.Command:\016TRADE_PROTOCMD\022G\n\005param\030\002 \001("
    "\0162\033.Cmd.RecordServerTradeParam:\033UPDATE_T"
    "RADELOG_RECORDTRADE\022\016\n\006charid\030\003 \001(\004\022\034\n\004t"
    "ype\030\004 \001(\0162\016.Cmd.EOperType\022\n\n\002id\030\005 \001(\004\0225\n"
    "\ntrade_type\030\006 \001(\0162\017.Cmd.ETradeType:\020ETRA"
    "DETYPE_TRADE\"\363\002\n\033GiveCheckMoneySceneTrad"
    "eCmd\022)\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\016TRADE_P"
    "ROTOCMD\022H\n\005param\030\002 \001(\0162\033.Cmd.RecordServe"
    "rTradeParam:\034GIVE_CHECK_MONEY_RECORDTRAD"
    "E\022\016\n\006charid\030\003 \001(\004\022\034\n\004type\030\004 \001(\0162\016.Cmd.EO"
    "perType\022\n\n\002id\030\005 \001(\004\022\020\n\010friendid\030\006 \001(\004\022\017\n"
    "\007content\030\007 \001(\t\022\021\n\tanonymous\030\010 \001(\010\022\r\n\005quo"
    "ta\030\t \001(\004\022\013\n\003fee\030\n \001(\004\022\022\n\nbackground\030\013 \001("
    "\r\022\013\n\003ret\030\014 \001(\010\022\037\n\010itemdata\030\r \001(\0132\r.Cmd.I"
    "temData\022\021\n\tfromtrade\030\016 \001(\010\"\341\001\n\031SyncGiveI"
    "temSceneTradeCmd\022)\n\003cmd\030\001 \001(\0162\014.Cmd.Comm"
    "and:\016TRADE_PROTOCMD\022F\n\005param\030\002 \001(\0162\033.Cmd"
    ".RecordServerTradeParam:\032SYNC_GIVE_ITEM_"
    "RECORDTRADE\022\016\n\006charid\030\003 \001(\004\022#\n\010iteminfo\030"
    "\004 \003(\0132\021.Cmd.GiveItemInfo\022\034\n\004type\030\005 \001(\0162\016"
    ".Cmd.EGiveType\"\270\001\n\024AddGiveSceneTradeCmd\022"
    ")\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\016TRADE_PROTOC"
    "MD\022@\n\005param\030\002 \001(\0162\033.Cmd.RecordServerTrad"
    "eParam:\024ADD_GIVE_RECORDTRADE\022\016\n\006charid\030\003"
    " \001(\004\022#\n\010iteminfo\030\004 \001(\0132\021.Cmd.GiveItemInf"
    "o\"\237\001\n\024DelGiveSceneTradeCmd\022)\n\003cmd\030\001 \001(\0162"
    "\014.Cmd.Command:\016TRADE_PROTOCMD\022@\n\005param\030\002"
    " \001(\0162\033.Cmd.RecordServerTradeParam:\024DEL_G"
    "IVE_RECORDTRADE\022\016\n\006charid\030\003 \001(\004\022\n\n\002id\030\004 "
    "\001(\004\"\211\002\n\030AddGiveItemSceneTradeCmd\022)\n\003cmd\030"
    "\001 \001(\0162\014.Cmd.Command:\016TRADE_PROTOCMD\022E\n\005p"
    "aram\030\002 \001(\0162\033.Cmd.RecordServerTradeParam:"
    "\031ADD_GIVE_ITEM_RECORDTRADE\022\016\n\006charid\030\003 \001"
    "(\004\022\n\n\002id\030\004 \001(\004\022\016\n\006itemid\030\005 \001(\r\022\r\n\005count\030"
    "\006 \001(\r\022\037\n\010itemData\030\007 \001(\0132\r.Cmd.ItemData\022\022"
    "\n\nbackground\030\010 \001(\r\022\013\n\003ret\030\t \001(\010\"\247\001\n\030Rece"
    "iveGiveSceneTradeCmd\022)\n\003cmd\030\001 \001(\0162\014.Cmd."
    "Command:\016TRADE_PROTOCMD\022D\n\005param\030\002 \001(\0162\033"
    ".Cmd.RecordServerTradeParam:\030RECEIVE_GIV"
    "E_RECORDTRADE\022\016\n\006charid\030\003 \001(\004\022\n\n\002id\030\004 \001("
    "\004\"\334\001\n\032NtfGiveStatusSceneTradeCmd\022)\n\003cmd\030"
    "\001 \001(\0162\014.Cmd.Command:\016TRADE_PROTOCMD\022G\n\005p"
    "aram\030\002 \001(\0162\033.Cmd.RecordServerTradeParam:"
    "\033NTF_GIVE_STATUS_RECORDTRADE\022\016\n\006charid\030\003"
    " \001(\004\022\n\n\002id\030\004 \001(\004\022 \n\006status\030\005 \001(\0162\020.Cmd.E"
    "GiveStatus\022\014\n\004name\030\006 \001(\t\"\314\001\n\030ReduceQuota"
    "SceneTradeCmd\022)\n\003cmd\030\001 \001(\0162\014.Cmd.Command"
    ":\016TRADE_PROTOCMD\022D\n\005param\030\002 \001(\0162\033.Cmd.Re"
    "cordServerTradeParam:\030REDUCE_QUOTA_RECOR"
    "DTRADE\022\016\n\006charid\030\003 \001(\004\022\n\n\002id\030\004 \001(\004\022\r\n\005qu"
    "ota\030\005 \001(\004\022\024\n\014receivername\030\006 \001(\t\"\314\001\n\030Unlo"
    "ckQuotaSceneTradeCmd\022)\n\003cmd\030\001 \001(\0162\014.Cmd."
    "Command:\016TRADE_PROTOCMD\022D\n\005param\030\002 \001(\0162\033"
    ".Cmd.RecordServerTradeParam:\030UNLOCK_QUOT"
    "A_RECORDTRADE\022\016\n\006charid\030\003 \001(\004\022\n\n\002id\030\004 \001("
    "\004\022\r\n\005quota\030\005 \001(\004\022\024\n\014receivername\030\006 \001(\t\"\330"
    "\001\n\034ExtraPermissionSceneTradeCmd\022)\n\003cmd\030\001"
    " \001(\0162\014.Cmd.Command:\016TRADE_PROTOCMD\022H\n\005pa"
    "ram\030\002 \001(\0162\033.Cmd.RecordServerTradeParam:\034"
    "EXTRA_PERMISSION_RECORDTRADE\022\016\n\006charid\030\003"
    " \001(\004\022$\n\npermission\030\004 \001(\0162\020.Cmd.EPermissi"
    "on\022\r\n\005value\030\005 \001(\004\"\373\001\n\030SecurityCmdSceneTr"
    "adeCmd\022)\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\016TRADE"
    "_PROTOCMD\022D\n\005param\030\002 \001(\0162\033.Cmd.RecordSer"
    "verTradeParam:\030SECURITY_CMD_RECORDTRADE\022"
    "\r\n\005valid\030\003 \001(\010\022 \n\004type\030\004 \001(\0162\022.Cmd.ESecu"
    "rityType\022\016\n\006charid\030\005 \001(\004\022\016\n\006itemid\030\006 \001(\r"
    "\022\020\n\010refinelv\030\007 \001(\005\022\013\n\003key\030\010 \001(\004\"\343\001\n\027Trad"
    "ePriceQueryTradeCmd\022)\n\003cmd\030\001 \001(\0162\014.Cmd.C"
    "ommand:\016TRADE_PROTOCMD\022I\n\005param\030\002 \001(\0162\033."
    "Cmd.RecordServerTradeParam:\035TRADE_PRICE_"
    "QUERY_RECORDTRADE\022\017\n\007batchid\030\003 \001(\004\022\021\n\tsi"
    "gnup_id\030\004 \001(\004\022\r\n\005price\030\005 \001(\004\022\037\n\010itemdata"
    "\030\006 \001(\0132\r.Cmd.ItemData\"\243\001\n\021BoothOpenTrade"
    "Cmd\022)\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\016TRADE_PR"
    "OTOCMD\022B\n\005param\030\002 \001(\0162\033.Cmd.RecordServer"
    "TradeParam:\026BOOTH_OPEN_RECORDTRADE\022\016\n\006ch"
    "arid\030\003 \001(\004\022\017\n\004open\030\004 \001(\r:\0011*8\n\017SceneTrad"
    "eParam\022%\n!FROST_ITEM_LIST_SCENE_TRADE_PA"
    "RAM\020\001*\314\005\n\026RecordServerTradeParam\022\035\n\031SESS"
    "ION_TO_ME_RECORDTRADE\020\001\022\034\n\030REDUCE_MONEY_"
    "RECORDTRADE\020\003\022\030\n\024ADD_ITEM_RECORDTRADE\020\004\022"
    "\031\n\025ADD_MONEY_RECORDTRADE\020\005\022\033\n\027REDUCE_ITE"
    "M_RECORDTRADE\020\006\022!\n\035SESSION_FORWARD_USERC"
    "MD_TRADE\020\007\022\"\n\036SESSION_FORWARD_SCENECMD_T"
    "RADE\020\010\022\035\n\031FORWARD_USERCMD_TO_RECORD\020\t\022\r\n"
    "\tWORLD_MSG\020\n\022\037\n\033UPDATE_TRADELOG_RECORDTR"
    "ADE\020\013\022 \n\034GIVE_CHECK_MONEY_RECORDTRADE\020\014\022"
    "\036\n\032SYNC_GIVE_ITEM_RECORDTRADE\020\r\022\030\n\024ADD_G"
    "IVE_RECORDTRADE\020\016\022\030\n\024DEL_GIVE_RECORDTRAD"
    "E\020\017\022\034\n\030RECEIVE_GIVE_RECORDTRADE\020\020\022\035\n\031ADD"
    "_GIVE_ITEM_RECORDTRADE\020\021\022\037\n\033NTF_GIVE_STA"
    "TUS_RECORDTRADE\020\022\022\034\n\030REDUCE_QUOTA_RECORD"
    "TRADE\020\023\022 \n\034EXTRA_PERMISSION_RECORDTRADE\020"
    "\024\022\034\n\030SECURITY_CMD_RECORDTRADE\020\025\022!\n\035TRADE"
    "_PRICE_QUERY_RECORDTRADE\020\026\022\032\n\026BOOTH_OPEN"
    "_RECORDTRADE\020\027\022\034\n\030UNLOCK_QUOTA_RECORDTRA"
    "DE\020\030*;\n\014EAddItemType\022\023\n\017EADDITEMTYP_BUY\020"
    "\001\022\026\n\022EADDITEMTYP_RETURN\020\002*=\n\013EGiveStatus"
    "\022\026\n\022EGiveStatus_Accept\020\001\022\026\n\022EGiveStatus_"
    "Refuse\020\002*\210\001\n\013EPermission\022!\n\035EPERMISSION_"
    "MAX_PENDING_LIMIT\020\001\022\036\n\032EPERMISSION_RETUR"
    "N_PERCENT\020\002\022\025\n\021EPERMISSION_QUOTA\020\003\022\037\n\033EP"
    "ERMISSION_MAX_BOOTH_LIMIT\020\004*U\n\rESecurity"
    "Type\022\025\n\021ESECURITYTYPE_ALL\020\000\022\026\n\022ESECURITY"
    "TYPE_SELL\020\001\022\025\n\021ESECURITYTYPE_BUY\020\002", 6834);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SceneTrade.proto", &protobuf_RegisterTypes);
  FrostItemListSceneTradeCmd::default_instance_ = new FrostItemListSceneTradeCmd();
  ReduceMoneyRecordTradeCmd::default_instance_ = new ReduceMoneyRecordTradeCmd();
  AddItemRecordTradeCmd::default_instance_ = new AddItemRecordTradeCmd();
  AddMoneyRecordTradeCmd::default_instance_ = new AddMoneyRecordTradeCmd();
  ReduceItemRecordTrade::default_instance_ = new ReduceItemRecordTrade();
  SessionToMeRecordTrade::default_instance_ = new SessionToMeRecordTrade();
  SessionForwardUsercmdTrade::default_instance_ = new SessionForwardUsercmdTrade();
  SessionForwardScenecmdTrade::default_instance_ = new SessionForwardScenecmdTrade();
  ForwardUserCmdToRecordCmd::default_instance_ = new ForwardUserCmdToRecordCmd();
  WorldMsgCmd::default_instance_ = new WorldMsgCmd();
  UpdateTradeLogCmd::default_instance_ = new UpdateTradeLogCmd();
  GiveCheckMoneySceneTradeCmd::default_instance_ = new GiveCheckMoneySceneTradeCmd();
  SyncGiveItemSceneTradeCmd::default_instance_ = new SyncGiveItemSceneTradeCmd();
  AddGiveSceneTradeCmd::default_instance_ = new AddGiveSceneTradeCmd();
  DelGiveSceneTradeCmd::default_instance_ = new DelGiveSceneTradeCmd();
  AddGiveItemSceneTradeCmd::default_instance_ = new AddGiveItemSceneTradeCmd();
  ReceiveGiveSceneTradeCmd::default_instance_ = new ReceiveGiveSceneTradeCmd();
  NtfGiveStatusSceneTradeCmd::default_instance_ = new NtfGiveStatusSceneTradeCmd();
  ReduceQuotaSceneTradeCmd::default_instance_ = new ReduceQuotaSceneTradeCmd();
  UnlockQuotaSceneTradeCmd::default_instance_ = new UnlockQuotaSceneTradeCmd();
  ExtraPermissionSceneTradeCmd::default_instance_ = new ExtraPermissionSceneTradeCmd();
  SecurityCmdSceneTradeCmd::default_instance_ = new SecurityCmdSceneTradeCmd();
  TradePriceQueryTradeCmd::default_instance_ = new TradePriceQueryTradeCmd();
  BoothOpenTradeCmd::default_instance_ = new BoothOpenTradeCmd();
  FrostItemListSceneTradeCmd::default_instance_->InitAsDefaultInstance();
  ReduceMoneyRecordTradeCmd::default_instance_->InitAsDefaultInstance();
  AddItemRecordTradeCmd::default_instance_->InitAsDefaultInstance();
  AddMoneyRecordTradeCmd::default_instance_->InitAsDefaultInstance();
  ReduceItemRecordTrade::default_instance_->InitAsDefaultInstance();
  SessionToMeRecordTrade::default_instance_->InitAsDefaultInstance();
  SessionForwardUsercmdTrade::default_instance_->InitAsDefaultInstance();
  SessionForwardScenecmdTrade::default_instance_->InitAsDefaultInstance();
  ForwardUserCmdToRecordCmd::default_instance_->InitAsDefaultInstance();
  WorldMsgCmd::default_instance_->InitAsDefaultInstance();
  UpdateTradeLogCmd::default_instance_->InitAsDefaultInstance();
  GiveCheckMoneySceneTradeCmd::default_instance_->InitAsDefaultInstance();
  SyncGiveItemSceneTradeCmd::default_instance_->InitAsDefaultInstance();
  AddGiveSceneTradeCmd::default_instance_->InitAsDefaultInstance();
  DelGiveSceneTradeCmd::default_instance_->InitAsDefaultInstance();
  AddGiveItemSceneTradeCmd::default_instance_->InitAsDefaultInstance();
  ReceiveGiveSceneTradeCmd::default_instance_->InitAsDefaultInstance();
  NtfGiveStatusSceneTradeCmd::default_instance_->InitAsDefaultInstance();
  ReduceQuotaSceneTradeCmd::default_instance_->InitAsDefaultInstance();
  UnlockQuotaSceneTradeCmd::default_instance_->InitAsDefaultInstance();
  ExtraPermissionSceneTradeCmd::default_instance_->InitAsDefaultInstance();
  SecurityCmdSceneTradeCmd::default_instance_->InitAsDefaultInstance();
  TradePriceQueryTradeCmd::default_instance_->InitAsDefaultInstance();
  BoothOpenTradeCmd::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SceneTrade_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SceneTrade_2eproto {
  StaticDescriptorInitializer_SceneTrade_2eproto() {
    protobuf_AddDesc_SceneTrade_2eproto();
  }
} static_descriptor_initializer_SceneTrade_2eproto_;
const ::google::protobuf::EnumDescriptor* SceneTradeParam_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SceneTradeParam_descriptor_;
}
bool SceneTradeParam_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RecordServerTradeParam_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecordServerTradeParam_descriptor_;
}
bool RecordServerTradeParam_IsValid(int value) {
  switch(value) {
    case 1:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EAddItemType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EAddItemType_descriptor_;
}
bool EAddItemType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EGiveStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EGiveStatus_descriptor_;
}
bool EGiveStatus_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EPermission_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EPermission_descriptor_;
}
bool EPermission_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ESecurityType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ESecurityType_descriptor_;
}
bool ESecurityType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int FrostItemListSceneTradeCmd::kCmdFieldNumber;
const int FrostItemListSceneTradeCmd::kParamFieldNumber;
const int FrostItemListSceneTradeCmd::kListsFieldNumber;
#endif  // !_MSC_VER

FrostItemListSceneTradeCmd::FrostItemListSceneTradeCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.FrostItemListSceneTradeCmd)
}

void FrostItemListSceneTradeCmd::InitAsDefaultInstance() {
}

FrostItemListSceneTradeCmd::FrostItemListSceneTradeCmd(const FrostItemListSceneTradeCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.FrostItemListSceneTradeCmd)
}

void FrostItemListSceneTradeCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 26;
  param_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FrostItemListSceneTradeCmd::~FrostItemListSceneTradeCmd() {
  // @@protoc_insertion_point(destructor:Cmd.FrostItemListSceneTradeCmd)
  SharedDtor();
}

void FrostItemListSceneTradeCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FrostItemListSceneTradeCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FrostItemListSceneTradeCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FrostItemListSceneTradeCmd_descriptor_;
}

const FrostItemListSceneTradeCmd& FrostItemListSceneTradeCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneTrade_2eproto();
  return *default_instance_;
}

FrostItemListSceneTradeCmd* FrostItemListSceneTradeCmd::default_instance_ = NULL;

FrostItemListSceneTradeCmd* FrostItemListSceneTradeCmd::New() const {
  return new FrostItemListSceneTradeCmd;
}

void FrostItemListSceneTradeCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 26;
    param_ = 1;
  }
  lists_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FrostItemListSceneTradeCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.FrostItemListSceneTradeCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_TRADE_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SceneTradeParam param = 2 [default = FROST_ITEM_LIST_SCENE_TRADE_PARAM];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SceneTradeParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SceneTradeParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_lists;
        break;
      }

      // repeated .Cmd.FrostItemInfo lists = 3;
      case 3: {
        if (tag == 26) {
         parse_lists:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lists()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_lists;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.FrostItemListSceneTradeCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.FrostItemListSceneTradeCmd)
  return false;
#undef DO_
}

void FrostItemListSceneTradeCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.FrostItemListSceneTradeCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_TRADE_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SceneTradeParam param = 2 [default = FROST_ITEM_LIST_SCENE_TRADE_PARAM];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.FrostItemInfo lists = 3;
  for (int i = 0; i < this->lists_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->lists(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.FrostItemListSceneTradeCmd)
}

::google::protobuf::uint8* FrostItemListSceneTradeCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.FrostItemListSceneTradeCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_TRADE_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SceneTradeParam param = 2 [default = FROST_ITEM_LIST_SCENE_TRADE_PARAM];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.FrostItemInfo lists = 3;
  for (int i = 0; i < this->lists_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->lists(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.FrostItemListSceneTradeCmd)
  return target;
}

int FrostItemListSceneTradeCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_TRADE_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SceneTradeParam param = 2 [default = FROST_ITEM_LIST_SCENE_TRADE_PARAM];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.FrostItemInfo lists = 3;
  total_size += 1 * this->lists_size();
  for (int i = 0; i < this->lists_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lists(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FrostItemListSceneTradeCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FrostItemListSceneTradeCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FrostItemListSceneTradeCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FrostItemListSceneTradeCmd::MergeFrom(const FrostItemListSceneTradeCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  lists_.MergeFrom(from.lists_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FrostItemListSceneTradeCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrostItemListSceneTradeCmd::CopyFrom(const FrostItemListSceneTradeCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrostItemListSceneTradeCmd::IsInitialized() const {

  return true;
}

void FrostItemListSceneTradeCmd::Swap(FrostItemListSceneTradeCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    lists_.Swap(&other->lists_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FrostItemListSceneTradeCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FrostItemListSceneTradeCmd_descriptor_;
  metadata.reflection = FrostItemListSceneTradeCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReduceMoneyRecordTradeCmd::kCmdFieldNumber;
const int ReduceMoneyRecordTradeCmd::kParamFieldNumber;
const int ReduceMoneyRecordTradeCmd::kMoneyTypeFieldNumber;
const int ReduceMoneyRecordTradeCmd::kTotalMoneyFieldNumber;
const int ReduceMoneyRecordTradeCmd::kRetFieldNumber;
const int ReduceMoneyRecordTradeCmd::kCharidFieldNumber;
const int ReduceMoneyRecordTradeCmd::kItemInfoFieldNumber;
const int ReduceMoneyRecordTradeCmd::kQuotaFieldNumber;
const int ReduceMoneyRecordTradeCmd::kTypeFieldNumber;
const int ReduceMoneyRecordTradeCmd::kRecordIdFieldNumber;
const int ReduceMoneyRecordTradeCmd::kLockQuotaFieldNumber;
#endif  // !_MSC_VER

ReduceMoneyRecordTradeCmd::ReduceMoneyRecordTradeCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ReduceMoneyRecordTradeCmd)
}

void ReduceMoneyRecordTradeCmd::InitAsDefaultInstance() {
  item_info_ = const_cast< ::Cmd::TradeItemBaseInfo*>(&::Cmd::TradeItemBaseInfo::default_instance());
}

ReduceMoneyRecordTradeCmd::ReduceMoneyRecordTradeCmd(const ReduceMoneyRecordTradeCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ReduceMoneyRecordTradeCmd)
}

void ReduceMoneyRecordTradeCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 201;
  param_ = 3;
  money_type_ = 0u;
  total_money_ = 0u;
  ret_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  item_info_ = NULL;
  quota_ = GOOGLE_ULONGLONG(0);
  type_ = 1;
  record_id_ = GOOGLE_ULONGLONG(0);
  lock_quota_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReduceMoneyRecordTradeCmd::~ReduceMoneyRecordTradeCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ReduceMoneyRecordTradeCmd)
  SharedDtor();
}

void ReduceMoneyRecordTradeCmd::SharedDtor() {
  if (this != default_instance_) {
    delete item_info_;
  }
}

void ReduceMoneyRecordTradeCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReduceMoneyRecordTradeCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReduceMoneyRecordTradeCmd_descriptor_;
}

const ReduceMoneyRecordTradeCmd& ReduceMoneyRecordTradeCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneTrade_2eproto();
  return *default_instance_;
}

ReduceMoneyRecordTradeCmd* ReduceMoneyRecordTradeCmd::default_instance_ = NULL;

ReduceMoneyRecordTradeCmd* ReduceMoneyRecordTradeCmd::New() const {
  return new ReduceMoneyRecordTradeCmd;
}

void ReduceMoneyRecordTradeCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReduceMoneyRecordTradeCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(money_type_, charid_);
    cmd_ = 201;
    param_ = 3;
    ret_ = 0;
    if (has_item_info()) {
      if (item_info_ != NULL) item_info_->::Cmd::TradeItemBaseInfo::Clear();
    }
    quota_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & 1792) {
    ZR_(record_id_, lock_quota_);
    type_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReduceMoneyRecordTradeCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ReduceMoneyRecordTradeCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.RecordServerTradeParam param = 2 [default = REDUCE_MONEY_RECORDTRADE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::RecordServerTradeParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::RecordServerTradeParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_money_type;
        break;
      }

      // optional uint32 money_type = 3;
      case 3: {
        if (tag == 24) {
         parse_money_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &money_type_)));
          set_has_money_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_total_money;
        break;
      }

      // optional uint32 total_money = 4;
      case 4: {
        if (tag == 32) {
         parse_total_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_money_)));
          set_has_total_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ret;
        break;
      }

      // optional .Cmd.ETRADE_RET_CODE ret = 5;
      case 5: {
        if (tag == 40) {
         parse_ret:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ETRADE_RET_CODE_IsValid(value)) {
            set_ret(static_cast< ::Cmd::ETRADE_RET_CODE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 6;
      case 6: {
        if (tag == 48) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_item_info;
        break;
      }

      // optional .Cmd.TradeItemBaseInfo item_info = 7;
      case 7: {
        if (tag == 58) {
         parse_item_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_quota;
        break;
      }

      // optional uint64 quota = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_quota:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &quota_)));
          set_has_quota();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_type;
        break;
      }

      // optional .Cmd.ETradeType type = 9 [default = ETRADETYPE_TRADE];
      case 9: {
        if (tag == 72) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ETradeType_IsValid(value)) {
            set_type(static_cast< ::Cmd::ETradeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_record_id;
        break;
      }

      // optional uint64 record_id = 10 [default = 0];
      case 10: {
        if (tag == 80) {
         parse_record_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &record_id_)));
          set_has_record_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_lock_quota;
        break;
      }

      // optional uint64 lock_quota = 11 [default = 0];
      case 11: {
        if (tag == 88) {
         parse_lock_quota:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lock_quota_)));
          set_has_lock_quota();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ReduceMoneyRecordTradeCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ReduceMoneyRecordTradeCmd)
  return false;
#undef DO_
}

void ReduceMoneyRecordTradeCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ReduceMoneyRecordTradeCmd)
  // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.RecordServerTradeParam param = 2 [default = REDUCE_MONEY_RECORDTRADE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 money_type = 3;
  if (has_money_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->money_type(), output);
  }

  // optional uint32 total_money = 4;
  if (has_total_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->total_money(), output);
  }

  // optional .Cmd.ETRADE_RET_CODE ret = 5;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->ret(), output);
  }

  // optional uint64 charid = 6;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->charid(), output);
  }

  // optional .Cmd.TradeItemBaseInfo item_info = 7;
  if (has_item_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->item_info(), output);
  }

  // optional uint64 quota = 8 [default = 0];
  if (has_quota()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->quota(), output);
  }

  // optional .Cmd.ETradeType type = 9 [default = ETRADETYPE_TRADE];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->type(), output);
  }

  // optional uint64 record_id = 10 [default = 0];
  if (has_record_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->record_id(), output);
  }

  // optional uint64 lock_quota = 11 [default = 0];
  if (has_lock_quota()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->lock_quota(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ReduceMoneyRecordTradeCmd)
}

::google::protobuf::uint8* ReduceMoneyRecordTradeCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ReduceMoneyRecordTradeCmd)
  // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.RecordServerTradeParam param = 2 [default = REDUCE_MONEY_RECORDTRADE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 money_type = 3;
  if (has_money_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->money_type(), target);
  }

  // optional uint32 total_money = 4;
  if (has_total_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->total_money(), target);
  }

  // optional .Cmd.ETRADE_RET_CODE ret = 5;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->ret(), target);
  }

  // optional uint64 charid = 6;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->charid(), target);
  }

  // optional .Cmd.TradeItemBaseInfo item_info = 7;
  if (has_item_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->item_info(), target);
  }

  // optional uint64 quota = 8 [default = 0];
  if (has_quota()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->quota(), target);
  }

  // optional .Cmd.ETradeType type = 9 [default = ETRADETYPE_TRADE];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->type(), target);
  }

  // optional uint64 record_id = 10 [default = 0];
  if (has_record_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->record_id(), target);
  }

  // optional uint64 lock_quota = 11 [default = 0];
  if (has_lock_quota()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->lock_quota(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ReduceMoneyRecordTradeCmd)
  return target;
}

int ReduceMoneyRecordTradeCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.RecordServerTradeParam param = 2 [default = REDUCE_MONEY_RECORDTRADE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 money_type = 3;
    if (has_money_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->money_type());
    }

    // optional uint32 total_money = 4;
    if (has_total_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_money());
    }

    // optional .Cmd.ETRADE_RET_CODE ret = 5;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

    // optional uint64 charid = 6;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional .Cmd.TradeItemBaseInfo item_info = 7;
    if (has_item_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item_info());
    }

    // optional uint64 quota = 8 [default = 0];
    if (has_quota()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->quota());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .Cmd.ETradeType type = 9 [default = ETRADETYPE_TRADE];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint64 record_id = 10 [default = 0];
    if (has_record_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->record_id());
    }

    // optional uint64 lock_quota = 11 [default = 0];
    if (has_lock_quota()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lock_quota());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReduceMoneyRecordTradeCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReduceMoneyRecordTradeCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReduceMoneyRecordTradeCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReduceMoneyRecordTradeCmd::MergeFrom(const ReduceMoneyRecordTradeCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_money_type()) {
      set_money_type(from.money_type());
    }
    if (from.has_total_money()) {
      set_total_money(from.total_money());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_item_info()) {
      mutable_item_info()->::Cmd::TradeItemBaseInfo::MergeFrom(from.item_info());
    }
    if (from.has_quota()) {
      set_quota(from.quota());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_record_id()) {
      set_record_id(from.record_id());
    }
    if (from.has_lock_quota()) {
      set_lock_quota(from.lock_quota());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReduceMoneyRecordTradeCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReduceMoneyRecordTradeCmd::CopyFrom(const ReduceMoneyRecordTradeCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReduceMoneyRecordTradeCmd::IsInitialized() const {

  return true;
}

void ReduceMoneyRecordTradeCmd::Swap(ReduceMoneyRecordTradeCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(money_type_, other->money_type_);
    std::swap(total_money_, other->total_money_);
    std::swap(ret_, other->ret_);
    std::swap(charid_, other->charid_);
    std::swap(item_info_, other->item_info_);
    std::swap(quota_, other->quota_);
    std::swap(type_, other->type_);
    std::swap(record_id_, other->record_id_);
    std::swap(lock_quota_, other->lock_quota_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReduceMoneyRecordTradeCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReduceMoneyRecordTradeCmd_descriptor_;
  metadata.reflection = ReduceMoneyRecordTradeCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddItemRecordTradeCmd::kCmdFieldNumber;
const int AddItemRecordTradeCmd::kParamFieldNumber;
const int AddItemRecordTradeCmd::kItemInfoFieldNumber;
const int AddItemRecordTradeCmd::kCharidFieldNumber;
const int AddItemRecordTradeCmd::kAddtypeFieldNumber;
const int AddItemRecordTradeCmd::kTotalQuotaFieldNumber;
#endif  // !_MSC_VER

AddItemRecordTradeCmd::AddItemRecordTradeCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.AddItemRecordTradeCmd)
}

void AddItemRecordTradeCmd::InitAsDefaultInstance() {
  item_info_ = const_cast< ::Cmd::TradeItemBaseInfo*>(&::Cmd::TradeItemBaseInfo::default_instance());
}

AddItemRecordTradeCmd::AddItemRecordTradeCmd(const AddItemRecordTradeCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.AddItemRecordTradeCmd)
}

void AddItemRecordTradeCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 201;
  param_ = 4;
  item_info_ = NULL;
  charid_ = GOOGLE_ULONGLONG(0);
  addtype_ = 1;
  total_quota_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddItemRecordTradeCmd::~AddItemRecordTradeCmd() {
  // @@protoc_insertion_point(destructor:Cmd.AddItemRecordTradeCmd)
  SharedDtor();
}

void AddItemRecordTradeCmd::SharedDtor() {
  if (this != default_instance_) {
    delete item_info_;
  }
}

void AddItemRecordTradeCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddItemRecordTradeCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddItemRecordTradeCmd_descriptor_;
}

const AddItemRecordTradeCmd& AddItemRecordTradeCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneTrade_2eproto();
  return *default_instance_;
}

AddItemRecordTradeCmd* AddItemRecordTradeCmd::default_instance_ = NULL;

AddItemRecordTradeCmd* AddItemRecordTradeCmd::New() const {
  return new AddItemRecordTradeCmd;
}

void AddItemRecordTradeCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AddItemRecordTradeCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(charid_, total_quota_);
    cmd_ = 201;
    param_ = 4;
    if (has_item_info()) {
      if (item_info_ != NULL) item_info_->::Cmd::TradeItemBaseInfo::Clear();
    }
    addtype_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddItemRecordTradeCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.AddItemRecordTradeCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.RecordServerTradeParam param = 2 [default = ADD_ITEM_RECORDTRADE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::RecordServerTradeParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::RecordServerTradeParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_item_info;
        break;
      }

      // optional .Cmd.TradeItemBaseInfo item_info = 3;
      case 3: {
        if (tag == 26) {
         parse_item_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 4;
      case 4: {
        if (tag == 32) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_addtype;
        break;
      }

      // optional .Cmd.EAddItemType addtype = 5;
      case 5: {
        if (tag == 40) {
         parse_addtype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EAddItemType_IsValid(value)) {
            set_addtype(static_cast< ::Cmd::EAddItemType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_total_quota;
        break;
      }

      // optional uint64 total_quota = 6;
      case 6: {
        if (tag == 48) {
         parse_total_quota:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_quota_)));
          set_has_total_quota();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.AddItemRecordTradeCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.AddItemRecordTradeCmd)
  return false;
#undef DO_
}

void AddItemRecordTradeCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.AddItemRecordTradeCmd)
  // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.RecordServerTradeParam param = 2 [default = ADD_ITEM_RECORDTRADE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.TradeItemBaseInfo item_info = 3;
  if (has_item_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->item_info(), output);
  }

  // optional uint64 charid = 4;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->charid(), output);
  }

  // optional .Cmd.EAddItemType addtype = 5;
  if (has_addtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->addtype(), output);
  }

  // optional uint64 total_quota = 6;
  if (has_total_quota()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->total_quota(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.AddItemRecordTradeCmd)
}

::google::protobuf::uint8* AddItemRecordTradeCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.AddItemRecordTradeCmd)
  // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.RecordServerTradeParam param = 2 [default = ADD_ITEM_RECORDTRADE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.TradeItemBaseInfo item_info = 3;
  if (has_item_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->item_info(), target);
  }

  // optional uint64 charid = 4;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->charid(), target);
  }

  // optional .Cmd.EAddItemType addtype = 5;
  if (has_addtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->addtype(), target);
  }

  // optional uint64 total_quota = 6;
  if (has_total_quota()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->total_quota(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.AddItemRecordTradeCmd)
  return target;
}

int AddItemRecordTradeCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.RecordServerTradeParam param = 2 [default = ADD_ITEM_RECORDTRADE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.TradeItemBaseInfo item_info = 3;
    if (has_item_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item_info());
    }

    // optional uint64 charid = 4;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional .Cmd.EAddItemType addtype = 5;
    if (has_addtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->addtype());
    }

    // optional uint64 total_quota = 6;
    if (has_total_quota()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->total_quota());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddItemRecordTradeCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddItemRecordTradeCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddItemRecordTradeCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddItemRecordTradeCmd::MergeFrom(const AddItemRecordTradeCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_item_info()) {
      mutable_item_info()->::Cmd::TradeItemBaseInfo::MergeFrom(from.item_info());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_addtype()) {
      set_addtype(from.addtype());
    }
    if (from.has_total_quota()) {
      set_total_quota(from.total_quota());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddItemRecordTradeCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddItemRecordTradeCmd::CopyFrom(const AddItemRecordTradeCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddItemRecordTradeCmd::IsInitialized() const {

  return true;
}

void AddItemRecordTradeCmd::Swap(AddItemRecordTradeCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(item_info_, other->item_info_);
    std::swap(charid_, other->charid_);
    std::swap(addtype_, other->addtype_);
    std::swap(total_quota_, other->total_quota_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddItemRecordTradeCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddItemRecordTradeCmd_descriptor_;
  metadata.reflection = AddItemRecordTradeCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddMoneyRecordTradeCmd::kCmdFieldNumber;
const int AddMoneyRecordTradeCmd::kParamFieldNumber;
const int AddMoneyRecordTradeCmd::kMoneyTypeFieldNumber;
const int AddMoneyRecordTradeCmd::kTotalMoneyFieldNumber;
const int AddMoneyRecordTradeCmd::kCharidFieldNumber;
const int AddMoneyRecordTradeCmd::kItemidFieldNumber;
const int AddMoneyRecordTradeCmd::kCountFieldNumber;
const int AddMoneyRecordTradeCmd::kPriceFieldNumber;
const int AddMoneyRecordTradeCmd::kTypeFieldNumber;
const int AddMoneyRecordTradeCmd::kMoney2FieldNumber;
#endif  // !_MSC_VER

AddMoneyRecordTradeCmd::AddMoneyRecordTradeCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.AddMoneyRecordTradeCmd)
}

void AddMoneyRecordTradeCmd::InitAsDefaultInstance() {
}

AddMoneyRecordTradeCmd::AddMoneyRecordTradeCmd(const AddMoneyRecordTradeCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.AddMoneyRecordTradeCmd)
}

void AddMoneyRecordTradeCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 201;
  param_ = 5;
  money_type_ = 0u;
  total_money_ = 0u;
  charid_ = GOOGLE_ULONGLONG(0);
  itemid_ = 0u;
  count_ = 0u;
  price_ = 0u;
  type_ = 0;
  money2_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddMoneyRecordTradeCmd::~AddMoneyRecordTradeCmd() {
  // @@protoc_insertion_point(destructor:Cmd.AddMoneyRecordTradeCmd)
  SharedDtor();
}

void AddMoneyRecordTradeCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddMoneyRecordTradeCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddMoneyRecordTradeCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddMoneyRecordTradeCmd_descriptor_;
}

const AddMoneyRecordTradeCmd& AddMoneyRecordTradeCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneTrade_2eproto();
  return *default_instance_;
}

AddMoneyRecordTradeCmd* AddMoneyRecordTradeCmd::default_instance_ = NULL;

AddMoneyRecordTradeCmd* AddMoneyRecordTradeCmd::New() const {
  return new AddMoneyRecordTradeCmd;
}

void AddMoneyRecordTradeCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AddMoneyRecordTradeCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(money_type_, price_);
    cmd_ = 201;
    param_ = 5;
  }
  ZR_(type_, money2_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddMoneyRecordTradeCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.AddMoneyRecordTradeCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.RecordServerTradeParam param = 2 [default = ADD_MONEY_RECORDTRADE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::RecordServerTradeParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::RecordServerTradeParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_money_type;
        break;
      }

      // optional uint32 money_type = 3;
      case 3: {
        if (tag == 24) {
         parse_money_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &money_type_)));
          set_has_money_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_total_money;
        break;
      }

      // optional uint32 total_money = 4;
      case 4: {
        if (tag == 32) {
         parse_total_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_money_)));
          set_has_total_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 5;
      case 5: {
        if (tag == 40) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_itemid;
        break;
      }

      // optional uint32 itemid = 6;
      case 6: {
        if (tag == 48) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_count;
        break;
      }

      // optional uint32 count = 7;
      case 7: {
        if (tag == 56) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_price;
        break;
      }

      // optional uint32 price = 8;
      case 8: {
        if (tag == 64) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_type;
        break;
      }

      // optional .Cmd.EOperType type = 9;
      case 9: {
        if (tag == 72) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EOperType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EOperType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_money2;
        break;
      }

      // optional uint32 money2 = 10;
      case 10: {
        if (tag == 80) {
         parse_money2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &money2_)));
          set_has_money2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.AddMoneyRecordTradeCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.AddMoneyRecordTradeCmd)
  return false;
#undef DO_
}

void AddMoneyRecordTradeCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.AddMoneyRecordTradeCmd)
  // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.RecordServerTradeParam param = 2 [default = ADD_MONEY_RECORDTRADE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 money_type = 3;
  if (has_money_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->money_type(), output);
  }

  // optional uint32 total_money = 4;
  if (has_total_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->total_money(), output);
  }

  // optional uint64 charid = 5;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->charid(), output);
  }

  // optional uint32 itemid = 6;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->itemid(), output);
  }

  // optional uint32 count = 7;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->count(), output);
  }

  // optional uint32 price = 8;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->price(), output);
  }

  // optional .Cmd.EOperType type = 9;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->type(), output);
  }

  // optional uint32 money2 = 10;
  if (has_money2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->money2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.AddMoneyRecordTradeCmd)
}

::google::protobuf::uint8* AddMoneyRecordTradeCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.AddMoneyRecordTradeCmd)
  // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.RecordServerTradeParam param = 2 [default = ADD_MONEY_RECORDTRADE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 money_type = 3;
  if (has_money_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->money_type(), target);
  }

  // optional uint32 total_money = 4;
  if (has_total_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->total_money(), target);
  }

  // optional uint64 charid = 5;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->charid(), target);
  }

  // optional uint32 itemid = 6;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->itemid(), target);
  }

  // optional uint32 count = 7;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->count(), target);
  }

  // optional uint32 price = 8;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->price(), target);
  }

  // optional .Cmd.EOperType type = 9;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->type(), target);
  }

  // optional uint32 money2 = 10;
  if (has_money2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->money2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.AddMoneyRecordTradeCmd)
  return target;
}

int AddMoneyRecordTradeCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.RecordServerTradeParam param = 2 [default = ADD_MONEY_RECORDTRADE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 money_type = 3;
    if (has_money_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->money_type());
    }

    // optional uint32 total_money = 4;
    if (has_total_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_money());
    }

    // optional uint64 charid = 5;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 itemid = 6;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 count = 7;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional uint32 price = 8;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->price());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .Cmd.EOperType type = 9;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 money2 = 10;
    if (has_money2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->money2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddMoneyRecordTradeCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddMoneyRecordTradeCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddMoneyRecordTradeCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddMoneyRecordTradeCmd::MergeFrom(const AddMoneyRecordTradeCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_money_type()) {
      set_money_type(from.money_type());
    }
    if (from.has_total_money()) {
      set_total_money(from.total_money());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_money2()) {
      set_money2(from.money2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddMoneyRecordTradeCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddMoneyRecordTradeCmd::CopyFrom(const AddMoneyRecordTradeCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddMoneyRecordTradeCmd::IsInitialized() const {

  return true;
}

void AddMoneyRecordTradeCmd::Swap(AddMoneyRecordTradeCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(money_type_, other->money_type_);
    std::swap(total_money_, other->total_money_);
    std::swap(charid_, other->charid_);
    std::swap(itemid_, other->itemid_);
    std::swap(count_, other->count_);
    std::swap(price_, other->price_);
    std::swap(type_, other->type_);
    std::swap(money2_, other->money2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddMoneyRecordTradeCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddMoneyRecordTradeCmd_descriptor_;
  metadata.reflection = AddMoneyRecordTradeCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReduceItemRecordTrade::kCmdFieldNumber;
const int ReduceItemRecordTrade::kParamFieldNumber;
const int ReduceItemRecordTrade::kItemInfoFieldNumber;
const int ReduceItemRecordTrade::kCharidFieldNumber;
const int ReduceItemRecordTrade::kRetFieldNumber;
const int ReduceItemRecordTrade::kBoothfeeFieldNumber;
const int ReduceItemRecordTrade::kIsResellFieldNumber;
const int ReduceItemRecordTrade::kOrderidFieldNumber;
const int ReduceItemRecordTrade::kTypeFieldNumber;
const int ReduceItemRecordTrade::kQuotaUnlockFieldNumber;
const int ReduceItemRecordTrade::kQuotaLockFieldNumber;
const int ReduceItemRecordTrade::kQuotaFieldNumber;
#endif  // !_MSC_VER

ReduceItemRecordTrade::ReduceItemRecordTrade()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ReduceItemRecordTrade)
}

void ReduceItemRecordTrade::InitAsDefaultInstance() {
  item_info_ = const_cast< ::Cmd::TradeItemBaseInfo*>(&::Cmd::TradeItemBaseInfo::default_instance());
}

ReduceItemRecordTrade::ReduceItemRecordTrade(const ReduceItemRecordTrade& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ReduceItemRecordTrade)
}

void ReduceItemRecordTrade::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 201;
  param_ = 6;
  item_info_ = NULL;
  charid_ = GOOGLE_ULONGLONG(0);
  ret_ = 0;
  boothfee_ = 0u;
  is_resell_ = false;
  orderid_ = GOOGLE_ULONGLONG(0);
  type_ = 1;
  quota_unlock_ = GOOGLE_ULONGLONG(0);
  quota_lock_ = GOOGLE_ULONGLONG(0);
  quota_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReduceItemRecordTrade::~ReduceItemRecordTrade() {
  // @@protoc_insertion_point(destructor:Cmd.ReduceItemRecordTrade)
  SharedDtor();
}

void ReduceItemRecordTrade::SharedDtor() {
  if (this != default_instance_) {
    delete item_info_;
  }
}

void ReduceItemRecordTrade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReduceItemRecordTrade::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReduceItemRecordTrade_descriptor_;
}

const ReduceItemRecordTrade& ReduceItemRecordTrade::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneTrade_2eproto();
  return *default_instance_;
}

ReduceItemRecordTrade* ReduceItemRecordTrade::default_instance_ = NULL;

ReduceItemRecordTrade* ReduceItemRecordTrade::New() const {
  return new ReduceItemRecordTrade;
}

void ReduceItemRecordTrade::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReduceItemRecordTrade*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(charid_, is_resell_);
    cmd_ = 201;
    param_ = 6;
    if (has_item_info()) {
      if (item_info_ != NULL) item_info_->::Cmd::TradeItemBaseInfo::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 3840) {
    ZR_(quota_unlock_, quota_);
    type_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReduceItemRecordTrade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ReduceItemRecordTrade)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.RecordServerTradeParam param = 2 [default = REDUCE_ITEM_RECORDTRADE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::RecordServerTradeParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::RecordServerTradeParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_item_info;
        break;
      }

      // optional .Cmd.TradeItemBaseInfo item_info = 3;
      case 3: {
        if (tag == 26) {
         parse_item_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 4;
      case 4: {
        if (tag == 32) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ret;
        break;
      }

      // optional .Cmd.ETRADE_RET_CODE ret = 5;
      case 5: {
        if (tag == 40) {
         parse_ret:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ETRADE_RET_CODE_IsValid(value)) {
            set_ret(static_cast< ::Cmd::ETRADE_RET_CODE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_boothfee;
        break;
      }

      // optional uint32 boothfee = 6;
      case 6: {
        if (tag == 48) {
         parse_boothfee:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &boothfee_)));
          set_has_boothfee();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_is_resell;
        break;
      }

      // optional bool is_resell = 7;
      case 7: {
        if (tag == 56) {
         parse_is_resell:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_resell_)));
          set_has_is_resell();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_orderid;
        break;
      }

      // optional uint64 orderid = 8;
      case 8: {
        if (tag == 64) {
         parse_orderid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &orderid_)));
          set_has_orderid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_type;
        break;
      }

      // optional .Cmd.ETradeType type = 9 [default = ETRADETYPE_TRADE];
      case 9: {
        if (tag == 72) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ETradeType_IsValid(value)) {
            set_type(static_cast< ::Cmd::ETradeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_quota_unlock;
        break;
      }

      // optional uint64 quota_unlock = 10;
      case 10: {
        if (tag == 80) {
         parse_quota_unlock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &quota_unlock_)));
          set_has_quota_unlock();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_quota_lock;
        break;
      }

      // optional uint64 quota_lock = 11;
      case 11: {
        if (tag == 88) {
         parse_quota_lock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &quota_lock_)));
          set_has_quota_lock();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_quota;
        break;
      }

      // optional uint64 quota = 12;
      case 12: {
        if (tag == 96) {
         parse_quota:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &quota_)));
          set_has_quota();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ReduceItemRecordTrade)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ReduceItemRecordTrade)
  return false;
#undef DO_
}

void ReduceItemRecordTrade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ReduceItemRecordTrade)
  // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.RecordServerTradeParam param = 2 [default = REDUCE_ITEM_RECORDTRADE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.TradeItemBaseInfo item_info = 3;
  if (has_item_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->item_info(), output);
  }

  // optional uint64 charid = 4;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->charid(), output);
  }

  // optional .Cmd.ETRADE_RET_CODE ret = 5;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->ret(), output);
  }

  // optional uint32 boothfee = 6;
  if (has_boothfee()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->boothfee(), output);
  }

  // optional bool is_resell = 7;
  if (has_is_resell()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_resell(), output);
  }

  // optional uint64 orderid = 8;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->orderid(), output);
  }

  // optional .Cmd.ETradeType type = 9 [default = ETRADETYPE_TRADE];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->type(), output);
  }

  // optional uint64 quota_unlock = 10;
  if (has_quota_unlock()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->quota_unlock(), output);
  }

  // optional uint64 quota_lock = 11;
  if (has_quota_lock()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->quota_lock(), output);
  }

  // optional uint64 quota = 12;
  if (has_quota()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->quota(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ReduceItemRecordTrade)
}

::google::protobuf::uint8* ReduceItemRecordTrade::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ReduceItemRecordTrade)
  // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.RecordServerTradeParam param = 2 [default = REDUCE_ITEM_RECORDTRADE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.TradeItemBaseInfo item_info = 3;
  if (has_item_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->item_info(), target);
  }

  // optional uint64 charid = 4;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->charid(), target);
  }

  // optional .Cmd.ETRADE_RET_CODE ret = 5;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->ret(), target);
  }

  // optional uint32 boothfee = 6;
  if (has_boothfee()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->boothfee(), target);
  }

  // optional bool is_resell = 7;
  if (has_is_resell()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_resell(), target);
  }

  // optional uint64 orderid = 8;
  if (has_orderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->orderid(), target);
  }

  // optional .Cmd.ETradeType type = 9 [default = ETRADETYPE_TRADE];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->type(), target);
  }

  // optional uint64 quota_unlock = 10;
  if (has_quota_unlock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->quota_unlock(), target);
  }

  // optional uint64 quota_lock = 11;
  if (has_quota_lock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->quota_lock(), target);
  }

  // optional uint64 quota = 12;
  if (has_quota()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->quota(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ReduceItemRecordTrade)
  return target;
}

int ReduceItemRecordTrade::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.RecordServerTradeParam param = 2 [default = REDUCE_ITEM_RECORDTRADE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.TradeItemBaseInfo item_info = 3;
    if (has_item_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item_info());
    }

    // optional uint64 charid = 4;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional .Cmd.ETRADE_RET_CODE ret = 5;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

    // optional uint32 boothfee = 6;
    if (has_boothfee()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->boothfee());
    }

    // optional bool is_resell = 7;
    if (has_is_resell()) {
      total_size += 1 + 1;
    }

    // optional uint64 orderid = 8;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->orderid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .Cmd.ETradeType type = 9 [default = ETRADETYPE_TRADE];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint64 quota_unlock = 10;
    if (has_quota_unlock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->quota_unlock());
    }

    // optional uint64 quota_lock = 11;
    if (has_quota_lock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->quota_lock());
    }

    // optional uint64 quota = 12;
    if (has_quota()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->quota());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReduceItemRecordTrade::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReduceItemRecordTrade* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReduceItemRecordTrade*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReduceItemRecordTrade::MergeFrom(const ReduceItemRecordTrade& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_item_info()) {
      mutable_item_info()->::Cmd::TradeItemBaseInfo::MergeFrom(from.item_info());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_boothfee()) {
      set_boothfee(from.boothfee());
    }
    if (from.has_is_resell()) {
      set_is_resell(from.is_resell());
    }
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_quota_unlock()) {
      set_quota_unlock(from.quota_unlock());
    }
    if (from.has_quota_lock()) {
      set_quota_lock(from.quota_lock());
    }
    if (from.has_quota()) {
      set_quota(from.quota());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReduceItemRecordTrade::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReduceItemRecordTrade::CopyFrom(const ReduceItemRecordTrade& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReduceItemRecordTrade::IsInitialized() const {

  return true;
}

void ReduceItemRecordTrade::Swap(ReduceItemRecordTrade* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(item_info_, other->item_info_);
    std::swap(charid_, other->charid_);
    std::swap(ret_, other->ret_);
    std::swap(boothfee_, other->boothfee_);
    std::swap(is_resell_, other->is_resell_);
    std::swap(orderid_, other->orderid_);
    std::swap(type_, other->type_);
    std::swap(quota_unlock_, other->quota_unlock_);
    std::swap(quota_lock_, other->quota_lock_);
    std::swap(quota_, other->quota_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReduceItemRecordTrade::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReduceItemRecordTrade_descriptor_;
  metadata.reflection = ReduceItemRecordTrade_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SessionToMeRecordTrade::kCmdFieldNumber;
const int SessionToMeRecordTrade::kParamFieldNumber;
const int SessionToMeRecordTrade::kCharidFieldNumber;
const int SessionToMeRecordTrade::kDataFieldNumber;
const int SessionToMeRecordTrade::kLenFieldNumber;
#endif  // !_MSC_VER

SessionToMeRecordTrade::SessionToMeRecordTrade()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SessionToMeRecordTrade)
}

void SessionToMeRecordTrade::InitAsDefaultInstance() {
}

SessionToMeRecordTrade::SessionToMeRecordTrade(const SessionToMeRecordTrade& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SessionToMeRecordTrade)
}

void SessionToMeRecordTrade::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 201;
  param_ = 1;
  charid_ = GOOGLE_ULONGLONG(0);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  len_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SessionToMeRecordTrade::~SessionToMeRecordTrade() {
  // @@protoc_insertion_point(destructor:Cmd.SessionToMeRecordTrade)
  SharedDtor();
}

void SessionToMeRecordTrade::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void SessionToMeRecordTrade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SessionToMeRecordTrade::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SessionToMeRecordTrade_descriptor_;
}

const SessionToMeRecordTrade& SessionToMeRecordTrade::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneTrade_2eproto();
  return *default_instance_;
}

SessionToMeRecordTrade* SessionToMeRecordTrade::default_instance_ = NULL;

SessionToMeRecordTrade* SessionToMeRecordTrade::New() const {
  return new SessionToMeRecordTrade;
}

void SessionToMeRecordTrade::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    cmd_ = 201;
    param_ = 1;
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
    len_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SessionToMeRecordTrade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SessionToMeRecordTrade)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.RecordServerTradeParam param = 2 [default = SESSION_TO_ME_RECORDTRADE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::RecordServerTradeParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::RecordServerTradeParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional bytes data = 4;
      case 4: {
        if (tag == 34) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_len;
        break;
      }

      // optional uint32 len = 5;
      case 5: {
        if (tag == 40) {
         parse_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &len_)));
          set_has_len();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SessionToMeRecordTrade)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SessionToMeRecordTrade)
  return false;
#undef DO_
}

void SessionToMeRecordTrade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SessionToMeRecordTrade)
  // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.RecordServerTradeParam param = 2 [default = SESSION_TO_ME_RECORDTRADE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional bytes data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->data(), output);
  }

  // optional uint32 len = 5;
  if (has_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->len(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SessionToMeRecordTrade)
}

::google::protobuf::uint8* SessionToMeRecordTrade::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SessionToMeRecordTrade)
  // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.RecordServerTradeParam param = 2 [default = SESSION_TO_ME_RECORDTRADE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional bytes data = 4;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  // optional uint32 len = 5;
  if (has_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->len(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SessionToMeRecordTrade)
  return target;
}

int SessionToMeRecordTrade::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.RecordServerTradeParam param = 2 [default = SESSION_TO_ME_RECORDTRADE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional bytes data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional uint32 len = 5;
    if (has_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->len());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SessionToMeRecordTrade::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SessionToMeRecordTrade* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SessionToMeRecordTrade*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SessionToMeRecordTrade::MergeFrom(const SessionToMeRecordTrade& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_len()) {
      set_len(from.len());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SessionToMeRecordTrade::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionToMeRecordTrade::CopyFrom(const SessionToMeRecordTrade& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionToMeRecordTrade::IsInitialized() const {

  return true;
}

void SessionToMeRecordTrade::Swap(SessionToMeRecordTrade* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(data_, other->data_);
    std::swap(len_, other->len_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SessionToMeRecordTrade::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SessionToMeRecordTrade_descriptor_;
  metadata.reflection = SessionToMeRecordTrade_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SessionForwardUsercmdTrade::kCmdFieldNumber;
const int SessionForwardUsercmdTrade::kParamFieldNumber;
const int SessionForwardUsercmdTrade::kCharidFieldNumber;
const int SessionForwardUsercmdTrade::kZoneidFieldNumber;
const int SessionForwardUsercmdTrade::kDataFieldNumber;
const int SessionForwardUsercmdTrade::kLenFieldNumber;
#endif  // !_MSC_VER

SessionForwardUsercmdTrade::SessionForwardUsercmdTrade()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SessionForwardUsercmdTrade)
}

void SessionForwardUsercmdTrade::InitAsDefaultInstance() {
}

SessionForwardUsercmdTrade::SessionForwardUsercmdTrade(const SessionForwardUsercmdTrade& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SessionForwardUsercmdTrade)
}

void SessionForwardUsercmdTrade::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 201;
  param_ = 7;
  charid_ = GOOGLE_ULONGLONG(0);
  zoneid_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  len_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SessionForwardUsercmdTrade::~SessionForwardUsercmdTrade() {
  // @@protoc_insertion_point(destructor:Cmd.SessionForwardUsercmdTrade)
  SharedDtor();
}

void SessionForwardUsercmdTrade::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void SessionForwardUsercmdTrade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SessionForwardUsercmdTrade::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SessionForwardUsercmdTrade_descriptor_;
}

const SessionForwardUsercmdTrade& SessionForwardUsercmdTrade::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneTrade_2eproto();
  return *default_instance_;
}

SessionForwardUsercmdTrade* SessionForwardUsercmdTrade::default_instance_ = NULL;

SessionForwardUsercmdTrade* SessionForwardUsercmdTrade::New() const {
  return new SessionForwardUsercmdTrade;
}

void SessionForwardUsercmdTrade::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SessionForwardUsercmdTrade*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(zoneid_, len_);
    cmd_ = 201;
    param_ = 7;
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SessionForwardUsercmdTrade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SessionForwardUsercmdTrade)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.RecordServerTradeParam param = 2 [default = SESSION_FORWARD_USERCMD_TRADE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::RecordServerTradeParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::RecordServerTradeParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 4;
      case 4: {
        if (tag == 32) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_data;
        break;
      }

      // optional bytes data = 5;
      case 5: {
        if (tag == 42) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_len;
        break;
      }

      // optional uint32 len = 6;
      case 6: {
        if (tag == 48) {
         parse_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &len_)));
          set_has_len();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SessionForwardUsercmdTrade)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SessionForwardUsercmdTrade)
  return false;
#undef DO_
}

void SessionForwardUsercmdTrade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SessionForwardUsercmdTrade)
  // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.RecordServerTradeParam param = 2 [default = SESSION_FORWARD_USERCMD_TRADE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional uint32 zoneid = 4;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->zoneid(), output);
  }

  // optional bytes data = 5;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->data(), output);
  }

  // optional uint32 len = 6;
  if (has_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->len(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SessionForwardUsercmdTrade)
}

::google::protobuf::uint8* SessionForwardUsercmdTrade::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SessionForwardUsercmdTrade)
  // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.RecordServerTradeParam param = 2 [default = SESSION_FORWARD_USERCMD_TRADE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional uint32 zoneid = 4;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->zoneid(), target);
  }

  // optional bytes data = 5;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->data(), target);
  }

  // optional uint32 len = 6;
  if (has_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->len(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SessionForwardUsercmdTrade)
  return target;
}

int SessionForwardUsercmdTrade::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.RecordServerTradeParam param = 2 [default = SESSION_FORWARD_USERCMD_TRADE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 zoneid = 4;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional bytes data = 5;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional uint32 len = 6;
    if (has_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->len());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SessionForwardUsercmdTrade::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SessionForwardUsercmdTrade* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SessionForwardUsercmdTrade*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SessionForwardUsercmdTrade::MergeFrom(const SessionForwardUsercmdTrade& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_len()) {
      set_len(from.len());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SessionForwardUsercmdTrade::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionForwardUsercmdTrade::CopyFrom(const SessionForwardUsercmdTrade& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionForwardUsercmdTrade::IsInitialized() const {

  return true;
}

void SessionForwardUsercmdTrade::Swap(SessionForwardUsercmdTrade* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(data_, other->data_);
    std::swap(len_, other->len_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SessionForwardUsercmdTrade::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SessionForwardUsercmdTrade_descriptor_;
  metadata.reflection = SessionForwardUsercmdTrade_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SessionForwardScenecmdTrade::kCmdFieldNumber;
const int SessionForwardScenecmdTrade::kParamFieldNumber;
const int SessionForwardScenecmdTrade::kCharidFieldNumber;
const int SessionForwardScenecmdTrade::kZoneidFieldNumber;
const int SessionForwardScenecmdTrade::kNameFieldNumber;
const int SessionForwardScenecmdTrade::kDataFieldNumber;
const int SessionForwardScenecmdTrade::kLenFieldNumber;
#endif  // !_MSC_VER

SessionForwardScenecmdTrade::SessionForwardScenecmdTrade()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SessionForwardScenecmdTrade)
}

void SessionForwardScenecmdTrade::InitAsDefaultInstance() {
}

SessionForwardScenecmdTrade::SessionForwardScenecmdTrade(const SessionForwardScenecmdTrade& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SessionForwardScenecmdTrade)
}

void SessionForwardScenecmdTrade::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 201;
  param_ = 8;
  charid_ = GOOGLE_ULONGLONG(0);
  zoneid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  len_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SessionForwardScenecmdTrade::~SessionForwardScenecmdTrade() {
  // @@protoc_insertion_point(destructor:Cmd.SessionForwardScenecmdTrade)
  SharedDtor();
}

void SessionForwardScenecmdTrade::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void SessionForwardScenecmdTrade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SessionForwardScenecmdTrade::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SessionForwardScenecmdTrade_descriptor_;
}

const SessionForwardScenecmdTrade& SessionForwardScenecmdTrade::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneTrade_2eproto();
  return *default_instance_;
}

SessionForwardScenecmdTrade* SessionForwardScenecmdTrade::default_instance_ = NULL;

SessionForwardScenecmdTrade* SessionForwardScenecmdTrade::New() const {
  return new SessionForwardScenecmdTrade;
}

void SessionForwardScenecmdTrade::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SessionForwardScenecmdTrade*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(zoneid_, len_);
    cmd_ = 201;
    param_ = 8;
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SessionForwardScenecmdTrade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SessionForwardScenecmdTrade)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.RecordServerTradeParam param = 2 [default = SESSION_FORWARD_SCENECMD_TRADE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::RecordServerTradeParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::RecordServerTradeParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 4;
      case 4: {
        if (tag == 32) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // optional string name = 5;
      case 5: {
        if (tag == 42) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_data;
        break;
      }

      // optional bytes data = 6;
      case 6: {
        if (tag == 50) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_len;
        break;
      }

      // optional uint32 len = 7;
      case 7: {
        if (tag == 56) {
         parse_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &len_)));
          set_has_len();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SessionForwardScenecmdTrade)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SessionForwardScenecmdTrade)
  return false;
#undef DO_
}

void SessionForwardScenecmdTrade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SessionForwardScenecmdTrade)
  // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.RecordServerTradeParam param = 2 [default = SESSION_FORWARD_SCENECMD_TRADE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional uint32 zoneid = 4;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->zoneid(), output);
  }

  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->name(), output);
  }

  // optional bytes data = 6;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->data(), output);
  }

  // optional uint32 len = 7;
  if (has_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->len(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SessionForwardScenecmdTrade)
}

::google::protobuf::uint8* SessionForwardScenecmdTrade::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SessionForwardScenecmdTrade)
  // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.RecordServerTradeParam param = 2 [default = SESSION_FORWARD_SCENECMD_TRADE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional uint32 zoneid = 4;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->zoneid(), target);
  }

  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  // optional bytes data = 6;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->data(), target);
  }

  // optional uint32 len = 7;
  if (has_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->len(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SessionForwardScenecmdTrade)
  return target;
}

int SessionForwardScenecmdTrade::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.RecordServerTradeParam param = 2 [default = SESSION_FORWARD_SCENECMD_TRADE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 zoneid = 4;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bytes data = 6;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional uint32 len = 7;
    if (has_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->len());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SessionForwardScenecmdTrade::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SessionForwardScenecmdTrade* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SessionForwardScenecmdTrade*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SessionForwardScenecmdTrade::MergeFrom(const SessionForwardScenecmdTrade& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_len()) {
      set_len(from.len());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SessionForwardScenecmdTrade::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionForwardScenecmdTrade::CopyFrom(const SessionForwardScenecmdTrade& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionForwardScenecmdTrade::IsInitialized() const {

  return true;
}

void SessionForwardScenecmdTrade::Swap(SessionForwardScenecmdTrade* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(name_, other->name_);
    std::swap(data_, other->data_);
    std::swap(len_, other->len_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SessionForwardScenecmdTrade::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SessionForwardScenecmdTrade_descriptor_;
  metadata.reflection = SessionForwardScenecmdTrade_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ForwardUserCmdToRecordCmd::kCmdFieldNumber;
const int ForwardUserCmdToRecordCmd::kParamFieldNumber;
const int ForwardUserCmdToRecordCmd::kCharidFieldNumber;
const int ForwardUserCmdToRecordCmd::kDataFieldNumber;
const int ForwardUserCmdToRecordCmd::kLenFieldNumber;
#endif  // !_MSC_VER

ForwardUserCmdToRecordCmd::ForwardUserCmdToRecordCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ForwardUserCmdToRecordCmd)
}

void ForwardUserCmdToRecordCmd::InitAsDefaultInstance() {
}

ForwardUserCmdToRecordCmd::ForwardUserCmdToRecordCmd(const ForwardUserCmdToRecordCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ForwardUserCmdToRecordCmd)
}

void ForwardUserCmdToRecordCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 201;
  param_ = 9;
  charid_ = GOOGLE_ULONGLONG(0);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  len_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ForwardUserCmdToRecordCmd::~ForwardUserCmdToRecordCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ForwardUserCmdToRecordCmd)
  SharedDtor();
}

void ForwardUserCmdToRecordCmd::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void ForwardUserCmdToRecordCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForwardUserCmdToRecordCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ForwardUserCmdToRecordCmd_descriptor_;
}

const ForwardUserCmdToRecordCmd& ForwardUserCmdToRecordCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneTrade_2eproto();
  return *default_instance_;
}

ForwardUserCmdToRecordCmd* ForwardUserCmdToRecordCmd::default_instance_ = NULL;

ForwardUserCmdToRecordCmd* ForwardUserCmdToRecordCmd::New() const {
  return new ForwardUserCmdToRecordCmd;
}

void ForwardUserCmdToRecordCmd::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    cmd_ = 201;
    param_ = 9;
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
    len_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ForwardUserCmdToRecordCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ForwardUserCmdToRecordCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.RecordServerTradeParam param = 2 [default = FORWARD_USERCMD_TO_RECORD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::RecordServerTradeParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::RecordServerTradeParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional bytes data = 4;
      case 4: {
        if (tag == 34) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_len;
        break;
      }

      // optional uint32 len = 5;
      case 5: {
        if (tag == 40) {
         parse_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &len_)));
          set_has_len();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ForwardUserCmdToRecordCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ForwardUserCmdToRecordCmd)
  return false;
#undef DO_
}

void ForwardUserCmdToRecordCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ForwardUserCmdToRecordCmd)
  // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.RecordServerTradeParam param = 2 [default = FORWARD_USERCMD_TO_RECORD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional bytes data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->data(), output);
  }

  // optional uint32 len = 5;
  if (has_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->len(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ForwardUserCmdToRecordCmd)
}

::google::protobuf::uint8* ForwardUserCmdToRecordCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ForwardUserCmdToRecordCmd)
  // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.RecordServerTradeParam param = 2 [default = FORWARD_USERCMD_TO_RECORD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional bytes data = 4;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  // optional uint32 len = 5;
  if (has_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->len(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ForwardUserCmdToRecordCmd)
  return target;
}

int ForwardUserCmdToRecordCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.RecordServerTradeParam param = 2 [default = FORWARD_USERCMD_TO_RECORD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional bytes data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional uint32 len = 5;
    if (has_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->len());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForwardUserCmdToRecordCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ForwardUserCmdToRecordCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ForwardUserCmdToRecordCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ForwardUserCmdToRecordCmd::MergeFrom(const ForwardUserCmdToRecordCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_len()) {
      set_len(from.len());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ForwardUserCmdToRecordCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForwardUserCmdToRecordCmd::CopyFrom(const ForwardUserCmdToRecordCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForwardUserCmdToRecordCmd::IsInitialized() const {

  return true;
}

void ForwardUserCmdToRecordCmd::Swap(ForwardUserCmdToRecordCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(data_, other->data_);
    std::swap(len_, other->len_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ForwardUserCmdToRecordCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ForwardUserCmdToRecordCmd_descriptor_;
  metadata.reflection = ForwardUserCmdToRecordCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldMsgCmd::kCmdFieldNumber;
const int WorldMsgCmd::kParamFieldNumber;
const int WorldMsgCmd::kDataFieldNumber;
const int WorldMsgCmd::kLenFieldNumber;
#endif  // !_MSC_VER

WorldMsgCmd::WorldMsgCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.WorldMsgCmd)
}

void WorldMsgCmd::InitAsDefaultInstance() {
}

WorldMsgCmd::WorldMsgCmd(const WorldMsgCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.WorldMsgCmd)
}

void WorldMsgCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 201;
  param_ = 10;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  len_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldMsgCmd::~WorldMsgCmd() {
  // @@protoc_insertion_point(destructor:Cmd.WorldMsgCmd)
  SharedDtor();
}

void WorldMsgCmd::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void WorldMsgCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldMsgCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldMsgCmd_descriptor_;
}

const WorldMsgCmd& WorldMsgCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneTrade_2eproto();
  return *default_instance_;
}

WorldMsgCmd* WorldMsgCmd::default_instance_ = NULL;

WorldMsgCmd* WorldMsgCmd::New() const {
  return new WorldMsgCmd;
}

void WorldMsgCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 201;
    param_ = 10;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
    len_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldMsgCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.WorldMsgCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.RecordServerTradeParam param = 2 [default = WORLD_MSG];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::RecordServerTradeParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::RecordServerTradeParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional bytes data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_len;
        break;
      }

      // optional uint32 len = 4;
      case 4: {
        if (tag == 32) {
         parse_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &len_)));
          set_has_len();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.WorldMsgCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.WorldMsgCmd)
  return false;
#undef DO_
}

void WorldMsgCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.WorldMsgCmd)
  // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.RecordServerTradeParam param = 2 [default = WORLD_MSG];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional bytes data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  // optional uint32 len = 4;
  if (has_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->len(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.WorldMsgCmd)
}

::google::protobuf::uint8* WorldMsgCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.WorldMsgCmd)
  // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.RecordServerTradeParam param = 2 [default = WORLD_MSG];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional bytes data = 3;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  // optional uint32 len = 4;
  if (has_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->len(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.WorldMsgCmd)
  return target;
}

int WorldMsgCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.RecordServerTradeParam param = 2 [default = WORLD_MSG];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional uint32 len = 4;
    if (has_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->len());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldMsgCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldMsgCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldMsgCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldMsgCmd::MergeFrom(const WorldMsgCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_len()) {
      set_len(from.len());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldMsgCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldMsgCmd::CopyFrom(const WorldMsgCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldMsgCmd::IsInitialized() const {

  return true;
}

void WorldMsgCmd::Swap(WorldMsgCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(data_, other->data_);
    std::swap(len_, other->len_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldMsgCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldMsgCmd_descriptor_;
  metadata.reflection = WorldMsgCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateTradeLogCmd::kCmdFieldNumber;
const int UpdateTradeLogCmd::kParamFieldNumber;
const int UpdateTradeLogCmd::kCharidFieldNumber;
const int UpdateTradeLogCmd::kTypeFieldNumber;
const int UpdateTradeLogCmd::kIdFieldNumber;
const int UpdateTradeLogCmd::kTradeTypeFieldNumber;
#endif  // !_MSC_VER

UpdateTradeLogCmd::UpdateTradeLogCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UpdateTradeLogCmd)
}

void UpdateTradeLogCmd::InitAsDefaultInstance() {
}

UpdateTradeLogCmd::UpdateTradeLogCmd(const UpdateTradeLogCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UpdateTradeLogCmd)
}

void UpdateTradeLogCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 201;
  param_ = 11;
  charid_ = GOOGLE_ULONGLONG(0);
  type_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  trade_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateTradeLogCmd::~UpdateTradeLogCmd() {
  // @@protoc_insertion_point(destructor:Cmd.UpdateTradeLogCmd)
  SharedDtor();
}

void UpdateTradeLogCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateTradeLogCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateTradeLogCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateTradeLogCmd_descriptor_;
}

const UpdateTradeLogCmd& UpdateTradeLogCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneTrade_2eproto();
  return *default_instance_;
}

UpdateTradeLogCmd* UpdateTradeLogCmd::default_instance_ = NULL;

UpdateTradeLogCmd* UpdateTradeLogCmd::New() const {
  return new UpdateTradeLogCmd;
}

void UpdateTradeLogCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UpdateTradeLogCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(charid_, type_);
    cmd_ = 201;
    param_ = 11;
    trade_type_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateTradeLogCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UpdateTradeLogCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.RecordServerTradeParam param = 2 [default = UPDATE_TRADELOG_RECORDTRADE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::RecordServerTradeParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::RecordServerTradeParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional .Cmd.EOperType type = 4;
      case 4: {
        if (tag == 32) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EOperType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EOperType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_id;
        break;
      }

      // optional uint64 id = 5;
      case 5: {
        if (tag == 40) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_trade_type;
        break;
      }

      // optional .Cmd.ETradeType trade_type = 6 [default = ETRADETYPE_TRADE];
      case 6: {
        if (tag == 48) {
         parse_trade_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ETradeType_IsValid(value)) {
            set_trade_type(static_cast< ::Cmd::ETradeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UpdateTradeLogCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UpdateTradeLogCmd)
  return false;
#undef DO_
}

void UpdateTradeLogCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UpdateTradeLogCmd)
  // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.RecordServerTradeParam param = 2 [default = UPDATE_TRADELOG_RECORDTRADE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional .Cmd.EOperType type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  // optional uint64 id = 5;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->id(), output);
  }

  // optional .Cmd.ETradeType trade_type = 6 [default = ETRADETYPE_TRADE];
  if (has_trade_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->trade_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UpdateTradeLogCmd)
}

::google::protobuf::uint8* UpdateTradeLogCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UpdateTradeLogCmd)
  // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.RecordServerTradeParam param = 2 [default = UPDATE_TRADELOG_RECORDTRADE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional .Cmd.EOperType type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  // optional uint64 id = 5;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->id(), target);
  }

  // optional .Cmd.ETradeType trade_type = 6 [default = ETRADETYPE_TRADE];
  if (has_trade_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->trade_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UpdateTradeLogCmd)
  return target;
}

int UpdateTradeLogCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.RecordServerTradeParam param = 2 [default = UPDATE_TRADELOG_RECORDTRADE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional .Cmd.EOperType type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint64 id = 5;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional .Cmd.ETradeType trade_type = 6 [default = ETRADETYPE_TRADE];
    if (has_trade_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->trade_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateTradeLogCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateTradeLogCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateTradeLogCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateTradeLogCmd::MergeFrom(const UpdateTradeLogCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_trade_type()) {
      set_trade_type(from.trade_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateTradeLogCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateTradeLogCmd::CopyFrom(const UpdateTradeLogCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateTradeLogCmd::IsInitialized() const {

  return true;
}

void UpdateTradeLogCmd::Swap(UpdateTradeLogCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(trade_type_, other->trade_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateTradeLogCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateTradeLogCmd_descriptor_;
  metadata.reflection = UpdateTradeLogCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GiveCheckMoneySceneTradeCmd::kCmdFieldNumber;
const int GiveCheckMoneySceneTradeCmd::kParamFieldNumber;
const int GiveCheckMoneySceneTradeCmd::kCharidFieldNumber;
const int GiveCheckMoneySceneTradeCmd::kTypeFieldNumber;
const int GiveCheckMoneySceneTradeCmd::kIdFieldNumber;
const int GiveCheckMoneySceneTradeCmd::kFriendidFieldNumber;
const int GiveCheckMoneySceneTradeCmd::kContentFieldNumber;
const int GiveCheckMoneySceneTradeCmd::kAnonymousFieldNumber;
const int GiveCheckMoneySceneTradeCmd::kQuotaFieldNumber;
const int GiveCheckMoneySceneTradeCmd::kFeeFieldNumber;
const int GiveCheckMoneySceneTradeCmd::kBackgroundFieldNumber;
const int GiveCheckMoneySceneTradeCmd::kRetFieldNumber;
const int GiveCheckMoneySceneTradeCmd::kItemdataFieldNumber;
const int GiveCheckMoneySceneTradeCmd::kFromtradeFieldNumber;
#endif  // !_MSC_VER

GiveCheckMoneySceneTradeCmd::GiveCheckMoneySceneTradeCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GiveCheckMoneySceneTradeCmd)
}

void GiveCheckMoneySceneTradeCmd::InitAsDefaultInstance() {
  itemdata_ = const_cast< ::Cmd::ItemData*>(&::Cmd::ItemData::default_instance());
}

GiveCheckMoneySceneTradeCmd::GiveCheckMoneySceneTradeCmd(const GiveCheckMoneySceneTradeCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GiveCheckMoneySceneTradeCmd)
}

void GiveCheckMoneySceneTradeCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 201;
  param_ = 12;
  charid_ = GOOGLE_ULONGLONG(0);
  type_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  friendid_ = GOOGLE_ULONGLONG(0);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  anonymous_ = false;
  quota_ = GOOGLE_ULONGLONG(0);
  fee_ = GOOGLE_ULONGLONG(0);
  background_ = 0u;
  ret_ = false;
  itemdata_ = NULL;
  fromtrade_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GiveCheckMoneySceneTradeCmd::~GiveCheckMoneySceneTradeCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GiveCheckMoneySceneTradeCmd)
  SharedDtor();
}

void GiveCheckMoneySceneTradeCmd::SharedDtor() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (this != default_instance_) {
    delete itemdata_;
  }
}

void GiveCheckMoneySceneTradeCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GiveCheckMoneySceneTradeCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GiveCheckMoneySceneTradeCmd_descriptor_;
}

const GiveCheckMoneySceneTradeCmd& GiveCheckMoneySceneTradeCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneTrade_2eproto();
  return *default_instance_;
}

GiveCheckMoneySceneTradeCmd* GiveCheckMoneySceneTradeCmd::default_instance_ = NULL;

GiveCheckMoneySceneTradeCmd* GiveCheckMoneySceneTradeCmd::New() const {
  return new GiveCheckMoneySceneTradeCmd;
}

void GiveCheckMoneySceneTradeCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GiveCheckMoneySceneTradeCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(charid_, friendid_);
    cmd_ = 201;
    param_ = 12;
    type_ = 0;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
    anonymous_ = false;
  }
  if (_has_bits_[8 / 32] & 16128) {
    ZR_(background_, fee_);
    ZR_(ret_, fromtrade_);
    if (has_itemdata()) {
      if (itemdata_ != NULL) itemdata_->::Cmd::ItemData::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GiveCheckMoneySceneTradeCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GiveCheckMoneySceneTradeCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.RecordServerTradeParam param = 2 [default = GIVE_CHECK_MONEY_RECORDTRADE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::RecordServerTradeParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::RecordServerTradeParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional .Cmd.EOperType type = 4;
      case 4: {
        if (tag == 32) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EOperType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EOperType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_id;
        break;
      }

      // optional uint64 id = 5;
      case 5: {
        if (tag == 40) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_friendid;
        break;
      }

      // optional uint64 friendid = 6;
      case 6: {
        if (tag == 48) {
         parse_friendid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &friendid_)));
          set_has_friendid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_content;
        break;
      }

      // optional string content = 7;
      case 7: {
        if (tag == 58) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_anonymous;
        break;
      }

      // optional bool anonymous = 8;
      case 8: {
        if (tag == 64) {
         parse_anonymous:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &anonymous_)));
          set_has_anonymous();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_quota;
        break;
      }

      // optional uint64 quota = 9;
      case 9: {
        if (tag == 72) {
         parse_quota:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &quota_)));
          set_has_quota();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_fee;
        break;
      }

      // optional uint64 fee = 10;
      case 10: {
        if (tag == 80) {
         parse_fee:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fee_)));
          set_has_fee();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_background;
        break;
      }

      // optional uint32 background = 11;
      case 11: {
        if (tag == 88) {
         parse_background:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &background_)));
          set_has_background();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_ret;
        break;
      }

      // optional bool ret = 12;
      case 12: {
        if (tag == 96) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_itemdata;
        break;
      }

      // optional .Cmd.ItemData itemdata = 13;
      case 13: {
        if (tag == 106) {
         parse_itemdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_itemdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_fromtrade;
        break;
      }

      // optional bool fromtrade = 14;
      case 14: {
        if (tag == 112) {
         parse_fromtrade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fromtrade_)));
          set_has_fromtrade();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GiveCheckMoneySceneTradeCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GiveCheckMoneySceneTradeCmd)
  return false;
#undef DO_
}

void GiveCheckMoneySceneTradeCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GiveCheckMoneySceneTradeCmd)
  // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.RecordServerTradeParam param = 2 [default = GIVE_CHECK_MONEY_RECORDTRADE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional .Cmd.EOperType type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  // optional uint64 id = 5;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->id(), output);
  }

  // optional uint64 friendid = 6;
  if (has_friendid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->friendid(), output);
  }

  // optional string content = 7;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->content(), output);
  }

  // optional bool anonymous = 8;
  if (has_anonymous()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->anonymous(), output);
  }

  // optional uint64 quota = 9;
  if (has_quota()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->quota(), output);
  }

  // optional uint64 fee = 10;
  if (has_fee()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->fee(), output);
  }

  // optional uint32 background = 11;
  if (has_background()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->background(), output);
  }

  // optional bool ret = 12;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->ret(), output);
  }

  // optional .Cmd.ItemData itemdata = 13;
  if (has_itemdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->itemdata(), output);
  }

  // optional bool fromtrade = 14;
  if (has_fromtrade()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->fromtrade(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GiveCheckMoneySceneTradeCmd)
}

::google::protobuf::uint8* GiveCheckMoneySceneTradeCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GiveCheckMoneySceneTradeCmd)
  // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.RecordServerTradeParam param = 2 [default = GIVE_CHECK_MONEY_RECORDTRADE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional .Cmd.EOperType type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  // optional uint64 id = 5;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->id(), target);
  }

  // optional uint64 friendid = 6;
  if (has_friendid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->friendid(), target);
  }

  // optional string content = 7;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->content(), target);
  }

  // optional bool anonymous = 8;
  if (has_anonymous()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->anonymous(), target);
  }

  // optional uint64 quota = 9;
  if (has_quota()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->quota(), target);
  }

  // optional uint64 fee = 10;
  if (has_fee()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->fee(), target);
  }

  // optional uint32 background = 11;
  if (has_background()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->background(), target);
  }

  // optional bool ret = 12;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->ret(), target);
  }

  // optional .Cmd.ItemData itemdata = 13;
  if (has_itemdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->itemdata(), target);
  }

  // optional bool fromtrade = 14;
  if (has_fromtrade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->fromtrade(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GiveCheckMoneySceneTradeCmd)
  return target;
}

int GiveCheckMoneySceneTradeCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.RecordServerTradeParam param = 2 [default = GIVE_CHECK_MONEY_RECORDTRADE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional .Cmd.EOperType type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint64 id = 5;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint64 friendid = 6;
    if (has_friendid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->friendid());
    }

    // optional string content = 7;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional bool anonymous = 8;
    if (has_anonymous()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 quota = 9;
    if (has_quota()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->quota());
    }

    // optional uint64 fee = 10;
    if (has_fee()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fee());
    }

    // optional uint32 background = 11;
    if (has_background()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->background());
    }

    // optional bool ret = 12;
    if (has_ret()) {
      total_size += 1 + 1;
    }

    // optional .Cmd.ItemData itemdata = 13;
    if (has_itemdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->itemdata());
    }

    // optional bool fromtrade = 14;
    if (has_fromtrade()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GiveCheckMoneySceneTradeCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GiveCheckMoneySceneTradeCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GiveCheckMoneySceneTradeCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GiveCheckMoneySceneTradeCmd::MergeFrom(const GiveCheckMoneySceneTradeCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_friendid()) {
      set_friendid(from.friendid());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_anonymous()) {
      set_anonymous(from.anonymous());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_quota()) {
      set_quota(from.quota());
    }
    if (from.has_fee()) {
      set_fee(from.fee());
    }
    if (from.has_background()) {
      set_background(from.background());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_itemdata()) {
      mutable_itemdata()->::Cmd::ItemData::MergeFrom(from.itemdata());
    }
    if (from.has_fromtrade()) {
      set_fromtrade(from.fromtrade());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GiveCheckMoneySceneTradeCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GiveCheckMoneySceneTradeCmd::CopyFrom(const GiveCheckMoneySceneTradeCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GiveCheckMoneySceneTradeCmd::IsInitialized() const {

  return true;
}

void GiveCheckMoneySceneTradeCmd::Swap(GiveCheckMoneySceneTradeCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(friendid_, other->friendid_);
    std::swap(content_, other->content_);
    std::swap(anonymous_, other->anonymous_);
    std::swap(quota_, other->quota_);
    std::swap(fee_, other->fee_);
    std::swap(background_, other->background_);
    std::swap(ret_, other->ret_);
    std::swap(itemdata_, other->itemdata_);
    std::swap(fromtrade_, other->fromtrade_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GiveCheckMoneySceneTradeCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GiveCheckMoneySceneTradeCmd_descriptor_;
  metadata.reflection = GiveCheckMoneySceneTradeCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SyncGiveItemSceneTradeCmd::kCmdFieldNumber;
const int SyncGiveItemSceneTradeCmd::kParamFieldNumber;
const int SyncGiveItemSceneTradeCmd::kCharidFieldNumber;
const int SyncGiveItemSceneTradeCmd::kIteminfoFieldNumber;
const int SyncGiveItemSceneTradeCmd::kTypeFieldNumber;
#endif  // !_MSC_VER

SyncGiveItemSceneTradeCmd::SyncGiveItemSceneTradeCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SyncGiveItemSceneTradeCmd)
}

void SyncGiveItemSceneTradeCmd::InitAsDefaultInstance() {
}

SyncGiveItemSceneTradeCmd::SyncGiveItemSceneTradeCmd(const SyncGiveItemSceneTradeCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SyncGiveItemSceneTradeCmd)
}

void SyncGiveItemSceneTradeCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 201;
  param_ = 13;
  charid_ = GOOGLE_ULONGLONG(0);
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncGiveItemSceneTradeCmd::~SyncGiveItemSceneTradeCmd() {
  // @@protoc_insertion_point(destructor:Cmd.SyncGiveItemSceneTradeCmd)
  SharedDtor();
}

void SyncGiveItemSceneTradeCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SyncGiveItemSceneTradeCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncGiveItemSceneTradeCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncGiveItemSceneTradeCmd_descriptor_;
}

const SyncGiveItemSceneTradeCmd& SyncGiveItemSceneTradeCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneTrade_2eproto();
  return *default_instance_;
}

SyncGiveItemSceneTradeCmd* SyncGiveItemSceneTradeCmd::default_instance_ = NULL;

SyncGiveItemSceneTradeCmd* SyncGiveItemSceneTradeCmd::New() const {
  return new SyncGiveItemSceneTradeCmd;
}

void SyncGiveItemSceneTradeCmd::Clear() {
  if (_has_bits_[0 / 32] & 23) {
    cmd_ = 201;
    param_ = 13;
    charid_ = GOOGLE_ULONGLONG(0);
    type_ = 1;
  }
  iteminfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncGiveItemSceneTradeCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SyncGiveItemSceneTradeCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.RecordServerTradeParam param = 2 [default = SYNC_GIVE_ITEM_RECORDTRADE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::RecordServerTradeParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::RecordServerTradeParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_iteminfo;
        break;
      }

      // repeated .Cmd.GiveItemInfo iteminfo = 4;
      case 4: {
        if (tag == 34) {
         parse_iteminfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_iteminfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_iteminfo;
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // optional .Cmd.EGiveType type = 5;
      case 5: {
        if (tag == 40) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EGiveType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EGiveType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SyncGiveItemSceneTradeCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SyncGiveItemSceneTradeCmd)
  return false;
#undef DO_
}

void SyncGiveItemSceneTradeCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SyncGiveItemSceneTradeCmd)
  // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.RecordServerTradeParam param = 2 [default = SYNC_GIVE_ITEM_RECORDTRADE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // repeated .Cmd.GiveItemInfo iteminfo = 4;
  for (int i = 0; i < this->iteminfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->iteminfo(i), output);
  }

  // optional .Cmd.EGiveType type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SyncGiveItemSceneTradeCmd)
}

::google::protobuf::uint8* SyncGiveItemSceneTradeCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SyncGiveItemSceneTradeCmd)
  // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.RecordServerTradeParam param = 2 [default = SYNC_GIVE_ITEM_RECORDTRADE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // repeated .Cmd.GiveItemInfo iteminfo = 4;
  for (int i = 0; i < this->iteminfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->iteminfo(i), target);
  }

  // optional .Cmd.EGiveType type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SyncGiveItemSceneTradeCmd)
  return target;
}

int SyncGiveItemSceneTradeCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.RecordServerTradeParam param = 2 [default = SYNC_GIVE_ITEM_RECORDTRADE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional .Cmd.EGiveType type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated .Cmd.GiveItemInfo iteminfo = 4;
  total_size += 1 * this->iteminfo_size();
  for (int i = 0; i < this->iteminfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->iteminfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncGiveItemSceneTradeCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SyncGiveItemSceneTradeCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SyncGiveItemSceneTradeCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SyncGiveItemSceneTradeCmd::MergeFrom(const SyncGiveItemSceneTradeCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  iteminfo_.MergeFrom(from.iteminfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncGiveItemSceneTradeCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncGiveItemSceneTradeCmd::CopyFrom(const SyncGiveItemSceneTradeCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncGiveItemSceneTradeCmd::IsInitialized() const {

  return true;
}

void SyncGiveItemSceneTradeCmd::Swap(SyncGiveItemSceneTradeCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    iteminfo_.Swap(&other->iteminfo_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SyncGiveItemSceneTradeCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncGiveItemSceneTradeCmd_descriptor_;
  metadata.reflection = SyncGiveItemSceneTradeCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddGiveSceneTradeCmd::kCmdFieldNumber;
const int AddGiveSceneTradeCmd::kParamFieldNumber;
const int AddGiveSceneTradeCmd::kCharidFieldNumber;
const int AddGiveSceneTradeCmd::kIteminfoFieldNumber;
#endif  // !_MSC_VER

AddGiveSceneTradeCmd::AddGiveSceneTradeCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.AddGiveSceneTradeCmd)
}

void AddGiveSceneTradeCmd::InitAsDefaultInstance() {
  iteminfo_ = const_cast< ::Cmd::GiveItemInfo*>(&::Cmd::GiveItemInfo::default_instance());
}

AddGiveSceneTradeCmd::AddGiveSceneTradeCmd(const AddGiveSceneTradeCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.AddGiveSceneTradeCmd)
}

void AddGiveSceneTradeCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 201;
  param_ = 14;
  charid_ = GOOGLE_ULONGLONG(0);
  iteminfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddGiveSceneTradeCmd::~AddGiveSceneTradeCmd() {
  // @@protoc_insertion_point(destructor:Cmd.AddGiveSceneTradeCmd)
  SharedDtor();
}

void AddGiveSceneTradeCmd::SharedDtor() {
  if (this != default_instance_) {
    delete iteminfo_;
  }
}

void AddGiveSceneTradeCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddGiveSceneTradeCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddGiveSceneTradeCmd_descriptor_;
}

const AddGiveSceneTradeCmd& AddGiveSceneTradeCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneTrade_2eproto();
  return *default_instance_;
}

AddGiveSceneTradeCmd* AddGiveSceneTradeCmd::default_instance_ = NULL;

AddGiveSceneTradeCmd* AddGiveSceneTradeCmd::New() const {
  return new AddGiveSceneTradeCmd;
}

void AddGiveSceneTradeCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 201;
    param_ = 14;
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_iteminfo()) {
      if (iteminfo_ != NULL) iteminfo_->::Cmd::GiveItemInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddGiveSceneTradeCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.AddGiveSceneTradeCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.RecordServerTradeParam param = 2 [default = ADD_GIVE_RECORDTRADE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::RecordServerTradeParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::RecordServerTradeParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_iteminfo;
        break;
      }

      // optional .Cmd.GiveItemInfo iteminfo = 4;
      case 4: {
        if (tag == 34) {
         parse_iteminfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_iteminfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.AddGiveSceneTradeCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.AddGiveSceneTradeCmd)
  return false;
#undef DO_
}

void AddGiveSceneTradeCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.AddGiveSceneTradeCmd)
  // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.RecordServerTradeParam param = 2 [default = ADD_GIVE_RECORDTRADE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional .Cmd.GiveItemInfo iteminfo = 4;
  if (has_iteminfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->iteminfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.AddGiveSceneTradeCmd)
}

::google::protobuf::uint8* AddGiveSceneTradeCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.AddGiveSceneTradeCmd)
  // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.RecordServerTradeParam param = 2 [default = ADD_GIVE_RECORDTRADE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional .Cmd.GiveItemInfo iteminfo = 4;
  if (has_iteminfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->iteminfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.AddGiveSceneTradeCmd)
  return target;
}

int AddGiveSceneTradeCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.RecordServerTradeParam param = 2 [default = ADD_GIVE_RECORDTRADE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional .Cmd.GiveItemInfo iteminfo = 4;
    if (has_iteminfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->iteminfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddGiveSceneTradeCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddGiveSceneTradeCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddGiveSceneTradeCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddGiveSceneTradeCmd::MergeFrom(const AddGiveSceneTradeCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_iteminfo()) {
      mutable_iteminfo()->::Cmd::GiveItemInfo::MergeFrom(from.iteminfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddGiveSceneTradeCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddGiveSceneTradeCmd::CopyFrom(const AddGiveSceneTradeCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddGiveSceneTradeCmd::IsInitialized() const {

  return true;
}

void AddGiveSceneTradeCmd::Swap(AddGiveSceneTradeCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(iteminfo_, other->iteminfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddGiveSceneTradeCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddGiveSceneTradeCmd_descriptor_;
  metadata.reflection = AddGiveSceneTradeCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DelGiveSceneTradeCmd::kCmdFieldNumber;
const int DelGiveSceneTradeCmd::kParamFieldNumber;
const int DelGiveSceneTradeCmd::kCharidFieldNumber;
const int DelGiveSceneTradeCmd::kIdFieldNumber;
#endif  // !_MSC_VER

DelGiveSceneTradeCmd::DelGiveSceneTradeCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.DelGiveSceneTradeCmd)
}

void DelGiveSceneTradeCmd::InitAsDefaultInstance() {
}

DelGiveSceneTradeCmd::DelGiveSceneTradeCmd(const DelGiveSceneTradeCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.DelGiveSceneTradeCmd)
}

void DelGiveSceneTradeCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 201;
  param_ = 15;
  charid_ = GOOGLE_ULONGLONG(0);
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DelGiveSceneTradeCmd::~DelGiveSceneTradeCmd() {
  // @@protoc_insertion_point(destructor:Cmd.DelGiveSceneTradeCmd)
  SharedDtor();
}

void DelGiveSceneTradeCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DelGiveSceneTradeCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DelGiveSceneTradeCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DelGiveSceneTradeCmd_descriptor_;
}

const DelGiveSceneTradeCmd& DelGiveSceneTradeCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneTrade_2eproto();
  return *default_instance_;
}

DelGiveSceneTradeCmd* DelGiveSceneTradeCmd::default_instance_ = NULL;

DelGiveSceneTradeCmd* DelGiveSceneTradeCmd::New() const {
  return new DelGiveSceneTradeCmd;
}

void DelGiveSceneTradeCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DelGiveSceneTradeCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(charid_, id_);
    cmd_ = 201;
    param_ = 15;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DelGiveSceneTradeCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.DelGiveSceneTradeCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.RecordServerTradeParam param = 2 [default = DEL_GIVE_RECORDTRADE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::RecordServerTradeParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::RecordServerTradeParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_id;
        break;
      }

      // optional uint64 id = 4;
      case 4: {
        if (tag == 32) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.DelGiveSceneTradeCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.DelGiveSceneTradeCmd)
  return false;
#undef DO_
}

void DelGiveSceneTradeCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.DelGiveSceneTradeCmd)
  // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.RecordServerTradeParam param = 2 [default = DEL_GIVE_RECORDTRADE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional uint64 id = 4;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.DelGiveSceneTradeCmd)
}

::google::protobuf::uint8* DelGiveSceneTradeCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.DelGiveSceneTradeCmd)
  // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.RecordServerTradeParam param = 2 [default = DEL_GIVE_RECORDTRADE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional uint64 id = 4;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.DelGiveSceneTradeCmd)
  return target;
}

int DelGiveSceneTradeCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.RecordServerTradeParam param = 2 [default = DEL_GIVE_RECORDTRADE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint64 id = 4;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelGiveSceneTradeCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DelGiveSceneTradeCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DelGiveSceneTradeCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DelGiveSceneTradeCmd::MergeFrom(const DelGiveSceneTradeCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DelGiveSceneTradeCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelGiveSceneTradeCmd::CopyFrom(const DelGiveSceneTradeCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelGiveSceneTradeCmd::IsInitialized() const {

  return true;
}

void DelGiveSceneTradeCmd::Swap(DelGiveSceneTradeCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DelGiveSceneTradeCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DelGiveSceneTradeCmd_descriptor_;
  metadata.reflection = DelGiveSceneTradeCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddGiveItemSceneTradeCmd::kCmdFieldNumber;
const int AddGiveItemSceneTradeCmd::kParamFieldNumber;
const int AddGiveItemSceneTradeCmd::kCharidFieldNumber;
const int AddGiveItemSceneTradeCmd::kIdFieldNumber;
const int AddGiveItemSceneTradeCmd::kItemidFieldNumber;
const int AddGiveItemSceneTradeCmd::kCountFieldNumber;
const int AddGiveItemSceneTradeCmd::kItemDataFieldNumber;
const int AddGiveItemSceneTradeCmd::kBackgroundFieldNumber;
const int AddGiveItemSceneTradeCmd::kRetFieldNumber;
#endif  // !_MSC_VER

AddGiveItemSceneTradeCmd::AddGiveItemSceneTradeCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.AddGiveItemSceneTradeCmd)
}

void AddGiveItemSceneTradeCmd::InitAsDefaultInstance() {
  itemdata_ = const_cast< ::Cmd::ItemData*>(&::Cmd::ItemData::default_instance());
}

AddGiveItemSceneTradeCmd::AddGiveItemSceneTradeCmd(const AddGiveItemSceneTradeCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.AddGiveItemSceneTradeCmd)
}

void AddGiveItemSceneTradeCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 201;
  param_ = 17;
  charid_ = GOOGLE_ULONGLONG(0);
  id_ = GOOGLE_ULONGLONG(0);
  itemid_ = 0u;
  count_ = 0u;
  itemdata_ = NULL;
  background_ = 0u;
  ret_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddGiveItemSceneTradeCmd::~AddGiveItemSceneTradeCmd() {
  // @@protoc_insertion_point(destructor:Cmd.AddGiveItemSceneTradeCmd)
  SharedDtor();
}

void AddGiveItemSceneTradeCmd::SharedDtor() {
  if (this != default_instance_) {
    delete itemdata_;
  }
}

void AddGiveItemSceneTradeCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddGiveItemSceneTradeCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddGiveItemSceneTradeCmd_descriptor_;
}

const AddGiveItemSceneTradeCmd& AddGiveItemSceneTradeCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneTrade_2eproto();
  return *default_instance_;
}

AddGiveItemSceneTradeCmd* AddGiveItemSceneTradeCmd::default_instance_ = NULL;

AddGiveItemSceneTradeCmd* AddGiveItemSceneTradeCmd::New() const {
  return new AddGiveItemSceneTradeCmd;
}

void AddGiveItemSceneTradeCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AddGiveItemSceneTradeCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(charid_, count_);
    cmd_ = 201;
    param_ = 17;
    if (has_itemdata()) {
      if (itemdata_ != NULL) itemdata_->::Cmd::ItemData::Clear();
    }
    background_ = 0u;
  }
  ret_ = false;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddGiveItemSceneTradeCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.AddGiveItemSceneTradeCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.RecordServerTradeParam param = 2 [default = ADD_GIVE_ITEM_RECORDTRADE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::RecordServerTradeParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::RecordServerTradeParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_id;
        break;
      }

      // optional uint64 id = 4;
      case 4: {
        if (tag == 32) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_itemid;
        break;
      }

      // optional uint32 itemid = 5;
      case 5: {
        if (tag == 40) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_count;
        break;
      }

      // optional uint32 count = 6;
      case 6: {
        if (tag == 48) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_itemData;
        break;
      }

      // optional .Cmd.ItemData itemData = 7;
      case 7: {
        if (tag == 58) {
         parse_itemData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_itemdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_background;
        break;
      }

      // optional uint32 background = 8;
      case 8: {
        if (tag == 64) {
         parse_background:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &background_)));
          set_has_background();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_ret;
        break;
      }

      // optional bool ret = 9;
      case 9: {
        if (tag == 72) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.AddGiveItemSceneTradeCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.AddGiveItemSceneTradeCmd)
  return false;
#undef DO_
}

void AddGiveItemSceneTradeCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.AddGiveItemSceneTradeCmd)
  // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.RecordServerTradeParam param = 2 [default = ADD_GIVE_ITEM_RECORDTRADE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional uint64 id = 4;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->id(), output);
  }

  // optional uint32 itemid = 5;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->itemid(), output);
  }

  // optional uint32 count = 6;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->count(), output);
  }

  // optional .Cmd.ItemData itemData = 7;
  if (has_itemdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->itemdata(), output);
  }

  // optional uint32 background = 8;
  if (has_background()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->background(), output);
  }

  // optional bool ret = 9;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.AddGiveItemSceneTradeCmd)
}

::google::protobuf::uint8* AddGiveItemSceneTradeCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.AddGiveItemSceneTradeCmd)
  // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.RecordServerTradeParam param = 2 [default = ADD_GIVE_ITEM_RECORDTRADE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional uint64 id = 4;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->id(), target);
  }

  // optional uint32 itemid = 5;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->itemid(), target);
  }

  // optional uint32 count = 6;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->count(), target);
  }

  // optional .Cmd.ItemData itemData = 7;
  if (has_itemdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->itemdata(), target);
  }

  // optional uint32 background = 8;
  if (has_background()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->background(), target);
  }

  // optional bool ret = 9;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.AddGiveItemSceneTradeCmd)
  return target;
}

int AddGiveItemSceneTradeCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.RecordServerTradeParam param = 2 [default = ADD_GIVE_ITEM_RECORDTRADE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint64 id = 4;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint32 itemid = 5;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 count = 6;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional .Cmd.ItemData itemData = 7;
    if (has_itemdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->itemdata());
    }

    // optional uint32 background = 8;
    if (has_background()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->background());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool ret = 9;
    if (has_ret()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddGiveItemSceneTradeCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddGiveItemSceneTradeCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddGiveItemSceneTradeCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddGiveItemSceneTradeCmd::MergeFrom(const AddGiveItemSceneTradeCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_itemdata()) {
      mutable_itemdata()->::Cmd::ItemData::MergeFrom(from.itemdata());
    }
    if (from.has_background()) {
      set_background(from.background());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddGiveItemSceneTradeCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddGiveItemSceneTradeCmd::CopyFrom(const AddGiveItemSceneTradeCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddGiveItemSceneTradeCmd::IsInitialized() const {

  return true;
}

void AddGiveItemSceneTradeCmd::Swap(AddGiveItemSceneTradeCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(id_, other->id_);
    std::swap(itemid_, other->itemid_);
    std::swap(count_, other->count_);
    std::swap(itemdata_, other->itemdata_);
    std::swap(background_, other->background_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddGiveItemSceneTradeCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddGiveItemSceneTradeCmd_descriptor_;
  metadata.reflection = AddGiveItemSceneTradeCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReceiveGiveSceneTradeCmd::kCmdFieldNumber;
const int ReceiveGiveSceneTradeCmd::kParamFieldNumber;
const int ReceiveGiveSceneTradeCmd::kCharidFieldNumber;
const int ReceiveGiveSceneTradeCmd::kIdFieldNumber;
#endif  // !_MSC_VER

ReceiveGiveSceneTradeCmd::ReceiveGiveSceneTradeCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ReceiveGiveSceneTradeCmd)
}

void ReceiveGiveSceneTradeCmd::InitAsDefaultInstance() {
}

ReceiveGiveSceneTradeCmd::ReceiveGiveSceneTradeCmd(const ReceiveGiveSceneTradeCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ReceiveGiveSceneTradeCmd)
}

void ReceiveGiveSceneTradeCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 201;
  param_ = 16;
  charid_ = GOOGLE_ULONGLONG(0);
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReceiveGiveSceneTradeCmd::~ReceiveGiveSceneTradeCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ReceiveGiveSceneTradeCmd)
  SharedDtor();
}

void ReceiveGiveSceneTradeCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReceiveGiveSceneTradeCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReceiveGiveSceneTradeCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReceiveGiveSceneTradeCmd_descriptor_;
}

const ReceiveGiveSceneTradeCmd& ReceiveGiveSceneTradeCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneTrade_2eproto();
  return *default_instance_;
}

ReceiveGiveSceneTradeCmd* ReceiveGiveSceneTradeCmd::default_instance_ = NULL;

ReceiveGiveSceneTradeCmd* ReceiveGiveSceneTradeCmd::New() const {
  return new ReceiveGiveSceneTradeCmd;
}

void ReceiveGiveSceneTradeCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReceiveGiveSceneTradeCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(charid_, id_);
    cmd_ = 201;
    param_ = 16;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReceiveGiveSceneTradeCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ReceiveGiveSceneTradeCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.RecordServerTradeParam param = 2 [default = RECEIVE_GIVE_RECORDTRADE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::RecordServerTradeParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::RecordServerTradeParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_id;
        break;
      }

      // optional uint64 id = 4;
      case 4: {
        if (tag == 32) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ReceiveGiveSceneTradeCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ReceiveGiveSceneTradeCmd)
  return false;
#undef DO_
}

void ReceiveGiveSceneTradeCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ReceiveGiveSceneTradeCmd)
  // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.RecordServerTradeParam param = 2 [default = RECEIVE_GIVE_RECORDTRADE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional uint64 id = 4;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ReceiveGiveSceneTradeCmd)
}

::google::protobuf::uint8* ReceiveGiveSceneTradeCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ReceiveGiveSceneTradeCmd)
  // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.RecordServerTradeParam param = 2 [default = RECEIVE_GIVE_RECORDTRADE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional uint64 id = 4;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ReceiveGiveSceneTradeCmd)
  return target;
}

int ReceiveGiveSceneTradeCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.RecordServerTradeParam param = 2 [default = RECEIVE_GIVE_RECORDTRADE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint64 id = 4;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReceiveGiveSceneTradeCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReceiveGiveSceneTradeCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReceiveGiveSceneTradeCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReceiveGiveSceneTradeCmd::MergeFrom(const ReceiveGiveSceneTradeCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReceiveGiveSceneTradeCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReceiveGiveSceneTradeCmd::CopyFrom(const ReceiveGiveSceneTradeCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReceiveGiveSceneTradeCmd::IsInitialized() const {

  return true;
}

void ReceiveGiveSceneTradeCmd::Swap(ReceiveGiveSceneTradeCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReceiveGiveSceneTradeCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReceiveGiveSceneTradeCmd_descriptor_;
  metadata.reflection = ReceiveGiveSceneTradeCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NtfGiveStatusSceneTradeCmd::kCmdFieldNumber;
const int NtfGiveStatusSceneTradeCmd::kParamFieldNumber;
const int NtfGiveStatusSceneTradeCmd::kCharidFieldNumber;
const int NtfGiveStatusSceneTradeCmd::kIdFieldNumber;
const int NtfGiveStatusSceneTradeCmd::kStatusFieldNumber;
const int NtfGiveStatusSceneTradeCmd::kNameFieldNumber;
#endif  // !_MSC_VER

NtfGiveStatusSceneTradeCmd::NtfGiveStatusSceneTradeCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.NtfGiveStatusSceneTradeCmd)
}

void NtfGiveStatusSceneTradeCmd::InitAsDefaultInstance() {
}

NtfGiveStatusSceneTradeCmd::NtfGiveStatusSceneTradeCmd(const NtfGiveStatusSceneTradeCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.NtfGiveStatusSceneTradeCmd)
}

void NtfGiveStatusSceneTradeCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 201;
  param_ = 18;
  charid_ = GOOGLE_ULONGLONG(0);
  id_ = GOOGLE_ULONGLONG(0);
  status_ = 1;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NtfGiveStatusSceneTradeCmd::~NtfGiveStatusSceneTradeCmd() {
  // @@protoc_insertion_point(destructor:Cmd.NtfGiveStatusSceneTradeCmd)
  SharedDtor();
}

void NtfGiveStatusSceneTradeCmd::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void NtfGiveStatusSceneTradeCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NtfGiveStatusSceneTradeCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NtfGiveStatusSceneTradeCmd_descriptor_;
}

const NtfGiveStatusSceneTradeCmd& NtfGiveStatusSceneTradeCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneTrade_2eproto();
  return *default_instance_;
}

NtfGiveStatusSceneTradeCmd* NtfGiveStatusSceneTradeCmd::default_instance_ = NULL;

NtfGiveStatusSceneTradeCmd* NtfGiveStatusSceneTradeCmd::New() const {
  return new NtfGiveStatusSceneTradeCmd;
}

void NtfGiveStatusSceneTradeCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NtfGiveStatusSceneTradeCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(charid_, id_);
    cmd_ = 201;
    param_ = 18;
    status_ = 1;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NtfGiveStatusSceneTradeCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.NtfGiveStatusSceneTradeCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.RecordServerTradeParam param = 2 [default = NTF_GIVE_STATUS_RECORDTRADE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::RecordServerTradeParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::RecordServerTradeParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_id;
        break;
      }

      // optional uint64 id = 4;
      case 4: {
        if (tag == 32) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_status;
        break;
      }

      // optional .Cmd.EGiveStatus status = 5;
      case 5: {
        if (tag == 40) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EGiveStatus_IsValid(value)) {
            set_status(static_cast< ::Cmd::EGiveStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_name;
        break;
      }

      // optional string name = 6;
      case 6: {
        if (tag == 50) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.NtfGiveStatusSceneTradeCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.NtfGiveStatusSceneTradeCmd)
  return false;
#undef DO_
}

void NtfGiveStatusSceneTradeCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.NtfGiveStatusSceneTradeCmd)
  // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.RecordServerTradeParam param = 2 [default = NTF_GIVE_STATUS_RECORDTRADE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional uint64 id = 4;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->id(), output);
  }

  // optional .Cmd.EGiveStatus status = 5;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->status(), output);
  }

  // optional string name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.NtfGiveStatusSceneTradeCmd)
}

::google::protobuf::uint8* NtfGiveStatusSceneTradeCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.NtfGiveStatusSceneTradeCmd)
  // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.RecordServerTradeParam param = 2 [default = NTF_GIVE_STATUS_RECORDTRADE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional uint64 id = 4;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->id(), target);
  }

  // optional .Cmd.EGiveStatus status = 5;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->status(), target);
  }

  // optional string name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.NtfGiveStatusSceneTradeCmd)
  return target;
}

int NtfGiveStatusSceneTradeCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.RecordServerTradeParam param = 2 [default = NTF_GIVE_STATUS_RECORDTRADE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint64 id = 4;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional .Cmd.EGiveStatus status = 5;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional string name = 6;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NtfGiveStatusSceneTradeCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NtfGiveStatusSceneTradeCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NtfGiveStatusSceneTradeCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NtfGiveStatusSceneTradeCmd::MergeFrom(const NtfGiveStatusSceneTradeCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NtfGiveStatusSceneTradeCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NtfGiveStatusSceneTradeCmd::CopyFrom(const NtfGiveStatusSceneTradeCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NtfGiveStatusSceneTradeCmd::IsInitialized() const {

  return true;
}

void NtfGiveStatusSceneTradeCmd::Swap(NtfGiveStatusSceneTradeCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(id_, other->id_);
    std::swap(status_, other->status_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NtfGiveStatusSceneTradeCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NtfGiveStatusSceneTradeCmd_descriptor_;
  metadata.reflection = NtfGiveStatusSceneTradeCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReduceQuotaSceneTradeCmd::kCmdFieldNumber;
const int ReduceQuotaSceneTradeCmd::kParamFieldNumber;
const int ReduceQuotaSceneTradeCmd::kCharidFieldNumber;
const int ReduceQuotaSceneTradeCmd::kIdFieldNumber;
const int ReduceQuotaSceneTradeCmd::kQuotaFieldNumber;
const int ReduceQuotaSceneTradeCmd::kReceivernameFieldNumber;
#endif  // !_MSC_VER

ReduceQuotaSceneTradeCmd::ReduceQuotaSceneTradeCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ReduceQuotaSceneTradeCmd)
}

void ReduceQuotaSceneTradeCmd::InitAsDefaultInstance() {
}

ReduceQuotaSceneTradeCmd::ReduceQuotaSceneTradeCmd(const ReduceQuotaSceneTradeCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ReduceQuotaSceneTradeCmd)
}

void ReduceQuotaSceneTradeCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 201;
  param_ = 19;
  charid_ = GOOGLE_ULONGLONG(0);
  id_ = GOOGLE_ULONGLONG(0);
  quota_ = GOOGLE_ULONGLONG(0);
  receivername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReduceQuotaSceneTradeCmd::~ReduceQuotaSceneTradeCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ReduceQuotaSceneTradeCmd)
  SharedDtor();
}

void ReduceQuotaSceneTradeCmd::SharedDtor() {
  if (receivername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete receivername_;
  }
  if (this != default_instance_) {
  }
}

void ReduceQuotaSceneTradeCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReduceQuotaSceneTradeCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReduceQuotaSceneTradeCmd_descriptor_;
}

const ReduceQuotaSceneTradeCmd& ReduceQuotaSceneTradeCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneTrade_2eproto();
  return *default_instance_;
}

ReduceQuotaSceneTradeCmd* ReduceQuotaSceneTradeCmd::default_instance_ = NULL;

ReduceQuotaSceneTradeCmd* ReduceQuotaSceneTradeCmd::New() const {
  return new ReduceQuotaSceneTradeCmd;
}

void ReduceQuotaSceneTradeCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReduceQuotaSceneTradeCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(charid_, quota_);
    cmd_ = 201;
    param_ = 19;
    if (has_receivername()) {
      if (receivername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        receivername_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReduceQuotaSceneTradeCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ReduceQuotaSceneTradeCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.RecordServerTradeParam param = 2 [default = REDUCE_QUOTA_RECORDTRADE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::RecordServerTradeParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::RecordServerTradeParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_id;
        break;
      }

      // optional uint64 id = 4;
      case 4: {
        if (tag == 32) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_quota;
        break;
      }

      // optional uint64 quota = 5;
      case 5: {
        if (tag == 40) {
         parse_quota:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &quota_)));
          set_has_quota();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_receivername;
        break;
      }

      // optional string receivername = 6;
      case 6: {
        if (tag == 50) {
         parse_receivername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_receivername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->receivername().data(), this->receivername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "receivername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ReduceQuotaSceneTradeCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ReduceQuotaSceneTradeCmd)
  return false;
#undef DO_
}

void ReduceQuotaSceneTradeCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ReduceQuotaSceneTradeCmd)
  // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.RecordServerTradeParam param = 2 [default = REDUCE_QUOTA_RECORDTRADE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional uint64 id = 4;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->id(), output);
  }

  // optional uint64 quota = 5;
  if (has_quota()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->quota(), output);
  }

  // optional string receivername = 6;
  if (has_receivername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->receivername().data(), this->receivername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "receivername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->receivername(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ReduceQuotaSceneTradeCmd)
}

::google::protobuf::uint8* ReduceQuotaSceneTradeCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ReduceQuotaSceneTradeCmd)
  // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.RecordServerTradeParam param = 2 [default = REDUCE_QUOTA_RECORDTRADE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional uint64 id = 4;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->id(), target);
  }

  // optional uint64 quota = 5;
  if (has_quota()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->quota(), target);
  }

  // optional string receivername = 6;
  if (has_receivername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->receivername().data(), this->receivername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "receivername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->receivername(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ReduceQuotaSceneTradeCmd)
  return target;
}

int ReduceQuotaSceneTradeCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.RecordServerTradeParam param = 2 [default = REDUCE_QUOTA_RECORDTRADE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint64 id = 4;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint64 quota = 5;
    if (has_quota()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->quota());
    }

    // optional string receivername = 6;
    if (has_receivername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->receivername());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReduceQuotaSceneTradeCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReduceQuotaSceneTradeCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReduceQuotaSceneTradeCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReduceQuotaSceneTradeCmd::MergeFrom(const ReduceQuotaSceneTradeCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_quota()) {
      set_quota(from.quota());
    }
    if (from.has_receivername()) {
      set_receivername(from.receivername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReduceQuotaSceneTradeCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReduceQuotaSceneTradeCmd::CopyFrom(const ReduceQuotaSceneTradeCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReduceQuotaSceneTradeCmd::IsInitialized() const {

  return true;
}

void ReduceQuotaSceneTradeCmd::Swap(ReduceQuotaSceneTradeCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(id_, other->id_);
    std::swap(quota_, other->quota_);
    std::swap(receivername_, other->receivername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReduceQuotaSceneTradeCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReduceQuotaSceneTradeCmd_descriptor_;
  metadata.reflection = ReduceQuotaSceneTradeCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnlockQuotaSceneTradeCmd::kCmdFieldNumber;
const int UnlockQuotaSceneTradeCmd::kParamFieldNumber;
const int UnlockQuotaSceneTradeCmd::kCharidFieldNumber;
const int UnlockQuotaSceneTradeCmd::kIdFieldNumber;
const int UnlockQuotaSceneTradeCmd::kQuotaFieldNumber;
const int UnlockQuotaSceneTradeCmd::kReceivernameFieldNumber;
#endif  // !_MSC_VER

UnlockQuotaSceneTradeCmd::UnlockQuotaSceneTradeCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UnlockQuotaSceneTradeCmd)
}

void UnlockQuotaSceneTradeCmd::InitAsDefaultInstance() {
}

UnlockQuotaSceneTradeCmd::UnlockQuotaSceneTradeCmd(const UnlockQuotaSceneTradeCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UnlockQuotaSceneTradeCmd)
}

void UnlockQuotaSceneTradeCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 201;
  param_ = 24;
  charid_ = GOOGLE_ULONGLONG(0);
  id_ = GOOGLE_ULONGLONG(0);
  quota_ = GOOGLE_ULONGLONG(0);
  receivername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnlockQuotaSceneTradeCmd::~UnlockQuotaSceneTradeCmd() {
  // @@protoc_insertion_point(destructor:Cmd.UnlockQuotaSceneTradeCmd)
  SharedDtor();
}

void UnlockQuotaSceneTradeCmd::SharedDtor() {
  if (receivername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete receivername_;
  }
  if (this != default_instance_) {
  }
}

void UnlockQuotaSceneTradeCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnlockQuotaSceneTradeCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnlockQuotaSceneTradeCmd_descriptor_;
}

const UnlockQuotaSceneTradeCmd& UnlockQuotaSceneTradeCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneTrade_2eproto();
  return *default_instance_;
}

UnlockQuotaSceneTradeCmd* UnlockQuotaSceneTradeCmd::default_instance_ = NULL;

UnlockQuotaSceneTradeCmd* UnlockQuotaSceneTradeCmd::New() const {
  return new UnlockQuotaSceneTradeCmd;
}

void UnlockQuotaSceneTradeCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UnlockQuotaSceneTradeCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(charid_, quota_);
    cmd_ = 201;
    param_ = 24;
    if (has_receivername()) {
      if (receivername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        receivername_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnlockQuotaSceneTradeCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UnlockQuotaSceneTradeCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.RecordServerTradeParam param = 2 [default = UNLOCK_QUOTA_RECORDTRADE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::RecordServerTradeParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::RecordServerTradeParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_id;
        break;
      }

      // optional uint64 id = 4;
      case 4: {
        if (tag == 32) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_quota;
        break;
      }

      // optional uint64 quota = 5;
      case 5: {
        if (tag == 40) {
         parse_quota:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &quota_)));
          set_has_quota();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_receivername;
        break;
      }

      // optional string receivername = 6;
      case 6: {
        if (tag == 50) {
         parse_receivername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_receivername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->receivername().data(), this->receivername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "receivername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UnlockQuotaSceneTradeCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UnlockQuotaSceneTradeCmd)
  return false;
#undef DO_
}

void UnlockQuotaSceneTradeCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UnlockQuotaSceneTradeCmd)
  // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.RecordServerTradeParam param = 2 [default = UNLOCK_QUOTA_RECORDTRADE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional uint64 id = 4;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->id(), output);
  }

  // optional uint64 quota = 5;
  if (has_quota()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->quota(), output);
  }

  // optional string receivername = 6;
  if (has_receivername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->receivername().data(), this->receivername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "receivername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->receivername(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UnlockQuotaSceneTradeCmd)
}

::google::protobuf::uint8* UnlockQuotaSceneTradeCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UnlockQuotaSceneTradeCmd)
  // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.RecordServerTradeParam param = 2 [default = UNLOCK_QUOTA_RECORDTRADE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional uint64 id = 4;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->id(), target);
  }

  // optional uint64 quota = 5;
  if (has_quota()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->quota(), target);
  }

  // optional string receivername = 6;
  if (has_receivername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->receivername().data(), this->receivername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "receivername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->receivername(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UnlockQuotaSceneTradeCmd)
  return target;
}

int UnlockQuotaSceneTradeCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.RecordServerTradeParam param = 2 [default = UNLOCK_QUOTA_RECORDTRADE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint64 id = 4;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint64 quota = 5;
    if (has_quota()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->quota());
    }

    // optional string receivername = 6;
    if (has_receivername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->receivername());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnlockQuotaSceneTradeCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnlockQuotaSceneTradeCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnlockQuotaSceneTradeCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnlockQuotaSceneTradeCmd::MergeFrom(const UnlockQuotaSceneTradeCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_quota()) {
      set_quota(from.quota());
    }
    if (from.has_receivername()) {
      set_receivername(from.receivername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnlockQuotaSceneTradeCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnlockQuotaSceneTradeCmd::CopyFrom(const UnlockQuotaSceneTradeCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnlockQuotaSceneTradeCmd::IsInitialized() const {

  return true;
}

void UnlockQuotaSceneTradeCmd::Swap(UnlockQuotaSceneTradeCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(id_, other->id_);
    std::swap(quota_, other->quota_);
    std::swap(receivername_, other->receivername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnlockQuotaSceneTradeCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnlockQuotaSceneTradeCmd_descriptor_;
  metadata.reflection = UnlockQuotaSceneTradeCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExtraPermissionSceneTradeCmd::kCmdFieldNumber;
const int ExtraPermissionSceneTradeCmd::kParamFieldNumber;
const int ExtraPermissionSceneTradeCmd::kCharidFieldNumber;
const int ExtraPermissionSceneTradeCmd::kPermissionFieldNumber;
const int ExtraPermissionSceneTradeCmd::kValueFieldNumber;
#endif  // !_MSC_VER

ExtraPermissionSceneTradeCmd::ExtraPermissionSceneTradeCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ExtraPermissionSceneTradeCmd)
}

void ExtraPermissionSceneTradeCmd::InitAsDefaultInstance() {
}

ExtraPermissionSceneTradeCmd::ExtraPermissionSceneTradeCmd(const ExtraPermissionSceneTradeCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ExtraPermissionSceneTradeCmd)
}

void ExtraPermissionSceneTradeCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 201;
  param_ = 20;
  charid_ = GOOGLE_ULONGLONG(0);
  permission_ = 1;
  value_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExtraPermissionSceneTradeCmd::~ExtraPermissionSceneTradeCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ExtraPermissionSceneTradeCmd)
  SharedDtor();
}

void ExtraPermissionSceneTradeCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExtraPermissionSceneTradeCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExtraPermissionSceneTradeCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExtraPermissionSceneTradeCmd_descriptor_;
}

const ExtraPermissionSceneTradeCmd& ExtraPermissionSceneTradeCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneTrade_2eproto();
  return *default_instance_;
}

ExtraPermissionSceneTradeCmd* ExtraPermissionSceneTradeCmd::default_instance_ = NULL;

ExtraPermissionSceneTradeCmd* ExtraPermissionSceneTradeCmd::New() const {
  return new ExtraPermissionSceneTradeCmd;
}

void ExtraPermissionSceneTradeCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ExtraPermissionSceneTradeCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(charid_, value_);
    cmd_ = 201;
    param_ = 20;
    permission_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExtraPermissionSceneTradeCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ExtraPermissionSceneTradeCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.RecordServerTradeParam param = 2 [default = EXTRA_PERMISSION_RECORDTRADE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::RecordServerTradeParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::RecordServerTradeParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_permission;
        break;
      }

      // optional .Cmd.EPermission permission = 4;
      case 4: {
        if (tag == 32) {
         parse_permission:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EPermission_IsValid(value)) {
            set_permission(static_cast< ::Cmd::EPermission >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_value;
        break;
      }

      // optional uint64 value = 5;
      case 5: {
        if (tag == 40) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ExtraPermissionSceneTradeCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ExtraPermissionSceneTradeCmd)
  return false;
#undef DO_
}

void ExtraPermissionSceneTradeCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ExtraPermissionSceneTradeCmd)
  // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.RecordServerTradeParam param = 2 [default = EXTRA_PERMISSION_RECORDTRADE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional .Cmd.EPermission permission = 4;
  if (has_permission()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->permission(), output);
  }

  // optional uint64 value = 5;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ExtraPermissionSceneTradeCmd)
}

::google::protobuf::uint8* ExtraPermissionSceneTradeCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ExtraPermissionSceneTradeCmd)
  // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.RecordServerTradeParam param = 2 [default = EXTRA_PERMISSION_RECORDTRADE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional .Cmd.EPermission permission = 4;
  if (has_permission()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->permission(), target);
  }

  // optional uint64 value = 5;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ExtraPermissionSceneTradeCmd)
  return target;
}

int ExtraPermissionSceneTradeCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.RecordServerTradeParam param = 2 [default = EXTRA_PERMISSION_RECORDTRADE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional .Cmd.EPermission permission = 4;
    if (has_permission()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->permission());
    }

    // optional uint64 value = 5;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExtraPermissionSceneTradeCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExtraPermissionSceneTradeCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExtraPermissionSceneTradeCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExtraPermissionSceneTradeCmd::MergeFrom(const ExtraPermissionSceneTradeCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_permission()) {
      set_permission(from.permission());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExtraPermissionSceneTradeCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExtraPermissionSceneTradeCmd::CopyFrom(const ExtraPermissionSceneTradeCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtraPermissionSceneTradeCmd::IsInitialized() const {

  return true;
}

void ExtraPermissionSceneTradeCmd::Swap(ExtraPermissionSceneTradeCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(permission_, other->permission_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExtraPermissionSceneTradeCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExtraPermissionSceneTradeCmd_descriptor_;
  metadata.reflection = ExtraPermissionSceneTradeCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SecurityCmdSceneTradeCmd::kCmdFieldNumber;
const int SecurityCmdSceneTradeCmd::kParamFieldNumber;
const int SecurityCmdSceneTradeCmd::kValidFieldNumber;
const int SecurityCmdSceneTradeCmd::kTypeFieldNumber;
const int SecurityCmdSceneTradeCmd::kCharidFieldNumber;
const int SecurityCmdSceneTradeCmd::kItemidFieldNumber;
const int SecurityCmdSceneTradeCmd::kRefinelvFieldNumber;
const int SecurityCmdSceneTradeCmd::kKeyFieldNumber;
#endif  // !_MSC_VER

SecurityCmdSceneTradeCmd::SecurityCmdSceneTradeCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SecurityCmdSceneTradeCmd)
}

void SecurityCmdSceneTradeCmd::InitAsDefaultInstance() {
}

SecurityCmdSceneTradeCmd::SecurityCmdSceneTradeCmd(const SecurityCmdSceneTradeCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SecurityCmdSceneTradeCmd)
}

void SecurityCmdSceneTradeCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 201;
  param_ = 21;
  valid_ = false;
  type_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  itemid_ = 0u;
  refinelv_ = 0;
  key_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SecurityCmdSceneTradeCmd::~SecurityCmdSceneTradeCmd() {
  // @@protoc_insertion_point(destructor:Cmd.SecurityCmdSceneTradeCmd)
  SharedDtor();
}

void SecurityCmdSceneTradeCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SecurityCmdSceneTradeCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SecurityCmdSceneTradeCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SecurityCmdSceneTradeCmd_descriptor_;
}

const SecurityCmdSceneTradeCmd& SecurityCmdSceneTradeCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneTrade_2eproto();
  return *default_instance_;
}

SecurityCmdSceneTradeCmd* SecurityCmdSceneTradeCmd::default_instance_ = NULL;

SecurityCmdSceneTradeCmd* SecurityCmdSceneTradeCmd::New() const {
  return new SecurityCmdSceneTradeCmd;
}

void SecurityCmdSceneTradeCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SecurityCmdSceneTradeCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(valid_, key_);
    cmd_ = 201;
    param_ = 21;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SecurityCmdSceneTradeCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SecurityCmdSceneTradeCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.RecordServerTradeParam param = 2 [default = SECURITY_CMD_RECORDTRADE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::RecordServerTradeParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::RecordServerTradeParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_valid;
        break;
      }

      // optional bool valid = 3;
      case 3: {
        if (tag == 24) {
         parse_valid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &valid_)));
          set_has_valid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional .Cmd.ESecurityType type = 4;
      case 4: {
        if (tag == 32) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ESecurityType_IsValid(value)) {
            set_type(static_cast< ::Cmd::ESecurityType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 5;
      case 5: {
        if (tag == 40) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_itemid;
        break;
      }

      // optional uint32 itemid = 6;
      case 6: {
        if (tag == 48) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_refinelv;
        break;
      }

      // optional int32 refinelv = 7;
      case 7: {
        if (tag == 56) {
         parse_refinelv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refinelv_)));
          set_has_refinelv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_key;
        break;
      }

      // optional uint64 key = 8;
      case 8: {
        if (tag == 64) {
         parse_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SecurityCmdSceneTradeCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SecurityCmdSceneTradeCmd)
  return false;
#undef DO_
}

void SecurityCmdSceneTradeCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SecurityCmdSceneTradeCmd)
  // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.RecordServerTradeParam param = 2 [default = SECURITY_CMD_RECORDTRADE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional bool valid = 3;
  if (has_valid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->valid(), output);
  }

  // optional .Cmd.ESecurityType type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  // optional uint64 charid = 5;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->charid(), output);
  }

  // optional uint32 itemid = 6;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->itemid(), output);
  }

  // optional int32 refinelv = 7;
  if (has_refinelv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->refinelv(), output);
  }

  // optional uint64 key = 8;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SecurityCmdSceneTradeCmd)
}

::google::protobuf::uint8* SecurityCmdSceneTradeCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SecurityCmdSceneTradeCmd)
  // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.RecordServerTradeParam param = 2 [default = SECURITY_CMD_RECORDTRADE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional bool valid = 3;
  if (has_valid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->valid(), target);
  }

  // optional .Cmd.ESecurityType type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  // optional uint64 charid = 5;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->charid(), target);
  }

  // optional uint32 itemid = 6;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->itemid(), target);
  }

  // optional int32 refinelv = 7;
  if (has_refinelv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->refinelv(), target);
  }

  // optional uint64 key = 8;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SecurityCmdSceneTradeCmd)
  return target;
}

int SecurityCmdSceneTradeCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.RecordServerTradeParam param = 2 [default = SECURITY_CMD_RECORDTRADE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional bool valid = 3;
    if (has_valid()) {
      total_size += 1 + 1;
    }

    // optional .Cmd.ESecurityType type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint64 charid = 5;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 itemid = 6;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional int32 refinelv = 7;
    if (has_refinelv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refinelv());
    }

    // optional uint64 key = 8;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SecurityCmdSceneTradeCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SecurityCmdSceneTradeCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SecurityCmdSceneTradeCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SecurityCmdSceneTradeCmd::MergeFrom(const SecurityCmdSceneTradeCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_valid()) {
      set_valid(from.valid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_refinelv()) {
      set_refinelv(from.refinelv());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SecurityCmdSceneTradeCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SecurityCmdSceneTradeCmd::CopyFrom(const SecurityCmdSceneTradeCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecurityCmdSceneTradeCmd::IsInitialized() const {

  return true;
}

void SecurityCmdSceneTradeCmd::Swap(SecurityCmdSceneTradeCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(valid_, other->valid_);
    std::swap(type_, other->type_);
    std::swap(charid_, other->charid_);
    std::swap(itemid_, other->itemid_);
    std::swap(refinelv_, other->refinelv_);
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SecurityCmdSceneTradeCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SecurityCmdSceneTradeCmd_descriptor_;
  metadata.reflection = SecurityCmdSceneTradeCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TradePriceQueryTradeCmd::kCmdFieldNumber;
const int TradePriceQueryTradeCmd::kParamFieldNumber;
const int TradePriceQueryTradeCmd::kBatchidFieldNumber;
const int TradePriceQueryTradeCmd::kSignupIdFieldNumber;
const int TradePriceQueryTradeCmd::kPriceFieldNumber;
const int TradePriceQueryTradeCmd::kItemdataFieldNumber;
#endif  // !_MSC_VER

TradePriceQueryTradeCmd::TradePriceQueryTradeCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TradePriceQueryTradeCmd)
}

void TradePriceQueryTradeCmd::InitAsDefaultInstance() {
  itemdata_ = const_cast< ::Cmd::ItemData*>(&::Cmd::ItemData::default_instance());
}

TradePriceQueryTradeCmd::TradePriceQueryTradeCmd(const TradePriceQueryTradeCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TradePriceQueryTradeCmd)
}

void TradePriceQueryTradeCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 201;
  param_ = 22;
  batchid_ = GOOGLE_ULONGLONG(0);
  signup_id_ = GOOGLE_ULONGLONG(0);
  price_ = GOOGLE_ULONGLONG(0);
  itemdata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TradePriceQueryTradeCmd::~TradePriceQueryTradeCmd() {
  // @@protoc_insertion_point(destructor:Cmd.TradePriceQueryTradeCmd)
  SharedDtor();
}

void TradePriceQueryTradeCmd::SharedDtor() {
  if (this != default_instance_) {
    delete itemdata_;
  }
}

void TradePriceQueryTradeCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TradePriceQueryTradeCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TradePriceQueryTradeCmd_descriptor_;
}

const TradePriceQueryTradeCmd& TradePriceQueryTradeCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneTrade_2eproto();
  return *default_instance_;
}

TradePriceQueryTradeCmd* TradePriceQueryTradeCmd::default_instance_ = NULL;

TradePriceQueryTradeCmd* TradePriceQueryTradeCmd::New() const {
  return new TradePriceQueryTradeCmd;
}

void TradePriceQueryTradeCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TradePriceQueryTradeCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(batchid_, price_);
    cmd_ = 201;
    param_ = 22;
    if (has_itemdata()) {
      if (itemdata_ != NULL) itemdata_->::Cmd::ItemData::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TradePriceQueryTradeCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TradePriceQueryTradeCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.RecordServerTradeParam param = 2 [default = TRADE_PRICE_QUERY_RECORDTRADE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::RecordServerTradeParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::RecordServerTradeParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_batchid;
        break;
      }

      // optional uint64 batchid = 3;
      case 3: {
        if (tag == 24) {
         parse_batchid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &batchid_)));
          set_has_batchid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_signup_id;
        break;
      }

      // optional uint64 signup_id = 4;
      case 4: {
        if (tag == 32) {
         parse_signup_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &signup_id_)));
          set_has_signup_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_price;
        break;
      }

      // optional uint64 price = 5;
      case 5: {
        if (tag == 40) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_itemdata;
        break;
      }

      // optional .Cmd.ItemData itemdata = 6;
      case 6: {
        if (tag == 50) {
         parse_itemdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_itemdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TradePriceQueryTradeCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TradePriceQueryTradeCmd)
  return false;
#undef DO_
}

void TradePriceQueryTradeCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TradePriceQueryTradeCmd)
  // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.RecordServerTradeParam param = 2 [default = TRADE_PRICE_QUERY_RECORDTRADE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 batchid = 3;
  if (has_batchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->batchid(), output);
  }

  // optional uint64 signup_id = 4;
  if (has_signup_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->signup_id(), output);
  }

  // optional uint64 price = 5;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->price(), output);
  }

  // optional .Cmd.ItemData itemdata = 6;
  if (has_itemdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->itemdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TradePriceQueryTradeCmd)
}

::google::protobuf::uint8* TradePriceQueryTradeCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TradePriceQueryTradeCmd)
  // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.RecordServerTradeParam param = 2 [default = TRADE_PRICE_QUERY_RECORDTRADE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 batchid = 3;
  if (has_batchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->batchid(), target);
  }

  // optional uint64 signup_id = 4;
  if (has_signup_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->signup_id(), target);
  }

  // optional uint64 price = 5;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->price(), target);
  }

  // optional .Cmd.ItemData itemdata = 6;
  if (has_itemdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->itemdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TradePriceQueryTradeCmd)
  return target;
}

int TradePriceQueryTradeCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.RecordServerTradeParam param = 2 [default = TRADE_PRICE_QUERY_RECORDTRADE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 batchid = 3;
    if (has_batchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->batchid());
    }

    // optional uint64 signup_id = 4;
    if (has_signup_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->signup_id());
    }

    // optional uint64 price = 5;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->price());
    }

    // optional .Cmd.ItemData itemdata = 6;
    if (has_itemdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->itemdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TradePriceQueryTradeCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TradePriceQueryTradeCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TradePriceQueryTradeCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TradePriceQueryTradeCmd::MergeFrom(const TradePriceQueryTradeCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_batchid()) {
      set_batchid(from.batchid());
    }
    if (from.has_signup_id()) {
      set_signup_id(from.signup_id());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_itemdata()) {
      mutable_itemdata()->::Cmd::ItemData::MergeFrom(from.itemdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TradePriceQueryTradeCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradePriceQueryTradeCmd::CopyFrom(const TradePriceQueryTradeCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradePriceQueryTradeCmd::IsInitialized() const {

  return true;
}

void TradePriceQueryTradeCmd::Swap(TradePriceQueryTradeCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(batchid_, other->batchid_);
    std::swap(signup_id_, other->signup_id_);
    std::swap(price_, other->price_);
    std::swap(itemdata_, other->itemdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TradePriceQueryTradeCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TradePriceQueryTradeCmd_descriptor_;
  metadata.reflection = TradePriceQueryTradeCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BoothOpenTradeCmd::kCmdFieldNumber;
const int BoothOpenTradeCmd::kParamFieldNumber;
const int BoothOpenTradeCmd::kCharidFieldNumber;
const int BoothOpenTradeCmd::kOpenFieldNumber;
#endif  // !_MSC_VER

BoothOpenTradeCmd::BoothOpenTradeCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BoothOpenTradeCmd)
}

void BoothOpenTradeCmd::InitAsDefaultInstance() {
}

BoothOpenTradeCmd::BoothOpenTradeCmd(const BoothOpenTradeCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BoothOpenTradeCmd)
}

void BoothOpenTradeCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 201;
  param_ = 23;
  charid_ = GOOGLE_ULONGLONG(0);
  open_ = 1u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BoothOpenTradeCmd::~BoothOpenTradeCmd() {
  // @@protoc_insertion_point(destructor:Cmd.BoothOpenTradeCmd)
  SharedDtor();
}

void BoothOpenTradeCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BoothOpenTradeCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BoothOpenTradeCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BoothOpenTradeCmd_descriptor_;
}

const BoothOpenTradeCmd& BoothOpenTradeCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneTrade_2eproto();
  return *default_instance_;
}

BoothOpenTradeCmd* BoothOpenTradeCmd::default_instance_ = NULL;

BoothOpenTradeCmd* BoothOpenTradeCmd::New() const {
  return new BoothOpenTradeCmd;
}

void BoothOpenTradeCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 201;
    param_ = 23;
    charid_ = GOOGLE_ULONGLONG(0);
    open_ = 1u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BoothOpenTradeCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BoothOpenTradeCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.RecordServerTradeParam param = 2 [default = BOOTH_OPEN_RECORDTRADE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::RecordServerTradeParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::RecordServerTradeParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_open;
        break;
      }

      // optional uint32 open = 4 [default = 1];
      case 4: {
        if (tag == 32) {
         parse_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &open_)));
          set_has_open();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BoothOpenTradeCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BoothOpenTradeCmd)
  return false;
#undef DO_
}

void BoothOpenTradeCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BoothOpenTradeCmd)
  // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.RecordServerTradeParam param = 2 [default = BOOTH_OPEN_RECORDTRADE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional uint32 open = 4 [default = 1];
  if (has_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->open(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BoothOpenTradeCmd)
}

::google::protobuf::uint8* BoothOpenTradeCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BoothOpenTradeCmd)
  // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.RecordServerTradeParam param = 2 [default = BOOTH_OPEN_RECORDTRADE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional uint32 open = 4 [default = 1];
  if (has_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->open(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BoothOpenTradeCmd)
  return target;
}

int BoothOpenTradeCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = TRADE_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.RecordServerTradeParam param = 2 [default = BOOTH_OPEN_RECORDTRADE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 open = 4 [default = 1];
    if (has_open()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->open());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BoothOpenTradeCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BoothOpenTradeCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BoothOpenTradeCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BoothOpenTradeCmd::MergeFrom(const BoothOpenTradeCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_open()) {
      set_open(from.open());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BoothOpenTradeCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoothOpenTradeCmd::CopyFrom(const BoothOpenTradeCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoothOpenTradeCmd::IsInitialized() const {

  return true;
}

void BoothOpenTradeCmd::Swap(BoothOpenTradeCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(open_, other->open_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BoothOpenTradeCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BoothOpenTradeCmd_descriptor_;
  metadata.reflection = BoothOpenTradeCmd_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

// @@protoc_insertion_point(global_scope)
