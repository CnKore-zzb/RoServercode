// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoCommon.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoCommon.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Cmd {

namespace {

const ::google::protobuf::Descriptor* ScenePos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScenePos_reflection_ = NULL;
const ::google::protobuf::Descriptor* SnapShotDataPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SnapShotDataPB_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pos_reflection_ = NULL;
const ::google::protobuf::Descriptor* NpcDefineData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NpcDefineData_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpyunApi_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpyunApi_reflection_ = NULL;
const ::google::protobuf::Descriptor* FrostItemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FrostItemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpEffectData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpEffectData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Param_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Param_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConfigParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConfigParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserPortraitData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserPortraitData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EPublishVersion_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EUserDataType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EMARITAL_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EAttrType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EGender_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EProfession_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EQualityType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EMoneyType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ECreatureStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ESource_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EDoubleSource_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ESummonType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ETRADE_RET_CODE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EAccountStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EBgmType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EDepositCardType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoCommon_2eproto() {
  protobuf_AddDesc_ProtoCommon_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoCommon.proto");
  GOOGLE_CHECK(file != NULL);
  ScenePos_descriptor_ = file->message_type(0);
  static const int ScenePos_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePos, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePos, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePos, z_),
  };
  ScenePos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScenePos_descriptor_,
      ScenePos::default_instance_,
      ScenePos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScenePos));
  SnapShotDataPB_descriptor_ = file->message_type(1);
  static const int SnapShotDataPB_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapShotDataPB, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapShotDataPB, baselv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapShotDataPB, hair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapShotDataPB, haircolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapShotDataPB, lefthand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapShotDataPB, righthand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapShotDataPB, body_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapShotDataPB, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapShotDataPB, back_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapShotDataPB, face_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapShotDataPB, tail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapShotDataPB, mount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapShotDataPB, eye_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapShotDataPB, partnerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapShotDataPB, portrait_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapShotDataPB, mouth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapShotDataPB, clothcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapShotDataPB, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapShotDataPB, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapShotDataPB, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapShotDataPB, sequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapShotDataPB, isopen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapShotDataPB, deletetime_),
  };
  SnapShotDataPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SnapShotDataPB_descriptor_,
      SnapShotDataPB::default_instance_,
      SnapShotDataPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapShotDataPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapShotDataPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SnapShotDataPB));
  Pos_descriptor_ = file->message_type(2);
  static const int Pos_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pos, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pos, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pos, z_),
  };
  Pos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Pos_descriptor_,
      Pos::default_instance_,
      Pos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Pos));
  NpcDefineData_descriptor_ = file->message_type(3);
  static const int NpcDefineData_offsets_[27] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcDefineData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcDefineData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcDefineData, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcDefineData, range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcDefineData, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcDefineData, reborn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcDefineData, territory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcDefineData, scalemin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcDefineData, scalemax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcDefineData, life_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcDefineData, behaviours_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcDefineData, search_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcDefineData, uniqueid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcDefineData, gearorgstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcDefineData, purify_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcDefineData, attsafelv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcDefineData, disptime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcDefineData, gearprivate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcDefineData, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcDefineData, waitaction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcDefineData, stype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcDefineData, superai_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcDefineData, pursue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcDefineData, pursuetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcDefineData, weaponpetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcDefineData, deadlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcDefineData, deadrewardids_),
  };
  NpcDefineData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NpcDefineData_descriptor_,
      NpcDefineData::default_instance_,
      NpcDefineData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcDefineData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcDefineData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NpcDefineData));
  UpyunApi_descriptor_ = file->message_type(4);
  static const int UpyunApi_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpyunApi, bucket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpyunApi, content_md5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpyunApi, content_lenth_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpyunApi, expiration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpyunApi, file_blocks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpyunApi, file_hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpyunApi, file_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpyunApi, path_),
  };
  UpyunApi_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpyunApi_descriptor_,
      UpyunApi::default_instance_,
      UpyunApi_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpyunApi, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpyunApi, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpyunApi));
  FrostItemInfo_descriptor_ = file->message_type(5);
  static const int FrostItemInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrostItemInfo, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrostItemInfo, frosted_time_),
  };
  FrostItemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FrostItemInfo_descriptor_,
      FrostItemInfo::default_instance_,
      FrostItemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrostItemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrostItemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FrostItemInfo));
  SpEffectData_descriptor_ = file->message_type(6);
  static const int SpEffectData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpEffectData, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpEffectData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpEffectData, entity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpEffectData, expiretime_),
  };
  SpEffectData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpEffectData_descriptor_,
      SpEffectData::default_instance_,
      SpEffectData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpEffectData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpEffectData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpEffectData));
  Param_descriptor_ = file->message_type(7);
  static const int Param_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Param, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Param, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Param, items_),
  };
  Param_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Param_descriptor_,
      Param::default_instance_,
      Param_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Param, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Param, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Param));
  ConfigParam_descriptor_ = file->message_type(8);
  static const int ConfigParam_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigParam, params_),
  };
  ConfigParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConfigParam_descriptor_,
      ConfigParam::default_instance_,
      ConfigParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConfigParam));
  UserPortraitData_descriptor_ = file->message_type(9);
  static const int UserPortraitData_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPortraitData, portrait_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPortraitData, body_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPortraitData, hair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPortraitData, haircolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPortraitData, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPortraitData, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPortraitData, face_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPortraitData, mouth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPortraitData, eye_),
  };
  UserPortraitData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserPortraitData_descriptor_,
      UserPortraitData::default_instance_,
      UserPortraitData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPortraitData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPortraitData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserPortraitData));
  EPublishVersion_descriptor_ = file->enum_type(0);
  EUserDataType_descriptor_ = file->enum_type(1);
  EMARITAL_descriptor_ = file->enum_type(2);
  EAttrType_descriptor_ = file->enum_type(3);
  EGender_descriptor_ = file->enum_type(4);
  EProfession_descriptor_ = file->enum_type(5);
  EQualityType_descriptor_ = file->enum_type(6);
  EMoneyType_descriptor_ = file->enum_type(7);
  ECreatureStatus_descriptor_ = file->enum_type(8);
  ESource_descriptor_ = file->enum_type(9);
  EDoubleSource_descriptor_ = file->enum_type(10);
  ESummonType_descriptor_ = file->enum_type(11);
  ETRADE_RET_CODE_descriptor_ = file->enum_type(12);
  EAccountStatus_descriptor_ = file->enum_type(13);
  EBgmType_descriptor_ = file->enum_type(14);
  EDepositCardType_descriptor_ = file->enum_type(15);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoCommon_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScenePos_descriptor_, &ScenePos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SnapShotDataPB_descriptor_, &SnapShotDataPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Pos_descriptor_, &Pos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NpcDefineData_descriptor_, &NpcDefineData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpyunApi_descriptor_, &UpyunApi::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FrostItemInfo_descriptor_, &FrostItemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpEffectData_descriptor_, &SpEffectData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Param_descriptor_, &Param::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConfigParam_descriptor_, &ConfigParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserPortraitData_descriptor_, &UserPortraitData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoCommon_2eproto() {
  delete ScenePos::default_instance_;
  delete ScenePos_reflection_;
  delete SnapShotDataPB::default_instance_;
  delete SnapShotDataPB_reflection_;
  delete Pos::default_instance_;
  delete Pos_reflection_;
  delete NpcDefineData::default_instance_;
  delete NpcDefineData_reflection_;
  delete UpyunApi::default_instance_;
  delete UpyunApi_reflection_;
  delete FrostItemInfo::default_instance_;
  delete FrostItemInfo_reflection_;
  delete SpEffectData::default_instance_;
  delete SpEffectData_reflection_;
  delete Param::default_instance_;
  delete Param_reflection_;
  delete ConfigParam::default_instance_;
  delete ConfigParam_reflection_;
  delete UserPortraitData::default_instance_;
  delete UserPortraitData_reflection_;
}

void protobuf_AddDesc_ProtoCommon_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021ProtoCommon.proto\022\003Cmd\"+\n\010ScenePos\022\t\n\001"
    "x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\022\t\n\001z\030\003 \001(\005\"\373\003\n\016SnapSh"
    "otDataPB\022\n\n\002id\030\001 \001(\004\022\021\n\006baselv\030\002 \001(\r:\0010\022"
    "\017\n\004hair\030\003 \001(\r:\0010\022\024\n\thaircolor\030\004 \001(\r:\0010\022\023"
    "\n\010lefthand\030\005 \001(\r:\0010\022\024\n\trighthand\030\006 \001(\r:\001"
    "0\022\017\n\004body\030\007 \001(\r:\0010\022\017\n\004head\030\010 \001(\r:\0010\022\017\n\004b"
    "ack\030\t \001(\r:\0010\022\017\n\004face\030\n \001(\r:\0010\022\017\n\004tail\030\013 "
    "\001(\r:\0010\022\020\n\005mount\030\014 \001(\r:\0010\022\016\n\003eye\030\023 \001(\r:\0010"
    "\022\024\n\tpartnerid\030\024 \001(\r:\0010\022\023\n\010portrait\030\025 \001(\r"
    ":\0010\022\020\n\005mouth\030\026 \001(\r:\0010\022\025\n\nclothcolor\030\027 \001("
    "\r:\0010\022)\n\006gender\030\r \001(\0162\014.Cmd.EGender:\013EGEN"
    "DER_MIN\0225\n\nprofession\030\016 \001(\0162\020.Cmd.EProfe"
    "ssion:\017EPROFESSION_MIN\022\014\n\004name\030\017 \001(\t\022\023\n\010"
    "sequence\030\020 \001(\r:\0010\022\021\n\006isopen\030\021 \001(\r:\0010\022\025\n\n"
    "deletetime\030\022 \001(\r:\0010\"/\n\003Pos\022\014\n\001x\030\001 \001(\002:\0010"
    "\022\014\n\001y\030\002 \001(\002:\0010\022\014\n\001z\030\003 \001(\002:\0010\"\314\004\n\rNpcDefi"
    "neData\022\r\n\002id\030\001 \001(\005:\0010\022\014\n\004name\030\002 \001(\t\022\025\n\003p"
    "os\030\003 \001(\0132\010.Cmd.Pos\022\020\n\005range\030\004 \001(\005:\0010\022\016\n\003"
    "dir\030\005 \001(\005:\0010\022\021\n\006reborn\030\006 \001(\005:\0010\022\024\n\tterri"
    "tory\030\007 \001(\005:\0010\022\023\n\010scalemin\030\010 \001(\002:\0010\022\023\n\010sc"
    "alemax\030\t \001(\002:\0010\022\017\n\004life\030\n \001(\005:\0010\022\025\n\nbeha"
    "viours\030\013 \001(\005:\0010\022\021\n\006search\030\r \001(\005:\0010\022\023\n\010un"
    "iqueid\030\016 \001(\005:\0010\022\027\n\014gearorgstate\030\017 \001(\005:\0010"
    "\022\021\n\006purify\030\020 \001(\005:\0010\022\024\n\tattsafelv\030\021 \001(\005:\001"
    "0\022\023\n\010disptime\030\022 \001(\005:\0010\022\026\n\013gearprivate\030\023 "
    "\001(\005:\0010\022\020\n\005level\030\024 \001(\005:\0010\022\022\n\nwaitaction\030\025"
    " \001(\t\0220\n\005stype\030\026 \001(\0162\020.Cmd.ESummonType:\017E"
    "SUMMONTYPE_MIN\022\017\n\007superai\030\027 \003(\005\022\021\n\006pursu"
    "e\030\030 \001(\005:\0010\022\025\n\npursuetime\030\031 \001(\005:\0010\022\026\n\013wea"
    "ponpetid\030\032 \001(\005:\0010\022\021\n\006deadlv\030\033 \001(\005:\0010\022\025\n\r"
    "deadrewardids\030\034 \003(\005\"\251\001\n\010UpyunApi\022\016\n\006buck"
    "et\030\001 \001(\t\022\023\n\013content_md5\030\002 \001(\t\022\033\n\023content"
    "_lenth_range\030\003 \001(\t\022\022\n\nexpiration\030\004 \001(\r\022\023"
    "\n\013file_blocks\030\005 \001(\r\022\021\n\tfile_hash\030\006 \001(\t\022\021"
    "\n\tfile_size\030\007 \001(\r\022\014\n\004path\030\010 \001(\t\"6\n\rFrost"
    "ItemInfo\022\017\n\007item_id\030\001 \001(\r\022\024\n\014frosted_tim"
    "e\030\002 \001(\004\"L\n\014SpEffectData\022\014\n\004guid\030\001 \001(\t\022\n\n"
    "\002id\030\002 \001(\r\022\016\n\006entity\030\003 \003(\004\022\022\n\nexpiretime\030"
    "\004 \001(\r\">\n\005Param\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001"
    "(\t\022\031\n\005items\030\003 \003(\0132\n.Cmd.Param\")\n\013ConfigP"
    "aram\022\032\n\006params\030\001 \003(\0132\n.Cmd.Param\"\266\001\n\020Use"
    "rPortraitData\022\023\n\010portrait\030\001 \001(\r:\0010\022\017\n\004bo"
    "dy\030\002 \001(\r:\0010\022\017\n\004hair\030\003 \001(\r:\0010\022\024\n\thaircolo"
    "r\030\004 \001(\r:\0010\022\021\n\006gender\030\005 \001(\r:\0010\022\017\n\004head\030\006 "
    "\001(\r:\0010\022\017\n\004face\030\007 \001(\r:\0010\022\020\n\005mouth\030\010 \001(\r:\001"
    "0\022\016\n\003eye\030\t \001(\r:\0010*)\n\017EPublishVersion\022\026\n\017"
    "EPUBLISHVERSION\020\330\275\316\t*\307\034\n\rEUserDataType\022\025"
    "\n\021EUSERDATATYPE_MIN\020\000\022\027\n\023EUSERDATATYPE_M"
    "APID\020\001\022\025\n\021EUSERDATATYPE_SEX\020\002\022\034\n\030EUSERDA"
    "TATYPE_PROFESSION\020\003\022 \n\034EUSERDATATYPE_DES"
    "TPROFESSION\020\004\022\032\n\026EUSERDATATYPE_JOBLEVEL\020"
    "\005\022\033\n\027EUSERDATATYPE_ROLELEVEL\020\006\022\030\n\024EUSERD"
    "ATATYPE_JOBEXP\020\007\022\031\n\025EUSERDATATYPE_ROLEEX"
    "P\020\010\022\030\n\024EUSERDATATYPE_CHARGE\020\t\022\031\n\025EUSERDA"
    "TATYPE_DIAMOND\020\n\022\030\n\024EUSERDATATYPE_SILVER"
    "\020\013\022\026\n\022EUSERDATATYPE_GOLD\020\014\022\030\n\024EUSERDATAT"
    "YPE_PURIFY\020\r\022\030\n\024EUSERDATATYPE_GARDEN\020\016\022\034"
    "\n\030EUSERDATATYPE_ONLINETIME\020\017\022\035\n\031EUSERDAT"
    "ATYPE_OFFLINETIME\020\020\022\030\n\024EUSERDATATYPE_ADD"
    "ICT\020\021\022\026\n\022EUSERDATATYPE_HAIR\020\022\022\033\n\027EUSERDA"
    "TATYPE_HAIRCOLOR\020\023\022\034\n\030EUSERDATATYPE_CLOT"
    "HCOLOR\020\024\022\032\n\026EUSERDATATYPE_LEFTHAND\020\025\022\033\n\027"
    "EUSERDATATYPE_RIGHTHAND\020\026\022\026\n\022EUSERDATATY"
    "PE_BODY\020\027\022\033\n\027EUSERDATATYPE_BODYSCALE\020\030\022\026"
    "\n\022EUSERDATATYPE_HEAD\020\031\022\026\n\022EUSERDATATYPE_"
    "BACK\020\032\022\026\n\022EUSERDATATYPE_FACE\020\033\022\026\n\022EUSERD"
    "ATATYPE_TAIL\020\034\022\027\n\023EUSERDATATYPE_MOUNT\020\035\022"
    "\027\n\023EUSERDATATYPE_MOUTH\020S\022\032\n\026EUSERDATATYP"
    "E_STRPOINT\020\036\022\032\n\026EUSERDATATYPE_INTPOINT\020\037"
    "\022\032\n\026EUSERDATATYPE_AGIPOINT\020 \022\032\n\026EUSERDAT"
    "ATYPE_DEXPOINT\020!\022\032\n\026EUSERDATATYPE_VITPOI"
    "NT\020\"\022\032\n\026EUSERDATATYPE_LUKPOINT\020#\022\034\n\030EUSE"
    "RDATATYPE_TOTALPOINT\020$\022\033\n\027EUSERDATATYPE_"
    "USEDPOINT\020%\022\036\n\032EUSERDATATYPE_NORMAL_SKIL"
    "L\020&\022\037\n\033EUSERDATATYPE_COLLECT_SKILL\020\'\022\035\n\031"
    "EUSERDATATYPE_TRANS_SKILL\020(\022\035\n\031EUSERDATA"
    "TYPE_SKILL_POINT\020)\022\030\n\024EUSERDATATYPE_STAT"
    "US\020*\022\035\n\031EUSERDATATYPE_EQUIPMASTER\020+\022\036\n\032E"
    "USERDATATYPE_REFINEMASTER\020,\022\032\n\026EUSERDATA"
    "TYPE_PORTRAIT\020-\022\027\n\023EUSERDATATYPE_FRAME\020."
    "\022\035\n\031EUSERDATATYPE_BATTLEPOINT\020/\022\030\n\024EUSER"
    "DATATYPE_RAIDID\0200\022\035\n\031EUSERDATATYPE_PET_P"
    "ARTNER\0201\022\032\n\026EUSERDATATYPE_PET_SELF\0202\022\034\n\030"
    "EUSERDATATYPE_CREATETIME\0203\022\031\n\025EUSERDATAT"
    "YPE_SAVEMAP\0204\022\032\n\026EUSERDATATYPE_FOLLOWID\020"
    "5\022\030\n\024EUSERDATATYPE_HANDID\0206\022\031\n\025EUSERDATA"
    "TYPE_CARRIER\0207\022\034\n\030EUSERDATATYPE_FRIENDSH"
    "IP\0208\022\035\n\031EUSERDATATYPE_MUSIC_CURID\0209\022\035\n\031E"
    "USERDATATYPE_MUSIC_START\020:\022\036\n\032EUSERDATAT"
    "YPE_MUSIC_DEMAND\020;\022\025\n\021EUSERDATATYPE_DIR\020"
    "<\022\031\n\025EUSERDATATYPE_GAGTIME\020=\022\035\n\031EUSERDAT"
    "ATYPE_NOLOGINTIME\020>\022\025\n\021EUSERDATATYPE_EYE"
    "\020\?\022\026\n\022EUSERDATATYPE_NAME\020@\022\033\n\027EUSERDATAT"
    "YPE_GIFTPOINT\020A\022\033\n\027EUSERDATATYPE_MANUAL_"
    "LV\020B\022\034\n\030EUSERDATATYPE_MANUAL_EXP\020C\022\033\n\027EU"
    "SERDATATYPE_CUR_TITLE\020D\022\034\n\030EUSERDATATYPE"
    "_KILLERNAME\020E\022\035\n\031EUSERDATATYPE_DROPBASEE"
    "XP\020F\022\035\n\031EUSERDATATYPE_SHADERCOLOR\020G\022\034\n\030E"
    "USERDATATYPE_BATTLETIME\020H\022 \n\034EUSERDATATY"
    "PE_ADDICTTIPSTIME\020I\022\033\n\027EUSERDATATYPE_QUE"
    "RYTYPE\020J\022\036\n\032EUSERDATATYPE_REBATTLETIME\020K"
    "\022 \n\034EUSERDATATYPE_USEDBATTLETIME\020L\022\027\n\023EU"
    "SERDATATYPE_BLINK\020M\022\030\n\024EUSERDATATYPE_ZON"
    "EID\020N\022\034\n\030EUSERDATATYPE_TREESTATUS\020O\022\035\n\031E"
    "USERDATATYPE_DEST_ZONEID\020P\022!\n\035EUSERDATAT"
    "YPE_ORIGINAL_ZONEID\020Q\022\027\n\023EUSERDATATYPE_A"
    "LPHA\020T\022\027\n\023EUSERDATATYPE_QUOTA\020U\022\033\n\027EUSER"
    "DATATYPE_ZENY_DEBT\020V\022\033\n\027EUSERDATATYPE_PV"
    "P_COLOR\020W\022 \n\034EUSERDATATYPE_GUILDRAIDINDE"
    "X\020X\022\034\n\030EUSERDATATYPE_CONTRIBUTE\020Y\022\031\n\025EUS"
    "ERDATATYPE_PVPCOIN\020Z\022\026\n\022EUSERDATATYPE_DA"
    "TA\020d\022$\n EUSERDATATYPE_NORMALSKILL_OPTION"
    "\020e\022\033\n\027EUSERDATATYPE_HASCHARGE\020f\022\035\n\031EUSER"
    "DATATYPE_FASHIONHIDE\020g\022\033\n\027EUSERDATATYPE_"
    "MONTHCARD\020h\022\034\n\030EUSERDATATYPE_COOKER_EXP\020"
    "i\022\033\n\027EUSERDATATYPE_COOKER_LV\020j\022\034\n\030EUSERD"
    "ATATYPE_TASTER_EXP\020k\022\033\n\027EUSERDATATYPE_TA"
    "STER_LV\020l\022\031\n\025EUSERDATATYPE_SATIETY\020m\022\030\n\024"
    "EUSERDATATYPE_OPTION\020n\022\031\n\025EUSERDATATYPE_"
    "LOTTERY\020o\022\036\n\032EUSERDATATYPE_TUTOR_PROFIC\020"
    "p\022\036\n\032EUSERDATATYPE_TUTOR_ENABLE\020q\022\034\n\030EUS"
    "ERDATATYPE_GUILDHONOR\020r\022\035\n\031EUSERDATATYPE"
    "_PEAK_EFFECT\020s\022\025\n\021EUSERDATATYPE_JOY\020u\022\034\n"
    "\030EUSERDATATYPE_MUSIC_LOOP\020v\022\034\n\030EUSERDATA"
    "TYPE_CUR_MAXJOB\020w\022\031\n\025EUSERDATATYPE_MARIT"
    "AL\020x\022\"\n\036EUSERDATATYPE_QUERYWEDDINGTYPE\020y"
    "\022\'\n#EUSERDATATYPE_DIVORCE_ROLLERCOASTER\020"
    "z\022 \n\034EUSERDATATYPE_TWINS_ACTIONID\020{\022\036\n\032E"
    "USERDATATYPE_FAVORABILITY\020|\022 \n\034EUSERDATA"
    "TYPE_EQUIPED_WEAPON\020}\022\033\n\027EUSERDATATYPE_S"
    "ERVANTID\020~\022\035\n\031EUSERDATATYPE_BOOTH_SCORE\020"
    "\177\022\035\n\030EUSERDATATYPE_QUOTA_LOCK\020\200\001\022\032\n\025EUSE"
    "RDATATYPE_DRESSUP\020\201\001\022\"\n\035EUSERDATATYPE_TU"
    "TORBATTLETIME\020\202\001\022&\n!EUSERDATATYPE_USEDTU"
    "TORBATTLETIME\020\203\001\022 \n\033EUSERDATATYPE_ENSEMB"
    "LESKILL\020\205\001\022\033\n\026EUSERDATATYPE_DEADCOIN\020\206\001\022"
    "\031\n\024EUSERDATATYPE_DEADLV\020\207\001\022\032\n\025EUSERDATAT"
    "YPE_DEADEXP\020\210\001\022\026\n\021EUSERDATATYPE_MAX\020\211\001*i"
    "\n\010EMARITAL\022\023\n\017EMARITAL_SINGLE\020\000\022\025\n\021EMARI"
    "TAL_RESERVED\020\001\022\024\n\020EMARITAL_MARRIED\020\002\022\033\n\027"
    "EMARITAL_DIVORCE_PUNISH\020\003*\3612\n\tEAttrType\022"
    "\021\n\rEATTRTYPE_MIN\020\000\022\021\n\rEATTRTYPE_STR\020d\022\021\n"
    "\rEATTRTYPE_INT\020e\022\021\n\rEATTRTYPE_AGI\020f\022\021\n\rE"
    "ATTRTYPE_DEX\020g\022\021\n\rEATTRTYPE_VIT\020h\022\021\n\rEAT"
    "TRTYPE_LUK\020i\022\022\n\rEATTRTYPE_ATK\020\310\001\022\025\n\020EATT"
    "RTYPE_ATKPER\020\311\001\022\022\n\rEATTRTYPE_DEF\020\312\001\022\025\n\020E"
    "ATTRTYPE_DEFPER\020\313\001\022\023\n\016EATTRTYPE_MATK\020\314\001\022"
    "\026\n\021EATTRTYPE_MATKPER\020\315\001\022\023\n\016EATTRTYPE_MDE"
    "F\020\316\001\022\026\n\021EATTRTYPE_MDEFPER\020\317\001\022\024\n\017EATTRTYP"
    "E_MAXHP\020\320\001\022\027\n\022EATTRTYPE_MAXHPPER\020\321\001\022\024\n\017E"
    "ATTRTYPE_MAXSP\020\322\001\022\027\n\022EATTRTYPE_MAXSPPER\020"
    "\323\001\022\021\n\014EATTRTYPE_HP\020\324\001\022\021\n\014EATTRTYPE_SP\020\325\001"
    "\022\022\n\rEATTRTYPE_HIT\020\326\001\022\023\n\016EATTRTYPE_FLEE\020\327"
    "\001\022\022\n\rEATTRTYPE_CRI\020\330\001\022\025\n\020EATTRTYPE_CRIRE"
    "S\020\331\001\022\030\n\023EATTRTYPE_CRIDAMPER\020\332\001\022\030\n\023EATTRT"
    "YPE_CRIDEFPER\020\333\001\022\025\n\020EATTRTYPE_ATKSPD\020\334\001\022"
    "\026\n\021EATTRTYPE_MOVESPD\020\335\001\022\026\n\021EATTRTYPE_CAS"
    "TSPD\020\336\001\022\031\n\024EATTRTYPE_RESTORESPD\020\337\001\022\033\n\026EA"
    "TTRTYPE_SPRESTORESPD\020\340\001\022\035\n\030EATTRTYPE_ITE"
    "MRESTORESPD\020\341\001\022\037\n\032EATTRTYPE_ITEMSPRESTOR"
    "ESPD\020\342\001\022\034\n\027EATTRTYPE_RESTORESPDPER\020\343\001\022\036\n"
    "\031EATTRTYPE_SPRESTORESPDPER\020\344\001\022\025\n\020EATTRTY"
    "PE_CRIPER\020\345\001\022\025\n\020EATTRTYPE_REFINE\020\254\002\022\026\n\021E"
    "ATTRTYPE_MREFINE\020\255\002\022\031\n\024EATTRTYPE_MOVESPD"
    "PER\020\256\002\022\030\n\023EATTRTYPE_EQUIPASPD\020\257\002\022\030\n\023EATT"
    "RTYPE_SKILLASPD\020\260\002\022\025\n\020EATTRTYPE_HITPER\020\261"
    "\002\022\026\n\021EATTRTYPE_FLEEPER\020\262\002\022\025\n\020EATTRTYPE_S"
    "TRPER\020\263\002\022\025\n\020EATTRTYPE_INTPER\020\264\002\022\025\n\020EATTR"
    "TYPE_AGIPER\020\265\002\022\025\n\020EATTRTYPE_DEXPER\020\266\002\022\025\n"
    "\020EATTRTYPE_VITPER\020\267\002\022\025\n\020EATTRTYPE_LUKPER"
    "\020\270\002\022\026\n\021EATTRTYPE_SHOWATK\020\220\003\022\026\n\021EATTRTYPE"
    "_SHOWDEF\020\221\003\022\027\n\022EATTRTYPE_SHOWMATK\020\222\003\022\027\n\022"
    "EATTRTYPE_SHOWMDEF\020\223\003\022\030\n\023EATTRTYPE_SHOWM"
    "AXHP\020\224\003\022\030\n\023EATTRTYPE_SHOWMAXSP\020\225\003\022\026\n\021EAT"
    "TRTYPE_SHOWHIT\020\226\003\022\027\n\022EATTRTYPE_SHOWFLEE\020"
    "\227\003\022\026\n\021EATTRTYPE_SHOWCRI\020\230\003\022\031\n\024EATTRTYPE_"
    "SHOWCRIRES\020\231\003\022\031\n\024EATTRTYPE_SHOWATKSPD\020\232\003"
    "\022\032\n\025EATTRTYPE_SHOWMOVESPD\020\233\003\022\032\n\025EATTRTYP"
    "E_SHOWCASTSPD\020\234\003\022\035\n\030EATTRTYPE_SHOWRESTOR"
    "ESPD\020\235\003\022\027\n\022EATTRTYPE_DAMREDUC\020\236\003\022\030\n\023EATT"
    "RTYPE_MDAMREDUC\020\237\003\022\030\n\023EATTRTYPE_IGNOREDE"
    "F\020\240\003\022\031\n\024EATTRTYPE_IGNOREMDEF\020\241\003\022\031\n\024EATTR"
    "TYPE_DAMREBOUND\020\242\003\022\032\n\025EATTRTYPE_MDAMREBO"
    "UND\020\243\003\022\032\n\025EATTRTYPE_DAMINCREASE\020\244\003\022\033\n\026EA"
    "TTRTYPE_MDAMINCREASE\020\245\003\022\027\n\022EATTRTYPE_VAM"
    "PIRIC\020\246\003\022\031\n\024EATTRTYPE_BEVAMPIRIC\020\247\003\022\031\n\024E"
    "ATTRTYPE_HARMIMMUNE\020\250\003\022\031\n\024EATTRTYPE_REAL"
    "DAMAGE\020\251\003\022\027\n\022EATTRTYPE_RANGEDAM\020\252\003\022\033\n\026EA"
    "TTRTYPE_SHOTDAMREDUC\020\253\003\022\033\n\026EATTRTYPE_LON"
    "GDAMREDUC\020\254\003\022\034\n\027EATTRTYPE_LONGMDAMREDUC\020"
    "\255\003\022\035\n\030EATTRTYPE_IGNOREEQUIPDEF\020\256\003\022\032\n\025EAT"
    "TRTYPE_SHAPEATKPER\020\257\003\022\027\n\022EATTRTYPE_DAMSP"
    "IKE\020\260\003\022\030\n\023EATTRTYPE_MDAMSPIKE\020\261\003\022\035\n\030EATT"
    "RTYPE_REFINEDAMREDUC\020\262\003\022\036\n\031EATTRTYPE_REF"
    "INEMDAMREDUC\020\263\003\022\035\n\030EATTRTYPE_ENERGYDAMRE"
    "DUC\020\264\003\022\034\n\027EATTRTYPE_STEELDAMREDUC\020\265\003\022\035\n\030"
    "EATTRTYPE_STEELMDAMREDUC\020\266\003\022\036\n\031EATTRTYPE"
    "_PROTECTDAMREDUC\020\267\003\022\037\n\032EATTRTYPE_PROTECT"
    "MDAMREDUC\020\270\003\022\035\n\030EATTRTYPE_DRAGONDAMREDUC"
    "\020\273\003\022\036\n\031EATTRTYPE_DRAGONMDAMREDUC\020\274\003\022\034\n\027E"
    "ATTRTYPE_NORMALREALDAM\020\275\003\022\035\n\030EATTRTYPE_N"
    "ORMALMREALDAM\020\276\003\022\033\n\026EATTRTYPE_SKILLREALD"
    "AM\020\277\003\022\034\n\027EATTRTYPE_SKILLMREALDAM\020\300\003\022\033\n\026E"
    "ATTRTYPE_HIDEDAMREDUC\020\271\003\022\034\n\027EATTRTYPE_HI"
    "DEMDAMREDUC\020\272\003\022\030\n\023EATTRTYPE_NORMALATK\020\301\003"
    "\022\033\n\026EATTRTYPE_NORMALATKDAM\020\302\003\022\033\n\026EATTRTY"
    "PE_NORMALATKRES\020\303\003\022\027\n\022EATTRTYPE_SKILLDAM"
    "\020\304\003\022\027\n\022EATTRTYPE_SKILLRES\020\305\003\022\034\n\027EATTRTYP"
    "E_WINDMDAMREDUC\020\306\003\022\033\n\026EATTRTYPE_DEADDAMR"
    "EDUC\020\307\003\022\034\n\027EATTRTYPE_DEADMDAMREDUC\020\310\003\022\027\n"
    "\022EATTRTYPE_CTCHANGE\020\375\003\022\032\n\025EATTRTYPE_CTCH"
    "ANGEPER\020\376\003\022\027\n\022EATTRTYPE_CDCHANGE\020\377\003\022\032\n\025E"
    "ATTRTYPE_CDCHANGEPER\020\200\004\022\025\n\020EATTRTYPE_SPC"
    "OST\020\203\004\022\030\n\023EATTRTYPE_SPCOSTPER\020\204\004\022\032\n\025EATT"
    "RTYPE_ATKDISTANCE\020\205\004\022\035\n\030EATTRTYPE_ATKDIS"
    "TANCEPER\020\206\004\022\026\n\021EATTRTYPE_CTFIXED\020\207\004\022\031\n\024E"
    "ATTRTYPE_CTFIXEDPER\020\210\004\022\033\n\026EATTRTYPE_SELL"
    "DISCOUNT\020\211\004\022\032\n\025EATTRTYPE_BUYDISCOUNT\020\212\004\022"
    "\025\n\020EATTRTYPE_HPCOST\020\213\004\022\030\n\023EATTRTYPE_HPCO"
    "STPER\020\214\004\022\034\n\027EATTRTYPE_DELAYCDCHANGE\020\226\004\022\037"
    "\n\032EATTRTYPE_DELAYCDCHANGEPER\020\227\004\022\026\n\021EATTR"
    "TYPE_DCHANGE\020\230\004\022\031\n\024EATTRTYPE_DCHANGEPER\020"
    "\231\004\022\026\n\021EATTRTYPE_NOSKILL\020\330\004\022\024\n\017EATTRTYPE_"
    "NOACT\020\331\004\022\025\n\020EATTRTYPE_NOMOVE\020\332\004\022\026\n\021EATTR"
    "TYPE_NOSTIFF\020\333\004\022\027\n\022EATTRTYPE_NOATTACK\020\334\004"
    "\022\026\n\021EATTRTYPE_FEARRUN\020\335\004\022\023\n\016EATTRTYPE_HI"
    "DE\020\336\004\022\024\n\017EATTRTYPE_TAUNT\020\337\004\022\025\n\020EATTRTYPE"
    "_FREEZE\020\340\004\022\033\n\026EATTRTYPE_NOEFFECTMOVE\020\341\004\022"
    "\032\n\025EATTRTYPE_STATEEFFECT\020\342\004\022\031\n\024EATTRTYPE"
    "_ATTREFFECT\020\343\004\022\031\n\024EATTRTYPE_NOATTACKED\020\344"
    "\004\022\033\n\026EATTRTYPE_ATTRFUNCTION\020\345\004\022\032\n\025EATTRT"
    "YPE_ATTREFFECT2\020\346\004\022\030\n\023EATTRTYPE_FUNCLIMI"
    "T\020\347\004\022\033\n\026EATTRTYPE_NOMAGICSKILL\020\350\004\022\030\n\023EAT"
    "TRTYPE_MOVECHANT\020\351\004\022\023\n\016EATTRTYPE_SOLO\020\352\004"
    "\022\027\n\022EATTRTYPE_ENSEMBLE\020\353\004\022\026\n\021EATTRTYPE_A"
    "TKATTR\020\274\005\022\026\n\021EATTRTYPE_DEFATTR\020\275\005\022\031\n\024EAT"
    "TRTYPE_WINDDAMPER\020\276\005\022\032\n\025EATTRTYPE_EARTHD"
    "AMPER\020\277\005\022\032\n\025EATTRTYPE_WATERDAMPER\020\300\005\022\031\n\024"
    "EATTRTYPE_FIREDAMPER\020\301\005\022\034\n\027EATTRTYPE_NEU"
    "TRALDAMPER\020\302\005\022\031\n\024EATTRTYPE_HOLYDAMPER\020\303\005"
    "\022\033\n\026EATTRTYPE_SHADOWDAMPER\020\304\005\022\032\n\025EATTRTY"
    "PE_GHOSTDAMPER\020\305\005\022\033\n\026EATTRTYPE_UNDEADDAM"
    "PER\020\306\005\022\033\n\026EATTRTYPE_POSIONDAMPER\020\307\005\022\033\n\026E"
    "ATTRTYPE_BEWINDDAMPER\020\310\005\022\034\n\027EATTRTYPE_BE"
    "EARTHDAMPER\020\311\005\022\034\n\027EATTRTYPE_BEWATERDAMPE"
    "R\020\312\005\022\033\n\026EATTRTYPE_BEFIREDAMPER\020\313\005\022\036\n\031EAT"
    "TRTYPE_BENEUTRALDAMPER\020\314\005\022\033\n\026EATTRTYPE_B"
    "EHOLYDAMPER\020\315\005\022\035\n\030EATTRTYPE_BESHADOWDAMP"
    "ER\020\316\005\022\034\n\027EATTRTYPE_BEGHOSTDAMPER\020\317\005\022\035\n\030E"
    "ATTRTYPE_BEUNDEADDAMPER\020\320\005\022\035\n\030EATTRTYPE_"
    "BEPOSIONDAMPER\020\321\005\022\026\n\021EATTRTYPE_WINDATK\020\322"
    "\005\022\027\n\022EATTRTYPE_EARTHATK\020\323\005\022\026\n\021EATTRTYPE_"
    "FIREATK\020\324\005\022\027\n\022EATTRTYPE_WATERATK\020\325\005\022\031\n\024E"
    "ATTRTYPE_NEUTRALATK\020\326\005\022\026\n\021EATTRTYPE_HOLY"
    "ATK\020\327\005\022\026\n\021EATTRTYPE_DARKATK\020\330\005\022\026\n\021EATTRT"
    "YPE_WINDDEF\020\331\005\022\027\n\022EATTRTYPE_EARTHDEF\020\332\005\022"
    "\026\n\021EATTRTYPE_FIREDEF\020\333\005\022\027\n\022EATTRTYPE_WAT"
    "ERDEF\020\334\005\022\031\n\024EATTRTYPE_NEUTRALDEF\020\335\005\022\026\n\021E"
    "ATTRTYPE_HOLYDEF\020\336\005\022\026\n\021EATTRTYPE_DARKDEF"
    "\020\337\005\022\027\n\022EATTRTYPE_GHOSTATK\020\340\005\022\030\n\023EATTRTYP"
    "E_UNDEADATK\020\341\005\022\033\n\026EATTRTYPE_POISONINGATK"
    "\020\342\005\022\032\n\025EATTRTYPE_BRUTEDAMPER\020\240\006\022\036\n\031EATTR"
    "TYPE_DEMIHUMANDAMPER\020\241\006\022\032\n\025EATTRTYPE_DEM"
    "ONDAMPER\020\242\006\022\032\n\025EATTRTYPE_PLANTDAMPER\020\243\006\022"
    "\035\n\030EATTRTYPE_DEADLESSDAMPER\020\244\006\022\035\n\030EATTRT"
    "YPE_FORMLESSDAMPER\020\245\006\022\031\n\024EATTRTYPE_FISHD"
    "AMPER\020\246\006\022\032\n\025EATTRTYPE_ANGLEDAMPER\020\247\006\022\033\n\026"
    "EATTRTYPE_INSECTDAMPER\020\250\006\022\033\n\026EATTRTYPE_D"
    "RAGONDAMPER\020\251\006\022\032\n\025EATTRTYPE_BRUTERESPER\020"
    "\252\006\022\036\n\031EATTRTYPE_DEMIHUMANRESPER\020\253\006\022\032\n\025EA"
    "TTRTYPE_DEMONRESPER\020\254\006\022\032\n\025EATTRTYPE_PLAN"
    "TRESPER\020\255\006\022\035\n\030EATTRTYPE_DEADLESSRESPER\020\256"
    "\006\022\035\n\030EATTRTYPE_FORMLESSRESPER\020\257\006\022\031\n\024EATT"
    "RTYPE_FISHRESPER\020\260\006\022\032\n\025EATTRTYPE_ANGLERE"
    "SPER\020\261\006\022\033\n\026EATTRTYPE_INSECTRESPER\020\262\006\022\033\n\026"
    "EATTRTYPE_DRAGONRESPER\020\263\006\022\032\n\025EATTRTYPE_S"
    "MALLDAMPER\020\204\007\022\032\n\025EATTRTYPE_SMALLRESPER\020\205"
    "\007\022\030\n\023EATTRTYPE_MIDDAMPER\020\206\007\022\030\n\023EATTRTYPE"
    "_MIDRESPER\020\207\007\022\030\n\023EATTRTYPE_BIGDAMPER\020\210\007\022"
    "\030\n\023EATTRTYPE_BIGRESPER\020\211\007\022\031\n\024EATTRTYPE_B"
    "OSSDAMPER\020\212\007\022\031\n\024EATTRTYPE_BOSSRESPER\020\213\007\022"
    "\034\n\027EATTRTYPE_MONSTERDAMPER\020\214\007\022\034\n\027EATTRTY"
    "PE_MONSTERRESPER\020\215\007\022\030\n\023EATTRTYPE_NPCDAMP"
    "ER\020\216\007\022\030\n\023EATTRTYPE_NPCRESPER\020\217\007\022\031\n\024EATTR"
    "TYPE_SILENCEATK\020\350\007\022\031\n\024EATTRTYPE_SILENCED"
    "EF\020\351\007\022\030\n\023EATTRTYPE_FREEZEATK\020\352\007\022\030\n\023EATTR"
    "TYPE_FREEZEDEF\020\353\007\022\027\n\022EATTRTYPE_STONEATK\020"
    "\354\007\022\027\n\022EATTRTYPE_STONEDEF\020\355\007\022\026\n\021EATTRTYPE"
    "_STUNATK\020\356\007\022\026\n\021EATTRTYPE_STUNDEF\020\357\007\022\027\n\022E"
    "ATTRTYPE_BLINDATK\020\360\007\022\027\n\022EATTRTYPE_BLINDD"
    "EF\020\361\007\022\030\n\023EATTRTYPE_POSIONATK\020\362\007\022\030\n\023EATTR"
    "TYPE_POSIONDEF\020\363\007\022\026\n\021EATTRTYPE_SLOWATK\020\364"
    "\007\022\026\n\021EATTRTYPE_SLOWDEF\020\365\007\022\027\n\022EATTRTYPE_C"
    "HAOSATK\020\366\007\022\027\n\022EATTRTYPE_CHAOSDEF\020\367\007\022\027\n\022E"
    "ATTRTYPE_CURSEATK\020\370\007\022\027\n\022EATTRTYPE_CURSED"
    "EF\020\371\007\022\032\n\025EATTRTYPE_TRANSFORMID\020\200\010\022\027\n\022EAT"
    "TRTYPE_SLEEPATK\020\201\010\022\027\n\022EATTRTYPE_SLEEPDEF"
    "\020\202\010\022\033\n\026EATTRTYPE_BEHEALENCPER\020\326\010\022\031\n\024EATT"
    "RTYPE_HEALENCPER\020\327\010\022\027\n\022EATTRTYPE_DEADSOO"
    "N\020\270\t\022\026\n\021EATTRTYPE_SAVE_HP\020\271\t\022\026\n\021EATTRTYP"
    "E_SAVE_SP\020\272\t\022\032\n\025EATTRTYPE_SLIM_HEIGHT\020\273\t"
    "\022\032\n\025EATTRTYPE_SLIM_WEIGHT\020\274\t\022\031\n\024EATTRTYP"
    "E_BASEEXPPER\020\275\t\022\030\n\023EATTRTYPE_JOBEXPPER\020\276"
    "\t\022\022\n\rEATTRTYPE_MAX\020\277\t*Q\n\007EGender\022\017\n\013EGEN"
    "DER_MIN\020\000\022\020\n\014EGENDER_MALE\020\001\022\022\n\016EGENDER_F"
    "EMALE\020\002\022\017\n\013EGENDER_MAX\020\003*\353\t\n\013EProfession"
    "\022\023\n\017EPROFESSION_MIN\020\000\022\026\n\022EPROFESSION_NOV"
    "ICE\020\001\022\027\n\023EPROFESSION_WARRIOR\020\013\022\026\n\022EPROFE"
    "SSION_KNIGHT\020\014\022\032\n\026EPROFESSION_LORDKNIGHT"
    "\020\r\022\032\n\026EPROFESSION_RUNEKNIGHT\020\016\022\030\n\024EPROFE"
    "SSION_CRUSADER\020H\022\027\n\023EPROFESSION_PALADIN\020"
    "I\022\032\n\026EPROFESSION_ROYALGUARD\020J\022\030\n\024EPROFES"
    "SION_MAGICIAN\020\025\022\026\n\022EPROFESSION_WIZARD\020\026\022"
    "\032\n\026EPROFESSION_HIGHWIZARD\020\027\022\027\n\023EPROFESSI"
    "ON_WARLOCK\020\030\022\024\n\020EPROFESSION_SAGE\020R\022\031\n\025EP"
    "ROFESSION_PROFESSOR\020S\022\030\n\024EPROFESSION_SOR"
    "CERER\020T\022\025\n\021EPROFESSION_THIEF\020\037\022\030\n\024EPROFE"
    "SSION_ASSASSIN\020 \022\035\n\031EPROFESSION_ASSASSIN"
    "CROSS\020!\022\037\n\033EPROFESSION_GUILLOTINECROSS\020\""
    "\022\025\n\021EPROFESSION_ROGUE\020\\\022\027\n\023EPROFESSION_S"
    "TALKER\020]\022\034\n\030EPROFESSION_SHADOWCHASER\020^\022\026"
    "\n\022EPROFESSION_ARCHER\020)\022\026\n\022EPROFESSION_HU"
    "NTER\020*\022\026\n\022EPROFESSION_SNIPER\020+\022\026\n\022EPROFE"
    "SSION_RANGER\020,\022\024\n\020EPROFESSION_BARD\020f\022\025\n\021"
    "EPROFESSION_CLOWN\020g\022\030\n\024EPROFESSION_MINST"
    "REL\020h\022\026\n\022EPROFESSION_DANCER\020p\022\025\n\021EPROFES"
    "SION_GYPSY\020q\022\030\n\024EPROFESSION_WANDERER\020r\022\027"
    "\n\023EPROFESSION_ACOLYTE\0203\022\026\n\022EPROFESSION_P"
    "RIEST\0204\022\032\n\026EPROFESSION_HIGHPRIEST\0205\022\032\n\026E"
    "PROFESSION_ARCHBISHOP\0206\022\024\n\020EPROFESSION_M"
    "ONK\020z\022\030\n\024EPROFESSION_CHAMPION\020{\022\025\n\021EPROF"
    "ESSION_SHURA\020|\022\030\n\024EPROFESSION_MERCHANT\020="
    "\022\032\n\026EPROFESSION_BLACKSMITH\020>\022\032\n\026EPROFESS"
    "ION_WHITESMITH\020\?\022\030\n\024EPROFESSION_MECHANIC"
    "\020@\022\032\n\025EPROFESSION_ALCHEMIST\020\204\001\022\030\n\023EPROFE"
    "SSION_CREATOR\020\205\001\022\030\n\023EPROFESSION_GENETIC\020"
    "\206\001\022\024\n\017EPROFESSION_PET\020\347\007\022\024\n\017EPROFESSION_"
    "MAX\020\350\007*\345\001\n\014EQualityType\022\024\n\020EQUALITYTYPE_"
    "MIN\020\000\022\026\n\022EQUALITYTYPE_WHITE\020\001\022\026\n\022EQUALIT"
    "YTYPE_GREEN\020\002\022\025\n\021EQUALITYTYPE_BLUE\020\003\022\027\n\023"
    "EQUALITYTYPE_PURPLE\020\004\022\027\n\023EQUALITYTYPE_OR"
    "ANGE\020\005\022\025\n\021EQUALITYTYPE_GOLD\020\006\022\031\n\025EQUALIT"
    "YTYPE_DARKGOLD\020\007\022\024\n\020EQUALITYTYPE_MAX\020\010*\355"
    "\002\n\nEMoneyType\022\022\n\016EMONEYTYPE_MIN\020\000\022\027\n\022EMO"
    "NEYTYPE_DIAMOND\020\204\001\022\026\n\021EMONEYTYPE_SILVER\020"
    "\203\001\022\024\n\017EMONEYTYPE_GOLD\020\202\001\022\026\n\021EMONEYTYPE_G"
    "ARDEN\020\214\001\022\033\n\026EMONEYTYPE_MANUALSKILL\020\217\001\022\032\n"
    "\025EMONEYTYPE_CONTRIBUTE\020\221\001\022\032\n\025EMONEYTYPE_"
    "GUILDASSET\020\222\001\022\032\n\025EMONEYTYPE_FRIENDSHIP\020\223"
    "\001\022\027\n\022EMONEYTYPE_PVPCOIN\020\215\001\022\027\n\022EMONEYTYPE"
    "_LOTTERY\020\232\001\022\032\n\025EMONEYTYPE_GUILDHONOR\020\234\001\022"
    "\030\n\023EMONEYTYPE_DEADCOIN\020\251\001\022\023\n\016EMONEYTYPE_"
    "MAX\020\252\001*\305\003\n\017ECreatureStatus\022\027\n\023ECREATURES"
    "TATUS_MIN\020\000\022\030\n\024ECREATURESTATUS_LIVE\020\001\022\027\n"
    "\023ECREATURESTATUS_SIT\020\002\022\030\n\024ECREATURESTATU"
    "S_DEAD\020\003\022\031\n\025ECREATURESTATUS_PHOTO\020\004\022\034\n\030E"
    "CREATURESTATUS_FAKEDEAD\020\005\022\032\n\026ECREATUREST"
    "ATUS_REMOVE\020\006\022\036\n\032ECREATURESTATUS_SELF_PH"
    "OTO\020\007\022\030\n\024ECREATURESTATUS_IDLE\020\010\022\031\n\025ECREA"
    "TURESTATUS_CLEAR\020\t\022\032\n\026ECREATURESTATUS_RE"
    "LIVE\020\n\022\031\n\025ECREATURESTATUS_LEAVE\020\013\022\027\n\023ECR"
    "EATURESTATUS_EVO\020\014\022\033\n\027ECREATURESTATUS_SU"
    "ICIDE\020\r\022\034\n\030ECREATURESTATUS_INRELIVE\020\016\022\027\n"
    "\023ECREATURESTATUS_MAX\020\017*\335\034\n\007ESource\022\017\n\013ES"
    "OURCE_MIN\020\000\022\022\n\016ESOURCE_NORMAL\020\001\022\023\n\017ESOUR"
    "CE_PACKAGE\020\002\022\021\n\rESOURCE_QUEST\020\003\022\021\n\rESOUR"
    "CE_EQUIP\020\004\022\020\n\014ESOURCE_CARD\020\005\022\024\n\020ESOURCE_"
    "ACTSKILL\020\006\022\023\n\017ESOURCE_COMPOSE\020\t\022\022\n\016ESOUR"
    "CE_REWARD\020\n\022\027\n\023ESOURCE_MONSTERKILL\020\013\022\016\n\n"
    "ESOURCE_GM\020\014\022\021\n\rESOURCE_FUBEN\020\r\022\022\n\016ESOUR"
    "CE_CHARGE\020\016\022\026\n\022ESOURCE_LABORATORY\020\017\022\024\n\020E"
    "SOURCE_MAPTRANS\020\020\022\020\n\014ESOURCE_HAIR\020\021\022\024\n\020E"
    "SOURCE_STRENGTH\020\022\022\020\n\014ESOURCE_SHOP\020\023\022\020\n\014E"
    "SOURCE_SELL\020\025\022\022\n\016ESOURCE_PICKUP\020\026\022\023\n\017ESO"
    "URCE_OFFLINE\020\027\022\020\n\014ESOURCE_LVUP\020\030\022\021\n\rESOU"
    "RCE_TRADE\020\031\022\024\n\020ESOURCE_TRANSFER\020\032\022\020\n\014ESO"
    "URCE_SEAL\020\033\022\025\n\021ESOURCE_GUILDPRAY\020\034\022\023\n\017ES"
    "OURCE_ENCHANT\020\035\022\027\n\023ESOURCE_GUILDCREATE\020\036"
    "\022\030\n\024ESOURCE_GUILDLEVELUP\020\037\022\022\n\016ESOURCE_RE"
    "LIVE\020 \022\022\n\016ESOURCE_REPAIR\020!\022\021\n\rESOURCE_ST"
    "ORE\020\"\022\024\n\020ESOURCE_MUSICBOX\020#\022\021\n\rESOURCE_T"
    "OWER\020$\022\025\n\021ESOURCE_DOJOFIRST\020%\022\024\n\020ESOURCE"
    "_DOJOHELP\020&\022\022\n\016ESOURCE_MANUAL\020\'\022\017\n\013ESOUR"
    "CE_ROB\020)\022\027\n\023ESOURCE_WANTEDQUEST\020*\022\022\n\016ESO"
    "URCE_DONATE\020+\022\025\n\021ESOURCE_MONSTERAI\020,\022\024\n\020"
    "ESOURCE_TREASURE\020-\022\027\n\023ESOURCE_FERRISWHEE"
    "L\020.\022\026\n\022ESOURCE_CRAZYGHOST\020/\022\024\n\020ESOURCE_J"
    "UMPZONE\0200\022\023\n\017ESOURCE_OPERATE\0201\022\017\n\013ESOURC"
    "E_DOG\0202\022\020\n\014ESOURCE_GIFT\0203\022\016\n\nESOURCE_QA\020"
    "4\022\025\n\021ESOURCE_DECOMPOSE\0205\022\020\n\014ESOURCE_HELP"
    "\0206\022\025\n\021ESOURCE_OPENSTORE\0207\022\024\n\020ESOURCE_PUT"
    "STORE\0208\022\024\n\020ESOURCE_OFFSTORE\0209\022\024\n\020ESOURCE"
    "_EXCHANGE\020:\022\026\n\022ESOURCE_UNSTRENGTH\020;\022\026\n\022E"
    "SOURCE_DAILYQUEST\020<\022\023\n\017ESOURCE_USEITEM\020="
    "\022\023\n\017ESOURCE_RESTORE\020>\022\024\n\020ESOURCE_TEMPPAC"
    "K\020\?\022\033\n\027ESOURCE_TRADE_PUBLICITY\020@\022#\n\037ESOU"
    "RCE_TRADE_PUBLICITY_FAILRET\020A\022\022\n\016ESOURCE"
    "_KAPULA\020B\022\024\n\020ESOURCE_MONEYCAT\020C\022\025\n\021ESOUR"
    "CE_VALENTINE\020D\022\033\n\027ESOURCE_PERSON_PUTSTOR"
    "E\020E\022\033\n\027ESOURCE_PERSON_OFFSTORE\020F\022\033\n\027ESOU"
    "RCE_PUBLIC_PUTSTORE\020G\022\033\n\027ESOURCE_PUBLIC_"
    "OFFSTORE\020H\022\030\n\024ESOURCE_PUT_TEMPPACK\020I\022\030\n\024"
    "ESOURCE_OFF_TEMPPACK\020J\022\017\n\013ESOURCE_CAT\020K\022"
    "\020\n\014ESOURCE_GIVE\020L\022\023\n\017ESOURCE_UPGRADE\020M\022\026"
    "\n\022ESOURCE_PUT_BARROW\020N\022\026\n\022ESOURCE_OFF_BA"
    "RROW\020O\022\033\n\027ESOURCE_OPEN_GUILD_GATE\020P\022\035\n\031E"
    "SOURCE_UNLOCK_GUILD_GATE\020Q\022\025\n\021ESOURCE_GU"
    "ILDRAID\020R\022\025\n\021ESOURCE_MONTHCARD\020S\022\036\n\032ESOU"
    "RCE_ASTROLABE_ACTIVATE\020T\022\033\n\027ESOURCE_ASTR"
    "OLABE_RESET\020U\022\030\n\024ESOURCE_EXCHANGECARD\020V\022"
    "\025\n\021ESOURCE_COOK_FOOD\020W\022\024\n\020ESOURCE_EAT_FO"
    "OD\020X\022\031\n\025ESOURCE_PHOTO_SCENERY\020Y\022\026\n\022ESOUR"
    "CE_PHOTO_SELF\020Z\022\023\n\017ESOURCE_LOTTERY\020[\022\034\n\030"
    "ESOURCE_LOTTERY_RECOVERY\020\\\022\017\n\013ESOURCE_PE"
    "T\020]\022\031\n\025ESOURCE_PET_ADVENTURE\020^\022\020\n\014ESOURC"
    "E_MAIL\020_\022\020\n\014ESOURCE_BUFF\020`\022\017\n\013ESOURCE_PV"
    "P\020a\022\032\n\026ESOURCE_AUCTION_SIGNUP\020b\022\036\n\032ESOUR"
    "CE_AUCTION_OFFERPRICE\020c\022\023\n\017ESOURCE_AUCTI"
    "ON\020d\022\027\n\023ESOURCE_GANEN_FUDAI\020f\022\026\n\022ESOURCE"
    "_TUTOR_TASK\020g\022\026\n\022ESOURCE_TUTOR_GROW\020h\022\034\n"
    "\030ESOURCE_TUTOR_GRADUATION\020i\022\027\n\023ESOURCE_U"
    "SER_RENAME\020j\022\030\n\024ESOURCE_GUILD_RENAME\020k\022\027"
    "\n\023ESOURCE_MAT_COMPOSE\020l\022\027\n\023ESOURCE_HIGH_"
    "REFINE\020m\022\030\n\024ESOURCE_LOTTERY_HEAD\020o\022\031\n\025ES"
    "OURCE_LOTTERY_EQUIP\020p\022\030\n\024ESOURCE_LOTTERY"
    "_CARD\020q\022\034\n\030ESOURCE_LOTTERY_HEAD_OLD\020r\022\025\n"
    "\021ESOURCE_PVP_POLLY\020s\022\032\n\026ESOURCE_ACTIVITY"
    "_EVENT\020t\022!\n\035ESOURCE_GUILD_SUBMIT_MATERIA"
    "L\020u\022\"\n\036ESOURCE_GUILD_BUILDING_WELFARE\020v\022"
    "\033\n\027ESOURCE_GUILD_CHALLENGE\020w\022 \n\034ESOURCE_"
    "LOTTERY_CATLITTERBOX\020y\022\027\n\023ESOURCE_PHOTO_"
    "GUILD\020z\022\031\n\025ESOURCE_LOTTERY_MAGIC\020{\022\022\n\016ES"
    "OURCE_RECALL\020|\022\034\n\030ESOURCE_ARTIFACT_PRODU"
    "CE\020}\022\037\n\033ESOURCE_ARTIFACT_DISTRIBUTE\020~\022\030\n"
    "\024ESOURCE_LOTTERY_GIVE\020\177\022\034\n\027ESOURCE_RESER"
    "VE_WEDDING\020\200\001\022 \n\033ESOURCE_WEDDING_BUY_PAC"
    "KAGE\020\201\001\022\035\n\030ESOURCE_WEDDING_BUY_RING\020\202\001\022\036"
    "\n\031ESOURCE_WEDDINGDRESS_GIVE\020\203\001\022\032\n\025ESOURC"
    "E_WEDDING_PHOTO\020\204\001\022\033\n\026ESOURCE_GUILD_TREA"
    "SURE\020\205\001\022\020\n\013ESOURCE_GVG\020\206\001\022\024\n\017ESOURCE_WED"
    "DING\020\207\001\022\033\n\026ESOURCE_CARD_DECOMPOSE\020\210\001\022\025\n\020"
    "ESOURCE_PET_WORK\020\211\001\022\024\n\017ESOURCE_SERVANT\020\212"
    "\001\022\031\n\024ESOURCE_KFC_ACTIVITY\020\213\001\022\033\n\026ESOURCE_"
    "PROFESSION_BUY\020\214\001\022\030\n\023ESOURCE_USER_RECORD"
    "\020\215\001\022\036\n\031ESOURCE_PROFESSION_CHANGE\020\216\001\022\033\n\026E"
    "SOURCE_FASHION_GEDNER\020\217\001\022\027\n\022ESOURCE_QUIC"
    "KSTORE\020\220\001\022\032\n\025ESOURCE_ENCHANT_TRANS\020\221\001\022\023\n"
    "\016ESOURCE_PUZZLE\020\222\001\022\032\n\025ESOURCE_EXCHANGE_S"
    "HOP\020\223\001\022\032\n\025ESOURCE_DRESSUP_STAGE\020\224\001\022\021\n\014ES"
    "OURCE_DEAD\020\225\001\022\036\n\031ESOURCE_QUICKSTORE_RETU"
    "RN\020\226\001\022\032\n\025ESOURCE_EQUIP_COMPOSE\020\227\001\022\021\n\014ESO"
    "URCE_CHAT\020\230\001\022\033\n\026ESOURCE_GUILD_LEVEL_UP\020\231"
    "\001\022\036\n\031ESOURCE_GUILD_CHANGE_ZONE\020\232\001\022 \n\033ESO"
    "URCE_GUILD_OPEN_BUILDING\020\233\001\022\027\n\022ESOURCE_G"
    "UILD_SHOP\020\234\001\022\036\n\031ESOURCE_GUILD_MAINTENANC"
    "E\020\235\001\022\020\n\013ESOURCE_MAX\020\236\001*\232\001\n\rEDoubleSource"
    "\022\025\n\021EDOUBLESOURCE_MIN\020\000\022\034\n\030EDOUBLESOURCE"
    "_GUILD_TASK\020\001\022\036\n\032EDOUBLESOURCE_GUILD_DON"
    "ATE\020\002\022\035\n\031EDOUBLESOURCE_GUILD_QUEST\020\003\022\025\n\021"
    "EDOUBLESOURCE_MAX\020\004*O\n\013ESummonType\022\023\n\017ES"
    "UMMONTYPE_MIN\020\000\022\026\n\022ESUMMONTYPE_BRANCH\020\001\022"
    "\023\n\017ESUMMONTYPE_MAX\020\002*\252\005\n\017ETRADE_RET_CODE"
    "\022\033\n\027ETRADE_RET_CODE_SUCCESS\020\000\022\030\n\024ETRADE_"
    "RET_CODE_FAIL\020\001\022!\n\035ETRADE_RET_CODE_INVAL"
    "ID_PRICE\020d\022!\n\035ETRADE_RET_CODE_INVALID_CO"
    "UNT\020e\022\036\n\032ETRADE_RET_CODE_NOT_ONLINE\020f\022\037\n"
    "\033ETRADE_RET_CODE_CANNOT_SELL\020g\022\034\n\030ETRADE"
    "_RET_CODE_DB_ERROR\020h\022\035\n\031ETRADE_RET_CODE_"
    "SYS_ERROR\020i\022-\n)ETRADE_RET_CODE_CANNOT_FI"
    "ND_USER_IN_SCENE\020j\022.\n*ETRADE_RET_CODE_CA"
    "NNOT_MONEY_IS_NOT_ENOUGH\020k\022*\n&ETRADE_RET"
    "_CODE_CANNOT_ITEM_IS_FROSTED\020l\022*\n&ETRADE"
    "_RET_CODE_CANNOT_PENDING_IS_FULL\020m\022&\n\"ET"
    "RADE_RET_CODE_CANNOT_CANNOT_SELL\020n\022%\n!ET"
    "RADE_RET_CODE_PENDING_IS_SELLED\020o\022%\n!ETR"
    "ADE_RET_CODE_PENDING_IS_LOCKED\020p\022\"\n\036ETRA"
    "DE_RET_CODE_INVALID_PARAMS\020q\022\033\n\027ETRADE_R"
    "ET_CODE_CFG_ERR\020r\022.\n*ETRADE_RET_CODE_CAN"
    "NOT_QUOTA_IS_NOT_ENOUGH\020s*q\n\016EAccountSta"
    "tus\022\026\n\022EACCOUNTSTATUS_MIN\020\000\022\026\n\022EACCOUNTS"
    "TATUS_GAP\020\001\022\027\n\023EACCOUNTSTATUS_LOCK\020\002\022\026\n\022"
    "EACCOUNTSTATUS_MAX\020\004*f\n\010EBgmType\022\023\n\017EBGM"
    "_TYPE_QUEST\020\000\022\026\n\022EBGM_TYPE_ACTIVITY\020\001\022\026\n"
    "\022EBGM_TYPE_MUSICBOX\020\002\022\025\n\021EBGM_TYPE_REPLA"
    "CE\020\003*\215\001\n\020EDepositCardType\022\025\n\021ETITLE_TYPE"
    "_MONEY\020\001\022\025\n\021ETITLE_TYPE_MONTH\020\002\022\027\n\023ETITL"
    "E_TYPE_LOTTERY\020\003\022\025\n\021ETITLE_TYPE_FUDAI\020\004\022"
    "\033\n\027ETITLE_TYPE_VERSIONCARD\020\005", 19508);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoCommon.proto", &protobuf_RegisterTypes);
  ScenePos::default_instance_ = new ScenePos();
  SnapShotDataPB::default_instance_ = new SnapShotDataPB();
  Pos::default_instance_ = new Pos();
  NpcDefineData::default_instance_ = new NpcDefineData();
  UpyunApi::default_instance_ = new UpyunApi();
  FrostItemInfo::default_instance_ = new FrostItemInfo();
  SpEffectData::default_instance_ = new SpEffectData();
  Param::default_instance_ = new Param();
  ConfigParam::default_instance_ = new ConfigParam();
  UserPortraitData::default_instance_ = new UserPortraitData();
  ScenePos::default_instance_->InitAsDefaultInstance();
  SnapShotDataPB::default_instance_->InitAsDefaultInstance();
  Pos::default_instance_->InitAsDefaultInstance();
  NpcDefineData::default_instance_->InitAsDefaultInstance();
  UpyunApi::default_instance_->InitAsDefaultInstance();
  FrostItemInfo::default_instance_->InitAsDefaultInstance();
  SpEffectData::default_instance_->InitAsDefaultInstance();
  Param::default_instance_->InitAsDefaultInstance();
  ConfigParam::default_instance_->InitAsDefaultInstance();
  UserPortraitData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoCommon_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoCommon_2eproto {
  StaticDescriptorInitializer_ProtoCommon_2eproto() {
    protobuf_AddDesc_ProtoCommon_2eproto();
  }
} static_descriptor_initializer_ProtoCommon_2eproto_;
const ::google::protobuf::EnumDescriptor* EPublishVersion_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EPublishVersion_descriptor_;
}
bool EPublishVersion_IsValid(int value) {
  switch(value) {
    case 20160216:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EUserDataType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EUserDataType_descriptor_;
}
bool EUserDataType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EMARITAL_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EMARITAL_descriptor_;
}
bool EMARITAL_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EAttrType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EAttrType_descriptor_;
}
bool EAttrType_IsValid(int value) {
  switch(value) {
    case 0:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 211:
    case 212:
    case 213:
    case 214:
    case 215:
    case 216:
    case 217:
    case 218:
    case 219:
    case 220:
    case 221:
    case 222:
    case 223:
    case 224:
    case 225:
    case 226:
    case 227:
    case 228:
    case 229:
    case 300:
    case 301:
    case 302:
    case 303:
    case 304:
    case 305:
    case 306:
    case 307:
    case 308:
    case 309:
    case 310:
    case 311:
    case 312:
    case 400:
    case 401:
    case 402:
    case 403:
    case 404:
    case 405:
    case 406:
    case 407:
    case 408:
    case 409:
    case 410:
    case 411:
    case 412:
    case 413:
    case 414:
    case 415:
    case 416:
    case 417:
    case 418:
    case 419:
    case 420:
    case 421:
    case 422:
    case 423:
    case 424:
    case 425:
    case 426:
    case 427:
    case 428:
    case 429:
    case 430:
    case 431:
    case 432:
    case 433:
    case 434:
    case 435:
    case 436:
    case 437:
    case 438:
    case 439:
    case 440:
    case 441:
    case 442:
    case 443:
    case 444:
    case 445:
    case 446:
    case 447:
    case 448:
    case 449:
    case 450:
    case 451:
    case 452:
    case 453:
    case 454:
    case 455:
    case 456:
    case 509:
    case 510:
    case 511:
    case 512:
    case 515:
    case 516:
    case 517:
    case 518:
    case 519:
    case 520:
    case 521:
    case 522:
    case 523:
    case 524:
    case 534:
    case 535:
    case 536:
    case 537:
    case 600:
    case 601:
    case 602:
    case 603:
    case 604:
    case 605:
    case 606:
    case 607:
    case 608:
    case 609:
    case 610:
    case 611:
    case 612:
    case 613:
    case 614:
    case 615:
    case 616:
    case 617:
    case 618:
    case 619:
    case 700:
    case 701:
    case 702:
    case 703:
    case 704:
    case 705:
    case 706:
    case 707:
    case 708:
    case 709:
    case 710:
    case 711:
    case 712:
    case 713:
    case 714:
    case 715:
    case 716:
    case 717:
    case 718:
    case 719:
    case 720:
    case 721:
    case 722:
    case 723:
    case 724:
    case 725:
    case 726:
    case 727:
    case 728:
    case 729:
    case 730:
    case 731:
    case 732:
    case 733:
    case 734:
    case 735:
    case 736:
    case 737:
    case 738:
    case 800:
    case 801:
    case 802:
    case 803:
    case 804:
    case 805:
    case 806:
    case 807:
    case 808:
    case 809:
    case 810:
    case 811:
    case 812:
    case 813:
    case 814:
    case 815:
    case 816:
    case 817:
    case 818:
    case 819:
    case 900:
    case 901:
    case 902:
    case 903:
    case 904:
    case 905:
    case 906:
    case 907:
    case 908:
    case 909:
    case 910:
    case 911:
    case 1000:
    case 1001:
    case 1002:
    case 1003:
    case 1004:
    case 1005:
    case 1006:
    case 1007:
    case 1008:
    case 1009:
    case 1010:
    case 1011:
    case 1012:
    case 1013:
    case 1014:
    case 1015:
    case 1016:
    case 1017:
    case 1024:
    case 1025:
    case 1026:
    case 1110:
    case 1111:
    case 1208:
    case 1209:
    case 1210:
    case 1211:
    case 1212:
    case 1213:
    case 1214:
    case 1215:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EGender_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EGender_descriptor_;
}
bool EGender_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EProfession_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EProfession_descriptor_;
}
bool EProfession_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 11:
    case 12:
    case 13:
    case 14:
    case 21:
    case 22:
    case 23:
    case 24:
    case 31:
    case 32:
    case 33:
    case 34:
    case 41:
    case 42:
    case 43:
    case 44:
    case 51:
    case 52:
    case 53:
    case 54:
    case 61:
    case 62:
    case 63:
    case 64:
    case 72:
    case 73:
    case 74:
    case 82:
    case 83:
    case 84:
    case 92:
    case 93:
    case 94:
    case 102:
    case 103:
    case 104:
    case 112:
    case 113:
    case 114:
    case 122:
    case 123:
    case 124:
    case 132:
    case 133:
    case 134:
    case 999:
    case 1000:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EQualityType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EQualityType_descriptor_;
}
bool EQualityType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EMoneyType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EMoneyType_descriptor_;
}
bool EMoneyType_IsValid(int value) {
  switch(value) {
    case 0:
    case 130:
    case 131:
    case 132:
    case 140:
    case 141:
    case 143:
    case 145:
    case 146:
    case 147:
    case 154:
    case 156:
    case 169:
    case 170:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ECreatureStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ECreatureStatus_descriptor_;
}
bool ECreatureStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ESource_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ESource_descriptor_;
}
bool ESource_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EDoubleSource_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EDoubleSource_descriptor_;
}
bool EDoubleSource_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ESummonType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ESummonType_descriptor_;
}
bool ESummonType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ETRADE_RET_CODE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ETRADE_RET_CODE_descriptor_;
}
bool ETRADE_RET_CODE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EAccountStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EAccountStatus_descriptor_;
}
bool EAccountStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EBgmType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EBgmType_descriptor_;
}
bool EBgmType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EDepositCardType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EDepositCardType_descriptor_;
}
bool EDepositCardType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int ScenePos::kXFieldNumber;
const int ScenePos::kYFieldNumber;
const int ScenePos::kZFieldNumber;
#endif  // !_MSC_VER

ScenePos::ScenePos()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ScenePos)
}

void ScenePos::InitAsDefaultInstance() {
}

ScenePos::ScenePos(const ScenePos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ScenePos)
}

void ScenePos::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScenePos::~ScenePos() {
  // @@protoc_insertion_point(destructor:Cmd.ScenePos)
  SharedDtor();
}

void ScenePos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ScenePos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScenePos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScenePos_descriptor_;
}

const ScenePos& ScenePos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoCommon_2eproto();
  return *default_instance_;
}

ScenePos* ScenePos::default_instance_ = NULL;

ScenePos* ScenePos::New() const {
  return new ScenePos;
}

void ScenePos::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ScenePos*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_, z_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ScenePos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ScenePos)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 x = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // optional int32 y = 2;
      case 2: {
        if (tag == 16) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_z;
        break;
      }

      // optional int32 z = 3;
      case 3: {
        if (tag == 24) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ScenePos)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ScenePos)
  return false;
#undef DO_
}

void ScenePos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ScenePos)
  // optional int32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // optional int32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  // optional int32 z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ScenePos)
}

::google::protobuf::uint8* ScenePos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ScenePos)
  // optional int32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // optional int32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  // optional int32 z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ScenePos)
  return target;
}

int ScenePos::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // optional int32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

    // optional int32 z = 3;
    if (has_z()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->z());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScenePos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScenePos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScenePos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScenePos::MergeFrom(const ScenePos& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ScenePos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScenePos::CopyFrom(const ScenePos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenePos::IsInitialized() const {

  return true;
}

void ScenePos::Swap(ScenePos* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ScenePos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScenePos_descriptor_;
  metadata.reflection = ScenePos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SnapShotDataPB::kIdFieldNumber;
const int SnapShotDataPB::kBaselvFieldNumber;
const int SnapShotDataPB::kHairFieldNumber;
const int SnapShotDataPB::kHaircolorFieldNumber;
const int SnapShotDataPB::kLefthandFieldNumber;
const int SnapShotDataPB::kRighthandFieldNumber;
const int SnapShotDataPB::kBodyFieldNumber;
const int SnapShotDataPB::kHeadFieldNumber;
const int SnapShotDataPB::kBackFieldNumber;
const int SnapShotDataPB::kFaceFieldNumber;
const int SnapShotDataPB::kTailFieldNumber;
const int SnapShotDataPB::kMountFieldNumber;
const int SnapShotDataPB::kEyeFieldNumber;
const int SnapShotDataPB::kPartneridFieldNumber;
const int SnapShotDataPB::kPortraitFieldNumber;
const int SnapShotDataPB::kMouthFieldNumber;
const int SnapShotDataPB::kClothcolorFieldNumber;
const int SnapShotDataPB::kGenderFieldNumber;
const int SnapShotDataPB::kProfessionFieldNumber;
const int SnapShotDataPB::kNameFieldNumber;
const int SnapShotDataPB::kSequenceFieldNumber;
const int SnapShotDataPB::kIsopenFieldNumber;
const int SnapShotDataPB::kDeletetimeFieldNumber;
#endif  // !_MSC_VER

SnapShotDataPB::SnapShotDataPB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SnapShotDataPB)
}

void SnapShotDataPB::InitAsDefaultInstance() {
}

SnapShotDataPB::SnapShotDataPB(const SnapShotDataPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SnapShotDataPB)
}

void SnapShotDataPB::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  baselv_ = 0u;
  hair_ = 0u;
  haircolor_ = 0u;
  lefthand_ = 0u;
  righthand_ = 0u;
  body_ = 0u;
  head_ = 0u;
  back_ = 0u;
  face_ = 0u;
  tail_ = 0u;
  mount_ = 0u;
  eye_ = 0u;
  partnerid_ = 0u;
  portrait_ = 0u;
  mouth_ = 0u;
  clothcolor_ = 0u;
  gender_ = 0;
  profession_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sequence_ = 0u;
  isopen_ = 0u;
  deletetime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SnapShotDataPB::~SnapShotDataPB() {
  // @@protoc_insertion_point(destructor:Cmd.SnapShotDataPB)
  SharedDtor();
}

void SnapShotDataPB::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void SnapShotDataPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnapShotDataPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SnapShotDataPB_descriptor_;
}

const SnapShotDataPB& SnapShotDataPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoCommon_2eproto();
  return *default_instance_;
}

SnapShotDataPB* SnapShotDataPB::default_instance_ = NULL;

SnapShotDataPB* SnapShotDataPB::New() const {
  return new SnapShotDataPB;
}

void SnapShotDataPB::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SnapShotDataPB*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, head_);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(back_, mouth_);
  }
  if (_has_bits_[16 / 32] & 8323072) {
    ZR_(clothcolor_, profession_);
    ZR_(sequence_, deletetime_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SnapShotDataPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SnapShotDataPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_baselv;
        break;
      }

      // optional uint32 baselv = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_baselv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &baselv_)));
          set_has_baselv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_hair;
        break;
      }

      // optional uint32 hair = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_hair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hair_)));
          set_has_hair();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_haircolor;
        break;
      }

      // optional uint32 haircolor = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_haircolor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &haircolor_)));
          set_has_haircolor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_lefthand;
        break;
      }

      // optional uint32 lefthand = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_lefthand:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lefthand_)));
          set_has_lefthand();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_righthand;
        break;
      }

      // optional uint32 righthand = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_righthand:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &righthand_)));
          set_has_righthand();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_body;
        break;
      }

      // optional uint32 body = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_body:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &body_)));
          set_has_body();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_head;
        break;
      }

      // optional uint32 head = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_head:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &head_)));
          set_has_head();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_back;
        break;
      }

      // optional uint32 back = 9 [default = 0];
      case 9: {
        if (tag == 72) {
         parse_back:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &back_)));
          set_has_back();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_face;
        break;
      }

      // optional uint32 face = 10 [default = 0];
      case 10: {
        if (tag == 80) {
         parse_face:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &face_)));
          set_has_face();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_tail;
        break;
      }

      // optional uint32 tail = 11 [default = 0];
      case 11: {
        if (tag == 88) {
         parse_tail:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tail_)));
          set_has_tail();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_mount;
        break;
      }

      // optional uint32 mount = 12 [default = 0];
      case 12: {
        if (tag == 96) {
         parse_mount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mount_)));
          set_has_mount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_gender;
        break;
      }

      // optional .Cmd.EGender gender = 13 [default = EGENDER_MIN];
      case 13: {
        if (tag == 104) {
         parse_gender:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EGender_IsValid(value)) {
            set_gender(static_cast< ::Cmd::EGender >(value));
          } else {
            mutable_unknown_fields()->AddVarint(13, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_profession;
        break;
      }

      // optional .Cmd.EProfession profession = 14 [default = EPROFESSION_MIN];
      case 14: {
        if (tag == 112) {
         parse_profession:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EProfession_IsValid(value)) {
            set_profession(static_cast< ::Cmd::EProfession >(value));
          } else {
            mutable_unknown_fields()->AddVarint(14, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_name;
        break;
      }

      // optional string name = 15;
      case 15: {
        if (tag == 122) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_sequence;
        break;
      }

      // optional uint32 sequence = 16 [default = 0];
      case 16: {
        if (tag == 128) {
         parse_sequence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_)));
          set_has_sequence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_isopen;
        break;
      }

      // optional uint32 isopen = 17 [default = 0];
      case 17: {
        if (tag == 136) {
         parse_isopen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isopen_)));
          set_has_isopen();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_deletetime;
        break;
      }

      // optional uint32 deletetime = 18 [default = 0];
      case 18: {
        if (tag == 144) {
         parse_deletetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deletetime_)));
          set_has_deletetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_eye;
        break;
      }

      // optional uint32 eye = 19 [default = 0];
      case 19: {
        if (tag == 152) {
         parse_eye:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eye_)));
          set_has_eye();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_partnerid;
        break;
      }

      // optional uint32 partnerid = 20 [default = 0];
      case 20: {
        if (tag == 160) {
         parse_partnerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &partnerid_)));
          set_has_partnerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_portrait;
        break;
      }

      // optional uint32 portrait = 21 [default = 0];
      case 21: {
        if (tag == 168) {
         parse_portrait:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &portrait_)));
          set_has_portrait();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_mouth;
        break;
      }

      // optional uint32 mouth = 22 [default = 0];
      case 22: {
        if (tag == 176) {
         parse_mouth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mouth_)));
          set_has_mouth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_clothcolor;
        break;
      }

      // optional uint32 clothcolor = 23 [default = 0];
      case 23: {
        if (tag == 184) {
         parse_clothcolor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clothcolor_)));
          set_has_clothcolor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SnapShotDataPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SnapShotDataPB)
  return false;
#undef DO_
}

void SnapShotDataPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SnapShotDataPB)
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint32 baselv = 2 [default = 0];
  if (has_baselv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->baselv(), output);
  }

  // optional uint32 hair = 3 [default = 0];
  if (has_hair()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hair(), output);
  }

  // optional uint32 haircolor = 4 [default = 0];
  if (has_haircolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->haircolor(), output);
  }

  // optional uint32 lefthand = 5 [default = 0];
  if (has_lefthand()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->lefthand(), output);
  }

  // optional uint32 righthand = 6 [default = 0];
  if (has_righthand()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->righthand(), output);
  }

  // optional uint32 body = 7 [default = 0];
  if (has_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->body(), output);
  }

  // optional uint32 head = 8 [default = 0];
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->head(), output);
  }

  // optional uint32 back = 9 [default = 0];
  if (has_back()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->back(), output);
  }

  // optional uint32 face = 10 [default = 0];
  if (has_face()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->face(), output);
  }

  // optional uint32 tail = 11 [default = 0];
  if (has_tail()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->tail(), output);
  }

  // optional uint32 mount = 12 [default = 0];
  if (has_mount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->mount(), output);
  }

  // optional .Cmd.EGender gender = 13 [default = EGENDER_MIN];
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->gender(), output);
  }

  // optional .Cmd.EProfession profession = 14 [default = EPROFESSION_MIN];
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->profession(), output);
  }

  // optional string name = 15;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->name(), output);
  }

  // optional uint32 sequence = 16 [default = 0];
  if (has_sequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->sequence(), output);
  }

  // optional uint32 isopen = 17 [default = 0];
  if (has_isopen()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->isopen(), output);
  }

  // optional uint32 deletetime = 18 [default = 0];
  if (has_deletetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->deletetime(), output);
  }

  // optional uint32 eye = 19 [default = 0];
  if (has_eye()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->eye(), output);
  }

  // optional uint32 partnerid = 20 [default = 0];
  if (has_partnerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->partnerid(), output);
  }

  // optional uint32 portrait = 21 [default = 0];
  if (has_portrait()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->portrait(), output);
  }

  // optional uint32 mouth = 22 [default = 0];
  if (has_mouth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->mouth(), output);
  }

  // optional uint32 clothcolor = 23 [default = 0];
  if (has_clothcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->clothcolor(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SnapShotDataPB)
}

::google::protobuf::uint8* SnapShotDataPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SnapShotDataPB)
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint32 baselv = 2 [default = 0];
  if (has_baselv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->baselv(), target);
  }

  // optional uint32 hair = 3 [default = 0];
  if (has_hair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hair(), target);
  }

  // optional uint32 haircolor = 4 [default = 0];
  if (has_haircolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->haircolor(), target);
  }

  // optional uint32 lefthand = 5 [default = 0];
  if (has_lefthand()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->lefthand(), target);
  }

  // optional uint32 righthand = 6 [default = 0];
  if (has_righthand()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->righthand(), target);
  }

  // optional uint32 body = 7 [default = 0];
  if (has_body()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->body(), target);
  }

  // optional uint32 head = 8 [default = 0];
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->head(), target);
  }

  // optional uint32 back = 9 [default = 0];
  if (has_back()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->back(), target);
  }

  // optional uint32 face = 10 [default = 0];
  if (has_face()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->face(), target);
  }

  // optional uint32 tail = 11 [default = 0];
  if (has_tail()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->tail(), target);
  }

  // optional uint32 mount = 12 [default = 0];
  if (has_mount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->mount(), target);
  }

  // optional .Cmd.EGender gender = 13 [default = EGENDER_MIN];
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->gender(), target);
  }

  // optional .Cmd.EProfession profession = 14 [default = EPROFESSION_MIN];
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->profession(), target);
  }

  // optional string name = 15;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->name(), target);
  }

  // optional uint32 sequence = 16 [default = 0];
  if (has_sequence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->sequence(), target);
  }

  // optional uint32 isopen = 17 [default = 0];
  if (has_isopen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->isopen(), target);
  }

  // optional uint32 deletetime = 18 [default = 0];
  if (has_deletetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->deletetime(), target);
  }

  // optional uint32 eye = 19 [default = 0];
  if (has_eye()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->eye(), target);
  }

  // optional uint32 partnerid = 20 [default = 0];
  if (has_partnerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->partnerid(), target);
  }

  // optional uint32 portrait = 21 [default = 0];
  if (has_portrait()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->portrait(), target);
  }

  // optional uint32 mouth = 22 [default = 0];
  if (has_mouth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->mouth(), target);
  }

  // optional uint32 clothcolor = 23 [default = 0];
  if (has_clothcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->clothcolor(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SnapShotDataPB)
  return target;
}

int SnapShotDataPB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint32 baselv = 2 [default = 0];
    if (has_baselv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->baselv());
    }

    // optional uint32 hair = 3 [default = 0];
    if (has_hair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hair());
    }

    // optional uint32 haircolor = 4 [default = 0];
    if (has_haircolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->haircolor());
    }

    // optional uint32 lefthand = 5 [default = 0];
    if (has_lefthand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lefthand());
    }

    // optional uint32 righthand = 6 [default = 0];
    if (has_righthand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->righthand());
    }

    // optional uint32 body = 7 [default = 0];
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->body());
    }

    // optional uint32 head = 8 [default = 0];
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->head());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 back = 9 [default = 0];
    if (has_back()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->back());
    }

    // optional uint32 face = 10 [default = 0];
    if (has_face()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->face());
    }

    // optional uint32 tail = 11 [default = 0];
    if (has_tail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tail());
    }

    // optional uint32 mount = 12 [default = 0];
    if (has_mount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mount());
    }

    // optional uint32 eye = 19 [default = 0];
    if (has_eye()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eye());
    }

    // optional uint32 partnerid = 20 [default = 0];
    if (has_partnerid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->partnerid());
    }

    // optional uint32 portrait = 21 [default = 0];
    if (has_portrait()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->portrait());
    }

    // optional uint32 mouth = 22 [default = 0];
    if (has_mouth()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mouth());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 clothcolor = 23 [default = 0];
    if (has_clothcolor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clothcolor());
    }

    // optional .Cmd.EGender gender = 13 [default = EGENDER_MIN];
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gender());
    }

    // optional .Cmd.EProfession profession = 14 [default = EPROFESSION_MIN];
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->profession());
    }

    // optional string name = 15;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 sequence = 16 [default = 0];
    if (has_sequence()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sequence());
    }

    // optional uint32 isopen = 17 [default = 0];
    if (has_isopen()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isopen());
    }

    // optional uint32 deletetime = 18 [default = 0];
    if (has_deletetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deletetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnapShotDataPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SnapShotDataPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SnapShotDataPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SnapShotDataPB::MergeFrom(const SnapShotDataPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_baselv()) {
      set_baselv(from.baselv());
    }
    if (from.has_hair()) {
      set_hair(from.hair());
    }
    if (from.has_haircolor()) {
      set_haircolor(from.haircolor());
    }
    if (from.has_lefthand()) {
      set_lefthand(from.lefthand());
    }
    if (from.has_righthand()) {
      set_righthand(from.righthand());
    }
    if (from.has_body()) {
      set_body(from.body());
    }
    if (from.has_head()) {
      set_head(from.head());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_back()) {
      set_back(from.back());
    }
    if (from.has_face()) {
      set_face(from.face());
    }
    if (from.has_tail()) {
      set_tail(from.tail());
    }
    if (from.has_mount()) {
      set_mount(from.mount());
    }
    if (from.has_eye()) {
      set_eye(from.eye());
    }
    if (from.has_partnerid()) {
      set_partnerid(from.partnerid());
    }
    if (from.has_portrait()) {
      set_portrait(from.portrait());
    }
    if (from.has_mouth()) {
      set_mouth(from.mouth());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_clothcolor()) {
      set_clothcolor(from.clothcolor());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_sequence()) {
      set_sequence(from.sequence());
    }
    if (from.has_isopen()) {
      set_isopen(from.isopen());
    }
    if (from.has_deletetime()) {
      set_deletetime(from.deletetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SnapShotDataPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnapShotDataPB::CopyFrom(const SnapShotDataPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapShotDataPB::IsInitialized() const {

  return true;
}

void SnapShotDataPB::Swap(SnapShotDataPB* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(baselv_, other->baselv_);
    std::swap(hair_, other->hair_);
    std::swap(haircolor_, other->haircolor_);
    std::swap(lefthand_, other->lefthand_);
    std::swap(righthand_, other->righthand_);
    std::swap(body_, other->body_);
    std::swap(head_, other->head_);
    std::swap(back_, other->back_);
    std::swap(face_, other->face_);
    std::swap(tail_, other->tail_);
    std::swap(mount_, other->mount_);
    std::swap(eye_, other->eye_);
    std::swap(partnerid_, other->partnerid_);
    std::swap(portrait_, other->portrait_);
    std::swap(mouth_, other->mouth_);
    std::swap(clothcolor_, other->clothcolor_);
    std::swap(gender_, other->gender_);
    std::swap(profession_, other->profession_);
    std::swap(name_, other->name_);
    std::swap(sequence_, other->sequence_);
    std::swap(isopen_, other->isopen_);
    std::swap(deletetime_, other->deletetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SnapShotDataPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SnapShotDataPB_descriptor_;
  metadata.reflection = SnapShotDataPB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Pos::kXFieldNumber;
const int Pos::kYFieldNumber;
const int Pos::kZFieldNumber;
#endif  // !_MSC_VER

Pos::Pos()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.Pos)
}

void Pos::InitAsDefaultInstance() {
}

Pos::Pos(const Pos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.Pos)
}

void Pos::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pos::~Pos() {
  // @@protoc_insertion_point(destructor:Cmd.Pos)
  SharedDtor();
}

void Pos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Pos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pos_descriptor_;
}

const Pos& Pos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoCommon_2eproto();
  return *default_instance_;
}

Pos* Pos::default_instance_ = NULL;

Pos* Pos::New() const {
  return new Pos;
}

void Pos::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Pos*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_, z_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Pos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.Pos)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1 [default = 0];
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2 [default = 0];
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // optional float z = 3 [default = 0];
      case 3: {
        if (tag == 29) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.Pos)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.Pos)
  return false;
#undef DO_
}

void Pos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.Pos)
  // optional float x = 1 [default = 0];
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2 [default = 0];
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float z = 3 [default = 0];
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.Pos)
}

::google::protobuf::uint8* Pos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.Pos)
  // optional float x = 1 [default = 0];
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2 [default = 0];
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional float z = 3 [default = 0];
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.Pos)
  return target;
}

int Pos::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float x = 1 [default = 0];
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 2 [default = 0];
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional float z = 3 [default = 0];
    if (has_z()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Pos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Pos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pos::MergeFrom(const Pos& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Pos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pos::CopyFrom(const Pos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pos::IsInitialized() const {

  return true;
}

void Pos::Swap(Pos* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Pos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pos_descriptor_;
  metadata.reflection = Pos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NpcDefineData::kIdFieldNumber;
const int NpcDefineData::kNameFieldNumber;
const int NpcDefineData::kPosFieldNumber;
const int NpcDefineData::kRangeFieldNumber;
const int NpcDefineData::kDirFieldNumber;
const int NpcDefineData::kRebornFieldNumber;
const int NpcDefineData::kTerritoryFieldNumber;
const int NpcDefineData::kScaleminFieldNumber;
const int NpcDefineData::kScalemaxFieldNumber;
const int NpcDefineData::kLifeFieldNumber;
const int NpcDefineData::kBehavioursFieldNumber;
const int NpcDefineData::kSearchFieldNumber;
const int NpcDefineData::kUniqueidFieldNumber;
const int NpcDefineData::kGearorgstateFieldNumber;
const int NpcDefineData::kPurifyFieldNumber;
const int NpcDefineData::kAttsafelvFieldNumber;
const int NpcDefineData::kDisptimeFieldNumber;
const int NpcDefineData::kGearprivateFieldNumber;
const int NpcDefineData::kLevelFieldNumber;
const int NpcDefineData::kWaitactionFieldNumber;
const int NpcDefineData::kStypeFieldNumber;
const int NpcDefineData::kSuperaiFieldNumber;
const int NpcDefineData::kPursueFieldNumber;
const int NpcDefineData::kPursuetimeFieldNumber;
const int NpcDefineData::kWeaponpetidFieldNumber;
const int NpcDefineData::kDeadlvFieldNumber;
const int NpcDefineData::kDeadrewardidsFieldNumber;
#endif  // !_MSC_VER

NpcDefineData::NpcDefineData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.NpcDefineData)
}

void NpcDefineData::InitAsDefaultInstance() {
  pos_ = const_cast< ::Cmd::Pos*>(&::Cmd::Pos::default_instance());
}

NpcDefineData::NpcDefineData(const NpcDefineData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.NpcDefineData)
}

void NpcDefineData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pos_ = NULL;
  range_ = 0;
  dir_ = 0;
  reborn_ = 0;
  territory_ = 0;
  scalemin_ = 0;
  scalemax_ = 0;
  life_ = 0;
  behaviours_ = 0;
  search_ = 0;
  uniqueid_ = 0;
  gearorgstate_ = 0;
  purify_ = 0;
  attsafelv_ = 0;
  disptime_ = 0;
  gearprivate_ = 0;
  level_ = 0;
  waitaction_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stype_ = 0;
  pursue_ = 0;
  pursuetime_ = 0;
  weaponpetid_ = 0;
  deadlv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NpcDefineData::~NpcDefineData() {
  // @@protoc_insertion_point(destructor:Cmd.NpcDefineData)
  SharedDtor();
}

void NpcDefineData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (waitaction_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete waitaction_;
  }
  if (this != default_instance_) {
    delete pos_;
  }
}

void NpcDefineData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NpcDefineData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NpcDefineData_descriptor_;
}

const NpcDefineData& NpcDefineData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoCommon_2eproto();
  return *default_instance_;
}

NpcDefineData* NpcDefineData::default_instance_ = NULL;

NpcDefineData* NpcDefineData::New() const {
  return new NpcDefineData;
}

void NpcDefineData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NpcDefineData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, range_);
    ZR_(dir_, scalemin_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_pos()) {
      if (pos_ != NULL) pos_->::Cmd::Pos::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(scalemax_, attsafelv_);
  }
  if (_has_bits_[16 / 32] & 14614528) {
    ZR_(disptime_, gearprivate_);
    ZR_(level_, stype_);
    ZR_(pursue_, pursuetime_);
    if (has_waitaction()) {
      if (waitaction_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        waitaction_->clear();
      }
    }
  }
  ZR_(weaponpetid_, deadlv_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  superai_.Clear();
  deadrewardids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NpcDefineData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.NpcDefineData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pos;
        break;
      }

      // optional .Cmd.Pos pos = 3;
      case 3: {
        if (tag == 26) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_range;
        break;
      }

      // optional int32 range = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &range_)));
          set_has_range();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_dir;
        break;
      }

      // optional int32 dir = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_reborn;
        break;
      }

      // optional int32 reborn = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_reborn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reborn_)));
          set_has_reborn();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_territory;
        break;
      }

      // optional int32 territory = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_territory:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &territory_)));
          set_has_territory();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_scalemin;
        break;
      }

      // optional float scalemin = 8 [default = 0];
      case 8: {
        if (tag == 69) {
         parse_scalemin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scalemin_)));
          set_has_scalemin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_scalemax;
        break;
      }

      // optional float scalemax = 9 [default = 0];
      case 9: {
        if (tag == 77) {
         parse_scalemax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scalemax_)));
          set_has_scalemax();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_life;
        break;
      }

      // optional int32 life = 10 [default = 0];
      case 10: {
        if (tag == 80) {
         parse_life:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &life_)));
          set_has_life();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_behaviours;
        break;
      }

      // optional int32 behaviours = 11 [default = 0];
      case 11: {
        if (tag == 88) {
         parse_behaviours:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &behaviours_)));
          set_has_behaviours();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_search;
        break;
      }

      // optional int32 search = 13 [default = 0];
      case 13: {
        if (tag == 104) {
         parse_search:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &search_)));
          set_has_search();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_uniqueid;
        break;
      }

      // optional int32 uniqueid = 14 [default = 0];
      case 14: {
        if (tag == 112) {
         parse_uniqueid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uniqueid_)));
          set_has_uniqueid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_gearorgstate;
        break;
      }

      // optional int32 gearorgstate = 15 [default = 0];
      case 15: {
        if (tag == 120) {
         parse_gearorgstate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gearorgstate_)));
          set_has_gearorgstate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_purify;
        break;
      }

      // optional int32 purify = 16 [default = 0];
      case 16: {
        if (tag == 128) {
         parse_purify:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &purify_)));
          set_has_purify();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_attsafelv;
        break;
      }

      // optional int32 attsafelv = 17 [default = 0];
      case 17: {
        if (tag == 136) {
         parse_attsafelv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attsafelv_)));
          set_has_attsafelv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_disptime;
        break;
      }

      // optional int32 disptime = 18 [default = 0];
      case 18: {
        if (tag == 144) {
         parse_disptime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &disptime_)));
          set_has_disptime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_gearprivate;
        break;
      }

      // optional int32 gearprivate = 19 [default = 0];
      case 19: {
        if (tag == 152) {
         parse_gearprivate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gearprivate_)));
          set_has_gearprivate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_level;
        break;
      }

      // optional int32 level = 20 [default = 0];
      case 20: {
        if (tag == 160) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_waitaction;
        break;
      }

      // optional string waitaction = 21;
      case 21: {
        if (tag == 170) {
         parse_waitaction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_waitaction()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->waitaction().data(), this->waitaction().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "waitaction");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_stype;
        break;
      }

      // optional .Cmd.ESummonType stype = 22 [default = ESUMMONTYPE_MIN];
      case 22: {
        if (tag == 176) {
         parse_stype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ESummonType_IsValid(value)) {
            set_stype(static_cast< ::Cmd::ESummonType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(22, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_superai;
        break;
      }

      // repeated int32 superai = 23;
      case 23: {
        if (tag == 184) {
         parse_superai:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 184, input, this->mutable_superai())));
        } else if (tag == 186) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_superai())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_superai;
        if (input->ExpectTag(192)) goto parse_pursue;
        break;
      }

      // optional int32 pursue = 24 [default = 0];
      case 24: {
        if (tag == 192) {
         parse_pursue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pursue_)));
          set_has_pursue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_pursuetime;
        break;
      }

      // optional int32 pursuetime = 25 [default = 0];
      case 25: {
        if (tag == 200) {
         parse_pursuetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pursuetime_)));
          set_has_pursuetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_weaponpetid;
        break;
      }

      // optional int32 weaponpetid = 26 [default = 0];
      case 26: {
        if (tag == 208) {
         parse_weaponpetid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weaponpetid_)));
          set_has_weaponpetid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_deadlv;
        break;
      }

      // optional int32 deadlv = 27 [default = 0];
      case 27: {
        if (tag == 216) {
         parse_deadlv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deadlv_)));
          set_has_deadlv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_deadrewardids;
        break;
      }

      // repeated int32 deadrewardids = 28;
      case 28: {
        if (tag == 224) {
         parse_deadrewardids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 224, input, this->mutable_deadrewardids())));
        } else if (tag == 226) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_deadrewardids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_deadrewardids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.NpcDefineData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.NpcDefineData)
  return false;
#undef DO_
}

void NpcDefineData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.NpcDefineData)
  // optional int32 id = 1 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional .Cmd.Pos pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pos(), output);
  }

  // optional int32 range = 4 [default = 0];
  if (has_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->range(), output);
  }

  // optional int32 dir = 5 [default = 0];
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->dir(), output);
  }

  // optional int32 reborn = 6 [default = 0];
  if (has_reborn()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->reborn(), output);
  }

  // optional int32 territory = 7 [default = 0];
  if (has_territory()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->territory(), output);
  }

  // optional float scalemin = 8 [default = 0];
  if (has_scalemin()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->scalemin(), output);
  }

  // optional float scalemax = 9 [default = 0];
  if (has_scalemax()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->scalemax(), output);
  }

  // optional int32 life = 10 [default = 0];
  if (has_life()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->life(), output);
  }

  // optional int32 behaviours = 11 [default = 0];
  if (has_behaviours()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->behaviours(), output);
  }

  // optional int32 search = 13 [default = 0];
  if (has_search()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->search(), output);
  }

  // optional int32 uniqueid = 14 [default = 0];
  if (has_uniqueid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->uniqueid(), output);
  }

  // optional int32 gearorgstate = 15 [default = 0];
  if (has_gearorgstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->gearorgstate(), output);
  }

  // optional int32 purify = 16 [default = 0];
  if (has_purify()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->purify(), output);
  }

  // optional int32 attsafelv = 17 [default = 0];
  if (has_attsafelv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->attsafelv(), output);
  }

  // optional int32 disptime = 18 [default = 0];
  if (has_disptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->disptime(), output);
  }

  // optional int32 gearprivate = 19 [default = 0];
  if (has_gearprivate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->gearprivate(), output);
  }

  // optional int32 level = 20 [default = 0];
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->level(), output);
  }

  // optional string waitaction = 21;
  if (has_waitaction()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->waitaction().data(), this->waitaction().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "waitaction");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->waitaction(), output);
  }

  // optional .Cmd.ESummonType stype = 22 [default = ESUMMONTYPE_MIN];
  if (has_stype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      22, this->stype(), output);
  }

  // repeated int32 superai = 23;
  for (int i = 0; i < this->superai_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      23, this->superai(i), output);
  }

  // optional int32 pursue = 24 [default = 0];
  if (has_pursue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->pursue(), output);
  }

  // optional int32 pursuetime = 25 [default = 0];
  if (has_pursuetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->pursuetime(), output);
  }

  // optional int32 weaponpetid = 26 [default = 0];
  if (has_weaponpetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->weaponpetid(), output);
  }

  // optional int32 deadlv = 27 [default = 0];
  if (has_deadlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->deadlv(), output);
  }

  // repeated int32 deadrewardids = 28;
  for (int i = 0; i < this->deadrewardids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      28, this->deadrewardids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.NpcDefineData)
}

::google::protobuf::uint8* NpcDefineData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.NpcDefineData)
  // optional int32 id = 1 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional .Cmd.Pos pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pos(), target);
  }

  // optional int32 range = 4 [default = 0];
  if (has_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->range(), target);
  }

  // optional int32 dir = 5 [default = 0];
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->dir(), target);
  }

  // optional int32 reborn = 6 [default = 0];
  if (has_reborn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->reborn(), target);
  }

  // optional int32 territory = 7 [default = 0];
  if (has_territory()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->territory(), target);
  }

  // optional float scalemin = 8 [default = 0];
  if (has_scalemin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->scalemin(), target);
  }

  // optional float scalemax = 9 [default = 0];
  if (has_scalemax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->scalemax(), target);
  }

  // optional int32 life = 10 [default = 0];
  if (has_life()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->life(), target);
  }

  // optional int32 behaviours = 11 [default = 0];
  if (has_behaviours()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->behaviours(), target);
  }

  // optional int32 search = 13 [default = 0];
  if (has_search()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->search(), target);
  }

  // optional int32 uniqueid = 14 [default = 0];
  if (has_uniqueid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->uniqueid(), target);
  }

  // optional int32 gearorgstate = 15 [default = 0];
  if (has_gearorgstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->gearorgstate(), target);
  }

  // optional int32 purify = 16 [default = 0];
  if (has_purify()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->purify(), target);
  }

  // optional int32 attsafelv = 17 [default = 0];
  if (has_attsafelv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->attsafelv(), target);
  }

  // optional int32 disptime = 18 [default = 0];
  if (has_disptime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->disptime(), target);
  }

  // optional int32 gearprivate = 19 [default = 0];
  if (has_gearprivate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->gearprivate(), target);
  }

  // optional int32 level = 20 [default = 0];
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->level(), target);
  }

  // optional string waitaction = 21;
  if (has_waitaction()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->waitaction().data(), this->waitaction().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "waitaction");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->waitaction(), target);
  }

  // optional .Cmd.ESummonType stype = 22 [default = ESUMMONTYPE_MIN];
  if (has_stype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      22, this->stype(), target);
  }

  // repeated int32 superai = 23;
  for (int i = 0; i < this->superai_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(23, this->superai(i), target);
  }

  // optional int32 pursue = 24 [default = 0];
  if (has_pursue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->pursue(), target);
  }

  // optional int32 pursuetime = 25 [default = 0];
  if (has_pursuetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->pursuetime(), target);
  }

  // optional int32 weaponpetid = 26 [default = 0];
  if (has_weaponpetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->weaponpetid(), target);
  }

  // optional int32 deadlv = 27 [default = 0];
  if (has_deadlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->deadlv(), target);
  }

  // repeated int32 deadrewardids = 28;
  for (int i = 0; i < this->deadrewardids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(28, this->deadrewardids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.NpcDefineData)
  return target;
}

int NpcDefineData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .Cmd.Pos pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // optional int32 range = 4 [default = 0];
    if (has_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->range());
    }

    // optional int32 dir = 5 [default = 0];
    if (has_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dir());
    }

    // optional int32 reborn = 6 [default = 0];
    if (has_reborn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reborn());
    }

    // optional int32 territory = 7 [default = 0];
    if (has_territory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->territory());
    }

    // optional float scalemin = 8 [default = 0];
    if (has_scalemin()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float scalemax = 9 [default = 0];
    if (has_scalemax()) {
      total_size += 1 + 4;
    }

    // optional int32 life = 10 [default = 0];
    if (has_life()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->life());
    }

    // optional int32 behaviours = 11 [default = 0];
    if (has_behaviours()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->behaviours());
    }

    // optional int32 search = 13 [default = 0];
    if (has_search()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->search());
    }

    // optional int32 uniqueid = 14 [default = 0];
    if (has_uniqueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uniqueid());
    }

    // optional int32 gearorgstate = 15 [default = 0];
    if (has_gearorgstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gearorgstate());
    }

    // optional int32 purify = 16 [default = 0];
    if (has_purify()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->purify());
    }

    // optional int32 attsafelv = 17 [default = 0];
    if (has_attsafelv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attsafelv());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 disptime = 18 [default = 0];
    if (has_disptime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->disptime());
    }

    // optional int32 gearprivate = 19 [default = 0];
    if (has_gearprivate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gearprivate());
    }

    // optional int32 level = 20 [default = 0];
    if (has_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional string waitaction = 21;
    if (has_waitaction()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->waitaction());
    }

    // optional .Cmd.ESummonType stype = 22 [default = ESUMMONTYPE_MIN];
    if (has_stype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->stype());
    }

    // optional int32 pursue = 24 [default = 0];
    if (has_pursue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pursue());
    }

    // optional int32 pursuetime = 25 [default = 0];
    if (has_pursuetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pursuetime());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 weaponpetid = 26 [default = 0];
    if (has_weaponpetid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weaponpetid());
    }

    // optional int32 deadlv = 27 [default = 0];
    if (has_deadlv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deadlv());
    }

  }
  // repeated int32 superai = 23;
  {
    int data_size = 0;
    for (int i = 0; i < this->superai_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->superai(i));
    }
    total_size += 2 * this->superai_size() + data_size;
  }

  // repeated int32 deadrewardids = 28;
  {
    int data_size = 0;
    for (int i = 0; i < this->deadrewardids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->deadrewardids(i));
    }
    total_size += 2 * this->deadrewardids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NpcDefineData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NpcDefineData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NpcDefineData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NpcDefineData::MergeFrom(const NpcDefineData& from) {
  GOOGLE_CHECK_NE(&from, this);
  superai_.MergeFrom(from.superai_);
  deadrewardids_.MergeFrom(from.deadrewardids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_pos()) {
      mutable_pos()->::Cmd::Pos::MergeFrom(from.pos());
    }
    if (from.has_range()) {
      set_range(from.range());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
    if (from.has_reborn()) {
      set_reborn(from.reborn());
    }
    if (from.has_territory()) {
      set_territory(from.territory());
    }
    if (from.has_scalemin()) {
      set_scalemin(from.scalemin());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_scalemax()) {
      set_scalemax(from.scalemax());
    }
    if (from.has_life()) {
      set_life(from.life());
    }
    if (from.has_behaviours()) {
      set_behaviours(from.behaviours());
    }
    if (from.has_search()) {
      set_search(from.search());
    }
    if (from.has_uniqueid()) {
      set_uniqueid(from.uniqueid());
    }
    if (from.has_gearorgstate()) {
      set_gearorgstate(from.gearorgstate());
    }
    if (from.has_purify()) {
      set_purify(from.purify());
    }
    if (from.has_attsafelv()) {
      set_attsafelv(from.attsafelv());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_disptime()) {
      set_disptime(from.disptime());
    }
    if (from.has_gearprivate()) {
      set_gearprivate(from.gearprivate());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_waitaction()) {
      set_waitaction(from.waitaction());
    }
    if (from.has_stype()) {
      set_stype(from.stype());
    }
    if (from.has_pursue()) {
      set_pursue(from.pursue());
    }
    if (from.has_pursuetime()) {
      set_pursuetime(from.pursuetime());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_weaponpetid()) {
      set_weaponpetid(from.weaponpetid());
    }
    if (from.has_deadlv()) {
      set_deadlv(from.deadlv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NpcDefineData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NpcDefineData::CopyFrom(const NpcDefineData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NpcDefineData::IsInitialized() const {

  return true;
}

void NpcDefineData::Swap(NpcDefineData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(pos_, other->pos_);
    std::swap(range_, other->range_);
    std::swap(dir_, other->dir_);
    std::swap(reborn_, other->reborn_);
    std::swap(territory_, other->territory_);
    std::swap(scalemin_, other->scalemin_);
    std::swap(scalemax_, other->scalemax_);
    std::swap(life_, other->life_);
    std::swap(behaviours_, other->behaviours_);
    std::swap(search_, other->search_);
    std::swap(uniqueid_, other->uniqueid_);
    std::swap(gearorgstate_, other->gearorgstate_);
    std::swap(purify_, other->purify_);
    std::swap(attsafelv_, other->attsafelv_);
    std::swap(disptime_, other->disptime_);
    std::swap(gearprivate_, other->gearprivate_);
    std::swap(level_, other->level_);
    std::swap(waitaction_, other->waitaction_);
    std::swap(stype_, other->stype_);
    superai_.Swap(&other->superai_);
    std::swap(pursue_, other->pursue_);
    std::swap(pursuetime_, other->pursuetime_);
    std::swap(weaponpetid_, other->weaponpetid_);
    std::swap(deadlv_, other->deadlv_);
    deadrewardids_.Swap(&other->deadrewardids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NpcDefineData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NpcDefineData_descriptor_;
  metadata.reflection = NpcDefineData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpyunApi::kBucketFieldNumber;
const int UpyunApi::kContentMd5FieldNumber;
const int UpyunApi::kContentLenthRangeFieldNumber;
const int UpyunApi::kExpirationFieldNumber;
const int UpyunApi::kFileBlocksFieldNumber;
const int UpyunApi::kFileHashFieldNumber;
const int UpyunApi::kFileSizeFieldNumber;
const int UpyunApi::kPathFieldNumber;
#endif  // !_MSC_VER

UpyunApi::UpyunApi()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UpyunApi)
}

void UpyunApi::InitAsDefaultInstance() {
}

UpyunApi::UpyunApi(const UpyunApi& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UpyunApi)
}

void UpyunApi::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  bucket_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_lenth_range_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  expiration_ = 0u;
  file_blocks_ = 0u;
  file_hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_size_ = 0u;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpyunApi::~UpyunApi() {
  // @@protoc_insertion_point(destructor:Cmd.UpyunApi)
  SharedDtor();
}

void UpyunApi::SharedDtor() {
  if (bucket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bucket_;
  }
  if (content_md5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_md5_;
  }
  if (content_lenth_range_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_lenth_range_;
  }
  if (file_hash_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete file_hash_;
  }
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void UpyunApi::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpyunApi::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpyunApi_descriptor_;
}

const UpyunApi& UpyunApi::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoCommon_2eproto();
  return *default_instance_;
}

UpyunApi* UpyunApi::default_instance_ = NULL;

UpyunApi* UpyunApi::New() const {
  return new UpyunApi;
}

void UpyunApi::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UpyunApi*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(expiration_, file_blocks_);
    if (has_bucket()) {
      if (bucket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bucket_->clear();
      }
    }
    if (has_content_md5()) {
      if (content_md5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_md5_->clear();
      }
    }
    if (has_content_lenth_range()) {
      if (content_lenth_range_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_lenth_range_->clear();
      }
    }
    if (has_file_hash()) {
      if (file_hash_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        file_hash_->clear();
      }
    }
    file_size_ = 0u;
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        path_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpyunApi::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UpyunApi)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string bucket = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bucket()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bucket().data(), this->bucket().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bucket");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_content_md5;
        break;
      }

      // optional string content_md5 = 2;
      case 2: {
        if (tag == 18) {
         parse_content_md5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content_md5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content_md5().data(), this->content_md5().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "content_md5");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_content_lenth_range;
        break;
      }

      // optional string content_lenth_range = 3;
      case 3: {
        if (tag == 26) {
         parse_content_lenth_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content_lenth_range()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content_lenth_range().data(), this->content_lenth_range().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "content_lenth_range");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_expiration;
        break;
      }

      // optional uint32 expiration = 4;
      case 4: {
        if (tag == 32) {
         parse_expiration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expiration_)));
          set_has_expiration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_file_blocks;
        break;
      }

      // optional uint32 file_blocks = 5;
      case 5: {
        if (tag == 40) {
         parse_file_blocks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &file_blocks_)));
          set_has_file_blocks();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_file_hash;
        break;
      }

      // optional string file_hash = 6;
      case 6: {
        if (tag == 50) {
         parse_file_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_hash()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_hash().data(), this->file_hash().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "file_hash");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_file_size;
        break;
      }

      // optional uint32 file_size = 7;
      case 7: {
        if (tag == 56) {
         parse_file_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &file_size_)));
          set_has_file_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_path;
        break;
      }

      // optional string path = 8;
      case 8: {
        if (tag == 66) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UpyunApi)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UpyunApi)
  return false;
#undef DO_
}

void UpyunApi::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UpyunApi)
  // optional string bucket = 1;
  if (has_bucket()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bucket().data(), this->bucket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bucket");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->bucket(), output);
  }

  // optional string content_md5 = 2;
  if (has_content_md5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content_md5().data(), this->content_md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content_md5");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->content_md5(), output);
  }

  // optional string content_lenth_range = 3;
  if (has_content_lenth_range()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content_lenth_range().data(), this->content_lenth_range().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content_lenth_range");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->content_lenth_range(), output);
  }

  // optional uint32 expiration = 4;
  if (has_expiration()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->expiration(), output);
  }

  // optional uint32 file_blocks = 5;
  if (has_file_blocks()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->file_blocks(), output);
  }

  // optional string file_hash = 6;
  if (has_file_hash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_hash().data(), this->file_hash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "file_hash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->file_hash(), output);
  }

  // optional uint32 file_size = 7;
  if (has_file_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->file_size(), output);
  }

  // optional string path = 8;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->path(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UpyunApi)
}

::google::protobuf::uint8* UpyunApi::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UpyunApi)
  // optional string bucket = 1;
  if (has_bucket()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bucket().data(), this->bucket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bucket");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->bucket(), target);
  }

  // optional string content_md5 = 2;
  if (has_content_md5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content_md5().data(), this->content_md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content_md5");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->content_md5(), target);
  }

  // optional string content_lenth_range = 3;
  if (has_content_lenth_range()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content_lenth_range().data(), this->content_lenth_range().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content_lenth_range");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->content_lenth_range(), target);
  }

  // optional uint32 expiration = 4;
  if (has_expiration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->expiration(), target);
  }

  // optional uint32 file_blocks = 5;
  if (has_file_blocks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->file_blocks(), target);
  }

  // optional string file_hash = 6;
  if (has_file_hash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_hash().data(), this->file_hash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "file_hash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->file_hash(), target);
  }

  // optional uint32 file_size = 7;
  if (has_file_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->file_size(), target);
  }

  // optional string path = 8;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->path(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UpyunApi)
  return target;
}

int UpyunApi::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string bucket = 1;
    if (has_bucket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bucket());
    }

    // optional string content_md5 = 2;
    if (has_content_md5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content_md5());
    }

    // optional string content_lenth_range = 3;
    if (has_content_lenth_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content_lenth_range());
    }

    // optional uint32 expiration = 4;
    if (has_expiration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expiration());
    }

    // optional uint32 file_blocks = 5;
    if (has_file_blocks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->file_blocks());
    }

    // optional string file_hash = 6;
    if (has_file_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_hash());
    }

    // optional uint32 file_size = 7;
    if (has_file_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->file_size());
    }

    // optional string path = 8;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpyunApi::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpyunApi* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpyunApi*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpyunApi::MergeFrom(const UpyunApi& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bucket()) {
      set_bucket(from.bucket());
    }
    if (from.has_content_md5()) {
      set_content_md5(from.content_md5());
    }
    if (from.has_content_lenth_range()) {
      set_content_lenth_range(from.content_lenth_range());
    }
    if (from.has_expiration()) {
      set_expiration(from.expiration());
    }
    if (from.has_file_blocks()) {
      set_file_blocks(from.file_blocks());
    }
    if (from.has_file_hash()) {
      set_file_hash(from.file_hash());
    }
    if (from.has_file_size()) {
      set_file_size(from.file_size());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpyunApi::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpyunApi::CopyFrom(const UpyunApi& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpyunApi::IsInitialized() const {

  return true;
}

void UpyunApi::Swap(UpyunApi* other) {
  if (other != this) {
    std::swap(bucket_, other->bucket_);
    std::swap(content_md5_, other->content_md5_);
    std::swap(content_lenth_range_, other->content_lenth_range_);
    std::swap(expiration_, other->expiration_);
    std::swap(file_blocks_, other->file_blocks_);
    std::swap(file_hash_, other->file_hash_);
    std::swap(file_size_, other->file_size_);
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpyunApi::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpyunApi_descriptor_;
  metadata.reflection = UpyunApi_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FrostItemInfo::kItemIdFieldNumber;
const int FrostItemInfo::kFrostedTimeFieldNumber;
#endif  // !_MSC_VER

FrostItemInfo::FrostItemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.FrostItemInfo)
}

void FrostItemInfo::InitAsDefaultInstance() {
}

FrostItemInfo::FrostItemInfo(const FrostItemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.FrostItemInfo)
}

void FrostItemInfo::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = 0u;
  frosted_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FrostItemInfo::~FrostItemInfo() {
  // @@protoc_insertion_point(destructor:Cmd.FrostItemInfo)
  SharedDtor();
}

void FrostItemInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FrostItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FrostItemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FrostItemInfo_descriptor_;
}

const FrostItemInfo& FrostItemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoCommon_2eproto();
  return *default_instance_;
}

FrostItemInfo* FrostItemInfo::default_instance_ = NULL;

FrostItemInfo* FrostItemInfo::New() const {
  return new FrostItemInfo;
}

void FrostItemInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FrostItemInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(frosted_time_, item_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FrostItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.FrostItemInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 item_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_frosted_time;
        break;
      }

      // optional uint64 frosted_time = 2;
      case 2: {
        if (tag == 16) {
         parse_frosted_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &frosted_time_)));
          set_has_frosted_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.FrostItemInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.FrostItemInfo)
  return false;
#undef DO_
}

void FrostItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.FrostItemInfo)
  // optional uint32 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_id(), output);
  }

  // optional uint64 frosted_time = 2;
  if (has_frosted_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->frosted_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.FrostItemInfo)
}

::google::protobuf::uint8* FrostItemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.FrostItemInfo)
  // optional uint32 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->item_id(), target);
  }

  // optional uint64 frosted_time = 2;
  if (has_frosted_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->frosted_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.FrostItemInfo)
  return target;
}

int FrostItemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_id());
    }

    // optional uint64 frosted_time = 2;
    if (has_frosted_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->frosted_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FrostItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FrostItemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FrostItemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FrostItemInfo::MergeFrom(const FrostItemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_frosted_time()) {
      set_frosted_time(from.frosted_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FrostItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrostItemInfo::CopyFrom(const FrostItemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrostItemInfo::IsInitialized() const {

  return true;
}

void FrostItemInfo::Swap(FrostItemInfo* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(frosted_time_, other->frosted_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FrostItemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FrostItemInfo_descriptor_;
  metadata.reflection = FrostItemInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SpEffectData::kGuidFieldNumber;
const int SpEffectData::kIdFieldNumber;
const int SpEffectData::kEntityFieldNumber;
const int SpEffectData::kExpiretimeFieldNumber;
#endif  // !_MSC_VER

SpEffectData::SpEffectData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SpEffectData)
}

void SpEffectData::InitAsDefaultInstance() {
}

SpEffectData::SpEffectData(const SpEffectData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SpEffectData)
}

void SpEffectData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0u;
  expiretime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpEffectData::~SpEffectData() {
  // @@protoc_insertion_point(destructor:Cmd.SpEffectData)
  SharedDtor();
}

void SpEffectData::SharedDtor() {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guid_;
  }
  if (this != default_instance_) {
  }
}

void SpEffectData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpEffectData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpEffectData_descriptor_;
}

const SpEffectData& SpEffectData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoCommon_2eproto();
  return *default_instance_;
}

SpEffectData* SpEffectData::default_instance_ = NULL;

SpEffectData* SpEffectData::New() const {
  return new SpEffectData;
}

void SpEffectData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SpEffectData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 11) {
    ZR_(id_, expiretime_);
    if (has_guid()) {
      if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  entity_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpEffectData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SpEffectData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string guid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guid().data(), this->guid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_entity;
        break;
      }

      // repeated uint64 entity = 3;
      case 3: {
        if (tag == 24) {
         parse_entity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_entity())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_entity())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_entity;
        if (input->ExpectTag(32)) goto parse_expiretime;
        break;
      }

      // optional uint32 expiretime = 4;
      case 4: {
        if (tag == 32) {
         parse_expiretime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expiretime_)));
          set_has_expiretime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SpEffectData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SpEffectData)
  return false;
#undef DO_
}

void SpEffectData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SpEffectData)
  // optional string guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->guid(), output);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // repeated uint64 entity = 3;
  for (int i = 0; i < this->entity_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->entity(i), output);
  }

  // optional uint32 expiretime = 4;
  if (has_expiretime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->expiretime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SpEffectData)
}

::google::protobuf::uint8* SpEffectData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SpEffectData)
  // optional string guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->guid(), target);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // repeated uint64 entity = 3;
  for (int i = 0; i < this->entity_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->entity(i), target);
  }

  // optional uint32 expiretime = 4;
  if (has_expiretime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->expiretime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SpEffectData)
  return target;
}

int SpEffectData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guid());
    }

    // optional uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 expiretime = 4;
    if (has_expiretime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expiretime());
    }

  }
  // repeated uint64 entity = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->entity_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->entity(i));
    }
    total_size += 1 * this->entity_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpEffectData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpEffectData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpEffectData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpEffectData::MergeFrom(const SpEffectData& from) {
  GOOGLE_CHECK_NE(&from, this);
  entity_.MergeFrom(from.entity_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_expiretime()) {
      set_expiretime(from.expiretime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpEffectData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpEffectData::CopyFrom(const SpEffectData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpEffectData::IsInitialized() const {

  return true;
}

void SpEffectData::Swap(SpEffectData* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(id_, other->id_);
    entity_.Swap(&other->entity_);
    std::swap(expiretime_, other->expiretime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpEffectData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpEffectData_descriptor_;
  metadata.reflection = SpEffectData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Param::kKeyFieldNumber;
const int Param::kValueFieldNumber;
const int Param::kItemsFieldNumber;
#endif  // !_MSC_VER

Param::Param()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.Param)
}

void Param::InitAsDefaultInstance() {
}

Param::Param(const Param& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.Param)
}

void Param::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Param::~Param() {
  // @@protoc_insertion_point(destructor:Cmd.Param)
  SharedDtor();
}

void Param::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void Param::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Param::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Param_descriptor_;
}

const Param& Param::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoCommon_2eproto();
  return *default_instance_;
}

Param* Param::default_instance_ = NULL;

Param* Param::New() const {
  return new Param;
}

void Param::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Param::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.Param)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_items;
        break;
      }

      // repeated .Cmd.Param items = 3;
      case 3: {
        if (tag == 26) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.Param)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.Param)
  return false;
#undef DO_
}

void Param::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.Param)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  // repeated .Cmd.Param items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.Param)
}

::google::protobuf::uint8* Param::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.Param)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  // repeated .Cmd.Param items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.Param)
  return target;
}

int Param::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  // repeated .Cmd.Param items = 3;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Param::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Param* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Param*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Param::MergeFrom(const Param& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Param::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Param::CopyFrom(const Param& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Param::IsInitialized() const {

  return true;
}

void Param::Swap(Param* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Param::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Param_descriptor_;
  metadata.reflection = Param_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConfigParam::kParamsFieldNumber;
#endif  // !_MSC_VER

ConfigParam::ConfigParam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ConfigParam)
}

void ConfigParam::InitAsDefaultInstance() {
}

ConfigParam::ConfigParam(const ConfigParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ConfigParam)
}

void ConfigParam::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConfigParam::~ConfigParam() {
  // @@protoc_insertion_point(destructor:Cmd.ConfigParam)
  SharedDtor();
}

void ConfigParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ConfigParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConfigParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConfigParam_descriptor_;
}

const ConfigParam& ConfigParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoCommon_2eproto();
  return *default_instance_;
}

ConfigParam* ConfigParam::default_instance_ = NULL;

ConfigParam* ConfigParam::New() const {
  return new ConfigParam;
}

void ConfigParam::Clear() {
  params_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConfigParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ConfigParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Cmd.Param params = 1;
      case 1: {
        if (tag == 10) {
         parse_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_params()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_params;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ConfigParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ConfigParam)
  return false;
#undef DO_
}

void ConfigParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ConfigParam)
  // repeated .Cmd.Param params = 1;
  for (int i = 0; i < this->params_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->params(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ConfigParam)
}

::google::protobuf::uint8* ConfigParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ConfigParam)
  // repeated .Cmd.Param params = 1;
  for (int i = 0; i < this->params_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->params(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ConfigParam)
  return target;
}

int ConfigParam::ByteSize() const {
  int total_size = 0;

  // repeated .Cmd.Param params = 1;
  total_size += 1 * this->params_size();
  for (int i = 0; i < this->params_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->params(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConfigParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConfigParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConfigParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConfigParam::MergeFrom(const ConfigParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  params_.MergeFrom(from.params_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConfigParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigParam::CopyFrom(const ConfigParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigParam::IsInitialized() const {

  return true;
}

void ConfigParam::Swap(ConfigParam* other) {
  if (other != this) {
    params_.Swap(&other->params_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConfigParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConfigParam_descriptor_;
  metadata.reflection = ConfigParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserPortraitData::kPortraitFieldNumber;
const int UserPortraitData::kBodyFieldNumber;
const int UserPortraitData::kHairFieldNumber;
const int UserPortraitData::kHaircolorFieldNumber;
const int UserPortraitData::kGenderFieldNumber;
const int UserPortraitData::kHeadFieldNumber;
const int UserPortraitData::kFaceFieldNumber;
const int UserPortraitData::kMouthFieldNumber;
const int UserPortraitData::kEyeFieldNumber;
#endif  // !_MSC_VER

UserPortraitData::UserPortraitData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UserPortraitData)
}

void UserPortraitData::InitAsDefaultInstance() {
}

UserPortraitData::UserPortraitData(const UserPortraitData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UserPortraitData)
}

void UserPortraitData::SharedCtor() {
  _cached_size_ = 0;
  portrait_ = 0u;
  body_ = 0u;
  hair_ = 0u;
  haircolor_ = 0u;
  gender_ = 0u;
  head_ = 0u;
  face_ = 0u;
  mouth_ = 0u;
  eye_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserPortraitData::~UserPortraitData() {
  // @@protoc_insertion_point(destructor:Cmd.UserPortraitData)
  SharedDtor();
}

void UserPortraitData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserPortraitData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserPortraitData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserPortraitData_descriptor_;
}

const UserPortraitData& UserPortraitData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoCommon_2eproto();
  return *default_instance_;
}

UserPortraitData* UserPortraitData::default_instance_ = NULL;

UserPortraitData* UserPortraitData::New() const {
  return new UserPortraitData;
}

void UserPortraitData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserPortraitData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(portrait_, mouth_);
  }
  eye_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserPortraitData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UserPortraitData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 portrait = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &portrait_)));
          set_has_portrait();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_body;
        break;
      }

      // optional uint32 body = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_body:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &body_)));
          set_has_body();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_hair;
        break;
      }

      // optional uint32 hair = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_hair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hair_)));
          set_has_hair();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_haircolor;
        break;
      }

      // optional uint32 haircolor = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_haircolor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &haircolor_)));
          set_has_haircolor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_gender;
        break;
      }

      // optional uint32 gender = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_gender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gender_)));
          set_has_gender();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_head;
        break;
      }

      // optional uint32 head = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_head:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &head_)));
          set_has_head();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_face;
        break;
      }

      // optional uint32 face = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_face:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &face_)));
          set_has_face();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_mouth;
        break;
      }

      // optional uint32 mouth = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_mouth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mouth_)));
          set_has_mouth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_eye;
        break;
      }

      // optional uint32 eye = 9 [default = 0];
      case 9: {
        if (tag == 72) {
         parse_eye:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eye_)));
          set_has_eye();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UserPortraitData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UserPortraitData)
  return false;
#undef DO_
}

void UserPortraitData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UserPortraitData)
  // optional uint32 portrait = 1 [default = 0];
  if (has_portrait()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->portrait(), output);
  }

  // optional uint32 body = 2 [default = 0];
  if (has_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->body(), output);
  }

  // optional uint32 hair = 3 [default = 0];
  if (has_hair()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hair(), output);
  }

  // optional uint32 haircolor = 4 [default = 0];
  if (has_haircolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->haircolor(), output);
  }

  // optional uint32 gender = 5 [default = 0];
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->gender(), output);
  }

  // optional uint32 head = 6 [default = 0];
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->head(), output);
  }

  // optional uint32 face = 7 [default = 0];
  if (has_face()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->face(), output);
  }

  // optional uint32 mouth = 8 [default = 0];
  if (has_mouth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->mouth(), output);
  }

  // optional uint32 eye = 9 [default = 0];
  if (has_eye()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->eye(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UserPortraitData)
}

::google::protobuf::uint8* UserPortraitData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UserPortraitData)
  // optional uint32 portrait = 1 [default = 0];
  if (has_portrait()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->portrait(), target);
  }

  // optional uint32 body = 2 [default = 0];
  if (has_body()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->body(), target);
  }

  // optional uint32 hair = 3 [default = 0];
  if (has_hair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hair(), target);
  }

  // optional uint32 haircolor = 4 [default = 0];
  if (has_haircolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->haircolor(), target);
  }

  // optional uint32 gender = 5 [default = 0];
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->gender(), target);
  }

  // optional uint32 head = 6 [default = 0];
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->head(), target);
  }

  // optional uint32 face = 7 [default = 0];
  if (has_face()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->face(), target);
  }

  // optional uint32 mouth = 8 [default = 0];
  if (has_mouth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->mouth(), target);
  }

  // optional uint32 eye = 9 [default = 0];
  if (has_eye()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->eye(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UserPortraitData)
  return target;
}

int UserPortraitData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 portrait = 1 [default = 0];
    if (has_portrait()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->portrait());
    }

    // optional uint32 body = 2 [default = 0];
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->body());
    }

    // optional uint32 hair = 3 [default = 0];
    if (has_hair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hair());
    }

    // optional uint32 haircolor = 4 [default = 0];
    if (has_haircolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->haircolor());
    }

    // optional uint32 gender = 5 [default = 0];
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gender());
    }

    // optional uint32 head = 6 [default = 0];
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->head());
    }

    // optional uint32 face = 7 [default = 0];
    if (has_face()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->face());
    }

    // optional uint32 mouth = 8 [default = 0];
    if (has_mouth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mouth());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 eye = 9 [default = 0];
    if (has_eye()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eye());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserPortraitData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserPortraitData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserPortraitData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserPortraitData::MergeFrom(const UserPortraitData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_portrait()) {
      set_portrait(from.portrait());
    }
    if (from.has_body()) {
      set_body(from.body());
    }
    if (from.has_hair()) {
      set_hair(from.hair());
    }
    if (from.has_haircolor()) {
      set_haircolor(from.haircolor());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_head()) {
      set_head(from.head());
    }
    if (from.has_face()) {
      set_face(from.face());
    }
    if (from.has_mouth()) {
      set_mouth(from.mouth());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_eye()) {
      set_eye(from.eye());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserPortraitData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserPortraitData::CopyFrom(const UserPortraitData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserPortraitData::IsInitialized() const {

  return true;
}

void UserPortraitData::Swap(UserPortraitData* other) {
  if (other != this) {
    std::swap(portrait_, other->portrait_);
    std::swap(body_, other->body_);
    std::swap(hair_, other->hair_);
    std::swap(haircolor_, other->haircolor_);
    std::swap(gender_, other->gender_);
    std::swap(head_, other->head_);
    std::swap(face_, other->face_);
    std::swap(mouth_, other->mouth_);
    std::swap(eye_, other->eye_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserPortraitData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserPortraitData_descriptor_;
  metadata.reflection = UserPortraitData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

// @@protoc_insertion_point(global_scope)
