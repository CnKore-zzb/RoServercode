// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SceneChatRoom.proto

#ifndef PROTOBUF_SceneChatRoom_2eproto__INCLUDED
#define PROTOBUF_SceneChatRoom_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "xCmd.pb.h"
#include "ProtoCommon.pb.h"
// @@protoc_insertion_point(includes)

namespace Cmd {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_SceneChatRoom_2eproto();
void protobuf_AssignDesc_SceneChatRoom_2eproto();
void protobuf_ShutdownFile_SceneChatRoom_2eproto();

class ChatRoomMember;
class ChatRoomData;
class CreateChatRoom;
class JoinChatRoom;
class ExitChatRoom;
class KickChatMember;
class ExchangeRoomOwner;
class RoomMemberUpdate;
class EnterChatRoom;
class ChatRoomSummary;
class ChatRoomDataSync;
class ChatRoomTip;

enum EChatRoomParam {
  ECHATROOMPARAM_CREATE = 1,
  ECHATROOMPARAM_JOIN = 2,
  ECHATROOMPARAM_EXIT = 3,
  ECHATROOMPARAM_KICKMEMBER = 4,
  ECHATROOMPARAM_CHANGEOWNER = 5,
  ECHATROOMPARAM_ENTERROOM = 6,
  ECHATROOMPARAM_MEMBERUPDATE = 7,
  ECHATROOMPARAM_ROOMDATASYNC = 8,
  ECHATROOMPARAM_ROOMTIP = 9
};
bool EChatRoomParam_IsValid(int value);
const EChatRoomParam EChatRoomParam_MIN = ECHATROOMPARAM_CREATE;
const EChatRoomParam EChatRoomParam_MAX = ECHATROOMPARAM_ROOMTIP;
const int EChatRoomParam_ARRAYSIZE = EChatRoomParam_MAX + 1;

const ::google::protobuf::EnumDescriptor* EChatRoomParam_descriptor();
inline const ::std::string& EChatRoomParam_Name(EChatRoomParam value) {
  return ::google::protobuf::internal::NameOfEnum(
    EChatRoomParam_descriptor(), value);
}
inline bool EChatRoomParam_Parse(
    const ::std::string& name, EChatRoomParam* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EChatRoomParam>(
    EChatRoomParam_descriptor(), name, value);
}
enum EChatRoomJob {
  ECHATROOM_OWNER = 1,
  ECHATROOM_MEMBER = 2
};
bool EChatRoomJob_IsValid(int value);
const EChatRoomJob EChatRoomJob_MIN = ECHATROOM_OWNER;
const EChatRoomJob EChatRoomJob_MAX = ECHATROOM_MEMBER;
const int EChatRoomJob_ARRAYSIZE = EChatRoomJob_MAX + 1;

const ::google::protobuf::EnumDescriptor* EChatRoomJob_descriptor();
inline const ::std::string& EChatRoomJob_Name(EChatRoomJob value) {
  return ::google::protobuf::internal::NameOfEnum(
    EChatRoomJob_descriptor(), value);
}
inline bool EChatRoomJob_Parse(
    const ::std::string& name, EChatRoomJob* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EChatRoomJob>(
    EChatRoomJob_descriptor(), name, value);
}
enum EChatRoomType {
  ECHATROOMTYPE_PUBLIC = 1,
  ECHATROOMTYPE_PRIVATE = 2
};
bool EChatRoomType_IsValid(int value);
const EChatRoomType EChatRoomType_MIN = ECHATROOMTYPE_PUBLIC;
const EChatRoomType EChatRoomType_MAX = ECHATROOMTYPE_PRIVATE;
const int EChatRoomType_ARRAYSIZE = EChatRoomType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EChatRoomType_descriptor();
inline const ::std::string& EChatRoomType_Name(EChatRoomType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EChatRoomType_descriptor(), value);
}
inline bool EChatRoomType_Parse(
    const ::std::string& name, EChatRoomType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EChatRoomType>(
    EChatRoomType_descriptor(), name, value);
}
enum EChatRoomSync {
  ECHATROOMSYNC_UPDATE = 1,
  ECHATROOMSYNC_REMOVE = 2
};
bool EChatRoomSync_IsValid(int value);
const EChatRoomSync EChatRoomSync_MIN = ECHATROOMSYNC_UPDATE;
const EChatRoomSync EChatRoomSync_MAX = ECHATROOMSYNC_REMOVE;
const int EChatRoomSync_ARRAYSIZE = EChatRoomSync_MAX + 1;

const ::google::protobuf::EnumDescriptor* EChatRoomSync_descriptor();
inline const ::std::string& EChatRoomSync_Name(EChatRoomSync value) {
  return ::google::protobuf::internal::NameOfEnum(
    EChatRoomSync_descriptor(), value);
}
inline bool EChatRoomSync_Parse(
    const ::std::string& name, EChatRoomSync* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EChatRoomSync>(
    EChatRoomSync_descriptor(), name, value);
}
enum EChatRoomTip {
  ECHATROOMTIP_JOIN = 1,
  ECHATROOMTIP_EXIT = 2,
  ECHATROOMTIP_KICK = 3,
  ECHATROOMTIP_OWNERCHANGE = 4
};
bool EChatRoomTip_IsValid(int value);
const EChatRoomTip EChatRoomTip_MIN = ECHATROOMTIP_JOIN;
const EChatRoomTip EChatRoomTip_MAX = ECHATROOMTIP_OWNERCHANGE;
const int EChatRoomTip_ARRAYSIZE = EChatRoomTip_MAX + 1;

const ::google::protobuf::EnumDescriptor* EChatRoomTip_descriptor();
inline const ::std::string& EChatRoomTip_Name(EChatRoomTip value) {
  return ::google::protobuf::internal::NameOfEnum(
    EChatRoomTip_descriptor(), value);
}
inline bool EChatRoomTip_Parse(
    const ::std::string& name, EChatRoomTip* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EChatRoomTip>(
    EChatRoomTip_descriptor(), name, value);
}
// ===================================================================

class ChatRoomMember : public ::google::protobuf::Message {
 public:
  ChatRoomMember();
  virtual ~ChatRoomMember();

  ChatRoomMember(const ChatRoomMember& from);

  inline ChatRoomMember& operator=(const ChatRoomMember& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatRoomMember& default_instance();

  void Swap(ChatRoomMember* other);

  // implements Message ----------------------------------------------

  ChatRoomMember* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChatRoomMember& from);
  void MergeFrom(const ChatRoomMember& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 id = 1 [default = 0];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional uint32 level = 2 [default = 0];
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 body = 3 [default = 0];
  inline bool has_body() const;
  inline void clear_body();
  static const int kBodyFieldNumber = 3;
  inline ::google::protobuf::uint32 body() const;
  inline void set_body(::google::protobuf::uint32 value);

  // optional uint32 hair = 4 [default = 0];
  inline bool has_hair() const;
  inline void clear_hair();
  static const int kHairFieldNumber = 4;
  inline ::google::protobuf::uint32 hair() const;
  inline void set_hair(::google::protobuf::uint32 value);

  // optional uint32 haircolor = 5 [default = 0];
  inline bool has_haircolor() const;
  inline void clear_haircolor();
  static const int kHaircolorFieldNumber = 5;
  inline ::google::protobuf::uint32 haircolor() const;
  inline void set_haircolor(::google::protobuf::uint32 value);

  // optional uint32 portrait = 12 [default = 0];
  inline bool has_portrait() const;
  inline void clear_portrait();
  static const int kPortraitFieldNumber = 12;
  inline ::google::protobuf::uint32 portrait() const;
  inline void set_portrait(::google::protobuf::uint32 value);

  // optional uint32 eye = 13 [default = 0];
  inline bool has_eye() const;
  inline void clear_eye();
  static const int kEyeFieldNumber = 13;
  inline ::google::protobuf::uint32 eye() const;
  inline void set_eye(::google::protobuf::uint32 value);

  // optional .Cmd.EGender gender = 6 [default = EGENDER_MIN];
  inline bool has_gender() const;
  inline void clear_gender();
  static const int kGenderFieldNumber = 6;
  inline ::Cmd::EGender gender() const;
  inline void set_gender(::Cmd::EGender value);

  // optional .Cmd.EProfession rolejob = 7 [default = EPROFESSION_MIN];
  inline bool has_rolejob() const;
  inline void clear_rolejob();
  static const int kRolejobFieldNumber = 7;
  inline ::Cmd::EProfession rolejob() const;
  inline void set_rolejob(::Cmd::EProfession value);

  // optional .Cmd.EChatRoomJob job = 8 [default = ECHATROOM_MEMBER];
  inline bool has_job() const;
  inline void clear_job();
  static const int kJobFieldNumber = 8;
  inline ::Cmd::EChatRoomJob job() const;
  inline void set_job(::Cmd::EChatRoomJob value);

  // optional bool blink = 9 [default = false];
  inline bool has_blink() const;
  inline void clear_blink();
  static const int kBlinkFieldNumber = 9;
  inline bool blink() const;
  inline void set_blink(bool value);

  // optional string name = 10;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 10;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string guildname = 11;
  inline bool has_guildname() const;
  inline void clear_guildname();
  static const int kGuildnameFieldNumber = 11;
  inline const ::std::string& guildname() const;
  inline void set_guildname(const ::std::string& value);
  inline void set_guildname(const char* value);
  inline void set_guildname(const char* value, size_t size);
  inline ::std::string* mutable_guildname();
  inline ::std::string* release_guildname();
  inline void set_allocated_guildname(::std::string* guildname);

  // @@protoc_insertion_point(class_scope:Cmd.ChatRoomMember)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_body();
  inline void clear_has_body();
  inline void set_has_hair();
  inline void clear_has_hair();
  inline void set_has_haircolor();
  inline void clear_has_haircolor();
  inline void set_has_portrait();
  inline void clear_has_portrait();
  inline void set_has_eye();
  inline void clear_has_eye();
  inline void set_has_gender();
  inline void clear_has_gender();
  inline void set_has_rolejob();
  inline void clear_has_rolejob();
  inline void set_has_job();
  inline void clear_has_job();
  inline void set_has_blink();
  inline void clear_has_blink();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_guildname();
  inline void clear_has_guildname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 body_;
  ::google::protobuf::uint32 hair_;
  ::google::protobuf::uint32 haircolor_;
  ::google::protobuf::uint32 portrait_;
  ::google::protobuf::uint32 eye_;
  int gender_;
  int rolejob_;
  int job_;
  bool blink_;
  ::std::string* name_;
  ::std::string* guildname_;
  friend void  protobuf_AddDesc_SceneChatRoom_2eproto();
  friend void protobuf_AssignDesc_SceneChatRoom_2eproto();
  friend void protobuf_ShutdownFile_SceneChatRoom_2eproto();

  void InitAsDefaultInstance();
  static ChatRoomMember* default_instance_;
};
// -------------------------------------------------------------------

class ChatRoomData : public ::google::protobuf::Message {
 public:
  ChatRoomData();
  virtual ~ChatRoomData();

  ChatRoomData(const ChatRoomData& from);

  inline ChatRoomData& operator=(const ChatRoomData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatRoomData& default_instance();

  void Swap(ChatRoomData* other);

  // implements Message ----------------------------------------------

  ChatRoomData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChatRoomData& from);
  void MergeFrom(const ChatRoomData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 roomid = 1 [default = 0];
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 1;
  inline ::google::protobuf::uint32 roomid() const;
  inline void set_roomid(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string pswd = 3;
  inline bool has_pswd() const;
  inline void clear_pswd();
  static const int kPswdFieldNumber = 3;
  inline const ::std::string& pswd() const;
  inline void set_pswd(const ::std::string& value);
  inline void set_pswd(const char* value);
  inline void set_pswd(const char* value, size_t size);
  inline ::std::string* mutable_pswd();
  inline ::std::string* release_pswd();
  inline void set_allocated_pswd(::std::string* pswd);

  // optional uint64 ownerid = 4 [default = 0];
  inline bool has_ownerid() const;
  inline void clear_ownerid();
  static const int kOwneridFieldNumber = 4;
  inline ::google::protobuf::uint64 ownerid() const;
  inline void set_ownerid(::google::protobuf::uint64 value);

  // optional uint32 maxnum = 5 [default = 2];
  inline bool has_maxnum() const;
  inline void clear_maxnum();
  static const int kMaxnumFieldNumber = 5;
  inline ::google::protobuf::uint32 maxnum() const;
  inline void set_maxnum(::google::protobuf::uint32 value);

  // optional .Cmd.EChatRoomType roomtype = 6 [default = ECHATROOMTYPE_PUBLIC];
  inline bool has_roomtype() const;
  inline void clear_roomtype();
  static const int kRoomtypeFieldNumber = 6;
  inline ::Cmd::EChatRoomType roomtype() const;
  inline void set_roomtype(::Cmd::EChatRoomType value);

  // repeated .Cmd.ChatRoomMember members = 7;
  inline int members_size() const;
  inline void clear_members();
  static const int kMembersFieldNumber = 7;
  inline const ::Cmd::ChatRoomMember& members(int index) const;
  inline ::Cmd::ChatRoomMember* mutable_members(int index);
  inline ::Cmd::ChatRoomMember* add_members();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ChatRoomMember >&
      members() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::ChatRoomMember >*
      mutable_members();

  // @@protoc_insertion_point(class_scope:Cmd.ChatRoomData)
 private:
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_pswd();
  inline void clear_has_pswd();
  inline void set_has_ownerid();
  inline void clear_has_ownerid();
  inline void set_has_maxnum();
  inline void clear_has_maxnum();
  inline void set_has_roomtype();
  inline void clear_has_roomtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* pswd_;
  ::google::protobuf::uint32 roomid_;
  ::google::protobuf::uint32 maxnum_;
  ::google::protobuf::uint64 ownerid_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::ChatRoomMember > members_;
  int roomtype_;
  friend void  protobuf_AddDesc_SceneChatRoom_2eproto();
  friend void protobuf_AssignDesc_SceneChatRoom_2eproto();
  friend void protobuf_ShutdownFile_SceneChatRoom_2eproto();

  void InitAsDefaultInstance();
  static ChatRoomData* default_instance_;
};
// -------------------------------------------------------------------

class CreateChatRoom : public ::google::protobuf::Message {
 public:
  CreateChatRoom();
  virtual ~CreateChatRoom();

  CreateChatRoom(const CreateChatRoom& from);

  inline CreateChatRoom& operator=(const CreateChatRoom& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateChatRoom& default_instance();

  void Swap(CreateChatRoom* other);

  // implements Message ----------------------------------------------

  CreateChatRoom* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateChatRoom& from);
  void MergeFrom(const CreateChatRoom& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CHATROOM_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.EChatRoomParam param = 2 [default = ECHATROOMPARAM_CREATE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::EChatRoomParam param() const;
  inline void set_param(::Cmd::EChatRoomParam value);

  // optional string roomname = 3;
  inline bool has_roomname() const;
  inline void clear_roomname();
  static const int kRoomnameFieldNumber = 3;
  inline const ::std::string& roomname() const;
  inline void set_roomname(const ::std::string& value);
  inline void set_roomname(const char* value);
  inline void set_roomname(const char* value, size_t size);
  inline ::std::string* mutable_roomname();
  inline ::std::string* release_roomname();
  inline void set_allocated_roomname(::std::string* roomname);

  // optional uint32 maxnum = 4 [default = 2];
  inline bool has_maxnum() const;
  inline void clear_maxnum();
  static const int kMaxnumFieldNumber = 4;
  inline ::google::protobuf::uint32 maxnum() const;
  inline void set_maxnum(::google::protobuf::uint32 value);

  // optional string pswd = 5;
  inline bool has_pswd() const;
  inline void clear_pswd();
  static const int kPswdFieldNumber = 5;
  inline const ::std::string& pswd() const;
  inline void set_pswd(const ::std::string& value);
  inline void set_pswd(const char* value);
  inline void set_pswd(const char* value, size_t size);
  inline ::std::string* mutable_pswd();
  inline ::std::string* release_pswd();
  inline void set_allocated_pswd(::std::string* pswd);

  // @@protoc_insertion_point(class_scope:Cmd.CreateChatRoom)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_roomname();
  inline void clear_has_roomname();
  inline void set_has_maxnum();
  inline void clear_has_maxnum();
  inline void set_has_pswd();
  inline void clear_has_pswd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::std::string* roomname_;
  ::std::string* pswd_;
  ::google::protobuf::uint32 maxnum_;
  friend void  protobuf_AddDesc_SceneChatRoom_2eproto();
  friend void protobuf_AssignDesc_SceneChatRoom_2eproto();
  friend void protobuf_ShutdownFile_SceneChatRoom_2eproto();

  void InitAsDefaultInstance();
  static CreateChatRoom* default_instance_;
};
// -------------------------------------------------------------------

class JoinChatRoom : public ::google::protobuf::Message {
 public:
  JoinChatRoom();
  virtual ~JoinChatRoom();

  JoinChatRoom(const JoinChatRoom& from);

  inline JoinChatRoom& operator=(const JoinChatRoom& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JoinChatRoom& default_instance();

  void Swap(JoinChatRoom* other);

  // implements Message ----------------------------------------------

  JoinChatRoom* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JoinChatRoom& from);
  void MergeFrom(const JoinChatRoom& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CHATROOM_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.EChatRoomParam param = 2 [default = ECHATROOMPARAM_JOIN];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::EChatRoomParam param() const;
  inline void set_param(::Cmd::EChatRoomParam value);

  // optional uint64 roomid = 3 [default = 0];
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 3;
  inline ::google::protobuf::uint64 roomid() const;
  inline void set_roomid(::google::protobuf::uint64 value);

  // optional string pswd = 4;
  inline bool has_pswd() const;
  inline void clear_pswd();
  static const int kPswdFieldNumber = 4;
  inline const ::std::string& pswd() const;
  inline void set_pswd(const ::std::string& value);
  inline void set_pswd(const char* value);
  inline void set_pswd(const char* value, size_t size);
  inline ::std::string* mutable_pswd();
  inline ::std::string* release_pswd();
  inline void set_allocated_pswd(::std::string* pswd);

  // @@protoc_insertion_point(class_scope:Cmd.JoinChatRoom)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_pswd();
  inline void clear_has_pswd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 roomid_;
  ::std::string* pswd_;
  friend void  protobuf_AddDesc_SceneChatRoom_2eproto();
  friend void protobuf_AssignDesc_SceneChatRoom_2eproto();
  friend void protobuf_ShutdownFile_SceneChatRoom_2eproto();

  void InitAsDefaultInstance();
  static JoinChatRoom* default_instance_;
};
// -------------------------------------------------------------------

class ExitChatRoom : public ::google::protobuf::Message {
 public:
  ExitChatRoom();
  virtual ~ExitChatRoom();

  ExitChatRoom(const ExitChatRoom& from);

  inline ExitChatRoom& operator=(const ExitChatRoom& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExitChatRoom& default_instance();

  void Swap(ExitChatRoom* other);

  // implements Message ----------------------------------------------

  ExitChatRoom* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExitChatRoom& from);
  void MergeFrom(const ExitChatRoom& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CHATROOM_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.EChatRoomParam param = 2 [default = ECHATROOMPARAM_EXIT];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::EChatRoomParam param() const;
  inline void set_param(::Cmd::EChatRoomParam value);

  // optional uint64 roomid = 3 [default = 0];
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 3;
  inline ::google::protobuf::uint64 roomid() const;
  inline void set_roomid(::google::protobuf::uint64 value);

  // optional uint64 userid = 4 [default = 0];
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 4;
  inline ::google::protobuf::uint64 userid() const;
  inline void set_userid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.ExitChatRoom)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_userid();
  inline void clear_has_userid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 roomid_;
  ::google::protobuf::uint64 userid_;
  friend void  protobuf_AddDesc_SceneChatRoom_2eproto();
  friend void protobuf_AssignDesc_SceneChatRoom_2eproto();
  friend void protobuf_ShutdownFile_SceneChatRoom_2eproto();

  void InitAsDefaultInstance();
  static ExitChatRoom* default_instance_;
};
// -------------------------------------------------------------------

class KickChatMember : public ::google::protobuf::Message {
 public:
  KickChatMember();
  virtual ~KickChatMember();

  KickChatMember(const KickChatMember& from);

  inline KickChatMember& operator=(const KickChatMember& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KickChatMember& default_instance();

  void Swap(KickChatMember* other);

  // implements Message ----------------------------------------------

  KickChatMember* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KickChatMember& from);
  void MergeFrom(const KickChatMember& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CHATROOM_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.EChatRoomParam param = 2 [default = ECHATROOMPARAM_KICKMEMBER];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::EChatRoomParam param() const;
  inline void set_param(::Cmd::EChatRoomParam value);

  // optional uint64 roomid = 3 [default = 0];
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 3;
  inline ::google::protobuf::uint64 roomid() const;
  inline void set_roomid(::google::protobuf::uint64 value);

  // optional uint64 memberid = 4 [default = 0];
  inline bool has_memberid() const;
  inline void clear_memberid();
  static const int kMemberidFieldNumber = 4;
  inline ::google::protobuf::uint64 memberid() const;
  inline void set_memberid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.KickChatMember)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_memberid();
  inline void clear_has_memberid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 roomid_;
  ::google::protobuf::uint64 memberid_;
  friend void  protobuf_AddDesc_SceneChatRoom_2eproto();
  friend void protobuf_AssignDesc_SceneChatRoom_2eproto();
  friend void protobuf_ShutdownFile_SceneChatRoom_2eproto();

  void InitAsDefaultInstance();
  static KickChatMember* default_instance_;
};
// -------------------------------------------------------------------

class ExchangeRoomOwner : public ::google::protobuf::Message {
 public:
  ExchangeRoomOwner();
  virtual ~ExchangeRoomOwner();

  ExchangeRoomOwner(const ExchangeRoomOwner& from);

  inline ExchangeRoomOwner& operator=(const ExchangeRoomOwner& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExchangeRoomOwner& default_instance();

  void Swap(ExchangeRoomOwner* other);

  // implements Message ----------------------------------------------

  ExchangeRoomOwner* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExchangeRoomOwner& from);
  void MergeFrom(const ExchangeRoomOwner& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CHATROOM_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.EChatRoomParam param = 2 [default = ECHATROOMPARAM_CHANGEOWNER];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::EChatRoomParam param() const;
  inline void set_param(::Cmd::EChatRoomParam value);

  // optional uint64 userid = 3 [default = 0];
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 3;
  inline ::google::protobuf::uint64 userid() const;
  inline void set_userid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.ExchangeRoomOwner)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_userid();
  inline void clear_has_userid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 userid_;
  friend void  protobuf_AddDesc_SceneChatRoom_2eproto();
  friend void protobuf_AssignDesc_SceneChatRoom_2eproto();
  friend void protobuf_ShutdownFile_SceneChatRoom_2eproto();

  void InitAsDefaultInstance();
  static ExchangeRoomOwner* default_instance_;
};
// -------------------------------------------------------------------

class RoomMemberUpdate : public ::google::protobuf::Message {
 public:
  RoomMemberUpdate();
  virtual ~RoomMemberUpdate();

  RoomMemberUpdate(const RoomMemberUpdate& from);

  inline RoomMemberUpdate& operator=(const RoomMemberUpdate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoomMemberUpdate& default_instance();

  void Swap(RoomMemberUpdate* other);

  // implements Message ----------------------------------------------

  RoomMemberUpdate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoomMemberUpdate& from);
  void MergeFrom(const RoomMemberUpdate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CHATROOM_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.EChatRoomParam param = 2 [default = ECHATROOMPARAM_MEMBERUPDATE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::EChatRoomParam param() const;
  inline void set_param(::Cmd::EChatRoomParam value);

  // repeated .Cmd.ChatRoomMember updates = 3;
  inline int updates_size() const;
  inline void clear_updates();
  static const int kUpdatesFieldNumber = 3;
  inline const ::Cmd::ChatRoomMember& updates(int index) const;
  inline ::Cmd::ChatRoomMember* mutable_updates(int index);
  inline ::Cmd::ChatRoomMember* add_updates();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ChatRoomMember >&
      updates() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::ChatRoomMember >*
      mutable_updates();

  // repeated uint64 deletes = 4;
  inline int deletes_size() const;
  inline void clear_deletes();
  static const int kDeletesFieldNumber = 4;
  inline ::google::protobuf::uint64 deletes(int index) const;
  inline void set_deletes(int index, ::google::protobuf::uint64 value);
  inline void add_deletes(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      deletes() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_deletes();

  // @@protoc_insertion_point(class_scope:Cmd.RoomMemberUpdate)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::ChatRoomMember > updates_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > deletes_;
  friend void  protobuf_AddDesc_SceneChatRoom_2eproto();
  friend void protobuf_AssignDesc_SceneChatRoom_2eproto();
  friend void protobuf_ShutdownFile_SceneChatRoom_2eproto();

  void InitAsDefaultInstance();
  static RoomMemberUpdate* default_instance_;
};
// -------------------------------------------------------------------

class EnterChatRoom : public ::google::protobuf::Message {
 public:
  EnterChatRoom();
  virtual ~EnterChatRoom();

  EnterChatRoom(const EnterChatRoom& from);

  inline EnterChatRoom& operator=(const EnterChatRoom& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EnterChatRoom& default_instance();

  void Swap(EnterChatRoom* other);

  // implements Message ----------------------------------------------

  EnterChatRoom* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EnterChatRoom& from);
  void MergeFrom(const EnterChatRoom& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CHATROOM_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.EChatRoomParam param = 2 [default = ECHATROOMPARAM_ENTERROOM];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::EChatRoomParam param() const;
  inline void set_param(::Cmd::EChatRoomParam value);

  // optional .Cmd.ChatRoomData data = 3;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline const ::Cmd::ChatRoomData& data() const;
  inline ::Cmd::ChatRoomData* mutable_data();
  inline ::Cmd::ChatRoomData* release_data();
  inline void set_allocated_data(::Cmd::ChatRoomData* data);

  // @@protoc_insertion_point(class_scope:Cmd.EnterChatRoom)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::Cmd::ChatRoomData* data_;
  friend void  protobuf_AddDesc_SceneChatRoom_2eproto();
  friend void protobuf_AssignDesc_SceneChatRoom_2eproto();
  friend void protobuf_ShutdownFile_SceneChatRoom_2eproto();

  void InitAsDefaultInstance();
  static EnterChatRoom* default_instance_;
};
// -------------------------------------------------------------------

class ChatRoomSummary : public ::google::protobuf::Message {
 public:
  ChatRoomSummary();
  virtual ~ChatRoomSummary();

  ChatRoomSummary(const ChatRoomSummary& from);

  inline ChatRoomSummary& operator=(const ChatRoomSummary& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatRoomSummary& default_instance();

  void Swap(ChatRoomSummary* other);

  // implements Message ----------------------------------------------

  ChatRoomSummary* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChatRoomSummary& from);
  void MergeFrom(const ChatRoomSummary& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 ownerid = 1 [default = 0];
  inline bool has_ownerid() const;
  inline void clear_ownerid();
  static const int kOwneridFieldNumber = 1;
  inline ::google::protobuf::uint64 ownerid() const;
  inline void set_ownerid(::google::protobuf::uint64 value);

  // optional uint32 roomid = 2 [default = 0];
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 2;
  inline ::google::protobuf::uint32 roomid() const;
  inline void set_roomid(::google::protobuf::uint32 value);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional .Cmd.EChatRoomType roomtype = 4 [default = ECHATROOMTYPE_PUBLIC];
  inline bool has_roomtype() const;
  inline void clear_roomtype();
  static const int kRoomtypeFieldNumber = 4;
  inline ::Cmd::EChatRoomType roomtype() const;
  inline void set_roomtype(::Cmd::EChatRoomType value);

  // optional uint32 maxnum = 5 [default = 0];
  inline bool has_maxnum() const;
  inline void clear_maxnum();
  static const int kMaxnumFieldNumber = 5;
  inline ::google::protobuf::uint32 maxnum() const;
  inline void set_maxnum(::google::protobuf::uint32 value);

  // optional uint32 curnum = 6 [default = 0];
  inline bool has_curnum() const;
  inline void clear_curnum();
  static const int kCurnumFieldNumber = 6;
  inline ::google::protobuf::uint32 curnum() const;
  inline void set_curnum(::google::protobuf::uint32 value);

  // optional string pswd = 7;
  inline bool has_pswd() const;
  inline void clear_pswd();
  static const int kPswdFieldNumber = 7;
  inline const ::std::string& pswd() const;
  inline void set_pswd(const ::std::string& value);
  inline void set_pswd(const char* value);
  inline void set_pswd(const char* value, size_t size);
  inline ::std::string* mutable_pswd();
  inline ::std::string* release_pswd();
  inline void set_allocated_pswd(::std::string* pswd);

  // @@protoc_insertion_point(class_scope:Cmd.ChatRoomSummary)
 private:
  inline void set_has_ownerid();
  inline void clear_has_ownerid();
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_roomtype();
  inline void clear_has_roomtype();
  inline void set_has_maxnum();
  inline void clear_has_maxnum();
  inline void set_has_curnum();
  inline void clear_has_curnum();
  inline void set_has_pswd();
  inline void clear_has_pswd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 ownerid_;
  ::std::string* name_;
  ::google::protobuf::uint32 roomid_;
  int roomtype_;
  ::google::protobuf::uint32 maxnum_;
  ::google::protobuf::uint32 curnum_;
  ::std::string* pswd_;
  friend void  protobuf_AddDesc_SceneChatRoom_2eproto();
  friend void protobuf_AssignDesc_SceneChatRoom_2eproto();
  friend void protobuf_ShutdownFile_SceneChatRoom_2eproto();

  void InitAsDefaultInstance();
  static ChatRoomSummary* default_instance_;
};
// -------------------------------------------------------------------

class ChatRoomDataSync : public ::google::protobuf::Message {
 public:
  ChatRoomDataSync();
  virtual ~ChatRoomDataSync();

  ChatRoomDataSync(const ChatRoomDataSync& from);

  inline ChatRoomDataSync& operator=(const ChatRoomDataSync& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatRoomDataSync& default_instance();

  void Swap(ChatRoomDataSync* other);

  // implements Message ----------------------------------------------

  ChatRoomDataSync* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChatRoomDataSync& from);
  void MergeFrom(const ChatRoomDataSync& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CHATROOM_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.EChatRoomParam param = 2 [default = ECHATROOMPARAM_ROOMDATASYNC];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::EChatRoomParam param() const;
  inline void set_param(::Cmd::EChatRoomParam value);

  // optional .Cmd.EChatRoomSync esync = 3 [default = ECHATROOMSYNC_UPDATE];
  inline bool has_esync() const;
  inline void clear_esync();
  static const int kEsyncFieldNumber = 3;
  inline ::Cmd::EChatRoomSync esync() const;
  inline void set_esync(::Cmd::EChatRoomSync value);

  // optional .Cmd.ChatRoomSummary data = 4;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 4;
  inline const ::Cmd::ChatRoomSummary& data() const;
  inline ::Cmd::ChatRoomSummary* mutable_data();
  inline ::Cmd::ChatRoomSummary* release_data();
  inline void set_allocated_data(::Cmd::ChatRoomSummary* data);

  // @@protoc_insertion_point(class_scope:Cmd.ChatRoomDataSync)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_esync();
  inline void clear_has_esync();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::Cmd::ChatRoomSummary* data_;
  int esync_;
  friend void  protobuf_AddDesc_SceneChatRoom_2eproto();
  friend void protobuf_AssignDesc_SceneChatRoom_2eproto();
  friend void protobuf_ShutdownFile_SceneChatRoom_2eproto();

  void InitAsDefaultInstance();
  static ChatRoomDataSync* default_instance_;
};
// -------------------------------------------------------------------

class ChatRoomTip : public ::google::protobuf::Message {
 public:
  ChatRoomTip();
  virtual ~ChatRoomTip();

  ChatRoomTip(const ChatRoomTip& from);

  inline ChatRoomTip& operator=(const ChatRoomTip& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatRoomTip& default_instance();

  void Swap(ChatRoomTip* other);

  // implements Message ----------------------------------------------

  ChatRoomTip* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChatRoomTip& from);
  void MergeFrom(const ChatRoomTip& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CHATROOM_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.EChatRoomParam param = 2 [default = ECHATROOMPARAM_ROOMTIP];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::EChatRoomParam param() const;
  inline void set_param(::Cmd::EChatRoomParam value);

  // optional .Cmd.EChatRoomTip tip = 3 [default = ECHATROOMTIP_JOIN];
  inline bool has_tip() const;
  inline void clear_tip();
  static const int kTipFieldNumber = 3;
  inline ::Cmd::EChatRoomTip tip() const;
  inline void set_tip(::Cmd::EChatRoomTip value);

  // optional uint64 userid = 4 [default = 0];
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 4;
  inline ::google::protobuf::uint64 userid() const;
  inline void set_userid(::google::protobuf::uint64 value);

  // optional string name = 5;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 5;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:Cmd.ChatRoomTip)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_tip();
  inline void clear_has_tip();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 userid_;
  ::std::string* name_;
  int tip_;
  friend void  protobuf_AddDesc_SceneChatRoom_2eproto();
  friend void protobuf_AssignDesc_SceneChatRoom_2eproto();
  friend void protobuf_ShutdownFile_SceneChatRoom_2eproto();

  void InitAsDefaultInstance();
  static ChatRoomTip* default_instance_;
};
// ===================================================================


// ===================================================================

// ChatRoomMember

// optional uint64 id = 1 [default = 0];
inline bool ChatRoomMember::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatRoomMember::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatRoomMember::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatRoomMember::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 ChatRoomMember::id() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatRoomMember.id)
  return id_;
}
inline void ChatRoomMember::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatRoomMember.id)
}

// optional uint32 level = 2 [default = 0];
inline bool ChatRoomMember::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChatRoomMember::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChatRoomMember::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChatRoomMember::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 ChatRoomMember::level() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatRoomMember.level)
  return level_;
}
inline void ChatRoomMember::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatRoomMember.level)
}

// optional uint32 body = 3 [default = 0];
inline bool ChatRoomMember::has_body() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChatRoomMember::set_has_body() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChatRoomMember::clear_has_body() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChatRoomMember::clear_body() {
  body_ = 0u;
  clear_has_body();
}
inline ::google::protobuf::uint32 ChatRoomMember::body() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatRoomMember.body)
  return body_;
}
inline void ChatRoomMember::set_body(::google::protobuf::uint32 value) {
  set_has_body();
  body_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatRoomMember.body)
}

// optional uint32 hair = 4 [default = 0];
inline bool ChatRoomMember::has_hair() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChatRoomMember::set_has_hair() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChatRoomMember::clear_has_hair() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChatRoomMember::clear_hair() {
  hair_ = 0u;
  clear_has_hair();
}
inline ::google::protobuf::uint32 ChatRoomMember::hair() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatRoomMember.hair)
  return hair_;
}
inline void ChatRoomMember::set_hair(::google::protobuf::uint32 value) {
  set_has_hair();
  hair_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatRoomMember.hair)
}

// optional uint32 haircolor = 5 [default = 0];
inline bool ChatRoomMember::has_haircolor() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChatRoomMember::set_has_haircolor() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ChatRoomMember::clear_has_haircolor() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ChatRoomMember::clear_haircolor() {
  haircolor_ = 0u;
  clear_has_haircolor();
}
inline ::google::protobuf::uint32 ChatRoomMember::haircolor() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatRoomMember.haircolor)
  return haircolor_;
}
inline void ChatRoomMember::set_haircolor(::google::protobuf::uint32 value) {
  set_has_haircolor();
  haircolor_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatRoomMember.haircolor)
}

// optional uint32 portrait = 12 [default = 0];
inline bool ChatRoomMember::has_portrait() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ChatRoomMember::set_has_portrait() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ChatRoomMember::clear_has_portrait() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ChatRoomMember::clear_portrait() {
  portrait_ = 0u;
  clear_has_portrait();
}
inline ::google::protobuf::uint32 ChatRoomMember::portrait() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatRoomMember.portrait)
  return portrait_;
}
inline void ChatRoomMember::set_portrait(::google::protobuf::uint32 value) {
  set_has_portrait();
  portrait_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatRoomMember.portrait)
}

// optional uint32 eye = 13 [default = 0];
inline bool ChatRoomMember::has_eye() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ChatRoomMember::set_has_eye() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ChatRoomMember::clear_has_eye() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ChatRoomMember::clear_eye() {
  eye_ = 0u;
  clear_has_eye();
}
inline ::google::protobuf::uint32 ChatRoomMember::eye() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatRoomMember.eye)
  return eye_;
}
inline void ChatRoomMember::set_eye(::google::protobuf::uint32 value) {
  set_has_eye();
  eye_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatRoomMember.eye)
}

// optional .Cmd.EGender gender = 6 [default = EGENDER_MIN];
inline bool ChatRoomMember::has_gender() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ChatRoomMember::set_has_gender() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ChatRoomMember::clear_has_gender() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ChatRoomMember::clear_gender() {
  gender_ = 0;
  clear_has_gender();
}
inline ::Cmd::EGender ChatRoomMember::gender() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatRoomMember.gender)
  return static_cast< ::Cmd::EGender >(gender_);
}
inline void ChatRoomMember::set_gender(::Cmd::EGender value) {
  assert(::Cmd::EGender_IsValid(value));
  set_has_gender();
  gender_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatRoomMember.gender)
}

// optional .Cmd.EProfession rolejob = 7 [default = EPROFESSION_MIN];
inline bool ChatRoomMember::has_rolejob() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ChatRoomMember::set_has_rolejob() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ChatRoomMember::clear_has_rolejob() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ChatRoomMember::clear_rolejob() {
  rolejob_ = 0;
  clear_has_rolejob();
}
inline ::Cmd::EProfession ChatRoomMember::rolejob() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatRoomMember.rolejob)
  return static_cast< ::Cmd::EProfession >(rolejob_);
}
inline void ChatRoomMember::set_rolejob(::Cmd::EProfession value) {
  assert(::Cmd::EProfession_IsValid(value));
  set_has_rolejob();
  rolejob_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatRoomMember.rolejob)
}

// optional .Cmd.EChatRoomJob job = 8 [default = ECHATROOM_MEMBER];
inline bool ChatRoomMember::has_job() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ChatRoomMember::set_has_job() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ChatRoomMember::clear_has_job() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ChatRoomMember::clear_job() {
  job_ = 2;
  clear_has_job();
}
inline ::Cmd::EChatRoomJob ChatRoomMember::job() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatRoomMember.job)
  return static_cast< ::Cmd::EChatRoomJob >(job_);
}
inline void ChatRoomMember::set_job(::Cmd::EChatRoomJob value) {
  assert(::Cmd::EChatRoomJob_IsValid(value));
  set_has_job();
  job_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatRoomMember.job)
}

// optional bool blink = 9 [default = false];
inline bool ChatRoomMember::has_blink() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ChatRoomMember::set_has_blink() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ChatRoomMember::clear_has_blink() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ChatRoomMember::clear_blink() {
  blink_ = false;
  clear_has_blink();
}
inline bool ChatRoomMember::blink() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatRoomMember.blink)
  return blink_;
}
inline void ChatRoomMember::set_blink(bool value) {
  set_has_blink();
  blink_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatRoomMember.blink)
}

// optional string name = 10;
inline bool ChatRoomMember::has_name() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ChatRoomMember::set_has_name() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ChatRoomMember::clear_has_name() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ChatRoomMember::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ChatRoomMember::name() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatRoomMember.name)
  return *name_;
}
inline void ChatRoomMember::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ChatRoomMember.name)
}
inline void ChatRoomMember::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ChatRoomMember.name)
}
inline void ChatRoomMember::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ChatRoomMember.name)
}
inline ::std::string* ChatRoomMember::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ChatRoomMember.name)
  return name_;
}
inline ::std::string* ChatRoomMember::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChatRoomMember::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ChatRoomMember.name)
}

// optional string guildname = 11;
inline bool ChatRoomMember::has_guildname() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ChatRoomMember::set_has_guildname() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ChatRoomMember::clear_has_guildname() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ChatRoomMember::clear_guildname() {
  if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_->clear();
  }
  clear_has_guildname();
}
inline const ::std::string& ChatRoomMember::guildname() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatRoomMember.guildname)
  return *guildname_;
}
inline void ChatRoomMember::set_guildname(const ::std::string& value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ChatRoomMember.guildname)
}
inline void ChatRoomMember::set_guildname(const char* value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ChatRoomMember.guildname)
}
inline void ChatRoomMember::set_guildname(const char* value, size_t size) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ChatRoomMember.guildname)
}
inline ::std::string* ChatRoomMember::mutable_guildname() {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ChatRoomMember.guildname)
  return guildname_;
}
inline ::std::string* ChatRoomMember::release_guildname() {
  clear_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = guildname_;
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChatRoomMember::set_allocated_guildname(::std::string* guildname) {
  if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guildname_;
  }
  if (guildname) {
    set_has_guildname();
    guildname_ = guildname;
  } else {
    clear_has_guildname();
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ChatRoomMember.guildname)
}

// -------------------------------------------------------------------

// ChatRoomData

// optional uint32 roomid = 1 [default = 0];
inline bool ChatRoomData::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatRoomData::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatRoomData::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatRoomData::clear_roomid() {
  roomid_ = 0u;
  clear_has_roomid();
}
inline ::google::protobuf::uint32 ChatRoomData::roomid() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatRoomData.roomid)
  return roomid_;
}
inline void ChatRoomData::set_roomid(::google::protobuf::uint32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatRoomData.roomid)
}

// optional string name = 2;
inline bool ChatRoomData::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChatRoomData::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChatRoomData::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChatRoomData::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ChatRoomData::name() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatRoomData.name)
  return *name_;
}
inline void ChatRoomData::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ChatRoomData.name)
}
inline void ChatRoomData::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ChatRoomData.name)
}
inline void ChatRoomData::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ChatRoomData.name)
}
inline ::std::string* ChatRoomData::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ChatRoomData.name)
  return name_;
}
inline ::std::string* ChatRoomData::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChatRoomData::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ChatRoomData.name)
}

// optional string pswd = 3;
inline bool ChatRoomData::has_pswd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChatRoomData::set_has_pswd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChatRoomData::clear_has_pswd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChatRoomData::clear_pswd() {
  if (pswd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pswd_->clear();
  }
  clear_has_pswd();
}
inline const ::std::string& ChatRoomData::pswd() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatRoomData.pswd)
  return *pswd_;
}
inline void ChatRoomData::set_pswd(const ::std::string& value) {
  set_has_pswd();
  if (pswd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pswd_ = new ::std::string;
  }
  pswd_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ChatRoomData.pswd)
}
inline void ChatRoomData::set_pswd(const char* value) {
  set_has_pswd();
  if (pswd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pswd_ = new ::std::string;
  }
  pswd_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ChatRoomData.pswd)
}
inline void ChatRoomData::set_pswd(const char* value, size_t size) {
  set_has_pswd();
  if (pswd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pswd_ = new ::std::string;
  }
  pswd_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ChatRoomData.pswd)
}
inline ::std::string* ChatRoomData::mutable_pswd() {
  set_has_pswd();
  if (pswd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pswd_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ChatRoomData.pswd)
  return pswd_;
}
inline ::std::string* ChatRoomData::release_pswd() {
  clear_has_pswd();
  if (pswd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = pswd_;
    pswd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChatRoomData::set_allocated_pswd(::std::string* pswd) {
  if (pswd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pswd_;
  }
  if (pswd) {
    set_has_pswd();
    pswd_ = pswd;
  } else {
    clear_has_pswd();
    pswd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ChatRoomData.pswd)
}

// optional uint64 ownerid = 4 [default = 0];
inline bool ChatRoomData::has_ownerid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChatRoomData::set_has_ownerid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChatRoomData::clear_has_ownerid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChatRoomData::clear_ownerid() {
  ownerid_ = GOOGLE_ULONGLONG(0);
  clear_has_ownerid();
}
inline ::google::protobuf::uint64 ChatRoomData::ownerid() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatRoomData.ownerid)
  return ownerid_;
}
inline void ChatRoomData::set_ownerid(::google::protobuf::uint64 value) {
  set_has_ownerid();
  ownerid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatRoomData.ownerid)
}

// optional uint32 maxnum = 5 [default = 2];
inline bool ChatRoomData::has_maxnum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChatRoomData::set_has_maxnum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ChatRoomData::clear_has_maxnum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ChatRoomData::clear_maxnum() {
  maxnum_ = 2u;
  clear_has_maxnum();
}
inline ::google::protobuf::uint32 ChatRoomData::maxnum() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatRoomData.maxnum)
  return maxnum_;
}
inline void ChatRoomData::set_maxnum(::google::protobuf::uint32 value) {
  set_has_maxnum();
  maxnum_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatRoomData.maxnum)
}

// optional .Cmd.EChatRoomType roomtype = 6 [default = ECHATROOMTYPE_PUBLIC];
inline bool ChatRoomData::has_roomtype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ChatRoomData::set_has_roomtype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ChatRoomData::clear_has_roomtype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ChatRoomData::clear_roomtype() {
  roomtype_ = 1;
  clear_has_roomtype();
}
inline ::Cmd::EChatRoomType ChatRoomData::roomtype() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatRoomData.roomtype)
  return static_cast< ::Cmd::EChatRoomType >(roomtype_);
}
inline void ChatRoomData::set_roomtype(::Cmd::EChatRoomType value) {
  assert(::Cmd::EChatRoomType_IsValid(value));
  set_has_roomtype();
  roomtype_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatRoomData.roomtype)
}

// repeated .Cmd.ChatRoomMember members = 7;
inline int ChatRoomData::members_size() const {
  return members_.size();
}
inline void ChatRoomData::clear_members() {
  members_.Clear();
}
inline const ::Cmd::ChatRoomMember& ChatRoomData::members(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.ChatRoomData.members)
  return members_.Get(index);
}
inline ::Cmd::ChatRoomMember* ChatRoomData::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.ChatRoomData.members)
  return members_.Mutable(index);
}
inline ::Cmd::ChatRoomMember* ChatRoomData::add_members() {
  // @@protoc_insertion_point(field_add:Cmd.ChatRoomData.members)
  return members_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ChatRoomMember >&
ChatRoomData::members() const {
  // @@protoc_insertion_point(field_list:Cmd.ChatRoomData.members)
  return members_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::ChatRoomMember >*
ChatRoomData::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.ChatRoomData.members)
  return &members_;
}

// -------------------------------------------------------------------

// CreateChatRoom

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_CHATROOM_PROTOCMD];
inline bool CreateChatRoom::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateChatRoom::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateChatRoom::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateChatRoom::clear_cmd() {
  cmd_ = 19;
  clear_has_cmd();
}
inline ::Cmd::Command CreateChatRoom::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.CreateChatRoom.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void CreateChatRoom::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CreateChatRoom.cmd)
}

// optional .Cmd.EChatRoomParam param = 2 [default = ECHATROOMPARAM_CREATE];
inline bool CreateChatRoom::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreateChatRoom::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreateChatRoom::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreateChatRoom::clear_param() {
  param_ = 1;
  clear_has_param();
}
inline ::Cmd::EChatRoomParam CreateChatRoom::param() const {
  // @@protoc_insertion_point(field_get:Cmd.CreateChatRoom.param)
  return static_cast< ::Cmd::EChatRoomParam >(param_);
}
inline void CreateChatRoom::set_param(::Cmd::EChatRoomParam value) {
  assert(::Cmd::EChatRoomParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CreateChatRoom.param)
}

// optional string roomname = 3;
inline bool CreateChatRoom::has_roomname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CreateChatRoom::set_has_roomname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CreateChatRoom::clear_has_roomname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CreateChatRoom::clear_roomname() {
  if (roomname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomname_->clear();
  }
  clear_has_roomname();
}
inline const ::std::string& CreateChatRoom::roomname() const {
  // @@protoc_insertion_point(field_get:Cmd.CreateChatRoom.roomname)
  return *roomname_;
}
inline void CreateChatRoom::set_roomname(const ::std::string& value) {
  set_has_roomname();
  if (roomname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomname_ = new ::std::string;
  }
  roomname_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.CreateChatRoom.roomname)
}
inline void CreateChatRoom::set_roomname(const char* value) {
  set_has_roomname();
  if (roomname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomname_ = new ::std::string;
  }
  roomname_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.CreateChatRoom.roomname)
}
inline void CreateChatRoom::set_roomname(const char* value, size_t size) {
  set_has_roomname();
  if (roomname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomname_ = new ::std::string;
  }
  roomname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.CreateChatRoom.roomname)
}
inline ::std::string* CreateChatRoom::mutable_roomname() {
  set_has_roomname();
  if (roomname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.CreateChatRoom.roomname)
  return roomname_;
}
inline ::std::string* CreateChatRoom::release_roomname() {
  clear_has_roomname();
  if (roomname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = roomname_;
    roomname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CreateChatRoom::set_allocated_roomname(::std::string* roomname) {
  if (roomname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete roomname_;
  }
  if (roomname) {
    set_has_roomname();
    roomname_ = roomname;
  } else {
    clear_has_roomname();
    roomname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.CreateChatRoom.roomname)
}

// optional uint32 maxnum = 4 [default = 2];
inline bool CreateChatRoom::has_maxnum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CreateChatRoom::set_has_maxnum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CreateChatRoom::clear_has_maxnum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CreateChatRoom::clear_maxnum() {
  maxnum_ = 2u;
  clear_has_maxnum();
}
inline ::google::protobuf::uint32 CreateChatRoom::maxnum() const {
  // @@protoc_insertion_point(field_get:Cmd.CreateChatRoom.maxnum)
  return maxnum_;
}
inline void CreateChatRoom::set_maxnum(::google::protobuf::uint32 value) {
  set_has_maxnum();
  maxnum_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CreateChatRoom.maxnum)
}

// optional string pswd = 5;
inline bool CreateChatRoom::has_pswd() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CreateChatRoom::set_has_pswd() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CreateChatRoom::clear_has_pswd() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CreateChatRoom::clear_pswd() {
  if (pswd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pswd_->clear();
  }
  clear_has_pswd();
}
inline const ::std::string& CreateChatRoom::pswd() const {
  // @@protoc_insertion_point(field_get:Cmd.CreateChatRoom.pswd)
  return *pswd_;
}
inline void CreateChatRoom::set_pswd(const ::std::string& value) {
  set_has_pswd();
  if (pswd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pswd_ = new ::std::string;
  }
  pswd_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.CreateChatRoom.pswd)
}
inline void CreateChatRoom::set_pswd(const char* value) {
  set_has_pswd();
  if (pswd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pswd_ = new ::std::string;
  }
  pswd_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.CreateChatRoom.pswd)
}
inline void CreateChatRoom::set_pswd(const char* value, size_t size) {
  set_has_pswd();
  if (pswd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pswd_ = new ::std::string;
  }
  pswd_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.CreateChatRoom.pswd)
}
inline ::std::string* CreateChatRoom::mutable_pswd() {
  set_has_pswd();
  if (pswd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pswd_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.CreateChatRoom.pswd)
  return pswd_;
}
inline ::std::string* CreateChatRoom::release_pswd() {
  clear_has_pswd();
  if (pswd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = pswd_;
    pswd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CreateChatRoom::set_allocated_pswd(::std::string* pswd) {
  if (pswd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pswd_;
  }
  if (pswd) {
    set_has_pswd();
    pswd_ = pswd;
  } else {
    clear_has_pswd();
    pswd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.CreateChatRoom.pswd)
}

// -------------------------------------------------------------------

// JoinChatRoom

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_CHATROOM_PROTOCMD];
inline bool JoinChatRoom::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JoinChatRoom::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JoinChatRoom::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JoinChatRoom::clear_cmd() {
  cmd_ = 19;
  clear_has_cmd();
}
inline ::Cmd::Command JoinChatRoom::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.JoinChatRoom.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void JoinChatRoom::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.JoinChatRoom.cmd)
}

// optional .Cmd.EChatRoomParam param = 2 [default = ECHATROOMPARAM_JOIN];
inline bool JoinChatRoom::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JoinChatRoom::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JoinChatRoom::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JoinChatRoom::clear_param() {
  param_ = 2;
  clear_has_param();
}
inline ::Cmd::EChatRoomParam JoinChatRoom::param() const {
  // @@protoc_insertion_point(field_get:Cmd.JoinChatRoom.param)
  return static_cast< ::Cmd::EChatRoomParam >(param_);
}
inline void JoinChatRoom::set_param(::Cmd::EChatRoomParam value) {
  assert(::Cmd::EChatRoomParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.JoinChatRoom.param)
}

// optional uint64 roomid = 3 [default = 0];
inline bool JoinChatRoom::has_roomid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JoinChatRoom::set_has_roomid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JoinChatRoom::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JoinChatRoom::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
  clear_has_roomid();
}
inline ::google::protobuf::uint64 JoinChatRoom::roomid() const {
  // @@protoc_insertion_point(field_get:Cmd.JoinChatRoom.roomid)
  return roomid_;
}
inline void JoinChatRoom::set_roomid(::google::protobuf::uint64 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.JoinChatRoom.roomid)
}

// optional string pswd = 4;
inline bool JoinChatRoom::has_pswd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JoinChatRoom::set_has_pswd() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JoinChatRoom::clear_has_pswd() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JoinChatRoom::clear_pswd() {
  if (pswd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pswd_->clear();
  }
  clear_has_pswd();
}
inline const ::std::string& JoinChatRoom::pswd() const {
  // @@protoc_insertion_point(field_get:Cmd.JoinChatRoom.pswd)
  return *pswd_;
}
inline void JoinChatRoom::set_pswd(const ::std::string& value) {
  set_has_pswd();
  if (pswd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pswd_ = new ::std::string;
  }
  pswd_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.JoinChatRoom.pswd)
}
inline void JoinChatRoom::set_pswd(const char* value) {
  set_has_pswd();
  if (pswd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pswd_ = new ::std::string;
  }
  pswd_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.JoinChatRoom.pswd)
}
inline void JoinChatRoom::set_pswd(const char* value, size_t size) {
  set_has_pswd();
  if (pswd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pswd_ = new ::std::string;
  }
  pswd_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.JoinChatRoom.pswd)
}
inline ::std::string* JoinChatRoom::mutable_pswd() {
  set_has_pswd();
  if (pswd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pswd_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.JoinChatRoom.pswd)
  return pswd_;
}
inline ::std::string* JoinChatRoom::release_pswd() {
  clear_has_pswd();
  if (pswd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = pswd_;
    pswd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void JoinChatRoom::set_allocated_pswd(::std::string* pswd) {
  if (pswd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pswd_;
  }
  if (pswd) {
    set_has_pswd();
    pswd_ = pswd;
  } else {
    clear_has_pswd();
    pswd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.JoinChatRoom.pswd)
}

// -------------------------------------------------------------------

// ExitChatRoom

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_CHATROOM_PROTOCMD];
inline bool ExitChatRoom::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExitChatRoom::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExitChatRoom::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExitChatRoom::clear_cmd() {
  cmd_ = 19;
  clear_has_cmd();
}
inline ::Cmd::Command ExitChatRoom::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ExitChatRoom.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ExitChatRoom::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ExitChatRoom.cmd)
}

// optional .Cmd.EChatRoomParam param = 2 [default = ECHATROOMPARAM_EXIT];
inline bool ExitChatRoom::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExitChatRoom::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExitChatRoom::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExitChatRoom::clear_param() {
  param_ = 3;
  clear_has_param();
}
inline ::Cmd::EChatRoomParam ExitChatRoom::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ExitChatRoom.param)
  return static_cast< ::Cmd::EChatRoomParam >(param_);
}
inline void ExitChatRoom::set_param(::Cmd::EChatRoomParam value) {
  assert(::Cmd::EChatRoomParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ExitChatRoom.param)
}

// optional uint64 roomid = 3 [default = 0];
inline bool ExitChatRoom::has_roomid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ExitChatRoom::set_has_roomid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ExitChatRoom::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ExitChatRoom::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
  clear_has_roomid();
}
inline ::google::protobuf::uint64 ExitChatRoom::roomid() const {
  // @@protoc_insertion_point(field_get:Cmd.ExitChatRoom.roomid)
  return roomid_;
}
inline void ExitChatRoom::set_roomid(::google::protobuf::uint64 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ExitChatRoom.roomid)
}

// optional uint64 userid = 4 [default = 0];
inline bool ExitChatRoom::has_userid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ExitChatRoom::set_has_userid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ExitChatRoom::clear_has_userid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ExitChatRoom::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::uint64 ExitChatRoom::userid() const {
  // @@protoc_insertion_point(field_get:Cmd.ExitChatRoom.userid)
  return userid_;
}
inline void ExitChatRoom::set_userid(::google::protobuf::uint64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ExitChatRoom.userid)
}

// -------------------------------------------------------------------

// KickChatMember

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_CHATROOM_PROTOCMD];
inline bool KickChatMember::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KickChatMember::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KickChatMember::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KickChatMember::clear_cmd() {
  cmd_ = 19;
  clear_has_cmd();
}
inline ::Cmd::Command KickChatMember::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.KickChatMember.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void KickChatMember::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.KickChatMember.cmd)
}

// optional .Cmd.EChatRoomParam param = 2 [default = ECHATROOMPARAM_KICKMEMBER];
inline bool KickChatMember::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KickChatMember::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void KickChatMember::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void KickChatMember::clear_param() {
  param_ = 4;
  clear_has_param();
}
inline ::Cmd::EChatRoomParam KickChatMember::param() const {
  // @@protoc_insertion_point(field_get:Cmd.KickChatMember.param)
  return static_cast< ::Cmd::EChatRoomParam >(param_);
}
inline void KickChatMember::set_param(::Cmd::EChatRoomParam value) {
  assert(::Cmd::EChatRoomParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.KickChatMember.param)
}

// optional uint64 roomid = 3 [default = 0];
inline bool KickChatMember::has_roomid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void KickChatMember::set_has_roomid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void KickChatMember::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void KickChatMember::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
  clear_has_roomid();
}
inline ::google::protobuf::uint64 KickChatMember::roomid() const {
  // @@protoc_insertion_point(field_get:Cmd.KickChatMember.roomid)
  return roomid_;
}
inline void KickChatMember::set_roomid(::google::protobuf::uint64 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.KickChatMember.roomid)
}

// optional uint64 memberid = 4 [default = 0];
inline bool KickChatMember::has_memberid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void KickChatMember::set_has_memberid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void KickChatMember::clear_has_memberid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void KickChatMember::clear_memberid() {
  memberid_ = GOOGLE_ULONGLONG(0);
  clear_has_memberid();
}
inline ::google::protobuf::uint64 KickChatMember::memberid() const {
  // @@protoc_insertion_point(field_get:Cmd.KickChatMember.memberid)
  return memberid_;
}
inline void KickChatMember::set_memberid(::google::protobuf::uint64 value) {
  set_has_memberid();
  memberid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.KickChatMember.memberid)
}

// -------------------------------------------------------------------

// ExchangeRoomOwner

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_CHATROOM_PROTOCMD];
inline bool ExchangeRoomOwner::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExchangeRoomOwner::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExchangeRoomOwner::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExchangeRoomOwner::clear_cmd() {
  cmd_ = 19;
  clear_has_cmd();
}
inline ::Cmd::Command ExchangeRoomOwner::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ExchangeRoomOwner.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ExchangeRoomOwner::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ExchangeRoomOwner.cmd)
}

// optional .Cmd.EChatRoomParam param = 2 [default = ECHATROOMPARAM_CHANGEOWNER];
inline bool ExchangeRoomOwner::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExchangeRoomOwner::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExchangeRoomOwner::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExchangeRoomOwner::clear_param() {
  param_ = 5;
  clear_has_param();
}
inline ::Cmd::EChatRoomParam ExchangeRoomOwner::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ExchangeRoomOwner.param)
  return static_cast< ::Cmd::EChatRoomParam >(param_);
}
inline void ExchangeRoomOwner::set_param(::Cmd::EChatRoomParam value) {
  assert(::Cmd::EChatRoomParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ExchangeRoomOwner.param)
}

// optional uint64 userid = 3 [default = 0];
inline bool ExchangeRoomOwner::has_userid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ExchangeRoomOwner::set_has_userid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ExchangeRoomOwner::clear_has_userid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ExchangeRoomOwner::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::uint64 ExchangeRoomOwner::userid() const {
  // @@protoc_insertion_point(field_get:Cmd.ExchangeRoomOwner.userid)
  return userid_;
}
inline void ExchangeRoomOwner::set_userid(::google::protobuf::uint64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ExchangeRoomOwner.userid)
}

// -------------------------------------------------------------------

// RoomMemberUpdate

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_CHATROOM_PROTOCMD];
inline bool RoomMemberUpdate::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoomMemberUpdate::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoomMemberUpdate::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoomMemberUpdate::clear_cmd() {
  cmd_ = 19;
  clear_has_cmd();
}
inline ::Cmd::Command RoomMemberUpdate::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.RoomMemberUpdate.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void RoomMemberUpdate::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RoomMemberUpdate.cmd)
}

// optional .Cmd.EChatRoomParam param = 2 [default = ECHATROOMPARAM_MEMBERUPDATE];
inline bool RoomMemberUpdate::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoomMemberUpdate::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoomMemberUpdate::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoomMemberUpdate::clear_param() {
  param_ = 7;
  clear_has_param();
}
inline ::Cmd::EChatRoomParam RoomMemberUpdate::param() const {
  // @@protoc_insertion_point(field_get:Cmd.RoomMemberUpdate.param)
  return static_cast< ::Cmd::EChatRoomParam >(param_);
}
inline void RoomMemberUpdate::set_param(::Cmd::EChatRoomParam value) {
  assert(::Cmd::EChatRoomParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RoomMemberUpdate.param)
}

// repeated .Cmd.ChatRoomMember updates = 3;
inline int RoomMemberUpdate::updates_size() const {
  return updates_.size();
}
inline void RoomMemberUpdate::clear_updates() {
  updates_.Clear();
}
inline const ::Cmd::ChatRoomMember& RoomMemberUpdate::updates(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.RoomMemberUpdate.updates)
  return updates_.Get(index);
}
inline ::Cmd::ChatRoomMember* RoomMemberUpdate::mutable_updates(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.RoomMemberUpdate.updates)
  return updates_.Mutable(index);
}
inline ::Cmd::ChatRoomMember* RoomMemberUpdate::add_updates() {
  // @@protoc_insertion_point(field_add:Cmd.RoomMemberUpdate.updates)
  return updates_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ChatRoomMember >&
RoomMemberUpdate::updates() const {
  // @@protoc_insertion_point(field_list:Cmd.RoomMemberUpdate.updates)
  return updates_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::ChatRoomMember >*
RoomMemberUpdate::mutable_updates() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.RoomMemberUpdate.updates)
  return &updates_;
}

// repeated uint64 deletes = 4;
inline int RoomMemberUpdate::deletes_size() const {
  return deletes_.size();
}
inline void RoomMemberUpdate::clear_deletes() {
  deletes_.Clear();
}
inline ::google::protobuf::uint64 RoomMemberUpdate::deletes(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.RoomMemberUpdate.deletes)
  return deletes_.Get(index);
}
inline void RoomMemberUpdate::set_deletes(int index, ::google::protobuf::uint64 value) {
  deletes_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.RoomMemberUpdate.deletes)
}
inline void RoomMemberUpdate::add_deletes(::google::protobuf::uint64 value) {
  deletes_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.RoomMemberUpdate.deletes)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
RoomMemberUpdate::deletes() const {
  // @@protoc_insertion_point(field_list:Cmd.RoomMemberUpdate.deletes)
  return deletes_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
RoomMemberUpdate::mutable_deletes() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.RoomMemberUpdate.deletes)
  return &deletes_;
}

// -------------------------------------------------------------------

// EnterChatRoom

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_CHATROOM_PROTOCMD];
inline bool EnterChatRoom::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EnterChatRoom::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EnterChatRoom::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EnterChatRoom::clear_cmd() {
  cmd_ = 19;
  clear_has_cmd();
}
inline ::Cmd::Command EnterChatRoom::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.EnterChatRoom.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void EnterChatRoom::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EnterChatRoom.cmd)
}

// optional .Cmd.EChatRoomParam param = 2 [default = ECHATROOMPARAM_ENTERROOM];
inline bool EnterChatRoom::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EnterChatRoom::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EnterChatRoom::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EnterChatRoom::clear_param() {
  param_ = 6;
  clear_has_param();
}
inline ::Cmd::EChatRoomParam EnterChatRoom::param() const {
  // @@protoc_insertion_point(field_get:Cmd.EnterChatRoom.param)
  return static_cast< ::Cmd::EChatRoomParam >(param_);
}
inline void EnterChatRoom::set_param(::Cmd::EChatRoomParam value) {
  assert(::Cmd::EChatRoomParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EnterChatRoom.param)
}

// optional .Cmd.ChatRoomData data = 3;
inline bool EnterChatRoom::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EnterChatRoom::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EnterChatRoom::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EnterChatRoom::clear_data() {
  if (data_ != NULL) data_->::Cmd::ChatRoomData::Clear();
  clear_has_data();
}
inline const ::Cmd::ChatRoomData& EnterChatRoom::data() const {
  // @@protoc_insertion_point(field_get:Cmd.EnterChatRoom.data)
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::Cmd::ChatRoomData* EnterChatRoom::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::Cmd::ChatRoomData;
  // @@protoc_insertion_point(field_mutable:Cmd.EnterChatRoom.data)
  return data_;
}
inline ::Cmd::ChatRoomData* EnterChatRoom::release_data() {
  clear_has_data();
  ::Cmd::ChatRoomData* temp = data_;
  data_ = NULL;
  return temp;
}
inline void EnterChatRoom::set_allocated_data(::Cmd::ChatRoomData* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.EnterChatRoom.data)
}

// -------------------------------------------------------------------

// ChatRoomSummary

// optional uint64 ownerid = 1 [default = 0];
inline bool ChatRoomSummary::has_ownerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatRoomSummary::set_has_ownerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatRoomSummary::clear_has_ownerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatRoomSummary::clear_ownerid() {
  ownerid_ = GOOGLE_ULONGLONG(0);
  clear_has_ownerid();
}
inline ::google::protobuf::uint64 ChatRoomSummary::ownerid() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatRoomSummary.ownerid)
  return ownerid_;
}
inline void ChatRoomSummary::set_ownerid(::google::protobuf::uint64 value) {
  set_has_ownerid();
  ownerid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatRoomSummary.ownerid)
}

// optional uint32 roomid = 2 [default = 0];
inline bool ChatRoomSummary::has_roomid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChatRoomSummary::set_has_roomid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChatRoomSummary::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChatRoomSummary::clear_roomid() {
  roomid_ = 0u;
  clear_has_roomid();
}
inline ::google::protobuf::uint32 ChatRoomSummary::roomid() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatRoomSummary.roomid)
  return roomid_;
}
inline void ChatRoomSummary::set_roomid(::google::protobuf::uint32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatRoomSummary.roomid)
}

// optional string name = 3;
inline bool ChatRoomSummary::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChatRoomSummary::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChatRoomSummary::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChatRoomSummary::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ChatRoomSummary::name() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatRoomSummary.name)
  return *name_;
}
inline void ChatRoomSummary::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ChatRoomSummary.name)
}
inline void ChatRoomSummary::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ChatRoomSummary.name)
}
inline void ChatRoomSummary::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ChatRoomSummary.name)
}
inline ::std::string* ChatRoomSummary::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ChatRoomSummary.name)
  return name_;
}
inline ::std::string* ChatRoomSummary::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChatRoomSummary::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ChatRoomSummary.name)
}

// optional .Cmd.EChatRoomType roomtype = 4 [default = ECHATROOMTYPE_PUBLIC];
inline bool ChatRoomSummary::has_roomtype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChatRoomSummary::set_has_roomtype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChatRoomSummary::clear_has_roomtype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChatRoomSummary::clear_roomtype() {
  roomtype_ = 1;
  clear_has_roomtype();
}
inline ::Cmd::EChatRoomType ChatRoomSummary::roomtype() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatRoomSummary.roomtype)
  return static_cast< ::Cmd::EChatRoomType >(roomtype_);
}
inline void ChatRoomSummary::set_roomtype(::Cmd::EChatRoomType value) {
  assert(::Cmd::EChatRoomType_IsValid(value));
  set_has_roomtype();
  roomtype_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatRoomSummary.roomtype)
}

// optional uint32 maxnum = 5 [default = 0];
inline bool ChatRoomSummary::has_maxnum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChatRoomSummary::set_has_maxnum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ChatRoomSummary::clear_has_maxnum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ChatRoomSummary::clear_maxnum() {
  maxnum_ = 0u;
  clear_has_maxnum();
}
inline ::google::protobuf::uint32 ChatRoomSummary::maxnum() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatRoomSummary.maxnum)
  return maxnum_;
}
inline void ChatRoomSummary::set_maxnum(::google::protobuf::uint32 value) {
  set_has_maxnum();
  maxnum_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatRoomSummary.maxnum)
}

// optional uint32 curnum = 6 [default = 0];
inline bool ChatRoomSummary::has_curnum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ChatRoomSummary::set_has_curnum() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ChatRoomSummary::clear_has_curnum() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ChatRoomSummary::clear_curnum() {
  curnum_ = 0u;
  clear_has_curnum();
}
inline ::google::protobuf::uint32 ChatRoomSummary::curnum() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatRoomSummary.curnum)
  return curnum_;
}
inline void ChatRoomSummary::set_curnum(::google::protobuf::uint32 value) {
  set_has_curnum();
  curnum_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatRoomSummary.curnum)
}

// optional string pswd = 7;
inline bool ChatRoomSummary::has_pswd() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ChatRoomSummary::set_has_pswd() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ChatRoomSummary::clear_has_pswd() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ChatRoomSummary::clear_pswd() {
  if (pswd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pswd_->clear();
  }
  clear_has_pswd();
}
inline const ::std::string& ChatRoomSummary::pswd() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatRoomSummary.pswd)
  return *pswd_;
}
inline void ChatRoomSummary::set_pswd(const ::std::string& value) {
  set_has_pswd();
  if (pswd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pswd_ = new ::std::string;
  }
  pswd_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ChatRoomSummary.pswd)
}
inline void ChatRoomSummary::set_pswd(const char* value) {
  set_has_pswd();
  if (pswd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pswd_ = new ::std::string;
  }
  pswd_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ChatRoomSummary.pswd)
}
inline void ChatRoomSummary::set_pswd(const char* value, size_t size) {
  set_has_pswd();
  if (pswd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pswd_ = new ::std::string;
  }
  pswd_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ChatRoomSummary.pswd)
}
inline ::std::string* ChatRoomSummary::mutable_pswd() {
  set_has_pswd();
  if (pswd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pswd_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ChatRoomSummary.pswd)
  return pswd_;
}
inline ::std::string* ChatRoomSummary::release_pswd() {
  clear_has_pswd();
  if (pswd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = pswd_;
    pswd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChatRoomSummary::set_allocated_pswd(::std::string* pswd) {
  if (pswd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pswd_;
  }
  if (pswd) {
    set_has_pswd();
    pswd_ = pswd;
  } else {
    clear_has_pswd();
    pswd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ChatRoomSummary.pswd)
}

// -------------------------------------------------------------------

// ChatRoomDataSync

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_CHATROOM_PROTOCMD];
inline bool ChatRoomDataSync::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatRoomDataSync::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatRoomDataSync::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatRoomDataSync::clear_cmd() {
  cmd_ = 19;
  clear_has_cmd();
}
inline ::Cmd::Command ChatRoomDataSync::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatRoomDataSync.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ChatRoomDataSync::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatRoomDataSync.cmd)
}

// optional .Cmd.EChatRoomParam param = 2 [default = ECHATROOMPARAM_ROOMDATASYNC];
inline bool ChatRoomDataSync::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChatRoomDataSync::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChatRoomDataSync::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChatRoomDataSync::clear_param() {
  param_ = 8;
  clear_has_param();
}
inline ::Cmd::EChatRoomParam ChatRoomDataSync::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatRoomDataSync.param)
  return static_cast< ::Cmd::EChatRoomParam >(param_);
}
inline void ChatRoomDataSync::set_param(::Cmd::EChatRoomParam value) {
  assert(::Cmd::EChatRoomParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatRoomDataSync.param)
}

// optional .Cmd.EChatRoomSync esync = 3 [default = ECHATROOMSYNC_UPDATE];
inline bool ChatRoomDataSync::has_esync() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChatRoomDataSync::set_has_esync() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChatRoomDataSync::clear_has_esync() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChatRoomDataSync::clear_esync() {
  esync_ = 1;
  clear_has_esync();
}
inline ::Cmd::EChatRoomSync ChatRoomDataSync::esync() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatRoomDataSync.esync)
  return static_cast< ::Cmd::EChatRoomSync >(esync_);
}
inline void ChatRoomDataSync::set_esync(::Cmd::EChatRoomSync value) {
  assert(::Cmd::EChatRoomSync_IsValid(value));
  set_has_esync();
  esync_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatRoomDataSync.esync)
}

// optional .Cmd.ChatRoomSummary data = 4;
inline bool ChatRoomDataSync::has_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChatRoomDataSync::set_has_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChatRoomDataSync::clear_has_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChatRoomDataSync::clear_data() {
  if (data_ != NULL) data_->::Cmd::ChatRoomSummary::Clear();
  clear_has_data();
}
inline const ::Cmd::ChatRoomSummary& ChatRoomDataSync::data() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatRoomDataSync.data)
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::Cmd::ChatRoomSummary* ChatRoomDataSync::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::Cmd::ChatRoomSummary;
  // @@protoc_insertion_point(field_mutable:Cmd.ChatRoomDataSync.data)
  return data_;
}
inline ::Cmd::ChatRoomSummary* ChatRoomDataSync::release_data() {
  clear_has_data();
  ::Cmd::ChatRoomSummary* temp = data_;
  data_ = NULL;
  return temp;
}
inline void ChatRoomDataSync::set_allocated_data(::Cmd::ChatRoomSummary* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ChatRoomDataSync.data)
}

// -------------------------------------------------------------------

// ChatRoomTip

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_CHATROOM_PROTOCMD];
inline bool ChatRoomTip::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatRoomTip::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatRoomTip::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatRoomTip::clear_cmd() {
  cmd_ = 19;
  clear_has_cmd();
}
inline ::Cmd::Command ChatRoomTip::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatRoomTip.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ChatRoomTip::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatRoomTip.cmd)
}

// optional .Cmd.EChatRoomParam param = 2 [default = ECHATROOMPARAM_ROOMTIP];
inline bool ChatRoomTip::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChatRoomTip::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChatRoomTip::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChatRoomTip::clear_param() {
  param_ = 9;
  clear_has_param();
}
inline ::Cmd::EChatRoomParam ChatRoomTip::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatRoomTip.param)
  return static_cast< ::Cmd::EChatRoomParam >(param_);
}
inline void ChatRoomTip::set_param(::Cmd::EChatRoomParam value) {
  assert(::Cmd::EChatRoomParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatRoomTip.param)
}

// optional .Cmd.EChatRoomTip tip = 3 [default = ECHATROOMTIP_JOIN];
inline bool ChatRoomTip::has_tip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChatRoomTip::set_has_tip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChatRoomTip::clear_has_tip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChatRoomTip::clear_tip() {
  tip_ = 1;
  clear_has_tip();
}
inline ::Cmd::EChatRoomTip ChatRoomTip::tip() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatRoomTip.tip)
  return static_cast< ::Cmd::EChatRoomTip >(tip_);
}
inline void ChatRoomTip::set_tip(::Cmd::EChatRoomTip value) {
  assert(::Cmd::EChatRoomTip_IsValid(value));
  set_has_tip();
  tip_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatRoomTip.tip)
}

// optional uint64 userid = 4 [default = 0];
inline bool ChatRoomTip::has_userid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChatRoomTip::set_has_userid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChatRoomTip::clear_has_userid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChatRoomTip::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::uint64 ChatRoomTip::userid() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatRoomTip.userid)
  return userid_;
}
inline void ChatRoomTip::set_userid(::google::protobuf::uint64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatRoomTip.userid)
}

// optional string name = 5;
inline bool ChatRoomTip::has_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChatRoomTip::set_has_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ChatRoomTip::clear_has_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ChatRoomTip::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ChatRoomTip::name() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatRoomTip.name)
  return *name_;
}
inline void ChatRoomTip::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ChatRoomTip.name)
}
inline void ChatRoomTip::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ChatRoomTip.name)
}
inline void ChatRoomTip::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ChatRoomTip.name)
}
inline ::std::string* ChatRoomTip::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ChatRoomTip.name)
  return name_;
}
inline ::std::string* ChatRoomTip::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChatRoomTip::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ChatRoomTip.name)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Cmd::EChatRoomParam> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EChatRoomParam>() {
  return ::Cmd::EChatRoomParam_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EChatRoomJob> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EChatRoomJob>() {
  return ::Cmd::EChatRoomJob_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EChatRoomType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EChatRoomType>() {
  return ::Cmd::EChatRoomType_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EChatRoomSync> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EChatRoomSync>() {
  return ::Cmd::EChatRoomSync_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EChatRoomTip> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EChatRoomTip>() {
  return ::Cmd::EChatRoomTip_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_SceneChatRoom_2eproto__INCLUDED
