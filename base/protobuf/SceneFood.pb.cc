// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SceneFood.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SceneFood.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Cmd {

namespace {

const ::google::protobuf::Descriptor* CookStateMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CookStateMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* CookStateNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CookStateNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrepareCook_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrepareCook_reflection_ = NULL;
const ::google::protobuf::Descriptor* SelectCookType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SelectCookType_reflection_ = NULL;
const ::google::protobuf::Descriptor* BriefItemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BriefItemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* StartCook_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StartCook_reflection_ = NULL;
const ::google::protobuf::Descriptor* PutFood_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PutFood_reflection_ = NULL;
const ::google::protobuf::Descriptor* EditFoodPower_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EditFoodPower_reflection_ = NULL;
const ::google::protobuf::Descriptor* FoodItemInfo2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FoodItemInfo2_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryFoodNpcInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryFoodNpcInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* StartEat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StartEat_reflection_ = NULL;
const ::google::protobuf::Descriptor* StopEat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StopEat_reflection_ = NULL;
const ::google::protobuf::Descriptor* EatProgressNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EatProgressNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* FoodInfoNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FoodInfoNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateFoodInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateFoodInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnlockRecipeNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnlockRecipeNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* FoodSubData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FoodSubData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FoodManualData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FoodManualData_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryFoodManualData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryFoodManualData_reflection_ = NULL;
const ::google::protobuf::Descriptor* NewFoodDataNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewFoodDataNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClickFoodManualData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClickFoodManualData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* FoodParam_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ECookType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ECookState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EEatPower_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EFoodDataType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EFoodStatus_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_SceneFood_2eproto() {
  protobuf_AddDesc_SceneFood_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SceneFood.proto");
  GOOGLE_CHECK(file != NULL);
  CookStateMsg_descriptor_ = file->message_type(0);
  static const int CookStateMsg_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CookStateMsg, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CookStateMsg, cooktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CookStateMsg, progress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CookStateMsg, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CookStateMsg, foodid_),
  };
  CookStateMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CookStateMsg_descriptor_,
      CookStateMsg::default_instance_,
      CookStateMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CookStateMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CookStateMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CookStateMsg));
  CookStateNtf_descriptor_ = file->message_type(1);
  static const int CookStateNtf_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CookStateNtf, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CookStateNtf, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CookStateNtf, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CookStateNtf, charid_),
  };
  CookStateNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CookStateNtf_descriptor_,
      CookStateNtf::default_instance_,
      CookStateNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CookStateNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CookStateNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CookStateNtf));
  PrepareCook_descriptor_ = file->message_type(2);
  static const int PrepareCook_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareCook, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareCook, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareCook, start_),
  };
  PrepareCook_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrepareCook_descriptor_,
      PrepareCook::default_instance_,
      PrepareCook_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareCook, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareCook, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrepareCook));
  SelectCookType_descriptor_ = file->message_type(3);
  static const int SelectCookType_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectCookType, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectCookType, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectCookType, cooktype_),
  };
  SelectCookType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SelectCookType_descriptor_,
      SelectCookType::default_instance_,
      SelectCookType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectCookType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectCookType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SelectCookType));
  BriefItemInfo_descriptor_ = file->message_type(4);
  static const int BriefItemInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BriefItemInfo, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BriefItemInfo, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BriefItemInfo, num_),
  };
  BriefItemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BriefItemInfo_descriptor_,
      BriefItemInfo::default_instance_,
      BriefItemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BriefItemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BriefItemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BriefItemInfo));
  StartCook_descriptor_ = file->message_type(5);
  static const int StartCook_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartCook, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartCook, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartCook, cooktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartCook, material_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartCook, recipe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartCook, skipanimation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartCook, recipes_),
  };
  StartCook_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StartCook_descriptor_,
      StartCook::default_instance_,
      StartCook_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartCook, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartCook, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StartCook));
  PutFood_descriptor_ = file->message_type(6);
  static const int PutFood_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutFood, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutFood, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutFood, foodguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutFood, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutFood, foodnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutFood, peteat_),
  };
  PutFood_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PutFood_descriptor_,
      PutFood::default_instance_,
      PutFood_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutFood, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutFood, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PutFood));
  EditFoodPower_descriptor_ = file->message_type(7);
  static const int EditFoodPower_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditFoodPower, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditFoodPower, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditFoodPower, npcguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditFoodPower, power_),
  };
  EditFoodPower_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EditFoodPower_descriptor_,
      EditFoodPower::default_instance_,
      EditFoodPower_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditFoodPower, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditFoodPower, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EditFoodPower));
  FoodItemInfo2_descriptor_ = file->message_type(8);
  static const int FoodItemInfo2_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FoodItemInfo2, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FoodItemInfo2, invalid_time_),
  };
  FoodItemInfo2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FoodItemInfo2_descriptor_,
      FoodItemInfo2::default_instance_,
      FoodItemInfo2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FoodItemInfo2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FoodItemInfo2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FoodItemInfo2));
  QueryFoodNpcInfo_descriptor_ = file->message_type(9);
  static const int QueryFoodNpcInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryFoodNpcInfo, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryFoodNpcInfo, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryFoodNpcInfo, npcguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryFoodNpcInfo, eating_people_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryFoodNpcInfo, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryFoodNpcInfo, ownerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryFoodNpcInfo, itemnum_),
  };
  QueryFoodNpcInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryFoodNpcInfo_descriptor_,
      QueryFoodNpcInfo::default_instance_,
      QueryFoodNpcInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryFoodNpcInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryFoodNpcInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryFoodNpcInfo));
  StartEat_descriptor_ = file->message_type(10);
  static const int StartEat_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartEat, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartEat, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartEat, npcguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartEat, pet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartEat, eatnum_),
  };
  StartEat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StartEat_descriptor_,
      StartEat::default_instance_,
      StartEat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartEat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartEat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StartEat));
  StopEat_descriptor_ = file->message_type(11);
  static const int StopEat_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopEat, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopEat, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopEat, npcguid_),
  };
  StopEat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StopEat_descriptor_,
      StopEat::default_instance_,
      StopEat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopEat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopEat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StopEat));
  EatProgressNtf_descriptor_ = file->message_type(12);
  static const int EatProgressNtf_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EatProgressNtf, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EatProgressNtf, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EatProgressNtf, progress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EatProgressNtf, npcguid_),
  };
  EatProgressNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EatProgressNtf_descriptor_,
      EatProgressNtf::default_instance_,
      EatProgressNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EatProgressNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EatProgressNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EatProgressNtf));
  FoodInfoNtf_descriptor_ = file->message_type(13);
  static const int FoodInfoNtf_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FoodInfoNtf, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FoodInfoNtf, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FoodInfoNtf, recipeids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FoodInfoNtf, last_cooked_foods_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FoodInfoNtf, eat_foods_),
  };
  FoodInfoNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FoodInfoNtf_descriptor_,
      FoodInfoNtf::default_instance_,
      FoodInfoNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FoodInfoNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FoodInfoNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FoodInfoNtf));
  UpdateFoodInfo_descriptor_ = file->message_type(14);
  static const int UpdateFoodInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFoodInfo, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFoodInfo, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFoodInfo, last_cooked_foods_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFoodInfo, eat_foods_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFoodInfo, del_eat_foods_),
  };
  UpdateFoodInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateFoodInfo_descriptor_,
      UpdateFoodInfo::default_instance_,
      UpdateFoodInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFoodInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFoodInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateFoodInfo));
  UnlockRecipeNtf_descriptor_ = file->message_type(15);
  static const int UnlockRecipeNtf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockRecipeNtf, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockRecipeNtf, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockRecipeNtf, recipe_),
  };
  UnlockRecipeNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnlockRecipeNtf_descriptor_,
      UnlockRecipeNtf::default_instance_,
      UnlockRecipeNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockRecipeNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockRecipeNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnlockRecipeNtf));
  FoodSubData_descriptor_ = file->message_type(16);
  static const int FoodSubData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FoodSubData, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FoodSubData, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FoodSubData, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FoodSubData, level_),
  };
  FoodSubData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FoodSubData_descriptor_,
      FoodSubData::default_instance_,
      FoodSubData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FoodSubData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FoodSubData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FoodSubData));
  FoodManualData_descriptor_ = file->message_type(17);
  static const int FoodManualData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FoodManualData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FoodManualData, datas_),
  };
  FoodManualData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FoodManualData_descriptor_,
      FoodManualData::default_instance_,
      FoodManualData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FoodManualData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FoodManualData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FoodManualData));
  QueryFoodManualData_descriptor_ = file->message_type(18);
  static const int QueryFoodManualData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryFoodManualData, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryFoodManualData, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryFoodManualData, cookerexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryFoodManualData, cookerlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryFoodManualData, tasterexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryFoodManualData, tasterlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryFoodManualData, items_),
  };
  QueryFoodManualData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryFoodManualData_descriptor_,
      QueryFoodManualData::default_instance_,
      QueryFoodManualData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryFoodManualData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryFoodManualData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryFoodManualData));
  NewFoodDataNtf_descriptor_ = file->message_type(19);
  static const int NewFoodDataNtf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewFoodDataNtf, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewFoodDataNtf, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewFoodDataNtf, items_),
  };
  NewFoodDataNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NewFoodDataNtf_descriptor_,
      NewFoodDataNtf::default_instance_,
      NewFoodDataNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewFoodDataNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewFoodDataNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NewFoodDataNtf));
  ClickFoodManualData_descriptor_ = file->message_type(20);
  static const int ClickFoodManualData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClickFoodManualData, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClickFoodManualData, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClickFoodManualData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClickFoodManualData, itemid_),
  };
  ClickFoodManualData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClickFoodManualData_descriptor_,
      ClickFoodManualData::default_instance_,
      ClickFoodManualData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClickFoodManualData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClickFoodManualData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClickFoodManualData));
  FoodParam_descriptor_ = file->enum_type(0);
  ECookType_descriptor_ = file->enum_type(1);
  ECookState_descriptor_ = file->enum_type(2);
  EEatPower_descriptor_ = file->enum_type(3);
  EFoodDataType_descriptor_ = file->enum_type(4);
  EFoodStatus_descriptor_ = file->enum_type(5);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SceneFood_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CookStateMsg_descriptor_, &CookStateMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CookStateNtf_descriptor_, &CookStateNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrepareCook_descriptor_, &PrepareCook::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SelectCookType_descriptor_, &SelectCookType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BriefItemInfo_descriptor_, &BriefItemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StartCook_descriptor_, &StartCook::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PutFood_descriptor_, &PutFood::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EditFoodPower_descriptor_, &EditFoodPower::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FoodItemInfo2_descriptor_, &FoodItemInfo2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryFoodNpcInfo_descriptor_, &QueryFoodNpcInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StartEat_descriptor_, &StartEat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StopEat_descriptor_, &StopEat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EatProgressNtf_descriptor_, &EatProgressNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FoodInfoNtf_descriptor_, &FoodInfoNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateFoodInfo_descriptor_, &UpdateFoodInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnlockRecipeNtf_descriptor_, &UnlockRecipeNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FoodSubData_descriptor_, &FoodSubData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FoodManualData_descriptor_, &FoodManualData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryFoodManualData_descriptor_, &QueryFoodManualData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NewFoodDataNtf_descriptor_, &NewFoodDataNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClickFoodManualData_descriptor_, &ClickFoodManualData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SceneFood_2eproto() {
  delete CookStateMsg::default_instance_;
  delete CookStateMsg_reflection_;
  delete CookStateNtf::default_instance_;
  delete CookStateNtf_reflection_;
  delete PrepareCook::default_instance_;
  delete PrepareCook_reflection_;
  delete SelectCookType::default_instance_;
  delete SelectCookType_reflection_;
  delete BriefItemInfo::default_instance_;
  delete BriefItemInfo_reflection_;
  delete StartCook::default_instance_;
  delete StartCook_reflection_;
  delete PutFood::default_instance_;
  delete PutFood_reflection_;
  delete EditFoodPower::default_instance_;
  delete EditFoodPower_reflection_;
  delete FoodItemInfo2::default_instance_;
  delete FoodItemInfo2_reflection_;
  delete QueryFoodNpcInfo::default_instance_;
  delete QueryFoodNpcInfo_reflection_;
  delete StartEat::default_instance_;
  delete StartEat_reflection_;
  delete StopEat::default_instance_;
  delete StopEat_reflection_;
  delete EatProgressNtf::default_instance_;
  delete EatProgressNtf_reflection_;
  delete FoodInfoNtf::default_instance_;
  delete FoodInfoNtf_reflection_;
  delete UpdateFoodInfo::default_instance_;
  delete UpdateFoodInfo_reflection_;
  delete UnlockRecipeNtf::default_instance_;
  delete UnlockRecipeNtf_reflection_;
  delete FoodSubData::default_instance_;
  delete FoodSubData_reflection_;
  delete FoodManualData::default_instance_;
  delete FoodManualData_reflection_;
  delete QueryFoodManualData::default_instance_;
  delete QueryFoodManualData_reflection_;
  delete NewFoodDataNtf::default_instance_;
  delete NewFoodDataNtf_reflection_;
  delete ClickFoodManualData::default_instance_;
  delete ClickFoodManualData_reflection_;
}

void protobuf_AddDesc_SceneFood_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Cmd::protobuf_AddDesc_xCmd_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017SceneFood.proto\022\003Cmd\032\nxCmd.proto\"\203\001\n\014C"
    "ookStateMsg\022\036\n\005state\030\001 \001(\0162\017.Cmd.ECookSt"
    "ate\022 \n\010cooktype\030\002 \001(\0162\016.Cmd.ECookType\022\020\n"
    "\010progress\030\003 \001(\r\022\017\n\007success\030\004 \001(\010\022\016\n\006food"
    "id\030\005 \003(\r\"\256\001\n\014CookStateNtf\0223\n\003cmd\030\001 \001(\0162\014"
    ".Cmd.Command:\030SCENE_USER_FOOD_PROTOCMD\0227"
    "\n\005param\030\002 \001(\0162\016.Cmd.FoodParam:\030FOODPARAM"
    "_COOK_STATE_NTF\022 \n\005state\030\003 \001(\0132\021.Cmd.Coo"
    "kStateMsg\022\016\n\006charid\030\004 \001(\004\"\215\001\n\013PrepareCoo"
    "k\0223\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\030SCENE_USER"
    "_FOOD_PROTOCMD\0224\n\005param\030\002 \001(\0162\016.Cmd.Food"
    "Param:\025FOODPARAM_PREPARECOOK\022\023\n\005start\030\003 "
    "\001(\010:\004true\"\241\001\n\016SelectCookType\0223\n\003cmd\030\001 \001("
    "\0162\014.Cmd.Command:\030SCENE_USER_FOOD_PROTOCM"
    "D\0228\n\005param\030\002 \001(\0162\016.Cmd.FoodParam:\031FOODPA"
    "RAM_SELECT_COOKTYPE\022 \n\010cooktype\030\003 \001(\0162\016."
    "Cmd.ECookType\":\n\rBriefItemInfo\022\014\n\004guid\030\001"
    " \001(\t\022\016\n\006itemid\030\002 \001(\r\022\013\n\003num\030\003 \001(\r\"\374\001\n\tSt"
    "artCook\0223\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\030SCEN"
    "E_USER_FOOD_PROTOCMD\0223\n\005param\030\002 \001(\0162\016.Cm"
    "d.FoodParam:\024FOODPARAM_START_COOK\022 \n\010coo"
    "ktype\030\003 \001(\0162\016.Cmd.ECookType\022$\n\010material\030"
    "\004 \003(\0132\022.Cmd.BriefItemInfo\022\016\n\006recipe\030\005 \001("
    "\r\022\034\n\rskipanimation\030\006 \001(\010:\005false\022\017\n\007recip"
    "es\030\007 \003(\r\"\312\001\n\007PutFood\0223\n\003cmd\030\001 \001(\0162\014.Cmd."
    "Command:\030SCENE_USER_FOOD_PROTOCMD\0221\n\005par"
    "am\030\002 \001(\0162\016.Cmd.FoodParam:\022FOODPARAM_PUT_"
    "FOOD\022\020\n\010foodguid\030\003 \001(\t\022\035\n\005power\030\004 \001(\0162\016."
    "Cmd.EEatPower\022\017\n\007foodnum\030\005 \001(\r\022\025\n\006peteat"
    "\030\006 \001(\010:\005false\"\256\001\n\rEditFoodPower\0223\n\003cmd\030\001"
    " \001(\0162\014.Cmd.Command:\030SCENE_USER_FOOD_PROT"
    "OCMD\0228\n\005param\030\002 \001(\0162\016.Cmd.FoodParam:\031FOO"
    "DPARAM_EDIT_FOOD_POWER\022\017\n\007npcguid\030\003 \001(\004\022"
    "\035\n\005power\030\004 \001(\0162\016.Cmd.EEatPower\"5\n\rFoodIt"
    "emInfo2\022\016\n\006itemid\030\001 \001(\r\022\024\n\014invalid_time\030"
    "\002 \001(\r\"\337\001\n\020QueryFoodNpcInfo\0223\n\003cmd\030\001 \001(\0162"
    "\014.Cmd.Command:\030SCENE_USER_FOOD_PROTOCMD\022"
    "<\n\005param\030\002 \001(\0162\016.Cmd.FoodParam:\035FOODPARA"
    "M_QUERY_FOOD_NPC_INFO\022\017\n\007npcguid\030\003 \001(\004\022\025"
    "\n\reating_people\030\004 \001(\r\022\016\n\006itemid\030\005 \001(\r\022\017\n"
    "\007ownerid\030\006 \001(\004\022\017\n\007itemnum\030\007 \001(\r\"\250\001\n\010Star"
    "tEat\0223\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\030SCENE_U"
    "SER_FOOD_PROTOCMD\0222\n\005param\030\002 \001(\0162\016.Cmd.F"
    "oodParam:\023FOODPARAM_START_EAT\022\017\n\007npcguid"
    "\030\003 \001(\004\022\022\n\003pet\030\004 \001(\010:\005false\022\016\n\006eatnum\030\005 \001"
    "(\r\"\202\001\n\007StopEat\0223\n\003cmd\030\001 \001(\0162\014.Cmd.Comman"
    "d:\030SCENE_USER_FOOD_PROTOCMD\0221\n\005param\030\002 \001"
    "(\0162\016.Cmd.FoodParam:\022FOODPARAM_STOP_EAT\022\017"
    "\n\007npcguid\030\003 \001(\004\"\243\001\n\016EatProgressNtf\0223\n\003cm"
    "d\030\001 \001(\0162\014.Cmd.Command:\030SCENE_USER_FOOD_P"
    "ROTOCMD\0229\n\005param\030\002 \001(\0162\016.Cmd.FoodParam:\032"
    "FOODPARAM_EAT_PROGRESS_NTF\022\020\n\010progress\030\003"
    " \001(\r\022\017\n\007npcguid\030\004 \001(\004\"\317\001\n\013FoodInfoNtf\0223\n"
    "\003cmd\030\001 \001(\0162\014.Cmd.Command:\030SCENE_USER_FOO"
    "D_PROTOCMD\0226\n\005param\030\002 \001(\0162\016.Cmd.FoodPara"
    "m:\027FOODPARAM_FOOD_INFO_NTF\022\021\n\trecipeids\030"
    "\003 \003(\r\022\031\n\021last_cooked_foods\030\004 \003(\r\022%\n\teat_"
    "foods\030\005 \003(\0132\022.Cmd.FoodItemInfo2\"\335\001\n\016Upda"
    "teFoodInfo\0223\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\030S"
    "CENE_USER_FOOD_PROTOCMD\022=\n\005param\030\002 \001(\0162\016"
    ".Cmd.FoodParam:\036FOODPARAM_UPDATE_FOOD_IN"
    "FO_NTF\022\031\n\021last_cooked_foods\030\004 \003(\r\022%\n\teat"
    "_foods\030\005 \003(\0132\022.Cmd.FoodItemInfo2\022\025\n\rdel_"
    "eat_foods\030\006 \003(\r\"\222\001\n\017UnlockRecipeNtf\0223\n\003c"
    "md\030\001 \001(\0162\014.Cmd.Command:\030SCENE_USER_FOOD_"
    "PROTOCMD\022:\n\005param\030\002 \001(\0162\016.Cmd.FoodParam:"
    "\033FOODPARAM_UNLOCK_RECIPE_NTF\022\016\n\006recipe\030\003"
    " \001(\r\"d\n\013FoodSubData\022 \n\006status\030\001 \001(\0162\020.Cm"
    "d.EFoodStatus\022\021\n\006itemid\030\002 \001(\r:\0010\022\016\n\003exp\030"
    "\003 \001(\r:\0010\022\020\n\005level\030\004 \001(\r:\0010\"f\n\016FoodManual"
    "Data\0223\n\004type\030\001 \001(\0162\022.Cmd.EFoodDataType:\021"
    "EFOODDATATYPE_MIN\022\037\n\005datas\030\002 \003(\0132\020.Cmd.F"
    "oodSubData\"\362\001\n\023QueryFoodManualData\0223\n\003cm"
    "d\030\001 \001(\0162\014.Cmd.Command:\030SCENE_USER_FOOD_P"
    "ROTOCMD\0228\n\005param\030\002 \001(\0162\016.Cmd.FoodParam:\031"
    "FOODPARAM_QUERY_FOOD_DATA\022\021\n\tcookerexp\030\003"
    " \001(\r\022\020\n\010cookerlv\030\004 \001(\r\022\021\n\ttasterexp\030\005 \001("
    "\r\022\020\n\010tasterlv\030\006 \001(\r\022\"\n\005items\030\007 \003(\0132\023.Cmd"
    ".FoodManualData\"\245\001\n\016NewFoodDataNtf\0223\n\003cm"
    "d\030\001 \001(\0162\014.Cmd.Command:\030SCENE_USER_FOOD_P"
    "ROTOCMD\022:\n\005param\030\002 \001(\0162\016.Cmd.FoodParam:\033"
    "FOODPARAM_NEW_FOOD_DATA_NTF\022\"\n\005items\030\003 \003"
    "(\0132\023.Cmd.FoodManualData\"\275\001\n\023ClickFoodMan"
    "ualData\0223\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\030SCEN"
    "E_USER_FOOD_PROTOCMD\022\?\n\005param\030\002 \001(\0162\016.Cm"
    "d.FoodParam: FOODPARAM_CLICK_FOOD_MANUAL"
    "_DATA\022 \n\004type\030\003 \001(\0162\022.Cmd.EFoodDataType\022"
    "\016\n\006itemid\030\004 \001(\r*\360\003\n\tFoodParam\022\034\n\030FOODPAR"
    "AM_COOK_STATE_NTF\020\001\022\031\n\025FOODPARAM_PREPARE"
    "COOK\020\002\022\035\n\031FOODPARAM_SELECT_COOKTYPE\020\003\022\030\n"
    "\024FOODPARAM_START_COOK\020\004\022\026\n\022FOODPARAM_PUT"
    "_FOOD\020\005\022\035\n\031FOODPARAM_EDIT_FOOD_POWER\020\006\022\036"
    "\n\032FOODPARAM_EAT_PROGRESS_NTF\020\007\022!\n\035FOODPA"
    "RAM_QUERY_FOOD_NPC_INFO\020\010\022\027\n\023FOODPARAM_S"
    "TART_EAT\020\t\022\026\n\022FOODPARAM_STOP_EAT\020\n\022\033\n\027FO"
    "ODPARAM_FOOD_INFO_NTF\020\013\022\037\n\033FOODPARAM_UNL"
    "OCK_RECIPE_NTF\020\014\022\035\n\031FOODPARAM_QUERY_FOOD"
    "_DATA\020\r\022\037\n\033FOODPARAM_NEW_FOOD_DATA_NTF\020\016"
    "\022$\n FOODPARAM_CLICK_FOOD_MANUAL_DATA\020\017\022\""
    "\n\036FOODPARAM_UPDATE_FOOD_INFO_NTF\020\020*\214\001\n\tE"
    "CookType\022\021\n\rECOOKTYPE_MIN\020\000\022\026\n\022ECOOKTYPE"
    "_JIANCHAO\020\001\022\026\n\022ECOOKTYPE_BARBECUE\020\002\022\022\n\016E"
    "COOKTYPE_SOUP\020\003\022\025\n\021ECOOKTYPE_DESSERT\020\004\022\021"
    "\n\rECOOKTYPE_MAX\020\005*m\n\nECookState\022\023\n\017ECOOK"
    "STATE_NONE\020\000\022\031\n\025ECOOKSTATE_PREPAREING\020\001\022"
    "\026\n\022ECOOKSTATE_COOKING\020\002\022\027\n\023ECOOKSTATE_CO"
    "MPLETE\020\003*C\n\tEEatPower\022\021\n\rEEATPOWR_SELF\020\001"
    "\022\021\n\rEEATPOWR_TEAM\020\002\022\020\n\014EEATPOWR_ALL\020\003*\222\001"
    "\n\rEFoodDataType\022\025\n\021EFOODDATATYPE_MIN\020\000\022\032"
    "\n\026EFOODDATATYPE_MATERIAL\020\001\022\032\n\026EFOODDATAT"
    "YPE_FOODCOOK\020\002\022\033\n\027EFOODDATATYPE_FOODTAST"
    "E\020\003\022\025\n\021EFOODDATATYPE_MAX\020\004*e\n\013EFoodStatu"
    "s\022\023\n\017EFOODSTATUS_MIN\020\000\022\023\n\017EFOODSTATUS_AD"
    "D\020\001\022\027\n\023EFOODSTATUS_CLICKED\020\002\022\023\n\017EFOODSTA"
    "TUS_MAX\020\003", 4569);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SceneFood.proto", &protobuf_RegisterTypes);
  CookStateMsg::default_instance_ = new CookStateMsg();
  CookStateNtf::default_instance_ = new CookStateNtf();
  PrepareCook::default_instance_ = new PrepareCook();
  SelectCookType::default_instance_ = new SelectCookType();
  BriefItemInfo::default_instance_ = new BriefItemInfo();
  StartCook::default_instance_ = new StartCook();
  PutFood::default_instance_ = new PutFood();
  EditFoodPower::default_instance_ = new EditFoodPower();
  FoodItemInfo2::default_instance_ = new FoodItemInfo2();
  QueryFoodNpcInfo::default_instance_ = new QueryFoodNpcInfo();
  StartEat::default_instance_ = new StartEat();
  StopEat::default_instance_ = new StopEat();
  EatProgressNtf::default_instance_ = new EatProgressNtf();
  FoodInfoNtf::default_instance_ = new FoodInfoNtf();
  UpdateFoodInfo::default_instance_ = new UpdateFoodInfo();
  UnlockRecipeNtf::default_instance_ = new UnlockRecipeNtf();
  FoodSubData::default_instance_ = new FoodSubData();
  FoodManualData::default_instance_ = new FoodManualData();
  QueryFoodManualData::default_instance_ = new QueryFoodManualData();
  NewFoodDataNtf::default_instance_ = new NewFoodDataNtf();
  ClickFoodManualData::default_instance_ = new ClickFoodManualData();
  CookStateMsg::default_instance_->InitAsDefaultInstance();
  CookStateNtf::default_instance_->InitAsDefaultInstance();
  PrepareCook::default_instance_->InitAsDefaultInstance();
  SelectCookType::default_instance_->InitAsDefaultInstance();
  BriefItemInfo::default_instance_->InitAsDefaultInstance();
  StartCook::default_instance_->InitAsDefaultInstance();
  PutFood::default_instance_->InitAsDefaultInstance();
  EditFoodPower::default_instance_->InitAsDefaultInstance();
  FoodItemInfo2::default_instance_->InitAsDefaultInstance();
  QueryFoodNpcInfo::default_instance_->InitAsDefaultInstance();
  StartEat::default_instance_->InitAsDefaultInstance();
  StopEat::default_instance_->InitAsDefaultInstance();
  EatProgressNtf::default_instance_->InitAsDefaultInstance();
  FoodInfoNtf::default_instance_->InitAsDefaultInstance();
  UpdateFoodInfo::default_instance_->InitAsDefaultInstance();
  UnlockRecipeNtf::default_instance_->InitAsDefaultInstance();
  FoodSubData::default_instance_->InitAsDefaultInstance();
  FoodManualData::default_instance_->InitAsDefaultInstance();
  QueryFoodManualData::default_instance_->InitAsDefaultInstance();
  NewFoodDataNtf::default_instance_->InitAsDefaultInstance();
  ClickFoodManualData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SceneFood_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SceneFood_2eproto {
  StaticDescriptorInitializer_SceneFood_2eproto() {
    protobuf_AddDesc_SceneFood_2eproto();
  }
} static_descriptor_initializer_SceneFood_2eproto_;
const ::google::protobuf::EnumDescriptor* FoodParam_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FoodParam_descriptor_;
}
bool FoodParam_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ECookType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ECookType_descriptor_;
}
bool ECookType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ECookState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ECookState_descriptor_;
}
bool ECookState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EEatPower_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EEatPower_descriptor_;
}
bool EEatPower_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EFoodDataType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EFoodDataType_descriptor_;
}
bool EFoodDataType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EFoodStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EFoodStatus_descriptor_;
}
bool EFoodStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CookStateMsg::kStateFieldNumber;
const int CookStateMsg::kCooktypeFieldNumber;
const int CookStateMsg::kProgressFieldNumber;
const int CookStateMsg::kSuccessFieldNumber;
const int CookStateMsg::kFoodidFieldNumber;
#endif  // !_MSC_VER

CookStateMsg::CookStateMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.CookStateMsg)
}

void CookStateMsg::InitAsDefaultInstance() {
}

CookStateMsg::CookStateMsg(const CookStateMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.CookStateMsg)
}

void CookStateMsg::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  cooktype_ = 0;
  progress_ = 0u;
  success_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CookStateMsg::~CookStateMsg() {
  // @@protoc_insertion_point(destructor:Cmd.CookStateMsg)
  SharedDtor();
}

void CookStateMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CookStateMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CookStateMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CookStateMsg_descriptor_;
}

const CookStateMsg& CookStateMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneFood_2eproto();
  return *default_instance_;
}

CookStateMsg* CookStateMsg::default_instance_ = NULL;

CookStateMsg* CookStateMsg::New() const {
  return new CookStateMsg;
}

void CookStateMsg::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CookStateMsg*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(state_, success_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  foodid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CookStateMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.CookStateMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.ECookState state = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ECookState_IsValid(value)) {
            set_state(static_cast< ::Cmd::ECookState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cooktype;
        break;
      }

      // optional .Cmd.ECookType cooktype = 2;
      case 2: {
        if (tag == 16) {
         parse_cooktype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ECookType_IsValid(value)) {
            set_cooktype(static_cast< ::Cmd::ECookType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_progress;
        break;
      }

      // optional uint32 progress = 3;
      case 3: {
        if (tag == 24) {
         parse_progress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &progress_)));
          set_has_progress();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_success;
        break;
      }

      // optional bool success = 4;
      case 4: {
        if (tag == 32) {
         parse_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_foodid;
        break;
      }

      // repeated uint32 foodid = 5;
      case 5: {
        if (tag == 40) {
         parse_foodid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_foodid())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_foodid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_foodid;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.CookStateMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.CookStateMsg)
  return false;
#undef DO_
}

void CookStateMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.CookStateMsg)
  // optional .Cmd.ECookState state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  // optional .Cmd.ECookType cooktype = 2;
  if (has_cooktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->cooktype(), output);
  }

  // optional uint32 progress = 3;
  if (has_progress()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->progress(), output);
  }

  // optional bool success = 4;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->success(), output);
  }

  // repeated uint32 foodid = 5;
  for (int i = 0; i < this->foodid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->foodid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.CookStateMsg)
}

::google::protobuf::uint8* CookStateMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.CookStateMsg)
  // optional .Cmd.ECookState state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }

  // optional .Cmd.ECookType cooktype = 2;
  if (has_cooktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->cooktype(), target);
  }

  // optional uint32 progress = 3;
  if (has_progress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->progress(), target);
  }

  // optional bool success = 4;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->success(), target);
  }

  // repeated uint32 foodid = 5;
  for (int i = 0; i < this->foodid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->foodid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.CookStateMsg)
  return target;
}

int CookStateMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.ECookState state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional .Cmd.ECookType cooktype = 2;
    if (has_cooktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cooktype());
    }

    // optional uint32 progress = 3;
    if (has_progress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->progress());
    }

    // optional bool success = 4;
    if (has_success()) {
      total_size += 1 + 1;
    }

  }
  // repeated uint32 foodid = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->foodid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->foodid(i));
    }
    total_size += 1 * this->foodid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CookStateMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CookStateMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CookStateMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CookStateMsg::MergeFrom(const CookStateMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  foodid_.MergeFrom(from.foodid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_cooktype()) {
      set_cooktype(from.cooktype());
    }
    if (from.has_progress()) {
      set_progress(from.progress());
    }
    if (from.has_success()) {
      set_success(from.success());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CookStateMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CookStateMsg::CopyFrom(const CookStateMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CookStateMsg::IsInitialized() const {

  return true;
}

void CookStateMsg::Swap(CookStateMsg* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(cooktype_, other->cooktype_);
    std::swap(progress_, other->progress_);
    std::swap(success_, other->success_);
    foodid_.Swap(&other->foodid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CookStateMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CookStateMsg_descriptor_;
  metadata.reflection = CookStateMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CookStateNtf::kCmdFieldNumber;
const int CookStateNtf::kParamFieldNumber;
const int CookStateNtf::kStateFieldNumber;
const int CookStateNtf::kCharidFieldNumber;
#endif  // !_MSC_VER

CookStateNtf::CookStateNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.CookStateNtf)
}

void CookStateNtf::InitAsDefaultInstance() {
  state_ = const_cast< ::Cmd::CookStateMsg*>(&::Cmd::CookStateMsg::default_instance());
}

CookStateNtf::CookStateNtf(const CookStateNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.CookStateNtf)
}

void CookStateNtf::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 29;
  param_ = 1;
  state_ = NULL;
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CookStateNtf::~CookStateNtf() {
  // @@protoc_insertion_point(destructor:Cmd.CookStateNtf)
  SharedDtor();
}

void CookStateNtf::SharedDtor() {
  if (this != default_instance_) {
    delete state_;
  }
}

void CookStateNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CookStateNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CookStateNtf_descriptor_;
}

const CookStateNtf& CookStateNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneFood_2eproto();
  return *default_instance_;
}

CookStateNtf* CookStateNtf::default_instance_ = NULL;

CookStateNtf* CookStateNtf::New() const {
  return new CookStateNtf;
}

void CookStateNtf::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 29;
    param_ = 1;
    if (has_state()) {
      if (state_ != NULL) state_->::Cmd::CookStateMsg::Clear();
    }
    charid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CookStateNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.CookStateNtf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.FoodParam param = 2 [default = FOODPARAM_COOK_STATE_NTF];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::FoodParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::FoodParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_state;
        break;
      }

      // optional .Cmd.CookStateMsg state = 3;
      case 3: {
        if (tag == 26) {
         parse_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 4;
      case 4: {
        if (tag == 32) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.CookStateNtf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.CookStateNtf)
  return false;
#undef DO_
}

void CookStateNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.CookStateNtf)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.FoodParam param = 2 [default = FOODPARAM_COOK_STATE_NTF];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.CookStateMsg state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->state(), output);
  }

  // optional uint64 charid = 4;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.CookStateNtf)
}

::google::protobuf::uint8* CookStateNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.CookStateNtf)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.FoodParam param = 2 [default = FOODPARAM_COOK_STATE_NTF];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.CookStateMsg state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->state(), target);
  }

  // optional uint64 charid = 4;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.CookStateNtf)
  return target;
}

int CookStateNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.FoodParam param = 2 [default = FOODPARAM_COOK_STATE_NTF];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.CookStateMsg state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->state());
    }

    // optional uint64 charid = 4;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CookStateNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CookStateNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CookStateNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CookStateNtf::MergeFrom(const CookStateNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_state()) {
      mutable_state()->::Cmd::CookStateMsg::MergeFrom(from.state());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CookStateNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CookStateNtf::CopyFrom(const CookStateNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CookStateNtf::IsInitialized() const {

  return true;
}

void CookStateNtf::Swap(CookStateNtf* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(state_, other->state_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CookStateNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CookStateNtf_descriptor_;
  metadata.reflection = CookStateNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrepareCook::kCmdFieldNumber;
const int PrepareCook::kParamFieldNumber;
const int PrepareCook::kStartFieldNumber;
#endif  // !_MSC_VER

PrepareCook::PrepareCook()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.PrepareCook)
}

void PrepareCook::InitAsDefaultInstance() {
}

PrepareCook::PrepareCook(const PrepareCook& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.PrepareCook)
}

void PrepareCook::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 29;
  param_ = 2;
  start_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrepareCook::~PrepareCook() {
  // @@protoc_insertion_point(destructor:Cmd.PrepareCook)
  SharedDtor();
}

void PrepareCook::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PrepareCook::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrepareCook::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrepareCook_descriptor_;
}

const PrepareCook& PrepareCook::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneFood_2eproto();
  return *default_instance_;
}

PrepareCook* PrepareCook::default_instance_ = NULL;

PrepareCook* PrepareCook::New() const {
  return new PrepareCook;
}

void PrepareCook::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 29;
    param_ = 2;
    start_ = true;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrepareCook::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.PrepareCook)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.FoodParam param = 2 [default = FOODPARAM_PREPARECOOK];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::FoodParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::FoodParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_start;
        break;
      }

      // optional bool start = 3 [default = true];
      case 3: {
        if (tag == 24) {
         parse_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &start_)));
          set_has_start();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.PrepareCook)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.PrepareCook)
  return false;
#undef DO_
}

void PrepareCook::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.PrepareCook)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.FoodParam param = 2 [default = FOODPARAM_PREPARECOOK];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional bool start = 3 [default = true];
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->start(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.PrepareCook)
}

::google::protobuf::uint8* PrepareCook::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.PrepareCook)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.FoodParam param = 2 [default = FOODPARAM_PREPARECOOK];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional bool start = 3 [default = true];
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->start(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.PrepareCook)
  return target;
}

int PrepareCook::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.FoodParam param = 2 [default = FOODPARAM_PREPARECOOK];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional bool start = 3 [default = true];
    if (has_start()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrepareCook::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrepareCook* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrepareCook*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrepareCook::MergeFrom(const PrepareCook& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_start()) {
      set_start(from.start());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrepareCook::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrepareCook::CopyFrom(const PrepareCook& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrepareCook::IsInitialized() const {

  return true;
}

void PrepareCook::Swap(PrepareCook* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(start_, other->start_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrepareCook::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrepareCook_descriptor_;
  metadata.reflection = PrepareCook_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SelectCookType::kCmdFieldNumber;
const int SelectCookType::kParamFieldNumber;
const int SelectCookType::kCooktypeFieldNumber;
#endif  // !_MSC_VER

SelectCookType::SelectCookType()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SelectCookType)
}

void SelectCookType::InitAsDefaultInstance() {
}

SelectCookType::SelectCookType(const SelectCookType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SelectCookType)
}

void SelectCookType::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 29;
  param_ = 3;
  cooktype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SelectCookType::~SelectCookType() {
  // @@protoc_insertion_point(destructor:Cmd.SelectCookType)
  SharedDtor();
}

void SelectCookType::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SelectCookType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SelectCookType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SelectCookType_descriptor_;
}

const SelectCookType& SelectCookType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneFood_2eproto();
  return *default_instance_;
}

SelectCookType* SelectCookType::default_instance_ = NULL;

SelectCookType* SelectCookType::New() const {
  return new SelectCookType;
}

void SelectCookType::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 29;
    param_ = 3;
    cooktype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SelectCookType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SelectCookType)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.FoodParam param = 2 [default = FOODPARAM_SELECT_COOKTYPE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::FoodParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::FoodParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cooktype;
        break;
      }

      // optional .Cmd.ECookType cooktype = 3;
      case 3: {
        if (tag == 24) {
         parse_cooktype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ECookType_IsValid(value)) {
            set_cooktype(static_cast< ::Cmd::ECookType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SelectCookType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SelectCookType)
  return false;
#undef DO_
}

void SelectCookType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SelectCookType)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.FoodParam param = 2 [default = FOODPARAM_SELECT_COOKTYPE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.ECookType cooktype = 3;
  if (has_cooktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->cooktype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SelectCookType)
}

::google::protobuf::uint8* SelectCookType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SelectCookType)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.FoodParam param = 2 [default = FOODPARAM_SELECT_COOKTYPE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.ECookType cooktype = 3;
  if (has_cooktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->cooktype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SelectCookType)
  return target;
}

int SelectCookType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.FoodParam param = 2 [default = FOODPARAM_SELECT_COOKTYPE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.ECookType cooktype = 3;
    if (has_cooktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cooktype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SelectCookType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SelectCookType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SelectCookType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SelectCookType::MergeFrom(const SelectCookType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_cooktype()) {
      set_cooktype(from.cooktype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SelectCookType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelectCookType::CopyFrom(const SelectCookType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectCookType::IsInitialized() const {

  return true;
}

void SelectCookType::Swap(SelectCookType* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(cooktype_, other->cooktype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SelectCookType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SelectCookType_descriptor_;
  metadata.reflection = SelectCookType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BriefItemInfo::kGuidFieldNumber;
const int BriefItemInfo::kItemidFieldNumber;
const int BriefItemInfo::kNumFieldNumber;
#endif  // !_MSC_VER

BriefItemInfo::BriefItemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BriefItemInfo)
}

void BriefItemInfo::InitAsDefaultInstance() {
}

BriefItemInfo::BriefItemInfo(const BriefItemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BriefItemInfo)
}

void BriefItemInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  itemid_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BriefItemInfo::~BriefItemInfo() {
  // @@protoc_insertion_point(destructor:Cmd.BriefItemInfo)
  SharedDtor();
}

void BriefItemInfo::SharedDtor() {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guid_;
  }
  if (this != default_instance_) {
  }
}

void BriefItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BriefItemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BriefItemInfo_descriptor_;
}

const BriefItemInfo& BriefItemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneFood_2eproto();
  return *default_instance_;
}

BriefItemInfo* BriefItemInfo::default_instance_ = NULL;

BriefItemInfo* BriefItemInfo::New() const {
  return new BriefItemInfo;
}

void BriefItemInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BriefItemInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(itemid_, num_);
    if (has_guid()) {
      if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BriefItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BriefItemInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string guid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guid().data(), this->guid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_itemid;
        break;
      }

      // optional uint32 itemid = 2;
      case 2: {
        if (tag == 16) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional uint32 num = 3;
      case 3: {
        if (tag == 24) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BriefItemInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BriefItemInfo)
  return false;
#undef DO_
}

void BriefItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BriefItemInfo)
  // optional string guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->guid(), output);
  }

  // optional uint32 itemid = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->itemid(), output);
  }

  // optional uint32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BriefItemInfo)
}

::google::protobuf::uint8* BriefItemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BriefItemInfo)
  // optional string guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->guid(), target);
  }

  // optional uint32 itemid = 2;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->itemid(), target);
  }

  // optional uint32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BriefItemInfo)
  return target;
}

int BriefItemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guid());
    }

    // optional uint32 itemid = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BriefItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BriefItemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BriefItemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BriefItemInfo::MergeFrom(const BriefItemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BriefItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BriefItemInfo::CopyFrom(const BriefItemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BriefItemInfo::IsInitialized() const {

  return true;
}

void BriefItemInfo::Swap(BriefItemInfo* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(itemid_, other->itemid_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BriefItemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BriefItemInfo_descriptor_;
  metadata.reflection = BriefItemInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StartCook::kCmdFieldNumber;
const int StartCook::kParamFieldNumber;
const int StartCook::kCooktypeFieldNumber;
const int StartCook::kMaterialFieldNumber;
const int StartCook::kRecipeFieldNumber;
const int StartCook::kSkipanimationFieldNumber;
const int StartCook::kRecipesFieldNumber;
#endif  // !_MSC_VER

StartCook::StartCook()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.StartCook)
}

void StartCook::InitAsDefaultInstance() {
}

StartCook::StartCook(const StartCook& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.StartCook)
}

void StartCook::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 29;
  param_ = 4;
  cooktype_ = 0;
  recipe_ = 0u;
  skipanimation_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StartCook::~StartCook() {
  // @@protoc_insertion_point(destructor:Cmd.StartCook)
  SharedDtor();
}

void StartCook::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StartCook::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartCook::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StartCook_descriptor_;
}

const StartCook& StartCook::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneFood_2eproto();
  return *default_instance_;
}

StartCook* StartCook::default_instance_ = NULL;

StartCook* StartCook::New() const {
  return new StartCook;
}

void StartCook::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StartCook*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 55) {
    ZR_(cooktype_, recipe_);
    cmd_ = 29;
    param_ = 4;
    skipanimation_ = false;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  material_.Clear();
  recipes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StartCook::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.StartCook)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.FoodParam param = 2 [default = FOODPARAM_START_COOK];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::FoodParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::FoodParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cooktype;
        break;
      }

      // optional .Cmd.ECookType cooktype = 3;
      case 3: {
        if (tag == 24) {
         parse_cooktype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ECookType_IsValid(value)) {
            set_cooktype(static_cast< ::Cmd::ECookType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_material;
        break;
      }

      // repeated .Cmd.BriefItemInfo material = 4;
      case 4: {
        if (tag == 34) {
         parse_material:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_material()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_material;
        if (input->ExpectTag(40)) goto parse_recipe;
        break;
      }

      // optional uint32 recipe = 5;
      case 5: {
        if (tag == 40) {
         parse_recipe:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recipe_)));
          set_has_recipe();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_skipanimation;
        break;
      }

      // optional bool skipanimation = 6 [default = false];
      case 6: {
        if (tag == 48) {
         parse_skipanimation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &skipanimation_)));
          set_has_skipanimation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_recipes;
        break;
      }

      // repeated uint32 recipes = 7;
      case 7: {
        if (tag == 56) {
         parse_recipes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56, input, this->mutable_recipes())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_recipes())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_recipes;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.StartCook)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.StartCook)
  return false;
#undef DO_
}

void StartCook::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.StartCook)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.FoodParam param = 2 [default = FOODPARAM_START_COOK];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.ECookType cooktype = 3;
  if (has_cooktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->cooktype(), output);
  }

  // repeated .Cmd.BriefItemInfo material = 4;
  for (int i = 0; i < this->material_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->material(i), output);
  }

  // optional uint32 recipe = 5;
  if (has_recipe()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->recipe(), output);
  }

  // optional bool skipanimation = 6 [default = false];
  if (has_skipanimation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->skipanimation(), output);
  }

  // repeated uint32 recipes = 7;
  for (int i = 0; i < this->recipes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->recipes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.StartCook)
}

::google::protobuf::uint8* StartCook::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.StartCook)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.FoodParam param = 2 [default = FOODPARAM_START_COOK];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.ECookType cooktype = 3;
  if (has_cooktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->cooktype(), target);
  }

  // repeated .Cmd.BriefItemInfo material = 4;
  for (int i = 0; i < this->material_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->material(i), target);
  }

  // optional uint32 recipe = 5;
  if (has_recipe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->recipe(), target);
  }

  // optional bool skipanimation = 6 [default = false];
  if (has_skipanimation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->skipanimation(), target);
  }

  // repeated uint32 recipes = 7;
  for (int i = 0; i < this->recipes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(7, this->recipes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.StartCook)
  return target;
}

int StartCook::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.FoodParam param = 2 [default = FOODPARAM_START_COOK];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.ECookType cooktype = 3;
    if (has_cooktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cooktype());
    }

    // optional uint32 recipe = 5;
    if (has_recipe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recipe());
    }

    // optional bool skipanimation = 6 [default = false];
    if (has_skipanimation()) {
      total_size += 1 + 1;
    }

  }
  // repeated .Cmd.BriefItemInfo material = 4;
  total_size += 1 * this->material_size();
  for (int i = 0; i < this->material_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->material(i));
  }

  // repeated uint32 recipes = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->recipes_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->recipes(i));
    }
    total_size += 1 * this->recipes_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartCook::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StartCook* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StartCook*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StartCook::MergeFrom(const StartCook& from) {
  GOOGLE_CHECK_NE(&from, this);
  material_.MergeFrom(from.material_);
  recipes_.MergeFrom(from.recipes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_cooktype()) {
      set_cooktype(from.cooktype());
    }
    if (from.has_recipe()) {
      set_recipe(from.recipe());
    }
    if (from.has_skipanimation()) {
      set_skipanimation(from.skipanimation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StartCook::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartCook::CopyFrom(const StartCook& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartCook::IsInitialized() const {

  return true;
}

void StartCook::Swap(StartCook* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(cooktype_, other->cooktype_);
    material_.Swap(&other->material_);
    std::swap(recipe_, other->recipe_);
    std::swap(skipanimation_, other->skipanimation_);
    recipes_.Swap(&other->recipes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StartCook::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StartCook_descriptor_;
  metadata.reflection = StartCook_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PutFood::kCmdFieldNumber;
const int PutFood::kParamFieldNumber;
const int PutFood::kFoodguidFieldNumber;
const int PutFood::kPowerFieldNumber;
const int PutFood::kFoodnumFieldNumber;
const int PutFood::kPeteatFieldNumber;
#endif  // !_MSC_VER

PutFood::PutFood()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.PutFood)
}

void PutFood::InitAsDefaultInstance() {
}

PutFood::PutFood(const PutFood& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.PutFood)
}

void PutFood::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 29;
  param_ = 5;
  foodguid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  power_ = 1;
  foodnum_ = 0u;
  peteat_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PutFood::~PutFood() {
  // @@protoc_insertion_point(destructor:Cmd.PutFood)
  SharedDtor();
}

void PutFood::SharedDtor() {
  if (foodguid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete foodguid_;
  }
  if (this != default_instance_) {
  }
}

void PutFood::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PutFood::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PutFood_descriptor_;
}

const PutFood& PutFood::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneFood_2eproto();
  return *default_instance_;
}

PutFood* PutFood::default_instance_ = NULL;

PutFood* PutFood::New() const {
  return new PutFood;
}

void PutFood::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PutFood*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(foodnum_, peteat_);
    cmd_ = 29;
    param_ = 5;
    if (has_foodguid()) {
      if (foodguid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        foodguid_->clear();
      }
    }
    power_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PutFood::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.PutFood)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.FoodParam param = 2 [default = FOODPARAM_PUT_FOOD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::FoodParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::FoodParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_foodguid;
        break;
      }

      // optional string foodguid = 3;
      case 3: {
        if (tag == 26) {
         parse_foodguid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_foodguid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->foodguid().data(), this->foodguid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "foodguid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_power;
        break;
      }

      // optional .Cmd.EEatPower power = 4;
      case 4: {
        if (tag == 32) {
         parse_power:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EEatPower_IsValid(value)) {
            set_power(static_cast< ::Cmd::EEatPower >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_foodnum;
        break;
      }

      // optional uint32 foodnum = 5;
      case 5: {
        if (tag == 40) {
         parse_foodnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &foodnum_)));
          set_has_foodnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_peteat;
        break;
      }

      // optional bool peteat = 6 [default = false];
      case 6: {
        if (tag == 48) {
         parse_peteat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &peteat_)));
          set_has_peteat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.PutFood)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.PutFood)
  return false;
#undef DO_
}

void PutFood::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.PutFood)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.FoodParam param = 2 [default = FOODPARAM_PUT_FOOD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional string foodguid = 3;
  if (has_foodguid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->foodguid().data(), this->foodguid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "foodguid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->foodguid(), output);
  }

  // optional .Cmd.EEatPower power = 4;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->power(), output);
  }

  // optional uint32 foodnum = 5;
  if (has_foodnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->foodnum(), output);
  }

  // optional bool peteat = 6 [default = false];
  if (has_peteat()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->peteat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.PutFood)
}

::google::protobuf::uint8* PutFood::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.PutFood)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.FoodParam param = 2 [default = FOODPARAM_PUT_FOOD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional string foodguid = 3;
  if (has_foodguid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->foodguid().data(), this->foodguid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "foodguid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->foodguid(), target);
  }

  // optional .Cmd.EEatPower power = 4;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->power(), target);
  }

  // optional uint32 foodnum = 5;
  if (has_foodnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->foodnum(), target);
  }

  // optional bool peteat = 6 [default = false];
  if (has_peteat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->peteat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.PutFood)
  return target;
}

int PutFood::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.FoodParam param = 2 [default = FOODPARAM_PUT_FOOD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional string foodguid = 3;
    if (has_foodguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->foodguid());
    }

    // optional .Cmd.EEatPower power = 4;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->power());
    }

    // optional uint32 foodnum = 5;
    if (has_foodnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->foodnum());
    }

    // optional bool peteat = 6 [default = false];
    if (has_peteat()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PutFood::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PutFood* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PutFood*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PutFood::MergeFrom(const PutFood& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_foodguid()) {
      set_foodguid(from.foodguid());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_foodnum()) {
      set_foodnum(from.foodnum());
    }
    if (from.has_peteat()) {
      set_peteat(from.peteat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PutFood::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutFood::CopyFrom(const PutFood& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutFood::IsInitialized() const {

  return true;
}

void PutFood::Swap(PutFood* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(foodguid_, other->foodguid_);
    std::swap(power_, other->power_);
    std::swap(foodnum_, other->foodnum_);
    std::swap(peteat_, other->peteat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PutFood::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PutFood_descriptor_;
  metadata.reflection = PutFood_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EditFoodPower::kCmdFieldNumber;
const int EditFoodPower::kParamFieldNumber;
const int EditFoodPower::kNpcguidFieldNumber;
const int EditFoodPower::kPowerFieldNumber;
#endif  // !_MSC_VER

EditFoodPower::EditFoodPower()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.EditFoodPower)
}

void EditFoodPower::InitAsDefaultInstance() {
}

EditFoodPower::EditFoodPower(const EditFoodPower& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.EditFoodPower)
}

void EditFoodPower::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 29;
  param_ = 6;
  npcguid_ = GOOGLE_ULONGLONG(0);
  power_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EditFoodPower::~EditFoodPower() {
  // @@protoc_insertion_point(destructor:Cmd.EditFoodPower)
  SharedDtor();
}

void EditFoodPower::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EditFoodPower::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EditFoodPower::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EditFoodPower_descriptor_;
}

const EditFoodPower& EditFoodPower::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneFood_2eproto();
  return *default_instance_;
}

EditFoodPower* EditFoodPower::default_instance_ = NULL;

EditFoodPower* EditFoodPower::New() const {
  return new EditFoodPower;
}

void EditFoodPower::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 29;
    param_ = 6;
    npcguid_ = GOOGLE_ULONGLONG(0);
    power_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EditFoodPower::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.EditFoodPower)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.FoodParam param = 2 [default = FOODPARAM_EDIT_FOOD_POWER];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::FoodParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::FoodParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_npcguid;
        break;
      }

      // optional uint64 npcguid = 3;
      case 3: {
        if (tag == 24) {
         parse_npcguid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &npcguid_)));
          set_has_npcguid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_power;
        break;
      }

      // optional .Cmd.EEatPower power = 4;
      case 4: {
        if (tag == 32) {
         parse_power:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EEatPower_IsValid(value)) {
            set_power(static_cast< ::Cmd::EEatPower >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.EditFoodPower)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.EditFoodPower)
  return false;
#undef DO_
}

void EditFoodPower::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.EditFoodPower)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.FoodParam param = 2 [default = FOODPARAM_EDIT_FOOD_POWER];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 npcguid = 3;
  if (has_npcguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->npcguid(), output);
  }

  // optional .Cmd.EEatPower power = 4;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->power(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.EditFoodPower)
}

::google::protobuf::uint8* EditFoodPower::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.EditFoodPower)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.FoodParam param = 2 [default = FOODPARAM_EDIT_FOOD_POWER];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 npcguid = 3;
  if (has_npcguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->npcguid(), target);
  }

  // optional .Cmd.EEatPower power = 4;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->power(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.EditFoodPower)
  return target;
}

int EditFoodPower::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.FoodParam param = 2 [default = FOODPARAM_EDIT_FOOD_POWER];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 npcguid = 3;
    if (has_npcguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->npcguid());
    }

    // optional .Cmd.EEatPower power = 4;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->power());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EditFoodPower::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EditFoodPower* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EditFoodPower*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EditFoodPower::MergeFrom(const EditFoodPower& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_npcguid()) {
      set_npcguid(from.npcguid());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EditFoodPower::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EditFoodPower::CopyFrom(const EditFoodPower& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EditFoodPower::IsInitialized() const {

  return true;
}

void EditFoodPower::Swap(EditFoodPower* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(npcguid_, other->npcguid_);
    std::swap(power_, other->power_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EditFoodPower::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EditFoodPower_descriptor_;
  metadata.reflection = EditFoodPower_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FoodItemInfo2::kItemidFieldNumber;
const int FoodItemInfo2::kInvalidTimeFieldNumber;
#endif  // !_MSC_VER

FoodItemInfo2::FoodItemInfo2()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.FoodItemInfo2)
}

void FoodItemInfo2::InitAsDefaultInstance() {
}

FoodItemInfo2::FoodItemInfo2(const FoodItemInfo2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.FoodItemInfo2)
}

void FoodItemInfo2::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  invalid_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FoodItemInfo2::~FoodItemInfo2() {
  // @@protoc_insertion_point(destructor:Cmd.FoodItemInfo2)
  SharedDtor();
}

void FoodItemInfo2::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FoodItemInfo2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FoodItemInfo2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FoodItemInfo2_descriptor_;
}

const FoodItemInfo2& FoodItemInfo2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneFood_2eproto();
  return *default_instance_;
}

FoodItemInfo2* FoodItemInfo2::default_instance_ = NULL;

FoodItemInfo2* FoodItemInfo2::New() const {
  return new FoodItemInfo2;
}

void FoodItemInfo2::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FoodItemInfo2*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(itemid_, invalid_time_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FoodItemInfo2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.FoodItemInfo2)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itemid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_invalid_time;
        break;
      }

      // optional uint32 invalid_time = 2;
      case 2: {
        if (tag == 16) {
         parse_invalid_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &invalid_time_)));
          set_has_invalid_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.FoodItemInfo2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.FoodItemInfo2)
  return false;
#undef DO_
}

void FoodItemInfo2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.FoodItemInfo2)
  // optional uint32 itemid = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }

  // optional uint32 invalid_time = 2;
  if (has_invalid_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->invalid_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.FoodItemInfo2)
}

::google::protobuf::uint8* FoodItemInfo2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.FoodItemInfo2)
  // optional uint32 itemid = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }

  // optional uint32 invalid_time = 2;
  if (has_invalid_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->invalid_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.FoodItemInfo2)
  return target;
}

int FoodItemInfo2::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 itemid = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 invalid_time = 2;
    if (has_invalid_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->invalid_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FoodItemInfo2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FoodItemInfo2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FoodItemInfo2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FoodItemInfo2::MergeFrom(const FoodItemInfo2& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_invalid_time()) {
      set_invalid_time(from.invalid_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FoodItemInfo2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FoodItemInfo2::CopyFrom(const FoodItemInfo2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FoodItemInfo2::IsInitialized() const {

  return true;
}

void FoodItemInfo2::Swap(FoodItemInfo2* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(invalid_time_, other->invalid_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FoodItemInfo2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FoodItemInfo2_descriptor_;
  metadata.reflection = FoodItemInfo2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryFoodNpcInfo::kCmdFieldNumber;
const int QueryFoodNpcInfo::kParamFieldNumber;
const int QueryFoodNpcInfo::kNpcguidFieldNumber;
const int QueryFoodNpcInfo::kEatingPeopleFieldNumber;
const int QueryFoodNpcInfo::kItemidFieldNumber;
const int QueryFoodNpcInfo::kOwneridFieldNumber;
const int QueryFoodNpcInfo::kItemnumFieldNumber;
#endif  // !_MSC_VER

QueryFoodNpcInfo::QueryFoodNpcInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QueryFoodNpcInfo)
}

void QueryFoodNpcInfo::InitAsDefaultInstance() {
}

QueryFoodNpcInfo::QueryFoodNpcInfo(const QueryFoodNpcInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QueryFoodNpcInfo)
}

void QueryFoodNpcInfo::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 29;
  param_ = 8;
  npcguid_ = GOOGLE_ULONGLONG(0);
  eating_people_ = 0u;
  itemid_ = 0u;
  ownerid_ = GOOGLE_ULONGLONG(0);
  itemnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryFoodNpcInfo::~QueryFoodNpcInfo() {
  // @@protoc_insertion_point(destructor:Cmd.QueryFoodNpcInfo)
  SharedDtor();
}

void QueryFoodNpcInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryFoodNpcInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryFoodNpcInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryFoodNpcInfo_descriptor_;
}

const QueryFoodNpcInfo& QueryFoodNpcInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneFood_2eproto();
  return *default_instance_;
}

QueryFoodNpcInfo* QueryFoodNpcInfo::default_instance_ = NULL;

QueryFoodNpcInfo* QueryFoodNpcInfo::New() const {
  return new QueryFoodNpcInfo;
}

void QueryFoodNpcInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<QueryFoodNpcInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(npcguid_, itemnum_);
    cmd_ = 29;
    param_ = 8;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryFoodNpcInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QueryFoodNpcInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.FoodParam param = 2 [default = FOODPARAM_QUERY_FOOD_NPC_INFO];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::FoodParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::FoodParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_npcguid;
        break;
      }

      // optional uint64 npcguid = 3;
      case 3: {
        if (tag == 24) {
         parse_npcguid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &npcguid_)));
          set_has_npcguid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_eating_people;
        break;
      }

      // optional uint32 eating_people = 4;
      case 4: {
        if (tag == 32) {
         parse_eating_people:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eating_people_)));
          set_has_eating_people();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_itemid;
        break;
      }

      // optional uint32 itemid = 5;
      case 5: {
        if (tag == 40) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_ownerid;
        break;
      }

      // optional uint64 ownerid = 6;
      case 6: {
        if (tag == 48) {
         parse_ownerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ownerid_)));
          set_has_ownerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_itemnum;
        break;
      }

      // optional uint32 itemnum = 7;
      case 7: {
        if (tag == 56) {
         parse_itemnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemnum_)));
          set_has_itemnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QueryFoodNpcInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QueryFoodNpcInfo)
  return false;
#undef DO_
}

void QueryFoodNpcInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QueryFoodNpcInfo)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.FoodParam param = 2 [default = FOODPARAM_QUERY_FOOD_NPC_INFO];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 npcguid = 3;
  if (has_npcguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->npcguid(), output);
  }

  // optional uint32 eating_people = 4;
  if (has_eating_people()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->eating_people(), output);
  }

  // optional uint32 itemid = 5;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->itemid(), output);
  }

  // optional uint64 ownerid = 6;
  if (has_ownerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->ownerid(), output);
  }

  // optional uint32 itemnum = 7;
  if (has_itemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->itemnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QueryFoodNpcInfo)
}

::google::protobuf::uint8* QueryFoodNpcInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QueryFoodNpcInfo)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.FoodParam param = 2 [default = FOODPARAM_QUERY_FOOD_NPC_INFO];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 npcguid = 3;
  if (has_npcguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->npcguid(), target);
  }

  // optional uint32 eating_people = 4;
  if (has_eating_people()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->eating_people(), target);
  }

  // optional uint32 itemid = 5;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->itemid(), target);
  }

  // optional uint64 ownerid = 6;
  if (has_ownerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->ownerid(), target);
  }

  // optional uint32 itemnum = 7;
  if (has_itemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->itemnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QueryFoodNpcInfo)
  return target;
}

int QueryFoodNpcInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.FoodParam param = 2 [default = FOODPARAM_QUERY_FOOD_NPC_INFO];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 npcguid = 3;
    if (has_npcguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->npcguid());
    }

    // optional uint32 eating_people = 4;
    if (has_eating_people()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eating_people());
    }

    // optional uint32 itemid = 5;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint64 ownerid = 6;
    if (has_ownerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ownerid());
    }

    // optional uint32 itemnum = 7;
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryFoodNpcInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryFoodNpcInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryFoodNpcInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryFoodNpcInfo::MergeFrom(const QueryFoodNpcInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_npcguid()) {
      set_npcguid(from.npcguid());
    }
    if (from.has_eating_people()) {
      set_eating_people(from.eating_people());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_ownerid()) {
      set_ownerid(from.ownerid());
    }
    if (from.has_itemnum()) {
      set_itemnum(from.itemnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryFoodNpcInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryFoodNpcInfo::CopyFrom(const QueryFoodNpcInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryFoodNpcInfo::IsInitialized() const {

  return true;
}

void QueryFoodNpcInfo::Swap(QueryFoodNpcInfo* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(npcguid_, other->npcguid_);
    std::swap(eating_people_, other->eating_people_);
    std::swap(itemid_, other->itemid_);
    std::swap(ownerid_, other->ownerid_);
    std::swap(itemnum_, other->itemnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryFoodNpcInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryFoodNpcInfo_descriptor_;
  metadata.reflection = QueryFoodNpcInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StartEat::kCmdFieldNumber;
const int StartEat::kParamFieldNumber;
const int StartEat::kNpcguidFieldNumber;
const int StartEat::kPetFieldNumber;
const int StartEat::kEatnumFieldNumber;
#endif  // !_MSC_VER

StartEat::StartEat()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.StartEat)
}

void StartEat::InitAsDefaultInstance() {
}

StartEat::StartEat(const StartEat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.StartEat)
}

void StartEat::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 29;
  param_ = 9;
  npcguid_ = GOOGLE_ULONGLONG(0);
  pet_ = false;
  eatnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StartEat::~StartEat() {
  // @@protoc_insertion_point(destructor:Cmd.StartEat)
  SharedDtor();
}

void StartEat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StartEat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartEat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StartEat_descriptor_;
}

const StartEat& StartEat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneFood_2eproto();
  return *default_instance_;
}

StartEat* StartEat::default_instance_ = NULL;

StartEat* StartEat::New() const {
  return new StartEat;
}

void StartEat::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StartEat*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(npcguid_, eatnum_);
    cmd_ = 29;
    param_ = 9;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StartEat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.StartEat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.FoodParam param = 2 [default = FOODPARAM_START_EAT];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::FoodParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::FoodParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_npcguid;
        break;
      }

      // optional uint64 npcguid = 3;
      case 3: {
        if (tag == 24) {
         parse_npcguid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &npcguid_)));
          set_has_npcguid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_pet;
        break;
      }

      // optional bool pet = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_pet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pet_)));
          set_has_pet();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_eatnum;
        break;
      }

      // optional uint32 eatnum = 5;
      case 5: {
        if (tag == 40) {
         parse_eatnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eatnum_)));
          set_has_eatnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.StartEat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.StartEat)
  return false;
#undef DO_
}

void StartEat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.StartEat)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.FoodParam param = 2 [default = FOODPARAM_START_EAT];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 npcguid = 3;
  if (has_npcguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->npcguid(), output);
  }

  // optional bool pet = 4 [default = false];
  if (has_pet()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->pet(), output);
  }

  // optional uint32 eatnum = 5;
  if (has_eatnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->eatnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.StartEat)
}

::google::protobuf::uint8* StartEat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.StartEat)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.FoodParam param = 2 [default = FOODPARAM_START_EAT];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 npcguid = 3;
  if (has_npcguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->npcguid(), target);
  }

  // optional bool pet = 4 [default = false];
  if (has_pet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->pet(), target);
  }

  // optional uint32 eatnum = 5;
  if (has_eatnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->eatnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.StartEat)
  return target;
}

int StartEat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.FoodParam param = 2 [default = FOODPARAM_START_EAT];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 npcguid = 3;
    if (has_npcguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->npcguid());
    }

    // optional bool pet = 4 [default = false];
    if (has_pet()) {
      total_size += 1 + 1;
    }

    // optional uint32 eatnum = 5;
    if (has_eatnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eatnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartEat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StartEat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StartEat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StartEat::MergeFrom(const StartEat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_npcguid()) {
      set_npcguid(from.npcguid());
    }
    if (from.has_pet()) {
      set_pet(from.pet());
    }
    if (from.has_eatnum()) {
      set_eatnum(from.eatnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StartEat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartEat::CopyFrom(const StartEat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartEat::IsInitialized() const {

  return true;
}

void StartEat::Swap(StartEat* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(npcguid_, other->npcguid_);
    std::swap(pet_, other->pet_);
    std::swap(eatnum_, other->eatnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StartEat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StartEat_descriptor_;
  metadata.reflection = StartEat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StopEat::kCmdFieldNumber;
const int StopEat::kParamFieldNumber;
const int StopEat::kNpcguidFieldNumber;
#endif  // !_MSC_VER

StopEat::StopEat()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.StopEat)
}

void StopEat::InitAsDefaultInstance() {
}

StopEat::StopEat(const StopEat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.StopEat)
}

void StopEat::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 29;
  param_ = 10;
  npcguid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StopEat::~StopEat() {
  // @@protoc_insertion_point(destructor:Cmd.StopEat)
  SharedDtor();
}

void StopEat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StopEat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StopEat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StopEat_descriptor_;
}

const StopEat& StopEat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneFood_2eproto();
  return *default_instance_;
}

StopEat* StopEat::default_instance_ = NULL;

StopEat* StopEat::New() const {
  return new StopEat;
}

void StopEat::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 29;
    param_ = 10;
    npcguid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StopEat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.StopEat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.FoodParam param = 2 [default = FOODPARAM_STOP_EAT];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::FoodParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::FoodParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_npcguid;
        break;
      }

      // optional uint64 npcguid = 3;
      case 3: {
        if (tag == 24) {
         parse_npcguid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &npcguid_)));
          set_has_npcguid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.StopEat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.StopEat)
  return false;
#undef DO_
}

void StopEat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.StopEat)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.FoodParam param = 2 [default = FOODPARAM_STOP_EAT];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 npcguid = 3;
  if (has_npcguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->npcguid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.StopEat)
}

::google::protobuf::uint8* StopEat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.StopEat)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.FoodParam param = 2 [default = FOODPARAM_STOP_EAT];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 npcguid = 3;
  if (has_npcguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->npcguid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.StopEat)
  return target;
}

int StopEat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.FoodParam param = 2 [default = FOODPARAM_STOP_EAT];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 npcguid = 3;
    if (has_npcguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->npcguid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StopEat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StopEat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StopEat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StopEat::MergeFrom(const StopEat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_npcguid()) {
      set_npcguid(from.npcguid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StopEat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopEat::CopyFrom(const StopEat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopEat::IsInitialized() const {

  return true;
}

void StopEat::Swap(StopEat* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(npcguid_, other->npcguid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StopEat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StopEat_descriptor_;
  metadata.reflection = StopEat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EatProgressNtf::kCmdFieldNumber;
const int EatProgressNtf::kParamFieldNumber;
const int EatProgressNtf::kProgressFieldNumber;
const int EatProgressNtf::kNpcguidFieldNumber;
#endif  // !_MSC_VER

EatProgressNtf::EatProgressNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.EatProgressNtf)
}

void EatProgressNtf::InitAsDefaultInstance() {
}

EatProgressNtf::EatProgressNtf(const EatProgressNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.EatProgressNtf)
}

void EatProgressNtf::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 29;
  param_ = 7;
  progress_ = 0u;
  npcguid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EatProgressNtf::~EatProgressNtf() {
  // @@protoc_insertion_point(destructor:Cmd.EatProgressNtf)
  SharedDtor();
}

void EatProgressNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EatProgressNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EatProgressNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EatProgressNtf_descriptor_;
}

const EatProgressNtf& EatProgressNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneFood_2eproto();
  return *default_instance_;
}

EatProgressNtf* EatProgressNtf::default_instance_ = NULL;

EatProgressNtf* EatProgressNtf::New() const {
  return new EatProgressNtf;
}

void EatProgressNtf::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EatProgressNtf*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(npcguid_, progress_);
    cmd_ = 29;
    param_ = 7;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EatProgressNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.EatProgressNtf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.FoodParam param = 2 [default = FOODPARAM_EAT_PROGRESS_NTF];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::FoodParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::FoodParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_progress;
        break;
      }

      // optional uint32 progress = 3;
      case 3: {
        if (tag == 24) {
         parse_progress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &progress_)));
          set_has_progress();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_npcguid;
        break;
      }

      // optional uint64 npcguid = 4;
      case 4: {
        if (tag == 32) {
         parse_npcguid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &npcguid_)));
          set_has_npcguid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.EatProgressNtf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.EatProgressNtf)
  return false;
#undef DO_
}

void EatProgressNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.EatProgressNtf)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.FoodParam param = 2 [default = FOODPARAM_EAT_PROGRESS_NTF];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 progress = 3;
  if (has_progress()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->progress(), output);
  }

  // optional uint64 npcguid = 4;
  if (has_npcguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->npcguid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.EatProgressNtf)
}

::google::protobuf::uint8* EatProgressNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.EatProgressNtf)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.FoodParam param = 2 [default = FOODPARAM_EAT_PROGRESS_NTF];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 progress = 3;
  if (has_progress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->progress(), target);
  }

  // optional uint64 npcguid = 4;
  if (has_npcguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->npcguid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.EatProgressNtf)
  return target;
}

int EatProgressNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.FoodParam param = 2 [default = FOODPARAM_EAT_PROGRESS_NTF];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 progress = 3;
    if (has_progress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->progress());
    }

    // optional uint64 npcguid = 4;
    if (has_npcguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->npcguid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EatProgressNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EatProgressNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EatProgressNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EatProgressNtf::MergeFrom(const EatProgressNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_progress()) {
      set_progress(from.progress());
    }
    if (from.has_npcguid()) {
      set_npcguid(from.npcguid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EatProgressNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EatProgressNtf::CopyFrom(const EatProgressNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EatProgressNtf::IsInitialized() const {

  return true;
}

void EatProgressNtf::Swap(EatProgressNtf* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(progress_, other->progress_);
    std::swap(npcguid_, other->npcguid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EatProgressNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EatProgressNtf_descriptor_;
  metadata.reflection = EatProgressNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FoodInfoNtf::kCmdFieldNumber;
const int FoodInfoNtf::kParamFieldNumber;
const int FoodInfoNtf::kRecipeidsFieldNumber;
const int FoodInfoNtf::kLastCookedFoodsFieldNumber;
const int FoodInfoNtf::kEatFoodsFieldNumber;
#endif  // !_MSC_VER

FoodInfoNtf::FoodInfoNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.FoodInfoNtf)
}

void FoodInfoNtf::InitAsDefaultInstance() {
}

FoodInfoNtf::FoodInfoNtf(const FoodInfoNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.FoodInfoNtf)
}

void FoodInfoNtf::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 29;
  param_ = 11;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FoodInfoNtf::~FoodInfoNtf() {
  // @@protoc_insertion_point(destructor:Cmd.FoodInfoNtf)
  SharedDtor();
}

void FoodInfoNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FoodInfoNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FoodInfoNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FoodInfoNtf_descriptor_;
}

const FoodInfoNtf& FoodInfoNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneFood_2eproto();
  return *default_instance_;
}

FoodInfoNtf* FoodInfoNtf::default_instance_ = NULL;

FoodInfoNtf* FoodInfoNtf::New() const {
  return new FoodInfoNtf;
}

void FoodInfoNtf::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 29;
    param_ = 11;
  }
  recipeids_.Clear();
  last_cooked_foods_.Clear();
  eat_foods_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FoodInfoNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.FoodInfoNtf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.FoodParam param = 2 [default = FOODPARAM_FOOD_INFO_NTF];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::FoodParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::FoodParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_recipeids;
        break;
      }

      // repeated uint32 recipeids = 3;
      case 3: {
        if (tag == 24) {
         parse_recipeids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_recipeids())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_recipeids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_recipeids;
        if (input->ExpectTag(32)) goto parse_last_cooked_foods;
        break;
      }

      // repeated uint32 last_cooked_foods = 4;
      case 4: {
        if (tag == 32) {
         parse_last_cooked_foods:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_last_cooked_foods())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_last_cooked_foods())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_last_cooked_foods;
        if (input->ExpectTag(42)) goto parse_eat_foods;
        break;
      }

      // repeated .Cmd.FoodItemInfo2 eat_foods = 5;
      case 5: {
        if (tag == 42) {
         parse_eat_foods:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_eat_foods()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_eat_foods;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.FoodInfoNtf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.FoodInfoNtf)
  return false;
#undef DO_
}

void FoodInfoNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.FoodInfoNtf)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.FoodParam param = 2 [default = FOODPARAM_FOOD_INFO_NTF];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated uint32 recipeids = 3;
  for (int i = 0; i < this->recipeids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->recipeids(i), output);
  }

  // repeated uint32 last_cooked_foods = 4;
  for (int i = 0; i < this->last_cooked_foods_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->last_cooked_foods(i), output);
  }

  // repeated .Cmd.FoodItemInfo2 eat_foods = 5;
  for (int i = 0; i < this->eat_foods_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->eat_foods(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.FoodInfoNtf)
}

::google::protobuf::uint8* FoodInfoNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.FoodInfoNtf)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.FoodParam param = 2 [default = FOODPARAM_FOOD_INFO_NTF];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated uint32 recipeids = 3;
  for (int i = 0; i < this->recipeids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->recipeids(i), target);
  }

  // repeated uint32 last_cooked_foods = 4;
  for (int i = 0; i < this->last_cooked_foods_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->last_cooked_foods(i), target);
  }

  // repeated .Cmd.FoodItemInfo2 eat_foods = 5;
  for (int i = 0; i < this->eat_foods_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->eat_foods(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.FoodInfoNtf)
  return target;
}

int FoodInfoNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.FoodParam param = 2 [default = FOODPARAM_FOOD_INFO_NTF];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated uint32 recipeids = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->recipeids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->recipeids(i));
    }
    total_size += 1 * this->recipeids_size() + data_size;
  }

  // repeated uint32 last_cooked_foods = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->last_cooked_foods_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->last_cooked_foods(i));
    }
    total_size += 1 * this->last_cooked_foods_size() + data_size;
  }

  // repeated .Cmd.FoodItemInfo2 eat_foods = 5;
  total_size += 1 * this->eat_foods_size();
  for (int i = 0; i < this->eat_foods_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->eat_foods(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FoodInfoNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FoodInfoNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FoodInfoNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FoodInfoNtf::MergeFrom(const FoodInfoNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  recipeids_.MergeFrom(from.recipeids_);
  last_cooked_foods_.MergeFrom(from.last_cooked_foods_);
  eat_foods_.MergeFrom(from.eat_foods_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FoodInfoNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FoodInfoNtf::CopyFrom(const FoodInfoNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FoodInfoNtf::IsInitialized() const {

  return true;
}

void FoodInfoNtf::Swap(FoodInfoNtf* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    recipeids_.Swap(&other->recipeids_);
    last_cooked_foods_.Swap(&other->last_cooked_foods_);
    eat_foods_.Swap(&other->eat_foods_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FoodInfoNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FoodInfoNtf_descriptor_;
  metadata.reflection = FoodInfoNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateFoodInfo::kCmdFieldNumber;
const int UpdateFoodInfo::kParamFieldNumber;
const int UpdateFoodInfo::kLastCookedFoodsFieldNumber;
const int UpdateFoodInfo::kEatFoodsFieldNumber;
const int UpdateFoodInfo::kDelEatFoodsFieldNumber;
#endif  // !_MSC_VER

UpdateFoodInfo::UpdateFoodInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UpdateFoodInfo)
}

void UpdateFoodInfo::InitAsDefaultInstance() {
}

UpdateFoodInfo::UpdateFoodInfo(const UpdateFoodInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UpdateFoodInfo)
}

void UpdateFoodInfo::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 29;
  param_ = 16;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateFoodInfo::~UpdateFoodInfo() {
  // @@protoc_insertion_point(destructor:Cmd.UpdateFoodInfo)
  SharedDtor();
}

void UpdateFoodInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateFoodInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateFoodInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateFoodInfo_descriptor_;
}

const UpdateFoodInfo& UpdateFoodInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneFood_2eproto();
  return *default_instance_;
}

UpdateFoodInfo* UpdateFoodInfo::default_instance_ = NULL;

UpdateFoodInfo* UpdateFoodInfo::New() const {
  return new UpdateFoodInfo;
}

void UpdateFoodInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 29;
    param_ = 16;
  }
  last_cooked_foods_.Clear();
  eat_foods_.Clear();
  del_eat_foods_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateFoodInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UpdateFoodInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.FoodParam param = 2 [default = FOODPARAM_UPDATE_FOOD_INFO_NTF];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::FoodParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::FoodParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_last_cooked_foods;
        break;
      }

      // repeated uint32 last_cooked_foods = 4;
      case 4: {
        if (tag == 32) {
         parse_last_cooked_foods:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_last_cooked_foods())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_last_cooked_foods())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_last_cooked_foods;
        if (input->ExpectTag(42)) goto parse_eat_foods;
        break;
      }

      // repeated .Cmd.FoodItemInfo2 eat_foods = 5;
      case 5: {
        if (tag == 42) {
         parse_eat_foods:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_eat_foods()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_eat_foods;
        if (input->ExpectTag(48)) goto parse_del_eat_foods;
        break;
      }

      // repeated uint32 del_eat_foods = 6;
      case 6: {
        if (tag == 48) {
         parse_del_eat_foods:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_del_eat_foods())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_del_eat_foods())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_del_eat_foods;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UpdateFoodInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UpdateFoodInfo)
  return false;
#undef DO_
}

void UpdateFoodInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UpdateFoodInfo)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.FoodParam param = 2 [default = FOODPARAM_UPDATE_FOOD_INFO_NTF];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated uint32 last_cooked_foods = 4;
  for (int i = 0; i < this->last_cooked_foods_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->last_cooked_foods(i), output);
  }

  // repeated .Cmd.FoodItemInfo2 eat_foods = 5;
  for (int i = 0; i < this->eat_foods_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->eat_foods(i), output);
  }

  // repeated uint32 del_eat_foods = 6;
  for (int i = 0; i < this->del_eat_foods_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->del_eat_foods(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UpdateFoodInfo)
}

::google::protobuf::uint8* UpdateFoodInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UpdateFoodInfo)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.FoodParam param = 2 [default = FOODPARAM_UPDATE_FOOD_INFO_NTF];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated uint32 last_cooked_foods = 4;
  for (int i = 0; i < this->last_cooked_foods_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->last_cooked_foods(i), target);
  }

  // repeated .Cmd.FoodItemInfo2 eat_foods = 5;
  for (int i = 0; i < this->eat_foods_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->eat_foods(i), target);
  }

  // repeated uint32 del_eat_foods = 6;
  for (int i = 0; i < this->del_eat_foods_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->del_eat_foods(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UpdateFoodInfo)
  return target;
}

int UpdateFoodInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.FoodParam param = 2 [default = FOODPARAM_UPDATE_FOOD_INFO_NTF];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated uint32 last_cooked_foods = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->last_cooked_foods_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->last_cooked_foods(i));
    }
    total_size += 1 * this->last_cooked_foods_size() + data_size;
  }

  // repeated .Cmd.FoodItemInfo2 eat_foods = 5;
  total_size += 1 * this->eat_foods_size();
  for (int i = 0; i < this->eat_foods_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->eat_foods(i));
  }

  // repeated uint32 del_eat_foods = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->del_eat_foods_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->del_eat_foods(i));
    }
    total_size += 1 * this->del_eat_foods_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateFoodInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateFoodInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateFoodInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateFoodInfo::MergeFrom(const UpdateFoodInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  last_cooked_foods_.MergeFrom(from.last_cooked_foods_);
  eat_foods_.MergeFrom(from.eat_foods_);
  del_eat_foods_.MergeFrom(from.del_eat_foods_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateFoodInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateFoodInfo::CopyFrom(const UpdateFoodInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateFoodInfo::IsInitialized() const {

  return true;
}

void UpdateFoodInfo::Swap(UpdateFoodInfo* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    last_cooked_foods_.Swap(&other->last_cooked_foods_);
    eat_foods_.Swap(&other->eat_foods_);
    del_eat_foods_.Swap(&other->del_eat_foods_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateFoodInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateFoodInfo_descriptor_;
  metadata.reflection = UpdateFoodInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnlockRecipeNtf::kCmdFieldNumber;
const int UnlockRecipeNtf::kParamFieldNumber;
const int UnlockRecipeNtf::kRecipeFieldNumber;
#endif  // !_MSC_VER

UnlockRecipeNtf::UnlockRecipeNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UnlockRecipeNtf)
}

void UnlockRecipeNtf::InitAsDefaultInstance() {
}

UnlockRecipeNtf::UnlockRecipeNtf(const UnlockRecipeNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UnlockRecipeNtf)
}

void UnlockRecipeNtf::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 29;
  param_ = 12;
  recipe_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnlockRecipeNtf::~UnlockRecipeNtf() {
  // @@protoc_insertion_point(destructor:Cmd.UnlockRecipeNtf)
  SharedDtor();
}

void UnlockRecipeNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UnlockRecipeNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnlockRecipeNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnlockRecipeNtf_descriptor_;
}

const UnlockRecipeNtf& UnlockRecipeNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneFood_2eproto();
  return *default_instance_;
}

UnlockRecipeNtf* UnlockRecipeNtf::default_instance_ = NULL;

UnlockRecipeNtf* UnlockRecipeNtf::New() const {
  return new UnlockRecipeNtf;
}

void UnlockRecipeNtf::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 29;
    param_ = 12;
    recipe_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnlockRecipeNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UnlockRecipeNtf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.FoodParam param = 2 [default = FOODPARAM_UNLOCK_RECIPE_NTF];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::FoodParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::FoodParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_recipe;
        break;
      }

      // optional uint32 recipe = 3;
      case 3: {
        if (tag == 24) {
         parse_recipe:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recipe_)));
          set_has_recipe();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UnlockRecipeNtf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UnlockRecipeNtf)
  return false;
#undef DO_
}

void UnlockRecipeNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UnlockRecipeNtf)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.FoodParam param = 2 [default = FOODPARAM_UNLOCK_RECIPE_NTF];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 recipe = 3;
  if (has_recipe()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->recipe(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UnlockRecipeNtf)
}

::google::protobuf::uint8* UnlockRecipeNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UnlockRecipeNtf)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.FoodParam param = 2 [default = FOODPARAM_UNLOCK_RECIPE_NTF];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 recipe = 3;
  if (has_recipe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->recipe(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UnlockRecipeNtf)
  return target;
}

int UnlockRecipeNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.FoodParam param = 2 [default = FOODPARAM_UNLOCK_RECIPE_NTF];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 recipe = 3;
    if (has_recipe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recipe());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnlockRecipeNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnlockRecipeNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnlockRecipeNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnlockRecipeNtf::MergeFrom(const UnlockRecipeNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_recipe()) {
      set_recipe(from.recipe());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnlockRecipeNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnlockRecipeNtf::CopyFrom(const UnlockRecipeNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnlockRecipeNtf::IsInitialized() const {

  return true;
}

void UnlockRecipeNtf::Swap(UnlockRecipeNtf* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(recipe_, other->recipe_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnlockRecipeNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnlockRecipeNtf_descriptor_;
  metadata.reflection = UnlockRecipeNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FoodSubData::kStatusFieldNumber;
const int FoodSubData::kItemidFieldNumber;
const int FoodSubData::kExpFieldNumber;
const int FoodSubData::kLevelFieldNumber;
#endif  // !_MSC_VER

FoodSubData::FoodSubData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.FoodSubData)
}

void FoodSubData::InitAsDefaultInstance() {
}

FoodSubData::FoodSubData(const FoodSubData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.FoodSubData)
}

void FoodSubData::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  itemid_ = 0u;
  exp_ = 0u;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FoodSubData::~FoodSubData() {
  // @@protoc_insertion_point(destructor:Cmd.FoodSubData)
  SharedDtor();
}

void FoodSubData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FoodSubData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FoodSubData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FoodSubData_descriptor_;
}

const FoodSubData& FoodSubData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneFood_2eproto();
  return *default_instance_;
}

FoodSubData* FoodSubData::default_instance_ = NULL;

FoodSubData* FoodSubData::New() const {
  return new FoodSubData;
}

void FoodSubData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FoodSubData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(status_, level_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FoodSubData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.FoodSubData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.EFoodStatus status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EFoodStatus_IsValid(value)) {
            set_status(static_cast< ::Cmd::EFoodStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_itemid;
        break;
      }

      // optional uint32 itemid = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_exp;
        break;
      }

      // optional uint32 exp = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // optional uint32 level = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.FoodSubData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.FoodSubData)
  return false;
#undef DO_
}

void FoodSubData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.FoodSubData)
  // optional .Cmd.EFoodStatus status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // optional uint32 itemid = 2 [default = 0];
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->itemid(), output);
  }

  // optional uint32 exp = 3 [default = 0];
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->exp(), output);
  }

  // optional uint32 level = 4 [default = 0];
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.FoodSubData)
}

::google::protobuf::uint8* FoodSubData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.FoodSubData)
  // optional .Cmd.EFoodStatus status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // optional uint32 itemid = 2 [default = 0];
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->itemid(), target);
  }

  // optional uint32 exp = 3 [default = 0];
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->exp(), target);
  }

  // optional uint32 level = 4 [default = 0];
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.FoodSubData)
  return target;
}

int FoodSubData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.EFoodStatus status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional uint32 itemid = 2 [default = 0];
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 exp = 3 [default = 0];
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // optional uint32 level = 4 [default = 0];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FoodSubData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FoodSubData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FoodSubData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FoodSubData::MergeFrom(const FoodSubData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FoodSubData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FoodSubData::CopyFrom(const FoodSubData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FoodSubData::IsInitialized() const {

  return true;
}

void FoodSubData::Swap(FoodSubData* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(itemid_, other->itemid_);
    std::swap(exp_, other->exp_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FoodSubData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FoodSubData_descriptor_;
  metadata.reflection = FoodSubData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FoodManualData::kTypeFieldNumber;
const int FoodManualData::kDatasFieldNumber;
#endif  // !_MSC_VER

FoodManualData::FoodManualData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.FoodManualData)
}

void FoodManualData::InitAsDefaultInstance() {
}

FoodManualData::FoodManualData(const FoodManualData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.FoodManualData)
}

void FoodManualData::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FoodManualData::~FoodManualData() {
  // @@protoc_insertion_point(destructor:Cmd.FoodManualData)
  SharedDtor();
}

void FoodManualData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FoodManualData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FoodManualData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FoodManualData_descriptor_;
}

const FoodManualData& FoodManualData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneFood_2eproto();
  return *default_instance_;
}

FoodManualData* FoodManualData::default_instance_ = NULL;

FoodManualData* FoodManualData::New() const {
  return new FoodManualData;
}

void FoodManualData::Clear() {
  type_ = 0;
  datas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FoodManualData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.FoodManualData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.EFoodDataType type = 1 [default = EFOODDATATYPE_MIN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EFoodDataType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EFoodDataType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_datas;
        break;
      }

      // repeated .Cmd.FoodSubData datas = 2;
      case 2: {
        if (tag == 18) {
         parse_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_datas;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.FoodManualData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.FoodManualData)
  return false;
#undef DO_
}

void FoodManualData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.FoodManualData)
  // optional .Cmd.EFoodDataType type = 1 [default = EFOODDATATYPE_MIN];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated .Cmd.FoodSubData datas = 2;
  for (int i = 0; i < this->datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->datas(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.FoodManualData)
}

::google::protobuf::uint8* FoodManualData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.FoodManualData)
  // optional .Cmd.EFoodDataType type = 1 [default = EFOODDATATYPE_MIN];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated .Cmd.FoodSubData datas = 2;
  for (int i = 0; i < this->datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->datas(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.FoodManualData)
  return target;
}

int FoodManualData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.EFoodDataType type = 1 [default = EFOODDATATYPE_MIN];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated .Cmd.FoodSubData datas = 2;
  total_size += 1 * this->datas_size();
  for (int i = 0; i < this->datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FoodManualData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FoodManualData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FoodManualData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FoodManualData::MergeFrom(const FoodManualData& from) {
  GOOGLE_CHECK_NE(&from, this);
  datas_.MergeFrom(from.datas_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FoodManualData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FoodManualData::CopyFrom(const FoodManualData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FoodManualData::IsInitialized() const {

  return true;
}

void FoodManualData::Swap(FoodManualData* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    datas_.Swap(&other->datas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FoodManualData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FoodManualData_descriptor_;
  metadata.reflection = FoodManualData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryFoodManualData::kCmdFieldNumber;
const int QueryFoodManualData::kParamFieldNumber;
const int QueryFoodManualData::kCookerexpFieldNumber;
const int QueryFoodManualData::kCookerlvFieldNumber;
const int QueryFoodManualData::kTasterexpFieldNumber;
const int QueryFoodManualData::kTasterlvFieldNumber;
const int QueryFoodManualData::kItemsFieldNumber;
#endif  // !_MSC_VER

QueryFoodManualData::QueryFoodManualData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QueryFoodManualData)
}

void QueryFoodManualData::InitAsDefaultInstance() {
}

QueryFoodManualData::QueryFoodManualData(const QueryFoodManualData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QueryFoodManualData)
}

void QueryFoodManualData::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 29;
  param_ = 13;
  cookerexp_ = 0u;
  cookerlv_ = 0u;
  tasterexp_ = 0u;
  tasterlv_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryFoodManualData::~QueryFoodManualData() {
  // @@protoc_insertion_point(destructor:Cmd.QueryFoodManualData)
  SharedDtor();
}

void QueryFoodManualData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryFoodManualData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryFoodManualData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryFoodManualData_descriptor_;
}

const QueryFoodManualData& QueryFoodManualData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneFood_2eproto();
  return *default_instance_;
}

QueryFoodManualData* QueryFoodManualData::default_instance_ = NULL;

QueryFoodManualData* QueryFoodManualData::New() const {
  return new QueryFoodManualData;
}

void QueryFoodManualData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<QueryFoodManualData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(cookerexp_, tasterlv_);
    cmd_ = 29;
    param_ = 13;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryFoodManualData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QueryFoodManualData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.FoodParam param = 2 [default = FOODPARAM_QUERY_FOOD_DATA];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::FoodParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::FoodParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cookerexp;
        break;
      }

      // optional uint32 cookerexp = 3;
      case 3: {
        if (tag == 24) {
         parse_cookerexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cookerexp_)));
          set_has_cookerexp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_cookerlv;
        break;
      }

      // optional uint32 cookerlv = 4;
      case 4: {
        if (tag == 32) {
         parse_cookerlv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cookerlv_)));
          set_has_cookerlv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_tasterexp;
        break;
      }

      // optional uint32 tasterexp = 5;
      case 5: {
        if (tag == 40) {
         parse_tasterexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tasterexp_)));
          set_has_tasterexp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_tasterlv;
        break;
      }

      // optional uint32 tasterlv = 6;
      case 6: {
        if (tag == 48) {
         parse_tasterlv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tasterlv_)));
          set_has_tasterlv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_items;
        break;
      }

      // repeated .Cmd.FoodManualData items = 7;
      case 7: {
        if (tag == 58) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QueryFoodManualData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QueryFoodManualData)
  return false;
#undef DO_
}

void QueryFoodManualData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QueryFoodManualData)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.FoodParam param = 2 [default = FOODPARAM_QUERY_FOOD_DATA];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 cookerexp = 3;
  if (has_cookerexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cookerexp(), output);
  }

  // optional uint32 cookerlv = 4;
  if (has_cookerlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cookerlv(), output);
  }

  // optional uint32 tasterexp = 5;
  if (has_tasterexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->tasterexp(), output);
  }

  // optional uint32 tasterlv = 6;
  if (has_tasterlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->tasterlv(), output);
  }

  // repeated .Cmd.FoodManualData items = 7;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QueryFoodManualData)
}

::google::protobuf::uint8* QueryFoodManualData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QueryFoodManualData)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.FoodParam param = 2 [default = FOODPARAM_QUERY_FOOD_DATA];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 cookerexp = 3;
  if (has_cookerexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cookerexp(), target);
  }

  // optional uint32 cookerlv = 4;
  if (has_cookerlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cookerlv(), target);
  }

  // optional uint32 tasterexp = 5;
  if (has_tasterexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->tasterexp(), target);
  }

  // optional uint32 tasterlv = 6;
  if (has_tasterlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->tasterlv(), target);
  }

  // repeated .Cmd.FoodManualData items = 7;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QueryFoodManualData)
  return target;
}

int QueryFoodManualData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.FoodParam param = 2 [default = FOODPARAM_QUERY_FOOD_DATA];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 cookerexp = 3;
    if (has_cookerexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cookerexp());
    }

    // optional uint32 cookerlv = 4;
    if (has_cookerlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cookerlv());
    }

    // optional uint32 tasterexp = 5;
    if (has_tasterexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tasterexp());
    }

    // optional uint32 tasterlv = 6;
    if (has_tasterlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tasterlv());
    }

  }
  // repeated .Cmd.FoodManualData items = 7;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryFoodManualData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryFoodManualData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryFoodManualData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryFoodManualData::MergeFrom(const QueryFoodManualData& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_cookerexp()) {
      set_cookerexp(from.cookerexp());
    }
    if (from.has_cookerlv()) {
      set_cookerlv(from.cookerlv());
    }
    if (from.has_tasterexp()) {
      set_tasterexp(from.tasterexp());
    }
    if (from.has_tasterlv()) {
      set_tasterlv(from.tasterlv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryFoodManualData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryFoodManualData::CopyFrom(const QueryFoodManualData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryFoodManualData::IsInitialized() const {

  return true;
}

void QueryFoodManualData::Swap(QueryFoodManualData* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(cookerexp_, other->cookerexp_);
    std::swap(cookerlv_, other->cookerlv_);
    std::swap(tasterexp_, other->tasterexp_);
    std::swap(tasterlv_, other->tasterlv_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryFoodManualData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryFoodManualData_descriptor_;
  metadata.reflection = QueryFoodManualData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NewFoodDataNtf::kCmdFieldNumber;
const int NewFoodDataNtf::kParamFieldNumber;
const int NewFoodDataNtf::kItemsFieldNumber;
#endif  // !_MSC_VER

NewFoodDataNtf::NewFoodDataNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.NewFoodDataNtf)
}

void NewFoodDataNtf::InitAsDefaultInstance() {
}

NewFoodDataNtf::NewFoodDataNtf(const NewFoodDataNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.NewFoodDataNtf)
}

void NewFoodDataNtf::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 29;
  param_ = 14;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewFoodDataNtf::~NewFoodDataNtf() {
  // @@protoc_insertion_point(destructor:Cmd.NewFoodDataNtf)
  SharedDtor();
}

void NewFoodDataNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NewFoodDataNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewFoodDataNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewFoodDataNtf_descriptor_;
}

const NewFoodDataNtf& NewFoodDataNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneFood_2eproto();
  return *default_instance_;
}

NewFoodDataNtf* NewFoodDataNtf::default_instance_ = NULL;

NewFoodDataNtf* NewFoodDataNtf::New() const {
  return new NewFoodDataNtf;
}

void NewFoodDataNtf::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 29;
    param_ = 14;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NewFoodDataNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.NewFoodDataNtf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.FoodParam param = 2 [default = FOODPARAM_NEW_FOOD_DATA_NTF];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::FoodParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::FoodParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_items;
        break;
      }

      // repeated .Cmd.FoodManualData items = 3;
      case 3: {
        if (tag == 26) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.NewFoodDataNtf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.NewFoodDataNtf)
  return false;
#undef DO_
}

void NewFoodDataNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.NewFoodDataNtf)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.FoodParam param = 2 [default = FOODPARAM_NEW_FOOD_DATA_NTF];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.FoodManualData items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.NewFoodDataNtf)
}

::google::protobuf::uint8* NewFoodDataNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.NewFoodDataNtf)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.FoodParam param = 2 [default = FOODPARAM_NEW_FOOD_DATA_NTF];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.FoodManualData items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.NewFoodDataNtf)
  return target;
}

int NewFoodDataNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.FoodParam param = 2 [default = FOODPARAM_NEW_FOOD_DATA_NTF];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.FoodManualData items = 3;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewFoodDataNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NewFoodDataNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NewFoodDataNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NewFoodDataNtf::MergeFrom(const NewFoodDataNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NewFoodDataNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewFoodDataNtf::CopyFrom(const NewFoodDataNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewFoodDataNtf::IsInitialized() const {

  return true;
}

void NewFoodDataNtf::Swap(NewFoodDataNtf* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NewFoodDataNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewFoodDataNtf_descriptor_;
  metadata.reflection = NewFoodDataNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClickFoodManualData::kCmdFieldNumber;
const int ClickFoodManualData::kParamFieldNumber;
const int ClickFoodManualData::kTypeFieldNumber;
const int ClickFoodManualData::kItemidFieldNumber;
#endif  // !_MSC_VER

ClickFoodManualData::ClickFoodManualData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ClickFoodManualData)
}

void ClickFoodManualData::InitAsDefaultInstance() {
}

ClickFoodManualData::ClickFoodManualData(const ClickFoodManualData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ClickFoodManualData)
}

void ClickFoodManualData::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 29;
  param_ = 15;
  type_ = 0;
  itemid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClickFoodManualData::~ClickFoodManualData() {
  // @@protoc_insertion_point(destructor:Cmd.ClickFoodManualData)
  SharedDtor();
}

void ClickFoodManualData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClickFoodManualData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClickFoodManualData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClickFoodManualData_descriptor_;
}

const ClickFoodManualData& ClickFoodManualData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneFood_2eproto();
  return *default_instance_;
}

ClickFoodManualData* ClickFoodManualData::default_instance_ = NULL;

ClickFoodManualData* ClickFoodManualData::New() const {
  return new ClickFoodManualData;
}

void ClickFoodManualData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ClickFoodManualData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(type_, itemid_);
    cmd_ = 29;
    param_ = 15;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClickFoodManualData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ClickFoodManualData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.FoodParam param = 2 [default = FOODPARAM_CLICK_FOOD_MANUAL_DATA];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::FoodParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::FoodParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .Cmd.EFoodDataType type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EFoodDataType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EFoodDataType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_itemid;
        break;
      }

      // optional uint32 itemid = 4;
      case 4: {
        if (tag == 32) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ClickFoodManualData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ClickFoodManualData)
  return false;
#undef DO_
}

void ClickFoodManualData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ClickFoodManualData)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.FoodParam param = 2 [default = FOODPARAM_CLICK_FOOD_MANUAL_DATA];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.EFoodDataType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional uint32 itemid = 4;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->itemid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ClickFoodManualData)
}

::google::protobuf::uint8* ClickFoodManualData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ClickFoodManualData)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.FoodParam param = 2 [default = FOODPARAM_CLICK_FOOD_MANUAL_DATA];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.EFoodDataType type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional uint32 itemid = 4;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->itemid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ClickFoodManualData)
  return target;
}

int ClickFoodManualData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_FOOD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.FoodParam param = 2 [default = FOODPARAM_CLICK_FOOD_MANUAL_DATA];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.EFoodDataType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 itemid = 4;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClickFoodManualData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClickFoodManualData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClickFoodManualData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClickFoodManualData::MergeFrom(const ClickFoodManualData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClickFoodManualData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClickFoodManualData::CopyFrom(const ClickFoodManualData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClickFoodManualData::IsInitialized() const {

  return true;
}

void ClickFoodManualData::Swap(ClickFoodManualData* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(type_, other->type_);
    std::swap(itemid_, other->itemid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClickFoodManualData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClickFoodManualData_descriptor_;
  metadata.reflection = ClickFoodManualData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

// @@protoc_insertion_point(global_scope)
