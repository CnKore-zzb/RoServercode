// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WeddingCCmd.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "WeddingCCmd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Cmd {

namespace {

const ::google::protobuf::Descriptor* WeddingDateStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WeddingDateStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqWeddingDateListCCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqWeddingDateListCCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* WeddingOneDayInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WeddingOneDayInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqWeddingOneDayListCCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqWeddingOneDayListCCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharData_reflection_ = NULL;
const ::google::protobuf::Descriptor* BirefWeddingInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BirefWeddingInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqWeddingInfoCCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqWeddingInfoCCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReserveWeddingDateCCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReserveWeddingDateCCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* NtfReserveWeddingDateCCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NtfReserveWeddingDateCCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplyReserveWeddingDateCCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplyReserveWeddingDateCCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GiveUpReserveCCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GiveUpReserveCCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqDivorceCCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqDivorceCCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientWeddingManual_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientWeddingManual_reflection_ = NULL;
const ::google::protobuf::Descriptor* WeddingInvitee_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WeddingInvitee_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateWeddingManualCCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateWeddingManualCCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuyWeddingPackageCCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuyWeddingPackageCCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuyWeddingRingCCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuyWeddingRingCCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* WeddingInviteCCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WeddingInviteCCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* UploadWeddingPhotoCCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UploadWeddingPhotoCCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CheckCanReserveCCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CheckCanReserveCCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqPartnerInfoCCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqPartnerInfoCCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* NtfWeddingInfoCCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NtfWeddingInfoCCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* InviteBeginWeddingCCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InviteBeginWeddingCCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplyBeginWeddingCCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplyBeginWeddingCCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GoToWeddingPosCCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GoToWeddingPosCCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestionWeddingCCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestionWeddingCCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* AnswerWeddingCCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AnswerWeddingCCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* WeddingEventMsgCCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WeddingEventMsgCCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* WeddingOverCCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WeddingOverCCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* WeddingSwitchQuestionCCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WeddingSwitchQuestionCCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnterRollerCoasterCCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnterRollerCoasterCCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* DivorceRollerCoasterInviteCCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DivorceRollerCoasterInviteCCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* DivorceRollerCoasterReplyCCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DivorceRollerCoasterReplyCCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnterWeddingMapCCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnterWeddingMapCCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* MissyouInviteWedCCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MissyouInviteWedCCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* MisccyouReplyWedCCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MisccyouReplyWedCCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* WeddingCarrierCCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WeddingCarrierCCmd_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* WeddingCParam_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EDateStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EWeddingStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EReply_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EGiveUpType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EWeddingEvent_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_WeddingCCmd_2eproto() {
  protobuf_AddDesc_WeddingCCmd_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "WeddingCCmd.proto");
  GOOGLE_CHECK(file != NULL);
  WeddingDateStatus_descriptor_ = file->message_type(0);
  static const int WeddingDateStatus_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingDateStatus, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingDateStatus, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingDateStatus, status_),
  };
  WeddingDateStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WeddingDateStatus_descriptor_,
      WeddingDateStatus::default_instance_,
      WeddingDateStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingDateStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingDateStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WeddingDateStatus));
  ReqWeddingDateListCCmd_descriptor_ = file->message_type(1);
  static const int ReqWeddingDateListCCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWeddingDateListCCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWeddingDateListCCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWeddingDateListCCmd, date_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWeddingDateListCCmd, use_ticket_),
  };
  ReqWeddingDateListCCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqWeddingDateListCCmd_descriptor_,
      ReqWeddingDateListCCmd::default_instance_,
      ReqWeddingDateListCCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWeddingDateListCCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWeddingDateListCCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqWeddingDateListCCmd));
  WeddingOneDayInfo_descriptor_ = file->message_type(2);
  static const int WeddingOneDayInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingOneDayInfo, configid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingOneDayInfo, ban_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingOneDayInfo, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingOneDayInfo, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingOneDayInfo, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingOneDayInfo, id_),
  };
  WeddingOneDayInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WeddingOneDayInfo_descriptor_,
      WeddingOneDayInfo::default_instance_,
      WeddingOneDayInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingOneDayInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingOneDayInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WeddingOneDayInfo));
  ReqWeddingOneDayListCCmd_descriptor_ = file->message_type(3);
  static const int ReqWeddingOneDayListCCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWeddingOneDayListCCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWeddingOneDayListCCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWeddingOneDayListCCmd, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWeddingOneDayListCCmd, info_),
  };
  ReqWeddingOneDayListCCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqWeddingOneDayListCCmd_descriptor_,
      ReqWeddingOneDayListCCmd::default_instance_,
      ReqWeddingOneDayListCCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWeddingOneDayListCCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWeddingOneDayListCCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqWeddingOneDayListCCmd));
  CharData_descriptor_ = file->message_type(4);
  static const int CharData_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharData, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharData, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharData, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharData, portrait_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharData, hair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharData, haircolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharData, body_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharData, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharData, face_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharData, mouth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharData, eye_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharData, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharData, guildname_),
  };
  CharData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharData_descriptor_,
      CharData::default_instance_,
      CharData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharData));
  BirefWeddingInfo_descriptor_ = file->message_type(5);
  static const int BirefWeddingInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BirefWeddingInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BirefWeddingInfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BirefWeddingInfo, char1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BirefWeddingInfo, char2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BirefWeddingInfo, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BirefWeddingInfo, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BirefWeddingInfo, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BirefWeddingInfo, can_single_divorce_),
  };
  BirefWeddingInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BirefWeddingInfo_descriptor_,
      BirefWeddingInfo::default_instance_,
      BirefWeddingInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BirefWeddingInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BirefWeddingInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BirefWeddingInfo));
  ReqWeddingInfoCCmd_descriptor_ = file->message_type(6);
  static const int ReqWeddingInfoCCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWeddingInfoCCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWeddingInfoCCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWeddingInfoCCmd, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWeddingInfoCCmd, info_),
  };
  ReqWeddingInfoCCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqWeddingInfoCCmd_descriptor_,
      ReqWeddingInfoCCmd::default_instance_,
      ReqWeddingInfoCCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWeddingInfoCCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWeddingInfoCCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqWeddingInfoCCmd));
  ReserveWeddingDateCCmd_descriptor_ = file->message_type(7);
  static const int ReserveWeddingDateCCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReserveWeddingDateCCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReserveWeddingDateCCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReserveWeddingDateCCmd, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReserveWeddingDateCCmd, configid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReserveWeddingDateCCmd, charid2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReserveWeddingDateCCmd, use_ticket_),
  };
  ReserveWeddingDateCCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReserveWeddingDateCCmd_descriptor_,
      ReserveWeddingDateCCmd::default_instance_,
      ReserveWeddingDateCCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReserveWeddingDateCCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReserveWeddingDateCCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReserveWeddingDateCCmd));
  NtfReserveWeddingDateCCmd_descriptor_ = file->message_type(8);
  static const int NtfReserveWeddingDateCCmd_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfReserveWeddingDateCCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfReserveWeddingDateCCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfReserveWeddingDateCCmd, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfReserveWeddingDateCCmd, configid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfReserveWeddingDateCCmd, charid1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfReserveWeddingDateCCmd, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfReserveWeddingDateCCmd, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfReserveWeddingDateCCmd, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfReserveWeddingDateCCmd, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfReserveWeddingDateCCmd, use_ticket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfReserveWeddingDateCCmd, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfReserveWeddingDateCCmd, sign_),
  };
  NtfReserveWeddingDateCCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NtfReserveWeddingDateCCmd_descriptor_,
      NtfReserveWeddingDateCCmd::default_instance_,
      NtfReserveWeddingDateCCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfReserveWeddingDateCCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfReserveWeddingDateCCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NtfReserveWeddingDateCCmd));
  ReplyReserveWeddingDateCCmd_descriptor_ = file->message_type(9);
  static const int ReplyReserveWeddingDateCCmd_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyReserveWeddingDateCCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyReserveWeddingDateCCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyReserveWeddingDateCCmd, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyReserveWeddingDateCCmd, configid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyReserveWeddingDateCCmd, charid1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyReserveWeddingDateCCmd, reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyReserveWeddingDateCCmd, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyReserveWeddingDateCCmd, use_ticket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyReserveWeddingDateCCmd, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyReserveWeddingDateCCmd, sign_),
  };
  ReplyReserveWeddingDateCCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplyReserveWeddingDateCCmd_descriptor_,
      ReplyReserveWeddingDateCCmd::default_instance_,
      ReplyReserveWeddingDateCCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyReserveWeddingDateCCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyReserveWeddingDateCCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplyReserveWeddingDateCCmd));
  GiveUpReserveCCmd_descriptor_ = file->message_type(10);
  static const int GiveUpReserveCCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiveUpReserveCCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiveUpReserveCCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiveUpReserveCCmd, id_),
  };
  GiveUpReserveCCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GiveUpReserveCCmd_descriptor_,
      GiveUpReserveCCmd::default_instance_,
      GiveUpReserveCCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiveUpReserveCCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiveUpReserveCCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GiveUpReserveCCmd));
  ReqDivorceCCmd_descriptor_ = file->message_type(11);
  static const int ReqDivorceCCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDivorceCCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDivorceCCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDivorceCCmd, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDivorceCCmd, type_),
  };
  ReqDivorceCCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqDivorceCCmd_descriptor_,
      ReqDivorceCCmd::default_instance_,
      ReqDivorceCCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDivorceCCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDivorceCCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqDivorceCCmd));
  ClientWeddingManual_descriptor_ = file->message_type(12);
  static const int ClientWeddingManual_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientWeddingManual, packageids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientWeddingManual, ringid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientWeddingManual, photoindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientWeddingManual, phototime_),
  };
  ClientWeddingManual_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientWeddingManual_descriptor_,
      ClientWeddingManual::default_instance_,
      ClientWeddingManual_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientWeddingManual, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientWeddingManual, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientWeddingManual));
  WeddingInvitee_descriptor_ = file->message_type(13);
  static const int WeddingInvitee_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingInvitee, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingInvitee, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingInvitee, invitetime_),
  };
  WeddingInvitee_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WeddingInvitee_descriptor_,
      WeddingInvitee::default_instance_,
      WeddingInvitee_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingInvitee, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingInvitee, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WeddingInvitee));
  UpdateWeddingManualCCmd_descriptor_ = file->message_type(14);
  static const int UpdateWeddingManualCCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateWeddingManualCCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateWeddingManualCCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateWeddingManualCCmd, manual_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateWeddingManualCCmd, invitees_),
  };
  UpdateWeddingManualCCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateWeddingManualCCmd_descriptor_,
      UpdateWeddingManualCCmd::default_instance_,
      UpdateWeddingManualCCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateWeddingManualCCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateWeddingManualCCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateWeddingManualCCmd));
  BuyWeddingPackageCCmd_descriptor_ = file->message_type(15);
  static const int BuyWeddingPackageCCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyWeddingPackageCCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyWeddingPackageCCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyWeddingPackageCCmd, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyWeddingPackageCCmd, priceitem_),
  };
  BuyWeddingPackageCCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuyWeddingPackageCCmd_descriptor_,
      BuyWeddingPackageCCmd::default_instance_,
      BuyWeddingPackageCCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyWeddingPackageCCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyWeddingPackageCCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuyWeddingPackageCCmd));
  BuyWeddingRingCCmd_descriptor_ = file->message_type(16);
  static const int BuyWeddingRingCCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyWeddingRingCCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyWeddingRingCCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyWeddingRingCCmd, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyWeddingRingCCmd, priceitem_),
  };
  BuyWeddingRingCCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuyWeddingRingCCmd_descriptor_,
      BuyWeddingRingCCmd::default_instance_,
      BuyWeddingRingCCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyWeddingRingCCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyWeddingRingCCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuyWeddingRingCCmd));
  WeddingInviteCCmd_descriptor_ = file->message_type(17);
  static const int WeddingInviteCCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingInviteCCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingInviteCCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingInviteCCmd, charids_),
  };
  WeddingInviteCCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WeddingInviteCCmd_descriptor_,
      WeddingInviteCCmd::default_instance_,
      WeddingInviteCCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingInviteCCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingInviteCCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WeddingInviteCCmd));
  UploadWeddingPhotoCCmd_descriptor_ = file->message_type(18);
  static const int UploadWeddingPhotoCCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadWeddingPhotoCCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadWeddingPhotoCCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadWeddingPhotoCCmd, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadWeddingPhotoCCmd, time_),
  };
  UploadWeddingPhotoCCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UploadWeddingPhotoCCmd_descriptor_,
      UploadWeddingPhotoCCmd::default_instance_,
      UploadWeddingPhotoCCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadWeddingPhotoCCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadWeddingPhotoCCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UploadWeddingPhotoCCmd));
  CheckCanReserveCCmd_descriptor_ = file->message_type(19);
  static const int CheckCanReserveCCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckCanReserveCCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckCanReserveCCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckCanReserveCCmd, charid2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckCanReserveCCmd, success_),
  };
  CheckCanReserveCCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CheckCanReserveCCmd_descriptor_,
      CheckCanReserveCCmd::default_instance_,
      CheckCanReserveCCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckCanReserveCCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckCanReserveCCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CheckCanReserveCCmd));
  ReqPartnerInfoCCmd_descriptor_ = file->message_type(20);
  static const int ReqPartnerInfoCCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPartnerInfoCCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPartnerInfoCCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPartnerInfoCCmd, chardata_),
  };
  ReqPartnerInfoCCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqPartnerInfoCCmd_descriptor_,
      ReqPartnerInfoCCmd::default_instance_,
      ReqPartnerInfoCCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPartnerInfoCCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPartnerInfoCCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqPartnerInfoCCmd));
  NtfWeddingInfoCCmd_descriptor_ = file->message_type(21);
  static const int NtfWeddingInfoCCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfWeddingInfoCCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfWeddingInfoCCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfWeddingInfoCCmd, info_),
  };
  NtfWeddingInfoCCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NtfWeddingInfoCCmd_descriptor_,
      NtfWeddingInfoCCmd::default_instance_,
      NtfWeddingInfoCCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfWeddingInfoCCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfWeddingInfoCCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NtfWeddingInfoCCmd));
  InviteBeginWeddingCCmd_descriptor_ = file->message_type(22);
  static const int InviteBeginWeddingCCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteBeginWeddingCCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteBeginWeddingCCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteBeginWeddingCCmd, masterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteBeginWeddingCCmd, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteBeginWeddingCCmd, tocharid_),
  };
  InviteBeginWeddingCCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InviteBeginWeddingCCmd_descriptor_,
      InviteBeginWeddingCCmd::default_instance_,
      InviteBeginWeddingCCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteBeginWeddingCCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteBeginWeddingCCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InviteBeginWeddingCCmd));
  ReplyBeginWeddingCCmd_descriptor_ = file->message_type(23);
  static const int ReplyBeginWeddingCCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyBeginWeddingCCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyBeginWeddingCCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyBeginWeddingCCmd, masterid_),
  };
  ReplyBeginWeddingCCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplyBeginWeddingCCmd_descriptor_,
      ReplyBeginWeddingCCmd::default_instance_,
      ReplyBeginWeddingCCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyBeginWeddingCCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyBeginWeddingCCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplyBeginWeddingCCmd));
  GoToWeddingPosCCmd_descriptor_ = file->message_type(24);
  static const int GoToWeddingPosCCmd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoToWeddingPosCCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoToWeddingPosCCmd, param_),
  };
  GoToWeddingPosCCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GoToWeddingPosCCmd_descriptor_,
      GoToWeddingPosCCmd::default_instance_,
      GoToWeddingPosCCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoToWeddingPosCCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoToWeddingPosCCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GoToWeddingPosCCmd));
  QuestionWeddingCCmd_descriptor_ = file->message_type(25);
  static const int QuestionWeddingCCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestionWeddingCCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestionWeddingCCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestionWeddingCCmd, questionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestionWeddingCCmd, charids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestionWeddingCCmd, npcguid_),
  };
  QuestionWeddingCCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestionWeddingCCmd_descriptor_,
      QuestionWeddingCCmd::default_instance_,
      QuestionWeddingCCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestionWeddingCCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestionWeddingCCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestionWeddingCCmd));
  AnswerWeddingCCmd_descriptor_ = file->message_type(26);
  static const int AnswerWeddingCCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnswerWeddingCCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnswerWeddingCCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnswerWeddingCCmd, questionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnswerWeddingCCmd, answer_),
  };
  AnswerWeddingCCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AnswerWeddingCCmd_descriptor_,
      AnswerWeddingCCmd::default_instance_,
      AnswerWeddingCCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnswerWeddingCCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnswerWeddingCCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AnswerWeddingCCmd));
  WeddingEventMsgCCmd_descriptor_ = file->message_type(27);
  static const int WeddingEventMsgCCmd_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingEventMsgCCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingEventMsgCCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingEventMsgCCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingEventMsgCCmd, event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingEventMsgCCmd, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingEventMsgCCmd, charid1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingEventMsgCCmd, charid2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingEventMsgCCmd, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingEventMsgCCmd, opt_charid_),
  };
  WeddingEventMsgCCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WeddingEventMsgCCmd_descriptor_,
      WeddingEventMsgCCmd::default_instance_,
      WeddingEventMsgCCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingEventMsgCCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingEventMsgCCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WeddingEventMsgCCmd));
  WeddingOverCCmd_descriptor_ = file->message_type(28);
  static const int WeddingOverCCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingOverCCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingOverCCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingOverCCmd, success_),
  };
  WeddingOverCCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WeddingOverCCmd_descriptor_,
      WeddingOverCCmd::default_instance_,
      WeddingOverCCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingOverCCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingOverCCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WeddingOverCCmd));
  WeddingSwitchQuestionCCmd_descriptor_ = file->message_type(29);
  static const int WeddingSwitchQuestionCCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingSwitchQuestionCCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingSwitchQuestionCCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingSwitchQuestionCCmd, onoff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingSwitchQuestionCCmd, npcguid_),
  };
  WeddingSwitchQuestionCCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WeddingSwitchQuestionCCmd_descriptor_,
      WeddingSwitchQuestionCCmd::default_instance_,
      WeddingSwitchQuestionCCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingSwitchQuestionCCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingSwitchQuestionCCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WeddingSwitchQuestionCCmd));
  EnterRollerCoasterCCmd_descriptor_ = file->message_type(30);
  static const int EnterRollerCoasterCCmd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterRollerCoasterCCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterRollerCoasterCCmd, param_),
  };
  EnterRollerCoasterCCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnterRollerCoasterCCmd_descriptor_,
      EnterRollerCoasterCCmd::default_instance_,
      EnterRollerCoasterCCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterRollerCoasterCCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterRollerCoasterCCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnterRollerCoasterCCmd));
  DivorceRollerCoasterInviteCCmd_descriptor_ = file->message_type(31);
  static const int DivorceRollerCoasterInviteCCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DivorceRollerCoasterInviteCCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DivorceRollerCoasterInviteCCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DivorceRollerCoasterInviteCCmd, inviter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DivorceRollerCoasterInviteCCmd, invitee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DivorceRollerCoasterInviteCCmd, inviter_name_),
  };
  DivorceRollerCoasterInviteCCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DivorceRollerCoasterInviteCCmd_descriptor_,
      DivorceRollerCoasterInviteCCmd::default_instance_,
      DivorceRollerCoasterInviteCCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DivorceRollerCoasterInviteCCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DivorceRollerCoasterInviteCCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DivorceRollerCoasterInviteCCmd));
  DivorceRollerCoasterReplyCCmd_descriptor_ = file->message_type(32);
  static const int DivorceRollerCoasterReplyCCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DivorceRollerCoasterReplyCCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DivorceRollerCoasterReplyCCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DivorceRollerCoasterReplyCCmd, inviter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DivorceRollerCoasterReplyCCmd, reply_),
  };
  DivorceRollerCoasterReplyCCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DivorceRollerCoasterReplyCCmd_descriptor_,
      DivorceRollerCoasterReplyCCmd::default_instance_,
      DivorceRollerCoasterReplyCCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DivorceRollerCoasterReplyCCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DivorceRollerCoasterReplyCCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DivorceRollerCoasterReplyCCmd));
  EnterWeddingMapCCmd_descriptor_ = file->message_type(33);
  static const int EnterWeddingMapCCmd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterWeddingMapCCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterWeddingMapCCmd, param_),
  };
  EnterWeddingMapCCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnterWeddingMapCCmd_descriptor_,
      EnterWeddingMapCCmd::default_instance_,
      EnterWeddingMapCCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterWeddingMapCCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterWeddingMapCCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnterWeddingMapCCmd));
  MissyouInviteWedCCmd_descriptor_ = file->message_type(34);
  static const int MissyouInviteWedCCmd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissyouInviteWedCCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissyouInviteWedCCmd, param_),
  };
  MissyouInviteWedCCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MissyouInviteWedCCmd_descriptor_,
      MissyouInviteWedCCmd::default_instance_,
      MissyouInviteWedCCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissyouInviteWedCCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissyouInviteWedCCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MissyouInviteWedCCmd));
  MisccyouReplyWedCCmd_descriptor_ = file->message_type(35);
  static const int MisccyouReplyWedCCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MisccyouReplyWedCCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MisccyouReplyWedCCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MisccyouReplyWedCCmd, agree_),
  };
  MisccyouReplyWedCCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MisccyouReplyWedCCmd_descriptor_,
      MisccyouReplyWedCCmd::default_instance_,
      MisccyouReplyWedCCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MisccyouReplyWedCCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MisccyouReplyWedCCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MisccyouReplyWedCCmd));
  WeddingCarrierCCmd_descriptor_ = file->message_type(36);
  static const int WeddingCarrierCCmd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingCarrierCCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingCarrierCCmd, param_),
  };
  WeddingCarrierCCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WeddingCarrierCCmd_descriptor_,
      WeddingCarrierCCmd::default_instance_,
      WeddingCarrierCCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingCarrierCCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingCarrierCCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WeddingCarrierCCmd));
  WeddingCParam_descriptor_ = file->enum_type(0);
  EDateStatus_descriptor_ = file->enum_type(1);
  EWeddingStatus_descriptor_ = file->enum_type(2);
  EReply_descriptor_ = file->enum_type(3);
  EGiveUpType_descriptor_ = file->enum_type(4);
  EWeddingEvent_descriptor_ = file->enum_type(5);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_WeddingCCmd_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WeddingDateStatus_descriptor_, &WeddingDateStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqWeddingDateListCCmd_descriptor_, &ReqWeddingDateListCCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WeddingOneDayInfo_descriptor_, &WeddingOneDayInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqWeddingOneDayListCCmd_descriptor_, &ReqWeddingOneDayListCCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharData_descriptor_, &CharData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BirefWeddingInfo_descriptor_, &BirefWeddingInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqWeddingInfoCCmd_descriptor_, &ReqWeddingInfoCCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReserveWeddingDateCCmd_descriptor_, &ReserveWeddingDateCCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NtfReserveWeddingDateCCmd_descriptor_, &NtfReserveWeddingDateCCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplyReserveWeddingDateCCmd_descriptor_, &ReplyReserveWeddingDateCCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GiveUpReserveCCmd_descriptor_, &GiveUpReserveCCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqDivorceCCmd_descriptor_, &ReqDivorceCCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientWeddingManual_descriptor_, &ClientWeddingManual::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WeddingInvitee_descriptor_, &WeddingInvitee::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateWeddingManualCCmd_descriptor_, &UpdateWeddingManualCCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuyWeddingPackageCCmd_descriptor_, &BuyWeddingPackageCCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuyWeddingRingCCmd_descriptor_, &BuyWeddingRingCCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WeddingInviteCCmd_descriptor_, &WeddingInviteCCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UploadWeddingPhotoCCmd_descriptor_, &UploadWeddingPhotoCCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CheckCanReserveCCmd_descriptor_, &CheckCanReserveCCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqPartnerInfoCCmd_descriptor_, &ReqPartnerInfoCCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NtfWeddingInfoCCmd_descriptor_, &NtfWeddingInfoCCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InviteBeginWeddingCCmd_descriptor_, &InviteBeginWeddingCCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplyBeginWeddingCCmd_descriptor_, &ReplyBeginWeddingCCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GoToWeddingPosCCmd_descriptor_, &GoToWeddingPosCCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestionWeddingCCmd_descriptor_, &QuestionWeddingCCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AnswerWeddingCCmd_descriptor_, &AnswerWeddingCCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WeddingEventMsgCCmd_descriptor_, &WeddingEventMsgCCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WeddingOverCCmd_descriptor_, &WeddingOverCCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WeddingSwitchQuestionCCmd_descriptor_, &WeddingSwitchQuestionCCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnterRollerCoasterCCmd_descriptor_, &EnterRollerCoasterCCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DivorceRollerCoasterInviteCCmd_descriptor_, &DivorceRollerCoasterInviteCCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DivorceRollerCoasterReplyCCmd_descriptor_, &DivorceRollerCoasterReplyCCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnterWeddingMapCCmd_descriptor_, &EnterWeddingMapCCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MissyouInviteWedCCmd_descriptor_, &MissyouInviteWedCCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MisccyouReplyWedCCmd_descriptor_, &MisccyouReplyWedCCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WeddingCarrierCCmd_descriptor_, &WeddingCarrierCCmd::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_WeddingCCmd_2eproto() {
  delete WeddingDateStatus::default_instance_;
  delete WeddingDateStatus_reflection_;
  delete ReqWeddingDateListCCmd::default_instance_;
  delete ReqWeddingDateListCCmd_reflection_;
  delete WeddingOneDayInfo::default_instance_;
  delete WeddingOneDayInfo_reflection_;
  delete ReqWeddingOneDayListCCmd::default_instance_;
  delete ReqWeddingOneDayListCCmd_reflection_;
  delete CharData::default_instance_;
  delete CharData_reflection_;
  delete BirefWeddingInfo::default_instance_;
  delete BirefWeddingInfo_reflection_;
  delete ReqWeddingInfoCCmd::default_instance_;
  delete ReqWeddingInfoCCmd_reflection_;
  delete ReserveWeddingDateCCmd::default_instance_;
  delete ReserveWeddingDateCCmd_reflection_;
  delete NtfReserveWeddingDateCCmd::default_instance_;
  delete NtfReserveWeddingDateCCmd_reflection_;
  delete ReplyReserveWeddingDateCCmd::default_instance_;
  delete ReplyReserveWeddingDateCCmd_reflection_;
  delete GiveUpReserveCCmd::default_instance_;
  delete GiveUpReserveCCmd_reflection_;
  delete ReqDivorceCCmd::default_instance_;
  delete ReqDivorceCCmd_reflection_;
  delete ClientWeddingManual::default_instance_;
  delete ClientWeddingManual_reflection_;
  delete WeddingInvitee::default_instance_;
  delete WeddingInvitee_reflection_;
  delete UpdateWeddingManualCCmd::default_instance_;
  delete UpdateWeddingManualCCmd_reflection_;
  delete BuyWeddingPackageCCmd::default_instance_;
  delete BuyWeddingPackageCCmd_reflection_;
  delete BuyWeddingRingCCmd::default_instance_;
  delete BuyWeddingRingCCmd_reflection_;
  delete WeddingInviteCCmd::default_instance_;
  delete WeddingInviteCCmd_reflection_;
  delete UploadWeddingPhotoCCmd::default_instance_;
  delete UploadWeddingPhotoCCmd_reflection_;
  delete CheckCanReserveCCmd::default_instance_;
  delete CheckCanReserveCCmd_reflection_;
  delete ReqPartnerInfoCCmd::default_instance_;
  delete ReqPartnerInfoCCmd_reflection_;
  delete NtfWeddingInfoCCmd::default_instance_;
  delete NtfWeddingInfoCCmd_reflection_;
  delete InviteBeginWeddingCCmd::default_instance_;
  delete InviteBeginWeddingCCmd_reflection_;
  delete ReplyBeginWeddingCCmd::default_instance_;
  delete ReplyBeginWeddingCCmd_reflection_;
  delete GoToWeddingPosCCmd::default_instance_;
  delete GoToWeddingPosCCmd_reflection_;
  delete QuestionWeddingCCmd::default_instance_;
  delete QuestionWeddingCCmd_reflection_;
  delete AnswerWeddingCCmd::default_instance_;
  delete AnswerWeddingCCmd_reflection_;
  delete WeddingEventMsgCCmd::default_instance_;
  delete WeddingEventMsgCCmd_reflection_;
  delete WeddingOverCCmd::default_instance_;
  delete WeddingOverCCmd_reflection_;
  delete WeddingSwitchQuestionCCmd::default_instance_;
  delete WeddingSwitchQuestionCCmd_reflection_;
  delete EnterRollerCoasterCCmd::default_instance_;
  delete EnterRollerCoasterCCmd_reflection_;
  delete DivorceRollerCoasterInviteCCmd::default_instance_;
  delete DivorceRollerCoasterInviteCCmd_reflection_;
  delete DivorceRollerCoasterReplyCCmd::default_instance_;
  delete DivorceRollerCoasterReplyCCmd_reflection_;
  delete EnterWeddingMapCCmd::default_instance_;
  delete EnterWeddingMapCCmd_reflection_;
  delete MissyouInviteWedCCmd::default_instance_;
  delete MissyouInviteWedCCmd_reflection_;
  delete MisccyouReplyWedCCmd::default_instance_;
  delete MisccyouReplyWedCCmd_reflection_;
  delete WeddingCarrierCCmd::default_instance_;
  delete WeddingCarrierCCmd_reflection_;
}

void protobuf_AddDesc_WeddingCCmd_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Cmd::protobuf_AddDesc_xCmd_2eproto();
  ::Cmd::protobuf_AddDesc_ProtoCommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021WeddingCCmd.proto\022\003Cmd\032\nxCmd.proto\032\021Pr"
    "otoCommon.proto\"X\n\021WeddingDateStatus\022\017\n\004"
    "date\030\001 \001(\r:\0010\022\020\n\005count\030\003 \001(\r:\0010\022 \n\006statu"
    "s\030\002 \001(\0162\020.Cmd.EDateStatus\"\314\001\n\026ReqWedding"
    "DateListCCmd\022,\n\003cmd\030\001 \001(\0162\014.Cmd.Command:"
    "\021WEDDINGC_PROTOCMD\022E\n\005param\030\002 \001(\0162\022.Cmd."
    "WeddingCParam:\"WEDDINGCPARAM_REQ_WEDDING"
    "DATE_LIST\022)\n\tdate_list\030\003 \003(\0132\026.Cmd.Weddi"
    "ngDateStatus\022\022\n\nuse_ticket\030\004 \001(\010\"x\n\021Wedd"
    "ingOneDayInfo\022\020\n\010configid\030\001 \001(\r\022\022\n\003ban\030\002"
    " \001(\010:\005false\022\021\n\tstarttime\030\003 \001(\r\022\017\n\007endtim"
    "e\030\004 \001(\r\022\r\n\005price\030\005 \001(\r\022\n\n\002id\030\006 \001(\004\"\306\001\n\030R"
    "eqWeddingOneDayListCCmd\022,\n\003cmd\030\001 \001(\0162\014.C"
    "md.Command:\021WEDDINGC_PROTOCMD\022H\n\005param\030\002"
    " \001(\0162\022.Cmd.WeddingCParam:%WEDDINGCPARAM_"
    "REQ_WEDDING_ONEDAY_LIST\022\014\n\004date\030\003 \001(\r\022$\n"
    "\004info\030\004 \003(\0132\026.Cmd.WeddingOneDayInfo\"\215\002\n\010"
    "CharData\022\016\n\006charid\030\001 \001(\004\022\014\n\004name\030\002 \001(\t\022\022"
    "\n\nprofession\030\003 \001(\r\022\034\n\006gender\030\004 \001(\0162\014.Cmd"
    ".EGender\022\023\n\010portrait\030\005 \001(\r:\0010\022\017\n\004hair\030\007 "
    "\001(\r:\0010\022\024\n\thaircolor\030\010 \001(\r:\0010\022\017\n\004body\030\t \001"
    "(\r:\0010\022\017\n\004head\030\n \001(\r:\0010\022\017\n\004face\030\013 \001(\r:\0010\022"
    "\020\n\005mouth\030\014 \001(\r:\0010\022\016\n\003eye\030\r \001(\r:\0010\022\r\n\005lev"
    "el\030\016 \001(\r\022\021\n\tguildname\030\017 \001(\t\"\317\001\n\020BirefWed"
    "dingInfo\022\n\n\002id\030\001 \001(\004\022#\n\006status\030\002 \001(\0162\023.C"
    "md.EWeddingStatus\022\034\n\005char1\030\003 \001(\0132\r.Cmd.C"
    "harData\022\034\n\005char2\030\004 \001(\0132\r.Cmd.CharData\022\016\n"
    "\006zoneid\030\005 \001(\r\022\021\n\tstarttime\030\006 \001(\r\022\017\n\007endt"
    "ime\030\007 \001(\r\022\032\n\022can_single_divorce\030\010 \001(\010\"\266\001"
    "\n\022ReqWeddingInfoCCmd\022,\n\003cmd\030\001 \001(\0162\014.Cmd."
    "Command:\021WEDDINGC_PROTOCMD\022A\n\005param\030\002 \001("
    "\0162\022.Cmd.WeddingCParam:\036WEDDINGCPARAM_REQ"
    "_WEDDING_INFO\022\n\n\002id\030\003 \001(\004\022#\n\004info\030\004 \001(\0132"
    "\025.Cmd.BirefWeddingInfo\"\321\001\n\026ReserveWeddin"
    "gDateCCmd\022,\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\021WE"
    "DDINGC_PROTOCMD\022D\n\005param\030\002 \001(\0162\022.Cmd.Wed"
    "dingCParam:!WEDDINGCPARAM_RESERVE_WEDDIN"
    "GDATE\022\014\n\004date\030\003 \001(\r\022\020\n\010configid\030\004 \001(\r\022\017\n"
    "\007charid2\030\005 \001(\004\022\022\n\nuse_ticket\030\006 \001(\010\"\266\002\n\031N"
    "tfReserveWeddingDateCCmd\022,\n\003cmd\030\001 \001(\0162\014."
    "Cmd.Command:\021WEDDINGC_PROTOCMD\022H\n\005param\030"
    "\002 \001(\0162\022.Cmd.WeddingCParam:%WEDDINGCPARAM"
    "_NTF_RESERVE_WEDDINGDATE\022\014\n\004date\030\003 \001(\r\022\020"
    "\n\010configid\030\004 \001(\r\022\017\n\007charid1\030\005 \001(\004\022\014\n\004nam"
    "e\030\006 \001(\t\022\021\n\tstarttime\030\007 \001(\r\022\017\n\007endtime\030\010 "
    "\001(\r\022\014\n\004time\030\t \001(\r\022\022\n\nuse_ticket\030\n \001(\010\022\016\n"
    "\006zoneid\030\013 \001(\r\022\014\n\004sign\030\014 \001(\t\"\244\002\n\033ReplyRes"
    "erveWeddingDateCCmd\022,\n\003cmd\030\001 \001(\0162\014.Cmd.C"
    "ommand:\021WEDDINGC_PROTOCMD\022J\n\005param\030\002 \001(\016"
    "2\022.Cmd.WeddingCParam:\'WEDDINGCPARAM_REPL"
    "Y_RESERVE_WEDDINGDATE\022\014\n\004date\030\003 \001(\r\022\020\n\010c"
    "onfigid\030\004 \001(\r\022\017\n\007charid1\030\005 \001(\004\022\032\n\005reply\030"
    "\006 \001(\0162\013.Cmd.EReply\022\014\n\004time\030\007 \001(\r\022\022\n\nuse_"
    "ticket\030\010 \001(\010\022\016\n\006zoneid\030\t \001(\r\022\014\n\004sign\030\n \001"
    "(\t\"\216\001\n\021GiveUpReserveCCmd\022,\n\003cmd\030\001 \001(\0162\014."
    "Cmd.Command:\021WEDDINGC_PROTOCMD\022\?\n\005param\030"
    "\002 \001(\0162\022.Cmd.WeddingCParam:\034WEDDINGCPARAM"
    "_GIVEUP_RESERVE\022\n\n\002id\030\003 \001(\004\"\250\001\n\016ReqDivor"
    "ceCCmd\022,\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\021WEDDI"
    "NGC_PROTOCMD\022<\n\005param\030\002 \001(\0162\022.Cmd.Weddin"
    "gCParam:\031WEDDINGCPARAM_REQ_DIVORCE\022\n\n\002id"
    "\030\003 \001(\004\022\036\n\004type\030\004 \001(\0162\020.Cmd.EGiveUpType\"i"
    "\n\023ClientWeddingManual\022\022\n\npackageids\030\001 \003("
    "\r\022\021\n\006ringid\030\002 \001(\r:\0010\022\025\n\nphotoindex\030\003 \001(\r"
    ":\0010\022\024\n\tphototime\030\004 \001(\r:\0010\"H\n\016WeddingInvi"
    "tee\022\021\n\006charid\030\001 \001(\004:\0010\022\014\n\004name\030\002 \001(\t\022\025\n\n"
    "invitetime\030\003 \001(\r:\0010\"\330\001\n\027UpdateWeddingMan"
    "ualCCmd\022,\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\021WEDD"
    "INGC_PROTOCMD\022>\n\005param\030\002 \001(\0162\022.Cmd.Weddi"
    "ngCParam:\033WEDDINGCPARAM_UPDATE_MANUAL\022(\n"
    "\006manual\030\003 \001(\0132\030.Cmd.ClientWeddingManual\022"
    "%\n\010invitees\030\004 \003(\0132\023.Cmd.WeddingInvitee\"\250"
    "\001\n\025BuyWeddingPackageCCmd\022,\n\003cmd\030\001 \001(\0162\014."
    "Cmd.Command:\021WEDDINGC_PROTOCMD\022<\n\005param\030"
    "\002 \001(\0162\022.Cmd.WeddingCParam:\031WEDDINGCPARAM"
    "_BUY_PACKAGE\022\r\n\002id\030\003 \001(\r:\0010\022\024\n\tpriceitem"
    "\030\004 \001(\r:\0010\"\242\001\n\022BuyWeddingRingCCmd\022,\n\003cmd\030"
    "\001 \001(\0162\014.Cmd.Command:\021WEDDINGC_PROTOCMD\0229"
    "\n\005param\030\002 \001(\0162\022.Cmd.WeddingCParam:\026WEDDI"
    "NGCPARAM_BUY_RING\022\r\n\002id\030\003 \001(\r:\0010\022\024\n\tpric"
    "eitem\030\004 \001(\r:\0010\"\213\001\n\021WeddingInviteCCmd\022,\n\003"
    "cmd\030\001 \001(\0162\014.Cmd.Command:\021WEDDINGC_PROTOC"
    "MD\0227\n\005param\030\002 \001(\0162\022.Cmd.WeddingCParam:\024W"
    "EDDINGCPARAM_INVITE\022\017\n\007charids\030\003 \003(\004\"\260\001\n"
    "\026UploadWeddingPhotoCCmd\022,\n\003cmd\030\001 \001(\0162\014.C"
    "md.Command:\021WEDDINGC_PROTOCMD\022E\n\005param\030\002"
    " \001(\0162\022.Cmd.WeddingCParam:\"WEDDINGCPARAM_"
    "UPLOAD_WEDDING_PHOTO\022\020\n\005index\030\003 \001(\r:\0010\022\017"
    "\n\004time\030\004 \001(\r:\0010\"\251\001\n\023CheckCanReserveCCmd\022"
    ",\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\021WEDDINGC_PRO"
    "TOCMD\022B\n\005param\030\002 \001(\0162\022.Cmd.WeddingCParam"
    ":\037WEDDINGCPARAM_CHECK_CAN_RESERVE\022\017\n\007cha"
    "rid2\030\003 \001(\004\022\017\n\007success\030\004 \001(\010\"\246\001\n\022ReqPartn"
    "erInfoCCmd\022,\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\021W"
    "EDDINGC_PROTOCMD\022A\n\005param\030\002 \001(\0162\022.Cmd.We"
    "ddingCParam:\036WEDDINGCPARAM_REQ_PARTNER_I"
    "NFO\022\037\n\010chardata\030\003 \001(\0132\r.Cmd.CharData\"\252\001\n"
    "\022NtfWeddingInfoCCmd\022,\n\003cmd\030\001 \001(\0162\014.Cmd.C"
    "ommand:\021WEDDINGC_PROTOCMD\022A\n\005param\030\002 \001(\016"
    "2\022.Cmd.WeddingCParam:\036WEDDINGCPARAM_NTF_"
    "WEDDING_INFO\022#\n\004info\030\003 \001(\0132\025.Cmd.BirefWe"
    "ddingInfo\"\277\001\n\026InviteBeginWeddingCCmd\022,\n\003"
    "cmd\030\001 \001(\0162\014.Cmd.Command:\021WEDDINGC_PROTOC"
    "MD\022\?\n\005param\030\002 \001(\0162\022.Cmd.WeddingCParam:\034W"
    "EDDINGCPARAM_INVITE_WEDDING\022\023\n\010masterid\030"
    "\003 \001(\004:\0010\022\014\n\004name\030\005 \001(\t\022\023\n\010tocharid\030\006 \001(\004"
    ":\0010\"\232\001\n\025ReplyBeginWeddingCCmd\022,\n\003cmd\030\001 \001"
    "(\0162\014.Cmd.Command:\021WEDDINGC_PROTOCMD\022>\n\005p"
    "aram\030\002 \001(\0162\022.Cmd.WeddingCParam:\033WEDDINGC"
    "PARAM_REPLY_WEDDING\022\023\n\010masterid\030\003 \001(\004:\0010"
    "\"\204\001\n\022GoToWeddingPosCCmd\022,\n\003cmd\030\001 \001(\0162\014.C"
    "md.Command:\021WEDDINGC_PROTOCMD\022@\n\005param\030\002"
    " \001(\0162\022.Cmd.WeddingCParam:\035WEDDINGCPARAM_"
    "GOTO_WEDDINGPOS\"\272\001\n\023QuestionWeddingCCmd\022"
    ",\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\021WEDDINGC_PRO"
    "TOCMD\0229\n\005param\030\002 \001(\0162\022.Cmd.WeddingCParam"
    ":\026WEDDINGCPARAM_QUESTION\022\025\n\nquestionid\030\003"
    " \001(\r:\0010\022\017\n\007charids\030\004 \003(\004\022\022\n\007npcguid\030\005 \001("
    "\004:\0010\"\244\001\n\021AnswerWeddingCCmd\022,\n\003cmd\030\001 \001(\0162"
    "\014.Cmd.Command:\021WEDDINGC_PROTOCMD\0227\n\005para"
    "m\030\002 \001(\0162\022.Cmd.WeddingCParam:\024WEDDINGCPAR"
    "AM_ANSWER\022\025\n\nquestionid\030\003 \001(\r:\0010\022\021\n\006answ"
    "er\030\004 \001(\r:\0010\"\211\002\n\023WeddingEventMsgCCmd\022,\n\003c"
    "md\030\001 \001(\0162\014.Cmd.Command:\021WEDDINGC_PROTOCM"
    "D\022B\n\005param\030\002 \001(\0162\022.Cmd.WeddingCParam:\037WE"
    "DDINGCPARAM_WEDDING_EVENT_MSG\022\016\n\006charid\030"
    "\003 \001(\004\022!\n\005event\030\004 \001(\0162\022.Cmd.EWeddingEvent"
    "\022\n\n\002id\030\005 \001(\004\022\017\n\007charid1\030\006 \001(\004\022\017\n\007charid2"
    "\030\007 \001(\004\022\013\n\003msg\030\010 \001(\t\022\022\n\nopt_charid\030\t \001(\004\""
    "\226\001\n\017WeddingOverCCmd\022,\n\003cmd\030\001 \001(\0162\014.Cmd.C"
    "ommand:\021WEDDINGC_PROTOCMD\022=\n\005param\030\002 \001(\016"
    "2\022.Cmd.WeddingCParam:\032WEDDINGCPARAM_WEDD"
    "ING_STOP\022\026\n\007success\030\003 \001(\010:\005false\"\265\001\n\031Wed"
    "dingSwitchQuestionCCmd\022,\n\003cmd\030\001 \001(\0162\014.Cm"
    "d.Command:\021WEDDINGC_PROTOCMD\022@\n\005param\030\002 "
    "\001(\0162\022.Cmd.WeddingCParam:\035WEDDINGCPARAM_Q"
    "UESTION_SWITCH\022\024\n\005onoff\030\003 \001(\010:\005false\022\022\n\007"
    "npcguid\030\004 \001(\004:\0010\"\215\001\n\026EnterRollerCoasterC"
    "Cmd\022,\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\021WEDDINGC"
    "_PROTOCMD\022E\n\005param\030\002 \001(\0162\022.Cmd.WeddingCP"
    "aram:\"WEDDINGCPARAM_ENTER_ROLLER_COASTER"
    "\"\326\001\n\036DivorceRollerCoasterInviteCCmd\022,\n\003c"
    "md\030\001 \001(\0162\014.Cmd.Command:\021WEDDINGC_PROTOCM"
    "D\022N\n\005param\030\002 \001(\0162\022.Cmd.WeddingCParam:+WE"
    "DDINGCPARAM_DIVORCE_ROLLER_COASTER_INVIT"
    "E\022\017\n\007inviter\030\003 \001(\004\022\017\n\007invitee\030\004 \001(\004\022\024\n\014i"
    "nviter_name\030\005 \001(\t\"\311\001\n\035DivorceRollerCoast"
    "erReplyCCmd\022,\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\021"
    "WEDDINGC_PROTOCMD\022M\n\005param\030\002 \001(\0162\022.Cmd.W"
    "eddingCParam:*WEDDINGCPARAM_DIVORCE_ROLL"
    "ER_COASTER_REPLY\022\017\n\007inviter\030\003 \001(\004\022\032\n\005rep"
    "ly\030\005 \001(\0162\013.Cmd.EReply\"\206\001\n\023EnterWeddingMa"
    "pCCmd\022,\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\021WEDDIN"
    "GC_PROTOCMD\022A\n\005param\030\002 \001(\0162\022.Cmd.Wedding"
    "CParam:\036WEDDINGCPARAM_ENTER_WEDDINGMAP\"\205"
    "\001\n\024MissyouInviteWedCCmd\022,\n\003cmd\030\001 \001(\0162\014.C"
    "md.Command:\021WEDDINGC_PROTOCMD\022\?\n\005param\030\002"
    " \001(\0162\022.Cmd.WeddingCParam:\034WEDDINGCPARAM_"
    "MISSYOU_INVITE\"\232\001\n\024MisccyouReplyWedCCmd\022"
    ",\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\021WEDDINGC_PRO"
    "TOCMD\022>\n\005param\030\002 \001(\0162\022.Cmd.WeddingCParam"
    ":\033WEDDINGCPARAM_MISSYOU_REPLY\022\024\n\005agree\030\003"
    " \001(\010:\005false\"|\n\022WeddingCarrierCCmd\022,\n\003cmd"
    "\030\001 \001(\0162\014.Cmd.Command:\021WEDDINGC_PROTOCMD\022"
    "8\n\005param\030\002 \001(\0162\022.Cmd.WeddingCParam:\025WEDD"
    "INGCPARAM_CARRIER*\340\010\n\rWeddingCParam\022&\n\"W"
    "EDDINGCPARAM_REQ_WEDDINGDATE_LIST\020\001\022)\n%W"
    "EDDINGCPARAM_REQ_WEDDING_ONEDAY_LIST\020\003\022\""
    "\n\036WEDDINGCPARAM_REQ_WEDDING_INFO\020\004\022%\n!WE"
    "DDINGCPARAM_RESERVE_WEDDINGDATE\020\005\022)\n%WED"
    "DINGCPARAM_NTF_RESERVE_WEDDINGDATE\020\006\022+\n\'"
    "WEDDINGCPARAM_REPLY_RESERVE_WEDDINGDATE\020"
    "\007\022 \n\034WEDDINGCPARAM_GIVEUP_RESERVE\020\010\022\035\n\031W"
    "EDDINGCPARAM_REQ_DIVORCE\020\t\022\037\n\033WEDDINGCPA"
    "RAM_UPDATE_MANUAL\020\n\022\035\n\031WEDDINGCPARAM_BUY"
    "_PACKAGE\020\013\022\032\n\026WEDDINGCPARAM_BUY_RING\020\014\022\030"
    "\n\024WEDDINGCPARAM_INVITE\020\r\022&\n\"WEDDINGCPARA"
    "M_UPLOAD_WEDDING_PHOTO\020\016\022#\n\037WEDDINGCPARA"
    "M_CHECK_CAN_RESERVE\020\017\022\"\n\036WEDDINGCPARAM_R"
    "EQ_PARTNER_INFO\020\020\022\"\n\036WEDDINGCPARAM_NTF_W"
    "EDDING_INFO\020\021\022 \n\034WEDDINGCPARAM_INVITE_WE"
    "DDING\020\022\022\037\n\033WEDDINGCPARAM_REPLY_WEDDING\020\023"
    "\022!\n\035WEDDINGCPARAM_GOTO_WEDDINGPOS\020\024\022\032\n\026W"
    "EDDINGCPARAM_QUESTION\020\025\022\030\n\024WEDDINGCPARAM"
    "_ANSWER\020\026\022#\n\037WEDDINGCPARAM_WEDDING_EVENT"
    "_MSG\020\027\022\036\n\032WEDDINGCPARAM_WEDDING_STOP\020\030\022!"
    "\n\035WEDDINGCPARAM_QUESTION_SWITCH\020\031\022&\n\"WED"
    "DINGCPARAM_ENTER_ROLLER_COASTER\020\032\022/\n+WED"
    "DINGCPARAM_DIVORCE_ROLLER_COASTER_INVITE"
    "\020\033\022.\n*WEDDINGCPARAM_DIVORCE_ROLLER_COAST"
    "ER_REPLY\020\034\022\"\n\036WEDDINGCPARAM_ENTER_WEDDIN"
    "GMAP\020\035\022 \n\034WEDDINGCPARAM_MISSYOU_INVITE\020\036"
    "\022\037\n\033WEDDINGCPARAM_MISSYOU_REPLY\020\037\022\031\n\025WED"
    "DINGCPARAM_CARRIER\020 *N\n\013EDateStatus\022\024\n\020E"
    "DateStatus_None\020\000\022\024\n\020EDateStatus_Full\020\001\022"
    "\023\n\017EdateStatus_Hot\020\002*a\n\016EWeddingStatus\022\032"
    "\n\026EWeddingStatus_Reserve\020\000\022\032\n\026EWeddingSt"
    "atus_Married\020\001\022\027\n\023EWeddingStatus_None\020\002*"
    "-\n\006EReply\022\020\n\014EReply_Agree\020\001\022\021\n\rEReply_Re"
    "fuse\020\002*o\n\013EGiveUpType\022\030\n\024EGiveUpType_Tog"
    "ether\020\001\022\026\n\022EGiveUpType_Single\020\002\022\025\n\021EGive"
    "UpType_Force\020\003\022\027\n\023EGiveUpType_DelChar\020\004*"
    "\327\002\n\rEWeddingEvent\022\031\n\025EWeddingEvent_Reser"
    "ve\020\001\022\037\n\033EWeddingEvent_GiveupReserve\020\002\022\027\n"
    "\023EWeddingEvent_Marry\020\003\022&\n\"EWeddingEvent_"
    "CancelReserveTimeOut\020\005\022\"\n\036EWeddingEvent_"
    "CancelReserveSys\020\006\022!\n\035EWeddingEvent_Divo"
    "rceTogether\020\007\022\037\n\033EWeddingEvent_DivorceSi"
    "ngle\020\010\022\036\n\032EWeddingEvent_DivorceForce\020\t\022 "
    "\n\034EWeddingEvent_DivorceDelChar\020\n\022\037\n\033EWed"
    "dingEvent_DelInvitation\020\013", 8425);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "WeddingCCmd.proto", &protobuf_RegisterTypes);
  WeddingDateStatus::default_instance_ = new WeddingDateStatus();
  ReqWeddingDateListCCmd::default_instance_ = new ReqWeddingDateListCCmd();
  WeddingOneDayInfo::default_instance_ = new WeddingOneDayInfo();
  ReqWeddingOneDayListCCmd::default_instance_ = new ReqWeddingOneDayListCCmd();
  CharData::default_instance_ = new CharData();
  BirefWeddingInfo::default_instance_ = new BirefWeddingInfo();
  ReqWeddingInfoCCmd::default_instance_ = new ReqWeddingInfoCCmd();
  ReserveWeddingDateCCmd::default_instance_ = new ReserveWeddingDateCCmd();
  NtfReserveWeddingDateCCmd::default_instance_ = new NtfReserveWeddingDateCCmd();
  ReplyReserveWeddingDateCCmd::default_instance_ = new ReplyReserveWeddingDateCCmd();
  GiveUpReserveCCmd::default_instance_ = new GiveUpReserveCCmd();
  ReqDivorceCCmd::default_instance_ = new ReqDivorceCCmd();
  ClientWeddingManual::default_instance_ = new ClientWeddingManual();
  WeddingInvitee::default_instance_ = new WeddingInvitee();
  UpdateWeddingManualCCmd::default_instance_ = new UpdateWeddingManualCCmd();
  BuyWeddingPackageCCmd::default_instance_ = new BuyWeddingPackageCCmd();
  BuyWeddingRingCCmd::default_instance_ = new BuyWeddingRingCCmd();
  WeddingInviteCCmd::default_instance_ = new WeddingInviteCCmd();
  UploadWeddingPhotoCCmd::default_instance_ = new UploadWeddingPhotoCCmd();
  CheckCanReserveCCmd::default_instance_ = new CheckCanReserveCCmd();
  ReqPartnerInfoCCmd::default_instance_ = new ReqPartnerInfoCCmd();
  NtfWeddingInfoCCmd::default_instance_ = new NtfWeddingInfoCCmd();
  InviteBeginWeddingCCmd::default_instance_ = new InviteBeginWeddingCCmd();
  ReplyBeginWeddingCCmd::default_instance_ = new ReplyBeginWeddingCCmd();
  GoToWeddingPosCCmd::default_instance_ = new GoToWeddingPosCCmd();
  QuestionWeddingCCmd::default_instance_ = new QuestionWeddingCCmd();
  AnswerWeddingCCmd::default_instance_ = new AnswerWeddingCCmd();
  WeddingEventMsgCCmd::default_instance_ = new WeddingEventMsgCCmd();
  WeddingOverCCmd::default_instance_ = new WeddingOverCCmd();
  WeddingSwitchQuestionCCmd::default_instance_ = new WeddingSwitchQuestionCCmd();
  EnterRollerCoasterCCmd::default_instance_ = new EnterRollerCoasterCCmd();
  DivorceRollerCoasterInviteCCmd::default_instance_ = new DivorceRollerCoasterInviteCCmd();
  DivorceRollerCoasterReplyCCmd::default_instance_ = new DivorceRollerCoasterReplyCCmd();
  EnterWeddingMapCCmd::default_instance_ = new EnterWeddingMapCCmd();
  MissyouInviteWedCCmd::default_instance_ = new MissyouInviteWedCCmd();
  MisccyouReplyWedCCmd::default_instance_ = new MisccyouReplyWedCCmd();
  WeddingCarrierCCmd::default_instance_ = new WeddingCarrierCCmd();
  WeddingDateStatus::default_instance_->InitAsDefaultInstance();
  ReqWeddingDateListCCmd::default_instance_->InitAsDefaultInstance();
  WeddingOneDayInfo::default_instance_->InitAsDefaultInstance();
  ReqWeddingOneDayListCCmd::default_instance_->InitAsDefaultInstance();
  CharData::default_instance_->InitAsDefaultInstance();
  BirefWeddingInfo::default_instance_->InitAsDefaultInstance();
  ReqWeddingInfoCCmd::default_instance_->InitAsDefaultInstance();
  ReserveWeddingDateCCmd::default_instance_->InitAsDefaultInstance();
  NtfReserveWeddingDateCCmd::default_instance_->InitAsDefaultInstance();
  ReplyReserveWeddingDateCCmd::default_instance_->InitAsDefaultInstance();
  GiveUpReserveCCmd::default_instance_->InitAsDefaultInstance();
  ReqDivorceCCmd::default_instance_->InitAsDefaultInstance();
  ClientWeddingManual::default_instance_->InitAsDefaultInstance();
  WeddingInvitee::default_instance_->InitAsDefaultInstance();
  UpdateWeddingManualCCmd::default_instance_->InitAsDefaultInstance();
  BuyWeddingPackageCCmd::default_instance_->InitAsDefaultInstance();
  BuyWeddingRingCCmd::default_instance_->InitAsDefaultInstance();
  WeddingInviteCCmd::default_instance_->InitAsDefaultInstance();
  UploadWeddingPhotoCCmd::default_instance_->InitAsDefaultInstance();
  CheckCanReserveCCmd::default_instance_->InitAsDefaultInstance();
  ReqPartnerInfoCCmd::default_instance_->InitAsDefaultInstance();
  NtfWeddingInfoCCmd::default_instance_->InitAsDefaultInstance();
  InviteBeginWeddingCCmd::default_instance_->InitAsDefaultInstance();
  ReplyBeginWeddingCCmd::default_instance_->InitAsDefaultInstance();
  GoToWeddingPosCCmd::default_instance_->InitAsDefaultInstance();
  QuestionWeddingCCmd::default_instance_->InitAsDefaultInstance();
  AnswerWeddingCCmd::default_instance_->InitAsDefaultInstance();
  WeddingEventMsgCCmd::default_instance_->InitAsDefaultInstance();
  WeddingOverCCmd::default_instance_->InitAsDefaultInstance();
  WeddingSwitchQuestionCCmd::default_instance_->InitAsDefaultInstance();
  EnterRollerCoasterCCmd::default_instance_->InitAsDefaultInstance();
  DivorceRollerCoasterInviteCCmd::default_instance_->InitAsDefaultInstance();
  DivorceRollerCoasterReplyCCmd::default_instance_->InitAsDefaultInstance();
  EnterWeddingMapCCmd::default_instance_->InitAsDefaultInstance();
  MissyouInviteWedCCmd::default_instance_->InitAsDefaultInstance();
  MisccyouReplyWedCCmd::default_instance_->InitAsDefaultInstance();
  WeddingCarrierCCmd::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_WeddingCCmd_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_WeddingCCmd_2eproto {
  StaticDescriptorInitializer_WeddingCCmd_2eproto() {
    protobuf_AddDesc_WeddingCCmd_2eproto();
  }
} static_descriptor_initializer_WeddingCCmd_2eproto_;
const ::google::protobuf::EnumDescriptor* WeddingCParam_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WeddingCParam_descriptor_;
}
bool WeddingCParam_IsValid(int value) {
  switch(value) {
    case 1:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EDateStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EDateStatus_descriptor_;
}
bool EDateStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EWeddingStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EWeddingStatus_descriptor_;
}
bool EWeddingStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EReply_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EReply_descriptor_;
}
bool EReply_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EGiveUpType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EGiveUpType_descriptor_;
}
bool EGiveUpType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EWeddingEvent_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EWeddingEvent_descriptor_;
}
bool EWeddingEvent_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int WeddingDateStatus::kDateFieldNumber;
const int WeddingDateStatus::kCountFieldNumber;
const int WeddingDateStatus::kStatusFieldNumber;
#endif  // !_MSC_VER

WeddingDateStatus::WeddingDateStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.WeddingDateStatus)
}

void WeddingDateStatus::InitAsDefaultInstance() {
}

WeddingDateStatus::WeddingDateStatus(const WeddingDateStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.WeddingDateStatus)
}

void WeddingDateStatus::SharedCtor() {
  _cached_size_ = 0;
  date_ = 0u;
  count_ = 0u;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WeddingDateStatus::~WeddingDateStatus() {
  // @@protoc_insertion_point(destructor:Cmd.WeddingDateStatus)
  SharedDtor();
}

void WeddingDateStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WeddingDateStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeddingDateStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WeddingDateStatus_descriptor_;
}

const WeddingDateStatus& WeddingDateStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WeddingCCmd_2eproto();
  return *default_instance_;
}

WeddingDateStatus* WeddingDateStatus::default_instance_ = NULL;

WeddingDateStatus* WeddingDateStatus::New() const {
  return new WeddingDateStatus;
}

void WeddingDateStatus::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<WeddingDateStatus*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(date_, status_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WeddingDateStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.WeddingDateStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 date = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &date_)));
          set_has_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional .Cmd.EDateStatus status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EDateStatus_IsValid(value)) {
            set_status(static_cast< ::Cmd::EDateStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // optional uint32 count = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.WeddingDateStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.WeddingDateStatus)
  return false;
#undef DO_
}

void WeddingDateStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.WeddingDateStatus)
  // optional uint32 date = 1 [default = 0];
  if (has_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->date(), output);
  }

  // optional .Cmd.EDateStatus status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // optional uint32 count = 3 [default = 0];
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.WeddingDateStatus)
}

::google::protobuf::uint8* WeddingDateStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.WeddingDateStatus)
  // optional uint32 date = 1 [default = 0];
  if (has_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->date(), target);
  }

  // optional .Cmd.EDateStatus status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  // optional uint32 count = 3 [default = 0];
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.WeddingDateStatus)
  return target;
}

int WeddingDateStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 date = 1 [default = 0];
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->date());
    }

    // optional uint32 count = 3 [default = 0];
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional .Cmd.EDateStatus status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeddingDateStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WeddingDateStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WeddingDateStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WeddingDateStatus::MergeFrom(const WeddingDateStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_date()) {
      set_date(from.date());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WeddingDateStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeddingDateStatus::CopyFrom(const WeddingDateStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeddingDateStatus::IsInitialized() const {

  return true;
}

void WeddingDateStatus::Swap(WeddingDateStatus* other) {
  if (other != this) {
    std::swap(date_, other->date_);
    std::swap(count_, other->count_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WeddingDateStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WeddingDateStatus_descriptor_;
  metadata.reflection = WeddingDateStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqWeddingDateListCCmd::kCmdFieldNumber;
const int ReqWeddingDateListCCmd::kParamFieldNumber;
const int ReqWeddingDateListCCmd::kDateListFieldNumber;
const int ReqWeddingDateListCCmd::kUseTicketFieldNumber;
#endif  // !_MSC_VER

ReqWeddingDateListCCmd::ReqWeddingDateListCCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ReqWeddingDateListCCmd)
}

void ReqWeddingDateListCCmd::InitAsDefaultInstance() {
}

ReqWeddingDateListCCmd::ReqWeddingDateListCCmd(const ReqWeddingDateListCCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ReqWeddingDateListCCmd)
}

void ReqWeddingDateListCCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 65;
  param_ = 1;
  use_ticket_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqWeddingDateListCCmd::~ReqWeddingDateListCCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ReqWeddingDateListCCmd)
  SharedDtor();
}

void ReqWeddingDateListCCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqWeddingDateListCCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqWeddingDateListCCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqWeddingDateListCCmd_descriptor_;
}

const ReqWeddingDateListCCmd& ReqWeddingDateListCCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WeddingCCmd_2eproto();
  return *default_instance_;
}

ReqWeddingDateListCCmd* ReqWeddingDateListCCmd::default_instance_ = NULL;

ReqWeddingDateListCCmd* ReqWeddingDateListCCmd::New() const {
  return new ReqWeddingDateListCCmd;
}

void ReqWeddingDateListCCmd::Clear() {
  if (_has_bits_[0 / 32] & 11) {
    cmd_ = 65;
    param_ = 1;
    use_ticket_ = false;
  }
  date_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqWeddingDateListCCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ReqWeddingDateListCCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_REQ_WEDDINGDATE_LIST];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::WeddingCParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::WeddingCParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_date_list;
        break;
      }

      // repeated .Cmd.WeddingDateStatus date_list = 3;
      case 3: {
        if (tag == 26) {
         parse_date_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_date_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_date_list;
        if (input->ExpectTag(32)) goto parse_use_ticket;
        break;
      }

      // optional bool use_ticket = 4;
      case 4: {
        if (tag == 32) {
         parse_use_ticket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_ticket_)));
          set_has_use_ticket();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ReqWeddingDateListCCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ReqWeddingDateListCCmd)
  return false;
#undef DO_
}

void ReqWeddingDateListCCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ReqWeddingDateListCCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_REQ_WEDDINGDATE_LIST];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.WeddingDateStatus date_list = 3;
  for (int i = 0; i < this->date_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->date_list(i), output);
  }

  // optional bool use_ticket = 4;
  if (has_use_ticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->use_ticket(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ReqWeddingDateListCCmd)
}

::google::protobuf::uint8* ReqWeddingDateListCCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ReqWeddingDateListCCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_REQ_WEDDINGDATE_LIST];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.WeddingDateStatus date_list = 3;
  for (int i = 0; i < this->date_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->date_list(i), target);
  }

  // optional bool use_ticket = 4;
  if (has_use_ticket()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->use_ticket(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ReqWeddingDateListCCmd)
  return target;
}

int ReqWeddingDateListCCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_REQ_WEDDINGDATE_LIST];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional bool use_ticket = 4;
    if (has_use_ticket()) {
      total_size += 1 + 1;
    }

  }
  // repeated .Cmd.WeddingDateStatus date_list = 3;
  total_size += 1 * this->date_list_size();
  for (int i = 0; i < this->date_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->date_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqWeddingDateListCCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqWeddingDateListCCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqWeddingDateListCCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqWeddingDateListCCmd::MergeFrom(const ReqWeddingDateListCCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  date_list_.MergeFrom(from.date_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_use_ticket()) {
      set_use_ticket(from.use_ticket());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqWeddingDateListCCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqWeddingDateListCCmd::CopyFrom(const ReqWeddingDateListCCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqWeddingDateListCCmd::IsInitialized() const {

  return true;
}

void ReqWeddingDateListCCmd::Swap(ReqWeddingDateListCCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    date_list_.Swap(&other->date_list_);
    std::swap(use_ticket_, other->use_ticket_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqWeddingDateListCCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqWeddingDateListCCmd_descriptor_;
  metadata.reflection = ReqWeddingDateListCCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WeddingOneDayInfo::kConfigidFieldNumber;
const int WeddingOneDayInfo::kBanFieldNumber;
const int WeddingOneDayInfo::kStarttimeFieldNumber;
const int WeddingOneDayInfo::kEndtimeFieldNumber;
const int WeddingOneDayInfo::kPriceFieldNumber;
const int WeddingOneDayInfo::kIdFieldNumber;
#endif  // !_MSC_VER

WeddingOneDayInfo::WeddingOneDayInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.WeddingOneDayInfo)
}

void WeddingOneDayInfo::InitAsDefaultInstance() {
}

WeddingOneDayInfo::WeddingOneDayInfo(const WeddingOneDayInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.WeddingOneDayInfo)
}

void WeddingOneDayInfo::SharedCtor() {
  _cached_size_ = 0;
  configid_ = 0u;
  ban_ = false;
  starttime_ = 0u;
  endtime_ = 0u;
  price_ = 0u;
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WeddingOneDayInfo::~WeddingOneDayInfo() {
  // @@protoc_insertion_point(destructor:Cmd.WeddingOneDayInfo)
  SharedDtor();
}

void WeddingOneDayInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WeddingOneDayInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeddingOneDayInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WeddingOneDayInfo_descriptor_;
}

const WeddingOneDayInfo& WeddingOneDayInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WeddingCCmd_2eproto();
  return *default_instance_;
}

WeddingOneDayInfo* WeddingOneDayInfo::default_instance_ = NULL;

WeddingOneDayInfo* WeddingOneDayInfo::New() const {
  return new WeddingOneDayInfo;
}

void WeddingOneDayInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<WeddingOneDayInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(configid_, price_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WeddingOneDayInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.WeddingOneDayInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 configid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &configid_)));
          set_has_configid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ban;
        break;
      }

      // optional bool ban = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_ban:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ban_)));
          set_has_ban();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_starttime;
        break;
      }

      // optional uint32 starttime = 3;
      case 3: {
        if (tag == 24) {
         parse_starttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_endtime;
        break;
      }

      // optional uint32 endtime = 4;
      case 4: {
        if (tag == 32) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_price;
        break;
      }

      // optional uint32 price = 5;
      case 5: {
        if (tag == 40) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_id;
        break;
      }

      // optional uint64 id = 6;
      case 6: {
        if (tag == 48) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.WeddingOneDayInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.WeddingOneDayInfo)
  return false;
#undef DO_
}

void WeddingOneDayInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.WeddingOneDayInfo)
  // optional uint32 configid = 1;
  if (has_configid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->configid(), output);
  }

  // optional bool ban = 2 [default = false];
  if (has_ban()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->ban(), output);
  }

  // optional uint32 starttime = 3;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->starttime(), output);
  }

  // optional uint32 endtime = 4;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->endtime(), output);
  }

  // optional uint32 price = 5;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->price(), output);
  }

  // optional uint64 id = 6;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.WeddingOneDayInfo)
}

::google::protobuf::uint8* WeddingOneDayInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.WeddingOneDayInfo)
  // optional uint32 configid = 1;
  if (has_configid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->configid(), target);
  }

  // optional bool ban = 2 [default = false];
  if (has_ban()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->ban(), target);
  }

  // optional uint32 starttime = 3;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->starttime(), target);
  }

  // optional uint32 endtime = 4;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->endtime(), target);
  }

  // optional uint32 price = 5;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->price(), target);
  }

  // optional uint64 id = 6;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.WeddingOneDayInfo)
  return target;
}

int WeddingOneDayInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 configid = 1;
    if (has_configid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->configid());
    }

    // optional bool ban = 2 [default = false];
    if (has_ban()) {
      total_size += 1 + 1;
    }

    // optional uint32 starttime = 3;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->starttime());
    }

    // optional uint32 endtime = 4;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endtime());
    }

    // optional uint32 price = 5;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->price());
    }

    // optional uint64 id = 6;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeddingOneDayInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WeddingOneDayInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WeddingOneDayInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WeddingOneDayInfo::MergeFrom(const WeddingOneDayInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_configid()) {
      set_configid(from.configid());
    }
    if (from.has_ban()) {
      set_ban(from.ban());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WeddingOneDayInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeddingOneDayInfo::CopyFrom(const WeddingOneDayInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeddingOneDayInfo::IsInitialized() const {

  return true;
}

void WeddingOneDayInfo::Swap(WeddingOneDayInfo* other) {
  if (other != this) {
    std::swap(configid_, other->configid_);
    std::swap(ban_, other->ban_);
    std::swap(starttime_, other->starttime_);
    std::swap(endtime_, other->endtime_);
    std::swap(price_, other->price_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WeddingOneDayInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WeddingOneDayInfo_descriptor_;
  metadata.reflection = WeddingOneDayInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqWeddingOneDayListCCmd::kCmdFieldNumber;
const int ReqWeddingOneDayListCCmd::kParamFieldNumber;
const int ReqWeddingOneDayListCCmd::kDateFieldNumber;
const int ReqWeddingOneDayListCCmd::kInfoFieldNumber;
#endif  // !_MSC_VER

ReqWeddingOneDayListCCmd::ReqWeddingOneDayListCCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ReqWeddingOneDayListCCmd)
}

void ReqWeddingOneDayListCCmd::InitAsDefaultInstance() {
}

ReqWeddingOneDayListCCmd::ReqWeddingOneDayListCCmd(const ReqWeddingOneDayListCCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ReqWeddingOneDayListCCmd)
}

void ReqWeddingOneDayListCCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 65;
  param_ = 3;
  date_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqWeddingOneDayListCCmd::~ReqWeddingOneDayListCCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ReqWeddingOneDayListCCmd)
  SharedDtor();
}

void ReqWeddingOneDayListCCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqWeddingOneDayListCCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqWeddingOneDayListCCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqWeddingOneDayListCCmd_descriptor_;
}

const ReqWeddingOneDayListCCmd& ReqWeddingOneDayListCCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WeddingCCmd_2eproto();
  return *default_instance_;
}

ReqWeddingOneDayListCCmd* ReqWeddingOneDayListCCmd::default_instance_ = NULL;

ReqWeddingOneDayListCCmd* ReqWeddingOneDayListCCmd::New() const {
  return new ReqWeddingOneDayListCCmd;
}

void ReqWeddingOneDayListCCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 65;
    param_ = 3;
    date_ = 0u;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqWeddingOneDayListCCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ReqWeddingOneDayListCCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_REQ_WEDDING_ONEDAY_LIST];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::WeddingCParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::WeddingCParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_date;
        break;
      }

      // optional uint32 date = 3;
      case 3: {
        if (tag == 24) {
         parse_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &date_)));
          set_has_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_info;
        break;
      }

      // repeated .Cmd.WeddingOneDayInfo info = 4;
      case 4: {
        if (tag == 34) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_info;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ReqWeddingOneDayListCCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ReqWeddingOneDayListCCmd)
  return false;
#undef DO_
}

void ReqWeddingOneDayListCCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ReqWeddingOneDayListCCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_REQ_WEDDING_ONEDAY_LIST];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 date = 3;
  if (has_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->date(), output);
  }

  // repeated .Cmd.WeddingOneDayInfo info = 4;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ReqWeddingOneDayListCCmd)
}

::google::protobuf::uint8* ReqWeddingOneDayListCCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ReqWeddingOneDayListCCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_REQ_WEDDING_ONEDAY_LIST];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 date = 3;
  if (has_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->date(), target);
  }

  // repeated .Cmd.WeddingOneDayInfo info = 4;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ReqWeddingOneDayListCCmd)
  return target;
}

int ReqWeddingOneDayListCCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_REQ_WEDDING_ONEDAY_LIST];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 date = 3;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->date());
    }

  }
  // repeated .Cmd.WeddingOneDayInfo info = 4;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqWeddingOneDayListCCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqWeddingOneDayListCCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqWeddingOneDayListCCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqWeddingOneDayListCCmd::MergeFrom(const ReqWeddingOneDayListCCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_date()) {
      set_date(from.date());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqWeddingOneDayListCCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqWeddingOneDayListCCmd::CopyFrom(const ReqWeddingOneDayListCCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqWeddingOneDayListCCmd::IsInitialized() const {

  return true;
}

void ReqWeddingOneDayListCCmd::Swap(ReqWeddingOneDayListCCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(date_, other->date_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqWeddingOneDayListCCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqWeddingOneDayListCCmd_descriptor_;
  metadata.reflection = ReqWeddingOneDayListCCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharData::kCharidFieldNumber;
const int CharData::kNameFieldNumber;
const int CharData::kProfessionFieldNumber;
const int CharData::kGenderFieldNumber;
const int CharData::kPortraitFieldNumber;
const int CharData::kHairFieldNumber;
const int CharData::kHaircolorFieldNumber;
const int CharData::kBodyFieldNumber;
const int CharData::kHeadFieldNumber;
const int CharData::kFaceFieldNumber;
const int CharData::kMouthFieldNumber;
const int CharData::kEyeFieldNumber;
const int CharData::kLevelFieldNumber;
const int CharData::kGuildnameFieldNumber;
#endif  // !_MSC_VER

CharData::CharData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.CharData)
}

void CharData::InitAsDefaultInstance() {
}

CharData::CharData(const CharData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.CharData)
}

void CharData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  profession_ = 0u;
  gender_ = 0;
  portrait_ = 0u;
  hair_ = 0u;
  haircolor_ = 0u;
  body_ = 0u;
  head_ = 0u;
  face_ = 0u;
  mouth_ = 0u;
  eye_ = 0u;
  level_ = 0u;
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharData::~CharData() {
  // @@protoc_insertion_point(destructor:Cmd.CharData)
  SharedDtor();
}

void CharData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guildname_;
  }
  if (this != default_instance_) {
  }
}

void CharData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharData_descriptor_;
}

const CharData& CharData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WeddingCCmd_2eproto();
  return *default_instance_;
}

CharData* CharData::default_instance_ = NULL;

CharData* CharData::New() const {
  return new CharData;
}

void CharData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CharData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(profession_, body_);
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 16128) {
    ZR_(head_, eye_);
    level_ = 0u;
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guildname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.CharData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 charid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_profession;
        break;
      }

      // optional uint32 profession = 3;
      case 3: {
        if (tag == 24) {
         parse_profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &profession_)));
          set_has_profession();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gender;
        break;
      }

      // optional .Cmd.EGender gender = 4;
      case 4: {
        if (tag == 32) {
         parse_gender:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EGender_IsValid(value)) {
            set_gender(static_cast< ::Cmd::EGender >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_portrait;
        break;
      }

      // optional uint32 portrait = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_portrait:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &portrait_)));
          set_has_portrait();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_hair;
        break;
      }

      // optional uint32 hair = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_hair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hair_)));
          set_has_hair();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_haircolor;
        break;
      }

      // optional uint32 haircolor = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_haircolor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &haircolor_)));
          set_has_haircolor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_body;
        break;
      }

      // optional uint32 body = 9 [default = 0];
      case 9: {
        if (tag == 72) {
         parse_body:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &body_)));
          set_has_body();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_head;
        break;
      }

      // optional uint32 head = 10 [default = 0];
      case 10: {
        if (tag == 80) {
         parse_head:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &head_)));
          set_has_head();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_face;
        break;
      }

      // optional uint32 face = 11 [default = 0];
      case 11: {
        if (tag == 88) {
         parse_face:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &face_)));
          set_has_face();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_mouth;
        break;
      }

      // optional uint32 mouth = 12 [default = 0];
      case 12: {
        if (tag == 96) {
         parse_mouth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mouth_)));
          set_has_mouth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_eye;
        break;
      }

      // optional uint32 eye = 13 [default = 0];
      case 13: {
        if (tag == 104) {
         parse_eye:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eye_)));
          set_has_eye();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_level;
        break;
      }

      // optional uint32 level = 14;
      case 14: {
        if (tag == 112) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_guildname;
        break;
      }

      // optional string guildname = 15;
      case 15: {
        if (tag == 122) {
         parse_guildname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guildname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.CharData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.CharData)
  return false;
#undef DO_
}

void CharData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.CharData)
  // optional uint64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional uint32 profession = 3;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->profession(), output);
  }

  // optional .Cmd.EGender gender = 4;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->gender(), output);
  }

  // optional uint32 portrait = 5 [default = 0];
  if (has_portrait()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->portrait(), output);
  }

  // optional uint32 hair = 7 [default = 0];
  if (has_hair()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->hair(), output);
  }

  // optional uint32 haircolor = 8 [default = 0];
  if (has_haircolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->haircolor(), output);
  }

  // optional uint32 body = 9 [default = 0];
  if (has_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->body(), output);
  }

  // optional uint32 head = 10 [default = 0];
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->head(), output);
  }

  // optional uint32 face = 11 [default = 0];
  if (has_face()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->face(), output);
  }

  // optional uint32 mouth = 12 [default = 0];
  if (has_mouth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->mouth(), output);
  }

  // optional uint32 eye = 13 [default = 0];
  if (has_eye()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->eye(), output);
  }

  // optional uint32 level = 14;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->level(), output);
  }

  // optional string guildname = 15;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guildname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->guildname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.CharData)
}

::google::protobuf::uint8* CharData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.CharData)
  // optional uint64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 profession = 3;
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->profession(), target);
  }

  // optional .Cmd.EGender gender = 4;
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->gender(), target);
  }

  // optional uint32 portrait = 5 [default = 0];
  if (has_portrait()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->portrait(), target);
  }

  // optional uint32 hair = 7 [default = 0];
  if (has_hair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->hair(), target);
  }

  // optional uint32 haircolor = 8 [default = 0];
  if (has_haircolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->haircolor(), target);
  }

  // optional uint32 body = 9 [default = 0];
  if (has_body()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->body(), target);
  }

  // optional uint32 head = 10 [default = 0];
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->head(), target);
  }

  // optional uint32 face = 11 [default = 0];
  if (has_face()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->face(), target);
  }

  // optional uint32 mouth = 12 [default = 0];
  if (has_mouth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->mouth(), target);
  }

  // optional uint32 eye = 13 [default = 0];
  if (has_eye()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->eye(), target);
  }

  // optional uint32 level = 14;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->level(), target);
  }

  // optional string guildname = 15;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guildname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->guildname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.CharData)
  return target;
}

int CharData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 profession = 3;
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->profession());
    }

    // optional .Cmd.EGender gender = 4;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gender());
    }

    // optional uint32 portrait = 5 [default = 0];
    if (has_portrait()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->portrait());
    }

    // optional uint32 hair = 7 [default = 0];
    if (has_hair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hair());
    }

    // optional uint32 haircolor = 8 [default = 0];
    if (has_haircolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->haircolor());
    }

    // optional uint32 body = 9 [default = 0];
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->body());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 head = 10 [default = 0];
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->head());
    }

    // optional uint32 face = 11 [default = 0];
    if (has_face()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->face());
    }

    // optional uint32 mouth = 12 [default = 0];
    if (has_mouth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mouth());
    }

    // optional uint32 eye = 13 [default = 0];
    if (has_eye()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eye());
    }

    // optional uint32 level = 14;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional string guildname = 15;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharData::MergeFrom(const CharData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_portrait()) {
      set_portrait(from.portrait());
    }
    if (from.has_hair()) {
      set_hair(from.hair());
    }
    if (from.has_haircolor()) {
      set_haircolor(from.haircolor());
    }
    if (from.has_body()) {
      set_body(from.body());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_head()) {
      set_head(from.head());
    }
    if (from.has_face()) {
      set_face(from.face());
    }
    if (from.has_mouth()) {
      set_mouth(from.mouth());
    }
    if (from.has_eye()) {
      set_eye(from.eye());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharData::CopyFrom(const CharData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharData::IsInitialized() const {

  return true;
}

void CharData::Swap(CharData* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(profession_, other->profession_);
    std::swap(gender_, other->gender_);
    std::swap(portrait_, other->portrait_);
    std::swap(hair_, other->hair_);
    std::swap(haircolor_, other->haircolor_);
    std::swap(body_, other->body_);
    std::swap(head_, other->head_);
    std::swap(face_, other->face_);
    std::swap(mouth_, other->mouth_);
    std::swap(eye_, other->eye_);
    std::swap(level_, other->level_);
    std::swap(guildname_, other->guildname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharData_descriptor_;
  metadata.reflection = CharData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BirefWeddingInfo::kIdFieldNumber;
const int BirefWeddingInfo::kStatusFieldNumber;
const int BirefWeddingInfo::kChar1FieldNumber;
const int BirefWeddingInfo::kChar2FieldNumber;
const int BirefWeddingInfo::kZoneidFieldNumber;
const int BirefWeddingInfo::kStarttimeFieldNumber;
const int BirefWeddingInfo::kEndtimeFieldNumber;
const int BirefWeddingInfo::kCanSingleDivorceFieldNumber;
#endif  // !_MSC_VER

BirefWeddingInfo::BirefWeddingInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BirefWeddingInfo)
}

void BirefWeddingInfo::InitAsDefaultInstance() {
  char1_ = const_cast< ::Cmd::CharData*>(&::Cmd::CharData::default_instance());
  char2_ = const_cast< ::Cmd::CharData*>(&::Cmd::CharData::default_instance());
}

BirefWeddingInfo::BirefWeddingInfo(const BirefWeddingInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BirefWeddingInfo)
}

void BirefWeddingInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  status_ = 0;
  char1_ = NULL;
  char2_ = NULL;
  zoneid_ = 0u;
  starttime_ = 0u;
  endtime_ = 0u;
  can_single_divorce_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BirefWeddingInfo::~BirefWeddingInfo() {
  // @@protoc_insertion_point(destructor:Cmd.BirefWeddingInfo)
  SharedDtor();
}

void BirefWeddingInfo::SharedDtor() {
  if (this != default_instance_) {
    delete char1_;
    delete char2_;
  }
}

void BirefWeddingInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BirefWeddingInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BirefWeddingInfo_descriptor_;
}

const BirefWeddingInfo& BirefWeddingInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WeddingCCmd_2eproto();
  return *default_instance_;
}

BirefWeddingInfo* BirefWeddingInfo::default_instance_ = NULL;

BirefWeddingInfo* BirefWeddingInfo::New() const {
  return new BirefWeddingInfo;
}

void BirefWeddingInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BirefWeddingInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(status_, zoneid_);
    ZR_(starttime_, can_single_divorce_);
    id_ = GOOGLE_ULONGLONG(0);
    if (has_char1()) {
      if (char1_ != NULL) char1_->::Cmd::CharData::Clear();
    }
    if (has_char2()) {
      if (char2_ != NULL) char2_->::Cmd::CharData::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BirefWeddingInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BirefWeddingInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional .Cmd.EWeddingStatus status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EWeddingStatus_IsValid(value)) {
            set_status(static_cast< ::Cmd::EWeddingStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_char1;
        break;
      }

      // optional .Cmd.CharData char1 = 3;
      case 3: {
        if (tag == 26) {
         parse_char1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_char1()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_char2;
        break;
      }

      // optional .Cmd.CharData char2 = 4;
      case 4: {
        if (tag == 34) {
         parse_char2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_char2()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 5;
      case 5: {
        if (tag == 40) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_starttime;
        break;
      }

      // optional uint32 starttime = 6;
      case 6: {
        if (tag == 48) {
         parse_starttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_endtime;
        break;
      }

      // optional uint32 endtime = 7;
      case 7: {
        if (tag == 56) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_can_single_divorce;
        break;
      }

      // optional bool can_single_divorce = 8;
      case 8: {
        if (tag == 64) {
         parse_can_single_divorce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_single_divorce_)));
          set_has_can_single_divorce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BirefWeddingInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BirefWeddingInfo)
  return false;
#undef DO_
}

void BirefWeddingInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BirefWeddingInfo)
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional .Cmd.EWeddingStatus status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // optional .Cmd.CharData char1 = 3;
  if (has_char1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->char1(), output);
  }

  // optional .Cmd.CharData char2 = 4;
  if (has_char2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->char2(), output);
  }

  // optional uint32 zoneid = 5;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->zoneid(), output);
  }

  // optional uint32 starttime = 6;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->starttime(), output);
  }

  // optional uint32 endtime = 7;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->endtime(), output);
  }

  // optional bool can_single_divorce = 8;
  if (has_can_single_divorce()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->can_single_divorce(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BirefWeddingInfo)
}

::google::protobuf::uint8* BirefWeddingInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BirefWeddingInfo)
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional .Cmd.EWeddingStatus status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  // optional .Cmd.CharData char1 = 3;
  if (has_char1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->char1(), target);
  }

  // optional .Cmd.CharData char2 = 4;
  if (has_char2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->char2(), target);
  }

  // optional uint32 zoneid = 5;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->zoneid(), target);
  }

  // optional uint32 starttime = 6;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->starttime(), target);
  }

  // optional uint32 endtime = 7;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->endtime(), target);
  }

  // optional bool can_single_divorce = 8;
  if (has_can_single_divorce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->can_single_divorce(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BirefWeddingInfo)
  return target;
}

int BirefWeddingInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional .Cmd.EWeddingStatus status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional .Cmd.CharData char1 = 3;
    if (has_char1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->char1());
    }

    // optional .Cmd.CharData char2 = 4;
    if (has_char2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->char2());
    }

    // optional uint32 zoneid = 5;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint32 starttime = 6;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->starttime());
    }

    // optional uint32 endtime = 7;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endtime());
    }

    // optional bool can_single_divorce = 8;
    if (has_can_single_divorce()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BirefWeddingInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BirefWeddingInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BirefWeddingInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BirefWeddingInfo::MergeFrom(const BirefWeddingInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_char1()) {
      mutable_char1()->::Cmd::CharData::MergeFrom(from.char1());
    }
    if (from.has_char2()) {
      mutable_char2()->::Cmd::CharData::MergeFrom(from.char2());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_can_single_divorce()) {
      set_can_single_divorce(from.can_single_divorce());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BirefWeddingInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BirefWeddingInfo::CopyFrom(const BirefWeddingInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BirefWeddingInfo::IsInitialized() const {

  return true;
}

void BirefWeddingInfo::Swap(BirefWeddingInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(status_, other->status_);
    std::swap(char1_, other->char1_);
    std::swap(char2_, other->char2_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(starttime_, other->starttime_);
    std::swap(endtime_, other->endtime_);
    std::swap(can_single_divorce_, other->can_single_divorce_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BirefWeddingInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BirefWeddingInfo_descriptor_;
  metadata.reflection = BirefWeddingInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqWeddingInfoCCmd::kCmdFieldNumber;
const int ReqWeddingInfoCCmd::kParamFieldNumber;
const int ReqWeddingInfoCCmd::kIdFieldNumber;
const int ReqWeddingInfoCCmd::kInfoFieldNumber;
#endif  // !_MSC_VER

ReqWeddingInfoCCmd::ReqWeddingInfoCCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ReqWeddingInfoCCmd)
}

void ReqWeddingInfoCCmd::InitAsDefaultInstance() {
  info_ = const_cast< ::Cmd::BirefWeddingInfo*>(&::Cmd::BirefWeddingInfo::default_instance());
}

ReqWeddingInfoCCmd::ReqWeddingInfoCCmd(const ReqWeddingInfoCCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ReqWeddingInfoCCmd)
}

void ReqWeddingInfoCCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 65;
  param_ = 4;
  id_ = GOOGLE_ULONGLONG(0);
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqWeddingInfoCCmd::~ReqWeddingInfoCCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ReqWeddingInfoCCmd)
  SharedDtor();
}

void ReqWeddingInfoCCmd::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void ReqWeddingInfoCCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqWeddingInfoCCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqWeddingInfoCCmd_descriptor_;
}

const ReqWeddingInfoCCmd& ReqWeddingInfoCCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WeddingCCmd_2eproto();
  return *default_instance_;
}

ReqWeddingInfoCCmd* ReqWeddingInfoCCmd::default_instance_ = NULL;

ReqWeddingInfoCCmd* ReqWeddingInfoCCmd::New() const {
  return new ReqWeddingInfoCCmd;
}

void ReqWeddingInfoCCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 65;
    param_ = 4;
    id_ = GOOGLE_ULONGLONG(0);
    if (has_info()) {
      if (info_ != NULL) info_->::Cmd::BirefWeddingInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqWeddingInfoCCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ReqWeddingInfoCCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_REQ_WEDDING_INFO];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::WeddingCParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::WeddingCParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional uint64 id = 3;
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_info;
        break;
      }

      // optional .Cmd.BirefWeddingInfo info = 4;
      case 4: {
        if (tag == 34) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ReqWeddingInfoCCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ReqWeddingInfoCCmd)
  return false;
#undef DO_
}

void ReqWeddingInfoCCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ReqWeddingInfoCCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_REQ_WEDDING_INFO];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->id(), output);
  }

  // optional .Cmd.BirefWeddingInfo info = 4;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ReqWeddingInfoCCmd)
}

::google::protobuf::uint8* ReqWeddingInfoCCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ReqWeddingInfoCCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_REQ_WEDDING_INFO];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->id(), target);
  }

  // optional .Cmd.BirefWeddingInfo info = 4;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ReqWeddingInfoCCmd)
  return target;
}

int ReqWeddingInfoCCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_REQ_WEDDING_INFO];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional .Cmd.BirefWeddingInfo info = 4;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqWeddingInfoCCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqWeddingInfoCCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqWeddingInfoCCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqWeddingInfoCCmd::MergeFrom(const ReqWeddingInfoCCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_info()) {
      mutable_info()->::Cmd::BirefWeddingInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqWeddingInfoCCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqWeddingInfoCCmd::CopyFrom(const ReqWeddingInfoCCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqWeddingInfoCCmd::IsInitialized() const {

  return true;
}

void ReqWeddingInfoCCmd::Swap(ReqWeddingInfoCCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(id_, other->id_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqWeddingInfoCCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqWeddingInfoCCmd_descriptor_;
  metadata.reflection = ReqWeddingInfoCCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReserveWeddingDateCCmd::kCmdFieldNumber;
const int ReserveWeddingDateCCmd::kParamFieldNumber;
const int ReserveWeddingDateCCmd::kDateFieldNumber;
const int ReserveWeddingDateCCmd::kConfigidFieldNumber;
const int ReserveWeddingDateCCmd::kCharid2FieldNumber;
const int ReserveWeddingDateCCmd::kUseTicketFieldNumber;
#endif  // !_MSC_VER

ReserveWeddingDateCCmd::ReserveWeddingDateCCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ReserveWeddingDateCCmd)
}

void ReserveWeddingDateCCmd::InitAsDefaultInstance() {
}

ReserveWeddingDateCCmd::ReserveWeddingDateCCmd(const ReserveWeddingDateCCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ReserveWeddingDateCCmd)
}

void ReserveWeddingDateCCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 65;
  param_ = 5;
  date_ = 0u;
  configid_ = 0u;
  charid2_ = GOOGLE_ULONGLONG(0);
  use_ticket_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReserveWeddingDateCCmd::~ReserveWeddingDateCCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ReserveWeddingDateCCmd)
  SharedDtor();
}

void ReserveWeddingDateCCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReserveWeddingDateCCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReserveWeddingDateCCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReserveWeddingDateCCmd_descriptor_;
}

const ReserveWeddingDateCCmd& ReserveWeddingDateCCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WeddingCCmd_2eproto();
  return *default_instance_;
}

ReserveWeddingDateCCmd* ReserveWeddingDateCCmd::default_instance_ = NULL;

ReserveWeddingDateCCmd* ReserveWeddingDateCCmd::New() const {
  return new ReserveWeddingDateCCmd;
}

void ReserveWeddingDateCCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReserveWeddingDateCCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(date_, use_ticket_);
    cmd_ = 65;
    param_ = 5;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReserveWeddingDateCCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ReserveWeddingDateCCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_RESERVE_WEDDINGDATE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::WeddingCParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::WeddingCParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_date;
        break;
      }

      // optional uint32 date = 3;
      case 3: {
        if (tag == 24) {
         parse_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &date_)));
          set_has_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_configid;
        break;
      }

      // optional uint32 configid = 4;
      case 4: {
        if (tag == 32) {
         parse_configid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &configid_)));
          set_has_configid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_charid2;
        break;
      }

      // optional uint64 charid2 = 5;
      case 5: {
        if (tag == 40) {
         parse_charid2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid2_)));
          set_has_charid2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_use_ticket;
        break;
      }

      // optional bool use_ticket = 6;
      case 6: {
        if (tag == 48) {
         parse_use_ticket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_ticket_)));
          set_has_use_ticket();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ReserveWeddingDateCCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ReserveWeddingDateCCmd)
  return false;
#undef DO_
}

void ReserveWeddingDateCCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ReserveWeddingDateCCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_RESERVE_WEDDINGDATE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 date = 3;
  if (has_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->date(), output);
  }

  // optional uint32 configid = 4;
  if (has_configid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->configid(), output);
  }

  // optional uint64 charid2 = 5;
  if (has_charid2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->charid2(), output);
  }

  // optional bool use_ticket = 6;
  if (has_use_ticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->use_ticket(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ReserveWeddingDateCCmd)
}

::google::protobuf::uint8* ReserveWeddingDateCCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ReserveWeddingDateCCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_RESERVE_WEDDINGDATE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 date = 3;
  if (has_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->date(), target);
  }

  // optional uint32 configid = 4;
  if (has_configid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->configid(), target);
  }

  // optional uint64 charid2 = 5;
  if (has_charid2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->charid2(), target);
  }

  // optional bool use_ticket = 6;
  if (has_use_ticket()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->use_ticket(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ReserveWeddingDateCCmd)
  return target;
}

int ReserveWeddingDateCCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_RESERVE_WEDDINGDATE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 date = 3;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->date());
    }

    // optional uint32 configid = 4;
    if (has_configid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->configid());
    }

    // optional uint64 charid2 = 5;
    if (has_charid2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid2());
    }

    // optional bool use_ticket = 6;
    if (has_use_ticket()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReserveWeddingDateCCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReserveWeddingDateCCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReserveWeddingDateCCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReserveWeddingDateCCmd::MergeFrom(const ReserveWeddingDateCCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_date()) {
      set_date(from.date());
    }
    if (from.has_configid()) {
      set_configid(from.configid());
    }
    if (from.has_charid2()) {
      set_charid2(from.charid2());
    }
    if (from.has_use_ticket()) {
      set_use_ticket(from.use_ticket());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReserveWeddingDateCCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReserveWeddingDateCCmd::CopyFrom(const ReserveWeddingDateCCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReserveWeddingDateCCmd::IsInitialized() const {

  return true;
}

void ReserveWeddingDateCCmd::Swap(ReserveWeddingDateCCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(date_, other->date_);
    std::swap(configid_, other->configid_);
    std::swap(charid2_, other->charid2_);
    std::swap(use_ticket_, other->use_ticket_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReserveWeddingDateCCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReserveWeddingDateCCmd_descriptor_;
  metadata.reflection = ReserveWeddingDateCCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NtfReserveWeddingDateCCmd::kCmdFieldNumber;
const int NtfReserveWeddingDateCCmd::kParamFieldNumber;
const int NtfReserveWeddingDateCCmd::kDateFieldNumber;
const int NtfReserveWeddingDateCCmd::kConfigidFieldNumber;
const int NtfReserveWeddingDateCCmd::kCharid1FieldNumber;
const int NtfReserveWeddingDateCCmd::kNameFieldNumber;
const int NtfReserveWeddingDateCCmd::kStarttimeFieldNumber;
const int NtfReserveWeddingDateCCmd::kEndtimeFieldNumber;
const int NtfReserveWeddingDateCCmd::kTimeFieldNumber;
const int NtfReserveWeddingDateCCmd::kUseTicketFieldNumber;
const int NtfReserveWeddingDateCCmd::kZoneidFieldNumber;
const int NtfReserveWeddingDateCCmd::kSignFieldNumber;
#endif  // !_MSC_VER

NtfReserveWeddingDateCCmd::NtfReserveWeddingDateCCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.NtfReserveWeddingDateCCmd)
}

void NtfReserveWeddingDateCCmd::InitAsDefaultInstance() {
}

NtfReserveWeddingDateCCmd::NtfReserveWeddingDateCCmd(const NtfReserveWeddingDateCCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.NtfReserveWeddingDateCCmd)
}

void NtfReserveWeddingDateCCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 65;
  param_ = 6;
  date_ = 0u;
  configid_ = 0u;
  charid1_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  starttime_ = 0u;
  endtime_ = 0u;
  time_ = 0u;
  use_ticket_ = false;
  zoneid_ = 0u;
  sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NtfReserveWeddingDateCCmd::~NtfReserveWeddingDateCCmd() {
  // @@protoc_insertion_point(destructor:Cmd.NtfReserveWeddingDateCCmd)
  SharedDtor();
}

void NtfReserveWeddingDateCCmd::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sign_;
  }
  if (this != default_instance_) {
  }
}

void NtfReserveWeddingDateCCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NtfReserveWeddingDateCCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NtfReserveWeddingDateCCmd_descriptor_;
}

const NtfReserveWeddingDateCCmd& NtfReserveWeddingDateCCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WeddingCCmd_2eproto();
  return *default_instance_;
}

NtfReserveWeddingDateCCmd* NtfReserveWeddingDateCCmd::default_instance_ = NULL;

NtfReserveWeddingDateCCmd* NtfReserveWeddingDateCCmd::New() const {
  return new NtfReserveWeddingDateCCmd;
}

void NtfReserveWeddingDateCCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NtfReserveWeddingDateCCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(date_, charid1_);
    ZR_(starttime_, endtime_);
    cmd_ = 65;
    param_ = 6;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 3840) {
    ZR_(time_, use_ticket_);
    zoneid_ = 0u;
    if (has_sign()) {
      if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sign_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NtfReserveWeddingDateCCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.NtfReserveWeddingDateCCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_NTF_RESERVE_WEDDINGDATE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::WeddingCParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::WeddingCParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_date;
        break;
      }

      // optional uint32 date = 3;
      case 3: {
        if (tag == 24) {
         parse_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &date_)));
          set_has_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_configid;
        break;
      }

      // optional uint32 configid = 4;
      case 4: {
        if (tag == 32) {
         parse_configid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &configid_)));
          set_has_configid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_charid1;
        break;
      }

      // optional uint64 charid1 = 5;
      case 5: {
        if (tag == 40) {
         parse_charid1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid1_)));
          set_has_charid1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_name;
        break;
      }

      // optional string name = 6;
      case 6: {
        if (tag == 50) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_starttime;
        break;
      }

      // optional uint32 starttime = 7;
      case 7: {
        if (tag == 56) {
         parse_starttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_endtime;
        break;
      }

      // optional uint32 endtime = 8;
      case 8: {
        if (tag == 64) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_time;
        break;
      }

      // optional uint32 time = 9;
      case 9: {
        if (tag == 72) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_use_ticket;
        break;
      }

      // optional bool use_ticket = 10;
      case 10: {
        if (tag == 80) {
         parse_use_ticket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_ticket_)));
          set_has_use_ticket();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 11;
      case 11: {
        if (tag == 88) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_sign;
        break;
      }

      // optional string sign = 12;
      case 12: {
        if (tag == 98) {
         parse_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sign()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sign().data(), this->sign().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sign");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.NtfReserveWeddingDateCCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.NtfReserveWeddingDateCCmd)
  return false;
#undef DO_
}

void NtfReserveWeddingDateCCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.NtfReserveWeddingDateCCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_NTF_RESERVE_WEDDINGDATE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 date = 3;
  if (has_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->date(), output);
  }

  // optional uint32 configid = 4;
  if (has_configid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->configid(), output);
  }

  // optional uint64 charid1 = 5;
  if (has_charid1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->charid1(), output);
  }

  // optional string name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->name(), output);
  }

  // optional uint32 starttime = 7;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->starttime(), output);
  }

  // optional uint32 endtime = 8;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->endtime(), output);
  }

  // optional uint32 time = 9;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->time(), output);
  }

  // optional bool use_ticket = 10;
  if (has_use_ticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->use_ticket(), output);
  }

  // optional uint32 zoneid = 11;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->zoneid(), output);
  }

  // optional string sign = 12;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sign");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->sign(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.NtfReserveWeddingDateCCmd)
}

::google::protobuf::uint8* NtfReserveWeddingDateCCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.NtfReserveWeddingDateCCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_NTF_RESERVE_WEDDINGDATE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 date = 3;
  if (has_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->date(), target);
  }

  // optional uint32 configid = 4;
  if (has_configid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->configid(), target);
  }

  // optional uint64 charid1 = 5;
  if (has_charid1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->charid1(), target);
  }

  // optional string name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->name(), target);
  }

  // optional uint32 starttime = 7;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->starttime(), target);
  }

  // optional uint32 endtime = 8;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->endtime(), target);
  }

  // optional uint32 time = 9;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->time(), target);
  }

  // optional bool use_ticket = 10;
  if (has_use_ticket()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->use_ticket(), target);
  }

  // optional uint32 zoneid = 11;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->zoneid(), target);
  }

  // optional string sign = 12;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sign");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->sign(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.NtfReserveWeddingDateCCmd)
  return target;
}

int NtfReserveWeddingDateCCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_NTF_RESERVE_WEDDINGDATE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 date = 3;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->date());
    }

    // optional uint32 configid = 4;
    if (has_configid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->configid());
    }

    // optional uint64 charid1 = 5;
    if (has_charid1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid1());
    }

    // optional string name = 6;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 starttime = 7;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->starttime());
    }

    // optional uint32 endtime = 8;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endtime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 time = 9;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional bool use_ticket = 10;
    if (has_use_ticket()) {
      total_size += 1 + 1;
    }

    // optional uint32 zoneid = 11;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional string sign = 12;
    if (has_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sign());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NtfReserveWeddingDateCCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NtfReserveWeddingDateCCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NtfReserveWeddingDateCCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NtfReserveWeddingDateCCmd::MergeFrom(const NtfReserveWeddingDateCCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_date()) {
      set_date(from.date());
    }
    if (from.has_configid()) {
      set_configid(from.configid());
    }
    if (from.has_charid1()) {
      set_charid1(from.charid1());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_use_ticket()) {
      set_use_ticket(from.use_ticket());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_sign()) {
      set_sign(from.sign());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NtfReserveWeddingDateCCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NtfReserveWeddingDateCCmd::CopyFrom(const NtfReserveWeddingDateCCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NtfReserveWeddingDateCCmd::IsInitialized() const {

  return true;
}

void NtfReserveWeddingDateCCmd::Swap(NtfReserveWeddingDateCCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(date_, other->date_);
    std::swap(configid_, other->configid_);
    std::swap(charid1_, other->charid1_);
    std::swap(name_, other->name_);
    std::swap(starttime_, other->starttime_);
    std::swap(endtime_, other->endtime_);
    std::swap(time_, other->time_);
    std::swap(use_ticket_, other->use_ticket_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(sign_, other->sign_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NtfReserveWeddingDateCCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NtfReserveWeddingDateCCmd_descriptor_;
  metadata.reflection = NtfReserveWeddingDateCCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplyReserveWeddingDateCCmd::kCmdFieldNumber;
const int ReplyReserveWeddingDateCCmd::kParamFieldNumber;
const int ReplyReserveWeddingDateCCmd::kDateFieldNumber;
const int ReplyReserveWeddingDateCCmd::kConfigidFieldNumber;
const int ReplyReserveWeddingDateCCmd::kCharid1FieldNumber;
const int ReplyReserveWeddingDateCCmd::kReplyFieldNumber;
const int ReplyReserveWeddingDateCCmd::kTimeFieldNumber;
const int ReplyReserveWeddingDateCCmd::kUseTicketFieldNumber;
const int ReplyReserveWeddingDateCCmd::kZoneidFieldNumber;
const int ReplyReserveWeddingDateCCmd::kSignFieldNumber;
#endif  // !_MSC_VER

ReplyReserveWeddingDateCCmd::ReplyReserveWeddingDateCCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ReplyReserveWeddingDateCCmd)
}

void ReplyReserveWeddingDateCCmd::InitAsDefaultInstance() {
}

ReplyReserveWeddingDateCCmd::ReplyReserveWeddingDateCCmd(const ReplyReserveWeddingDateCCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ReplyReserveWeddingDateCCmd)
}

void ReplyReserveWeddingDateCCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 65;
  param_ = 7;
  date_ = 0u;
  configid_ = 0u;
  charid1_ = GOOGLE_ULONGLONG(0);
  reply_ = 1;
  time_ = 0u;
  use_ticket_ = false;
  zoneid_ = 0u;
  sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplyReserveWeddingDateCCmd::~ReplyReserveWeddingDateCCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ReplyReserveWeddingDateCCmd)
  SharedDtor();
}

void ReplyReserveWeddingDateCCmd::SharedDtor() {
  if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sign_;
  }
  if (this != default_instance_) {
  }
}

void ReplyReserveWeddingDateCCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplyReserveWeddingDateCCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplyReserveWeddingDateCCmd_descriptor_;
}

const ReplyReserveWeddingDateCCmd& ReplyReserveWeddingDateCCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WeddingCCmd_2eproto();
  return *default_instance_;
}

ReplyReserveWeddingDateCCmd* ReplyReserveWeddingDateCCmd::default_instance_ = NULL;

ReplyReserveWeddingDateCCmd* ReplyReserveWeddingDateCCmd::New() const {
  return new ReplyReserveWeddingDateCCmd;
}

void ReplyReserveWeddingDateCCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReplyReserveWeddingDateCCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(date_, charid1_);
    ZR_(time_, use_ticket_);
    cmd_ = 65;
    param_ = 7;
    reply_ = 1;
  }
  if (_has_bits_[8 / 32] & 768) {
    zoneid_ = 0u;
    if (has_sign()) {
      if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sign_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplyReserveWeddingDateCCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ReplyReserveWeddingDateCCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_REPLY_RESERVE_WEDDINGDATE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::WeddingCParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::WeddingCParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_date;
        break;
      }

      // optional uint32 date = 3;
      case 3: {
        if (tag == 24) {
         parse_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &date_)));
          set_has_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_configid;
        break;
      }

      // optional uint32 configid = 4;
      case 4: {
        if (tag == 32) {
         parse_configid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &configid_)));
          set_has_configid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_charid1;
        break;
      }

      // optional uint64 charid1 = 5;
      case 5: {
        if (tag == 40) {
         parse_charid1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid1_)));
          set_has_charid1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_reply;
        break;
      }

      // optional .Cmd.EReply reply = 6;
      case 6: {
        if (tag == 48) {
         parse_reply:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EReply_IsValid(value)) {
            set_reply(static_cast< ::Cmd::EReply >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_time;
        break;
      }

      // optional uint32 time = 7;
      case 7: {
        if (tag == 56) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_use_ticket;
        break;
      }

      // optional bool use_ticket = 8;
      case 8: {
        if (tag == 64) {
         parse_use_ticket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_ticket_)));
          set_has_use_ticket();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 9;
      case 9: {
        if (tag == 72) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_sign;
        break;
      }

      // optional string sign = 10;
      case 10: {
        if (tag == 82) {
         parse_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sign()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sign().data(), this->sign().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sign");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ReplyReserveWeddingDateCCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ReplyReserveWeddingDateCCmd)
  return false;
#undef DO_
}

void ReplyReserveWeddingDateCCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ReplyReserveWeddingDateCCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_REPLY_RESERVE_WEDDINGDATE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 date = 3;
  if (has_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->date(), output);
  }

  // optional uint32 configid = 4;
  if (has_configid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->configid(), output);
  }

  // optional uint64 charid1 = 5;
  if (has_charid1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->charid1(), output);
  }

  // optional .Cmd.EReply reply = 6;
  if (has_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->reply(), output);
  }

  // optional uint32 time = 7;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->time(), output);
  }

  // optional bool use_ticket = 8;
  if (has_use_ticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->use_ticket(), output);
  }

  // optional uint32 zoneid = 9;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->zoneid(), output);
  }

  // optional string sign = 10;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sign");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->sign(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ReplyReserveWeddingDateCCmd)
}

::google::protobuf::uint8* ReplyReserveWeddingDateCCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ReplyReserveWeddingDateCCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_REPLY_RESERVE_WEDDINGDATE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 date = 3;
  if (has_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->date(), target);
  }

  // optional uint32 configid = 4;
  if (has_configid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->configid(), target);
  }

  // optional uint64 charid1 = 5;
  if (has_charid1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->charid1(), target);
  }

  // optional .Cmd.EReply reply = 6;
  if (has_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->reply(), target);
  }

  // optional uint32 time = 7;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->time(), target);
  }

  // optional bool use_ticket = 8;
  if (has_use_ticket()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->use_ticket(), target);
  }

  // optional uint32 zoneid = 9;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->zoneid(), target);
  }

  // optional string sign = 10;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sign");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->sign(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ReplyReserveWeddingDateCCmd)
  return target;
}

int ReplyReserveWeddingDateCCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_REPLY_RESERVE_WEDDINGDATE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 date = 3;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->date());
    }

    // optional uint32 configid = 4;
    if (has_configid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->configid());
    }

    // optional uint64 charid1 = 5;
    if (has_charid1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid1());
    }

    // optional .Cmd.EReply reply = 6;
    if (has_reply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reply());
    }

    // optional uint32 time = 7;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional bool use_ticket = 8;
    if (has_use_ticket()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 zoneid = 9;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional string sign = 10;
    if (has_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sign());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplyReserveWeddingDateCCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplyReserveWeddingDateCCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplyReserveWeddingDateCCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplyReserveWeddingDateCCmd::MergeFrom(const ReplyReserveWeddingDateCCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_date()) {
      set_date(from.date());
    }
    if (from.has_configid()) {
      set_configid(from.configid());
    }
    if (from.has_charid1()) {
      set_charid1(from.charid1());
    }
    if (from.has_reply()) {
      set_reply(from.reply());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_use_ticket()) {
      set_use_ticket(from.use_ticket());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_sign()) {
      set_sign(from.sign());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplyReserveWeddingDateCCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyReserveWeddingDateCCmd::CopyFrom(const ReplyReserveWeddingDateCCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyReserveWeddingDateCCmd::IsInitialized() const {

  return true;
}

void ReplyReserveWeddingDateCCmd::Swap(ReplyReserveWeddingDateCCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(date_, other->date_);
    std::swap(configid_, other->configid_);
    std::swap(charid1_, other->charid1_);
    std::swap(reply_, other->reply_);
    std::swap(time_, other->time_);
    std::swap(use_ticket_, other->use_ticket_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(sign_, other->sign_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplyReserveWeddingDateCCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplyReserveWeddingDateCCmd_descriptor_;
  metadata.reflection = ReplyReserveWeddingDateCCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GiveUpReserveCCmd::kCmdFieldNumber;
const int GiveUpReserveCCmd::kParamFieldNumber;
const int GiveUpReserveCCmd::kIdFieldNumber;
#endif  // !_MSC_VER

GiveUpReserveCCmd::GiveUpReserveCCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GiveUpReserveCCmd)
}

void GiveUpReserveCCmd::InitAsDefaultInstance() {
}

GiveUpReserveCCmd::GiveUpReserveCCmd(const GiveUpReserveCCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GiveUpReserveCCmd)
}

void GiveUpReserveCCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 65;
  param_ = 8;
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GiveUpReserveCCmd::~GiveUpReserveCCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GiveUpReserveCCmd)
  SharedDtor();
}

void GiveUpReserveCCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GiveUpReserveCCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GiveUpReserveCCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GiveUpReserveCCmd_descriptor_;
}

const GiveUpReserveCCmd& GiveUpReserveCCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WeddingCCmd_2eproto();
  return *default_instance_;
}

GiveUpReserveCCmd* GiveUpReserveCCmd::default_instance_ = NULL;

GiveUpReserveCCmd* GiveUpReserveCCmd::New() const {
  return new GiveUpReserveCCmd;
}

void GiveUpReserveCCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 65;
    param_ = 8;
    id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GiveUpReserveCCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GiveUpReserveCCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_GIVEUP_RESERVE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::WeddingCParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::WeddingCParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional uint64 id = 3;
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GiveUpReserveCCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GiveUpReserveCCmd)
  return false;
#undef DO_
}

void GiveUpReserveCCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GiveUpReserveCCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_GIVEUP_RESERVE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GiveUpReserveCCmd)
}

::google::protobuf::uint8* GiveUpReserveCCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GiveUpReserveCCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_GIVEUP_RESERVE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GiveUpReserveCCmd)
  return target;
}

int GiveUpReserveCCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_GIVEUP_RESERVE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GiveUpReserveCCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GiveUpReserveCCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GiveUpReserveCCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GiveUpReserveCCmd::MergeFrom(const GiveUpReserveCCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GiveUpReserveCCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GiveUpReserveCCmd::CopyFrom(const GiveUpReserveCCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GiveUpReserveCCmd::IsInitialized() const {

  return true;
}

void GiveUpReserveCCmd::Swap(GiveUpReserveCCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GiveUpReserveCCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GiveUpReserveCCmd_descriptor_;
  metadata.reflection = GiveUpReserveCCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqDivorceCCmd::kCmdFieldNumber;
const int ReqDivorceCCmd::kParamFieldNumber;
const int ReqDivorceCCmd::kIdFieldNumber;
const int ReqDivorceCCmd::kTypeFieldNumber;
#endif  // !_MSC_VER

ReqDivorceCCmd::ReqDivorceCCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ReqDivorceCCmd)
}

void ReqDivorceCCmd::InitAsDefaultInstance() {
}

ReqDivorceCCmd::ReqDivorceCCmd(const ReqDivorceCCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ReqDivorceCCmd)
}

void ReqDivorceCCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 65;
  param_ = 9;
  id_ = GOOGLE_ULONGLONG(0);
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqDivorceCCmd::~ReqDivorceCCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ReqDivorceCCmd)
  SharedDtor();
}

void ReqDivorceCCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqDivorceCCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqDivorceCCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqDivorceCCmd_descriptor_;
}

const ReqDivorceCCmd& ReqDivorceCCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WeddingCCmd_2eproto();
  return *default_instance_;
}

ReqDivorceCCmd* ReqDivorceCCmd::default_instance_ = NULL;

ReqDivorceCCmd* ReqDivorceCCmd::New() const {
  return new ReqDivorceCCmd;
}

void ReqDivorceCCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 65;
    param_ = 9;
    id_ = GOOGLE_ULONGLONG(0);
    type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqDivorceCCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ReqDivorceCCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_REQ_DIVORCE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::WeddingCParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::WeddingCParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional uint64 id = 3;
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional .Cmd.EGiveUpType type = 4;
      case 4: {
        if (tag == 32) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EGiveUpType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EGiveUpType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ReqDivorceCCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ReqDivorceCCmd)
  return false;
#undef DO_
}

void ReqDivorceCCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ReqDivorceCCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_REQ_DIVORCE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->id(), output);
  }

  // optional .Cmd.EGiveUpType type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ReqDivorceCCmd)
}

::google::protobuf::uint8* ReqDivorceCCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ReqDivorceCCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_REQ_DIVORCE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->id(), target);
  }

  // optional .Cmd.EGiveUpType type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ReqDivorceCCmd)
  return target;
}

int ReqDivorceCCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_REQ_DIVORCE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional .Cmd.EGiveUpType type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqDivorceCCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqDivorceCCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqDivorceCCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqDivorceCCmd::MergeFrom(const ReqDivorceCCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqDivorceCCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqDivorceCCmd::CopyFrom(const ReqDivorceCCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqDivorceCCmd::IsInitialized() const {

  return true;
}

void ReqDivorceCCmd::Swap(ReqDivorceCCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqDivorceCCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqDivorceCCmd_descriptor_;
  metadata.reflection = ReqDivorceCCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientWeddingManual::kPackageidsFieldNumber;
const int ClientWeddingManual::kRingidFieldNumber;
const int ClientWeddingManual::kPhotoindexFieldNumber;
const int ClientWeddingManual::kPhototimeFieldNumber;
#endif  // !_MSC_VER

ClientWeddingManual::ClientWeddingManual()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ClientWeddingManual)
}

void ClientWeddingManual::InitAsDefaultInstance() {
}

ClientWeddingManual::ClientWeddingManual(const ClientWeddingManual& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ClientWeddingManual)
}

void ClientWeddingManual::SharedCtor() {
  _cached_size_ = 0;
  ringid_ = 0u;
  photoindex_ = 0u;
  phototime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientWeddingManual::~ClientWeddingManual() {
  // @@protoc_insertion_point(destructor:Cmd.ClientWeddingManual)
  SharedDtor();
}

void ClientWeddingManual::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientWeddingManual::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientWeddingManual::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientWeddingManual_descriptor_;
}

const ClientWeddingManual& ClientWeddingManual::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WeddingCCmd_2eproto();
  return *default_instance_;
}

ClientWeddingManual* ClientWeddingManual::default_instance_ = NULL;

ClientWeddingManual* ClientWeddingManual::New() const {
  return new ClientWeddingManual;
}

void ClientWeddingManual::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ClientWeddingManual*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(ringid_, phototime_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  packageids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientWeddingManual::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ClientWeddingManual)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 packageids = 1;
      case 1: {
        if (tag == 8) {
         parse_packageids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_packageids())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_packageids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_packageids;
        if (input->ExpectTag(16)) goto parse_ringid;
        break;
      }

      // optional uint32 ringid = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_ringid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ringid_)));
          set_has_ringid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_photoindex;
        break;
      }

      // optional uint32 photoindex = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_photoindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &photoindex_)));
          set_has_photoindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_phototime;
        break;
      }

      // optional uint32 phototime = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_phototime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phototime_)));
          set_has_phototime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ClientWeddingManual)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ClientWeddingManual)
  return false;
#undef DO_
}

void ClientWeddingManual::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ClientWeddingManual)
  // repeated uint32 packageids = 1;
  for (int i = 0; i < this->packageids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->packageids(i), output);
  }

  // optional uint32 ringid = 2 [default = 0];
  if (has_ringid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ringid(), output);
  }

  // optional uint32 photoindex = 3 [default = 0];
  if (has_photoindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->photoindex(), output);
  }

  // optional uint32 phototime = 4 [default = 0];
  if (has_phototime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->phototime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ClientWeddingManual)
}

::google::protobuf::uint8* ClientWeddingManual::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ClientWeddingManual)
  // repeated uint32 packageids = 1;
  for (int i = 0; i < this->packageids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->packageids(i), target);
  }

  // optional uint32 ringid = 2 [default = 0];
  if (has_ringid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ringid(), target);
  }

  // optional uint32 photoindex = 3 [default = 0];
  if (has_photoindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->photoindex(), target);
  }

  // optional uint32 phototime = 4 [default = 0];
  if (has_phototime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->phototime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ClientWeddingManual)
  return target;
}

int ClientWeddingManual::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 ringid = 2 [default = 0];
    if (has_ringid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ringid());
    }

    // optional uint32 photoindex = 3 [default = 0];
    if (has_photoindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->photoindex());
    }

    // optional uint32 phototime = 4 [default = 0];
    if (has_phototime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phototime());
    }

  }
  // repeated uint32 packageids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->packageids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->packageids(i));
    }
    total_size += 1 * this->packageids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientWeddingManual::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientWeddingManual* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientWeddingManual*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientWeddingManual::MergeFrom(const ClientWeddingManual& from) {
  GOOGLE_CHECK_NE(&from, this);
  packageids_.MergeFrom(from.packageids_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_ringid()) {
      set_ringid(from.ringid());
    }
    if (from.has_photoindex()) {
      set_photoindex(from.photoindex());
    }
    if (from.has_phototime()) {
      set_phototime(from.phototime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientWeddingManual::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientWeddingManual::CopyFrom(const ClientWeddingManual& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientWeddingManual::IsInitialized() const {

  return true;
}

void ClientWeddingManual::Swap(ClientWeddingManual* other) {
  if (other != this) {
    packageids_.Swap(&other->packageids_);
    std::swap(ringid_, other->ringid_);
    std::swap(photoindex_, other->photoindex_);
    std::swap(phototime_, other->phototime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientWeddingManual::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientWeddingManual_descriptor_;
  metadata.reflection = ClientWeddingManual_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WeddingInvitee::kCharidFieldNumber;
const int WeddingInvitee::kNameFieldNumber;
const int WeddingInvitee::kInvitetimeFieldNumber;
#endif  // !_MSC_VER

WeddingInvitee::WeddingInvitee()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.WeddingInvitee)
}

void WeddingInvitee::InitAsDefaultInstance() {
}

WeddingInvitee::WeddingInvitee(const WeddingInvitee& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.WeddingInvitee)
}

void WeddingInvitee::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  invitetime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WeddingInvitee::~WeddingInvitee() {
  // @@protoc_insertion_point(destructor:Cmd.WeddingInvitee)
  SharedDtor();
}

void WeddingInvitee::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void WeddingInvitee::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeddingInvitee::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WeddingInvitee_descriptor_;
}

const WeddingInvitee& WeddingInvitee::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WeddingCCmd_2eproto();
  return *default_instance_;
}

WeddingInvitee* WeddingInvitee::default_instance_ = NULL;

WeddingInvitee* WeddingInvitee::New() const {
  return new WeddingInvitee;
}

void WeddingInvitee::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    invitetime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WeddingInvitee::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.WeddingInvitee)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 charid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_invitetime;
        break;
      }

      // optional uint32 invitetime = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_invitetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &invitetime_)));
          set_has_invitetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.WeddingInvitee)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.WeddingInvitee)
  return false;
#undef DO_
}

void WeddingInvitee::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.WeddingInvitee)
  // optional uint64 charid = 1 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional uint32 invitetime = 3 [default = 0];
  if (has_invitetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->invitetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.WeddingInvitee)
}

::google::protobuf::uint8* WeddingInvitee::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.WeddingInvitee)
  // optional uint64 charid = 1 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 invitetime = 3 [default = 0];
  if (has_invitetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->invitetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.WeddingInvitee)
  return target;
}

int WeddingInvitee::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 charid = 1 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 invitetime = 3 [default = 0];
    if (has_invitetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->invitetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeddingInvitee::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WeddingInvitee* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WeddingInvitee*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WeddingInvitee::MergeFrom(const WeddingInvitee& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_invitetime()) {
      set_invitetime(from.invitetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WeddingInvitee::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeddingInvitee::CopyFrom(const WeddingInvitee& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeddingInvitee::IsInitialized() const {

  return true;
}

void WeddingInvitee::Swap(WeddingInvitee* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(invitetime_, other->invitetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WeddingInvitee::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WeddingInvitee_descriptor_;
  metadata.reflection = WeddingInvitee_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateWeddingManualCCmd::kCmdFieldNumber;
const int UpdateWeddingManualCCmd::kParamFieldNumber;
const int UpdateWeddingManualCCmd::kManualFieldNumber;
const int UpdateWeddingManualCCmd::kInviteesFieldNumber;
#endif  // !_MSC_VER

UpdateWeddingManualCCmd::UpdateWeddingManualCCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UpdateWeddingManualCCmd)
}

void UpdateWeddingManualCCmd::InitAsDefaultInstance() {
  manual_ = const_cast< ::Cmd::ClientWeddingManual*>(&::Cmd::ClientWeddingManual::default_instance());
}

UpdateWeddingManualCCmd::UpdateWeddingManualCCmd(const UpdateWeddingManualCCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UpdateWeddingManualCCmd)
}

void UpdateWeddingManualCCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 65;
  param_ = 10;
  manual_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateWeddingManualCCmd::~UpdateWeddingManualCCmd() {
  // @@protoc_insertion_point(destructor:Cmd.UpdateWeddingManualCCmd)
  SharedDtor();
}

void UpdateWeddingManualCCmd::SharedDtor() {
  if (this != default_instance_) {
    delete manual_;
  }
}

void UpdateWeddingManualCCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateWeddingManualCCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateWeddingManualCCmd_descriptor_;
}

const UpdateWeddingManualCCmd& UpdateWeddingManualCCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WeddingCCmd_2eproto();
  return *default_instance_;
}

UpdateWeddingManualCCmd* UpdateWeddingManualCCmd::default_instance_ = NULL;

UpdateWeddingManualCCmd* UpdateWeddingManualCCmd::New() const {
  return new UpdateWeddingManualCCmd;
}

void UpdateWeddingManualCCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 65;
    param_ = 10;
    if (has_manual()) {
      if (manual_ != NULL) manual_->::Cmd::ClientWeddingManual::Clear();
    }
  }
  invitees_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateWeddingManualCCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UpdateWeddingManualCCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_UPDATE_MANUAL];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::WeddingCParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::WeddingCParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_manual;
        break;
      }

      // optional .Cmd.ClientWeddingManual manual = 3;
      case 3: {
        if (tag == 26) {
         parse_manual:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_manual()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_invitees;
        break;
      }

      // repeated .Cmd.WeddingInvitee invitees = 4;
      case 4: {
        if (tag == 34) {
         parse_invitees:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_invitees()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_invitees;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UpdateWeddingManualCCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UpdateWeddingManualCCmd)
  return false;
#undef DO_
}

void UpdateWeddingManualCCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UpdateWeddingManualCCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_UPDATE_MANUAL];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.ClientWeddingManual manual = 3;
  if (has_manual()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->manual(), output);
  }

  // repeated .Cmd.WeddingInvitee invitees = 4;
  for (int i = 0; i < this->invitees_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->invitees(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UpdateWeddingManualCCmd)
}

::google::protobuf::uint8* UpdateWeddingManualCCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UpdateWeddingManualCCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_UPDATE_MANUAL];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.ClientWeddingManual manual = 3;
  if (has_manual()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->manual(), target);
  }

  // repeated .Cmd.WeddingInvitee invitees = 4;
  for (int i = 0; i < this->invitees_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->invitees(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UpdateWeddingManualCCmd)
  return target;
}

int UpdateWeddingManualCCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_UPDATE_MANUAL];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.ClientWeddingManual manual = 3;
    if (has_manual()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->manual());
    }

  }
  // repeated .Cmd.WeddingInvitee invitees = 4;
  total_size += 1 * this->invitees_size();
  for (int i = 0; i < this->invitees_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->invitees(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateWeddingManualCCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateWeddingManualCCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateWeddingManualCCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateWeddingManualCCmd::MergeFrom(const UpdateWeddingManualCCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  invitees_.MergeFrom(from.invitees_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_manual()) {
      mutable_manual()->::Cmd::ClientWeddingManual::MergeFrom(from.manual());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateWeddingManualCCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateWeddingManualCCmd::CopyFrom(const UpdateWeddingManualCCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateWeddingManualCCmd::IsInitialized() const {

  return true;
}

void UpdateWeddingManualCCmd::Swap(UpdateWeddingManualCCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(manual_, other->manual_);
    invitees_.Swap(&other->invitees_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateWeddingManualCCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateWeddingManualCCmd_descriptor_;
  metadata.reflection = UpdateWeddingManualCCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuyWeddingPackageCCmd::kCmdFieldNumber;
const int BuyWeddingPackageCCmd::kParamFieldNumber;
const int BuyWeddingPackageCCmd::kIdFieldNumber;
const int BuyWeddingPackageCCmd::kPriceitemFieldNumber;
#endif  // !_MSC_VER

BuyWeddingPackageCCmd::BuyWeddingPackageCCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BuyWeddingPackageCCmd)
}

void BuyWeddingPackageCCmd::InitAsDefaultInstance() {
}

BuyWeddingPackageCCmd::BuyWeddingPackageCCmd(const BuyWeddingPackageCCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BuyWeddingPackageCCmd)
}

void BuyWeddingPackageCCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 65;
  param_ = 11;
  id_ = 0u;
  priceitem_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuyWeddingPackageCCmd::~BuyWeddingPackageCCmd() {
  // @@protoc_insertion_point(destructor:Cmd.BuyWeddingPackageCCmd)
  SharedDtor();
}

void BuyWeddingPackageCCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuyWeddingPackageCCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuyWeddingPackageCCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuyWeddingPackageCCmd_descriptor_;
}

const BuyWeddingPackageCCmd& BuyWeddingPackageCCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WeddingCCmd_2eproto();
  return *default_instance_;
}

BuyWeddingPackageCCmd* BuyWeddingPackageCCmd::default_instance_ = NULL;

BuyWeddingPackageCCmd* BuyWeddingPackageCCmd::New() const {
  return new BuyWeddingPackageCCmd;
}

void BuyWeddingPackageCCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BuyWeddingPackageCCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(id_, priceitem_);
    cmd_ = 65;
    param_ = 11;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuyWeddingPackageCCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BuyWeddingPackageCCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_BUY_PACKAGE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::WeddingCParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::WeddingCParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional uint32 id = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_priceitem;
        break;
      }

      // optional uint32 priceitem = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_priceitem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &priceitem_)));
          set_has_priceitem();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BuyWeddingPackageCCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BuyWeddingPackageCCmd)
  return false;
#undef DO_
}

void BuyWeddingPackageCCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BuyWeddingPackageCCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_BUY_PACKAGE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 id = 3 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->id(), output);
  }

  // optional uint32 priceitem = 4 [default = 0];
  if (has_priceitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->priceitem(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BuyWeddingPackageCCmd)
}

::google::protobuf::uint8* BuyWeddingPackageCCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BuyWeddingPackageCCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_BUY_PACKAGE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 id = 3 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->id(), target);
  }

  // optional uint32 priceitem = 4 [default = 0];
  if (has_priceitem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->priceitem(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BuyWeddingPackageCCmd)
  return target;
}

int BuyWeddingPackageCCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_BUY_PACKAGE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 id = 3 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 priceitem = 4 [default = 0];
    if (has_priceitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->priceitem());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuyWeddingPackageCCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuyWeddingPackageCCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuyWeddingPackageCCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuyWeddingPackageCCmd::MergeFrom(const BuyWeddingPackageCCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_priceitem()) {
      set_priceitem(from.priceitem());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuyWeddingPackageCCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuyWeddingPackageCCmd::CopyFrom(const BuyWeddingPackageCCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuyWeddingPackageCCmd::IsInitialized() const {

  return true;
}

void BuyWeddingPackageCCmd::Swap(BuyWeddingPackageCCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(id_, other->id_);
    std::swap(priceitem_, other->priceitem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuyWeddingPackageCCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuyWeddingPackageCCmd_descriptor_;
  metadata.reflection = BuyWeddingPackageCCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuyWeddingRingCCmd::kCmdFieldNumber;
const int BuyWeddingRingCCmd::kParamFieldNumber;
const int BuyWeddingRingCCmd::kIdFieldNumber;
const int BuyWeddingRingCCmd::kPriceitemFieldNumber;
#endif  // !_MSC_VER

BuyWeddingRingCCmd::BuyWeddingRingCCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BuyWeddingRingCCmd)
}

void BuyWeddingRingCCmd::InitAsDefaultInstance() {
}

BuyWeddingRingCCmd::BuyWeddingRingCCmd(const BuyWeddingRingCCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BuyWeddingRingCCmd)
}

void BuyWeddingRingCCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 65;
  param_ = 12;
  id_ = 0u;
  priceitem_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuyWeddingRingCCmd::~BuyWeddingRingCCmd() {
  // @@protoc_insertion_point(destructor:Cmd.BuyWeddingRingCCmd)
  SharedDtor();
}

void BuyWeddingRingCCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuyWeddingRingCCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuyWeddingRingCCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuyWeddingRingCCmd_descriptor_;
}

const BuyWeddingRingCCmd& BuyWeddingRingCCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WeddingCCmd_2eproto();
  return *default_instance_;
}

BuyWeddingRingCCmd* BuyWeddingRingCCmd::default_instance_ = NULL;

BuyWeddingRingCCmd* BuyWeddingRingCCmd::New() const {
  return new BuyWeddingRingCCmd;
}

void BuyWeddingRingCCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BuyWeddingRingCCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(id_, priceitem_);
    cmd_ = 65;
    param_ = 12;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuyWeddingRingCCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BuyWeddingRingCCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_BUY_RING];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::WeddingCParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::WeddingCParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional uint32 id = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_priceitem;
        break;
      }

      // optional uint32 priceitem = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_priceitem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &priceitem_)));
          set_has_priceitem();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BuyWeddingRingCCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BuyWeddingRingCCmd)
  return false;
#undef DO_
}

void BuyWeddingRingCCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BuyWeddingRingCCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_BUY_RING];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 id = 3 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->id(), output);
  }

  // optional uint32 priceitem = 4 [default = 0];
  if (has_priceitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->priceitem(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BuyWeddingRingCCmd)
}

::google::protobuf::uint8* BuyWeddingRingCCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BuyWeddingRingCCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_BUY_RING];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 id = 3 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->id(), target);
  }

  // optional uint32 priceitem = 4 [default = 0];
  if (has_priceitem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->priceitem(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BuyWeddingRingCCmd)
  return target;
}

int BuyWeddingRingCCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_BUY_RING];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 id = 3 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 priceitem = 4 [default = 0];
    if (has_priceitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->priceitem());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuyWeddingRingCCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuyWeddingRingCCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuyWeddingRingCCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuyWeddingRingCCmd::MergeFrom(const BuyWeddingRingCCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_priceitem()) {
      set_priceitem(from.priceitem());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuyWeddingRingCCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuyWeddingRingCCmd::CopyFrom(const BuyWeddingRingCCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuyWeddingRingCCmd::IsInitialized() const {

  return true;
}

void BuyWeddingRingCCmd::Swap(BuyWeddingRingCCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(id_, other->id_);
    std::swap(priceitem_, other->priceitem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuyWeddingRingCCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuyWeddingRingCCmd_descriptor_;
  metadata.reflection = BuyWeddingRingCCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WeddingInviteCCmd::kCmdFieldNumber;
const int WeddingInviteCCmd::kParamFieldNumber;
const int WeddingInviteCCmd::kCharidsFieldNumber;
#endif  // !_MSC_VER

WeddingInviteCCmd::WeddingInviteCCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.WeddingInviteCCmd)
}

void WeddingInviteCCmd::InitAsDefaultInstance() {
}

WeddingInviteCCmd::WeddingInviteCCmd(const WeddingInviteCCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.WeddingInviteCCmd)
}

void WeddingInviteCCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 65;
  param_ = 13;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WeddingInviteCCmd::~WeddingInviteCCmd() {
  // @@protoc_insertion_point(destructor:Cmd.WeddingInviteCCmd)
  SharedDtor();
}

void WeddingInviteCCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WeddingInviteCCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeddingInviteCCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WeddingInviteCCmd_descriptor_;
}

const WeddingInviteCCmd& WeddingInviteCCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WeddingCCmd_2eproto();
  return *default_instance_;
}

WeddingInviteCCmd* WeddingInviteCCmd::default_instance_ = NULL;

WeddingInviteCCmd* WeddingInviteCCmd::New() const {
  return new WeddingInviteCCmd;
}

void WeddingInviteCCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 65;
    param_ = 13;
  }
  charids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WeddingInviteCCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.WeddingInviteCCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_INVITE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::WeddingCParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::WeddingCParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charids;
        break;
      }

      // repeated uint64 charids = 3;
      case 3: {
        if (tag == 24) {
         parse_charids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_charids())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_charids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.WeddingInviteCCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.WeddingInviteCCmd)
  return false;
#undef DO_
}

void WeddingInviteCCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.WeddingInviteCCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_INVITE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated uint64 charids = 3;
  for (int i = 0; i < this->charids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->charids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.WeddingInviteCCmd)
}

::google::protobuf::uint8* WeddingInviteCCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.WeddingInviteCCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_INVITE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated uint64 charids = 3;
  for (int i = 0; i < this->charids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->charids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.WeddingInviteCCmd)
  return target;
}

int WeddingInviteCCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_INVITE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated uint64 charids = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->charids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->charids(i));
    }
    total_size += 1 * this->charids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeddingInviteCCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WeddingInviteCCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WeddingInviteCCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WeddingInviteCCmd::MergeFrom(const WeddingInviteCCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  charids_.MergeFrom(from.charids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WeddingInviteCCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeddingInviteCCmd::CopyFrom(const WeddingInviteCCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeddingInviteCCmd::IsInitialized() const {

  return true;
}

void WeddingInviteCCmd::Swap(WeddingInviteCCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    charids_.Swap(&other->charids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WeddingInviteCCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WeddingInviteCCmd_descriptor_;
  metadata.reflection = WeddingInviteCCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UploadWeddingPhotoCCmd::kCmdFieldNumber;
const int UploadWeddingPhotoCCmd::kParamFieldNumber;
const int UploadWeddingPhotoCCmd::kIndexFieldNumber;
const int UploadWeddingPhotoCCmd::kTimeFieldNumber;
#endif  // !_MSC_VER

UploadWeddingPhotoCCmd::UploadWeddingPhotoCCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UploadWeddingPhotoCCmd)
}

void UploadWeddingPhotoCCmd::InitAsDefaultInstance() {
}

UploadWeddingPhotoCCmd::UploadWeddingPhotoCCmd(const UploadWeddingPhotoCCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UploadWeddingPhotoCCmd)
}

void UploadWeddingPhotoCCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 65;
  param_ = 14;
  index_ = 0u;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UploadWeddingPhotoCCmd::~UploadWeddingPhotoCCmd() {
  // @@protoc_insertion_point(destructor:Cmd.UploadWeddingPhotoCCmd)
  SharedDtor();
}

void UploadWeddingPhotoCCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UploadWeddingPhotoCCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UploadWeddingPhotoCCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UploadWeddingPhotoCCmd_descriptor_;
}

const UploadWeddingPhotoCCmd& UploadWeddingPhotoCCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WeddingCCmd_2eproto();
  return *default_instance_;
}

UploadWeddingPhotoCCmd* UploadWeddingPhotoCCmd::default_instance_ = NULL;

UploadWeddingPhotoCCmd* UploadWeddingPhotoCCmd::New() const {
  return new UploadWeddingPhotoCCmd;
}

void UploadWeddingPhotoCCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UploadWeddingPhotoCCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(index_, time_);
    cmd_ = 65;
    param_ = 14;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UploadWeddingPhotoCCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UploadWeddingPhotoCCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_UPLOAD_WEDDING_PHOTO];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::WeddingCParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::WeddingCParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_index;
        break;
      }

      // optional uint32 index = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }

      // optional uint32 time = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UploadWeddingPhotoCCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UploadWeddingPhotoCCmd)
  return false;
#undef DO_
}

void UploadWeddingPhotoCCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UploadWeddingPhotoCCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_UPLOAD_WEDDING_PHOTO];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 index = 3 [default = 0];
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->index(), output);
  }

  // optional uint32 time = 4 [default = 0];
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UploadWeddingPhotoCCmd)
}

::google::protobuf::uint8* UploadWeddingPhotoCCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UploadWeddingPhotoCCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_UPLOAD_WEDDING_PHOTO];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 index = 3 [default = 0];
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->index(), target);
  }

  // optional uint32 time = 4 [default = 0];
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UploadWeddingPhotoCCmd)
  return target;
}

int UploadWeddingPhotoCCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_UPLOAD_WEDDING_PHOTO];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 index = 3 [default = 0];
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // optional uint32 time = 4 [default = 0];
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UploadWeddingPhotoCCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UploadWeddingPhotoCCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UploadWeddingPhotoCCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UploadWeddingPhotoCCmd::MergeFrom(const UploadWeddingPhotoCCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UploadWeddingPhotoCCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UploadWeddingPhotoCCmd::CopyFrom(const UploadWeddingPhotoCCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadWeddingPhotoCCmd::IsInitialized() const {

  return true;
}

void UploadWeddingPhotoCCmd::Swap(UploadWeddingPhotoCCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(index_, other->index_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UploadWeddingPhotoCCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UploadWeddingPhotoCCmd_descriptor_;
  metadata.reflection = UploadWeddingPhotoCCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CheckCanReserveCCmd::kCmdFieldNumber;
const int CheckCanReserveCCmd::kParamFieldNumber;
const int CheckCanReserveCCmd::kCharid2FieldNumber;
const int CheckCanReserveCCmd::kSuccessFieldNumber;
#endif  // !_MSC_VER

CheckCanReserveCCmd::CheckCanReserveCCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.CheckCanReserveCCmd)
}

void CheckCanReserveCCmd::InitAsDefaultInstance() {
}

CheckCanReserveCCmd::CheckCanReserveCCmd(const CheckCanReserveCCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.CheckCanReserveCCmd)
}

void CheckCanReserveCCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 65;
  param_ = 15;
  charid2_ = GOOGLE_ULONGLONG(0);
  success_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CheckCanReserveCCmd::~CheckCanReserveCCmd() {
  // @@protoc_insertion_point(destructor:Cmd.CheckCanReserveCCmd)
  SharedDtor();
}

void CheckCanReserveCCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CheckCanReserveCCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckCanReserveCCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheckCanReserveCCmd_descriptor_;
}

const CheckCanReserveCCmd& CheckCanReserveCCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WeddingCCmd_2eproto();
  return *default_instance_;
}

CheckCanReserveCCmd* CheckCanReserveCCmd::default_instance_ = NULL;

CheckCanReserveCCmd* CheckCanReserveCCmd::New() const {
  return new CheckCanReserveCCmd;
}

void CheckCanReserveCCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CheckCanReserveCCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(charid2_, success_);
    cmd_ = 65;
    param_ = 15;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CheckCanReserveCCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.CheckCanReserveCCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_CHECK_CAN_RESERVE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::WeddingCParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::WeddingCParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid2;
        break;
      }

      // optional uint64 charid2 = 3;
      case 3: {
        if (tag == 24) {
         parse_charid2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid2_)));
          set_has_charid2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_success;
        break;
      }

      // optional bool success = 4;
      case 4: {
        if (tag == 32) {
         parse_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.CheckCanReserveCCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.CheckCanReserveCCmd)
  return false;
#undef DO_
}

void CheckCanReserveCCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.CheckCanReserveCCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_CHECK_CAN_RESERVE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid2 = 3;
  if (has_charid2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid2(), output);
  }

  // optional bool success = 4;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->success(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.CheckCanReserveCCmd)
}

::google::protobuf::uint8* CheckCanReserveCCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.CheckCanReserveCCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_CHECK_CAN_RESERVE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid2 = 3;
  if (has_charid2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid2(), target);
  }

  // optional bool success = 4;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->success(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.CheckCanReserveCCmd)
  return target;
}

int CheckCanReserveCCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_CHECK_CAN_RESERVE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid2 = 3;
    if (has_charid2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid2());
    }

    // optional bool success = 4;
    if (has_success()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckCanReserveCCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CheckCanReserveCCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CheckCanReserveCCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CheckCanReserveCCmd::MergeFrom(const CheckCanReserveCCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid2()) {
      set_charid2(from.charid2());
    }
    if (from.has_success()) {
      set_success(from.success());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CheckCanReserveCCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckCanReserveCCmd::CopyFrom(const CheckCanReserveCCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckCanReserveCCmd::IsInitialized() const {

  return true;
}

void CheckCanReserveCCmd::Swap(CheckCanReserveCCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid2_, other->charid2_);
    std::swap(success_, other->success_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CheckCanReserveCCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CheckCanReserveCCmd_descriptor_;
  metadata.reflection = CheckCanReserveCCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqPartnerInfoCCmd::kCmdFieldNumber;
const int ReqPartnerInfoCCmd::kParamFieldNumber;
const int ReqPartnerInfoCCmd::kChardataFieldNumber;
#endif  // !_MSC_VER

ReqPartnerInfoCCmd::ReqPartnerInfoCCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ReqPartnerInfoCCmd)
}

void ReqPartnerInfoCCmd::InitAsDefaultInstance() {
  chardata_ = const_cast< ::Cmd::CharData*>(&::Cmd::CharData::default_instance());
}

ReqPartnerInfoCCmd::ReqPartnerInfoCCmd(const ReqPartnerInfoCCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ReqPartnerInfoCCmd)
}

void ReqPartnerInfoCCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 65;
  param_ = 16;
  chardata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqPartnerInfoCCmd::~ReqPartnerInfoCCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ReqPartnerInfoCCmd)
  SharedDtor();
}

void ReqPartnerInfoCCmd::SharedDtor() {
  if (this != default_instance_) {
    delete chardata_;
  }
}

void ReqPartnerInfoCCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqPartnerInfoCCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqPartnerInfoCCmd_descriptor_;
}

const ReqPartnerInfoCCmd& ReqPartnerInfoCCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WeddingCCmd_2eproto();
  return *default_instance_;
}

ReqPartnerInfoCCmd* ReqPartnerInfoCCmd::default_instance_ = NULL;

ReqPartnerInfoCCmd* ReqPartnerInfoCCmd::New() const {
  return new ReqPartnerInfoCCmd;
}

void ReqPartnerInfoCCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 65;
    param_ = 16;
    if (has_chardata()) {
      if (chardata_ != NULL) chardata_->::Cmd::CharData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqPartnerInfoCCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ReqPartnerInfoCCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_REQ_PARTNER_INFO];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::WeddingCParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::WeddingCParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_chardata;
        break;
      }

      // optional .Cmd.CharData chardata = 3;
      case 3: {
        if (tag == 26) {
         parse_chardata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chardata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ReqPartnerInfoCCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ReqPartnerInfoCCmd)
  return false;
#undef DO_
}

void ReqPartnerInfoCCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ReqPartnerInfoCCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_REQ_PARTNER_INFO];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.CharData chardata = 3;
  if (has_chardata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->chardata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ReqPartnerInfoCCmd)
}

::google::protobuf::uint8* ReqPartnerInfoCCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ReqPartnerInfoCCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_REQ_PARTNER_INFO];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.CharData chardata = 3;
  if (has_chardata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->chardata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ReqPartnerInfoCCmd)
  return target;
}

int ReqPartnerInfoCCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_REQ_PARTNER_INFO];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.CharData chardata = 3;
    if (has_chardata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chardata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqPartnerInfoCCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqPartnerInfoCCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqPartnerInfoCCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqPartnerInfoCCmd::MergeFrom(const ReqPartnerInfoCCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_chardata()) {
      mutable_chardata()->::Cmd::CharData::MergeFrom(from.chardata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqPartnerInfoCCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqPartnerInfoCCmd::CopyFrom(const ReqPartnerInfoCCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqPartnerInfoCCmd::IsInitialized() const {

  return true;
}

void ReqPartnerInfoCCmd::Swap(ReqPartnerInfoCCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(chardata_, other->chardata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqPartnerInfoCCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqPartnerInfoCCmd_descriptor_;
  metadata.reflection = ReqPartnerInfoCCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NtfWeddingInfoCCmd::kCmdFieldNumber;
const int NtfWeddingInfoCCmd::kParamFieldNumber;
const int NtfWeddingInfoCCmd::kInfoFieldNumber;
#endif  // !_MSC_VER

NtfWeddingInfoCCmd::NtfWeddingInfoCCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.NtfWeddingInfoCCmd)
}

void NtfWeddingInfoCCmd::InitAsDefaultInstance() {
  info_ = const_cast< ::Cmd::BirefWeddingInfo*>(&::Cmd::BirefWeddingInfo::default_instance());
}

NtfWeddingInfoCCmd::NtfWeddingInfoCCmd(const NtfWeddingInfoCCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.NtfWeddingInfoCCmd)
}

void NtfWeddingInfoCCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 65;
  param_ = 17;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NtfWeddingInfoCCmd::~NtfWeddingInfoCCmd() {
  // @@protoc_insertion_point(destructor:Cmd.NtfWeddingInfoCCmd)
  SharedDtor();
}

void NtfWeddingInfoCCmd::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void NtfWeddingInfoCCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NtfWeddingInfoCCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NtfWeddingInfoCCmd_descriptor_;
}

const NtfWeddingInfoCCmd& NtfWeddingInfoCCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WeddingCCmd_2eproto();
  return *default_instance_;
}

NtfWeddingInfoCCmd* NtfWeddingInfoCCmd::default_instance_ = NULL;

NtfWeddingInfoCCmd* NtfWeddingInfoCCmd::New() const {
  return new NtfWeddingInfoCCmd;
}

void NtfWeddingInfoCCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 65;
    param_ = 17;
    if (has_info()) {
      if (info_ != NULL) info_->::Cmd::BirefWeddingInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NtfWeddingInfoCCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.NtfWeddingInfoCCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_NTF_WEDDING_INFO];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::WeddingCParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::WeddingCParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }

      // optional .Cmd.BirefWeddingInfo info = 3;
      case 3: {
        if (tag == 26) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.NtfWeddingInfoCCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.NtfWeddingInfoCCmd)
  return false;
#undef DO_
}

void NtfWeddingInfoCCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.NtfWeddingInfoCCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_NTF_WEDDING_INFO];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.BirefWeddingInfo info = 3;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.NtfWeddingInfoCCmd)
}

::google::protobuf::uint8* NtfWeddingInfoCCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.NtfWeddingInfoCCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_NTF_WEDDING_INFO];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.BirefWeddingInfo info = 3;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.NtfWeddingInfoCCmd)
  return target;
}

int NtfWeddingInfoCCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_NTF_WEDDING_INFO];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.BirefWeddingInfo info = 3;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NtfWeddingInfoCCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NtfWeddingInfoCCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NtfWeddingInfoCCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NtfWeddingInfoCCmd::MergeFrom(const NtfWeddingInfoCCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_info()) {
      mutable_info()->::Cmd::BirefWeddingInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NtfWeddingInfoCCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NtfWeddingInfoCCmd::CopyFrom(const NtfWeddingInfoCCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NtfWeddingInfoCCmd::IsInitialized() const {

  return true;
}

void NtfWeddingInfoCCmd::Swap(NtfWeddingInfoCCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NtfWeddingInfoCCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NtfWeddingInfoCCmd_descriptor_;
  metadata.reflection = NtfWeddingInfoCCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InviteBeginWeddingCCmd::kCmdFieldNumber;
const int InviteBeginWeddingCCmd::kParamFieldNumber;
const int InviteBeginWeddingCCmd::kMasteridFieldNumber;
const int InviteBeginWeddingCCmd::kNameFieldNumber;
const int InviteBeginWeddingCCmd::kTocharidFieldNumber;
#endif  // !_MSC_VER

InviteBeginWeddingCCmd::InviteBeginWeddingCCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.InviteBeginWeddingCCmd)
}

void InviteBeginWeddingCCmd::InitAsDefaultInstance() {
}

InviteBeginWeddingCCmd::InviteBeginWeddingCCmd(const InviteBeginWeddingCCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.InviteBeginWeddingCCmd)
}

void InviteBeginWeddingCCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 65;
  param_ = 18;
  masterid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tocharid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InviteBeginWeddingCCmd::~InviteBeginWeddingCCmd() {
  // @@protoc_insertion_point(destructor:Cmd.InviteBeginWeddingCCmd)
  SharedDtor();
}

void InviteBeginWeddingCCmd::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void InviteBeginWeddingCCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InviteBeginWeddingCCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InviteBeginWeddingCCmd_descriptor_;
}

const InviteBeginWeddingCCmd& InviteBeginWeddingCCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WeddingCCmd_2eproto();
  return *default_instance_;
}

InviteBeginWeddingCCmd* InviteBeginWeddingCCmd::default_instance_ = NULL;

InviteBeginWeddingCCmd* InviteBeginWeddingCCmd::New() const {
  return new InviteBeginWeddingCCmd;
}

void InviteBeginWeddingCCmd::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    cmd_ = 65;
    param_ = 18;
    masterid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    tocharid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InviteBeginWeddingCCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.InviteBeginWeddingCCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_INVITE_WEDDING];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::WeddingCParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::WeddingCParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_masterid;
        break;
      }

      // optional uint64 masterid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_masterid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &masterid_)));
          set_has_masterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // optional string name = 5;
      case 5: {
        if (tag == 42) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_tocharid;
        break;
      }

      // optional uint64 tocharid = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_tocharid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tocharid_)));
          set_has_tocharid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.InviteBeginWeddingCCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.InviteBeginWeddingCCmd)
  return false;
#undef DO_
}

void InviteBeginWeddingCCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.InviteBeginWeddingCCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_INVITE_WEDDING];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 masterid = 3 [default = 0];
  if (has_masterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->masterid(), output);
  }

  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->name(), output);
  }

  // optional uint64 tocharid = 6 [default = 0];
  if (has_tocharid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->tocharid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.InviteBeginWeddingCCmd)
}

::google::protobuf::uint8* InviteBeginWeddingCCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.InviteBeginWeddingCCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_INVITE_WEDDING];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 masterid = 3 [default = 0];
  if (has_masterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->masterid(), target);
  }

  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  // optional uint64 tocharid = 6 [default = 0];
  if (has_tocharid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->tocharid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.InviteBeginWeddingCCmd)
  return target;
}

int InviteBeginWeddingCCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_INVITE_WEDDING];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 masterid = 3 [default = 0];
    if (has_masterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->masterid());
    }

    // optional string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint64 tocharid = 6 [default = 0];
    if (has_tocharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tocharid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InviteBeginWeddingCCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InviteBeginWeddingCCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InviteBeginWeddingCCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InviteBeginWeddingCCmd::MergeFrom(const InviteBeginWeddingCCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_masterid()) {
      set_masterid(from.masterid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_tocharid()) {
      set_tocharid(from.tocharid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InviteBeginWeddingCCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InviteBeginWeddingCCmd::CopyFrom(const InviteBeginWeddingCCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InviteBeginWeddingCCmd::IsInitialized() const {

  return true;
}

void InviteBeginWeddingCCmd::Swap(InviteBeginWeddingCCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(masterid_, other->masterid_);
    std::swap(name_, other->name_);
    std::swap(tocharid_, other->tocharid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InviteBeginWeddingCCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InviteBeginWeddingCCmd_descriptor_;
  metadata.reflection = InviteBeginWeddingCCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplyBeginWeddingCCmd::kCmdFieldNumber;
const int ReplyBeginWeddingCCmd::kParamFieldNumber;
const int ReplyBeginWeddingCCmd::kMasteridFieldNumber;
#endif  // !_MSC_VER

ReplyBeginWeddingCCmd::ReplyBeginWeddingCCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ReplyBeginWeddingCCmd)
}

void ReplyBeginWeddingCCmd::InitAsDefaultInstance() {
}

ReplyBeginWeddingCCmd::ReplyBeginWeddingCCmd(const ReplyBeginWeddingCCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ReplyBeginWeddingCCmd)
}

void ReplyBeginWeddingCCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 65;
  param_ = 19;
  masterid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplyBeginWeddingCCmd::~ReplyBeginWeddingCCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ReplyBeginWeddingCCmd)
  SharedDtor();
}

void ReplyBeginWeddingCCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReplyBeginWeddingCCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplyBeginWeddingCCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplyBeginWeddingCCmd_descriptor_;
}

const ReplyBeginWeddingCCmd& ReplyBeginWeddingCCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WeddingCCmd_2eproto();
  return *default_instance_;
}

ReplyBeginWeddingCCmd* ReplyBeginWeddingCCmd::default_instance_ = NULL;

ReplyBeginWeddingCCmd* ReplyBeginWeddingCCmd::New() const {
  return new ReplyBeginWeddingCCmd;
}

void ReplyBeginWeddingCCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 65;
    param_ = 19;
    masterid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplyBeginWeddingCCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ReplyBeginWeddingCCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_REPLY_WEDDING];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::WeddingCParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::WeddingCParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_masterid;
        break;
      }

      // optional uint64 masterid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_masterid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &masterid_)));
          set_has_masterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ReplyBeginWeddingCCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ReplyBeginWeddingCCmd)
  return false;
#undef DO_
}

void ReplyBeginWeddingCCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ReplyBeginWeddingCCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_REPLY_WEDDING];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 masterid = 3 [default = 0];
  if (has_masterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->masterid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ReplyBeginWeddingCCmd)
}

::google::protobuf::uint8* ReplyBeginWeddingCCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ReplyBeginWeddingCCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_REPLY_WEDDING];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 masterid = 3 [default = 0];
  if (has_masterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->masterid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ReplyBeginWeddingCCmd)
  return target;
}

int ReplyBeginWeddingCCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_REPLY_WEDDING];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 masterid = 3 [default = 0];
    if (has_masterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->masterid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplyBeginWeddingCCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplyBeginWeddingCCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplyBeginWeddingCCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplyBeginWeddingCCmd::MergeFrom(const ReplyBeginWeddingCCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_masterid()) {
      set_masterid(from.masterid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplyBeginWeddingCCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyBeginWeddingCCmd::CopyFrom(const ReplyBeginWeddingCCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyBeginWeddingCCmd::IsInitialized() const {

  return true;
}

void ReplyBeginWeddingCCmd::Swap(ReplyBeginWeddingCCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(masterid_, other->masterid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplyBeginWeddingCCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplyBeginWeddingCCmd_descriptor_;
  metadata.reflection = ReplyBeginWeddingCCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GoToWeddingPosCCmd::kCmdFieldNumber;
const int GoToWeddingPosCCmd::kParamFieldNumber;
#endif  // !_MSC_VER

GoToWeddingPosCCmd::GoToWeddingPosCCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GoToWeddingPosCCmd)
}

void GoToWeddingPosCCmd::InitAsDefaultInstance() {
}

GoToWeddingPosCCmd::GoToWeddingPosCCmd(const GoToWeddingPosCCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GoToWeddingPosCCmd)
}

void GoToWeddingPosCCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 65;
  param_ = 20;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GoToWeddingPosCCmd::~GoToWeddingPosCCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GoToWeddingPosCCmd)
  SharedDtor();
}

void GoToWeddingPosCCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GoToWeddingPosCCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GoToWeddingPosCCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GoToWeddingPosCCmd_descriptor_;
}

const GoToWeddingPosCCmd& GoToWeddingPosCCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WeddingCCmd_2eproto();
  return *default_instance_;
}

GoToWeddingPosCCmd* GoToWeddingPosCCmd::default_instance_ = NULL;

GoToWeddingPosCCmd* GoToWeddingPosCCmd::New() const {
  return new GoToWeddingPosCCmd;
}

void GoToWeddingPosCCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 65;
    param_ = 20;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GoToWeddingPosCCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GoToWeddingPosCCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_GOTO_WEDDINGPOS];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::WeddingCParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::WeddingCParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GoToWeddingPosCCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GoToWeddingPosCCmd)
  return false;
#undef DO_
}

void GoToWeddingPosCCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GoToWeddingPosCCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_GOTO_WEDDINGPOS];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GoToWeddingPosCCmd)
}

::google::protobuf::uint8* GoToWeddingPosCCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GoToWeddingPosCCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_GOTO_WEDDINGPOS];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GoToWeddingPosCCmd)
  return target;
}

int GoToWeddingPosCCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_GOTO_WEDDINGPOS];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GoToWeddingPosCCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GoToWeddingPosCCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GoToWeddingPosCCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GoToWeddingPosCCmd::MergeFrom(const GoToWeddingPosCCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GoToWeddingPosCCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GoToWeddingPosCCmd::CopyFrom(const GoToWeddingPosCCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GoToWeddingPosCCmd::IsInitialized() const {

  return true;
}

void GoToWeddingPosCCmd::Swap(GoToWeddingPosCCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GoToWeddingPosCCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GoToWeddingPosCCmd_descriptor_;
  metadata.reflection = GoToWeddingPosCCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestionWeddingCCmd::kCmdFieldNumber;
const int QuestionWeddingCCmd::kParamFieldNumber;
const int QuestionWeddingCCmd::kQuestionidFieldNumber;
const int QuestionWeddingCCmd::kCharidsFieldNumber;
const int QuestionWeddingCCmd::kNpcguidFieldNumber;
#endif  // !_MSC_VER

QuestionWeddingCCmd::QuestionWeddingCCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QuestionWeddingCCmd)
}

void QuestionWeddingCCmd::InitAsDefaultInstance() {
}

QuestionWeddingCCmd::QuestionWeddingCCmd(const QuestionWeddingCCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QuestionWeddingCCmd)
}

void QuestionWeddingCCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 65;
  param_ = 21;
  questionid_ = 0u;
  npcguid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestionWeddingCCmd::~QuestionWeddingCCmd() {
  // @@protoc_insertion_point(destructor:Cmd.QuestionWeddingCCmd)
  SharedDtor();
}

void QuestionWeddingCCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuestionWeddingCCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestionWeddingCCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestionWeddingCCmd_descriptor_;
}

const QuestionWeddingCCmd& QuestionWeddingCCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WeddingCCmd_2eproto();
  return *default_instance_;
}

QuestionWeddingCCmd* QuestionWeddingCCmd::default_instance_ = NULL;

QuestionWeddingCCmd* QuestionWeddingCCmd::New() const {
  return new QuestionWeddingCCmd;
}

void QuestionWeddingCCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<QuestionWeddingCCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 23) {
    ZR_(npcguid_, questionid_);
    cmd_ = 65;
    param_ = 21;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  charids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestionWeddingCCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QuestionWeddingCCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_QUESTION];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::WeddingCParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::WeddingCParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_questionid;
        break;
      }

      // optional uint32 questionid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_questionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &questionid_)));
          set_has_questionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_charids;
        break;
      }

      // repeated uint64 charids = 4;
      case 4: {
        if (tag == 32) {
         parse_charids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 32, input, this->mutable_charids())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_charids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_charids;
        if (input->ExpectTag(40)) goto parse_npcguid;
        break;
      }

      // optional uint64 npcguid = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_npcguid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &npcguid_)));
          set_has_npcguid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QuestionWeddingCCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QuestionWeddingCCmd)
  return false;
#undef DO_
}

void QuestionWeddingCCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QuestionWeddingCCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_QUESTION];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 questionid = 3 [default = 0];
  if (has_questionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->questionid(), output);
  }

  // repeated uint64 charids = 4;
  for (int i = 0; i < this->charids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      4, this->charids(i), output);
  }

  // optional uint64 npcguid = 5 [default = 0];
  if (has_npcguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->npcguid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QuestionWeddingCCmd)
}

::google::protobuf::uint8* QuestionWeddingCCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QuestionWeddingCCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_QUESTION];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 questionid = 3 [default = 0];
  if (has_questionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->questionid(), target);
  }

  // repeated uint64 charids = 4;
  for (int i = 0; i < this->charids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(4, this->charids(i), target);
  }

  // optional uint64 npcguid = 5 [default = 0];
  if (has_npcguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->npcguid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QuestionWeddingCCmd)
  return target;
}

int QuestionWeddingCCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_QUESTION];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 questionid = 3 [default = 0];
    if (has_questionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->questionid());
    }

    // optional uint64 npcguid = 5 [default = 0];
    if (has_npcguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->npcguid());
    }

  }
  // repeated uint64 charids = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->charids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->charids(i));
    }
    total_size += 1 * this->charids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestionWeddingCCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestionWeddingCCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestionWeddingCCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestionWeddingCCmd::MergeFrom(const QuestionWeddingCCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  charids_.MergeFrom(from.charids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_questionid()) {
      set_questionid(from.questionid());
    }
    if (from.has_npcguid()) {
      set_npcguid(from.npcguid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestionWeddingCCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestionWeddingCCmd::CopyFrom(const QuestionWeddingCCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestionWeddingCCmd::IsInitialized() const {

  return true;
}

void QuestionWeddingCCmd::Swap(QuestionWeddingCCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(questionid_, other->questionid_);
    charids_.Swap(&other->charids_);
    std::swap(npcguid_, other->npcguid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestionWeddingCCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestionWeddingCCmd_descriptor_;
  metadata.reflection = QuestionWeddingCCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AnswerWeddingCCmd::kCmdFieldNumber;
const int AnswerWeddingCCmd::kParamFieldNumber;
const int AnswerWeddingCCmd::kQuestionidFieldNumber;
const int AnswerWeddingCCmd::kAnswerFieldNumber;
#endif  // !_MSC_VER

AnswerWeddingCCmd::AnswerWeddingCCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.AnswerWeddingCCmd)
}

void AnswerWeddingCCmd::InitAsDefaultInstance() {
}

AnswerWeddingCCmd::AnswerWeddingCCmd(const AnswerWeddingCCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.AnswerWeddingCCmd)
}

void AnswerWeddingCCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 65;
  param_ = 22;
  questionid_ = 0u;
  answer_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AnswerWeddingCCmd::~AnswerWeddingCCmd() {
  // @@protoc_insertion_point(destructor:Cmd.AnswerWeddingCCmd)
  SharedDtor();
}

void AnswerWeddingCCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AnswerWeddingCCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnswerWeddingCCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AnswerWeddingCCmd_descriptor_;
}

const AnswerWeddingCCmd& AnswerWeddingCCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WeddingCCmd_2eproto();
  return *default_instance_;
}

AnswerWeddingCCmd* AnswerWeddingCCmd::default_instance_ = NULL;

AnswerWeddingCCmd* AnswerWeddingCCmd::New() const {
  return new AnswerWeddingCCmd;
}

void AnswerWeddingCCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AnswerWeddingCCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(questionid_, answer_);
    cmd_ = 65;
    param_ = 22;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AnswerWeddingCCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.AnswerWeddingCCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_ANSWER];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::WeddingCParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::WeddingCParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_questionid;
        break;
      }

      // optional uint32 questionid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_questionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &questionid_)));
          set_has_questionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_answer;
        break;
      }

      // optional uint32 answer = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_answer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &answer_)));
          set_has_answer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.AnswerWeddingCCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.AnswerWeddingCCmd)
  return false;
#undef DO_
}

void AnswerWeddingCCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.AnswerWeddingCCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_ANSWER];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 questionid = 3 [default = 0];
  if (has_questionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->questionid(), output);
  }

  // optional uint32 answer = 4 [default = 0];
  if (has_answer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->answer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.AnswerWeddingCCmd)
}

::google::protobuf::uint8* AnswerWeddingCCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.AnswerWeddingCCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_ANSWER];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 questionid = 3 [default = 0];
  if (has_questionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->questionid(), target);
  }

  // optional uint32 answer = 4 [default = 0];
  if (has_answer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->answer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.AnswerWeddingCCmd)
  return target;
}

int AnswerWeddingCCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_ANSWER];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 questionid = 3 [default = 0];
    if (has_questionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->questionid());
    }

    // optional uint32 answer = 4 [default = 0];
    if (has_answer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->answer());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnswerWeddingCCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AnswerWeddingCCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AnswerWeddingCCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AnswerWeddingCCmd::MergeFrom(const AnswerWeddingCCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_questionid()) {
      set_questionid(from.questionid());
    }
    if (from.has_answer()) {
      set_answer(from.answer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AnswerWeddingCCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnswerWeddingCCmd::CopyFrom(const AnswerWeddingCCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnswerWeddingCCmd::IsInitialized() const {

  return true;
}

void AnswerWeddingCCmd::Swap(AnswerWeddingCCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(questionid_, other->questionid_);
    std::swap(answer_, other->answer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AnswerWeddingCCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AnswerWeddingCCmd_descriptor_;
  metadata.reflection = AnswerWeddingCCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WeddingEventMsgCCmd::kCmdFieldNumber;
const int WeddingEventMsgCCmd::kParamFieldNumber;
const int WeddingEventMsgCCmd::kCharidFieldNumber;
const int WeddingEventMsgCCmd::kEventFieldNumber;
const int WeddingEventMsgCCmd::kIdFieldNumber;
const int WeddingEventMsgCCmd::kCharid1FieldNumber;
const int WeddingEventMsgCCmd::kCharid2FieldNumber;
const int WeddingEventMsgCCmd::kMsgFieldNumber;
const int WeddingEventMsgCCmd::kOptCharidFieldNumber;
#endif  // !_MSC_VER

WeddingEventMsgCCmd::WeddingEventMsgCCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.WeddingEventMsgCCmd)
}

void WeddingEventMsgCCmd::InitAsDefaultInstance() {
}

WeddingEventMsgCCmd::WeddingEventMsgCCmd(const WeddingEventMsgCCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.WeddingEventMsgCCmd)
}

void WeddingEventMsgCCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 65;
  param_ = 23;
  charid_ = GOOGLE_ULONGLONG(0);
  event_ = 1;
  id_ = GOOGLE_ULONGLONG(0);
  charid1_ = GOOGLE_ULONGLONG(0);
  charid2_ = GOOGLE_ULONGLONG(0);
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  opt_charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WeddingEventMsgCCmd::~WeddingEventMsgCCmd() {
  // @@protoc_insertion_point(destructor:Cmd.WeddingEventMsgCCmd)
  SharedDtor();
}

void WeddingEventMsgCCmd::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void WeddingEventMsgCCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeddingEventMsgCCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WeddingEventMsgCCmd_descriptor_;
}

const WeddingEventMsgCCmd& WeddingEventMsgCCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WeddingCCmd_2eproto();
  return *default_instance_;
}

WeddingEventMsgCCmd* WeddingEventMsgCCmd::default_instance_ = NULL;

WeddingEventMsgCCmd* WeddingEventMsgCCmd::New() const {
  return new WeddingEventMsgCCmd;
}

void WeddingEventMsgCCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<WeddingEventMsgCCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(charid_, charid2_);
    cmd_ = 65;
    param_ = 23;
    event_ = 1;
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        msg_->clear();
      }
    }
  }
  opt_charid_ = GOOGLE_ULONGLONG(0);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WeddingEventMsgCCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.WeddingEventMsgCCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_WEDDING_EVENT_MSG];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::WeddingCParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::WeddingCParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_event;
        break;
      }

      // optional .Cmd.EWeddingEvent event = 4;
      case 4: {
        if (tag == 32) {
         parse_event:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EWeddingEvent_IsValid(value)) {
            set_event(static_cast< ::Cmd::EWeddingEvent >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_id;
        break;
      }

      // optional uint64 id = 5;
      case 5: {
        if (tag == 40) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_charid1;
        break;
      }

      // optional uint64 charid1 = 6;
      case 6: {
        if (tag == 48) {
         parse_charid1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid1_)));
          set_has_charid1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_charid2;
        break;
      }

      // optional uint64 charid2 = 7;
      case 7: {
        if (tag == 56) {
         parse_charid2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid2_)));
          set_has_charid2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_msg;
        break;
      }

      // optional string msg = 8;
      case 8: {
        if (tag == 66) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_opt_charid;
        break;
      }

      // optional uint64 opt_charid = 9;
      case 9: {
        if (tag == 72) {
         parse_opt_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &opt_charid_)));
          set_has_opt_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.WeddingEventMsgCCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.WeddingEventMsgCCmd)
  return false;
#undef DO_
}

void WeddingEventMsgCCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.WeddingEventMsgCCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_WEDDING_EVENT_MSG];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional .Cmd.EWeddingEvent event = 4;
  if (has_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->event(), output);
  }

  // optional uint64 id = 5;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->id(), output);
  }

  // optional uint64 charid1 = 6;
  if (has_charid1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->charid1(), output);
  }

  // optional uint64 charid2 = 7;
  if (has_charid2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->charid2(), output);
  }

  // optional string msg = 8;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->msg(), output);
  }

  // optional uint64 opt_charid = 9;
  if (has_opt_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->opt_charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.WeddingEventMsgCCmd)
}

::google::protobuf::uint8* WeddingEventMsgCCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.WeddingEventMsgCCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_WEDDING_EVENT_MSG];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional .Cmd.EWeddingEvent event = 4;
  if (has_event()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->event(), target);
  }

  // optional uint64 id = 5;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->id(), target);
  }

  // optional uint64 charid1 = 6;
  if (has_charid1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->charid1(), target);
  }

  // optional uint64 charid2 = 7;
  if (has_charid2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->charid2(), target);
  }

  // optional string msg = 8;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->msg(), target);
  }

  // optional uint64 opt_charid = 9;
  if (has_opt_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->opt_charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.WeddingEventMsgCCmd)
  return target;
}

int WeddingEventMsgCCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_WEDDING_EVENT_MSG];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional .Cmd.EWeddingEvent event = 4;
    if (has_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->event());
    }

    // optional uint64 id = 5;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint64 charid1 = 6;
    if (has_charid1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid1());
    }

    // optional uint64 charid2 = 7;
    if (has_charid2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid2());
    }

    // optional string msg = 8;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 opt_charid = 9;
    if (has_opt_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->opt_charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeddingEventMsgCCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WeddingEventMsgCCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WeddingEventMsgCCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WeddingEventMsgCCmd::MergeFrom(const WeddingEventMsgCCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_event()) {
      set_event(from.event());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_charid1()) {
      set_charid1(from.charid1());
    }
    if (from.has_charid2()) {
      set_charid2(from.charid2());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_opt_charid()) {
      set_opt_charid(from.opt_charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WeddingEventMsgCCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeddingEventMsgCCmd::CopyFrom(const WeddingEventMsgCCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeddingEventMsgCCmd::IsInitialized() const {

  return true;
}

void WeddingEventMsgCCmd::Swap(WeddingEventMsgCCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(event_, other->event_);
    std::swap(id_, other->id_);
    std::swap(charid1_, other->charid1_);
    std::swap(charid2_, other->charid2_);
    std::swap(msg_, other->msg_);
    std::swap(opt_charid_, other->opt_charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WeddingEventMsgCCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WeddingEventMsgCCmd_descriptor_;
  metadata.reflection = WeddingEventMsgCCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WeddingOverCCmd::kCmdFieldNumber;
const int WeddingOverCCmd::kParamFieldNumber;
const int WeddingOverCCmd::kSuccessFieldNumber;
#endif  // !_MSC_VER

WeddingOverCCmd::WeddingOverCCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.WeddingOverCCmd)
}

void WeddingOverCCmd::InitAsDefaultInstance() {
}

WeddingOverCCmd::WeddingOverCCmd(const WeddingOverCCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.WeddingOverCCmd)
}

void WeddingOverCCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 65;
  param_ = 24;
  success_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WeddingOverCCmd::~WeddingOverCCmd() {
  // @@protoc_insertion_point(destructor:Cmd.WeddingOverCCmd)
  SharedDtor();
}

void WeddingOverCCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WeddingOverCCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeddingOverCCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WeddingOverCCmd_descriptor_;
}

const WeddingOverCCmd& WeddingOverCCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WeddingCCmd_2eproto();
  return *default_instance_;
}

WeddingOverCCmd* WeddingOverCCmd::default_instance_ = NULL;

WeddingOverCCmd* WeddingOverCCmd::New() const {
  return new WeddingOverCCmd;
}

void WeddingOverCCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 65;
    param_ = 24;
    success_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WeddingOverCCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.WeddingOverCCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_WEDDING_STOP];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::WeddingCParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::WeddingCParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_success;
        break;
      }

      // optional bool success = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.WeddingOverCCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.WeddingOverCCmd)
  return false;
#undef DO_
}

void WeddingOverCCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.WeddingOverCCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_WEDDING_STOP];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional bool success = 3 [default = false];
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->success(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.WeddingOverCCmd)
}

::google::protobuf::uint8* WeddingOverCCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.WeddingOverCCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_WEDDING_STOP];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional bool success = 3 [default = false];
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->success(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.WeddingOverCCmd)
  return target;
}

int WeddingOverCCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_WEDDING_STOP];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional bool success = 3 [default = false];
    if (has_success()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeddingOverCCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WeddingOverCCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WeddingOverCCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WeddingOverCCmd::MergeFrom(const WeddingOverCCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_success()) {
      set_success(from.success());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WeddingOverCCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeddingOverCCmd::CopyFrom(const WeddingOverCCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeddingOverCCmd::IsInitialized() const {

  return true;
}

void WeddingOverCCmd::Swap(WeddingOverCCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(success_, other->success_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WeddingOverCCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WeddingOverCCmd_descriptor_;
  metadata.reflection = WeddingOverCCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WeddingSwitchQuestionCCmd::kCmdFieldNumber;
const int WeddingSwitchQuestionCCmd::kParamFieldNumber;
const int WeddingSwitchQuestionCCmd::kOnoffFieldNumber;
const int WeddingSwitchQuestionCCmd::kNpcguidFieldNumber;
#endif  // !_MSC_VER

WeddingSwitchQuestionCCmd::WeddingSwitchQuestionCCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.WeddingSwitchQuestionCCmd)
}

void WeddingSwitchQuestionCCmd::InitAsDefaultInstance() {
}

WeddingSwitchQuestionCCmd::WeddingSwitchQuestionCCmd(const WeddingSwitchQuestionCCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.WeddingSwitchQuestionCCmd)
}

void WeddingSwitchQuestionCCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 65;
  param_ = 25;
  onoff_ = false;
  npcguid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WeddingSwitchQuestionCCmd::~WeddingSwitchQuestionCCmd() {
  // @@protoc_insertion_point(destructor:Cmd.WeddingSwitchQuestionCCmd)
  SharedDtor();
}

void WeddingSwitchQuestionCCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WeddingSwitchQuestionCCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeddingSwitchQuestionCCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WeddingSwitchQuestionCCmd_descriptor_;
}

const WeddingSwitchQuestionCCmd& WeddingSwitchQuestionCCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WeddingCCmd_2eproto();
  return *default_instance_;
}

WeddingSwitchQuestionCCmd* WeddingSwitchQuestionCCmd::default_instance_ = NULL;

WeddingSwitchQuestionCCmd* WeddingSwitchQuestionCCmd::New() const {
  return new WeddingSwitchQuestionCCmd;
}

void WeddingSwitchQuestionCCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<WeddingSwitchQuestionCCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(npcguid_, onoff_);
    cmd_ = 65;
    param_ = 25;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WeddingSwitchQuestionCCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.WeddingSwitchQuestionCCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_QUESTION_SWITCH];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::WeddingCParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::WeddingCParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_onoff;
        break;
      }

      // optional bool onoff = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_onoff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &onoff_)));
          set_has_onoff();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_npcguid;
        break;
      }

      // optional uint64 npcguid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_npcguid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &npcguid_)));
          set_has_npcguid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.WeddingSwitchQuestionCCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.WeddingSwitchQuestionCCmd)
  return false;
#undef DO_
}

void WeddingSwitchQuestionCCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.WeddingSwitchQuestionCCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_QUESTION_SWITCH];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional bool onoff = 3 [default = false];
  if (has_onoff()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->onoff(), output);
  }

  // optional uint64 npcguid = 4 [default = 0];
  if (has_npcguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->npcguid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.WeddingSwitchQuestionCCmd)
}

::google::protobuf::uint8* WeddingSwitchQuestionCCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.WeddingSwitchQuestionCCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_QUESTION_SWITCH];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional bool onoff = 3 [default = false];
  if (has_onoff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->onoff(), target);
  }

  // optional uint64 npcguid = 4 [default = 0];
  if (has_npcguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->npcguid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.WeddingSwitchQuestionCCmd)
  return target;
}

int WeddingSwitchQuestionCCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_QUESTION_SWITCH];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional bool onoff = 3 [default = false];
    if (has_onoff()) {
      total_size += 1 + 1;
    }

    // optional uint64 npcguid = 4 [default = 0];
    if (has_npcguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->npcguid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeddingSwitchQuestionCCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WeddingSwitchQuestionCCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WeddingSwitchQuestionCCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WeddingSwitchQuestionCCmd::MergeFrom(const WeddingSwitchQuestionCCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_onoff()) {
      set_onoff(from.onoff());
    }
    if (from.has_npcguid()) {
      set_npcguid(from.npcguid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WeddingSwitchQuestionCCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeddingSwitchQuestionCCmd::CopyFrom(const WeddingSwitchQuestionCCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeddingSwitchQuestionCCmd::IsInitialized() const {

  return true;
}

void WeddingSwitchQuestionCCmd::Swap(WeddingSwitchQuestionCCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(onoff_, other->onoff_);
    std::swap(npcguid_, other->npcguid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WeddingSwitchQuestionCCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WeddingSwitchQuestionCCmd_descriptor_;
  metadata.reflection = WeddingSwitchQuestionCCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnterRollerCoasterCCmd::kCmdFieldNumber;
const int EnterRollerCoasterCCmd::kParamFieldNumber;
#endif  // !_MSC_VER

EnterRollerCoasterCCmd::EnterRollerCoasterCCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.EnterRollerCoasterCCmd)
}

void EnterRollerCoasterCCmd::InitAsDefaultInstance() {
}

EnterRollerCoasterCCmd::EnterRollerCoasterCCmd(const EnterRollerCoasterCCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.EnterRollerCoasterCCmd)
}

void EnterRollerCoasterCCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 65;
  param_ = 26;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnterRollerCoasterCCmd::~EnterRollerCoasterCCmd() {
  // @@protoc_insertion_point(destructor:Cmd.EnterRollerCoasterCCmd)
  SharedDtor();
}

void EnterRollerCoasterCCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EnterRollerCoasterCCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterRollerCoasterCCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnterRollerCoasterCCmd_descriptor_;
}

const EnterRollerCoasterCCmd& EnterRollerCoasterCCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WeddingCCmd_2eproto();
  return *default_instance_;
}

EnterRollerCoasterCCmd* EnterRollerCoasterCCmd::default_instance_ = NULL;

EnterRollerCoasterCCmd* EnterRollerCoasterCCmd::New() const {
  return new EnterRollerCoasterCCmd;
}

void EnterRollerCoasterCCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 65;
    param_ = 26;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnterRollerCoasterCCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.EnterRollerCoasterCCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_ENTER_ROLLER_COASTER];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::WeddingCParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::WeddingCParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.EnterRollerCoasterCCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.EnterRollerCoasterCCmd)
  return false;
#undef DO_
}

void EnterRollerCoasterCCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.EnterRollerCoasterCCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_ENTER_ROLLER_COASTER];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.EnterRollerCoasterCCmd)
}

::google::protobuf::uint8* EnterRollerCoasterCCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.EnterRollerCoasterCCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_ENTER_ROLLER_COASTER];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.EnterRollerCoasterCCmd)
  return target;
}

int EnterRollerCoasterCCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_ENTER_ROLLER_COASTER];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterRollerCoasterCCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnterRollerCoasterCCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnterRollerCoasterCCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnterRollerCoasterCCmd::MergeFrom(const EnterRollerCoasterCCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnterRollerCoasterCCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterRollerCoasterCCmd::CopyFrom(const EnterRollerCoasterCCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterRollerCoasterCCmd::IsInitialized() const {

  return true;
}

void EnterRollerCoasterCCmd::Swap(EnterRollerCoasterCCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnterRollerCoasterCCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnterRollerCoasterCCmd_descriptor_;
  metadata.reflection = EnterRollerCoasterCCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DivorceRollerCoasterInviteCCmd::kCmdFieldNumber;
const int DivorceRollerCoasterInviteCCmd::kParamFieldNumber;
const int DivorceRollerCoasterInviteCCmd::kInviterFieldNumber;
const int DivorceRollerCoasterInviteCCmd::kInviteeFieldNumber;
const int DivorceRollerCoasterInviteCCmd::kInviterNameFieldNumber;
#endif  // !_MSC_VER

DivorceRollerCoasterInviteCCmd::DivorceRollerCoasterInviteCCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.DivorceRollerCoasterInviteCCmd)
}

void DivorceRollerCoasterInviteCCmd::InitAsDefaultInstance() {
}

DivorceRollerCoasterInviteCCmd::DivorceRollerCoasterInviteCCmd(const DivorceRollerCoasterInviteCCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.DivorceRollerCoasterInviteCCmd)
}

void DivorceRollerCoasterInviteCCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 65;
  param_ = 27;
  inviter_ = GOOGLE_ULONGLONG(0);
  invitee_ = GOOGLE_ULONGLONG(0);
  inviter_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DivorceRollerCoasterInviteCCmd::~DivorceRollerCoasterInviteCCmd() {
  // @@protoc_insertion_point(destructor:Cmd.DivorceRollerCoasterInviteCCmd)
  SharedDtor();
}

void DivorceRollerCoasterInviteCCmd::SharedDtor() {
  if (inviter_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete inviter_name_;
  }
  if (this != default_instance_) {
  }
}

void DivorceRollerCoasterInviteCCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DivorceRollerCoasterInviteCCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DivorceRollerCoasterInviteCCmd_descriptor_;
}

const DivorceRollerCoasterInviteCCmd& DivorceRollerCoasterInviteCCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WeddingCCmd_2eproto();
  return *default_instance_;
}

DivorceRollerCoasterInviteCCmd* DivorceRollerCoasterInviteCCmd::default_instance_ = NULL;

DivorceRollerCoasterInviteCCmd* DivorceRollerCoasterInviteCCmd::New() const {
  return new DivorceRollerCoasterInviteCCmd;
}

void DivorceRollerCoasterInviteCCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DivorceRollerCoasterInviteCCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(inviter_, invitee_);
    cmd_ = 65;
    param_ = 27;
    if (has_inviter_name()) {
      if (inviter_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        inviter_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DivorceRollerCoasterInviteCCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.DivorceRollerCoasterInviteCCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_DIVORCE_ROLLER_COASTER_INVITE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::WeddingCParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::WeddingCParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_inviter;
        break;
      }

      // optional uint64 inviter = 3;
      case 3: {
        if (tag == 24) {
         parse_inviter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &inviter_)));
          set_has_inviter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_invitee;
        break;
      }

      // optional uint64 invitee = 4;
      case 4: {
        if (tag == 32) {
         parse_invitee:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &invitee_)));
          set_has_invitee();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_inviter_name;
        break;
      }

      // optional string inviter_name = 5;
      case 5: {
        if (tag == 42) {
         parse_inviter_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inviter_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->inviter_name().data(), this->inviter_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "inviter_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.DivorceRollerCoasterInviteCCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.DivorceRollerCoasterInviteCCmd)
  return false;
#undef DO_
}

void DivorceRollerCoasterInviteCCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.DivorceRollerCoasterInviteCCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_DIVORCE_ROLLER_COASTER_INVITE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 inviter = 3;
  if (has_inviter()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->inviter(), output);
  }

  // optional uint64 invitee = 4;
  if (has_invitee()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->invitee(), output);
  }

  // optional string inviter_name = 5;
  if (has_inviter_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->inviter_name().data(), this->inviter_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "inviter_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->inviter_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.DivorceRollerCoasterInviteCCmd)
}

::google::protobuf::uint8* DivorceRollerCoasterInviteCCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.DivorceRollerCoasterInviteCCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_DIVORCE_ROLLER_COASTER_INVITE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 inviter = 3;
  if (has_inviter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->inviter(), target);
  }

  // optional uint64 invitee = 4;
  if (has_invitee()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->invitee(), target);
  }

  // optional string inviter_name = 5;
  if (has_inviter_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->inviter_name().data(), this->inviter_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "inviter_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->inviter_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.DivorceRollerCoasterInviteCCmd)
  return target;
}

int DivorceRollerCoasterInviteCCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_DIVORCE_ROLLER_COASTER_INVITE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 inviter = 3;
    if (has_inviter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->inviter());
    }

    // optional uint64 invitee = 4;
    if (has_invitee()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->invitee());
    }

    // optional string inviter_name = 5;
    if (has_inviter_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->inviter_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DivorceRollerCoasterInviteCCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DivorceRollerCoasterInviteCCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DivorceRollerCoasterInviteCCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DivorceRollerCoasterInviteCCmd::MergeFrom(const DivorceRollerCoasterInviteCCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_inviter()) {
      set_inviter(from.inviter());
    }
    if (from.has_invitee()) {
      set_invitee(from.invitee());
    }
    if (from.has_inviter_name()) {
      set_inviter_name(from.inviter_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DivorceRollerCoasterInviteCCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DivorceRollerCoasterInviteCCmd::CopyFrom(const DivorceRollerCoasterInviteCCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DivorceRollerCoasterInviteCCmd::IsInitialized() const {

  return true;
}

void DivorceRollerCoasterInviteCCmd::Swap(DivorceRollerCoasterInviteCCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(inviter_, other->inviter_);
    std::swap(invitee_, other->invitee_);
    std::swap(inviter_name_, other->inviter_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DivorceRollerCoasterInviteCCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DivorceRollerCoasterInviteCCmd_descriptor_;
  metadata.reflection = DivorceRollerCoasterInviteCCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DivorceRollerCoasterReplyCCmd::kCmdFieldNumber;
const int DivorceRollerCoasterReplyCCmd::kParamFieldNumber;
const int DivorceRollerCoasterReplyCCmd::kInviterFieldNumber;
const int DivorceRollerCoasterReplyCCmd::kReplyFieldNumber;
#endif  // !_MSC_VER

DivorceRollerCoasterReplyCCmd::DivorceRollerCoasterReplyCCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.DivorceRollerCoasterReplyCCmd)
}

void DivorceRollerCoasterReplyCCmd::InitAsDefaultInstance() {
}

DivorceRollerCoasterReplyCCmd::DivorceRollerCoasterReplyCCmd(const DivorceRollerCoasterReplyCCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.DivorceRollerCoasterReplyCCmd)
}

void DivorceRollerCoasterReplyCCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 65;
  param_ = 28;
  inviter_ = GOOGLE_ULONGLONG(0);
  reply_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DivorceRollerCoasterReplyCCmd::~DivorceRollerCoasterReplyCCmd() {
  // @@protoc_insertion_point(destructor:Cmd.DivorceRollerCoasterReplyCCmd)
  SharedDtor();
}

void DivorceRollerCoasterReplyCCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DivorceRollerCoasterReplyCCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DivorceRollerCoasterReplyCCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DivorceRollerCoasterReplyCCmd_descriptor_;
}

const DivorceRollerCoasterReplyCCmd& DivorceRollerCoasterReplyCCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WeddingCCmd_2eproto();
  return *default_instance_;
}

DivorceRollerCoasterReplyCCmd* DivorceRollerCoasterReplyCCmd::default_instance_ = NULL;

DivorceRollerCoasterReplyCCmd* DivorceRollerCoasterReplyCCmd::New() const {
  return new DivorceRollerCoasterReplyCCmd;
}

void DivorceRollerCoasterReplyCCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 65;
    param_ = 28;
    inviter_ = GOOGLE_ULONGLONG(0);
    reply_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DivorceRollerCoasterReplyCCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.DivorceRollerCoasterReplyCCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_DIVORCE_ROLLER_COASTER_REPLY];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::WeddingCParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::WeddingCParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_inviter;
        break;
      }

      // optional uint64 inviter = 3;
      case 3: {
        if (tag == 24) {
         parse_inviter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &inviter_)));
          set_has_inviter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_reply;
        break;
      }

      // optional .Cmd.EReply reply = 5;
      case 5: {
        if (tag == 40) {
         parse_reply:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EReply_IsValid(value)) {
            set_reply(static_cast< ::Cmd::EReply >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.DivorceRollerCoasterReplyCCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.DivorceRollerCoasterReplyCCmd)
  return false;
#undef DO_
}

void DivorceRollerCoasterReplyCCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.DivorceRollerCoasterReplyCCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_DIVORCE_ROLLER_COASTER_REPLY];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 inviter = 3;
  if (has_inviter()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->inviter(), output);
  }

  // optional .Cmd.EReply reply = 5;
  if (has_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->reply(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.DivorceRollerCoasterReplyCCmd)
}

::google::protobuf::uint8* DivorceRollerCoasterReplyCCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.DivorceRollerCoasterReplyCCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_DIVORCE_ROLLER_COASTER_REPLY];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 inviter = 3;
  if (has_inviter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->inviter(), target);
  }

  // optional .Cmd.EReply reply = 5;
  if (has_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->reply(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.DivorceRollerCoasterReplyCCmd)
  return target;
}

int DivorceRollerCoasterReplyCCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_DIVORCE_ROLLER_COASTER_REPLY];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 inviter = 3;
    if (has_inviter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->inviter());
    }

    // optional .Cmd.EReply reply = 5;
    if (has_reply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reply());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DivorceRollerCoasterReplyCCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DivorceRollerCoasterReplyCCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DivorceRollerCoasterReplyCCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DivorceRollerCoasterReplyCCmd::MergeFrom(const DivorceRollerCoasterReplyCCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_inviter()) {
      set_inviter(from.inviter());
    }
    if (from.has_reply()) {
      set_reply(from.reply());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DivorceRollerCoasterReplyCCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DivorceRollerCoasterReplyCCmd::CopyFrom(const DivorceRollerCoasterReplyCCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DivorceRollerCoasterReplyCCmd::IsInitialized() const {

  return true;
}

void DivorceRollerCoasterReplyCCmd::Swap(DivorceRollerCoasterReplyCCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(inviter_, other->inviter_);
    std::swap(reply_, other->reply_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DivorceRollerCoasterReplyCCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DivorceRollerCoasterReplyCCmd_descriptor_;
  metadata.reflection = DivorceRollerCoasterReplyCCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnterWeddingMapCCmd::kCmdFieldNumber;
const int EnterWeddingMapCCmd::kParamFieldNumber;
#endif  // !_MSC_VER

EnterWeddingMapCCmd::EnterWeddingMapCCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.EnterWeddingMapCCmd)
}

void EnterWeddingMapCCmd::InitAsDefaultInstance() {
}

EnterWeddingMapCCmd::EnterWeddingMapCCmd(const EnterWeddingMapCCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.EnterWeddingMapCCmd)
}

void EnterWeddingMapCCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 65;
  param_ = 29;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnterWeddingMapCCmd::~EnterWeddingMapCCmd() {
  // @@protoc_insertion_point(destructor:Cmd.EnterWeddingMapCCmd)
  SharedDtor();
}

void EnterWeddingMapCCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EnterWeddingMapCCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterWeddingMapCCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnterWeddingMapCCmd_descriptor_;
}

const EnterWeddingMapCCmd& EnterWeddingMapCCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WeddingCCmd_2eproto();
  return *default_instance_;
}

EnterWeddingMapCCmd* EnterWeddingMapCCmd::default_instance_ = NULL;

EnterWeddingMapCCmd* EnterWeddingMapCCmd::New() const {
  return new EnterWeddingMapCCmd;
}

void EnterWeddingMapCCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 65;
    param_ = 29;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnterWeddingMapCCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.EnterWeddingMapCCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_ENTER_WEDDINGMAP];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::WeddingCParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::WeddingCParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.EnterWeddingMapCCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.EnterWeddingMapCCmd)
  return false;
#undef DO_
}

void EnterWeddingMapCCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.EnterWeddingMapCCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_ENTER_WEDDINGMAP];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.EnterWeddingMapCCmd)
}

::google::protobuf::uint8* EnterWeddingMapCCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.EnterWeddingMapCCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_ENTER_WEDDINGMAP];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.EnterWeddingMapCCmd)
  return target;
}

int EnterWeddingMapCCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_ENTER_WEDDINGMAP];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterWeddingMapCCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnterWeddingMapCCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnterWeddingMapCCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnterWeddingMapCCmd::MergeFrom(const EnterWeddingMapCCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnterWeddingMapCCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterWeddingMapCCmd::CopyFrom(const EnterWeddingMapCCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterWeddingMapCCmd::IsInitialized() const {

  return true;
}

void EnterWeddingMapCCmd::Swap(EnterWeddingMapCCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnterWeddingMapCCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnterWeddingMapCCmd_descriptor_;
  metadata.reflection = EnterWeddingMapCCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MissyouInviteWedCCmd::kCmdFieldNumber;
const int MissyouInviteWedCCmd::kParamFieldNumber;
#endif  // !_MSC_VER

MissyouInviteWedCCmd::MissyouInviteWedCCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.MissyouInviteWedCCmd)
}

void MissyouInviteWedCCmd::InitAsDefaultInstance() {
}

MissyouInviteWedCCmd::MissyouInviteWedCCmd(const MissyouInviteWedCCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.MissyouInviteWedCCmd)
}

void MissyouInviteWedCCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 65;
  param_ = 30;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MissyouInviteWedCCmd::~MissyouInviteWedCCmd() {
  // @@protoc_insertion_point(destructor:Cmd.MissyouInviteWedCCmd)
  SharedDtor();
}

void MissyouInviteWedCCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MissyouInviteWedCCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MissyouInviteWedCCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MissyouInviteWedCCmd_descriptor_;
}

const MissyouInviteWedCCmd& MissyouInviteWedCCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WeddingCCmd_2eproto();
  return *default_instance_;
}

MissyouInviteWedCCmd* MissyouInviteWedCCmd::default_instance_ = NULL;

MissyouInviteWedCCmd* MissyouInviteWedCCmd::New() const {
  return new MissyouInviteWedCCmd;
}

void MissyouInviteWedCCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 65;
    param_ = 30;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MissyouInviteWedCCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.MissyouInviteWedCCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_MISSYOU_INVITE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::WeddingCParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::WeddingCParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.MissyouInviteWedCCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.MissyouInviteWedCCmd)
  return false;
#undef DO_
}

void MissyouInviteWedCCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.MissyouInviteWedCCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_MISSYOU_INVITE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.MissyouInviteWedCCmd)
}

::google::protobuf::uint8* MissyouInviteWedCCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.MissyouInviteWedCCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_MISSYOU_INVITE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.MissyouInviteWedCCmd)
  return target;
}

int MissyouInviteWedCCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_MISSYOU_INVITE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MissyouInviteWedCCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MissyouInviteWedCCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MissyouInviteWedCCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MissyouInviteWedCCmd::MergeFrom(const MissyouInviteWedCCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MissyouInviteWedCCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MissyouInviteWedCCmd::CopyFrom(const MissyouInviteWedCCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MissyouInviteWedCCmd::IsInitialized() const {

  return true;
}

void MissyouInviteWedCCmd::Swap(MissyouInviteWedCCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MissyouInviteWedCCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MissyouInviteWedCCmd_descriptor_;
  metadata.reflection = MissyouInviteWedCCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MisccyouReplyWedCCmd::kCmdFieldNumber;
const int MisccyouReplyWedCCmd::kParamFieldNumber;
const int MisccyouReplyWedCCmd::kAgreeFieldNumber;
#endif  // !_MSC_VER

MisccyouReplyWedCCmd::MisccyouReplyWedCCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.MisccyouReplyWedCCmd)
}

void MisccyouReplyWedCCmd::InitAsDefaultInstance() {
}

MisccyouReplyWedCCmd::MisccyouReplyWedCCmd(const MisccyouReplyWedCCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.MisccyouReplyWedCCmd)
}

void MisccyouReplyWedCCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 65;
  param_ = 31;
  agree_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MisccyouReplyWedCCmd::~MisccyouReplyWedCCmd() {
  // @@protoc_insertion_point(destructor:Cmd.MisccyouReplyWedCCmd)
  SharedDtor();
}

void MisccyouReplyWedCCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MisccyouReplyWedCCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MisccyouReplyWedCCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MisccyouReplyWedCCmd_descriptor_;
}

const MisccyouReplyWedCCmd& MisccyouReplyWedCCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WeddingCCmd_2eproto();
  return *default_instance_;
}

MisccyouReplyWedCCmd* MisccyouReplyWedCCmd::default_instance_ = NULL;

MisccyouReplyWedCCmd* MisccyouReplyWedCCmd::New() const {
  return new MisccyouReplyWedCCmd;
}

void MisccyouReplyWedCCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 65;
    param_ = 31;
    agree_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MisccyouReplyWedCCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.MisccyouReplyWedCCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_MISSYOU_REPLY];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::WeddingCParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::WeddingCParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_agree;
        break;
      }

      // optional bool agree = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_agree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &agree_)));
          set_has_agree();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.MisccyouReplyWedCCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.MisccyouReplyWedCCmd)
  return false;
#undef DO_
}

void MisccyouReplyWedCCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.MisccyouReplyWedCCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_MISSYOU_REPLY];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional bool agree = 3 [default = false];
  if (has_agree()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->agree(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.MisccyouReplyWedCCmd)
}

::google::protobuf::uint8* MisccyouReplyWedCCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.MisccyouReplyWedCCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_MISSYOU_REPLY];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional bool agree = 3 [default = false];
  if (has_agree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->agree(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.MisccyouReplyWedCCmd)
  return target;
}

int MisccyouReplyWedCCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_MISSYOU_REPLY];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional bool agree = 3 [default = false];
    if (has_agree()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MisccyouReplyWedCCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MisccyouReplyWedCCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MisccyouReplyWedCCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MisccyouReplyWedCCmd::MergeFrom(const MisccyouReplyWedCCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_agree()) {
      set_agree(from.agree());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MisccyouReplyWedCCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MisccyouReplyWedCCmd::CopyFrom(const MisccyouReplyWedCCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MisccyouReplyWedCCmd::IsInitialized() const {

  return true;
}

void MisccyouReplyWedCCmd::Swap(MisccyouReplyWedCCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(agree_, other->agree_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MisccyouReplyWedCCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MisccyouReplyWedCCmd_descriptor_;
  metadata.reflection = MisccyouReplyWedCCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WeddingCarrierCCmd::kCmdFieldNumber;
const int WeddingCarrierCCmd::kParamFieldNumber;
#endif  // !_MSC_VER

WeddingCarrierCCmd::WeddingCarrierCCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.WeddingCarrierCCmd)
}

void WeddingCarrierCCmd::InitAsDefaultInstance() {
}

WeddingCarrierCCmd::WeddingCarrierCCmd(const WeddingCarrierCCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.WeddingCarrierCCmd)
}

void WeddingCarrierCCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 65;
  param_ = 32;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WeddingCarrierCCmd::~WeddingCarrierCCmd() {
  // @@protoc_insertion_point(destructor:Cmd.WeddingCarrierCCmd)
  SharedDtor();
}

void WeddingCarrierCCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WeddingCarrierCCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeddingCarrierCCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WeddingCarrierCCmd_descriptor_;
}

const WeddingCarrierCCmd& WeddingCarrierCCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WeddingCCmd_2eproto();
  return *default_instance_;
}

WeddingCarrierCCmd* WeddingCarrierCCmd::default_instance_ = NULL;

WeddingCarrierCCmd* WeddingCarrierCCmd::New() const {
  return new WeddingCarrierCCmd;
}

void WeddingCarrierCCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 65;
    param_ = 32;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WeddingCarrierCCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.WeddingCarrierCCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_CARRIER];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::WeddingCParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::WeddingCParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.WeddingCarrierCCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.WeddingCarrierCCmd)
  return false;
#undef DO_
}

void WeddingCarrierCCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.WeddingCarrierCCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_CARRIER];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.WeddingCarrierCCmd)
}

::google::protobuf::uint8* WeddingCarrierCCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.WeddingCarrierCCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_CARRIER];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.WeddingCarrierCCmd)
  return target;
}

int WeddingCarrierCCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_CARRIER];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeddingCarrierCCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WeddingCarrierCCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WeddingCarrierCCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WeddingCarrierCCmd::MergeFrom(const WeddingCarrierCCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WeddingCarrierCCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeddingCarrierCCmd::CopyFrom(const WeddingCarrierCCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeddingCarrierCCmd::IsInitialized() const {

  return true;
}

void WeddingCarrierCCmd::Swap(WeddingCarrierCCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WeddingCarrierCCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WeddingCarrierCCmd_descriptor_;
  metadata.reflection = WeddingCarrierCCmd_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

// @@protoc_insertion_point(global_scope)
