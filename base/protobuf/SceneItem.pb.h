// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SceneItem.proto

#ifndef PROTOBUF_SceneItem_2eproto__INCLUDED
#define PROTOBUF_SceneItem_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "xCmd.pb.h"
#include "ProtoCommon.pb.h"
// @@protoc_insertion_point(includes)

namespace Cmd {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_SceneItem_2eproto();
void protobuf_AssignDesc_SceneItem_2eproto();
void protobuf_ShutdownFile_SceneItem_2eproto();

class ItemInfo;
class RefineCompose;
class EquipData;
class CardData;
class EnchantAttr;
class EnchantExtra;
class EnchantData;
class RefineData;
class EggEquip;
class PetEquipData;
class EggData;
class LoveLetterData;
class CodeData;
class WeddingData;
class SenderData;
class ItemData;
class PackageItem;
class PackageUpdate;
class ItemUse;
class SortInfo;
class PackageSort;
class Equip;
class SItem;
class SellItem;
class EquipStrength;
class Produce;
class ProduceDone;
class EquipRefine;
class EquipDecompose;
class DecomposeResult;
class QueryDecomposeResultItemCmd;
class QueryEquipData;
class BrowsePackage;
class EquipCard;
class ItemShow;
class ItemShow64;
class EquipRepair;
class HintNtf;
class EnchantEquip;
class TradeComposePair;
class TradeRefineData;
class TradeItemBaseInfo;
class ProcessEnchantItemCmd;
class EquipExchangeItemCmd;
class OnOffStoreItemCmd;
class PackSlotNtfItemCmd;
class RestoreEquipItemCmd;
class UseCountItemCmd;
class ExchangeCardItemCmd;
class GetCountItemCmd;
class SaveLoveLetterCmd;
class ItemDataShow;
class LotteryCmd;
class LotteryRecoveryCmd;
class LotterySubInfo;
class LotteryInfo;
class QueryLotteryInfo;
class QuotaLog;
class QuotaDetail;
class ReqQuotaLogCmd;
class ReqQuotaDetailCmd;
class EquipPosData;
class EquipPosDataUpdate;
class MatItemInfo;
class HighRefineMatComposeCmd;
class HighRefineCmd;
class HighRefineData;
class NtfHighRefineDataCmd;
class UpdateHighRefineDataCmd;
class UseCodItemCmd;
class AddJobLevelItemCmd;
class LotterGivBuyCountCmd;
class GiveWeddingDressCmd;
class QuickStoreItemCmd;
class QuickSellItemCmd;
class EnchantTransItemCmd;
class QueryLotteryHeadItemCmd;
class LotteryRateInfo;
class LotteryRateQueryCmd;
class EquipComposeItemCmd;

enum ItemParam {
  ITEMPARAM_PACKAGEITEM = 1,
  ITEMPARAM_PACKAGEUPDATE = 2,
  ITEMPARAM_ITEMUSE = 3,
  ITEMPARAM_PACKAGESORT = 4,
  ITEMPARAM_EQUIP = 5,
  ITEMPARAM_SELLITEM = 6,
  ITEMPARAM_EQUIPSTRENGTH = 7,
  ITEMPARAM_PRODUCE = 9,
  ITEMPARAM_PRODUCEDONE = 10,
  ITEMPARAM_REFINE = 11,
  ITEMPARAM_DECOMPOSE = 12,
  ITEMPARAM_QUERYEQUIPDATA = 13,
  ITEMPARAM_BROWSEPACK = 14,
  ITEMPARAM_EQUIPCARD = 15,
  ITEMPARAM_ITEMSHOW = 16,
  ITEMPARAM_REPAIR = 17,
  ITEMPARAM_HINTNTF = 18,
  ITEMPARAM_ENCHANT = 19,
  ITEMPARAM_PROCESSENCHANT = 20,
  ITEMPARAM_EQUIPEXCHANGE = 21,
  ITEMPARAM_ONOFFSTORE = 22,
  ITEMPARAM_PACKSLOTNTF = 23,
  ITEMPARAM_RESTOREEQUIP = 24,
  ITEMPARAM_USECOUNT = 25,
  ITEMPARAM_QUERYDECOMPOSERESULT = 27,
  ITEMPARAM_EXCHANGECARD = 28,
  ITEMPARAM_GETCOUNT = 29,
  ITEMPARAM_SAVE_LOVE_LETTER = 30,
  ITEMPARAM_ITEMDATASHOW = 31,
  ITEMPARAM_LOTTERY = 32,
  ITEMPARAM_LOTTERY_RECOVERY = 33,
  ITEMPARAM_QUERY_LOTTERYINFO = 34,
  ITEMPARAM_ITEMSHOW64 = 35,
  ITEMPARAM_HIGHREFINE_MATCOMPOSE = 36,
  ITEMPARAM_HIGHREFINE = 37,
  ITEMPARAM_NTF_HIGHTREFINE_DATA = 38,
  ITEMPARAM_UPDATE_HIGHTREFINE_DATA = 39,
  ITEMPARAM_REQ_QUOTA_LOG = 40,
  ITEMPARAM_REQ_QUOTA_DETAIL = 41,
  ITEMPARAM_EQUIPPOSDATA_UPDATE = 42,
  ITEMPARAM_USE_CODE_ITEM = 43,
  ITEMPARAM_ADD_JOBLEVEL = 44,
  ITEMPARAM_LOTTERY_GIVE_BUY_COUNT = 46,
  ITEMPARAM_GIVE_WEDDING_DRESS = 47,
  ITEMPARAM_QUICK_STOREITEM = 48,
  ITEMPARAM_QUICK_SELLITEM = 49,
  ITEMPARAM_ENCHANT_TRANS = 50,
  ITEMPARAM_QUERY_LOTTERYHEAD = 51,
  ITEMPARAM_LOTTERY_RATE_QUERY = 52,
  ITEMPARAM_EQUIPCOMPOSE = 53
};
bool ItemParam_IsValid(int value);
const ItemParam ItemParam_MIN = ITEMPARAM_PACKAGEITEM;
const ItemParam ItemParam_MAX = ITEMPARAM_EQUIPCOMPOSE;
const int ItemParam_ARRAYSIZE = ItemParam_MAX + 1;

const ::google::protobuf::EnumDescriptor* ItemParam_descriptor();
inline const ::std::string& ItemParam_Name(ItemParam value) {
  return ::google::protobuf::internal::NameOfEnum(
    ItemParam_descriptor(), value);
}
inline bool ItemParam_Parse(
    const ::std::string& name, ItemParam* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ItemParam>(
    ItemParam_descriptor(), name, value);
}
enum EPackType {
  EPACKTYPE_MIN = 0,
  EPACKTYPE_MAIN = 1,
  EPACKTYPE_EQUIP = 2,
  EPACKTYPE_FASHION = 3,
  EPACKTYPE_FASHIONEQUIP = 4,
  EPACKTYPE_CARD = 5,
  EPACKTYPE_STORE = 6,
  EPACKTYPE_PERSONAL_STORE = 7,
  EPACKTYPE_TEMP_MAIN = 8,
  EPACKTYPE_BARROW = 9,
  EPACKTYPE_QUEST = 10,
  EPACKTYPE_FOOD = 11,
  EPACKTYPE_PET = 12,
  EPACKTYPE_MAX = 13
};
bool EPackType_IsValid(int value);
const EPackType EPackType_MIN = EPACKTYPE_MIN;
const EPackType EPackType_MAX = EPACKTYPE_MAX;
const int EPackType_ARRAYSIZE = EPackType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EPackType_descriptor();
inline const ::std::string& EPackType_Name(EPackType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EPackType_descriptor(), value);
}
inline bool EPackType_Parse(
    const ::std::string& name, EPackType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EPackType>(
    EPackType_descriptor(), name, value);
}
enum EItemType {
  EITEMTYPE_MIN = 0,
  EITEMTYPE_HONOR = 10,
  EITEMTYPE_STREASURE = 20,
  EITEMTYPE_TREASURE = 30,
  EITEMTYPE_STUFF = 40,
  EITEMTYPE_STUFFNOCUT = 41,
  EITEMTYPE_ARROW = 43,
  EITEMTYPE_USESKILL = 44,
  EITEMTYPE_GHOSTLAMP = 45,
  EITEMTYPE_MULTITIME = 46,
  EITEMTYPE_MONTHCARD = 47,
  EITEMTYPE_QUEST_ONCE = 48,
  EITEMTYPE_QUEST_TIME = 49,
  EITEMTYPE_SHEET = 50,
  EITEMTYPE_PET_WEARSHEET = 51,
  EITEMTYPE_PET_WEARUNLOCK = 52,
  EITEMTYPE_CONSUME = 60,
  EITEMTYPE_HAIRSTUFF = 61,
  EITEMTYPE_CONSUME_2 = 62,
  EITEMTYPE_COLLECTION = 63,
  EITEMTYPE_RANGE = 64,
  EITEMTYPE_FUNCTION = 65,
  EITEMTYPE_ACTIVITY = 66,
  EITEMTYPE_WEDDING_RING = 67,
  EITEMTYPE_MATERIAL = 70,
  EITEMTYPE_LETTER = 71,
  EITEMTYPE_GOLDAPPLE = 72,
  EITEMTYPE_GETSKILL = 73,
  EITEMTYPE_PICKEFFECT = 74,
  EITEMTYPE_FRIEND = 75,
  EITEMTYPE_PICKEFFECT_1 = 76,
  EITEMTYPE_CARD_WEAPON = 81,
  EITEMTYPE_CARD_ASSIST = 82,
  EITEMTYPE_CARD_ARMOUR = 83,
  EITEMTYPE_CARD_ROBE = 84,
  EITEMTYPE_CARD_SHOES = 85,
  EITEMTYPE_CARD_ACCESSORY = 86,
  EITEMTYPE_CARD_HEAD = 87,
  EITEMTYPE_MOUNT = 90,
  EITEMTYPE_BARROW = 91,
  EITEMTYPE_PET = 100,
  EITEMTYPE_EGG = 101,
  EITEMTYPE_PET_EQUIP = 102,
  EITEMTYPE_PET_CONSUME = 103,
  EITEMTYPE_CARDPIECE = 110,
  EITEMTYPE_EQUIPPIECE = 120,
  EITEMTYPE_FASHION_PIECE = 121,
  EITEMTYPE_GOLD = 130,
  EITEMTYPE_SILVER = 131,
  EITEMTYPE_DIAMOND = 132,
  EITEMTYPE_GARDEN = 140,
  EITEMTYPE_CONTRIBUTE = 145,
  EITEMTYPE_ASSET = 146,
  EITEMTYPE_FRIENDSHIP = 147,
  EITEMTYPE_MANUALSPOINT = 143,
  EITEMTYPE_MORA = 144,
  EITEMTYPE_PVPCOIN = 141,
  EITEMTYPE_QUOTA = 149,
  EITEMTYPE_BASEEXP = 150,
  EITEMTYPE_JOBEXP = 151,
  EITEMTYPE_PURIFY = 152,
  EITEMTYPE_MANUALPOINT = 153,
  EITEMTYPE_LOTTERY = 154,
  EITEMTYPE_COOKER_EXP = 155,
  EITEMTYPE_GUILDHONOR = 156,
  EITEMTYPE_POLLY_COIN = 157,
  EITEMTYPE_QUESTITEM = 160,
  EITEMTYPE_QUESTITEMCOUNT = 165,
  EITEMTYPE_WEDDING_CERT = 166,
  EITEMTYPE_WEDDING_INVITE = 167,
  EITEMTYPE_WEDDING_MANUAL = 168,
  EITEMTYPE_DEADCOIN = 169,
  EITEMTYPE_WEAPON_LANCE = 170,
  EITEMTYPE_WEAPON_SWORD = 180,
  EITEMTYPE_WEAPON_WAND = 190,
  EITEMTYPE_WEAPON_KNIFE = 200,
  EITEMTYPE_WEAPON_BOW = 210,
  EITEMTYPE_WEAPON_HAMMER = 220,
  EITEMTYPE_WEAPON_AXE = 230,
  EITEMTYPE_WEAPON_BOOK = 240,
  EITEMTYPE_WEAPON_DAGGER = 250,
  EITEMTYPE_WEAPON_INSTRUMEMT = 260,
  EITEMTYPE_WEAPON_WHIP = 270,
  EITEMTYPE_WEAPON_TUBE = 280,
  EITEMTYPE_WEAPON_FIST = 290,
  EITEMTYPE_ARTIFACT_LANCE = 450,
  EITEMTYPE_ARTIFACT_SWORD = 451,
  EITEMTYPE_ARTIFACT_WAND = 452,
  EITEMTYPE_ARTIFACT_KNIFE = 453,
  EITEMTYPE_ARTIFACT_BOW = 454,
  EITEMTYPE_ARTIFACT_HAMMER = 455,
  EITEMTYPE_ARTIFACT_AXE = 456,
  EITEMTYPE_ARTIFACT_DAGGER = 457,
  EITEMTYPE_ARTIFACT_FIST = 458,
  EITEMTYPE_ARTIFACT_INSTRUMEMT = 459,
  EITEMTYPE_ARTIFACT_WHIP = 460,
  EITEMTYPE_ARTIFACT_BOOK = 461,
  EITEMTYPE_ARTIFACT_HEAD = 485,
  EITEMTYPE_ARTIFACT_BACK = 488,
  EITEMTYPE_ARMOUR = 500,
  EITEMTYPE_ARMOUR_FASHION = 501,
  EITEMTYPE_SHIELD = 510,
  EITEMTYPE_PEARL = 511,
  EITEMTYPE_EIKON = 512,
  EITEMTYPE_BRACER = 513,
  EITEMTYPE_BRACELET = 514,
  EITEMTYPE_TROLLEY = 515,
  EITEMTYPE_ROBE = 520,
  EITEMTYPE_SHOES = 530,
  EITEMTYPE_ACCESSORY = 540,
  EITEMTYPE_FOOD_MEAT = 601,
  EITEMTYPE_FOOD_FISH = 602,
  EITEMTYPE_FOOD_VEGETABLE = 603,
  EITEMTYPE_FOOD_FRUIT = 604,
  EITEMTYPE_FOOD_SEASONING = 605,
  EITEMTYPE_FOOD = 610,
  EITEMTYPE_HEAD = 800,
  EITEMTYPE_BACK = 810,
  EITEMTYPE_HAIR = 820,
  EITEMTYPE_HAIR_MALE = 821,
  EITEMTYPE_HAIR_FEMALE = 822,
  EITEMTYPE_EYE_MALE = 823,
  EITEMTYPE_EYE_FEMALE = 824,
  EITEMTYPE_FACE = 830,
  EITEMTYPE_TAIL = 840,
  EITEMTYPE_MOUTH = 850,
  EITEMTYPE_WATER_ELEMENT = 1001,
  EITEMTYPE_PORTRAIT = 1200,
  EITEMTYPE_FRAME = 1210,
  EITEMTYPE_CODE = 4000,
  EITEMTYPE_KFC_CODE = 4200,
  EITEMTYPE_MAX = 4201
};
bool EItemType_IsValid(int value);
const EItemType EItemType_MIN = EITEMTYPE_MIN;
const EItemType EItemType_MAX = EITEMTYPE_MAX;
const int EItemType_ARRAYSIZE = EItemType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EItemType_descriptor();
inline const ::std::string& EItemType_Name(EItemType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EItemType_descriptor(), value);
}
inline bool EItemType_Parse(
    const ::std::string& name, EItemType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EItemType>(
    EItemType_descriptor(), name, value);
}
enum EEquipType {
  EEQUIPTYPE_MIN = 0,
  EEQUIPTYPE_WEAPON = 1,
  EEQUIPTYPE_SHIELD = 3,
  EEQUIPTYPE_ARMOUR = 2,
  EEQUIPTYPE_ROBE = 4,
  EEQUIPTYPE_SHOES = 5,
  EEQUIPTYPE_ACCESSORY = 6,
  EEQUIPTYPE_HEAD = 8,
  EEQUIPTYPE_BACK = 9,
  EEQUIPTYPE_FACE = 10,
  EEQUIPTYPE_TAIL = 11,
  EEQUIPTYPE_MOUNT = 12,
  EEQUIPTYPE_MOUTH = 13,
  EEQUIPTYPE_BARROW = 14,
  EEQUIPTYPE_PEARL = 16,
  EEQUIPTYPE_EIKON = 17,
  EEQUIPTYPE_BRACELET = 18,
  EEQUIPTYPE_HANDBRACELET = 19,
  EEQUIPTYPE_TROLLEY = 20,
  EEQUIPTYPE_ARTIFACT = 21,
  EEQUIPTYPE_ARTIFACT_HEAD = 22,
  EEQUIPTYPE_ARTIFACT_BACK = 23,
  EEQUIPTYPE_MAX = 24
};
bool EEquipType_IsValid(int value);
const EEquipType EEquipType_MIN = EEQUIPTYPE_MIN;
const EEquipType EEquipType_MAX = EEQUIPTYPE_MAX;
const int EEquipType_ARRAYSIZE = EEquipType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EEquipType_descriptor();
inline const ::std::string& EEquipType_Name(EEquipType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EEquipType_descriptor(), value);
}
inline bool EEquipType_Parse(
    const ::std::string& name, EEquipType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EEquipType>(
    EEquipType_descriptor(), name, value);
}
enum EBindType {
  EBINDTYPE_MIN = 0,
  EBINDTYPE_BIND = 1,
  EBINDTYPE_NOBIND = 2,
  EBINDTYPE_MAX = 3
};
bool EBindType_IsValid(int value);
const EBindType EBindType_MIN = EBINDTYPE_MIN;
const EBindType EBindType_MAX = EBINDTYPE_MAX;
const int EBindType_ARRAYSIZE = EBindType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EBindType_descriptor();
inline const ::std::string& EBindType_Name(EBindType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EBindType_descriptor(), value);
}
inline bool EBindType_Parse(
    const ::std::string& name, EBindType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EBindType>(
    EBindType_descriptor(), name, value);
}
enum EExpireType {
  EEXPIRETYPE_MIN = 0,
  EEXPIRETYPE_MAX = 1
};
bool EExpireType_IsValid(int value);
const EExpireType EExpireType_MIN = EEXPIRETYPE_MIN;
const EExpireType EExpireType_MAX = EEXPIRETYPE_MAX;
const int EExpireType_ARRAYSIZE = EExpireType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EExpireType_descriptor();
inline const ::std::string& EExpireType_Name(EExpireType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EExpireType_descriptor(), value);
}
inline bool EExpireType_Parse(
    const ::std::string& name, EExpireType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EExpireType>(
    EExpireType_descriptor(), name, value);
}
enum ERideType {
  ERIDETYPE_MIN = 0,
  ERIDETYPE_ON = 1,
  ERIDETYPE_OFF = 2,
  ERIDETYPE_MAX = 3
};
bool ERideType_IsValid(int value);
const ERideType ERideType_MIN = ERIDETYPE_MIN;
const ERideType ERideType_MAX = ERIDETYPE_MAX;
const int ERideType_ARRAYSIZE = ERideType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ERideType_descriptor();
inline const ::std::string& ERideType_Name(ERideType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ERideType_descriptor(), value);
}
inline bool ERideType_Parse(
    const ::std::string& name, ERideType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ERideType>(
    ERideType_descriptor(), name, value);
}
enum ETragetType {
  ETARGETTYPE_MY = 0,
  ETARGETTYPE_USER = 1,
  ETARGETTYPE_MONSTER = 2,
  ETARGETTYPE_USERANDMONSTER = 3
};
bool ETragetType_IsValid(int value);
const ETragetType ETragetType_MIN = ETARGETTYPE_MY;
const ETragetType ETragetType_MAX = ETARGETTYPE_USERANDMONSTER;
const int ETragetType_ARRAYSIZE = ETragetType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ETragetType_descriptor();
inline const ::std::string& ETragetType_Name(ETragetType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ETragetType_descriptor(), value);
}
inline bool ETragetType_Parse(
    const ::std::string& name, ETragetType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ETragetType>(
    ETragetType_descriptor(), name, value);
}
enum EEnchantType {
  EENCHANTTYPE_MIN = 0,
  EENCHANTTYPE_PRIMARY = 1,
  EENCHANTTYPE_MEDIUM = 2,
  EENCHANTTYPE_SENIOR = 3,
  EENCHANTTYPE_MAX = 4
};
bool EEnchantType_IsValid(int value);
const EEnchantType EEnchantType_MIN = EENCHANTTYPE_MIN;
const EEnchantType EEnchantType_MAX = EENCHANTTYPE_MAX;
const int EEnchantType_ARRAYSIZE = EEnchantType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EEnchantType_descriptor();
inline const ::std::string& EEnchantType_Name(EEnchantType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EEnchantType_descriptor(), value);
}
inline bool EEnchantType_Parse(
    const ::std::string& name, EEnchantType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EEnchantType>(
    EEnchantType_descriptor(), name, value);
}
enum ELetterType {
  ELETTERTYPE_LOVE = 1,
  ELETTERTYPE_CONSTELLATION = 2,
  ELETTERTYPE_CHRISTMAS = 3,
  ELETTERTYPE_SPRING = 4,
  ELETTERTYPE_LOTTERY = 5,
  ELETTERTYPE_WEDDINGDRESS = 6
};
bool ELetterType_IsValid(int value);
const ELetterType ELetterType_MIN = ELETTERTYPE_LOVE;
const ELetterType ELetterType_MAX = ELETTERTYPE_WEDDINGDRESS;
const int ELetterType_ARRAYSIZE = ELetterType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ELetterType_descriptor();
inline const ::std::string& ELetterType_Name(ELetterType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ELetterType_descriptor(), value);
}
inline bool ELetterType_Parse(
    const ::std::string& name, ELetterType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ELetterType>(
    ELetterType_descriptor(), name, value);
}
enum EEquipOper {
  EEQUIPOPER_MIN = 0,
  EEQUIPOPER_ON = 1,
  EEQUIPOPER_OFF = 2,
  EEQUIPOPER_PUTFASHION = 3,
  EEQUIPOPER_OFFFASHION = 4,
  EEQUIPOPER_PUTSTORE = 5,
  EEQUIPOPER_OFFSTORE = 6,
  EEQUIPOPER_OFFALL = 7,
  EEQUIPOPER_OFFPOS = 8,
  EEQUIPOPER_PUTPSTORE = 9,
  EEQUIPOPER_OFFPSTORE = 10,
  EEQUIPOPER_OFFTEMP = 11,
  EEQUIPOPER_PUTBARROW = 12,
  EEQUIPOPER_OFFBARROW = 13,
  EEQUIPOPER_DRESSUP_ON = 14,
  EEQUIPOPER_DRESSUP_OFF = 15,
  EEQUIPOPER_MAX = 16
};
bool EEquipOper_IsValid(int value);
const EEquipOper EEquipOper_MIN = EEQUIPOPER_MIN;
const EEquipOper EEquipOper_MAX = EEQUIPOPER_MAX;
const int EEquipOper_ARRAYSIZE = EEquipOper_MAX + 1;

const ::google::protobuf::EnumDescriptor* EEquipOper_descriptor();
inline const ::std::string& EEquipOper_Name(EEquipOper value) {
  return ::google::protobuf::internal::NameOfEnum(
    EEquipOper_descriptor(), value);
}
inline bool EEquipOper_Parse(
    const ::std::string& name, EEquipOper* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EEquipOper>(
    EEquipOper_descriptor(), name, value);
}
enum EEquipPos {
  EEQUIPPOS_MIN = 0,
  EEQUIPPOS_WEAPON = 7,
  EEQUIPPOS_ARMOUR = 2,
  EEQUIPPOS_SHIELD = 1,
  EEQUIPPOS_ROBE = 3,
  EEQUIPPOS_SHOES = 4,
  EEQUIPPOS_ACCESSORY1 = 5,
  EEQUIPPOS_ACCESSORY2 = 6,
  EEQUIPPOS_HEAD = 8,
  EEQUIPPOS_BACK = 11,
  EEQUIPPOS_FACE = 9,
  EEQUIPPOS_TAIL = 12,
  EEQUIPPOS_MOUNT = 13,
  EEQUIPPOS_MOUTH = 10,
  EEQUIPPOS_BARROW = 14,
  EEQUIPPOS_ARTIFACT = 15,
  EEQUIPPOS_ARTIFACT_HEAD = 16,
  EEQUIPPOS_ARTIFACT_BACK = 17,
  EEQUIPPOS_MAX = 18
};
bool EEquipPos_IsValid(int value);
const EEquipPos EEquipPos_MIN = EEQUIPPOS_MIN;
const EEquipPos EEquipPos_MAX = EEQUIPPOS_MAX;
const int EEquipPos_ARRAYSIZE = EEquipPos_MAX + 1;

const ::google::protobuf::EnumDescriptor* EEquipPos_descriptor();
inline const ::std::string& EEquipPos_Name(EEquipPos value) {
  return ::google::protobuf::internal::NameOfEnum(
    EEquipPos_descriptor(), value);
}
inline bool EEquipPos_Parse(
    const ::std::string& name, EEquipPos* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EEquipPos>(
    EEquipPos_descriptor(), name, value);
}
enum EStrengthResult {
  ESTRENGTHRESULT_MIN = 0,
  ESTRENGTHRESULT_SUCCESS = 1,
  ESTRENGTHRESULT_NOMATERIAL = 2,
  ESTRENGTHRESULT_MAXLV = 3
};
bool EStrengthResult_IsValid(int value);
const EStrengthResult EStrengthResult_MIN = ESTRENGTHRESULT_MIN;
const EStrengthResult EStrengthResult_MAX = ESTRENGTHRESULT_MAXLV;
const int EStrengthResult_ARRAYSIZE = EStrengthResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* EStrengthResult_descriptor();
inline const ::std::string& EStrengthResult_Name(EStrengthResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    EStrengthResult_descriptor(), value);
}
inline bool EStrengthResult_Parse(
    const ::std::string& name, EStrengthResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EStrengthResult>(
    EStrengthResult_descriptor(), name, value);
}
enum EStrengthType {
  ESTRENGTHTYPE_MIN = 0,
  ESTRENGTHTYPE_NORMAL = 1,
  ESTRENGTHTYPE_GUILD = 2,
  ESTRENGTHTYPE_MAX = 3
};
bool EStrengthType_IsValid(int value);
const EStrengthType EStrengthType_MIN = ESTRENGTHTYPE_MIN;
const EStrengthType EStrengthType_MAX = ESTRENGTHTYPE_MAX;
const int EStrengthType_ARRAYSIZE = EStrengthType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EStrengthType_descriptor();
inline const ::std::string& EStrengthType_Name(EStrengthType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EStrengthType_descriptor(), value);
}
inline bool EStrengthType_Parse(
    const ::std::string& name, EStrengthType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EStrengthType>(
    EStrengthType_descriptor(), name, value);
}
enum EProduceType {
  EPRODUCETYPE_MIN = 1,
  EPRODUCETYPE_HEAD = 2,
  EPRODUCETYPE_EQUIP = 3,
  EPRODUCETYPE_TRADER = 4,
  EPRODUCETYPE_MAX = 5
};
bool EProduceType_IsValid(int value);
const EProduceType EProduceType_MIN = EPRODUCETYPE_MIN;
const EProduceType EProduceType_MAX = EPRODUCETYPE_MAX;
const int EProduceType_ARRAYSIZE = EProduceType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EProduceType_descriptor();
inline const ::std::string& EProduceType_Name(EProduceType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EProduceType_descriptor(), value);
}
inline bool EProduceType_Parse(
    const ::std::string& name, EProduceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EProduceType>(
    EProduceType_descriptor(), name, value);
}
enum ERefineResult {
  EREFINERESULT_MIN = 0,
  EREFINERESULT_SUCCESS = 1,
  EREFINERESULT_FAILSTAY = 2,
  EREFINERESULT_FAILBACK = 3,
  EREFINERESULT_FAILSTAYDAM = 4,
  EREFINERESULT_FAILBACKDAM = 5,
  EREFINERESULT_MAX = 6
};
bool ERefineResult_IsValid(int value);
const ERefineResult ERefineResult_MIN = EREFINERESULT_MIN;
const ERefineResult ERefineResult_MAX = EREFINERESULT_MAX;
const int ERefineResult_ARRAYSIZE = ERefineResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* ERefineResult_descriptor();
inline const ::std::string& ERefineResult_Name(ERefineResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    ERefineResult_descriptor(), value);
}
inline bool ERefineResult_Parse(
    const ::std::string& name, ERefineResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ERefineResult>(
    ERefineResult_descriptor(), name, value);
}
enum EDecomposeResult {
  EDECOMPOSERESULT_MIN = 0,
  EDECOMPOSERESULT_FAIL = 1,
  EDECOMPOSERESULT_SUCCESS = 2,
  EDECOMPOSERESULT_SUCCESS_BIG = 3,
  EDECOMPOSERESULT_SUCCESS_SBIG = 4,
  EDECOMPOSERESULT_SUCCESS_FANTASY = 5,
  EDECOMPOSERESULT_MAX = 6
};
bool EDecomposeResult_IsValid(int value);
const EDecomposeResult EDecomposeResult_MIN = EDECOMPOSERESULT_MIN;
const EDecomposeResult EDecomposeResult_MAX = EDECOMPOSERESULT_MAX;
const int EDecomposeResult_ARRAYSIZE = EDecomposeResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* EDecomposeResult_descriptor();
inline const ::std::string& EDecomposeResult_Name(EDecomposeResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    EDecomposeResult_descriptor(), value);
}
inline bool EDecomposeResult_Parse(
    const ::std::string& name, EDecomposeResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EDecomposeResult>(
    EDecomposeResult_descriptor(), name, value);
}
enum ECardOper {
  ECARDOPER_MIN = 0,
  ECARDOPER_EQUIPON = 1,
  ECARDOPER_EQUIPOFF = 2,
  ECARDOPER_MAX = 3
};
bool ECardOper_IsValid(int value);
const ECardOper ECardOper_MIN = ECARDOPER_MIN;
const ECardOper ECardOper_MAX = ECARDOPER_MAX;
const int ECardOper_ARRAYSIZE = ECardOper_MAX + 1;

const ::google::protobuf::EnumDescriptor* ECardOper_descriptor();
inline const ::std::string& ECardOper_Name(ECardOper value) {
  return ::google::protobuf::internal::NameOfEnum(
    ECardOper_descriptor(), value);
}
inline bool ECardOper_Parse(
    const ::std::string& name, ECardOper* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ECardOper>(
    ECardOper_descriptor(), name, value);
}
enum ETradeType {
  ETRADETYPE_ALL = 0,
  ETRADETYPE_TRADE = 1,
  ETRADETYPE_BOOTH = 2
};
bool ETradeType_IsValid(int value);
const ETradeType ETradeType_MIN = ETRADETYPE_ALL;
const ETradeType ETradeType_MAX = ETRADETYPE_BOOTH;
const int ETradeType_ARRAYSIZE = ETradeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ETradeType_descriptor();
inline const ::std::string& ETradeType_Name(ETradeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ETradeType_descriptor(), value);
}
inline bool ETradeType_Parse(
    const ::std::string& name, ETradeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ETradeType>(
    ETradeType_descriptor(), name, value);
}
enum EExchangeType {
  EEXCHANGETYPE_MIN = 0,
  EEXCHANGETYPE_EXCHANGE = 1,
  EEXCHANGETYPE_LEVELUP = 2,
  EEXCHANGETYPE_MAX = 3
};
bool EExchangeType_IsValid(int value);
const EExchangeType EExchangeType_MIN = EEXCHANGETYPE_MIN;
const EExchangeType EExchangeType_MAX = EEXCHANGETYPE_MAX;
const int EExchangeType_ARRAYSIZE = EExchangeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EExchangeType_descriptor();
inline const ::std::string& EExchangeType_Name(EExchangeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EExchangeType_descriptor(), value);
}
inline bool EExchangeType_Parse(
    const ::std::string& name, EExchangeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EExchangeType>(
    EExchangeType_descriptor(), name, value);
}
enum EExchangeCardType {
  EEXCHANGECARDTYPE_DRAW = 1,
  EEXCHANGECARDTYPE_COMPOSE = 2,
  EEXCHANGECARDTYPE_DECOMPOSE = 3
};
bool EExchangeCardType_IsValid(int value);
const EExchangeCardType EExchangeCardType_MIN = EEXCHANGECARDTYPE_DRAW;
const EExchangeCardType EExchangeCardType_MAX = EEXCHANGECARDTYPE_DECOMPOSE;
const int EExchangeCardType_ARRAYSIZE = EExchangeCardType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EExchangeCardType_descriptor();
inline const ::std::string& EExchangeCardType_Name(EExchangeCardType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EExchangeCardType_descriptor(), value);
}
inline bool EExchangeCardType_Parse(
    const ::std::string& name, EExchangeCardType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EExchangeCardType>(
    EExchangeCardType_descriptor(), name, value);
}
enum ELotteryType {
  ELotteryType_Min = 0,
  ELotteryType_Head = 1,
  ELotteryType_Equip = 2,
  ELotteryType_Card = 3,
  ELotteryType_CatLitterBox = 4,
  ELotteryType_Magic = 5,
  ELotteryType_Max = 6
};
bool ELotteryType_IsValid(int value);
const ELotteryType ELotteryType_MIN = ELotteryType_Min;
const ELotteryType ELotteryType_MAX = ELotteryType_Max;
const int ELotteryType_ARRAYSIZE = ELotteryType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ELotteryType_descriptor();
inline const ::std::string& ELotteryType_Name(ELotteryType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ELotteryType_descriptor(), value);
}
inline bool ELotteryType_Parse(
    const ::std::string& name, ELotteryType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ELotteryType>(
    ELotteryType_descriptor(), name, value);
}
enum EQuotaType {
  EQuotaType_G_Charge = 1,
  EQuotaType_C_Give = 2,
  EQuotaType_C_Auction = 3,
  EQuotaType_G_Auction = 4,
  EQuotaType_C_Lottery = 5,
  EQuotaType_C_GuildBox = 6,
  EQuotaType_C_WeddingDress = 7,
  EQuotaType_L_Booth = 8,
  EQuotaType_U_Booth = 9,
  EQuotaType_C_Booth = 10,
  EQuotaType_L_Give_Trade = 11,
  EQuotaType_U_Give_Trade = 12,
  EQuotaType_C_Give_Trade = 13,
  EQuotaType_G_Reward = 14
};
bool EQuotaType_IsValid(int value);
const EQuotaType EQuotaType_MIN = EQuotaType_G_Charge;
const EQuotaType EQuotaType_MAX = EQuotaType_G_Reward;
const int EQuotaType_ARRAYSIZE = EQuotaType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EQuotaType_descriptor();
inline const ::std::string& EQuotaType_Name(EQuotaType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EQuotaType_descriptor(), value);
}
inline bool EQuotaType_Parse(
    const ::std::string& name, EQuotaType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EQuotaType>(
    EQuotaType_descriptor(), name, value);
}
// ===================================================================

class ItemInfo : public ::google::protobuf::Message {
 public:
  ItemInfo();
  virtual ~ItemInfo();

  ItemInfo(const ItemInfo& from);

  inline ItemInfo& operator=(const ItemInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ItemInfo& default_instance();

  void Swap(ItemInfo* other);

  // implements Message ----------------------------------------------

  ItemInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ItemInfo& from);
  void MergeFrom(const ItemInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string guid = 1;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline const ::std::string& guid() const;
  inline void set_guid(const ::std::string& value);
  inline void set_guid(const char* value);
  inline void set_guid(const char* value, size_t size);
  inline ::std::string* mutable_guid();
  inline ::std::string* release_guid();
  inline void set_allocated_guid(::std::string* guid);

  // optional uint32 id = 2 [default = 0];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 count = 3 [default = 1];
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 3;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // optional uint32 index = 4 [default = 0];
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 4;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // optional uint32 createtime = 5 [default = 0];
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreatetimeFieldNumber = 5;
  inline ::google::protobuf::uint32 createtime() const;
  inline void set_createtime(::google::protobuf::uint32 value);

  // optional uint64 cd = 6 [default = 0];
  inline bool has_cd() const;
  inline void clear_cd();
  static const int kCdFieldNumber = 6;
  inline ::google::protobuf::uint64 cd() const;
  inline void set_cd(::google::protobuf::uint64 value);

  // optional .Cmd.EItemType type = 7 [default = EITEMTYPE_MIN];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 7;
  inline ::Cmd::EItemType type() const;
  inline void set_type(::Cmd::EItemType value);

  // optional .Cmd.EBindType bind = 8 [default = EBINDTYPE_MIN];
  inline bool has_bind() const;
  inline void clear_bind();
  static const int kBindFieldNumber = 8;
  inline ::Cmd::EBindType bind() const;
  inline void set_bind(::Cmd::EBindType value);

  // optional .Cmd.EExpireType expire = 9 [default = EEXPIRETYPE_MIN];
  inline bool has_expire() const;
  inline void clear_expire();
  static const int kExpireFieldNumber = 9;
  inline ::Cmd::EExpireType expire() const;
  inline void set_expire(::Cmd::EExpireType value);

  // optional .Cmd.EQualityType quality = 10 [default = EQUALITYTYPE_MIN];
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 10;
  inline ::Cmd::EQualityType quality() const;
  inline void set_quality(::Cmd::EQualityType value);

  // optional .Cmd.EEquipType equipType = 11 [default = EEQUIPTYPE_MIN];
  inline bool has_equiptype() const;
  inline void clear_equiptype();
  static const int kEquipTypeFieldNumber = 11;
  inline ::Cmd::EEquipType equiptype() const;
  inline void set_equiptype(::Cmd::EEquipType value);

  // optional .Cmd.ESource source = 12 [default = ESOURCE_NORMAL];
  inline bool has_source() const;
  inline void clear_source();
  static const int kSourceFieldNumber = 12;
  inline ::Cmd::ESource source() const;
  inline void set_source(::Cmd::ESource value);

  // optional bool isnew = 13 [default = false];
  inline bool has_isnew() const;
  inline void clear_isnew();
  static const int kIsnewFieldNumber = 13;
  inline bool isnew() const;
  inline void set_isnew(bool value);

  // optional uint32 maxcardslot = 14 [default = 0];
  inline bool has_maxcardslot() const;
  inline void clear_maxcardslot();
  static const int kMaxcardslotFieldNumber = 14;
  inline ::google::protobuf::uint32 maxcardslot() const;
  inline void set_maxcardslot(::google::protobuf::uint32 value);

  // optional bool ishint = 15 [default = false];
  inline bool has_ishint() const;
  inline void clear_ishint();
  static const int kIshintFieldNumber = 15;
  inline bool ishint() const;
  inline void set_ishint(bool value);

  // optional bool isactive = 16 [default = false];
  inline bool has_isactive() const;
  inline void clear_isactive();
  static const int kIsactiveFieldNumber = 16;
  inline bool isactive() const;
  inline void set_isactive(bool value);

  // optional uint32 source_npc = 17 [default = 0];
  inline bool has_source_npc() const;
  inline void clear_source_npc();
  static const int kSourceNpcFieldNumber = 17;
  inline ::google::protobuf::uint32 source_npc() const;
  inline void set_source_npc(::google::protobuf::uint32 value);

  // optional uint32 refinelv = 18 [default = 0];
  inline bool has_refinelv() const;
  inline void clear_refinelv();
  static const int kRefinelvFieldNumber = 18;
  inline ::google::protobuf::uint32 refinelv() const;
  inline void set_refinelv(::google::protobuf::uint32 value);

  // optional uint32 chargemoney = 19 [default = 0];
  inline bool has_chargemoney() const;
  inline void clear_chargemoney();
  static const int kChargemoneyFieldNumber = 19;
  inline ::google::protobuf::uint32 chargemoney() const;
  inline void set_chargemoney(::google::protobuf::uint32 value);

  // optional uint32 overtime = 20 [default = 0];
  inline bool has_overtime() const;
  inline void clear_overtime();
  static const int kOvertimeFieldNumber = 20;
  inline ::google::protobuf::uint32 overtime() const;
  inline void set_overtime(::google::protobuf::uint32 value);

  // optional uint64 quota = 21 [default = 0];
  inline bool has_quota() const;
  inline void clear_quota();
  static const int kQuotaFieldNumber = 21;
  inline ::google::protobuf::uint64 quota() const;
  inline void set_quota(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.ItemInfo)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_cd();
  inline void clear_has_cd();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_bind();
  inline void clear_has_bind();
  inline void set_has_expire();
  inline void clear_has_expire();
  inline void set_has_quality();
  inline void clear_has_quality();
  inline void set_has_equiptype();
  inline void clear_has_equiptype();
  inline void set_has_source();
  inline void clear_has_source();
  inline void set_has_isnew();
  inline void clear_has_isnew();
  inline void set_has_maxcardslot();
  inline void clear_has_maxcardslot();
  inline void set_has_ishint();
  inline void clear_has_ishint();
  inline void set_has_isactive();
  inline void clear_has_isactive();
  inline void set_has_source_npc();
  inline void clear_has_source_npc();
  inline void set_has_refinelv();
  inline void clear_has_refinelv();
  inline void set_has_chargemoney();
  inline void clear_has_chargemoney();
  inline void set_has_overtime();
  inline void clear_has_overtime();
  inline void set_has_quota();
  inline void clear_has_quota();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* guid_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 count_;
  ::google::protobuf::uint32 index_;
  ::google::protobuf::uint32 createtime_;
  ::google::protobuf::uint64 cd_;
  int type_;
  int bind_;
  int expire_;
  int quality_;
  int equiptype_;
  int source_;
  ::google::protobuf::uint32 maxcardslot_;
  bool isnew_;
  bool ishint_;
  bool isactive_;
  ::google::protobuf::uint32 source_npc_;
  ::google::protobuf::uint32 refinelv_;
  ::google::protobuf::uint32 chargemoney_;
  ::google::protobuf::uint32 overtime_;
  ::google::protobuf::uint64 quota_;
  friend void  protobuf_AddDesc_SceneItem_2eproto();
  friend void protobuf_AssignDesc_SceneItem_2eproto();
  friend void protobuf_ShutdownFile_SceneItem_2eproto();

  void InitAsDefaultInstance();
  static ItemInfo* default_instance_;
};
// -------------------------------------------------------------------

class RefineCompose : public ::google::protobuf::Message {
 public:
  RefineCompose();
  virtual ~RefineCompose();

  RefineCompose(const RefineCompose& from);

  inline RefineCompose& operator=(const RefineCompose& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RefineCompose& default_instance();

  void Swap(RefineCompose* other);

  // implements Message ----------------------------------------------

  RefineCompose* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RefineCompose& from);
  void MergeFrom(const RefineCompose& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1 [default = 0];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 num = 2 [default = 0];
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.RefineCompose)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 num_;
  friend void  protobuf_AddDesc_SceneItem_2eproto();
  friend void protobuf_AssignDesc_SceneItem_2eproto();
  friend void protobuf_ShutdownFile_SceneItem_2eproto();

  void InitAsDefaultInstance();
  static RefineCompose* default_instance_;
};
// -------------------------------------------------------------------

class EquipData : public ::google::protobuf::Message {
 public:
  EquipData();
  virtual ~EquipData();

  EquipData(const EquipData& from);

  inline EquipData& operator=(const EquipData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipData& default_instance();

  void Swap(EquipData* other);

  // implements Message ----------------------------------------------

  EquipData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipData& from);
  void MergeFrom(const EquipData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 strengthlv = 1 [default = 0];
  inline bool has_strengthlv() const;
  inline void clear_strengthlv();
  static const int kStrengthlvFieldNumber = 1;
  inline ::google::protobuf::uint32 strengthlv() const;
  inline void set_strengthlv(::google::protobuf::uint32 value);

  // optional uint32 refinelv = 2 [default = 0];
  inline bool has_refinelv() const;
  inline void clear_refinelv();
  static const int kRefinelvFieldNumber = 2;
  inline ::google::protobuf::uint32 refinelv() const;
  inline void set_refinelv(::google::protobuf::uint32 value);

  // optional uint32 strengthCost = 3 [default = 0];
  inline bool has_strengthcost() const;
  inline void clear_strengthcost();
  static const int kStrengthCostFieldNumber = 3;
  inline ::google::protobuf::uint32 strengthcost() const;
  inline void set_strengthcost(::google::protobuf::uint32 value);

  // repeated .Cmd.RefineCompose refineCompose = 4;
  inline int refinecompose_size() const;
  inline void clear_refinecompose();
  static const int kRefineComposeFieldNumber = 4;
  inline const ::Cmd::RefineCompose& refinecompose(int index) const;
  inline ::Cmd::RefineCompose* mutable_refinecompose(int index);
  inline ::Cmd::RefineCompose* add_refinecompose();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::RefineCompose >&
      refinecompose() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::RefineCompose >*
      mutable_refinecompose();

  // optional uint32 cardslot = 5 [default = 0];
  inline bool has_cardslot() const;
  inline void clear_cardslot();
  static const int kCardslotFieldNumber = 5;
  inline ::google::protobuf::uint32 cardslot() const;
  inline void set_cardslot(::google::protobuf::uint32 value);

  // repeated uint32 buffid = 6;
  inline int buffid_size() const;
  inline void clear_buffid();
  static const int kBuffidFieldNumber = 6;
  inline ::google::protobuf::uint32 buffid(int index) const;
  inline void set_buffid(int index, ::google::protobuf::uint32 value);
  inline void add_buffid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      buffid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_buffid();

  // optional bool damage = 7 [default = false];
  inline bool has_damage() const;
  inline void clear_damage();
  static const int kDamageFieldNumber = 7;
  inline bool damage() const;
  inline void set_damage(bool value);

  // optional uint32 lv = 8 [default = 0];
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 8;
  inline ::google::protobuf::uint32 lv() const;
  inline void set_lv(::google::protobuf::uint32 value);

  // optional uint32 color = 9 [default = 0];
  inline bool has_color() const;
  inline void clear_color();
  static const int kColorFieldNumber = 9;
  inline ::google::protobuf::uint32 color() const;
  inline void set_color(::google::protobuf::uint32 value);

  // optional uint32 breakstarttime = 10 [default = 0];
  inline bool has_breakstarttime() const;
  inline void clear_breakstarttime();
  static const int kBreakstarttimeFieldNumber = 10;
  inline ::google::protobuf::uint32 breakstarttime() const;
  inline void set_breakstarttime(::google::protobuf::uint32 value);

  // optional uint32 breakendtime = 11 [default = 0];
  inline bool has_breakendtime() const;
  inline void clear_breakendtime();
  static const int kBreakendtimeFieldNumber = 11;
  inline ::google::protobuf::uint32 breakendtime() const;
  inline void set_breakendtime(::google::protobuf::uint32 value);

  // optional uint32 strengthlv2 = 12 [default = 0];
  inline bool has_strengthlv2() const;
  inline void clear_strengthlv2();
  static const int kStrengthlv2FieldNumber = 12;
  inline ::google::protobuf::uint32 strengthlv2() const;
  inline void set_strengthlv2(::google::protobuf::uint32 value);

  // repeated .Cmd.ItemInfo strengthlv2cost = 13;
  inline int strengthlv2cost_size() const;
  inline void clear_strengthlv2cost();
  static const int kStrengthlv2CostFieldNumber = 13;
  inline const ::Cmd::ItemInfo& strengthlv2cost(int index) const;
  inline ::Cmd::ItemInfo* mutable_strengthlv2cost(int index);
  inline ::Cmd::ItemInfo* add_strengthlv2cost();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ItemInfo >&
      strengthlv2cost() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::ItemInfo >*
      mutable_strengthlv2cost();

  // @@protoc_insertion_point(class_scope:Cmd.EquipData)
 private:
  inline void set_has_strengthlv();
  inline void clear_has_strengthlv();
  inline void set_has_refinelv();
  inline void clear_has_refinelv();
  inline void set_has_strengthcost();
  inline void clear_has_strengthcost();
  inline void set_has_cardslot();
  inline void clear_has_cardslot();
  inline void set_has_damage();
  inline void clear_has_damage();
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_color();
  inline void clear_has_color();
  inline void set_has_breakstarttime();
  inline void clear_has_breakstarttime();
  inline void set_has_breakendtime();
  inline void clear_has_breakendtime();
  inline void set_has_strengthlv2();
  inline void clear_has_strengthlv2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 strengthlv_;
  ::google::protobuf::uint32 refinelv_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::RefineCompose > refinecompose_;
  ::google::protobuf::uint32 strengthcost_;
  ::google::protobuf::uint32 cardslot_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > buffid_;
  bool damage_;
  ::google::protobuf::uint32 lv_;
  ::google::protobuf::uint32 color_;
  ::google::protobuf::uint32 breakstarttime_;
  ::google::protobuf::uint32 breakendtime_;
  ::google::protobuf::uint32 strengthlv2_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::ItemInfo > strengthlv2cost_;
  friend void  protobuf_AddDesc_SceneItem_2eproto();
  friend void protobuf_AssignDesc_SceneItem_2eproto();
  friend void protobuf_ShutdownFile_SceneItem_2eproto();

  void InitAsDefaultInstance();
  static EquipData* default_instance_;
};
// -------------------------------------------------------------------

class CardData : public ::google::protobuf::Message {
 public:
  CardData();
  virtual ~CardData();

  CardData(const CardData& from);

  inline CardData& operator=(const CardData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CardData& default_instance();

  void Swap(CardData* other);

  // implements Message ----------------------------------------------

  CardData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CardData& from);
  void MergeFrom(const CardData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string guid = 1;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline const ::std::string& guid() const;
  inline void set_guid(const ::std::string& value);
  inline void set_guid(const char* value);
  inline void set_guid(const char* value, size_t size);
  inline ::std::string* mutable_guid();
  inline ::std::string* release_guid();
  inline void set_allocated_guid(::std::string* guid);

  // optional uint32 id = 2 [default = 0];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 pos = 3 [default = 0];
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 3;
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.CardData)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_pos();
  inline void clear_has_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* guid_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 pos_;
  friend void  protobuf_AddDesc_SceneItem_2eproto();
  friend void protobuf_AssignDesc_SceneItem_2eproto();
  friend void protobuf_ShutdownFile_SceneItem_2eproto();

  void InitAsDefaultInstance();
  static CardData* default_instance_;
};
// -------------------------------------------------------------------

class EnchantAttr : public ::google::protobuf::Message {
 public:
  EnchantAttr();
  virtual ~EnchantAttr();

  EnchantAttr(const EnchantAttr& from);

  inline EnchantAttr& operator=(const EnchantAttr& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EnchantAttr& default_instance();

  void Swap(EnchantAttr* other);

  // implements Message ----------------------------------------------

  EnchantAttr* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EnchantAttr& from);
  void MergeFrom(const EnchantAttr& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.EAttrType type = 1 [default = EATTRTYPE_MIN];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::Cmd::EAttrType type() const;
  inline void set_type(::Cmd::EAttrType value);

  // optional uint32 value = 2 [default = 0];
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::uint32 value() const;
  inline void set_value(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.EnchantAttr)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int type_;
  ::google::protobuf::uint32 value_;
  friend void  protobuf_AddDesc_SceneItem_2eproto();
  friend void protobuf_AssignDesc_SceneItem_2eproto();
  friend void protobuf_ShutdownFile_SceneItem_2eproto();

  void InitAsDefaultInstance();
  static EnchantAttr* default_instance_;
};
// -------------------------------------------------------------------

class EnchantExtra : public ::google::protobuf::Message {
 public:
  EnchantExtra();
  virtual ~EnchantExtra();

  EnchantExtra(const EnchantExtra& from);

  inline EnchantExtra& operator=(const EnchantExtra& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EnchantExtra& default_instance();

  void Swap(EnchantExtra* other);

  // implements Message ----------------------------------------------

  EnchantExtra* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EnchantExtra& from);
  void MergeFrom(const EnchantExtra& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 configid = 1 [default = 0];
  inline bool has_configid() const;
  inline void clear_configid();
  static const int kConfigidFieldNumber = 1;
  inline ::google::protobuf::uint32 configid() const;
  inline void set_configid(::google::protobuf::uint32 value);

  // optional uint32 buffid = 2 [default = 0];
  inline bool has_buffid() const;
  inline void clear_buffid();
  static const int kBuffidFieldNumber = 2;
  inline ::google::protobuf::uint32 buffid() const;
  inline void set_buffid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.EnchantExtra)
 private:
  inline void set_has_configid();
  inline void clear_has_configid();
  inline void set_has_buffid();
  inline void clear_has_buffid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 configid_;
  ::google::protobuf::uint32 buffid_;
  friend void  protobuf_AddDesc_SceneItem_2eproto();
  friend void protobuf_AssignDesc_SceneItem_2eproto();
  friend void protobuf_ShutdownFile_SceneItem_2eproto();

  void InitAsDefaultInstance();
  static EnchantExtra* default_instance_;
};
// -------------------------------------------------------------------

class EnchantData : public ::google::protobuf::Message {
 public:
  EnchantData();
  virtual ~EnchantData();

  EnchantData(const EnchantData& from);

  inline EnchantData& operator=(const EnchantData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EnchantData& default_instance();

  void Swap(EnchantData* other);

  // implements Message ----------------------------------------------

  EnchantData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EnchantData& from);
  void MergeFrom(const EnchantData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.EEnchantType type = 1 [default = EENCHANTTYPE_MIN];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::Cmd::EEnchantType type() const;
  inline void set_type(::Cmd::EEnchantType value);

  // repeated .Cmd.EnchantAttr attrs = 2;
  inline int attrs_size() const;
  inline void clear_attrs();
  static const int kAttrsFieldNumber = 2;
  inline const ::Cmd::EnchantAttr& attrs(int index) const;
  inline ::Cmd::EnchantAttr* mutable_attrs(int index);
  inline ::Cmd::EnchantAttr* add_attrs();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::EnchantAttr >&
      attrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::EnchantAttr >*
      mutable_attrs();

  // repeated .Cmd.EnchantExtra extras = 3;
  inline int extras_size() const;
  inline void clear_extras();
  static const int kExtrasFieldNumber = 3;
  inline const ::Cmd::EnchantExtra& extras(int index) const;
  inline ::Cmd::EnchantExtra* mutable_extras(int index);
  inline ::Cmd::EnchantExtra* add_extras();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::EnchantExtra >&
      extras() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::EnchantExtra >*
      mutable_extras();

  // repeated uint32 patch = 4;
  inline int patch_size() const;
  inline void clear_patch();
  static const int kPatchFieldNumber = 4;
  inline ::google::protobuf::uint32 patch(int index) const;
  inline void set_patch(int index, ::google::protobuf::uint32 value);
  inline void add_patch(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      patch() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_patch();

  // @@protoc_insertion_point(class_scope:Cmd.EnchantData)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::EnchantAttr > attrs_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::EnchantExtra > extras_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > patch_;
  int type_;
  friend void  protobuf_AddDesc_SceneItem_2eproto();
  friend void protobuf_AssignDesc_SceneItem_2eproto();
  friend void protobuf_ShutdownFile_SceneItem_2eproto();

  void InitAsDefaultInstance();
  static EnchantData* default_instance_;
};
// -------------------------------------------------------------------

class RefineData : public ::google::protobuf::Message {
 public:
  RefineData();
  virtual ~RefineData();

  RefineData(const RefineData& from);

  inline RefineData& operator=(const RefineData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RefineData& default_instance();

  void Swap(RefineData* other);

  // implements Message ----------------------------------------------

  RefineData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RefineData& from);
  void MergeFrom(const RefineData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool lastfail = 1 [default = false];
  inline bool has_lastfail() const;
  inline void clear_lastfail();
  static const int kLastfailFieldNumber = 1;
  inline bool lastfail() const;
  inline void set_lastfail(bool value);

  // optional uint32 repaircount = 2 [default = 0];
  inline bool has_repaircount() const;
  inline void clear_repaircount();
  static const int kRepaircountFieldNumber = 2;
  inline ::google::protobuf::uint32 repaircount() const;
  inline void set_repaircount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.RefineData)
 private:
  inline void set_has_lastfail();
  inline void clear_has_lastfail();
  inline void set_has_repaircount();
  inline void clear_has_repaircount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool lastfail_;
  ::google::protobuf::uint32 repaircount_;
  friend void  protobuf_AddDesc_SceneItem_2eproto();
  friend void protobuf_AssignDesc_SceneItem_2eproto();
  friend void protobuf_ShutdownFile_SceneItem_2eproto();

  void InitAsDefaultInstance();
  static RefineData* default_instance_;
};
// -------------------------------------------------------------------

class EggEquip : public ::google::protobuf::Message {
 public:
  EggEquip();
  virtual ~EggEquip();

  EggEquip(const EggEquip& from);

  inline EggEquip& operator=(const EggEquip& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EggEquip& default_instance();

  void Swap(EggEquip* other);

  // implements Message ----------------------------------------------

  EggEquip* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EggEquip& from);
  void MergeFrom(const EggEquip& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.ItemInfo base = 1;
  inline bool has_base() const;
  inline void clear_base();
  static const int kBaseFieldNumber = 1;
  inline const ::Cmd::ItemInfo& base() const;
  inline ::Cmd::ItemInfo* mutable_base();
  inline ::Cmd::ItemInfo* release_base();
  inline void set_allocated_base(::Cmd::ItemInfo* base);

  // optional .Cmd.EquipData data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::Cmd::EquipData& data() const;
  inline ::Cmd::EquipData* mutable_data();
  inline ::Cmd::EquipData* release_data();
  inline void set_allocated_data(::Cmd::EquipData* data);

  // repeated .Cmd.CardData card = 3;
  inline int card_size() const;
  inline void clear_card();
  static const int kCardFieldNumber = 3;
  inline const ::Cmd::CardData& card(int index) const;
  inline ::Cmd::CardData* mutable_card(int index);
  inline ::Cmd::CardData* add_card();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::CardData >&
      card() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::CardData >*
      mutable_card();

  // optional .Cmd.EnchantData enchant = 4;
  inline bool has_enchant() const;
  inline void clear_enchant();
  static const int kEnchantFieldNumber = 4;
  inline const ::Cmd::EnchantData& enchant() const;
  inline ::Cmd::EnchantData* mutable_enchant();
  inline ::Cmd::EnchantData* release_enchant();
  inline void set_allocated_enchant(::Cmd::EnchantData* enchant);

  // optional .Cmd.EnchantData previewenchant = 5;
  inline bool has_previewenchant() const;
  inline void clear_previewenchant();
  static const int kPreviewenchantFieldNumber = 5;
  inline const ::Cmd::EnchantData& previewenchant() const;
  inline ::Cmd::EnchantData* mutable_previewenchant();
  inline ::Cmd::EnchantData* release_previewenchant();
  inline void set_allocated_previewenchant(::Cmd::EnchantData* previewenchant);

  // optional .Cmd.RefineData refine = 7;
  inline bool has_refine() const;
  inline void clear_refine();
  static const int kRefineFieldNumber = 7;
  inline const ::Cmd::RefineData& refine() const;
  inline ::Cmd::RefineData* mutable_refine();
  inline ::Cmd::RefineData* release_refine();
  inline void set_allocated_refine(::Cmd::RefineData* refine);

  // @@protoc_insertion_point(class_scope:Cmd.EggEquip)
 private:
  inline void set_has_base();
  inline void clear_has_base();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_enchant();
  inline void clear_has_enchant();
  inline void set_has_previewenchant();
  inline void clear_has_previewenchant();
  inline void set_has_refine();
  inline void clear_has_refine();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Cmd::ItemInfo* base_;
  ::Cmd::EquipData* data_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::CardData > card_;
  ::Cmd::EnchantData* enchant_;
  ::Cmd::EnchantData* previewenchant_;
  ::Cmd::RefineData* refine_;
  friend void  protobuf_AddDesc_SceneItem_2eproto();
  friend void protobuf_AssignDesc_SceneItem_2eproto();
  friend void protobuf_ShutdownFile_SceneItem_2eproto();

  void InitAsDefaultInstance();
  static EggEquip* default_instance_;
};
// -------------------------------------------------------------------

class PetEquipData : public ::google::protobuf::Message {
 public:
  PetEquipData();
  virtual ~PetEquipData();

  PetEquipData(const PetEquipData& from);

  inline PetEquipData& operator=(const PetEquipData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PetEquipData& default_instance();

  void Swap(PetEquipData* other);

  // implements Message ----------------------------------------------

  PetEquipData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PetEquipData& from);
  void MergeFrom(const PetEquipData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.EEquipPos epos = 1;
  inline bool has_epos() const;
  inline void clear_epos();
  static const int kEposFieldNumber = 1;
  inline ::Cmd::EEquipPos epos() const;
  inline void set_epos(::Cmd::EEquipPos value);

  // optional uint32 itemid = 2;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 2;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.PetEquipData)
 private:
  inline void set_has_epos();
  inline void clear_has_epos();
  inline void set_has_itemid();
  inline void clear_has_itemid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int epos_;
  ::google::protobuf::uint32 itemid_;
  friend void  protobuf_AddDesc_SceneItem_2eproto();
  friend void protobuf_AssignDesc_SceneItem_2eproto();
  friend void protobuf_ShutdownFile_SceneItem_2eproto();

  void InitAsDefaultInstance();
  static PetEquipData* default_instance_;
};
// -------------------------------------------------------------------

class EggData : public ::google::protobuf::Message {
 public:
  EggData();
  virtual ~EggData();

  EggData(const EggData& from);

  inline EggData& operator=(const EggData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EggData& default_instance();

  void Swap(EggData* other);

  // implements Message ----------------------------------------------

  EggData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EggData& from);
  void MergeFrom(const EggData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 exp = 1 [default = 0];
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 1;
  inline ::google::protobuf::uint64 exp() const;
  inline void set_exp(::google::protobuf::uint64 value);

  // optional uint64 friendexp = 2 [default = 0];
  inline bool has_friendexp() const;
  inline void clear_friendexp();
  static const int kFriendexpFieldNumber = 2;
  inline ::google::protobuf::uint64 friendexp() const;
  inline void set_friendexp(::google::protobuf::uint64 value);

  // optional uint64 rewardexp = 3 [default = 0];
  inline bool has_rewardexp() const;
  inline void clear_rewardexp();
  static const int kRewardexpFieldNumber = 3;
  inline ::google::protobuf::uint64 rewardexp() const;
  inline void set_rewardexp(::google::protobuf::uint64 value);

  // optional uint32 id = 4 [default = 0];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 4;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 lv = 5 [default = 0];
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 5;
  inline ::google::protobuf::uint32 lv() const;
  inline void set_lv(::google::protobuf::uint32 value);

  // optional uint32 friendlv = 6 [default = 0];
  inline bool has_friendlv() const;
  inline void clear_friendlv();
  static const int kFriendlvFieldNumber = 6;
  inline ::google::protobuf::uint32 friendlv() const;
  inline void set_friendlv(::google::protobuf::uint32 value);

  // optional uint32 body = 7 [default = 0];
  inline bool has_body() const;
  inline void clear_body();
  static const int kBodyFieldNumber = 7;
  inline ::google::protobuf::uint32 body() const;
  inline void set_body(::google::protobuf::uint32 value);

  // optional uint32 relivetime = 8 [default = 0];
  inline bool has_relivetime() const;
  inline void clear_relivetime();
  static const int kRelivetimeFieldNumber = 8;
  inline ::google::protobuf::uint32 relivetime() const;
  inline void set_relivetime(::google::protobuf::uint32 value);

  // optional uint32 hp = 9 [default = 0];
  inline bool has_hp() const;
  inline void clear_hp();
  static const int kHpFieldNumber = 9;
  inline ::google::protobuf::uint32 hp() const;
  inline void set_hp(::google::protobuf::uint32 value);

  // optional uint32 restoretime = 10 [default = 0];
  inline bool has_restoretime() const;
  inline void clear_restoretime();
  static const int kRestoretimeFieldNumber = 10;
  inline ::google::protobuf::uint32 restoretime() const;
  inline void set_restoretime(::google::protobuf::uint32 value);

  // optional uint32 time_happly = 11 [default = 0];
  inline bool has_time_happly() const;
  inline void clear_time_happly();
  static const int kTimeHapplyFieldNumber = 11;
  inline ::google::protobuf::uint32 time_happly() const;
  inline void set_time_happly(::google::protobuf::uint32 value);

  // optional uint32 time_excite = 12 [default = 0];
  inline bool has_time_excite() const;
  inline void clear_time_excite();
  static const int kTimeExciteFieldNumber = 12;
  inline ::google::protobuf::uint32 time_excite() const;
  inline void set_time_excite(::google::protobuf::uint32 value);

  // optional uint32 time_happiness = 13 [default = 0];
  inline bool has_time_happiness() const;
  inline void clear_time_happiness();
  static const int kTimeHappinessFieldNumber = 13;
  inline ::google::protobuf::uint32 time_happiness() const;
  inline void set_time_happiness(::google::protobuf::uint32 value);

  // optional uint32 time_happly_gift = 14 [default = 0];
  inline bool has_time_happly_gift() const;
  inline void clear_time_happly_gift();
  static const int kTimeHapplyGiftFieldNumber = 14;
  inline ::google::protobuf::uint32 time_happly_gift() const;
  inline void set_time_happly_gift(::google::protobuf::uint32 value);

  // optional uint32 time_excite_gift = 15 [default = 0];
  inline bool has_time_excite_gift() const;
  inline void clear_time_excite_gift();
  static const int kTimeExciteGiftFieldNumber = 15;
  inline ::google::protobuf::uint32 time_excite_gift() const;
  inline void set_time_excite_gift(::google::protobuf::uint32 value);

  // optional uint32 time_happiness_gift = 16 [default = 0];
  inline bool has_time_happiness_gift() const;
  inline void clear_time_happiness_gift();
  static const int kTimeHappinessGiftFieldNumber = 16;
  inline ::google::protobuf::uint32 time_happiness_gift() const;
  inline void set_time_happiness_gift(::google::protobuf::uint32 value);

  // optional uint32 touch_tick = 22 [default = 0];
  inline bool has_touch_tick() const;
  inline void clear_touch_tick();
  static const int kTouchTickFieldNumber = 22;
  inline ::google::protobuf::uint32 touch_tick() const;
  inline void set_touch_tick(::google::protobuf::uint32 value);

  // optional uint32 feed_tick = 23 [default = 0];
  inline bool has_feed_tick() const;
  inline void clear_feed_tick();
  static const int kFeedTickFieldNumber = 23;
  inline ::google::protobuf::uint32 feed_tick() const;
  inline void set_feed_tick(::google::protobuf::uint32 value);

  // optional string name = 17;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 17;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional bytes var = 18;
  inline bool has_var() const;
  inline void clear_var();
  static const int kVarFieldNumber = 18;
  inline const ::std::string& var() const;
  inline void set_var(const ::std::string& value);
  inline void set_var(const char* value);
  inline void set_var(const void* value, size_t size);
  inline ::std::string* mutable_var();
  inline ::std::string* release_var();
  inline void set_allocated_var(::std::string* var);

  // repeated uint32 skillids = 19;
  inline int skillids_size() const;
  inline void clear_skillids();
  static const int kSkillidsFieldNumber = 19;
  inline ::google::protobuf::uint32 skillids(int index) const;
  inline void set_skillids(int index, ::google::protobuf::uint32 value);
  inline void add_skillids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      skillids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_skillids();

  // repeated .Cmd.EggEquip equips = 20;
  inline int equips_size() const;
  inline void clear_equips();
  static const int kEquipsFieldNumber = 20;
  inline const ::Cmd::EggEquip& equips(int index) const;
  inline ::Cmd::EggEquip* mutable_equips(int index);
  inline ::Cmd::EggEquip* add_equips();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::EggEquip >&
      equips() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::EggEquip >*
      mutable_equips();

  // optional bytes buff = 21;
  inline bool has_buff() const;
  inline void clear_buff();
  static const int kBuffFieldNumber = 21;
  inline const ::std::string& buff() const;
  inline void set_buff(const ::std::string& value);
  inline void set_buff(const char* value);
  inline void set_buff(const void* value, size_t size);
  inline ::std::string* mutable_buff();
  inline ::std::string* release_buff();
  inline void set_allocated_buff(::std::string* buff);

  // repeated uint32 unlock_equip = 24;
  inline int unlock_equip_size() const;
  inline void clear_unlock_equip();
  static const int kUnlockEquipFieldNumber = 24;
  inline ::google::protobuf::uint32 unlock_equip(int index) const;
  inline void set_unlock_equip(int index, ::google::protobuf::uint32 value);
  inline void add_unlock_equip(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      unlock_equip() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_unlock_equip();

  // repeated uint32 unlock_body = 25;
  inline int unlock_body_size() const;
  inline void clear_unlock_body();
  static const int kUnlockBodyFieldNumber = 25;
  inline ::google::protobuf::uint32 unlock_body(int index) const;
  inline void set_unlock_body(int index, ::google::protobuf::uint32 value);
  inline void add_unlock_body(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      unlock_body() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_unlock_body();

  // optional uint32 version = 26 [default = 0];
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 26;
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);

  // optional bool skilloff = 27 [default = false];
  inline bool has_skilloff() const;
  inline void clear_skilloff();
  static const int kSkilloffFieldNumber = 27;
  inline bool skilloff() const;
  inline void set_skilloff(bool value);

  // optional uint32 exchange_count = 28 [default = 0];
  inline bool has_exchange_count() const;
  inline void clear_exchange_count();
  static const int kExchangeCountFieldNumber = 28;
  inline ::google::protobuf::uint32 exchange_count() const;
  inline void set_exchange_count(::google::protobuf::uint32 value);

  // optional string guid = 29;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 29;
  inline const ::std::string& guid() const;
  inline void set_guid(const ::std::string& value);
  inline void set_guid(const char* value);
  inline void set_guid(const char* value, size_t size);
  inline ::std::string* mutable_guid();
  inline ::std::string* release_guid();
  inline void set_allocated_guid(::std::string* guid);

  // repeated .Cmd.PetEquipData defaultwears = 30;
  inline int defaultwears_size() const;
  inline void clear_defaultwears();
  static const int kDefaultwearsFieldNumber = 30;
  inline const ::Cmd::PetEquipData& defaultwears(int index) const;
  inline ::Cmd::PetEquipData* mutable_defaultwears(int index);
  inline ::Cmd::PetEquipData* add_defaultwears();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::PetEquipData >&
      defaultwears() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::PetEquipData >*
      mutable_defaultwears();

  // repeated .Cmd.PetEquipData wears = 31;
  inline int wears_size() const;
  inline void clear_wears();
  static const int kWearsFieldNumber = 31;
  inline const ::Cmd::PetEquipData& wears(int index) const;
  inline ::Cmd::PetEquipData* mutable_wears(int index);
  inline ::Cmd::PetEquipData* add_wears();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::PetEquipData >&
      wears() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::PetEquipData >*
      mutable_wears();

  // @@protoc_insertion_point(class_scope:Cmd.EggData)
 private:
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_friendexp();
  inline void clear_has_friendexp();
  inline void set_has_rewardexp();
  inline void clear_has_rewardexp();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_friendlv();
  inline void clear_has_friendlv();
  inline void set_has_body();
  inline void clear_has_body();
  inline void set_has_relivetime();
  inline void clear_has_relivetime();
  inline void set_has_hp();
  inline void clear_has_hp();
  inline void set_has_restoretime();
  inline void clear_has_restoretime();
  inline void set_has_time_happly();
  inline void clear_has_time_happly();
  inline void set_has_time_excite();
  inline void clear_has_time_excite();
  inline void set_has_time_happiness();
  inline void clear_has_time_happiness();
  inline void set_has_time_happly_gift();
  inline void clear_has_time_happly_gift();
  inline void set_has_time_excite_gift();
  inline void clear_has_time_excite_gift();
  inline void set_has_time_happiness_gift();
  inline void clear_has_time_happiness_gift();
  inline void set_has_touch_tick();
  inline void clear_has_touch_tick();
  inline void set_has_feed_tick();
  inline void clear_has_feed_tick();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_var();
  inline void clear_has_var();
  inline void set_has_buff();
  inline void clear_has_buff();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_skilloff();
  inline void clear_has_skilloff();
  inline void set_has_exchange_count();
  inline void clear_has_exchange_count();
  inline void set_has_guid();
  inline void clear_has_guid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 exp_;
  ::google::protobuf::uint64 friendexp_;
  ::google::protobuf::uint64 rewardexp_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 lv_;
  ::google::protobuf::uint32 friendlv_;
  ::google::protobuf::uint32 body_;
  ::google::protobuf::uint32 relivetime_;
  ::google::protobuf::uint32 hp_;
  ::google::protobuf::uint32 restoretime_;
  ::google::protobuf::uint32 time_happly_;
  ::google::protobuf::uint32 time_excite_;
  ::google::protobuf::uint32 time_happiness_;
  ::google::protobuf::uint32 time_happly_gift_;
  ::google::protobuf::uint32 time_excite_gift_;
  ::google::protobuf::uint32 time_happiness_gift_;
  ::google::protobuf::uint32 touch_tick_;
  ::std::string* name_;
  ::std::string* var_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > skillids_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::EggEquip > equips_;
  ::google::protobuf::uint32 feed_tick_;
  ::google::protobuf::uint32 version_;
  ::std::string* buff_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > unlock_equip_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > unlock_body_;
  bool skilloff_;
  ::google::protobuf::uint32 exchange_count_;
  ::std::string* guid_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::PetEquipData > defaultwears_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::PetEquipData > wears_;
  friend void  protobuf_AddDesc_SceneItem_2eproto();
  friend void protobuf_AssignDesc_SceneItem_2eproto();
  friend void protobuf_ShutdownFile_SceneItem_2eproto();

  void InitAsDefaultInstance();
  static EggData* default_instance_;
};
// -------------------------------------------------------------------

class LoveLetterData : public ::google::protobuf::Message {
 public:
  LoveLetterData();
  virtual ~LoveLetterData();

  LoveLetterData(const LoveLetterData& from);

  inline LoveLetterData& operator=(const LoveLetterData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoveLetterData& default_instance();

  void Swap(LoveLetterData* other);

  // implements Message ----------------------------------------------

  LoveLetterData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoveLetterData& from);
  void MergeFrom(const LoveLetterData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string sendUserName = 1;
  inline bool has_sendusername() const;
  inline void clear_sendusername();
  static const int kSendUserNameFieldNumber = 1;
  inline const ::std::string& sendusername() const;
  inline void set_sendusername(const ::std::string& value);
  inline void set_sendusername(const char* value);
  inline void set_sendusername(const char* value, size_t size);
  inline ::std::string* mutable_sendusername();
  inline ::std::string* release_sendusername();
  inline void set_allocated_sendusername(::std::string* sendusername);

  // optional string bg = 2;
  inline bool has_bg() const;
  inline void clear_bg();
  static const int kBgFieldNumber = 2;
  inline const ::std::string& bg() const;
  inline void set_bg(const ::std::string& value);
  inline void set_bg(const char* value);
  inline void set_bg(const char* value, size_t size);
  inline ::std::string* mutable_bg();
  inline ::std::string* release_bg();
  inline void set_allocated_bg(::std::string* bg);

  // optional uint32 configID = 3;
  inline bool has_configid() const;
  inline void clear_configid();
  static const int kConfigIDFieldNumber = 3;
  inline ::google::protobuf::uint32 configid() const;
  inline void set_configid(::google::protobuf::uint32 value);

  // optional string content = 4;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 4;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional string content2 = 5;
  inline bool has_content2() const;
  inline void clear_content2();
  static const int kContent2FieldNumber = 5;
  inline const ::std::string& content2() const;
  inline void set_content2(const ::std::string& value);
  inline void set_content2(const char* value);
  inline void set_content2(const char* value, size_t size);
  inline ::std::string* mutable_content2();
  inline ::std::string* release_content2();
  inline void set_allocated_content2(::std::string* content2);

  // @@protoc_insertion_point(class_scope:Cmd.LoveLetterData)
 private:
  inline void set_has_sendusername();
  inline void clear_has_sendusername();
  inline void set_has_bg();
  inline void clear_has_bg();
  inline void set_has_configid();
  inline void clear_has_configid();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_content2();
  inline void clear_has_content2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* sendusername_;
  ::std::string* bg_;
  ::std::string* content_;
  ::std::string* content2_;
  ::google::protobuf::uint32 configid_;
  friend void  protobuf_AddDesc_SceneItem_2eproto();
  friend void protobuf_AssignDesc_SceneItem_2eproto();
  friend void protobuf_ShutdownFile_SceneItem_2eproto();

  void InitAsDefaultInstance();
  static LoveLetterData* default_instance_;
};
// -------------------------------------------------------------------

class CodeData : public ::google::protobuf::Message {
 public:
  CodeData();
  virtual ~CodeData();

  CodeData(const CodeData& from);

  inline CodeData& operator=(const CodeData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CodeData& default_instance();

  void Swap(CodeData* other);

  // implements Message ----------------------------------------------

  CodeData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CodeData& from);
  void MergeFrom(const CodeData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline const ::std::string& code() const;
  inline void set_code(const ::std::string& value);
  inline void set_code(const char* value);
  inline void set_code(const char* value, size_t size);
  inline ::std::string* mutable_code();
  inline ::std::string* release_code();
  inline void set_allocated_code(::std::string* code);

  // optional bool used = 2 [default = false];
  inline bool has_used() const;
  inline void clear_used();
  static const int kUsedFieldNumber = 2;
  inline bool used() const;
  inline void set_used(bool value);

  // @@protoc_insertion_point(class_scope:Cmd.CodeData)
 private:
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_used();
  inline void clear_has_used();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* code_;
  bool used_;
  friend void  protobuf_AddDesc_SceneItem_2eproto();
  friend void protobuf_AssignDesc_SceneItem_2eproto();
  friend void protobuf_ShutdownFile_SceneItem_2eproto();

  void InitAsDefaultInstance();
  static CodeData* default_instance_;
};
// -------------------------------------------------------------------

class WeddingData : public ::google::protobuf::Message {
 public:
  WeddingData();
  virtual ~WeddingData();

  WeddingData(const WeddingData& from);

  inline WeddingData& operator=(const WeddingData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WeddingData& default_instance();

  void Swap(WeddingData* other);

  // implements Message ----------------------------------------------

  WeddingData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WeddingData& from);
  void MergeFrom(const WeddingData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 id = 1 [default = 0];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional uint32 zoneid = 2 [default = 0];
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 2;
  inline ::google::protobuf::uint32 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint32 value);

  // optional uint64 charid1 = 3 [default = 0];
  inline bool has_charid1() const;
  inline void clear_charid1();
  static const int kCharid1FieldNumber = 3;
  inline ::google::protobuf::uint64 charid1() const;
  inline void set_charid1(::google::protobuf::uint64 value);

  // optional uint64 charid2 = 4 [default = 0];
  inline bool has_charid2() const;
  inline void clear_charid2();
  static const int kCharid2FieldNumber = 4;
  inline ::google::protobuf::uint64 charid2() const;
  inline void set_charid2(::google::protobuf::uint64 value);

  // optional uint32 weddingtime = 5 [default = 0];
  inline bool has_weddingtime() const;
  inline void clear_weddingtime();
  static const int kWeddingtimeFieldNumber = 5;
  inline ::google::protobuf::uint32 weddingtime() const;
  inline void set_weddingtime(::google::protobuf::uint32 value);

  // optional uint32 photoidx = 6 [default = 0];
  inline bool has_photoidx() const;
  inline void clear_photoidx();
  static const int kPhotoidxFieldNumber = 6;
  inline ::google::protobuf::uint32 photoidx() const;
  inline void set_photoidx(::google::protobuf::uint32 value);

  // optional uint32 phototime = 7 [default = 0];
  inline bool has_phototime() const;
  inline void clear_phototime();
  static const int kPhototimeFieldNumber = 7;
  inline ::google::protobuf::uint32 phototime() const;
  inline void set_phototime(::google::protobuf::uint32 value);

  // optional string myname = 8;
  inline bool has_myname() const;
  inline void clear_myname();
  static const int kMynameFieldNumber = 8;
  inline const ::std::string& myname() const;
  inline void set_myname(const ::std::string& value);
  inline void set_myname(const char* value);
  inline void set_myname(const char* value, size_t size);
  inline ::std::string* mutable_myname();
  inline ::std::string* release_myname();
  inline void set_allocated_myname(::std::string* myname);

  // optional string partnername = 9;
  inline bool has_partnername() const;
  inline void clear_partnername();
  static const int kPartnernameFieldNumber = 9;
  inline const ::std::string& partnername() const;
  inline void set_partnername(const ::std::string& value);
  inline void set_partnername(const char* value);
  inline void set_partnername(const char* value, size_t size);
  inline ::std::string* mutable_partnername();
  inline ::std::string* release_partnername();
  inline void set_allocated_partnername(::std::string* partnername);

  // optional uint32 starttime = 10 [default = 0];
  inline bool has_starttime() const;
  inline void clear_starttime();
  static const int kStarttimeFieldNumber = 10;
  inline ::google::protobuf::uint32 starttime() const;
  inline void set_starttime(::google::protobuf::uint32 value);

  // optional uint32 endtime = 11 [default = 0];
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndtimeFieldNumber = 11;
  inline ::google::protobuf::uint32 endtime() const;
  inline void set_endtime(::google::protobuf::uint32 value);

  // optional bool notified = 12 [default = false];
  inline bool has_notified() const;
  inline void clear_notified();
  static const int kNotifiedFieldNumber = 12;
  inline bool notified() const;
  inline void set_notified(bool value);

  // @@protoc_insertion_point(class_scope:Cmd.WeddingData)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_zoneid();
  inline void clear_has_zoneid();
  inline void set_has_charid1();
  inline void clear_has_charid1();
  inline void set_has_charid2();
  inline void clear_has_charid2();
  inline void set_has_weddingtime();
  inline void clear_has_weddingtime();
  inline void set_has_photoidx();
  inline void clear_has_photoidx();
  inline void set_has_phototime();
  inline void clear_has_phototime();
  inline void set_has_myname();
  inline void clear_has_myname();
  inline void set_has_partnername();
  inline void clear_has_partnername();
  inline void set_has_starttime();
  inline void clear_has_starttime();
  inline void set_has_endtime();
  inline void clear_has_endtime();
  inline void set_has_notified();
  inline void clear_has_notified();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 charid1_;
  ::google::protobuf::uint32 zoneid_;
  ::google::protobuf::uint32 weddingtime_;
  ::google::protobuf::uint64 charid2_;
  ::google::protobuf::uint32 photoidx_;
  ::google::protobuf::uint32 phototime_;
  ::std::string* myname_;
  ::std::string* partnername_;
  ::google::protobuf::uint32 starttime_;
  ::google::protobuf::uint32 endtime_;
  bool notified_;
  friend void  protobuf_AddDesc_SceneItem_2eproto();
  friend void protobuf_AssignDesc_SceneItem_2eproto();
  friend void protobuf_ShutdownFile_SceneItem_2eproto();

  void InitAsDefaultInstance();
  static WeddingData* default_instance_;
};
// -------------------------------------------------------------------

class SenderData : public ::google::protobuf::Message {
 public:
  SenderData();
  virtual ~SenderData();

  SenderData(const SenderData& from);

  inline SenderData& operator=(const SenderData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SenderData& default_instance();

  void Swap(SenderData* other);

  // implements Message ----------------------------------------------

  SenderData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SenderData& from);
  void MergeFrom(const SenderData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:Cmd.SenderData)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 charid_;
  ::std::string* name_;
  friend void  protobuf_AddDesc_SceneItem_2eproto();
  friend void protobuf_AssignDesc_SceneItem_2eproto();
  friend void protobuf_ShutdownFile_SceneItem_2eproto();

  void InitAsDefaultInstance();
  static SenderData* default_instance_;
};
// -------------------------------------------------------------------

class ItemData : public ::google::protobuf::Message {
 public:
  ItemData();
  virtual ~ItemData();

  ItemData(const ItemData& from);

  inline ItemData& operator=(const ItemData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ItemData& default_instance();

  void Swap(ItemData* other);

  // implements Message ----------------------------------------------

  ItemData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ItemData& from);
  void MergeFrom(const ItemData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.ItemInfo base = 1;
  inline bool has_base() const;
  inline void clear_base();
  static const int kBaseFieldNumber = 1;
  inline const ::Cmd::ItemInfo& base() const;
  inline ::Cmd::ItemInfo* mutable_base();
  inline ::Cmd::ItemInfo* release_base();
  inline void set_allocated_base(::Cmd::ItemInfo* base);

  // optional bool equiped = 2 [default = false];
  inline bool has_equiped() const;
  inline void clear_equiped();
  static const int kEquipedFieldNumber = 2;
  inline bool equiped() const;
  inline void set_equiped(bool value);

  // optional uint32 battlepoint = 3 [default = 0];
  inline bool has_battlepoint() const;
  inline void clear_battlepoint();
  static const int kBattlepointFieldNumber = 3;
  inline ::google::protobuf::uint32 battlepoint() const;
  inline void set_battlepoint(::google::protobuf::uint32 value);

  // optional .Cmd.EquipData equip = 4;
  inline bool has_equip() const;
  inline void clear_equip();
  static const int kEquipFieldNumber = 4;
  inline const ::Cmd::EquipData& equip() const;
  inline ::Cmd::EquipData* mutable_equip();
  inline ::Cmd::EquipData* release_equip();
  inline void set_allocated_equip(::Cmd::EquipData* equip);

  // repeated .Cmd.CardData card = 5;
  inline int card_size() const;
  inline void clear_card();
  static const int kCardFieldNumber = 5;
  inline const ::Cmd::CardData& card(int index) const;
  inline ::Cmd::CardData* mutable_card(int index);
  inline ::Cmd::CardData* add_card();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::CardData >&
      card() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::CardData >*
      mutable_card();

  // optional .Cmd.EnchantData enchant = 6;
  inline bool has_enchant() const;
  inline void clear_enchant();
  static const int kEnchantFieldNumber = 6;
  inline const ::Cmd::EnchantData& enchant() const;
  inline ::Cmd::EnchantData* mutable_enchant();
  inline ::Cmd::EnchantData* release_enchant();
  inline void set_allocated_enchant(::Cmd::EnchantData* enchant);

  // optional .Cmd.EnchantData previewenchant = 7;
  inline bool has_previewenchant() const;
  inline void clear_previewenchant();
  static const int kPreviewenchantFieldNumber = 7;
  inline const ::Cmd::EnchantData& previewenchant() const;
  inline ::Cmd::EnchantData* mutable_previewenchant();
  inline ::Cmd::EnchantData* release_previewenchant();
  inline void set_allocated_previewenchant(::Cmd::EnchantData* previewenchant);

  // optional .Cmd.RefineData refine = 8;
  inline bool has_refine() const;
  inline void clear_refine();
  static const int kRefineFieldNumber = 8;
  inline const ::Cmd::RefineData& refine() const;
  inline ::Cmd::RefineData* mutable_refine();
  inline ::Cmd::RefineData* release_refine();
  inline void set_allocated_refine(::Cmd::RefineData* refine);

  // optional .Cmd.EggData egg = 9;
  inline bool has_egg() const;
  inline void clear_egg();
  static const int kEggFieldNumber = 9;
  inline const ::Cmd::EggData& egg() const;
  inline ::Cmd::EggData* mutable_egg();
  inline ::Cmd::EggData* release_egg();
  inline void set_allocated_egg(::Cmd::EggData* egg);

  // optional .Cmd.LoveLetterData letter = 10;
  inline bool has_letter() const;
  inline void clear_letter();
  static const int kLetterFieldNumber = 10;
  inline const ::Cmd::LoveLetterData& letter() const;
  inline ::Cmd::LoveLetterData* mutable_letter();
  inline ::Cmd::LoveLetterData* release_letter();
  inline void set_allocated_letter(::Cmd::LoveLetterData* letter);

  // optional .Cmd.CodeData code = 11;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 11;
  inline const ::Cmd::CodeData& code() const;
  inline ::Cmd::CodeData* mutable_code();
  inline ::Cmd::CodeData* release_code();
  inline void set_allocated_code(::Cmd::CodeData* code);

  // optional .Cmd.WeddingData wedding = 12;
  inline bool has_wedding() const;
  inline void clear_wedding();
  static const int kWeddingFieldNumber = 12;
  inline const ::Cmd::WeddingData& wedding() const;
  inline ::Cmd::WeddingData* mutable_wedding();
  inline ::Cmd::WeddingData* release_wedding();
  inline void set_allocated_wedding(::Cmd::WeddingData* wedding);

  // optional .Cmd.SenderData sender = 13;
  inline bool has_sender() const;
  inline void clear_sender();
  static const int kSenderFieldNumber = 13;
  inline const ::Cmd::SenderData& sender() const;
  inline ::Cmd::SenderData* mutable_sender();
  inline ::Cmd::SenderData* release_sender();
  inline void set_allocated_sender(::Cmd::SenderData* sender);

  // @@protoc_insertion_point(class_scope:Cmd.ItemData)
 private:
  inline void set_has_base();
  inline void clear_has_base();
  inline void set_has_equiped();
  inline void clear_has_equiped();
  inline void set_has_battlepoint();
  inline void clear_has_battlepoint();
  inline void set_has_equip();
  inline void clear_has_equip();
  inline void set_has_enchant();
  inline void clear_has_enchant();
  inline void set_has_previewenchant();
  inline void clear_has_previewenchant();
  inline void set_has_refine();
  inline void clear_has_refine();
  inline void set_has_egg();
  inline void clear_has_egg();
  inline void set_has_letter();
  inline void clear_has_letter();
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_wedding();
  inline void clear_has_wedding();
  inline void set_has_sender();
  inline void clear_has_sender();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Cmd::ItemInfo* base_;
  bool equiped_;
  ::google::protobuf::uint32 battlepoint_;
  ::Cmd::EquipData* equip_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::CardData > card_;
  ::Cmd::EnchantData* enchant_;
  ::Cmd::EnchantData* previewenchant_;
  ::Cmd::RefineData* refine_;
  ::Cmd::EggData* egg_;
  ::Cmd::LoveLetterData* letter_;
  ::Cmd::CodeData* code_;
  ::Cmd::WeddingData* wedding_;
  ::Cmd::SenderData* sender_;
  friend void  protobuf_AddDesc_SceneItem_2eproto();
  friend void protobuf_AssignDesc_SceneItem_2eproto();
  friend void protobuf_ShutdownFile_SceneItem_2eproto();

  void InitAsDefaultInstance();
  static ItemData* default_instance_;
};
// -------------------------------------------------------------------

class PackageItem : public ::google::protobuf::Message {
 public:
  PackageItem();
  virtual ~PackageItem();

  PackageItem(const PackageItem& from);

  inline PackageItem& operator=(const PackageItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PackageItem& default_instance();

  void Swap(PackageItem* other);

  // implements Message ----------------------------------------------

  PackageItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PackageItem& from);
  void MergeFrom(const PackageItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_PACKAGEITEM];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::ItemParam param() const;
  inline void set_param(::Cmd::ItemParam value);

  // optional .Cmd.EPackType type = 3 [default = EPACKTYPE_MIN];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::Cmd::EPackType type() const;
  inline void set_type(::Cmd::EPackType value);

  // repeated .Cmd.ItemData data = 4;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 4;
  inline const ::Cmd::ItemData& data(int index) const;
  inline ::Cmd::ItemData* mutable_data(int index);
  inline ::Cmd::ItemData* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ItemData >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::ItemData >*
      mutable_data();

  // optional uint32 maxslot = 5 [default = 0];
  inline bool has_maxslot() const;
  inline void clear_maxslot();
  static const int kMaxslotFieldNumber = 5;
  inline ::google::protobuf::uint32 maxslot() const;
  inline void set_maxslot(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.PackageItem)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_maxslot();
  inline void clear_has_maxslot();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::ItemData > data_;
  int type_;
  ::google::protobuf::uint32 maxslot_;
  friend void  protobuf_AddDesc_SceneItem_2eproto();
  friend void protobuf_AssignDesc_SceneItem_2eproto();
  friend void protobuf_ShutdownFile_SceneItem_2eproto();

  void InitAsDefaultInstance();
  static PackageItem* default_instance_;
};
// -------------------------------------------------------------------

class PackageUpdate : public ::google::protobuf::Message {
 public:
  PackageUpdate();
  virtual ~PackageUpdate();

  PackageUpdate(const PackageUpdate& from);

  inline PackageUpdate& operator=(const PackageUpdate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PackageUpdate& default_instance();

  void Swap(PackageUpdate* other);

  // implements Message ----------------------------------------------

  PackageUpdate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PackageUpdate& from);
  void MergeFrom(const PackageUpdate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_PACKAGEUPDATE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::ItemParam param() const;
  inline void set_param(::Cmd::ItemParam value);

  // optional .Cmd.EPackType type = 3 [default = EPACKTYPE_MIN];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::Cmd::EPackType type() const;
  inline void set_type(::Cmd::EPackType value);

  // repeated .Cmd.ItemData updateItems = 4;
  inline int updateitems_size() const;
  inline void clear_updateitems();
  static const int kUpdateItemsFieldNumber = 4;
  inline const ::Cmd::ItemData& updateitems(int index) const;
  inline ::Cmd::ItemData* mutable_updateitems(int index);
  inline ::Cmd::ItemData* add_updateitems();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ItemData >&
      updateitems() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::ItemData >*
      mutable_updateitems();

  // repeated .Cmd.ItemData delItems = 5;
  inline int delitems_size() const;
  inline void clear_delitems();
  static const int kDelItemsFieldNumber = 5;
  inline const ::Cmd::ItemData& delitems(int index) const;
  inline ::Cmd::ItemData* mutable_delitems(int index);
  inline ::Cmd::ItemData* add_delitems();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ItemData >&
      delitems() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::ItemData >*
      mutable_delitems();

  // @@protoc_insertion_point(class_scope:Cmd.PackageUpdate)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::ItemData > updateitems_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::ItemData > delitems_;
  int type_;
  friend void  protobuf_AddDesc_SceneItem_2eproto();
  friend void protobuf_AssignDesc_SceneItem_2eproto();
  friend void protobuf_ShutdownFile_SceneItem_2eproto();

  void InitAsDefaultInstance();
  static PackageUpdate* default_instance_;
};
// -------------------------------------------------------------------

class ItemUse : public ::google::protobuf::Message {
 public:
  ItemUse();
  virtual ~ItemUse();

  ItemUse(const ItemUse& from);

  inline ItemUse& operator=(const ItemUse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ItemUse& default_instance();

  void Swap(ItemUse* other);

  // implements Message ----------------------------------------------

  ItemUse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ItemUse& from);
  void MergeFrom(const ItemUse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_ITEMUSE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::ItemParam param() const;
  inline void set_param(::Cmd::ItemParam value);

  // optional string itemguid = 3;
  inline bool has_itemguid() const;
  inline void clear_itemguid();
  static const int kItemguidFieldNumber = 3;
  inline const ::std::string& itemguid() const;
  inline void set_itemguid(const ::std::string& value);
  inline void set_itemguid(const char* value);
  inline void set_itemguid(const char* value, size_t size);
  inline ::std::string* mutable_itemguid();
  inline ::std::string* release_itemguid();
  inline void set_allocated_itemguid(::std::string* itemguid);

  // repeated uint64 targets = 4;
  inline int targets_size() const;
  inline void clear_targets();
  static const int kTargetsFieldNumber = 4;
  inline ::google::protobuf::uint64 targets(int index) const;
  inline void set_targets(int index, ::google::protobuf::uint64 value);
  inline void add_targets(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      targets() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_targets();

  // optional uint32 count = 5;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 5;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.ItemUse)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_itemguid();
  inline void clear_has_itemguid();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::std::string* itemguid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > targets_;
  ::google::protobuf::uint32 count_;
  friend void  protobuf_AddDesc_SceneItem_2eproto();
  friend void protobuf_AssignDesc_SceneItem_2eproto();
  friend void protobuf_ShutdownFile_SceneItem_2eproto();

  void InitAsDefaultInstance();
  static ItemUse* default_instance_;
};
// -------------------------------------------------------------------

class SortInfo : public ::google::protobuf::Message {
 public:
  SortInfo();
  virtual ~SortInfo();

  SortInfo(const SortInfo& from);

  inline SortInfo& operator=(const SortInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SortInfo& default_instance();

  void Swap(SortInfo* other);

  // implements Message ----------------------------------------------

  SortInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SortInfo& from);
  void MergeFrom(const SortInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string guid = 1;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline const ::std::string& guid() const;
  inline void set_guid(const ::std::string& value);
  inline void set_guid(const char* value);
  inline void set_guid(const char* value, size_t size);
  inline ::std::string* mutable_guid();
  inline ::std::string* release_guid();
  inline void set_allocated_guid(::std::string* guid);

  // optional uint32 index = 2 [default = 0];
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.SortInfo)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_index();
  inline void clear_has_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* guid_;
  ::google::protobuf::uint32 index_;
  friend void  protobuf_AddDesc_SceneItem_2eproto();
  friend void protobuf_AssignDesc_SceneItem_2eproto();
  friend void protobuf_ShutdownFile_SceneItem_2eproto();

  void InitAsDefaultInstance();
  static SortInfo* default_instance_;
};
// -------------------------------------------------------------------

class PackageSort : public ::google::protobuf::Message {
 public:
  PackageSort();
  virtual ~PackageSort();

  PackageSort(const PackageSort& from);

  inline PackageSort& operator=(const PackageSort& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PackageSort& default_instance();

  void Swap(PackageSort* other);

  // implements Message ----------------------------------------------

  PackageSort* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PackageSort& from);
  void MergeFrom(const PackageSort& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_PACKAGESORT];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::ItemParam param() const;
  inline void set_param(::Cmd::ItemParam value);

  // optional .Cmd.EPackType type = 3 [default = EPACKTYPE_MIN];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::Cmd::EPackType type() const;
  inline void set_type(::Cmd::EPackType value);

  // repeated .Cmd.SortInfo item = 4;
  inline int item_size() const;
  inline void clear_item();
  static const int kItemFieldNumber = 4;
  inline const ::Cmd::SortInfo& item(int index) const;
  inline ::Cmd::SortInfo* mutable_item(int index);
  inline ::Cmd::SortInfo* add_item();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::SortInfo >&
      item() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::SortInfo >*
      mutable_item();

  // @@protoc_insertion_point(class_scope:Cmd.PackageSort)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::SortInfo > item_;
  int type_;
  friend void  protobuf_AddDesc_SceneItem_2eproto();
  friend void protobuf_AssignDesc_SceneItem_2eproto();
  friend void protobuf_ShutdownFile_SceneItem_2eproto();

  void InitAsDefaultInstance();
  static PackageSort* default_instance_;
};
// -------------------------------------------------------------------

class Equip : public ::google::protobuf::Message {
 public:
  Equip();
  virtual ~Equip();

  Equip(const Equip& from);

  inline Equip& operator=(const Equip& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Equip& default_instance();

  void Swap(Equip* other);

  // implements Message ----------------------------------------------

  Equip* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Equip& from);
  void MergeFrom(const Equip& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_EQUIP];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::ItemParam param() const;
  inline void set_param(::Cmd::ItemParam value);

  // optional .Cmd.EEquipOper oper = 3 [default = EEQUIPOPER_MIN];
  inline bool has_oper() const;
  inline void clear_oper();
  static const int kOperFieldNumber = 3;
  inline ::Cmd::EEquipOper oper() const;
  inline void set_oper(::Cmd::EEquipOper value);

  // optional .Cmd.EEquipPos pos = 4 [default = EEQUIPPOS_MIN];
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 4;
  inline ::Cmd::EEquipPos pos() const;
  inline void set_pos(::Cmd::EEquipPos value);

  // optional string guid = 5;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 5;
  inline const ::std::string& guid() const;
  inline void set_guid(const ::std::string& value);
  inline void set_guid(const char* value);
  inline void set_guid(const char* value, size_t size);
  inline ::std::string* mutable_guid();
  inline ::std::string* release_guid();
  inline void set_allocated_guid(::std::string* guid);

  // optional bool transfer = 6 [default = false];
  inline bool has_transfer() const;
  inline void clear_transfer();
  static const int kTransferFieldNumber = 6;
  inline bool transfer() const;
  inline void set_transfer(bool value);

  // optional uint32 count = 7 [default = 0];
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 7;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.Equip)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_oper();
  inline void clear_has_oper();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_transfer();
  inline void clear_has_transfer();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  int oper_;
  int pos_;
  ::std::string* guid_;
  bool transfer_;
  ::google::protobuf::uint32 count_;
  friend void  protobuf_AddDesc_SceneItem_2eproto();
  friend void protobuf_AssignDesc_SceneItem_2eproto();
  friend void protobuf_ShutdownFile_SceneItem_2eproto();

  void InitAsDefaultInstance();
  static Equip* default_instance_;
};
// -------------------------------------------------------------------

class SItem : public ::google::protobuf::Message {
 public:
  SItem();
  virtual ~SItem();

  SItem(const SItem& from);

  inline SItem& operator=(const SItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SItem& default_instance();

  void Swap(SItem* other);

  // implements Message ----------------------------------------------

  SItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SItem& from);
  void MergeFrom(const SItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string guid = 1;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline const ::std::string& guid() const;
  inline void set_guid(const ::std::string& value);
  inline void set_guid(const char* value);
  inline void set_guid(const char* value, size_t size);
  inline ::std::string* mutable_guid();
  inline ::std::string* release_guid();
  inline void set_allocated_guid(::std::string* guid);

  // optional uint32 count = 2 [default = 0];
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.SItem)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* guid_;
  ::google::protobuf::uint32 count_;
  friend void  protobuf_AddDesc_SceneItem_2eproto();
  friend void protobuf_AssignDesc_SceneItem_2eproto();
  friend void protobuf_ShutdownFile_SceneItem_2eproto();

  void InitAsDefaultInstance();
  static SItem* default_instance_;
};
// -------------------------------------------------------------------

class SellItem : public ::google::protobuf::Message {
 public:
  SellItem();
  virtual ~SellItem();

  SellItem(const SellItem& from);

  inline SellItem& operator=(const SellItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SellItem& default_instance();

  void Swap(SellItem* other);

  // implements Message ----------------------------------------------

  SellItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SellItem& from);
  void MergeFrom(const SellItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_SELLITEM];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::ItemParam param() const;
  inline void set_param(::Cmd::ItemParam value);

  // optional uint64 npcid = 3 [default = 0];
  inline bool has_npcid() const;
  inline void clear_npcid();
  static const int kNpcidFieldNumber = 3;
  inline ::google::protobuf::uint64 npcid() const;
  inline void set_npcid(::google::protobuf::uint64 value);

  // repeated .Cmd.SItem items = 4;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 4;
  inline const ::Cmd::SItem& items(int index) const;
  inline ::Cmd::SItem* mutable_items(int index);
  inline ::Cmd::SItem* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::SItem >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::SItem >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:Cmd.SellItem)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_npcid();
  inline void clear_has_npcid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 npcid_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::SItem > items_;
  friend void  protobuf_AddDesc_SceneItem_2eproto();
  friend void protobuf_AssignDesc_SceneItem_2eproto();
  friend void protobuf_ShutdownFile_SceneItem_2eproto();

  void InitAsDefaultInstance();
  static SellItem* default_instance_;
};
// -------------------------------------------------------------------

class EquipStrength : public ::google::protobuf::Message {
 public:
  EquipStrength();
  virtual ~EquipStrength();

  EquipStrength(const EquipStrength& from);

  inline EquipStrength& operator=(const EquipStrength& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipStrength& default_instance();

  void Swap(EquipStrength* other);

  // implements Message ----------------------------------------------

  EquipStrength* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipStrength& from);
  void MergeFrom(const EquipStrength& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_EQUIPSTRENGTH];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::ItemParam param() const;
  inline void set_param(::Cmd::ItemParam value);

  // optional string guid = 3;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 3;
  inline const ::std::string& guid() const;
  inline void set_guid(const ::std::string& value);
  inline void set_guid(const char* value);
  inline void set_guid(const char* value, size_t size);
  inline ::std::string* mutable_guid();
  inline ::std::string* release_guid();
  inline void set_allocated_guid(::std::string* guid);

  // optional uint32 destcount = 4 [default = 0];
  inline bool has_destcount() const;
  inline void clear_destcount();
  static const int kDestcountFieldNumber = 4;
  inline ::google::protobuf::uint32 destcount() const;
  inline void set_destcount(::google::protobuf::uint32 value);

  // optional uint32 count = 5 [default = 0];
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 5;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // optional uint32 cricount = 6 [default = 0];
  inline bool has_cricount() const;
  inline void clear_cricount();
  static const int kCricountFieldNumber = 6;
  inline ::google::protobuf::uint32 cricount() const;
  inline void set_cricount(::google::protobuf::uint32 value);

  // optional uint32 oldlv = 7 [default = 0];
  inline bool has_oldlv() const;
  inline void clear_oldlv();
  static const int kOldlvFieldNumber = 7;
  inline ::google::protobuf::uint32 oldlv() const;
  inline void set_oldlv(::google::protobuf::uint32 value);

  // optional uint32 newlv = 8 [default = 0];
  inline bool has_newlv() const;
  inline void clear_newlv();
  static const int kNewlvFieldNumber = 8;
  inline ::google::protobuf::uint32 newlv() const;
  inline void set_newlv(::google::protobuf::uint32 value);

  // optional .Cmd.EStrengthResult result = 9 [default = ESTRENGTHRESULT_MIN];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 9;
  inline ::Cmd::EStrengthResult result() const;
  inline void set_result(::Cmd::EStrengthResult value);

  // optional .Cmd.EStrengthType type = 10 [default = ESTRENGTHTYPE_MIN];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 10;
  inline ::Cmd::EStrengthType type() const;
  inline void set_type(::Cmd::EStrengthType value);

  // @@protoc_insertion_point(class_scope:Cmd.EquipStrength)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_destcount();
  inline void clear_has_destcount();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_cricount();
  inline void clear_has_cricount();
  inline void set_has_oldlv();
  inline void clear_has_oldlv();
  inline void set_has_newlv();
  inline void clear_has_newlv();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::std::string* guid_;
  ::google::protobuf::uint32 destcount_;
  ::google::protobuf::uint32 count_;
  ::google::protobuf::uint32 cricount_;
  ::google::protobuf::uint32 oldlv_;
  ::google::protobuf::uint32 newlv_;
  int result_;
  int type_;
  friend void  protobuf_AddDesc_SceneItem_2eproto();
  friend void protobuf_AssignDesc_SceneItem_2eproto();
  friend void protobuf_ShutdownFile_SceneItem_2eproto();

  void InitAsDefaultInstance();
  static EquipStrength* default_instance_;
};
// -------------------------------------------------------------------

class Produce : public ::google::protobuf::Message {
 public:
  Produce();
  virtual ~Produce();

  Produce(const Produce& from);

  inline Produce& operator=(const Produce& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Produce& default_instance();

  void Swap(Produce* other);

  // implements Message ----------------------------------------------

  Produce* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Produce& from);
  void MergeFrom(const Produce& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_PRODUCE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::ItemParam param() const;
  inline void set_param(::Cmd::ItemParam value);

  // optional .Cmd.EProduceType type = 3 [default = EPRODUCETYPE_MIN];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::Cmd::EProduceType type() const;
  inline void set_type(::Cmd::EProduceType value);

  // optional uint32 composeid = 4 [default = 0];
  inline bool has_composeid() const;
  inline void clear_composeid();
  static const int kComposeidFieldNumber = 4;
  inline ::google::protobuf::uint32 composeid() const;
  inline void set_composeid(::google::protobuf::uint32 value);

  // optional uint64 npcid = 5 [default = 0];
  inline bool has_npcid() const;
  inline void clear_npcid();
  static const int kNpcidFieldNumber = 5;
  inline ::google::protobuf::uint64 npcid() const;
  inline void set_npcid(::google::protobuf::uint64 value);

  // optional uint32 itemid = 6 [default = 0];
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 6;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint32 count = 7 [default = 1];
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 7;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // optional bool qucikproduce = 8 [default = false];
  inline bool has_qucikproduce() const;
  inline void clear_qucikproduce();
  static const int kQucikproduceFieldNumber = 8;
  inline bool qucikproduce() const;
  inline void set_qucikproduce(bool value);

  // @@protoc_insertion_point(class_scope:Cmd.Produce)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_composeid();
  inline void clear_has_composeid();
  inline void set_has_npcid();
  inline void clear_has_npcid();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_qucikproduce();
  inline void clear_has_qucikproduce();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  int type_;
  ::google::protobuf::uint32 composeid_;
  ::google::protobuf::uint64 npcid_;
  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 count_;
  bool qucikproduce_;
  friend void  protobuf_AddDesc_SceneItem_2eproto();
  friend void protobuf_AssignDesc_SceneItem_2eproto();
  friend void protobuf_ShutdownFile_SceneItem_2eproto();

  void InitAsDefaultInstance();
  static Produce* default_instance_;
};
// -------------------------------------------------------------------

class ProduceDone : public ::google::protobuf::Message {
 public:
  ProduceDone();
  virtual ~ProduceDone();

  ProduceDone(const ProduceDone& from);

  inline ProduceDone& operator=(const ProduceDone& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProduceDone& default_instance();

  void Swap(ProduceDone* other);

  // implements Message ----------------------------------------------

  ProduceDone* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProduceDone& from);
  void MergeFrom(const ProduceDone& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_PRODUCEDONE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::ItemParam param() const;
  inline void set_param(::Cmd::ItemParam value);

  // optional .Cmd.EProduceType type = 3 [default = EPRODUCETYPE_MIN];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::Cmd::EProduceType type() const;
  inline void set_type(::Cmd::EProduceType value);

  // optional uint64 npcid = 4 [default = 0];
  inline bool has_npcid() const;
  inline void clear_npcid();
  static const int kNpcidFieldNumber = 4;
  inline ::google::protobuf::uint64 npcid() const;
  inline void set_npcid(::google::protobuf::uint64 value);

  // optional uint64 charid = 5 [default = 0];
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 5;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional uint32 delay = 6 [default = 0];
  inline bool has_delay() const;
  inline void clear_delay();
  static const int kDelayFieldNumber = 6;
  inline ::google::protobuf::uint32 delay() const;
  inline void set_delay(::google::protobuf::uint32 value);

  // optional uint32 itemid = 7 [default = 0];
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 7;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.ProduceDone)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_npcid();
  inline void clear_has_npcid();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_delay();
  inline void clear_has_delay();
  inline void set_has_itemid();
  inline void clear_has_itemid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 npcid_;
  int type_;
  ::google::protobuf::uint32 delay_;
  ::google::protobuf::uint64 charid_;
  ::google::protobuf::uint32 itemid_;
  friend void  protobuf_AddDesc_SceneItem_2eproto();
  friend void protobuf_AssignDesc_SceneItem_2eproto();
  friend void protobuf_ShutdownFile_SceneItem_2eproto();

  void InitAsDefaultInstance();
  static ProduceDone* default_instance_;
};
// -------------------------------------------------------------------

class EquipRefine : public ::google::protobuf::Message {
 public:
  EquipRefine();
  virtual ~EquipRefine();

  EquipRefine(const EquipRefine& from);

  inline EquipRefine& operator=(const EquipRefine& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipRefine& default_instance();

  void Swap(EquipRefine* other);

  // implements Message ----------------------------------------------

  EquipRefine* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipRefine& from);
  void MergeFrom(const EquipRefine& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_REFINE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::ItemParam param() const;
  inline void set_param(::Cmd::ItemParam value);

  // optional string guid = 3;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 3;
  inline const ::std::string& guid() const;
  inline void set_guid(const ::std::string& value);
  inline void set_guid(const char* value);
  inline void set_guid(const char* value, size_t size);
  inline ::std::string* mutable_guid();
  inline ::std::string* release_guid();
  inline void set_allocated_guid(::std::string* guid);

  // optional uint32 composeid = 4 [default = 0];
  inline bool has_composeid() const;
  inline void clear_composeid();
  static const int kComposeidFieldNumber = 4;
  inline ::google::protobuf::uint32 composeid() const;
  inline void set_composeid(::google::protobuf::uint32 value);

  // optional uint32 refinelv = 5 [default = 0];
  inline bool has_refinelv() const;
  inline void clear_refinelv();
  static const int kRefinelvFieldNumber = 5;
  inline ::google::protobuf::uint32 refinelv() const;
  inline void set_refinelv(::google::protobuf::uint32 value);

  // optional .Cmd.ERefineResult eresult = 6 [default = EREFINERESULT_MIN];
  inline bool has_eresult() const;
  inline void clear_eresult();
  static const int kEresultFieldNumber = 6;
  inline ::Cmd::ERefineResult eresult() const;
  inline void set_eresult(::Cmd::ERefineResult value);

  // optional uint64 npcid = 7 [default = 0];
  inline bool has_npcid() const;
  inline void clear_npcid();
  static const int kNpcidFieldNumber = 7;
  inline ::google::protobuf::uint64 npcid() const;
  inline void set_npcid(::google::protobuf::uint64 value);

  // optional bool saferefine = 8 [default = false];
  inline bool has_saferefine() const;
  inline void clear_saferefine();
  static const int kSaferefineFieldNumber = 8;
  inline bool saferefine() const;
  inline void set_saferefine(bool value);

  // repeated string itemguid = 9;
  inline int itemguid_size() const;
  inline void clear_itemguid();
  static const int kItemguidFieldNumber = 9;
  inline const ::std::string& itemguid(int index) const;
  inline ::std::string* mutable_itemguid(int index);
  inline void set_itemguid(int index, const ::std::string& value);
  inline void set_itemguid(int index, const char* value);
  inline void set_itemguid(int index, const char* value, size_t size);
  inline ::std::string* add_itemguid();
  inline void add_itemguid(const ::std::string& value);
  inline void add_itemguid(const char* value);
  inline void add_itemguid(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& itemguid() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_itemguid();

  // @@protoc_insertion_point(class_scope:Cmd.EquipRefine)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_composeid();
  inline void clear_has_composeid();
  inline void set_has_refinelv();
  inline void clear_has_refinelv();
  inline void set_has_eresult();
  inline void clear_has_eresult();
  inline void set_has_npcid();
  inline void clear_has_npcid();
  inline void set_has_saferefine();
  inline void clear_has_saferefine();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::std::string* guid_;
  ::google::protobuf::uint32 composeid_;
  ::google::protobuf::uint32 refinelv_;
  ::google::protobuf::uint64 npcid_;
  int eresult_;
  bool saferefine_;
  ::google::protobuf::RepeatedPtrField< ::std::string> itemguid_;
  friend void  protobuf_AddDesc_SceneItem_2eproto();
  friend void protobuf_AssignDesc_SceneItem_2eproto();
  friend void protobuf_ShutdownFile_SceneItem_2eproto();

  void InitAsDefaultInstance();
  static EquipRefine* default_instance_;
};
// -------------------------------------------------------------------

class EquipDecompose : public ::google::protobuf::Message {
 public:
  EquipDecompose();
  virtual ~EquipDecompose();

  EquipDecompose(const EquipDecompose& from);

  inline EquipDecompose& operator=(const EquipDecompose& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipDecompose& default_instance();

  void Swap(EquipDecompose* other);

  // implements Message ----------------------------------------------

  EquipDecompose* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipDecompose& from);
  void MergeFrom(const EquipDecompose& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_DECOMPOSE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::ItemParam param() const;
  inline void set_param(::Cmd::ItemParam value);

  // optional string guid = 3;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 3;
  inline const ::std::string& guid() const;
  inline void set_guid(const ::std::string& value);
  inline void set_guid(const char* value);
  inline void set_guid(const char* value, size_t size);
  inline ::std::string* mutable_guid();
  inline ::std::string* release_guid();
  inline void set_allocated_guid(::std::string* guid);

  // optional .Cmd.EDecomposeResult result = 4 [default = EDECOMPOSERESULT_MIN];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 4;
  inline ::Cmd::EDecomposeResult result() const;
  inline void set_result(::Cmd::EDecomposeResult value);

  // repeated .Cmd.ItemInfo items = 5;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 5;
  inline const ::Cmd::ItemInfo& items(int index) const;
  inline ::Cmd::ItemInfo* mutable_items(int index);
  inline ::Cmd::ItemInfo* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ItemInfo >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::ItemInfo >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:Cmd.EquipDecompose)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::std::string* guid_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::ItemInfo > items_;
  int result_;
  friend void  protobuf_AddDesc_SceneItem_2eproto();
  friend void protobuf_AssignDesc_SceneItem_2eproto();
  friend void protobuf_ShutdownFile_SceneItem_2eproto();

  void InitAsDefaultInstance();
  static EquipDecompose* default_instance_;
};
// -------------------------------------------------------------------

class DecomposeResult : public ::google::protobuf::Message {
 public:
  DecomposeResult();
  virtual ~DecomposeResult();

  DecomposeResult(const DecomposeResult& from);

  inline DecomposeResult& operator=(const DecomposeResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DecomposeResult& default_instance();

  void Swap(DecomposeResult* other);

  // implements Message ----------------------------------------------

  DecomposeResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DecomposeResult& from);
  void MergeFrom(const DecomposeResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.ItemInfo item = 1;
  inline bool has_item() const;
  inline void clear_item();
  static const int kItemFieldNumber = 1;
  inline const ::Cmd::ItemInfo& item() const;
  inline ::Cmd::ItemInfo* mutable_item();
  inline ::Cmd::ItemInfo* release_item();
  inline void set_allocated_item(::Cmd::ItemInfo* item);

  // optional uint32 rate = 2 [default = 0];
  inline bool has_rate() const;
  inline void clear_rate();
  static const int kRateFieldNumber = 2;
  inline ::google::protobuf::uint32 rate() const;
  inline void set_rate(::google::protobuf::uint32 value);

  // optional uint32 min_count = 3 [default = 0];
  inline bool has_min_count() const;
  inline void clear_min_count();
  static const int kMinCountFieldNumber = 3;
  inline ::google::protobuf::uint32 min_count() const;
  inline void set_min_count(::google::protobuf::uint32 value);

  // optional uint32 max_count = 4 [default = 0];
  inline bool has_max_count() const;
  inline void clear_max_count();
  static const int kMaxCountFieldNumber = 4;
  inline ::google::protobuf::uint32 max_count() const;
  inline void set_max_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.DecomposeResult)
 private:
  inline void set_has_item();
  inline void clear_has_item();
  inline void set_has_rate();
  inline void clear_has_rate();
  inline void set_has_min_count();
  inline void clear_has_min_count();
  inline void set_has_max_count();
  inline void clear_has_max_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Cmd::ItemInfo* item_;
  ::google::protobuf::uint32 rate_;
  ::google::protobuf::uint32 min_count_;
  ::google::protobuf::uint32 max_count_;
  friend void  protobuf_AddDesc_SceneItem_2eproto();
  friend void protobuf_AssignDesc_SceneItem_2eproto();
  friend void protobuf_ShutdownFile_SceneItem_2eproto();

  void InitAsDefaultInstance();
  static DecomposeResult* default_instance_;
};
// -------------------------------------------------------------------

class QueryDecomposeResultItemCmd : public ::google::protobuf::Message {
 public:
  QueryDecomposeResultItemCmd();
  virtual ~QueryDecomposeResultItemCmd();

  QueryDecomposeResultItemCmd(const QueryDecomposeResultItemCmd& from);

  inline QueryDecomposeResultItemCmd& operator=(const QueryDecomposeResultItemCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryDecomposeResultItemCmd& default_instance();

  void Swap(QueryDecomposeResultItemCmd* other);

  // implements Message ----------------------------------------------

  QueryDecomposeResultItemCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryDecomposeResultItemCmd& from);
  void MergeFrom(const QueryDecomposeResultItemCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_QUERYDECOMPOSERESULT];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::ItemParam param() const;
  inline void set_param(::Cmd::ItemParam value);

  // optional string guid = 3;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 3;
  inline const ::std::string& guid() const;
  inline void set_guid(const ::std::string& value);
  inline void set_guid(const char* value);
  inline void set_guid(const char* value, size_t size);
  inline ::std::string* mutable_guid();
  inline ::std::string* release_guid();
  inline void set_allocated_guid(::std::string* guid);

  // repeated .Cmd.DecomposeResult results = 4;
  inline int results_size() const;
  inline void clear_results();
  static const int kResultsFieldNumber = 4;
  inline const ::Cmd::DecomposeResult& results(int index) const;
  inline ::Cmd::DecomposeResult* mutable_results(int index);
  inline ::Cmd::DecomposeResult* add_results();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::DecomposeResult >&
      results() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::DecomposeResult >*
      mutable_results();

  // optional uint32 sell_price = 5 [default = 0];
  inline bool has_sell_price() const;
  inline void clear_sell_price();
  static const int kSellPriceFieldNumber = 5;
  inline ::google::protobuf::uint32 sell_price() const;
  inline void set_sell_price(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.QueryDecomposeResultItemCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_sell_price();
  inline void clear_has_sell_price();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::std::string* guid_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::DecomposeResult > results_;
  ::google::protobuf::uint32 sell_price_;
  friend void  protobuf_AddDesc_SceneItem_2eproto();
  friend void protobuf_AssignDesc_SceneItem_2eproto();
  friend void protobuf_ShutdownFile_SceneItem_2eproto();

  void InitAsDefaultInstance();
  static QueryDecomposeResultItemCmd* default_instance_;
};
// -------------------------------------------------------------------

class QueryEquipData : public ::google::protobuf::Message {
 public:
  QueryEquipData();
  virtual ~QueryEquipData();

  QueryEquipData(const QueryEquipData& from);

  inline QueryEquipData& operator=(const QueryEquipData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryEquipData& default_instance();

  void Swap(QueryEquipData* other);

  // implements Message ----------------------------------------------

  QueryEquipData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryEquipData& from);
  void MergeFrom(const QueryEquipData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_QUERYEQUIPDATA];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::ItemParam param() const;
  inline void set_param(::Cmd::ItemParam value);

  // optional string guid = 3;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 3;
  inline const ::std::string& guid() const;
  inline void set_guid(const ::std::string& value);
  inline void set_guid(const char* value);
  inline void set_guid(const char* value, size_t size);
  inline ::std::string* mutable_guid();
  inline ::std::string* release_guid();
  inline void set_allocated_guid(::std::string* guid);

  // optional .Cmd.EquipData data = 4;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 4;
  inline const ::Cmd::EquipData& data() const;
  inline ::Cmd::EquipData* mutable_data();
  inline ::Cmd::EquipData* release_data();
  inline void set_allocated_data(::Cmd::EquipData* data);

  // @@protoc_insertion_point(class_scope:Cmd.QueryEquipData)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::std::string* guid_;
  ::Cmd::EquipData* data_;
  friend void  protobuf_AddDesc_SceneItem_2eproto();
  friend void protobuf_AssignDesc_SceneItem_2eproto();
  friend void protobuf_ShutdownFile_SceneItem_2eproto();

  void InitAsDefaultInstance();
  static QueryEquipData* default_instance_;
};
// -------------------------------------------------------------------

class BrowsePackage : public ::google::protobuf::Message {
 public:
  BrowsePackage();
  virtual ~BrowsePackage();

  BrowsePackage(const BrowsePackage& from);

  inline BrowsePackage& operator=(const BrowsePackage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BrowsePackage& default_instance();

  void Swap(BrowsePackage* other);

  // implements Message ----------------------------------------------

  BrowsePackage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BrowsePackage& from);
  void MergeFrom(const BrowsePackage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_BROWSEPACK];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::ItemParam param() const;
  inline void set_param(::Cmd::ItemParam value);

  // optional .Cmd.EPackType type = 3 [default = EPACKTYPE_MIN];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::Cmd::EPackType type() const;
  inline void set_type(::Cmd::EPackType value);

  // @@protoc_insertion_point(class_scope:Cmd.BrowsePackage)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  int type_;
  friend void  protobuf_AddDesc_SceneItem_2eproto();
  friend void protobuf_AssignDesc_SceneItem_2eproto();
  friend void protobuf_ShutdownFile_SceneItem_2eproto();

  void InitAsDefaultInstance();
  static BrowsePackage* default_instance_;
};
// -------------------------------------------------------------------

class EquipCard : public ::google::protobuf::Message {
 public:
  EquipCard();
  virtual ~EquipCard();

  EquipCard(const EquipCard& from);

  inline EquipCard& operator=(const EquipCard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipCard& default_instance();

  void Swap(EquipCard* other);

  // implements Message ----------------------------------------------

  EquipCard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipCard& from);
  void MergeFrom(const EquipCard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_EQUIPCARD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::ItemParam param() const;
  inline void set_param(::Cmd::ItemParam value);

  // optional .Cmd.ECardOper oper = 3 [default = ECARDOPER_MIN];
  inline bool has_oper() const;
  inline void clear_oper();
  static const int kOperFieldNumber = 3;
  inline ::Cmd::ECardOper oper() const;
  inline void set_oper(::Cmd::ECardOper value);

  // optional string cardguid = 4;
  inline bool has_cardguid() const;
  inline void clear_cardguid();
  static const int kCardguidFieldNumber = 4;
  inline const ::std::string& cardguid() const;
  inline void set_cardguid(const ::std::string& value);
  inline void set_cardguid(const char* value);
  inline void set_cardguid(const char* value, size_t size);
  inline ::std::string* mutable_cardguid();
  inline ::std::string* release_cardguid();
  inline void set_allocated_cardguid(::std::string* cardguid);

  // optional string equipguid = 5;
  inline bool has_equipguid() const;
  inline void clear_equipguid();
  static const int kEquipguidFieldNumber = 5;
  inline const ::std::string& equipguid() const;
  inline void set_equipguid(const ::std::string& value);
  inline void set_equipguid(const char* value);
  inline void set_equipguid(const char* value, size_t size);
  inline ::std::string* mutable_equipguid();
  inline ::std::string* release_equipguid();
  inline void set_allocated_equipguid(::std::string* equipguid);

  // optional uint32 pos = 6 [default = 0];
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 6;
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.EquipCard)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_oper();
  inline void clear_has_oper();
  inline void set_has_cardguid();
  inline void clear_has_cardguid();
  inline void set_has_equipguid();
  inline void clear_has_equipguid();
  inline void set_has_pos();
  inline void clear_has_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::std::string* cardguid_;
  int oper_;
  ::google::protobuf::uint32 pos_;
  ::std::string* equipguid_;
  friend void  protobuf_AddDesc_SceneItem_2eproto();
  friend void protobuf_AssignDesc_SceneItem_2eproto();
  friend void protobuf_ShutdownFile_SceneItem_2eproto();

  void InitAsDefaultInstance();
  static EquipCard* default_instance_;
};
// -------------------------------------------------------------------

class ItemShow : public ::google::protobuf::Message {
 public:
  ItemShow();
  virtual ~ItemShow();

  ItemShow(const ItemShow& from);

  inline ItemShow& operator=(const ItemShow& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ItemShow& default_instance();

  void Swap(ItemShow* other);

  // implements Message ----------------------------------------------

  ItemShow* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ItemShow& from);
  void MergeFrom(const ItemShow& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_ITEMSHOW];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::ItemParam param() const;
  inline void set_param(::Cmd::ItemParam value);

  // repeated .Cmd.ItemInfo items = 3;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 3;
  inline const ::Cmd::ItemInfo& items(int index) const;
  inline ::Cmd::ItemInfo* mutable_items(int index);
  inline ::Cmd::ItemInfo* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ItemInfo >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::ItemInfo >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:Cmd.ItemShow)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::ItemInfo > items_;
  friend void  protobuf_AddDesc_SceneItem_2eproto();
  friend void protobuf_AssignDesc_SceneItem_2eproto();
  friend void protobuf_ShutdownFile_SceneItem_2eproto();

  void InitAsDefaultInstance();
  static ItemShow* default_instance_;
};
// -------------------------------------------------------------------

class ItemShow64 : public ::google::protobuf::Message {
 public:
  ItemShow64();
  virtual ~ItemShow64();

  ItemShow64(const ItemShow64& from);

  inline ItemShow64& operator=(const ItemShow64& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ItemShow64& default_instance();

  void Swap(ItemShow64* other);

  // implements Message ----------------------------------------------

  ItemShow64* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ItemShow64& from);
  void MergeFrom(const ItemShow64& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_ITEMSHOW64];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::ItemParam param() const;
  inline void set_param(::Cmd::ItemParam value);

  // optional uint32 id = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint64 count = 4;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 4;
  inline ::google::protobuf::uint64 count() const;
  inline void set_count(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.ItemShow64)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 count_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_SceneItem_2eproto();
  friend void protobuf_AssignDesc_SceneItem_2eproto();
  friend void protobuf_ShutdownFile_SceneItem_2eproto();

  void InitAsDefaultInstance();
  static ItemShow64* default_instance_;
};
// -------------------------------------------------------------------

class EquipRepair : public ::google::protobuf::Message {
 public:
  EquipRepair();
  virtual ~EquipRepair();

  EquipRepair(const EquipRepair& from);

  inline EquipRepair& operator=(const EquipRepair& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipRepair& default_instance();

  void Swap(EquipRepair* other);

  // implements Message ----------------------------------------------

  EquipRepair* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipRepair& from);
  void MergeFrom(const EquipRepair& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_REPAIR];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::ItemParam param() const;
  inline void set_param(::Cmd::ItemParam value);

  // optional string targetguid = 3;
  inline bool has_targetguid() const;
  inline void clear_targetguid();
  static const int kTargetguidFieldNumber = 3;
  inline const ::std::string& targetguid() const;
  inline void set_targetguid(const ::std::string& value);
  inline void set_targetguid(const char* value);
  inline void set_targetguid(const char* value, size_t size);
  inline ::std::string* mutable_targetguid();
  inline ::std::string* release_targetguid();
  inline void set_allocated_targetguid(::std::string* targetguid);

  // optional bool success = 4 [default = false];
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 4;
  inline bool success() const;
  inline void set_success(bool value);

  // optional string stuffguid = 5;
  inline bool has_stuffguid() const;
  inline void clear_stuffguid();
  static const int kStuffguidFieldNumber = 5;
  inline const ::std::string& stuffguid() const;
  inline void set_stuffguid(const ::std::string& value);
  inline void set_stuffguid(const char* value);
  inline void set_stuffguid(const char* value, size_t size);
  inline ::std::string* mutable_stuffguid();
  inline ::std::string* release_stuffguid();
  inline void set_allocated_stuffguid(::std::string* stuffguid);

  // @@protoc_insertion_point(class_scope:Cmd.EquipRepair)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_targetguid();
  inline void clear_has_targetguid();
  inline void set_has_success();
  inline void clear_has_success();
  inline void set_has_stuffguid();
  inline void clear_has_stuffguid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::std::string* targetguid_;
  ::std::string* stuffguid_;
  bool success_;
  friend void  protobuf_AddDesc_SceneItem_2eproto();
  friend void protobuf_AssignDesc_SceneItem_2eproto();
  friend void protobuf_ShutdownFile_SceneItem_2eproto();

  void InitAsDefaultInstance();
  static EquipRepair* default_instance_;
};
// -------------------------------------------------------------------

class HintNtf : public ::google::protobuf::Message {
 public:
  HintNtf();
  virtual ~HintNtf();

  HintNtf(const HintNtf& from);

  inline HintNtf& operator=(const HintNtf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HintNtf& default_instance();

  void Swap(HintNtf* other);

  // implements Message ----------------------------------------------

  HintNtf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HintNtf& from);
  void MergeFrom(const HintNtf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_HINTNTF];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::ItemParam param() const;
  inline void set_param(::Cmd::ItemParam value);

  // optional uint32 itemid = 3 [default = 0];
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 3;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.HintNtf)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_itemid();
  inline void clear_has_itemid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 itemid_;
  friend void  protobuf_AddDesc_SceneItem_2eproto();
  friend void protobuf_AssignDesc_SceneItem_2eproto();
  friend void protobuf_ShutdownFile_SceneItem_2eproto();

  void InitAsDefaultInstance();
  static HintNtf* default_instance_;
};
// -------------------------------------------------------------------

class EnchantEquip : public ::google::protobuf::Message {
 public:
  EnchantEquip();
  virtual ~EnchantEquip();

  EnchantEquip(const EnchantEquip& from);

  inline EnchantEquip& operator=(const EnchantEquip& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EnchantEquip& default_instance();

  void Swap(EnchantEquip* other);

  // implements Message ----------------------------------------------

  EnchantEquip* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EnchantEquip& from);
  void MergeFrom(const EnchantEquip& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_ENCHANT];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::ItemParam param() const;
  inline void set_param(::Cmd::ItemParam value);

  // optional .Cmd.EEnchantType type = 3 [default = EENCHANTTYPE_MIN];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::Cmd::EEnchantType type() const;
  inline void set_type(::Cmd::EEnchantType value);

  // optional string guid = 4;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 4;
  inline const ::std::string& guid() const;
  inline void set_guid(const ::std::string& value);
  inline void set_guid(const char* value);
  inline void set_guid(const char* value, size_t size);
  inline ::std::string* mutable_guid();
  inline ::std::string* release_guid();
  inline void set_allocated_guid(::std::string* guid);

  // @@protoc_insertion_point(class_scope:Cmd.EnchantEquip)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_guid();
  inline void clear_has_guid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::std::string* guid_;
  int type_;
  friend void  protobuf_AddDesc_SceneItem_2eproto();
  friend void protobuf_AssignDesc_SceneItem_2eproto();
  friend void protobuf_ShutdownFile_SceneItem_2eproto();

  void InitAsDefaultInstance();
  static EnchantEquip* default_instance_;
};
// -------------------------------------------------------------------

class TradeComposePair : public ::google::protobuf::Message {
 public:
  TradeComposePair();
  virtual ~TradeComposePair();

  TradeComposePair(const TradeComposePair& from);

  inline TradeComposePair& operator=(const TradeComposePair& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TradeComposePair& default_instance();

  void Swap(TradeComposePair* other);

  // implements Message ----------------------------------------------

  TradeComposePair* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TradeComposePair& from);
  void MergeFrom(const TradeComposePair& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 compose_id = 1;
  inline bool has_compose_id() const;
  inline void clear_compose_id();
  static const int kComposeIdFieldNumber = 1;
  inline ::google::protobuf::uint32 compose_id() const;
  inline void set_compose_id(::google::protobuf::uint32 value);

  // optional uint32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.TradeComposePair)
 private:
  inline void set_has_compose_id();
  inline void clear_has_compose_id();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 compose_id_;
  ::google::protobuf::uint32 count_;
  friend void  protobuf_AddDesc_SceneItem_2eproto();
  friend void protobuf_AssignDesc_SceneItem_2eproto();
  friend void protobuf_ShutdownFile_SceneItem_2eproto();

  void InitAsDefaultInstance();
  static TradeComposePair* default_instance_;
};
// -------------------------------------------------------------------

class TradeRefineData : public ::google::protobuf::Message {
 public:
  TradeRefineData();
  virtual ~TradeRefineData();

  TradeRefineData(const TradeRefineData& from);

  inline TradeRefineData& operator=(const TradeRefineData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TradeRefineData& default_instance();

  void Swap(TradeRefineData* other);

  // implements Message ----------------------------------------------

  TradeRefineData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TradeRefineData& from);
  void MergeFrom(const TradeRefineData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Cmd.TradeComposePair composeInfos = 1;
  inline int composeinfos_size() const;
  inline void clear_composeinfos();
  static const int kComposeInfosFieldNumber = 1;
  inline const ::Cmd::TradeComposePair& composeinfos(int index) const;
  inline ::Cmd::TradeComposePair* mutable_composeinfos(int index);
  inline ::Cmd::TradeComposePair* add_composeinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::TradeComposePair >&
      composeinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::TradeComposePair >*
      mutable_composeinfos();

  // @@protoc_insertion_point(class_scope:Cmd.TradeRefineData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::TradeComposePair > composeinfos_;
  friend void  protobuf_AddDesc_SceneItem_2eproto();
  friend void protobuf_AssignDesc_SceneItem_2eproto();
  friend void protobuf_ShutdownFile_SceneItem_2eproto();

  void InitAsDefaultInstance();
  static TradeRefineData* default_instance_;
};
// -------------------------------------------------------------------

class TradeItemBaseInfo : public ::google::protobuf::Message {
 public:
  TradeItemBaseInfo();
  virtual ~TradeItemBaseInfo();

  TradeItemBaseInfo(const TradeItemBaseInfo& from);

  inline TradeItemBaseInfo& operator=(const TradeItemBaseInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TradeItemBaseInfo& default_instance();

  void Swap(TradeItemBaseInfo* other);

  // implements Message ----------------------------------------------

  TradeItemBaseInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TradeItemBaseInfo& from);
  void MergeFrom(const TradeItemBaseInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 itemid = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 1;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint32 price = 2;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 2;
  inline ::google::protobuf::uint32 price() const;
  inline void set_price(::google::protobuf::uint32 value);

  // optional uint32 count = 3;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 3;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // optional string guid = 4;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 4;
  inline const ::std::string& guid() const;
  inline void set_guid(const ::std::string& value);
  inline void set_guid(const char* value);
  inline void set_guid(const char* value, size_t size);
  inline ::std::string* mutable_guid();
  inline ::std::string* release_guid();
  inline void set_allocated_guid(::std::string* guid);

  // optional uint64 order_id = 5;
  inline bool has_order_id() const;
  inline void clear_order_id();
  static const int kOrderIdFieldNumber = 5;
  inline ::google::protobuf::uint64 order_id() const;
  inline void set_order_id(::google::protobuf::uint64 value);

  // optional uint32 refine_lv = 6;
  inline bool has_refine_lv() const;
  inline void clear_refine_lv();
  static const int kRefineLvFieldNumber = 6;
  inline ::google::protobuf::uint32 refine_lv() const;
  inline void set_refine_lv(::google::protobuf::uint32 value);

  // optional bool overlap = 8;
  inline bool has_overlap() const;
  inline void clear_overlap();
  static const int kOverlapFieldNumber = 8;
  inline bool overlap() const;
  inline void set_overlap(bool value);

  // optional bool is_expired = 9;
  inline bool has_is_expired() const;
  inline void clear_is_expired();
  static const int kIsExpiredFieldNumber = 9;
  inline bool is_expired() const;
  inline void set_is_expired(bool value);

  // optional .Cmd.ItemData item_data = 10;
  inline bool has_item_data() const;
  inline void clear_item_data();
  static const int kItemDataFieldNumber = 10;
  inline const ::Cmd::ItemData& item_data() const;
  inline ::Cmd::ItemData* mutable_item_data();
  inline ::Cmd::ItemData* release_item_data();
  inline void set_allocated_item_data(::Cmd::ItemData* item_data);

  // optional uint32 publicity_id = 11 [default = 0];
  inline bool has_publicity_id() const;
  inline void clear_publicity_id();
  static const int kPublicityIdFieldNumber = 11;
  inline ::google::protobuf::uint32 publicity_id() const;
  inline void set_publicity_id(::google::protobuf::uint32 value);

  // optional uint32 end_time = 12 [default = 0];
  inline bool has_end_time() const;
  inline void clear_end_time();
  static const int kEndTimeFieldNumber = 12;
  inline ::google::protobuf::uint32 end_time() const;
  inline void set_end_time(::google::protobuf::uint32 value);

  // optional string key = 13;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 13;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // optional uint64 charid = 14;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 14;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional string name = 15;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 15;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional .Cmd.ETradeType type = 16 [default = ETRADETYPE_TRADE];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 16;
  inline ::Cmd::ETradeType type() const;
  inline void set_type(::Cmd::ETradeType value);

  // optional uint32 up_rate = 17 [default = 0];
  inline bool has_up_rate() const;
  inline void clear_up_rate();
  static const int kUpRateFieldNumber = 17;
  inline ::google::protobuf::uint32 up_rate() const;
  inline void set_up_rate(::google::protobuf::uint32 value);

  // optional uint32 down_rate = 18 [default = 0];
  inline bool has_down_rate() const;
  inline void clear_down_rate();
  static const int kDownRateFieldNumber = 18;
  inline ::google::protobuf::uint32 down_rate() const;
  inline void set_down_rate(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.TradeItemBaseInfo)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_order_id();
  inline void clear_has_order_id();
  inline void set_has_refine_lv();
  inline void clear_has_refine_lv();
  inline void set_has_overlap();
  inline void clear_has_overlap();
  inline void set_has_is_expired();
  inline void clear_has_is_expired();
  inline void set_has_item_data();
  inline void clear_has_item_data();
  inline void set_has_publicity_id();
  inline void clear_has_publicity_id();
  inline void set_has_end_time();
  inline void clear_has_end_time();
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_up_rate();
  inline void clear_has_up_rate();
  inline void set_has_down_rate();
  inline void clear_has_down_rate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 price_;
  ::std::string* guid_;
  ::google::protobuf::uint32 count_;
  ::google::protobuf::uint32 refine_lv_;
  ::google::protobuf::uint64 order_id_;
  bool overlap_;
  bool is_expired_;
  ::google::protobuf::uint32 publicity_id_;
  ::Cmd::ItemData* item_data_;
  ::std::string* key_;
  ::google::protobuf::uint64 charid_;
  ::google::protobuf::uint32 end_time_;
  int type_;
  ::std::string* name_;
  ::google::protobuf::uint32 up_rate_;
  ::google::protobuf::uint32 down_rate_;
  friend void  protobuf_AddDesc_SceneItem_2eproto();
  friend void protobuf_AssignDesc_SceneItem_2eproto();
  friend void protobuf_ShutdownFile_SceneItem_2eproto();

  void InitAsDefaultInstance();
  static TradeItemBaseInfo* default_instance_;
};
// -------------------------------------------------------------------

class ProcessEnchantItemCmd : public ::google::protobuf::Message {
 public:
  ProcessEnchantItemCmd();
  virtual ~ProcessEnchantItemCmd();

  ProcessEnchantItemCmd(const ProcessEnchantItemCmd& from);

  inline ProcessEnchantItemCmd& operator=(const ProcessEnchantItemCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProcessEnchantItemCmd& default_instance();

  void Swap(ProcessEnchantItemCmd* other);

  // implements Message ----------------------------------------------

  ProcessEnchantItemCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProcessEnchantItemCmd& from);
  void MergeFrom(const ProcessEnchantItemCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_PROCESSENCHANT];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::ItemParam param() const;
  inline void set_param(::Cmd::ItemParam value);

  // optional bool save = 3 [default = false];
  inline bool has_save() const;
  inline void clear_save();
  static const int kSaveFieldNumber = 3;
  inline bool save() const;
  inline void set_save(bool value);

  // optional string itemid = 4;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 4;
  inline const ::std::string& itemid() const;
  inline void set_itemid(const ::std::string& value);
  inline void set_itemid(const char* value);
  inline void set_itemid(const char* value, size_t size);
  inline ::std::string* mutable_itemid();
  inline ::std::string* release_itemid();
  inline void set_allocated_itemid(::std::string* itemid);

  // @@protoc_insertion_point(class_scope:Cmd.ProcessEnchantItemCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_save();
  inline void clear_has_save();
  inline void set_has_itemid();
  inline void clear_has_itemid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::std::string* itemid_;
  bool save_;
  friend void  protobuf_AddDesc_SceneItem_2eproto();
  friend void protobuf_AssignDesc_SceneItem_2eproto();
  friend void protobuf_ShutdownFile_SceneItem_2eproto();

  void InitAsDefaultInstance();
  static ProcessEnchantItemCmd* default_instance_;
};
// -------------------------------------------------------------------

class EquipExchangeItemCmd : public ::google::protobuf::Message {
 public:
  EquipExchangeItemCmd();
  virtual ~EquipExchangeItemCmd();

  EquipExchangeItemCmd(const EquipExchangeItemCmd& from);

  inline EquipExchangeItemCmd& operator=(const EquipExchangeItemCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipExchangeItemCmd& default_instance();

  void Swap(EquipExchangeItemCmd* other);

  // implements Message ----------------------------------------------

  EquipExchangeItemCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipExchangeItemCmd& from);
  void MergeFrom(const EquipExchangeItemCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_EQUIPEXCHANGE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::ItemParam param() const;
  inline void set_param(::Cmd::ItemParam value);

  // optional string guid = 3;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 3;
  inline const ::std::string& guid() const;
  inline void set_guid(const ::std::string& value);
  inline void set_guid(const char* value);
  inline void set_guid(const char* value, size_t size);
  inline ::std::string* mutable_guid();
  inline ::std::string* release_guid();
  inline void set_allocated_guid(::std::string* guid);

  // optional .Cmd.EExchangeType type = 4 [default = EEXCHANGETYPE_MIN];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::Cmd::EExchangeType type() const;
  inline void set_type(::Cmd::EExchangeType value);

  // @@protoc_insertion_point(class_scope:Cmd.EquipExchangeItemCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::std::string* guid_;
  int type_;
  friend void  protobuf_AddDesc_SceneItem_2eproto();
  friend void protobuf_AssignDesc_SceneItem_2eproto();
  friend void protobuf_ShutdownFile_SceneItem_2eproto();

  void InitAsDefaultInstance();
  static EquipExchangeItemCmd* default_instance_;
};
// -------------------------------------------------------------------

class OnOffStoreItemCmd : public ::google::protobuf::Message {
 public:
  OnOffStoreItemCmd();
  virtual ~OnOffStoreItemCmd();

  OnOffStoreItemCmd(const OnOffStoreItemCmd& from);

  inline OnOffStoreItemCmd& operator=(const OnOffStoreItemCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OnOffStoreItemCmd& default_instance();

  void Swap(OnOffStoreItemCmd* other);

  // implements Message ----------------------------------------------

  OnOffStoreItemCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OnOffStoreItemCmd& from);
  void MergeFrom(const OnOffStoreItemCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_ONOFFSTORE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::ItemParam param() const;
  inline void set_param(::Cmd::ItemParam value);

  // optional bool open = 3 [default = false];
  inline bool has_open() const;
  inline void clear_open();
  static const int kOpenFieldNumber = 3;
  inline bool open() const;
  inline void set_open(bool value);

  // @@protoc_insertion_point(class_scope:Cmd.OnOffStoreItemCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_open();
  inline void clear_has_open();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  bool open_;
  friend void  protobuf_AddDesc_SceneItem_2eproto();
  friend void protobuf_AssignDesc_SceneItem_2eproto();
  friend void protobuf_ShutdownFile_SceneItem_2eproto();

  void InitAsDefaultInstance();
  static OnOffStoreItemCmd* default_instance_;
};
// -------------------------------------------------------------------

class PackSlotNtfItemCmd : public ::google::protobuf::Message {
 public:
  PackSlotNtfItemCmd();
  virtual ~PackSlotNtfItemCmd();

  PackSlotNtfItemCmd(const PackSlotNtfItemCmd& from);

  inline PackSlotNtfItemCmd& operator=(const PackSlotNtfItemCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PackSlotNtfItemCmd& default_instance();

  void Swap(PackSlotNtfItemCmd* other);

  // implements Message ----------------------------------------------

  PackSlotNtfItemCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PackSlotNtfItemCmd& from);
  void MergeFrom(const PackSlotNtfItemCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_PACKSLOTNTF];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::ItemParam param() const;
  inline void set_param(::Cmd::ItemParam value);

  // optional .Cmd.EPackType type = 3 [default = EPACKTYPE_MIN];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::Cmd::EPackType type() const;
  inline void set_type(::Cmd::EPackType value);

  // optional uint32 maxslot = 4 [default = 0];
  inline bool has_maxslot() const;
  inline void clear_maxslot();
  static const int kMaxslotFieldNumber = 4;
  inline ::google::protobuf::uint32 maxslot() const;
  inline void set_maxslot(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.PackSlotNtfItemCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_maxslot();
  inline void clear_has_maxslot();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  int type_;
  ::google::protobuf::uint32 maxslot_;
  friend void  protobuf_AddDesc_SceneItem_2eproto();
  friend void protobuf_AssignDesc_SceneItem_2eproto();
  friend void protobuf_ShutdownFile_SceneItem_2eproto();

  void InitAsDefaultInstance();
  static PackSlotNtfItemCmd* default_instance_;
};
// -------------------------------------------------------------------

class RestoreEquipItemCmd : public ::google::protobuf::Message {
 public:
  RestoreEquipItemCmd();
  virtual ~RestoreEquipItemCmd();

  RestoreEquipItemCmd(const RestoreEquipItemCmd& from);

  inline RestoreEquipItemCmd& operator=(const RestoreEquipItemCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RestoreEquipItemCmd& default_instance();

  void Swap(RestoreEquipItemCmd* other);

  // implements Message ----------------------------------------------

  RestoreEquipItemCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RestoreEquipItemCmd& from);
  void MergeFrom(const RestoreEquipItemCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_RESTOREEQUIP];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::ItemParam param() const;
  inline void set_param(::Cmd::ItemParam value);

  // optional string equipid = 3;
  inline bool has_equipid() const;
  inline void clear_equipid();
  static const int kEquipidFieldNumber = 3;
  inline const ::std::string& equipid() const;
  inline void set_equipid(const ::std::string& value);
  inline void set_equipid(const char* value);
  inline void set_equipid(const char* value, size_t size);
  inline ::std::string* mutable_equipid();
  inline ::std::string* release_equipid();
  inline void set_allocated_equipid(::std::string* equipid);

  // optional bool strengthlv = 4 [default = false];
  inline bool has_strengthlv() const;
  inline void clear_strengthlv();
  static const int kStrengthlvFieldNumber = 4;
  inline bool strengthlv() const;
  inline void set_strengthlv(bool value);

  // repeated string cardids = 5;
  inline int cardids_size() const;
  inline void clear_cardids();
  static const int kCardidsFieldNumber = 5;
  inline const ::std::string& cardids(int index) const;
  inline ::std::string* mutable_cardids(int index);
  inline void set_cardids(int index, const ::std::string& value);
  inline void set_cardids(int index, const char* value);
  inline void set_cardids(int index, const char* value, size_t size);
  inline ::std::string* add_cardids();
  inline void add_cardids(const ::std::string& value);
  inline void add_cardids(const char* value);
  inline void add_cardids(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& cardids() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_cardids();

  // optional bool enchant = 6 [default = false];
  inline bool has_enchant() const;
  inline void clear_enchant();
  static const int kEnchantFieldNumber = 6;
  inline bool enchant() const;
  inline void set_enchant(bool value);

  // optional bool upgrade = 7 [default = false];
  inline bool has_upgrade() const;
  inline void clear_upgrade();
  static const int kUpgradeFieldNumber = 7;
  inline bool upgrade() const;
  inline void set_upgrade(bool value);

  // optional bool strengthlv2 = 8 [default = false];
  inline bool has_strengthlv2() const;
  inline void clear_strengthlv2();
  static const int kStrengthlv2FieldNumber = 8;
  inline bool strengthlv2() const;
  inline void set_strengthlv2(bool value);

  // @@protoc_insertion_point(class_scope:Cmd.RestoreEquipItemCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_equipid();
  inline void clear_has_equipid();
  inline void set_has_strengthlv();
  inline void clear_has_strengthlv();
  inline void set_has_enchant();
  inline void clear_has_enchant();
  inline void set_has_upgrade();
  inline void clear_has_upgrade();
  inline void set_has_strengthlv2();
  inline void clear_has_strengthlv2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::std::string* equipid_;
  ::google::protobuf::RepeatedPtrField< ::std::string> cardids_;
  bool strengthlv_;
  bool enchant_;
  bool upgrade_;
  bool strengthlv2_;
  friend void  protobuf_AddDesc_SceneItem_2eproto();
  friend void protobuf_AssignDesc_SceneItem_2eproto();
  friend void protobuf_ShutdownFile_SceneItem_2eproto();

  void InitAsDefaultInstance();
  static RestoreEquipItemCmd* default_instance_;
};
// -------------------------------------------------------------------

class UseCountItemCmd : public ::google::protobuf::Message {
 public:
  UseCountItemCmd();
  virtual ~UseCountItemCmd();

  UseCountItemCmd(const UseCountItemCmd& from);

  inline UseCountItemCmd& operator=(const UseCountItemCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UseCountItemCmd& default_instance();

  void Swap(UseCountItemCmd* other);

  // implements Message ----------------------------------------------

  UseCountItemCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UseCountItemCmd& from);
  void MergeFrom(const UseCountItemCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_USECOUNT];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::ItemParam param() const;
  inline void set_param(::Cmd::ItemParam value);

  // required uint32 itemid = 3;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 3;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint32 count = 4 [default = 0];
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 4;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.UseCountItemCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 count_;
  friend void  protobuf_AddDesc_SceneItem_2eproto();
  friend void protobuf_AssignDesc_SceneItem_2eproto();
  friend void protobuf_ShutdownFile_SceneItem_2eproto();

  void InitAsDefaultInstance();
  static UseCountItemCmd* default_instance_;
};
// -------------------------------------------------------------------

class ExchangeCardItemCmd : public ::google::protobuf::Message {
 public:
  ExchangeCardItemCmd();
  virtual ~ExchangeCardItemCmd();

  ExchangeCardItemCmd(const ExchangeCardItemCmd& from);

  inline ExchangeCardItemCmd& operator=(const ExchangeCardItemCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExchangeCardItemCmd& default_instance();

  void Swap(ExchangeCardItemCmd* other);

  // implements Message ----------------------------------------------

  ExchangeCardItemCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExchangeCardItemCmd& from);
  void MergeFrom(const ExchangeCardItemCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_EXCHANGECARD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::ItemParam param() const;
  inline void set_param(::Cmd::ItemParam value);

  // optional .Cmd.EExchangeCardType type = 3 [default = EEXCHANGECARDTYPE_DRAW];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::Cmd::EExchangeCardType type() const;
  inline void set_type(::Cmd::EExchangeCardType value);

  // optional uint64 npcid = 4 [default = 0];
  inline bool has_npcid() const;
  inline void clear_npcid();
  static const int kNpcidFieldNumber = 4;
  inline ::google::protobuf::uint64 npcid() const;
  inline void set_npcid(::google::protobuf::uint64 value);

  // repeated string material = 5;
  inline int material_size() const;
  inline void clear_material();
  static const int kMaterialFieldNumber = 5;
  inline const ::std::string& material(int index) const;
  inline ::std::string* mutable_material(int index);
  inline void set_material(int index, const ::std::string& value);
  inline void set_material(int index, const char* value);
  inline void set_material(int index, const char* value, size_t size);
  inline ::std::string* add_material();
  inline void add_material(const ::std::string& value);
  inline void add_material(const char* value);
  inline void add_material(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& material() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_material();

  // optional uint64 charid = 6 [default = 0];
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 6;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional uint32 cardid = 7 [default = 0];
  inline bool has_cardid() const;
  inline void clear_cardid();
  static const int kCardidFieldNumber = 7;
  inline ::google::protobuf::uint32 cardid() const;
  inline void set_cardid(::google::protobuf::uint32 value);

  // optional bool anim = 8 [default = false];
  inline bool has_anim() const;
  inline void clear_anim();
  static const int kAnimFieldNumber = 8;
  inline bool anim() const;
  inline void set_anim(bool value);

  // repeated .Cmd.ItemInfo items = 9;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 9;
  inline const ::Cmd::ItemInfo& items(int index) const;
  inline ::Cmd::ItemInfo* mutable_items(int index);
  inline ::Cmd::ItemInfo* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ItemInfo >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::ItemInfo >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:Cmd.ExchangeCardItemCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_npcid();
  inline void clear_has_npcid();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_cardid();
  inline void clear_has_cardid();
  inline void set_has_anim();
  inline void clear_has_anim();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 npcid_;
  ::google::protobuf::RepeatedPtrField< ::std::string> material_;
  int type_;
  ::google::protobuf::uint32 cardid_;
  ::google::protobuf::uint64 charid_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::ItemInfo > items_;
  bool anim_;
  friend void  protobuf_AddDesc_SceneItem_2eproto();
  friend void protobuf_AssignDesc_SceneItem_2eproto();
  friend void protobuf_ShutdownFile_SceneItem_2eproto();

  void InitAsDefaultInstance();
  static ExchangeCardItemCmd* default_instance_;
};
// -------------------------------------------------------------------

class GetCountItemCmd : public ::google::protobuf::Message {
 public:
  GetCountItemCmd();
  virtual ~GetCountItemCmd();

  GetCountItemCmd(const GetCountItemCmd& from);

  inline GetCountItemCmd& operator=(const GetCountItemCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetCountItemCmd& default_instance();

  void Swap(GetCountItemCmd* other);

  // implements Message ----------------------------------------------

  GetCountItemCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetCountItemCmd& from);
  void MergeFrom(const GetCountItemCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_GETCOUNT];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::ItemParam param() const;
  inline void set_param(::Cmd::ItemParam value);

  // optional uint32 itemid = 3;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 3;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint32 count = 4 [default = 0];
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 4;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // optional .Cmd.ESource source = 5 [default = ESOURCE_MIN];
  inline bool has_source() const;
  inline void clear_source();
  static const int kSourceFieldNumber = 5;
  inline ::Cmd::ESource source() const;
  inline void set_source(::Cmd::ESource value);

  // @@protoc_insertion_point(class_scope:Cmd.GetCountItemCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_source();
  inline void clear_has_source();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 count_;
  int source_;
  friend void  protobuf_AddDesc_SceneItem_2eproto();
  friend void protobuf_AssignDesc_SceneItem_2eproto();
  friend void protobuf_ShutdownFile_SceneItem_2eproto();

  void InitAsDefaultInstance();
  static GetCountItemCmd* default_instance_;
};
// -------------------------------------------------------------------

class SaveLoveLetterCmd : public ::google::protobuf::Message {
 public:
  SaveLoveLetterCmd();
  virtual ~SaveLoveLetterCmd();

  SaveLoveLetterCmd(const SaveLoveLetterCmd& from);

  inline SaveLoveLetterCmd& operator=(const SaveLoveLetterCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SaveLoveLetterCmd& default_instance();

  void Swap(SaveLoveLetterCmd* other);

  // implements Message ----------------------------------------------

  SaveLoveLetterCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SaveLoveLetterCmd& from);
  void MergeFrom(const SaveLoveLetterCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_SAVE_LOVE_LETTER];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::ItemParam param() const;
  inline void set_param(::Cmd::ItemParam value);

  // optional uint32 dwID = 3;
  inline bool has_dwid() const;
  inline void clear_dwid();
  static const int kDwIDFieldNumber = 3;
  inline ::google::protobuf::uint32 dwid() const;
  inline void set_dwid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.SaveLoveLetterCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_dwid();
  inline void clear_has_dwid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 dwid_;
  friend void  protobuf_AddDesc_SceneItem_2eproto();
  friend void protobuf_AssignDesc_SceneItem_2eproto();
  friend void protobuf_ShutdownFile_SceneItem_2eproto();

  void InitAsDefaultInstance();
  static SaveLoveLetterCmd* default_instance_;
};
// -------------------------------------------------------------------

class ItemDataShow : public ::google::protobuf::Message {
 public:
  ItemDataShow();
  virtual ~ItemDataShow();

  ItemDataShow(const ItemDataShow& from);

  inline ItemDataShow& operator=(const ItemDataShow& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ItemDataShow& default_instance();

  void Swap(ItemDataShow* other);

  // implements Message ----------------------------------------------

  ItemDataShow* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ItemDataShow& from);
  void MergeFrom(const ItemDataShow& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_ITEMDATASHOW];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::ItemParam param() const;
  inline void set_param(::Cmd::ItemParam value);

  // repeated .Cmd.ItemData items = 3;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 3;
  inline const ::Cmd::ItemData& items(int index) const;
  inline ::Cmd::ItemData* mutable_items(int index);
  inline ::Cmd::ItemData* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ItemData >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::ItemData >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:Cmd.ItemDataShow)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::ItemData > items_;
  friend void  protobuf_AddDesc_SceneItem_2eproto();
  friend void protobuf_AssignDesc_SceneItem_2eproto();
  friend void protobuf_ShutdownFile_SceneItem_2eproto();

  void InitAsDefaultInstance();
  static ItemDataShow* default_instance_;
};
// -------------------------------------------------------------------

class LotteryCmd : public ::google::protobuf::Message {
 public:
  LotteryCmd();
  virtual ~LotteryCmd();

  LotteryCmd(const LotteryCmd& from);

  inline LotteryCmd& operator=(const LotteryCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LotteryCmd& default_instance();

  void Swap(LotteryCmd* other);

  // implements Message ----------------------------------------------

  LotteryCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LotteryCmd& from);
  void MergeFrom(const LotteryCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_LOTTERY];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::ItemParam param() const;
  inline void set_param(::Cmd::ItemParam value);

  // optional uint32 year = 3;
  inline bool has_year() const;
  inline void clear_year();
  static const int kYearFieldNumber = 3;
  inline ::google::protobuf::uint32 year() const;
  inline void set_year(::google::protobuf::uint32 value);

  // optional uint32 month = 4;
  inline bool has_month() const;
  inline void clear_month();
  static const int kMonthFieldNumber = 4;
  inline ::google::protobuf::uint32 month() const;
  inline void set_month(::google::protobuf::uint32 value);

  // optional uint64 npcid = 5;
  inline bool has_npcid() const;
  inline void clear_npcid();
  static const int kNpcidFieldNumber = 5;
  inline ::google::protobuf::uint64 npcid() const;
  inline void set_npcid(::google::protobuf::uint64 value);

  // optional bool skip_anim = 6 [default = false];
  inline bool has_skip_anim() const;
  inline void clear_skip_anim();
  static const int kSkipAnimFieldNumber = 6;
  inline bool skip_anim() const;
  inline void set_skip_anim(bool value);

  // optional uint32 price = 7;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 7;
  inline ::google::protobuf::uint32 price() const;
  inline void set_price(::google::protobuf::uint32 value);

  // optional uint32 ticket = 8;
  inline bool has_ticket() const;
  inline void clear_ticket();
  static const int kTicketFieldNumber = 8;
  inline ::google::protobuf::uint32 ticket() const;
  inline void set_ticket(::google::protobuf::uint32 value);

  // optional .Cmd.ELotteryType type = 9;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 9;
  inline ::Cmd::ELotteryType type() const;
  inline void set_type(::Cmd::ELotteryType value);

  // optional uint32 count = 10;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 10;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // repeated .Cmd.ItemInfo items = 11;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 11;
  inline const ::Cmd::ItemInfo& items(int index) const;
  inline ::Cmd::ItemInfo* mutable_items(int index);
  inline ::Cmd::ItemInfo* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ItemInfo >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::ItemInfo >*
      mutable_items();

  // optional uint64 charid = 12;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 12;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional string guid = 13;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 13;
  inline const ::std::string& guid() const;
  inline void set_guid(const ::std::string& value);
  inline void set_guid(const char* value);
  inline void set_guid(const char* value, size_t size);
  inline ::std::string* mutable_guid();
  inline ::std::string* release_guid();
  inline void set_allocated_guid(::std::string* guid);

  // optional uint32 today_cnt = 14;
  inline bool has_today_cnt() const;
  inline void clear_today_cnt();
  static const int kTodayCntFieldNumber = 14;
  inline ::google::protobuf::uint32 today_cnt() const;
  inline void set_today_cnt(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.LotteryCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_year();
  inline void clear_has_year();
  inline void set_has_month();
  inline void clear_has_month();
  inline void set_has_npcid();
  inline void clear_has_npcid();
  inline void set_has_skip_anim();
  inline void clear_has_skip_anim();
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_ticket();
  inline void clear_has_ticket();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_today_cnt();
  inline void clear_has_today_cnt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 year_;
  ::google::protobuf::uint32 month_;
  ::google::protobuf::uint64 npcid_;
  bool skip_anim_;
  ::google::protobuf::uint32 price_;
  ::google::protobuf::uint32 ticket_;
  int type_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::ItemInfo > items_;
  ::google::protobuf::uint64 charid_;
  ::google::protobuf::uint32 count_;
  ::google::protobuf::uint32 today_cnt_;
  ::std::string* guid_;
  friend void  protobuf_AddDesc_SceneItem_2eproto();
  friend void protobuf_AssignDesc_SceneItem_2eproto();
  friend void protobuf_ShutdownFile_SceneItem_2eproto();

  void InitAsDefaultInstance();
  static LotteryCmd* default_instance_;
};
// -------------------------------------------------------------------

class LotteryRecoveryCmd : public ::google::protobuf::Message {
 public:
  LotteryRecoveryCmd();
  virtual ~LotteryRecoveryCmd();

  LotteryRecoveryCmd(const LotteryRecoveryCmd& from);

  inline LotteryRecoveryCmd& operator=(const LotteryRecoveryCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LotteryRecoveryCmd& default_instance();

  void Swap(LotteryRecoveryCmd* other);

  // implements Message ----------------------------------------------

  LotteryRecoveryCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LotteryRecoveryCmd& from);
  void MergeFrom(const LotteryRecoveryCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_LOTTERY_RECOVERY];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::ItemParam param() const;
  inline void set_param(::Cmd::ItemParam value);

  // repeated string guids = 3;
  inline int guids_size() const;
  inline void clear_guids();
  static const int kGuidsFieldNumber = 3;
  inline const ::std::string& guids(int index) const;
  inline ::std::string* mutable_guids(int index);
  inline void set_guids(int index, const ::std::string& value);
  inline void set_guids(int index, const char* value);
  inline void set_guids(int index, const char* value, size_t size);
  inline ::std::string* add_guids();
  inline void add_guids(const ::std::string& value);
  inline void add_guids(const char* value);
  inline void add_guids(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& guids() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_guids();

  // optional uint64 npcid = 4;
  inline bool has_npcid() const;
  inline void clear_npcid();
  static const int kNpcidFieldNumber = 4;
  inline ::google::protobuf::uint64 npcid() const;
  inline void set_npcid(::google::protobuf::uint64 value);

  // optional .Cmd.ELotteryType type = 5;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 5;
  inline ::Cmd::ELotteryType type() const;
  inline void set_type(::Cmd::ELotteryType value);

  // @@protoc_insertion_point(class_scope:Cmd.LotteryRecoveryCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_npcid();
  inline void clear_has_npcid();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedPtrField< ::std::string> guids_;
  ::google::protobuf::uint64 npcid_;
  int type_;
  friend void  protobuf_AddDesc_SceneItem_2eproto();
  friend void protobuf_AssignDesc_SceneItem_2eproto();
  friend void protobuf_ShutdownFile_SceneItem_2eproto();

  void InitAsDefaultInstance();
  static LotteryRecoveryCmd* default_instance_;
};
// -------------------------------------------------------------------

class LotterySubInfo : public ::google::protobuf::Message {
 public:
  LotterySubInfo();
  virtual ~LotterySubInfo();

  LotterySubInfo(const LotterySubInfo& from);

  inline LotterySubInfo& operator=(const LotterySubInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LotterySubInfo& default_instance();

  void Swap(LotterySubInfo* other);

  // implements Message ----------------------------------------------

  LotterySubInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LotterySubInfo& from);
  void MergeFrom(const LotterySubInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 itemid = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 1;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint32 recover_price = 2;
  inline bool has_recover_price() const;
  inline void clear_recover_price();
  static const int kRecoverPriceFieldNumber = 2;
  inline ::google::protobuf::uint32 recover_price() const;
  inline void set_recover_price(::google::protobuf::uint32 value);

  // optional uint32 rate = 3;
  inline bool has_rate() const;
  inline void clear_rate();
  static const int kRateFieldNumber = 3;
  inline ::google::protobuf::uint32 rate() const;
  inline void set_rate(::google::protobuf::uint32 value);

  // optional string rarity = 4;
  inline bool has_rarity() const;
  inline void clear_rarity();
  static const int kRarityFieldNumber = 4;
  inline const ::std::string& rarity() const;
  inline void set_rarity(const ::std::string& value);
  inline void set_rarity(const char* value);
  inline void set_rarity(const char* value, size_t size);
  inline ::std::string* mutable_rarity();
  inline ::std::string* release_rarity();
  inline void set_allocated_rarity(::std::string* rarity);

  // optional bool cur_batch = 5;
  inline bool has_cur_batch() const;
  inline void clear_cur_batch();
  static const int kCurBatchFieldNumber = 5;
  inline bool cur_batch() const;
  inline void set_cur_batch(bool value);

  // optional uint32 id = 6;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 6;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 recover_itemid = 7;
  inline bool has_recover_itemid() const;
  inline void clear_recover_itemid();
  static const int kRecoverItemidFieldNumber = 7;
  inline ::google::protobuf::uint32 recover_itemid() const;
  inline void set_recover_itemid(::google::protobuf::uint32 value);

  // optional uint32 count = 8;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 8;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // optional uint32 female_itemid = 9;
  inline bool has_female_itemid() const;
  inline void clear_female_itemid();
  static const int kFemaleItemidFieldNumber = 9;
  inline ::google::protobuf::uint32 female_itemid() const;
  inline void set_female_itemid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.LotterySubInfo)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_recover_price();
  inline void clear_has_recover_price();
  inline void set_has_rate();
  inline void clear_has_rate();
  inline void set_has_rarity();
  inline void clear_has_rarity();
  inline void set_has_cur_batch();
  inline void clear_has_cur_batch();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_recover_itemid();
  inline void clear_has_recover_itemid();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_female_itemid();
  inline void clear_has_female_itemid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 recover_price_;
  ::std::string* rarity_;
  ::google::protobuf::uint32 rate_;
  bool cur_batch_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 recover_itemid_;
  ::google::protobuf::uint32 count_;
  ::google::protobuf::uint32 female_itemid_;
  friend void  protobuf_AddDesc_SceneItem_2eproto();
  friend void protobuf_AssignDesc_SceneItem_2eproto();
  friend void protobuf_ShutdownFile_SceneItem_2eproto();

  void InitAsDefaultInstance();
  static LotterySubInfo* default_instance_;
};
// -------------------------------------------------------------------

class LotteryInfo : public ::google::protobuf::Message {
 public:
  LotteryInfo();
  virtual ~LotteryInfo();

  LotteryInfo(const LotteryInfo& from);

  inline LotteryInfo& operator=(const LotteryInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LotteryInfo& default_instance();

  void Swap(LotteryInfo* other);

  // implements Message ----------------------------------------------

  LotteryInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LotteryInfo& from);
  void MergeFrom(const LotteryInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 year = 1;
  inline bool has_year() const;
  inline void clear_year();
  static const int kYearFieldNumber = 1;
  inline ::google::protobuf::uint32 year() const;
  inline void set_year(::google::protobuf::uint32 value);

  // optional uint32 month = 2;
  inline bool has_month() const;
  inline void clear_month();
  static const int kMonthFieldNumber = 2;
  inline ::google::protobuf::uint32 month() const;
  inline void set_month(::google::protobuf::uint32 value);

  // optional uint32 price = 3;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 3;
  inline ::google::protobuf::uint32 price() const;
  inline void set_price(::google::protobuf::uint32 value);

  // optional uint32 discount = 4;
  inline bool has_discount() const;
  inline void clear_discount();
  static const int kDiscountFieldNumber = 4;
  inline ::google::protobuf::uint32 discount() const;
  inline void set_discount(::google::protobuf::uint32 value);

  // repeated .Cmd.LotterySubInfo subInfo = 5;
  inline int subinfo_size() const;
  inline void clear_subinfo();
  static const int kSubInfoFieldNumber = 5;
  inline const ::Cmd::LotterySubInfo& subinfo(int index) const;
  inline ::Cmd::LotterySubInfo* mutable_subinfo(int index);
  inline ::Cmd::LotterySubInfo* add_subinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::LotterySubInfo >&
      subinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::LotterySubInfo >*
      mutable_subinfo();

  // optional uint32 lotterybox = 6;
  inline bool has_lotterybox() const;
  inline void clear_lotterybox();
  static const int kLotteryboxFieldNumber = 6;
  inline ::google::protobuf::uint32 lotterybox() const;
  inline void set_lotterybox(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.LotteryInfo)
 private:
  inline void set_has_year();
  inline void clear_has_year();
  inline void set_has_month();
  inline void clear_has_month();
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_discount();
  inline void clear_has_discount();
  inline void set_has_lotterybox();
  inline void clear_has_lotterybox();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 year_;
  ::google::protobuf::uint32 month_;
  ::google::protobuf::uint32 price_;
  ::google::protobuf::uint32 discount_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::LotterySubInfo > subinfo_;
  ::google::protobuf::uint32 lotterybox_;
  friend void  protobuf_AddDesc_SceneItem_2eproto();
  friend void protobuf_AssignDesc_SceneItem_2eproto();
  friend void protobuf_ShutdownFile_SceneItem_2eproto();

  void InitAsDefaultInstance();
  static LotteryInfo* default_instance_;
};
// -------------------------------------------------------------------

class QueryLotteryInfo : public ::google::protobuf::Message {
 public:
  QueryLotteryInfo();
  virtual ~QueryLotteryInfo();

  QueryLotteryInfo(const QueryLotteryInfo& from);

  inline QueryLotteryInfo& operator=(const QueryLotteryInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryLotteryInfo& default_instance();

  void Swap(QueryLotteryInfo* other);

  // implements Message ----------------------------------------------

  QueryLotteryInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryLotteryInfo& from);
  void MergeFrom(const QueryLotteryInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_QUERY_LOTTERYINFO];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::ItemParam param() const;
  inline void set_param(::Cmd::ItemParam value);

  // repeated .Cmd.LotteryInfo infos = 3;
  inline int infos_size() const;
  inline void clear_infos();
  static const int kInfosFieldNumber = 3;
  inline const ::Cmd::LotteryInfo& infos(int index) const;
  inline ::Cmd::LotteryInfo* mutable_infos(int index);
  inline ::Cmd::LotteryInfo* add_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::LotteryInfo >&
      infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::LotteryInfo >*
      mutable_infos();

  // optional .Cmd.ELotteryType type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::Cmd::ELotteryType type() const;
  inline void set_type(::Cmd::ELotteryType value);

  // optional uint32 today_cnt = 5;
  inline bool has_today_cnt() const;
  inline void clear_today_cnt();
  static const int kTodayCntFieldNumber = 5;
  inline ::google::protobuf::uint32 today_cnt() const;
  inline void set_today_cnt(::google::protobuf::uint32 value);

  // optional uint32 max_cnt = 6;
  inline bool has_max_cnt() const;
  inline void clear_max_cnt();
  static const int kMaxCntFieldNumber = 6;
  inline ::google::protobuf::uint32 max_cnt() const;
  inline void set_max_cnt(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.QueryLotteryInfo)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_today_cnt();
  inline void clear_has_today_cnt();
  inline void set_has_max_cnt();
  inline void clear_has_max_cnt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::LotteryInfo > infos_;
  int type_;
  ::google::protobuf::uint32 today_cnt_;
  ::google::protobuf::uint32 max_cnt_;
  friend void  protobuf_AddDesc_SceneItem_2eproto();
  friend void protobuf_AssignDesc_SceneItem_2eproto();
  friend void protobuf_ShutdownFile_SceneItem_2eproto();

  void InitAsDefaultInstance();
  static QueryLotteryInfo* default_instance_;
};
// -------------------------------------------------------------------

class QuotaLog : public ::google::protobuf::Message {
 public:
  QuotaLog();
  virtual ~QuotaLog();

  QuotaLog(const QuotaLog& from);

  inline QuotaLog& operator=(const QuotaLog& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QuotaLog& default_instance();

  void Swap(QuotaLog* other);

  // implements Message ----------------------------------------------

  QuotaLog* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QuotaLog& from);
  void MergeFrom(const QuotaLog& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 value = 1;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline ::google::protobuf::uint64 value() const;
  inline void set_value(::google::protobuf::uint64 value);

  // optional .Cmd.EQuotaType type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::Cmd::EQuotaType type() const;
  inline void set_type(::Cmd::EQuotaType value);

  // optional uint32 time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.QuotaLog)
 private:
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 value_;
  int type_;
  ::google::protobuf::uint32 time_;
  friend void  protobuf_AddDesc_SceneItem_2eproto();
  friend void protobuf_AssignDesc_SceneItem_2eproto();
  friend void protobuf_ShutdownFile_SceneItem_2eproto();

  void InitAsDefaultInstance();
  static QuotaLog* default_instance_;
};
// -------------------------------------------------------------------

class QuotaDetail : public ::google::protobuf::Message {
 public:
  QuotaDetail();
  virtual ~QuotaDetail();

  QuotaDetail(const QuotaDetail& from);

  inline QuotaDetail& operator=(const QuotaDetail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QuotaDetail& default_instance();

  void Swap(QuotaDetail* other);

  // implements Message ----------------------------------------------

  QuotaDetail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QuotaDetail& from);
  void MergeFrom(const QuotaDetail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 value = 1;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline ::google::protobuf::uint64 value() const;
  inline void set_value(::google::protobuf::uint64 value);

  // optional uint64 left = 2;
  inline bool has_left() const;
  inline void clear_left();
  static const int kLeftFieldNumber = 2;
  inline ::google::protobuf::uint64 left() const;
  inline void set_left(::google::protobuf::uint64 value);

  // optional uint32 expire_time = 3;
  inline bool has_expire_time() const;
  inline void clear_expire_time();
  static const int kExpireTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 expire_time() const;
  inline void set_expire_time(::google::protobuf::uint32 value);

  // optional uint32 time = 4;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.QuotaDetail)
 private:
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_left();
  inline void clear_has_left();
  inline void set_has_expire_time();
  inline void clear_has_expire_time();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 value_;
  ::google::protobuf::uint64 left_;
  ::google::protobuf::uint32 expire_time_;
  ::google::protobuf::uint32 time_;
  friend void  protobuf_AddDesc_SceneItem_2eproto();
  friend void protobuf_AssignDesc_SceneItem_2eproto();
  friend void protobuf_ShutdownFile_SceneItem_2eproto();

  void InitAsDefaultInstance();
  static QuotaDetail* default_instance_;
};
// -------------------------------------------------------------------

class ReqQuotaLogCmd : public ::google::protobuf::Message {
 public:
  ReqQuotaLogCmd();
  virtual ~ReqQuotaLogCmd();

  ReqQuotaLogCmd(const ReqQuotaLogCmd& from);

  inline ReqQuotaLogCmd& operator=(const ReqQuotaLogCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqQuotaLogCmd& default_instance();

  void Swap(ReqQuotaLogCmd* other);

  // implements Message ----------------------------------------------

  ReqQuotaLogCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqQuotaLogCmd& from);
  void MergeFrom(const ReqQuotaLogCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_REQ_QUOTA_LOG];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::ItemParam param() const;
  inline void set_param(::Cmd::ItemParam value);

  // optional uint32 page_index = 3;
  inline bool has_page_index() const;
  inline void clear_page_index();
  static const int kPageIndexFieldNumber = 3;
  inline ::google::protobuf::uint32 page_index() const;
  inline void set_page_index(::google::protobuf::uint32 value);

  // repeated .Cmd.QuotaLog log = 4;
  inline int log_size() const;
  inline void clear_log();
  static const int kLogFieldNumber = 4;
  inline const ::Cmd::QuotaLog& log(int index) const;
  inline ::Cmd::QuotaLog* mutable_log(int index);
  inline ::Cmd::QuotaLog* add_log();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::QuotaLog >&
      log() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::QuotaLog >*
      mutable_log();

  // @@protoc_insertion_point(class_scope:Cmd.ReqQuotaLogCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_page_index();
  inline void clear_has_page_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::QuotaLog > log_;
  ::google::protobuf::uint32 page_index_;
  friend void  protobuf_AddDesc_SceneItem_2eproto();
  friend void protobuf_AssignDesc_SceneItem_2eproto();
  friend void protobuf_ShutdownFile_SceneItem_2eproto();

  void InitAsDefaultInstance();
  static ReqQuotaLogCmd* default_instance_;
};
// -------------------------------------------------------------------

class ReqQuotaDetailCmd : public ::google::protobuf::Message {
 public:
  ReqQuotaDetailCmd();
  virtual ~ReqQuotaDetailCmd();

  ReqQuotaDetailCmd(const ReqQuotaDetailCmd& from);

  inline ReqQuotaDetailCmd& operator=(const ReqQuotaDetailCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqQuotaDetailCmd& default_instance();

  void Swap(ReqQuotaDetailCmd* other);

  // implements Message ----------------------------------------------

  ReqQuotaDetailCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqQuotaDetailCmd& from);
  void MergeFrom(const ReqQuotaDetailCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_REQ_QUOTA_DETAIL];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::ItemParam param() const;
  inline void set_param(::Cmd::ItemParam value);

  // optional uint32 page_index = 3;
  inline bool has_page_index() const;
  inline void clear_page_index();
  static const int kPageIndexFieldNumber = 3;
  inline ::google::protobuf::uint32 page_index() const;
  inline void set_page_index(::google::protobuf::uint32 value);

  // repeated .Cmd.QuotaDetail detail = 4;
  inline int detail_size() const;
  inline void clear_detail();
  static const int kDetailFieldNumber = 4;
  inline const ::Cmd::QuotaDetail& detail(int index) const;
  inline ::Cmd::QuotaDetail* mutable_detail(int index);
  inline ::Cmd::QuotaDetail* add_detail();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::QuotaDetail >&
      detail() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::QuotaDetail >*
      mutable_detail();

  // @@protoc_insertion_point(class_scope:Cmd.ReqQuotaDetailCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_page_index();
  inline void clear_has_page_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::QuotaDetail > detail_;
  ::google::protobuf::uint32 page_index_;
  friend void  protobuf_AddDesc_SceneItem_2eproto();
  friend void protobuf_AssignDesc_SceneItem_2eproto();
  friend void protobuf_ShutdownFile_SceneItem_2eproto();

  void InitAsDefaultInstance();
  static ReqQuotaDetailCmd* default_instance_;
};
// -------------------------------------------------------------------

class EquipPosData : public ::google::protobuf::Message {
 public:
  EquipPosData();
  virtual ~EquipPosData();

  EquipPosData(const EquipPosData& from);

  inline EquipPosData& operator=(const EquipPosData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipPosData& default_instance();

  void Swap(EquipPosData* other);

  // implements Message ----------------------------------------------

  EquipPosData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipPosData& from);
  void MergeFrom(const EquipPosData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.EEquipPos pos = 1 [default = EEQUIPPOS_MIN];
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 1;
  inline ::Cmd::EEquipPos pos() const;
  inline void set_pos(::Cmd::EEquipPos value);

  // optional uint32 offstarttime = 2 [default = 0];
  inline bool has_offstarttime() const;
  inline void clear_offstarttime();
  static const int kOffstarttimeFieldNumber = 2;
  inline ::google::protobuf::uint32 offstarttime() const;
  inline void set_offstarttime(::google::protobuf::uint32 value);

  // optional uint32 offendtime = 3 [default = 0];
  inline bool has_offendtime() const;
  inline void clear_offendtime();
  static const int kOffendtimeFieldNumber = 3;
  inline ::google::protobuf::uint32 offendtime() const;
  inline void set_offendtime(::google::protobuf::uint32 value);

  // optional uint32 protecttime = 4 [default = 0];
  inline bool has_protecttime() const;
  inline void clear_protecttime();
  static const int kProtecttimeFieldNumber = 4;
  inline ::google::protobuf::uint32 protecttime() const;
  inline void set_protecttime(::google::protobuf::uint32 value);

  // optional uint32 protectalways = 5 [default = 0];
  inline bool has_protectalways() const;
  inline void clear_protectalways();
  static const int kProtectalwaysFieldNumber = 5;
  inline ::google::protobuf::uint32 protectalways() const;
  inline void set_protectalways(::google::protobuf::uint32 value);

  // optional string recordguid = 6;
  inline bool has_recordguid() const;
  inline void clear_recordguid();
  static const int kRecordguidFieldNumber = 6;
  inline const ::std::string& recordguid() const;
  inline void set_recordguid(const ::std::string& value);
  inline void set_recordguid(const char* value);
  inline void set_recordguid(const char* value, size_t size);
  inline ::std::string* mutable_recordguid();
  inline ::std::string* release_recordguid();
  inline void set_allocated_recordguid(::std::string* recordguid);

  // @@protoc_insertion_point(class_scope:Cmd.EquipPosData)
 private:
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_offstarttime();
  inline void clear_has_offstarttime();
  inline void set_has_offendtime();
  inline void clear_has_offendtime();
  inline void set_has_protecttime();
  inline void clear_has_protecttime();
  inline void set_has_protectalways();
  inline void clear_has_protectalways();
  inline void set_has_recordguid();
  inline void clear_has_recordguid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int pos_;
  ::google::protobuf::uint32 offstarttime_;
  ::google::protobuf::uint32 offendtime_;
  ::google::protobuf::uint32 protecttime_;
  ::std::string* recordguid_;
  ::google::protobuf::uint32 protectalways_;
  friend void  protobuf_AddDesc_SceneItem_2eproto();
  friend void protobuf_AssignDesc_SceneItem_2eproto();
  friend void protobuf_ShutdownFile_SceneItem_2eproto();

  void InitAsDefaultInstance();
  static EquipPosData* default_instance_;
};
// -------------------------------------------------------------------

class EquipPosDataUpdate : public ::google::protobuf::Message {
 public:
  EquipPosDataUpdate();
  virtual ~EquipPosDataUpdate();

  EquipPosDataUpdate(const EquipPosDataUpdate& from);

  inline EquipPosDataUpdate& operator=(const EquipPosDataUpdate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipPosDataUpdate& default_instance();

  void Swap(EquipPosDataUpdate* other);

  // implements Message ----------------------------------------------

  EquipPosDataUpdate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipPosDataUpdate& from);
  void MergeFrom(const EquipPosDataUpdate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_EQUIPPOSDATA_UPDATE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::ItemParam param() const;
  inline void set_param(::Cmd::ItemParam value);

  // repeated .Cmd.EquipPosData datas = 3;
  inline int datas_size() const;
  inline void clear_datas();
  static const int kDatasFieldNumber = 3;
  inline const ::Cmd::EquipPosData& datas(int index) const;
  inline ::Cmd::EquipPosData* mutable_datas(int index);
  inline ::Cmd::EquipPosData* add_datas();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::EquipPosData >&
      datas() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::EquipPosData >*
      mutable_datas();

  // @@protoc_insertion_point(class_scope:Cmd.EquipPosDataUpdate)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::EquipPosData > datas_;
  friend void  protobuf_AddDesc_SceneItem_2eproto();
  friend void protobuf_AssignDesc_SceneItem_2eproto();
  friend void protobuf_ShutdownFile_SceneItem_2eproto();

  void InitAsDefaultInstance();
  static EquipPosDataUpdate* default_instance_;
};
// -------------------------------------------------------------------

class MatItemInfo : public ::google::protobuf::Message {
 public:
  MatItemInfo();
  virtual ~MatItemInfo();

  MatItemInfo(const MatItemInfo& from);

  inline MatItemInfo& operator=(const MatItemInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MatItemInfo& default_instance();

  void Swap(MatItemInfo* other);

  // implements Message ----------------------------------------------

  MatItemInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MatItemInfo& from);
  void MergeFrom(const MatItemInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 itemid = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 1;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.MatItemInfo)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 num_;
  friend void  protobuf_AddDesc_SceneItem_2eproto();
  friend void protobuf_AssignDesc_SceneItem_2eproto();
  friend void protobuf_ShutdownFile_SceneItem_2eproto();

  void InitAsDefaultInstance();
  static MatItemInfo* default_instance_;
};
// -------------------------------------------------------------------

class HighRefineMatComposeCmd : public ::google::protobuf::Message {
 public:
  HighRefineMatComposeCmd();
  virtual ~HighRefineMatComposeCmd();

  HighRefineMatComposeCmd(const HighRefineMatComposeCmd& from);

  inline HighRefineMatComposeCmd& operator=(const HighRefineMatComposeCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HighRefineMatComposeCmd& default_instance();

  void Swap(HighRefineMatComposeCmd* other);

  // implements Message ----------------------------------------------

  HighRefineMatComposeCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HighRefineMatComposeCmd& from);
  void MergeFrom(const HighRefineMatComposeCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_HIGHREFINE_MATCOMPOSE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::ItemParam param() const;
  inline void set_param(::Cmd::ItemParam value);

  // optional uint32 dataid = 3;
  inline bool has_dataid() const;
  inline void clear_dataid();
  static const int kDataidFieldNumber = 3;
  inline ::google::protobuf::uint32 dataid() const;
  inline void set_dataid(::google::protobuf::uint32 value);

  // optional uint64 npcid = 4;
  inline bool has_npcid() const;
  inline void clear_npcid();
  static const int kNpcidFieldNumber = 4;
  inline ::google::protobuf::uint64 npcid() const;
  inline void set_npcid(::google::protobuf::uint64 value);

  // repeated .Cmd.MatItemInfo mainmaterial = 5;
  inline int mainmaterial_size() const;
  inline void clear_mainmaterial();
  static const int kMainmaterialFieldNumber = 5;
  inline const ::Cmd::MatItemInfo& mainmaterial(int index) const;
  inline ::Cmd::MatItemInfo* mutable_mainmaterial(int index);
  inline ::Cmd::MatItemInfo* add_mainmaterial();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::MatItemInfo >&
      mainmaterial() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::MatItemInfo >*
      mutable_mainmaterial();

  // repeated .Cmd.MatItemInfo vicematerial = 6;
  inline int vicematerial_size() const;
  inline void clear_vicematerial();
  static const int kVicematerialFieldNumber = 6;
  inline const ::Cmd::MatItemInfo& vicematerial(int index) const;
  inline ::Cmd::MatItemInfo* mutable_vicematerial(int index);
  inline ::Cmd::MatItemInfo* add_vicematerial();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::MatItemInfo >&
      vicematerial() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::MatItemInfo >*
      mutable_vicematerial();

  // @@protoc_insertion_point(class_scope:Cmd.HighRefineMatComposeCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_dataid();
  inline void clear_has_dataid();
  inline void set_has_npcid();
  inline void clear_has_npcid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 npcid_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::MatItemInfo > mainmaterial_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::MatItemInfo > vicematerial_;
  ::google::protobuf::uint32 dataid_;
  friend void  protobuf_AddDesc_SceneItem_2eproto();
  friend void protobuf_AssignDesc_SceneItem_2eproto();
  friend void protobuf_ShutdownFile_SceneItem_2eproto();

  void InitAsDefaultInstance();
  static HighRefineMatComposeCmd* default_instance_;
};
// -------------------------------------------------------------------

class HighRefineCmd : public ::google::protobuf::Message {
 public:
  HighRefineCmd();
  virtual ~HighRefineCmd();

  HighRefineCmd(const HighRefineCmd& from);

  inline HighRefineCmd& operator=(const HighRefineCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HighRefineCmd& default_instance();

  void Swap(HighRefineCmd* other);

  // implements Message ----------------------------------------------

  HighRefineCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HighRefineCmd& from);
  void MergeFrom(const HighRefineCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_HIGHREFINE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::ItemParam param() const;
  inline void set_param(::Cmd::ItemParam value);

  // optional uint32 dataid = 3;
  inline bool has_dataid() const;
  inline void clear_dataid();
  static const int kDataidFieldNumber = 3;
  inline ::google::protobuf::uint32 dataid() const;
  inline void set_dataid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.HighRefineCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_dataid();
  inline void clear_has_dataid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 dataid_;
  friend void  protobuf_AddDesc_SceneItem_2eproto();
  friend void protobuf_AssignDesc_SceneItem_2eproto();
  friend void protobuf_ShutdownFile_SceneItem_2eproto();

  void InitAsDefaultInstance();
  static HighRefineCmd* default_instance_;
};
// -------------------------------------------------------------------

class HighRefineData : public ::google::protobuf::Message {
 public:
  HighRefineData();
  virtual ~HighRefineData();

  HighRefineData(const HighRefineData& from);

  inline HighRefineData& operator=(const HighRefineData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HighRefineData& default_instance();

  void Swap(HighRefineData* other);

  // implements Message ----------------------------------------------

  HighRefineData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HighRefineData& from);
  void MergeFrom(const HighRefineData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.EEquipPos pos = 1;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 1;
  inline ::Cmd::EEquipPos pos() const;
  inline void set_pos(::Cmd::EEquipPos value);

  // repeated uint32 level = 2;
  inline int level_size() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 level(int index) const;
  inline void set_level(int index, ::google::protobuf::uint32 value);
  inline void add_level(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      level() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_level();

  // @@protoc_insertion_point(class_scope:Cmd.HighRefineData)
 private:
  inline void set_has_pos();
  inline void clear_has_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > level_;
  int pos_;
  friend void  protobuf_AddDesc_SceneItem_2eproto();
  friend void protobuf_AssignDesc_SceneItem_2eproto();
  friend void protobuf_ShutdownFile_SceneItem_2eproto();

  void InitAsDefaultInstance();
  static HighRefineData* default_instance_;
};
// -------------------------------------------------------------------

class NtfHighRefineDataCmd : public ::google::protobuf::Message {
 public:
  NtfHighRefineDataCmd();
  virtual ~NtfHighRefineDataCmd();

  NtfHighRefineDataCmd(const NtfHighRefineDataCmd& from);

  inline NtfHighRefineDataCmd& operator=(const NtfHighRefineDataCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NtfHighRefineDataCmd& default_instance();

  void Swap(NtfHighRefineDataCmd* other);

  // implements Message ----------------------------------------------

  NtfHighRefineDataCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NtfHighRefineDataCmd& from);
  void MergeFrom(const NtfHighRefineDataCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_NTF_HIGHTREFINE_DATA];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::ItemParam param() const;
  inline void set_param(::Cmd::ItemParam value);

  // repeated .Cmd.HighRefineData datas = 3;
  inline int datas_size() const;
  inline void clear_datas();
  static const int kDatasFieldNumber = 3;
  inline const ::Cmd::HighRefineData& datas(int index) const;
  inline ::Cmd::HighRefineData* mutable_datas(int index);
  inline ::Cmd::HighRefineData* add_datas();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::HighRefineData >&
      datas() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::HighRefineData >*
      mutable_datas();

  // @@protoc_insertion_point(class_scope:Cmd.NtfHighRefineDataCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::HighRefineData > datas_;
  friend void  protobuf_AddDesc_SceneItem_2eproto();
  friend void protobuf_AssignDesc_SceneItem_2eproto();
  friend void protobuf_ShutdownFile_SceneItem_2eproto();

  void InitAsDefaultInstance();
  static NtfHighRefineDataCmd* default_instance_;
};
// -------------------------------------------------------------------

class UpdateHighRefineDataCmd : public ::google::protobuf::Message {
 public:
  UpdateHighRefineDataCmd();
  virtual ~UpdateHighRefineDataCmd();

  UpdateHighRefineDataCmd(const UpdateHighRefineDataCmd& from);

  inline UpdateHighRefineDataCmd& operator=(const UpdateHighRefineDataCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateHighRefineDataCmd& default_instance();

  void Swap(UpdateHighRefineDataCmd* other);

  // implements Message ----------------------------------------------

  UpdateHighRefineDataCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateHighRefineDataCmd& from);
  void MergeFrom(const UpdateHighRefineDataCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_UPDATE_HIGHTREFINE_DATA];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::ItemParam param() const;
  inline void set_param(::Cmd::ItemParam value);

  // optional .Cmd.HighRefineData data = 3;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline const ::Cmd::HighRefineData& data() const;
  inline ::Cmd::HighRefineData* mutable_data();
  inline ::Cmd::HighRefineData* release_data();
  inline void set_allocated_data(::Cmd::HighRefineData* data);

  // @@protoc_insertion_point(class_scope:Cmd.UpdateHighRefineDataCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::Cmd::HighRefineData* data_;
  friend void  protobuf_AddDesc_SceneItem_2eproto();
  friend void protobuf_AssignDesc_SceneItem_2eproto();
  friend void protobuf_ShutdownFile_SceneItem_2eproto();

  void InitAsDefaultInstance();
  static UpdateHighRefineDataCmd* default_instance_;
};
// -------------------------------------------------------------------

class UseCodItemCmd : public ::google::protobuf::Message {
 public:
  UseCodItemCmd();
  virtual ~UseCodItemCmd();

  UseCodItemCmd(const UseCodItemCmd& from);

  inline UseCodItemCmd& operator=(const UseCodItemCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UseCodItemCmd& default_instance();

  void Swap(UseCodItemCmd* other);

  // implements Message ----------------------------------------------

  UseCodItemCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UseCodItemCmd& from);
  void MergeFrom(const UseCodItemCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_USE_CODE_ITEM];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::ItemParam param() const;
  inline void set_param(::Cmd::ItemParam value);

  // optional string guid = 3;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 3;
  inline const ::std::string& guid() const;
  inline void set_guid(const ::std::string& value);
  inline void set_guid(const char* value);
  inline void set_guid(const char* value, size_t size);
  inline ::std::string* mutable_guid();
  inline ::std::string* release_guid();
  inline void set_allocated_guid(::std::string* guid);

  // optional string code = 4;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 4;
  inline const ::std::string& code() const;
  inline void set_code(const ::std::string& value);
  inline void set_code(const char* value);
  inline void set_code(const char* value, size_t size);
  inline ::std::string* mutable_code();
  inline ::std::string* release_code();
  inline void set_allocated_code(::std::string* code);

  // @@protoc_insertion_point(class_scope:Cmd.UseCodItemCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_code();
  inline void clear_has_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::std::string* guid_;
  ::std::string* code_;
  friend void  protobuf_AddDesc_SceneItem_2eproto();
  friend void protobuf_AssignDesc_SceneItem_2eproto();
  friend void protobuf_ShutdownFile_SceneItem_2eproto();

  void InitAsDefaultInstance();
  static UseCodItemCmd* default_instance_;
};
// -------------------------------------------------------------------

class AddJobLevelItemCmd : public ::google::protobuf::Message {
 public:
  AddJobLevelItemCmd();
  virtual ~AddJobLevelItemCmd();

  AddJobLevelItemCmd(const AddJobLevelItemCmd& from);

  inline AddJobLevelItemCmd& operator=(const AddJobLevelItemCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddJobLevelItemCmd& default_instance();

  void Swap(AddJobLevelItemCmd* other);

  // implements Message ----------------------------------------------

  AddJobLevelItemCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddJobLevelItemCmd& from);
  void MergeFrom(const AddJobLevelItemCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_ADD_JOBLEVEL];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::ItemParam param() const;
  inline void set_param(::Cmd::ItemParam value);

  // optional uint32 item = 3 [default = 0];
  inline bool has_item() const;
  inline void clear_item();
  static const int kItemFieldNumber = 3;
  inline ::google::protobuf::uint32 item() const;
  inline void set_item(::google::protobuf::uint32 value);

  // optional uint32 num = 4 [default = 0];
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 4;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.AddJobLevelItemCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_item();
  inline void clear_has_item();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 item_;
  ::google::protobuf::uint32 num_;
  friend void  protobuf_AddDesc_SceneItem_2eproto();
  friend void protobuf_AssignDesc_SceneItem_2eproto();
  friend void protobuf_ShutdownFile_SceneItem_2eproto();

  void InitAsDefaultInstance();
  static AddJobLevelItemCmd* default_instance_;
};
// -------------------------------------------------------------------

class LotterGivBuyCountCmd : public ::google::protobuf::Message {
 public:
  LotterGivBuyCountCmd();
  virtual ~LotterGivBuyCountCmd();

  LotterGivBuyCountCmd(const LotterGivBuyCountCmd& from);

  inline LotterGivBuyCountCmd& operator=(const LotterGivBuyCountCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LotterGivBuyCountCmd& default_instance();

  void Swap(LotterGivBuyCountCmd* other);

  // implements Message ----------------------------------------------

  LotterGivBuyCountCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LotterGivBuyCountCmd& from);
  void MergeFrom(const LotterGivBuyCountCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_LOTTERY_GIVE_BUY_COUNT];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::ItemParam param() const;
  inline void set_param(::Cmd::ItemParam value);

  // optional uint32 got_count = 3;
  inline bool has_got_count() const;
  inline void clear_got_count();
  static const int kGotCountFieldNumber = 3;
  inline ::google::protobuf::uint32 got_count() const;
  inline void set_got_count(::google::protobuf::uint32 value);

  // optional uint32 max_count = 4;
  inline bool has_max_count() const;
  inline void clear_max_count();
  static const int kMaxCountFieldNumber = 4;
  inline ::google::protobuf::uint32 max_count() const;
  inline void set_max_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.LotterGivBuyCountCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_got_count();
  inline void clear_has_got_count();
  inline void set_has_max_count();
  inline void clear_has_max_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 got_count_;
  ::google::protobuf::uint32 max_count_;
  friend void  protobuf_AddDesc_SceneItem_2eproto();
  friend void protobuf_AssignDesc_SceneItem_2eproto();
  friend void protobuf_ShutdownFile_SceneItem_2eproto();

  void InitAsDefaultInstance();
  static LotterGivBuyCountCmd* default_instance_;
};
// -------------------------------------------------------------------

class GiveWeddingDressCmd : public ::google::protobuf::Message {
 public:
  GiveWeddingDressCmd();
  virtual ~GiveWeddingDressCmd();

  GiveWeddingDressCmd(const GiveWeddingDressCmd& from);

  inline GiveWeddingDressCmd& operator=(const GiveWeddingDressCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GiveWeddingDressCmd& default_instance();

  void Swap(GiveWeddingDressCmd* other);

  // implements Message ----------------------------------------------

  GiveWeddingDressCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GiveWeddingDressCmd& from);
  void MergeFrom(const GiveWeddingDressCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_GIVE_WEDDING_DRESS];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::ItemParam param() const;
  inline void set_param(::Cmd::ItemParam value);

  // optional string guid = 3;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 3;
  inline const ::std::string& guid() const;
  inline void set_guid(const ::std::string& value);
  inline void set_guid(const char* value);
  inline void set_guid(const char* value, size_t size);
  inline ::std::string* mutable_guid();
  inline ::std::string* release_guid();
  inline void set_allocated_guid(::std::string* guid);

  // optional string content = 6;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 6;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional uint64 receiverid = 8;
  inline bool has_receiverid() const;
  inline void clear_receiverid();
  static const int kReceiveridFieldNumber = 8;
  inline ::google::protobuf::uint64 receiverid() const;
  inline void set_receiverid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.GiveWeddingDressCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_receiverid();
  inline void clear_has_receiverid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::std::string* guid_;
  ::std::string* content_;
  ::google::protobuf::uint64 receiverid_;
  friend void  protobuf_AddDesc_SceneItem_2eproto();
  friend void protobuf_AssignDesc_SceneItem_2eproto();
  friend void protobuf_ShutdownFile_SceneItem_2eproto();

  void InitAsDefaultInstance();
  static GiveWeddingDressCmd* default_instance_;
};
// -------------------------------------------------------------------

class QuickStoreItemCmd : public ::google::protobuf::Message {
 public:
  QuickStoreItemCmd();
  virtual ~QuickStoreItemCmd();

  QuickStoreItemCmd(const QuickStoreItemCmd& from);

  inline QuickStoreItemCmd& operator=(const QuickStoreItemCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QuickStoreItemCmd& default_instance();

  void Swap(QuickStoreItemCmd* other);

  // implements Message ----------------------------------------------

  QuickStoreItemCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QuickStoreItemCmd& from);
  void MergeFrom(const QuickStoreItemCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_QUICK_STOREITEM];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::ItemParam param() const;
  inline void set_param(::Cmd::ItemParam value);

  // repeated .Cmd.ItemInfo items = 3;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 3;
  inline const ::Cmd::ItemInfo& items(int index) const;
  inline ::Cmd::ItemInfo* mutable_items(int index);
  inline ::Cmd::ItemInfo* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ItemInfo >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::ItemInfo >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:Cmd.QuickStoreItemCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::ItemInfo > items_;
  friend void  protobuf_AddDesc_SceneItem_2eproto();
  friend void protobuf_AssignDesc_SceneItem_2eproto();
  friend void protobuf_ShutdownFile_SceneItem_2eproto();

  void InitAsDefaultInstance();
  static QuickStoreItemCmd* default_instance_;
};
// -------------------------------------------------------------------

class QuickSellItemCmd : public ::google::protobuf::Message {
 public:
  QuickSellItemCmd();
  virtual ~QuickSellItemCmd();

  QuickSellItemCmd(const QuickSellItemCmd& from);

  inline QuickSellItemCmd& operator=(const QuickSellItemCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QuickSellItemCmd& default_instance();

  void Swap(QuickSellItemCmd* other);

  // implements Message ----------------------------------------------

  QuickSellItemCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QuickSellItemCmd& from);
  void MergeFrom(const QuickSellItemCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_QUICK_SELLITEM];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::ItemParam param() const;
  inline void set_param(::Cmd::ItemParam value);

  // repeated .Cmd.SItem items = 3;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 3;
  inline const ::Cmd::SItem& items(int index) const;
  inline ::Cmd::SItem* mutable_items(int index);
  inline ::Cmd::SItem* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::SItem >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::SItem >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:Cmd.QuickSellItemCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::SItem > items_;
  friend void  protobuf_AddDesc_SceneItem_2eproto();
  friend void protobuf_AssignDesc_SceneItem_2eproto();
  friend void protobuf_ShutdownFile_SceneItem_2eproto();

  void InitAsDefaultInstance();
  static QuickSellItemCmd* default_instance_;
};
// -------------------------------------------------------------------

class EnchantTransItemCmd : public ::google::protobuf::Message {
 public:
  EnchantTransItemCmd();
  virtual ~EnchantTransItemCmd();

  EnchantTransItemCmd(const EnchantTransItemCmd& from);

  inline EnchantTransItemCmd& operator=(const EnchantTransItemCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EnchantTransItemCmd& default_instance();

  void Swap(EnchantTransItemCmd* other);

  // implements Message ----------------------------------------------

  EnchantTransItemCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EnchantTransItemCmd& from);
  void MergeFrom(const EnchantTransItemCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_ENCHANT_TRANS];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::ItemParam param() const;
  inline void set_param(::Cmd::ItemParam value);

  // optional string from_guid = 3;
  inline bool has_from_guid() const;
  inline void clear_from_guid();
  static const int kFromGuidFieldNumber = 3;
  inline const ::std::string& from_guid() const;
  inline void set_from_guid(const ::std::string& value);
  inline void set_from_guid(const char* value);
  inline void set_from_guid(const char* value, size_t size);
  inline ::std::string* mutable_from_guid();
  inline ::std::string* release_from_guid();
  inline void set_allocated_from_guid(::std::string* from_guid);

  // optional string to_guid = 4;
  inline bool has_to_guid() const;
  inline void clear_to_guid();
  static const int kToGuidFieldNumber = 4;
  inline const ::std::string& to_guid() const;
  inline void set_to_guid(const ::std::string& value);
  inline void set_to_guid(const char* value);
  inline void set_to_guid(const char* value, size_t size);
  inline ::std::string* mutable_to_guid();
  inline ::std::string* release_to_guid();
  inline void set_allocated_to_guid(::std::string* to_guid);

  // optional bool success = 5 [default = false];
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 5;
  inline bool success() const;
  inline void set_success(bool value);

  // @@protoc_insertion_point(class_scope:Cmd.EnchantTransItemCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_from_guid();
  inline void clear_has_from_guid();
  inline void set_has_to_guid();
  inline void clear_has_to_guid();
  inline void set_has_success();
  inline void clear_has_success();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::std::string* from_guid_;
  ::std::string* to_guid_;
  bool success_;
  friend void  protobuf_AddDesc_SceneItem_2eproto();
  friend void protobuf_AssignDesc_SceneItem_2eproto();
  friend void protobuf_ShutdownFile_SceneItem_2eproto();

  void InitAsDefaultInstance();
  static EnchantTransItemCmd* default_instance_;
};
// -------------------------------------------------------------------

class QueryLotteryHeadItemCmd : public ::google::protobuf::Message {
 public:
  QueryLotteryHeadItemCmd();
  virtual ~QueryLotteryHeadItemCmd();

  QueryLotteryHeadItemCmd(const QueryLotteryHeadItemCmd& from);

  inline QueryLotteryHeadItemCmd& operator=(const QueryLotteryHeadItemCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryLotteryHeadItemCmd& default_instance();

  void Swap(QueryLotteryHeadItemCmd* other);

  // implements Message ----------------------------------------------

  QueryLotteryHeadItemCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryLotteryHeadItemCmd& from);
  void MergeFrom(const QueryLotteryHeadItemCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_QUERY_LOTTERYHEAD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::ItemParam param() const;
  inline void set_param(::Cmd::ItemParam value);

  // repeated uint32 ids = 3;
  inline int ids_size() const;
  inline void clear_ids();
  static const int kIdsFieldNumber = 3;
  inline ::google::protobuf::uint32 ids(int index) const;
  inline void set_ids(int index, ::google::protobuf::uint32 value);
  inline void add_ids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_ids();

  // @@protoc_insertion_point(class_scope:Cmd.QueryLotteryHeadItemCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > ids_;
  friend void  protobuf_AddDesc_SceneItem_2eproto();
  friend void protobuf_AssignDesc_SceneItem_2eproto();
  friend void protobuf_ShutdownFile_SceneItem_2eproto();

  void InitAsDefaultInstance();
  static QueryLotteryHeadItemCmd* default_instance_;
};
// -------------------------------------------------------------------

class LotteryRateInfo : public ::google::protobuf::Message {
 public:
  LotteryRateInfo();
  virtual ~LotteryRateInfo();

  LotteryRateInfo(const LotteryRateInfo& from);

  inline LotteryRateInfo& operator=(const LotteryRateInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LotteryRateInfo& default_instance();

  void Swap(LotteryRateInfo* other);

  // implements Message ----------------------------------------------

  LotteryRateInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LotteryRateInfo& from);
  void MergeFrom(const LotteryRateInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint32 rate = 2;
  inline bool has_rate() const;
  inline void clear_rate();
  static const int kRateFieldNumber = 2;
  inline ::google::protobuf::uint32 rate() const;
  inline void set_rate(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.LotteryRateInfo)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_rate();
  inline void clear_has_rate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 rate_;
  friend void  protobuf_AddDesc_SceneItem_2eproto();
  friend void protobuf_AssignDesc_SceneItem_2eproto();
  friend void protobuf_ShutdownFile_SceneItem_2eproto();

  void InitAsDefaultInstance();
  static LotteryRateInfo* default_instance_;
};
// -------------------------------------------------------------------

class LotteryRateQueryCmd : public ::google::protobuf::Message {
 public:
  LotteryRateQueryCmd();
  virtual ~LotteryRateQueryCmd();

  LotteryRateQueryCmd(const LotteryRateQueryCmd& from);

  inline LotteryRateQueryCmd& operator=(const LotteryRateQueryCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LotteryRateQueryCmd& default_instance();

  void Swap(LotteryRateQueryCmd* other);

  // implements Message ----------------------------------------------

  LotteryRateQueryCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LotteryRateQueryCmd& from);
  void MergeFrom(const LotteryRateQueryCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_LOTTERY_RATE_QUERY];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::ItemParam param() const;
  inline void set_param(::Cmd::ItemParam value);

  // optional .Cmd.ELotteryType type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::Cmd::ELotteryType type() const;
  inline void set_type(::Cmd::ELotteryType value);

  // repeated .Cmd.LotteryRateInfo infos = 4;
  inline int infos_size() const;
  inline void clear_infos();
  static const int kInfosFieldNumber = 4;
  inline const ::Cmd::LotteryRateInfo& infos(int index) const;
  inline ::Cmd::LotteryRateInfo* mutable_infos(int index);
  inline ::Cmd::LotteryRateInfo* add_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::LotteryRateInfo >&
      infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::LotteryRateInfo >*
      mutable_infos();

  // @@protoc_insertion_point(class_scope:Cmd.LotteryRateQueryCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::LotteryRateInfo > infos_;
  int type_;
  friend void  protobuf_AddDesc_SceneItem_2eproto();
  friend void protobuf_AssignDesc_SceneItem_2eproto();
  friend void protobuf_ShutdownFile_SceneItem_2eproto();

  void InitAsDefaultInstance();
  static LotteryRateQueryCmd* default_instance_;
};
// -------------------------------------------------------------------

class EquipComposeItemCmd : public ::google::protobuf::Message {
 public:
  EquipComposeItemCmd();
  virtual ~EquipComposeItemCmd();

  EquipComposeItemCmd(const EquipComposeItemCmd& from);

  inline EquipComposeItemCmd& operator=(const EquipComposeItemCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipComposeItemCmd& default_instance();

  void Swap(EquipComposeItemCmd* other);

  // implements Message ----------------------------------------------

  EquipComposeItemCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipComposeItemCmd& from);
  void MergeFrom(const EquipComposeItemCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_EQUIPCOMPOSE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::ItemParam param() const;
  inline void set_param(::Cmd::ItemParam value);

  // optional uint32 id = 3 [default = 0];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // repeated string materialequips = 4;
  inline int materialequips_size() const;
  inline void clear_materialequips();
  static const int kMaterialequipsFieldNumber = 4;
  inline const ::std::string& materialequips(int index) const;
  inline ::std::string* mutable_materialequips(int index);
  inline void set_materialequips(int index, const ::std::string& value);
  inline void set_materialequips(int index, const char* value);
  inline void set_materialequips(int index, const char* value, size_t size);
  inline ::std::string* add_materialequips();
  inline void add_materialequips(const ::std::string& value);
  inline void add_materialequips(const char* value);
  inline void add_materialequips(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& materialequips() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_materialequips();

  // optional uint32 retmsg = 5 [default = 0];
  inline bool has_retmsg() const;
  inline void clear_retmsg();
  static const int kRetmsgFieldNumber = 5;
  inline ::google::protobuf::uint32 retmsg() const;
  inline void set_retmsg(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.EquipComposeItemCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_retmsg();
  inline void clear_has_retmsg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedPtrField< ::std::string> materialequips_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 retmsg_;
  friend void  protobuf_AddDesc_SceneItem_2eproto();
  friend void protobuf_AssignDesc_SceneItem_2eproto();
  friend void protobuf_ShutdownFile_SceneItem_2eproto();

  void InitAsDefaultInstance();
  static EquipComposeItemCmd* default_instance_;
};
// ===================================================================


// ===================================================================

// ItemInfo

// optional string guid = 1;
inline bool ItemInfo::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ItemInfo::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ItemInfo::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ItemInfo::clear_guid() {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_->clear();
  }
  clear_has_guid();
}
inline const ::std::string& ItemInfo::guid() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemInfo.guid)
  return *guid_;
}
inline void ItemInfo::set_guid(const ::std::string& value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ItemInfo.guid)
}
inline void ItemInfo::set_guid(const char* value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ItemInfo.guid)
}
inline void ItemInfo::set_guid(const char* value, size_t size) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ItemInfo.guid)
}
inline ::std::string* ItemInfo::mutable_guid() {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ItemInfo.guid)
  return guid_;
}
inline ::std::string* ItemInfo::release_guid() {
  clear_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = guid_;
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ItemInfo::set_allocated_guid(::std::string* guid) {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guid_;
  }
  if (guid) {
    set_has_guid();
    guid_ = guid;
  } else {
    clear_has_guid();
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ItemInfo.guid)
}

// optional uint32 id = 2 [default = 0];
inline bool ItemInfo::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ItemInfo::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ItemInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ItemInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 ItemInfo::id() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemInfo.id)
  return id_;
}
inline void ItemInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemInfo.id)
}

// optional uint32 count = 3 [default = 1];
inline bool ItemInfo::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ItemInfo::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ItemInfo::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ItemInfo::clear_count() {
  count_ = 1u;
  clear_has_count();
}
inline ::google::protobuf::uint32 ItemInfo::count() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemInfo.count)
  return count_;
}
inline void ItemInfo::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemInfo.count)
}

// optional uint32 index = 4 [default = 0];
inline bool ItemInfo::has_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ItemInfo::set_has_index() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ItemInfo::clear_has_index() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ItemInfo::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 ItemInfo::index() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemInfo.index)
  return index_;
}
inline void ItemInfo::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemInfo.index)
}

// optional uint32 createtime = 5 [default = 0];
inline bool ItemInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ItemInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ItemInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ItemInfo::clear_createtime() {
  createtime_ = 0u;
  clear_has_createtime();
}
inline ::google::protobuf::uint32 ItemInfo::createtime() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemInfo.createtime)
  return createtime_;
}
inline void ItemInfo::set_createtime(::google::protobuf::uint32 value) {
  set_has_createtime();
  createtime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemInfo.createtime)
}

// optional uint64 cd = 6 [default = 0];
inline bool ItemInfo::has_cd() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ItemInfo::set_has_cd() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ItemInfo::clear_has_cd() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ItemInfo::clear_cd() {
  cd_ = GOOGLE_ULONGLONG(0);
  clear_has_cd();
}
inline ::google::protobuf::uint64 ItemInfo::cd() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemInfo.cd)
  return cd_;
}
inline void ItemInfo::set_cd(::google::protobuf::uint64 value) {
  set_has_cd();
  cd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemInfo.cd)
}

// optional .Cmd.EItemType type = 7 [default = EITEMTYPE_MIN];
inline bool ItemInfo::has_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ItemInfo::set_has_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ItemInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ItemInfo::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Cmd::EItemType ItemInfo::type() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemInfo.type)
  return static_cast< ::Cmd::EItemType >(type_);
}
inline void ItemInfo::set_type(::Cmd::EItemType value) {
  assert(::Cmd::EItemType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemInfo.type)
}

// optional .Cmd.EBindType bind = 8 [default = EBINDTYPE_MIN];
inline bool ItemInfo::has_bind() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ItemInfo::set_has_bind() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ItemInfo::clear_has_bind() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ItemInfo::clear_bind() {
  bind_ = 0;
  clear_has_bind();
}
inline ::Cmd::EBindType ItemInfo::bind() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemInfo.bind)
  return static_cast< ::Cmd::EBindType >(bind_);
}
inline void ItemInfo::set_bind(::Cmd::EBindType value) {
  assert(::Cmd::EBindType_IsValid(value));
  set_has_bind();
  bind_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemInfo.bind)
}

// optional .Cmd.EExpireType expire = 9 [default = EEXPIRETYPE_MIN];
inline bool ItemInfo::has_expire() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ItemInfo::set_has_expire() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ItemInfo::clear_has_expire() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ItemInfo::clear_expire() {
  expire_ = 0;
  clear_has_expire();
}
inline ::Cmd::EExpireType ItemInfo::expire() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemInfo.expire)
  return static_cast< ::Cmd::EExpireType >(expire_);
}
inline void ItemInfo::set_expire(::Cmd::EExpireType value) {
  assert(::Cmd::EExpireType_IsValid(value));
  set_has_expire();
  expire_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemInfo.expire)
}

// optional .Cmd.EQualityType quality = 10 [default = EQUALITYTYPE_MIN];
inline bool ItemInfo::has_quality() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ItemInfo::set_has_quality() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ItemInfo::clear_has_quality() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ItemInfo::clear_quality() {
  quality_ = 0;
  clear_has_quality();
}
inline ::Cmd::EQualityType ItemInfo::quality() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemInfo.quality)
  return static_cast< ::Cmd::EQualityType >(quality_);
}
inline void ItemInfo::set_quality(::Cmd::EQualityType value) {
  assert(::Cmd::EQualityType_IsValid(value));
  set_has_quality();
  quality_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemInfo.quality)
}

// optional .Cmd.EEquipType equipType = 11 [default = EEQUIPTYPE_MIN];
inline bool ItemInfo::has_equiptype() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ItemInfo::set_has_equiptype() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ItemInfo::clear_has_equiptype() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ItemInfo::clear_equiptype() {
  equiptype_ = 0;
  clear_has_equiptype();
}
inline ::Cmd::EEquipType ItemInfo::equiptype() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemInfo.equipType)
  return static_cast< ::Cmd::EEquipType >(equiptype_);
}
inline void ItemInfo::set_equiptype(::Cmd::EEquipType value) {
  assert(::Cmd::EEquipType_IsValid(value));
  set_has_equiptype();
  equiptype_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemInfo.equipType)
}

// optional .Cmd.ESource source = 12 [default = ESOURCE_NORMAL];
inline bool ItemInfo::has_source() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ItemInfo::set_has_source() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ItemInfo::clear_has_source() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ItemInfo::clear_source() {
  source_ = 1;
  clear_has_source();
}
inline ::Cmd::ESource ItemInfo::source() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemInfo.source)
  return static_cast< ::Cmd::ESource >(source_);
}
inline void ItemInfo::set_source(::Cmd::ESource value) {
  assert(::Cmd::ESource_IsValid(value));
  set_has_source();
  source_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemInfo.source)
}

// optional bool isnew = 13 [default = false];
inline bool ItemInfo::has_isnew() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ItemInfo::set_has_isnew() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ItemInfo::clear_has_isnew() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ItemInfo::clear_isnew() {
  isnew_ = false;
  clear_has_isnew();
}
inline bool ItemInfo::isnew() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemInfo.isnew)
  return isnew_;
}
inline void ItemInfo::set_isnew(bool value) {
  set_has_isnew();
  isnew_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemInfo.isnew)
}

// optional uint32 maxcardslot = 14 [default = 0];
inline bool ItemInfo::has_maxcardslot() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ItemInfo::set_has_maxcardslot() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ItemInfo::clear_has_maxcardslot() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ItemInfo::clear_maxcardslot() {
  maxcardslot_ = 0u;
  clear_has_maxcardslot();
}
inline ::google::protobuf::uint32 ItemInfo::maxcardslot() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemInfo.maxcardslot)
  return maxcardslot_;
}
inline void ItemInfo::set_maxcardslot(::google::protobuf::uint32 value) {
  set_has_maxcardslot();
  maxcardslot_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemInfo.maxcardslot)
}

// optional bool ishint = 15 [default = false];
inline bool ItemInfo::has_ishint() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ItemInfo::set_has_ishint() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ItemInfo::clear_has_ishint() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ItemInfo::clear_ishint() {
  ishint_ = false;
  clear_has_ishint();
}
inline bool ItemInfo::ishint() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemInfo.ishint)
  return ishint_;
}
inline void ItemInfo::set_ishint(bool value) {
  set_has_ishint();
  ishint_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemInfo.ishint)
}

// optional bool isactive = 16 [default = false];
inline bool ItemInfo::has_isactive() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ItemInfo::set_has_isactive() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ItemInfo::clear_has_isactive() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ItemInfo::clear_isactive() {
  isactive_ = false;
  clear_has_isactive();
}
inline bool ItemInfo::isactive() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemInfo.isactive)
  return isactive_;
}
inline void ItemInfo::set_isactive(bool value) {
  set_has_isactive();
  isactive_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemInfo.isactive)
}

// optional uint32 source_npc = 17 [default = 0];
inline bool ItemInfo::has_source_npc() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ItemInfo::set_has_source_npc() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ItemInfo::clear_has_source_npc() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ItemInfo::clear_source_npc() {
  source_npc_ = 0u;
  clear_has_source_npc();
}
inline ::google::protobuf::uint32 ItemInfo::source_npc() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemInfo.source_npc)
  return source_npc_;
}
inline void ItemInfo::set_source_npc(::google::protobuf::uint32 value) {
  set_has_source_npc();
  source_npc_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemInfo.source_npc)
}

// optional uint32 refinelv = 18 [default = 0];
inline bool ItemInfo::has_refinelv() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ItemInfo::set_has_refinelv() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ItemInfo::clear_has_refinelv() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ItemInfo::clear_refinelv() {
  refinelv_ = 0u;
  clear_has_refinelv();
}
inline ::google::protobuf::uint32 ItemInfo::refinelv() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemInfo.refinelv)
  return refinelv_;
}
inline void ItemInfo::set_refinelv(::google::protobuf::uint32 value) {
  set_has_refinelv();
  refinelv_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemInfo.refinelv)
}

// optional uint32 chargemoney = 19 [default = 0];
inline bool ItemInfo::has_chargemoney() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ItemInfo::set_has_chargemoney() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ItemInfo::clear_has_chargemoney() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ItemInfo::clear_chargemoney() {
  chargemoney_ = 0u;
  clear_has_chargemoney();
}
inline ::google::protobuf::uint32 ItemInfo::chargemoney() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemInfo.chargemoney)
  return chargemoney_;
}
inline void ItemInfo::set_chargemoney(::google::protobuf::uint32 value) {
  set_has_chargemoney();
  chargemoney_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemInfo.chargemoney)
}

// optional uint32 overtime = 20 [default = 0];
inline bool ItemInfo::has_overtime() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ItemInfo::set_has_overtime() {
  _has_bits_[0] |= 0x00080000u;
}
inline void ItemInfo::clear_has_overtime() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void ItemInfo::clear_overtime() {
  overtime_ = 0u;
  clear_has_overtime();
}
inline ::google::protobuf::uint32 ItemInfo::overtime() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemInfo.overtime)
  return overtime_;
}
inline void ItemInfo::set_overtime(::google::protobuf::uint32 value) {
  set_has_overtime();
  overtime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemInfo.overtime)
}

// optional uint64 quota = 21 [default = 0];
inline bool ItemInfo::has_quota() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void ItemInfo::set_has_quota() {
  _has_bits_[0] |= 0x00100000u;
}
inline void ItemInfo::clear_has_quota() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void ItemInfo::clear_quota() {
  quota_ = GOOGLE_ULONGLONG(0);
  clear_has_quota();
}
inline ::google::protobuf::uint64 ItemInfo::quota() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemInfo.quota)
  return quota_;
}
inline void ItemInfo::set_quota(::google::protobuf::uint64 value) {
  set_has_quota();
  quota_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemInfo.quota)
}

// -------------------------------------------------------------------

// RefineCompose

// optional uint32 id = 1 [default = 0];
inline bool RefineCompose::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RefineCompose::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RefineCompose::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RefineCompose::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 RefineCompose::id() const {
  // @@protoc_insertion_point(field_get:Cmd.RefineCompose.id)
  return id_;
}
inline void RefineCompose::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RefineCompose.id)
}

// optional uint32 num = 2 [default = 0];
inline bool RefineCompose::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RefineCompose::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RefineCompose::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RefineCompose::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 RefineCompose::num() const {
  // @@protoc_insertion_point(field_get:Cmd.RefineCompose.num)
  return num_;
}
inline void RefineCompose::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RefineCompose.num)
}

// -------------------------------------------------------------------

// EquipData

// optional uint32 strengthlv = 1 [default = 0];
inline bool EquipData::has_strengthlv() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipData::set_has_strengthlv() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipData::clear_has_strengthlv() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipData::clear_strengthlv() {
  strengthlv_ = 0u;
  clear_has_strengthlv();
}
inline ::google::protobuf::uint32 EquipData::strengthlv() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipData.strengthlv)
  return strengthlv_;
}
inline void EquipData::set_strengthlv(::google::protobuf::uint32 value) {
  set_has_strengthlv();
  strengthlv_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipData.strengthlv)
}

// optional uint32 refinelv = 2 [default = 0];
inline bool EquipData::has_refinelv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EquipData::set_has_refinelv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EquipData::clear_has_refinelv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EquipData::clear_refinelv() {
  refinelv_ = 0u;
  clear_has_refinelv();
}
inline ::google::protobuf::uint32 EquipData::refinelv() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipData.refinelv)
  return refinelv_;
}
inline void EquipData::set_refinelv(::google::protobuf::uint32 value) {
  set_has_refinelv();
  refinelv_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipData.refinelv)
}

// optional uint32 strengthCost = 3 [default = 0];
inline bool EquipData::has_strengthcost() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EquipData::set_has_strengthcost() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EquipData::clear_has_strengthcost() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EquipData::clear_strengthcost() {
  strengthcost_ = 0u;
  clear_has_strengthcost();
}
inline ::google::protobuf::uint32 EquipData::strengthcost() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipData.strengthCost)
  return strengthcost_;
}
inline void EquipData::set_strengthcost(::google::protobuf::uint32 value) {
  set_has_strengthcost();
  strengthcost_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipData.strengthCost)
}

// repeated .Cmd.RefineCompose refineCompose = 4;
inline int EquipData::refinecompose_size() const {
  return refinecompose_.size();
}
inline void EquipData::clear_refinecompose() {
  refinecompose_.Clear();
}
inline const ::Cmd::RefineCompose& EquipData::refinecompose(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.EquipData.refineCompose)
  return refinecompose_.Get(index);
}
inline ::Cmd::RefineCompose* EquipData::mutable_refinecompose(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.EquipData.refineCompose)
  return refinecompose_.Mutable(index);
}
inline ::Cmd::RefineCompose* EquipData::add_refinecompose() {
  // @@protoc_insertion_point(field_add:Cmd.EquipData.refineCompose)
  return refinecompose_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::RefineCompose >&
EquipData::refinecompose() const {
  // @@protoc_insertion_point(field_list:Cmd.EquipData.refineCompose)
  return refinecompose_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::RefineCompose >*
EquipData::mutable_refinecompose() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.EquipData.refineCompose)
  return &refinecompose_;
}

// optional uint32 cardslot = 5 [default = 0];
inline bool EquipData::has_cardslot() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EquipData::set_has_cardslot() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EquipData::clear_has_cardslot() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EquipData::clear_cardslot() {
  cardslot_ = 0u;
  clear_has_cardslot();
}
inline ::google::protobuf::uint32 EquipData::cardslot() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipData.cardslot)
  return cardslot_;
}
inline void EquipData::set_cardslot(::google::protobuf::uint32 value) {
  set_has_cardslot();
  cardslot_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipData.cardslot)
}

// repeated uint32 buffid = 6;
inline int EquipData::buffid_size() const {
  return buffid_.size();
}
inline void EquipData::clear_buffid() {
  buffid_.Clear();
}
inline ::google::protobuf::uint32 EquipData::buffid(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.EquipData.buffid)
  return buffid_.Get(index);
}
inline void EquipData::set_buffid(int index, ::google::protobuf::uint32 value) {
  buffid_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.EquipData.buffid)
}
inline void EquipData::add_buffid(::google::protobuf::uint32 value) {
  buffid_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.EquipData.buffid)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
EquipData::buffid() const {
  // @@protoc_insertion_point(field_list:Cmd.EquipData.buffid)
  return buffid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
EquipData::mutable_buffid() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.EquipData.buffid)
  return &buffid_;
}

// optional bool damage = 7 [default = false];
inline bool EquipData::has_damage() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void EquipData::set_has_damage() {
  _has_bits_[0] |= 0x00000040u;
}
inline void EquipData::clear_has_damage() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void EquipData::clear_damage() {
  damage_ = false;
  clear_has_damage();
}
inline bool EquipData::damage() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipData.damage)
  return damage_;
}
inline void EquipData::set_damage(bool value) {
  set_has_damage();
  damage_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipData.damage)
}

// optional uint32 lv = 8 [default = 0];
inline bool EquipData::has_lv() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void EquipData::set_has_lv() {
  _has_bits_[0] |= 0x00000080u;
}
inline void EquipData::clear_has_lv() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void EquipData::clear_lv() {
  lv_ = 0u;
  clear_has_lv();
}
inline ::google::protobuf::uint32 EquipData::lv() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipData.lv)
  return lv_;
}
inline void EquipData::set_lv(::google::protobuf::uint32 value) {
  set_has_lv();
  lv_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipData.lv)
}

// optional uint32 color = 9 [default = 0];
inline bool EquipData::has_color() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void EquipData::set_has_color() {
  _has_bits_[0] |= 0x00000100u;
}
inline void EquipData::clear_has_color() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void EquipData::clear_color() {
  color_ = 0u;
  clear_has_color();
}
inline ::google::protobuf::uint32 EquipData::color() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipData.color)
  return color_;
}
inline void EquipData::set_color(::google::protobuf::uint32 value) {
  set_has_color();
  color_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipData.color)
}

// optional uint32 breakstarttime = 10 [default = 0];
inline bool EquipData::has_breakstarttime() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void EquipData::set_has_breakstarttime() {
  _has_bits_[0] |= 0x00000200u;
}
inline void EquipData::clear_has_breakstarttime() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void EquipData::clear_breakstarttime() {
  breakstarttime_ = 0u;
  clear_has_breakstarttime();
}
inline ::google::protobuf::uint32 EquipData::breakstarttime() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipData.breakstarttime)
  return breakstarttime_;
}
inline void EquipData::set_breakstarttime(::google::protobuf::uint32 value) {
  set_has_breakstarttime();
  breakstarttime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipData.breakstarttime)
}

// optional uint32 breakendtime = 11 [default = 0];
inline bool EquipData::has_breakendtime() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void EquipData::set_has_breakendtime() {
  _has_bits_[0] |= 0x00000400u;
}
inline void EquipData::clear_has_breakendtime() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void EquipData::clear_breakendtime() {
  breakendtime_ = 0u;
  clear_has_breakendtime();
}
inline ::google::protobuf::uint32 EquipData::breakendtime() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipData.breakendtime)
  return breakendtime_;
}
inline void EquipData::set_breakendtime(::google::protobuf::uint32 value) {
  set_has_breakendtime();
  breakendtime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipData.breakendtime)
}

// optional uint32 strengthlv2 = 12 [default = 0];
inline bool EquipData::has_strengthlv2() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void EquipData::set_has_strengthlv2() {
  _has_bits_[0] |= 0x00000800u;
}
inline void EquipData::clear_has_strengthlv2() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void EquipData::clear_strengthlv2() {
  strengthlv2_ = 0u;
  clear_has_strengthlv2();
}
inline ::google::protobuf::uint32 EquipData::strengthlv2() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipData.strengthlv2)
  return strengthlv2_;
}
inline void EquipData::set_strengthlv2(::google::protobuf::uint32 value) {
  set_has_strengthlv2();
  strengthlv2_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipData.strengthlv2)
}

// repeated .Cmd.ItemInfo strengthlv2cost = 13;
inline int EquipData::strengthlv2cost_size() const {
  return strengthlv2cost_.size();
}
inline void EquipData::clear_strengthlv2cost() {
  strengthlv2cost_.Clear();
}
inline const ::Cmd::ItemInfo& EquipData::strengthlv2cost(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.EquipData.strengthlv2cost)
  return strengthlv2cost_.Get(index);
}
inline ::Cmd::ItemInfo* EquipData::mutable_strengthlv2cost(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.EquipData.strengthlv2cost)
  return strengthlv2cost_.Mutable(index);
}
inline ::Cmd::ItemInfo* EquipData::add_strengthlv2cost() {
  // @@protoc_insertion_point(field_add:Cmd.EquipData.strengthlv2cost)
  return strengthlv2cost_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ItemInfo >&
EquipData::strengthlv2cost() const {
  // @@protoc_insertion_point(field_list:Cmd.EquipData.strengthlv2cost)
  return strengthlv2cost_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::ItemInfo >*
EquipData::mutable_strengthlv2cost() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.EquipData.strengthlv2cost)
  return &strengthlv2cost_;
}

// -------------------------------------------------------------------

// CardData

// optional string guid = 1;
inline bool CardData::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CardData::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CardData::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CardData::clear_guid() {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_->clear();
  }
  clear_has_guid();
}
inline const ::std::string& CardData::guid() const {
  // @@protoc_insertion_point(field_get:Cmd.CardData.guid)
  return *guid_;
}
inline void CardData::set_guid(const ::std::string& value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.CardData.guid)
}
inline void CardData::set_guid(const char* value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.CardData.guid)
}
inline void CardData::set_guid(const char* value, size_t size) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.CardData.guid)
}
inline ::std::string* CardData::mutable_guid() {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.CardData.guid)
  return guid_;
}
inline ::std::string* CardData::release_guid() {
  clear_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = guid_;
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CardData::set_allocated_guid(::std::string* guid) {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guid_;
  }
  if (guid) {
    set_has_guid();
    guid_ = guid;
  } else {
    clear_has_guid();
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.CardData.guid)
}

// optional uint32 id = 2 [default = 0];
inline bool CardData::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CardData::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CardData::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CardData::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 CardData::id() const {
  // @@protoc_insertion_point(field_get:Cmd.CardData.id)
  return id_;
}
inline void CardData::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CardData.id)
}

// optional uint32 pos = 3 [default = 0];
inline bool CardData::has_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CardData::set_has_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CardData::clear_has_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CardData::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 CardData::pos() const {
  // @@protoc_insertion_point(field_get:Cmd.CardData.pos)
  return pos_;
}
inline void CardData::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CardData.pos)
}

// -------------------------------------------------------------------

// EnchantAttr

// optional .Cmd.EAttrType type = 1 [default = EATTRTYPE_MIN];
inline bool EnchantAttr::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EnchantAttr::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EnchantAttr::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EnchantAttr::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Cmd::EAttrType EnchantAttr::type() const {
  // @@protoc_insertion_point(field_get:Cmd.EnchantAttr.type)
  return static_cast< ::Cmd::EAttrType >(type_);
}
inline void EnchantAttr::set_type(::Cmd::EAttrType value) {
  assert(::Cmd::EAttrType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EnchantAttr.type)
}

// optional uint32 value = 2 [default = 0];
inline bool EnchantAttr::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EnchantAttr::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EnchantAttr::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EnchantAttr::clear_value() {
  value_ = 0u;
  clear_has_value();
}
inline ::google::protobuf::uint32 EnchantAttr::value() const {
  // @@protoc_insertion_point(field_get:Cmd.EnchantAttr.value)
  return value_;
}
inline void EnchantAttr::set_value(::google::protobuf::uint32 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EnchantAttr.value)
}

// -------------------------------------------------------------------

// EnchantExtra

// optional uint32 configid = 1 [default = 0];
inline bool EnchantExtra::has_configid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EnchantExtra::set_has_configid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EnchantExtra::clear_has_configid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EnchantExtra::clear_configid() {
  configid_ = 0u;
  clear_has_configid();
}
inline ::google::protobuf::uint32 EnchantExtra::configid() const {
  // @@protoc_insertion_point(field_get:Cmd.EnchantExtra.configid)
  return configid_;
}
inline void EnchantExtra::set_configid(::google::protobuf::uint32 value) {
  set_has_configid();
  configid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EnchantExtra.configid)
}

// optional uint32 buffid = 2 [default = 0];
inline bool EnchantExtra::has_buffid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EnchantExtra::set_has_buffid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EnchantExtra::clear_has_buffid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EnchantExtra::clear_buffid() {
  buffid_ = 0u;
  clear_has_buffid();
}
inline ::google::protobuf::uint32 EnchantExtra::buffid() const {
  // @@protoc_insertion_point(field_get:Cmd.EnchantExtra.buffid)
  return buffid_;
}
inline void EnchantExtra::set_buffid(::google::protobuf::uint32 value) {
  set_has_buffid();
  buffid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EnchantExtra.buffid)
}

// -------------------------------------------------------------------

// EnchantData

// optional .Cmd.EEnchantType type = 1 [default = EENCHANTTYPE_MIN];
inline bool EnchantData::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EnchantData::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EnchantData::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EnchantData::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Cmd::EEnchantType EnchantData::type() const {
  // @@protoc_insertion_point(field_get:Cmd.EnchantData.type)
  return static_cast< ::Cmd::EEnchantType >(type_);
}
inline void EnchantData::set_type(::Cmd::EEnchantType value) {
  assert(::Cmd::EEnchantType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EnchantData.type)
}

// repeated .Cmd.EnchantAttr attrs = 2;
inline int EnchantData::attrs_size() const {
  return attrs_.size();
}
inline void EnchantData::clear_attrs() {
  attrs_.Clear();
}
inline const ::Cmd::EnchantAttr& EnchantData::attrs(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.EnchantData.attrs)
  return attrs_.Get(index);
}
inline ::Cmd::EnchantAttr* EnchantData::mutable_attrs(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.EnchantData.attrs)
  return attrs_.Mutable(index);
}
inline ::Cmd::EnchantAttr* EnchantData::add_attrs() {
  // @@protoc_insertion_point(field_add:Cmd.EnchantData.attrs)
  return attrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::EnchantAttr >&
EnchantData::attrs() const {
  // @@protoc_insertion_point(field_list:Cmd.EnchantData.attrs)
  return attrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::EnchantAttr >*
EnchantData::mutable_attrs() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.EnchantData.attrs)
  return &attrs_;
}

// repeated .Cmd.EnchantExtra extras = 3;
inline int EnchantData::extras_size() const {
  return extras_.size();
}
inline void EnchantData::clear_extras() {
  extras_.Clear();
}
inline const ::Cmd::EnchantExtra& EnchantData::extras(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.EnchantData.extras)
  return extras_.Get(index);
}
inline ::Cmd::EnchantExtra* EnchantData::mutable_extras(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.EnchantData.extras)
  return extras_.Mutable(index);
}
inline ::Cmd::EnchantExtra* EnchantData::add_extras() {
  // @@protoc_insertion_point(field_add:Cmd.EnchantData.extras)
  return extras_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::EnchantExtra >&
EnchantData::extras() const {
  // @@protoc_insertion_point(field_list:Cmd.EnchantData.extras)
  return extras_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::EnchantExtra >*
EnchantData::mutable_extras() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.EnchantData.extras)
  return &extras_;
}

// repeated uint32 patch = 4;
inline int EnchantData::patch_size() const {
  return patch_.size();
}
inline void EnchantData::clear_patch() {
  patch_.Clear();
}
inline ::google::protobuf::uint32 EnchantData::patch(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.EnchantData.patch)
  return patch_.Get(index);
}
inline void EnchantData::set_patch(int index, ::google::protobuf::uint32 value) {
  patch_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.EnchantData.patch)
}
inline void EnchantData::add_patch(::google::protobuf::uint32 value) {
  patch_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.EnchantData.patch)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
EnchantData::patch() const {
  // @@protoc_insertion_point(field_list:Cmd.EnchantData.patch)
  return patch_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
EnchantData::mutable_patch() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.EnchantData.patch)
  return &patch_;
}

// -------------------------------------------------------------------

// RefineData

// optional bool lastfail = 1 [default = false];
inline bool RefineData::has_lastfail() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RefineData::set_has_lastfail() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RefineData::clear_has_lastfail() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RefineData::clear_lastfail() {
  lastfail_ = false;
  clear_has_lastfail();
}
inline bool RefineData::lastfail() const {
  // @@protoc_insertion_point(field_get:Cmd.RefineData.lastfail)
  return lastfail_;
}
inline void RefineData::set_lastfail(bool value) {
  set_has_lastfail();
  lastfail_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RefineData.lastfail)
}

// optional uint32 repaircount = 2 [default = 0];
inline bool RefineData::has_repaircount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RefineData::set_has_repaircount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RefineData::clear_has_repaircount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RefineData::clear_repaircount() {
  repaircount_ = 0u;
  clear_has_repaircount();
}
inline ::google::protobuf::uint32 RefineData::repaircount() const {
  // @@protoc_insertion_point(field_get:Cmd.RefineData.repaircount)
  return repaircount_;
}
inline void RefineData::set_repaircount(::google::protobuf::uint32 value) {
  set_has_repaircount();
  repaircount_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RefineData.repaircount)
}

// -------------------------------------------------------------------

// EggEquip

// optional .Cmd.ItemInfo base = 1;
inline bool EggEquip::has_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EggEquip::set_has_base() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EggEquip::clear_has_base() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EggEquip::clear_base() {
  if (base_ != NULL) base_->::Cmd::ItemInfo::Clear();
  clear_has_base();
}
inline const ::Cmd::ItemInfo& EggEquip::base() const {
  // @@protoc_insertion_point(field_get:Cmd.EggEquip.base)
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
inline ::Cmd::ItemInfo* EggEquip::mutable_base() {
  set_has_base();
  if (base_ == NULL) base_ = new ::Cmd::ItemInfo;
  // @@protoc_insertion_point(field_mutable:Cmd.EggEquip.base)
  return base_;
}
inline ::Cmd::ItemInfo* EggEquip::release_base() {
  clear_has_base();
  ::Cmd::ItemInfo* temp = base_;
  base_ = NULL;
  return temp;
}
inline void EggEquip::set_allocated_base(::Cmd::ItemInfo* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.EggEquip.base)
}

// optional .Cmd.EquipData data = 2;
inline bool EggEquip::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EggEquip::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EggEquip::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EggEquip::clear_data() {
  if (data_ != NULL) data_->::Cmd::EquipData::Clear();
  clear_has_data();
}
inline const ::Cmd::EquipData& EggEquip::data() const {
  // @@protoc_insertion_point(field_get:Cmd.EggEquip.data)
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::Cmd::EquipData* EggEquip::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::Cmd::EquipData;
  // @@protoc_insertion_point(field_mutable:Cmd.EggEquip.data)
  return data_;
}
inline ::Cmd::EquipData* EggEquip::release_data() {
  clear_has_data();
  ::Cmd::EquipData* temp = data_;
  data_ = NULL;
  return temp;
}
inline void EggEquip::set_allocated_data(::Cmd::EquipData* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.EggEquip.data)
}

// repeated .Cmd.CardData card = 3;
inline int EggEquip::card_size() const {
  return card_.size();
}
inline void EggEquip::clear_card() {
  card_.Clear();
}
inline const ::Cmd::CardData& EggEquip::card(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.EggEquip.card)
  return card_.Get(index);
}
inline ::Cmd::CardData* EggEquip::mutable_card(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.EggEquip.card)
  return card_.Mutable(index);
}
inline ::Cmd::CardData* EggEquip::add_card() {
  // @@protoc_insertion_point(field_add:Cmd.EggEquip.card)
  return card_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::CardData >&
EggEquip::card() const {
  // @@protoc_insertion_point(field_list:Cmd.EggEquip.card)
  return card_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::CardData >*
EggEquip::mutable_card() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.EggEquip.card)
  return &card_;
}

// optional .Cmd.EnchantData enchant = 4;
inline bool EggEquip::has_enchant() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EggEquip::set_has_enchant() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EggEquip::clear_has_enchant() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EggEquip::clear_enchant() {
  if (enchant_ != NULL) enchant_->::Cmd::EnchantData::Clear();
  clear_has_enchant();
}
inline const ::Cmd::EnchantData& EggEquip::enchant() const {
  // @@protoc_insertion_point(field_get:Cmd.EggEquip.enchant)
  return enchant_ != NULL ? *enchant_ : *default_instance_->enchant_;
}
inline ::Cmd::EnchantData* EggEquip::mutable_enchant() {
  set_has_enchant();
  if (enchant_ == NULL) enchant_ = new ::Cmd::EnchantData;
  // @@protoc_insertion_point(field_mutable:Cmd.EggEquip.enchant)
  return enchant_;
}
inline ::Cmd::EnchantData* EggEquip::release_enchant() {
  clear_has_enchant();
  ::Cmd::EnchantData* temp = enchant_;
  enchant_ = NULL;
  return temp;
}
inline void EggEquip::set_allocated_enchant(::Cmd::EnchantData* enchant) {
  delete enchant_;
  enchant_ = enchant;
  if (enchant) {
    set_has_enchant();
  } else {
    clear_has_enchant();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.EggEquip.enchant)
}

// optional .Cmd.EnchantData previewenchant = 5;
inline bool EggEquip::has_previewenchant() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EggEquip::set_has_previewenchant() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EggEquip::clear_has_previewenchant() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EggEquip::clear_previewenchant() {
  if (previewenchant_ != NULL) previewenchant_->::Cmd::EnchantData::Clear();
  clear_has_previewenchant();
}
inline const ::Cmd::EnchantData& EggEquip::previewenchant() const {
  // @@protoc_insertion_point(field_get:Cmd.EggEquip.previewenchant)
  return previewenchant_ != NULL ? *previewenchant_ : *default_instance_->previewenchant_;
}
inline ::Cmd::EnchantData* EggEquip::mutable_previewenchant() {
  set_has_previewenchant();
  if (previewenchant_ == NULL) previewenchant_ = new ::Cmd::EnchantData;
  // @@protoc_insertion_point(field_mutable:Cmd.EggEquip.previewenchant)
  return previewenchant_;
}
inline ::Cmd::EnchantData* EggEquip::release_previewenchant() {
  clear_has_previewenchant();
  ::Cmd::EnchantData* temp = previewenchant_;
  previewenchant_ = NULL;
  return temp;
}
inline void EggEquip::set_allocated_previewenchant(::Cmd::EnchantData* previewenchant) {
  delete previewenchant_;
  previewenchant_ = previewenchant;
  if (previewenchant) {
    set_has_previewenchant();
  } else {
    clear_has_previewenchant();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.EggEquip.previewenchant)
}

// optional .Cmd.RefineData refine = 7;
inline bool EggEquip::has_refine() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void EggEquip::set_has_refine() {
  _has_bits_[0] |= 0x00000020u;
}
inline void EggEquip::clear_has_refine() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void EggEquip::clear_refine() {
  if (refine_ != NULL) refine_->::Cmd::RefineData::Clear();
  clear_has_refine();
}
inline const ::Cmd::RefineData& EggEquip::refine() const {
  // @@protoc_insertion_point(field_get:Cmd.EggEquip.refine)
  return refine_ != NULL ? *refine_ : *default_instance_->refine_;
}
inline ::Cmd::RefineData* EggEquip::mutable_refine() {
  set_has_refine();
  if (refine_ == NULL) refine_ = new ::Cmd::RefineData;
  // @@protoc_insertion_point(field_mutable:Cmd.EggEquip.refine)
  return refine_;
}
inline ::Cmd::RefineData* EggEquip::release_refine() {
  clear_has_refine();
  ::Cmd::RefineData* temp = refine_;
  refine_ = NULL;
  return temp;
}
inline void EggEquip::set_allocated_refine(::Cmd::RefineData* refine) {
  delete refine_;
  refine_ = refine;
  if (refine) {
    set_has_refine();
  } else {
    clear_has_refine();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.EggEquip.refine)
}

// -------------------------------------------------------------------

// PetEquipData

// optional .Cmd.EEquipPos epos = 1;
inline bool PetEquipData::has_epos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PetEquipData::set_has_epos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PetEquipData::clear_has_epos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PetEquipData::clear_epos() {
  epos_ = 0;
  clear_has_epos();
}
inline ::Cmd::EEquipPos PetEquipData::epos() const {
  // @@protoc_insertion_point(field_get:Cmd.PetEquipData.epos)
  return static_cast< ::Cmd::EEquipPos >(epos_);
}
inline void PetEquipData::set_epos(::Cmd::EEquipPos value) {
  assert(::Cmd::EEquipPos_IsValid(value));
  set_has_epos();
  epos_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PetEquipData.epos)
}

// optional uint32 itemid = 2;
inline bool PetEquipData::has_itemid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PetEquipData::set_has_itemid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PetEquipData::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PetEquipData::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 PetEquipData::itemid() const {
  // @@protoc_insertion_point(field_get:Cmd.PetEquipData.itemid)
  return itemid_;
}
inline void PetEquipData::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PetEquipData.itemid)
}

// -------------------------------------------------------------------

// EggData

// optional uint64 exp = 1 [default = 0];
inline bool EggData::has_exp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EggData::set_has_exp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EggData::clear_has_exp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EggData::clear_exp() {
  exp_ = GOOGLE_ULONGLONG(0);
  clear_has_exp();
}
inline ::google::protobuf::uint64 EggData::exp() const {
  // @@protoc_insertion_point(field_get:Cmd.EggData.exp)
  return exp_;
}
inline void EggData::set_exp(::google::protobuf::uint64 value) {
  set_has_exp();
  exp_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EggData.exp)
}

// optional uint64 friendexp = 2 [default = 0];
inline bool EggData::has_friendexp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EggData::set_has_friendexp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EggData::clear_has_friendexp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EggData::clear_friendexp() {
  friendexp_ = GOOGLE_ULONGLONG(0);
  clear_has_friendexp();
}
inline ::google::protobuf::uint64 EggData::friendexp() const {
  // @@protoc_insertion_point(field_get:Cmd.EggData.friendexp)
  return friendexp_;
}
inline void EggData::set_friendexp(::google::protobuf::uint64 value) {
  set_has_friendexp();
  friendexp_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EggData.friendexp)
}

// optional uint64 rewardexp = 3 [default = 0];
inline bool EggData::has_rewardexp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EggData::set_has_rewardexp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EggData::clear_has_rewardexp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EggData::clear_rewardexp() {
  rewardexp_ = GOOGLE_ULONGLONG(0);
  clear_has_rewardexp();
}
inline ::google::protobuf::uint64 EggData::rewardexp() const {
  // @@protoc_insertion_point(field_get:Cmd.EggData.rewardexp)
  return rewardexp_;
}
inline void EggData::set_rewardexp(::google::protobuf::uint64 value) {
  set_has_rewardexp();
  rewardexp_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EggData.rewardexp)
}

// optional uint32 id = 4 [default = 0];
inline bool EggData::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EggData::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EggData::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EggData::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 EggData::id() const {
  // @@protoc_insertion_point(field_get:Cmd.EggData.id)
  return id_;
}
inline void EggData::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EggData.id)
}

// optional uint32 lv = 5 [default = 0];
inline bool EggData::has_lv() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EggData::set_has_lv() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EggData::clear_has_lv() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EggData::clear_lv() {
  lv_ = 0u;
  clear_has_lv();
}
inline ::google::protobuf::uint32 EggData::lv() const {
  // @@protoc_insertion_point(field_get:Cmd.EggData.lv)
  return lv_;
}
inline void EggData::set_lv(::google::protobuf::uint32 value) {
  set_has_lv();
  lv_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EggData.lv)
}

// optional uint32 friendlv = 6 [default = 0];
inline bool EggData::has_friendlv() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void EggData::set_has_friendlv() {
  _has_bits_[0] |= 0x00000020u;
}
inline void EggData::clear_has_friendlv() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void EggData::clear_friendlv() {
  friendlv_ = 0u;
  clear_has_friendlv();
}
inline ::google::protobuf::uint32 EggData::friendlv() const {
  // @@protoc_insertion_point(field_get:Cmd.EggData.friendlv)
  return friendlv_;
}
inline void EggData::set_friendlv(::google::protobuf::uint32 value) {
  set_has_friendlv();
  friendlv_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EggData.friendlv)
}

// optional uint32 body = 7 [default = 0];
inline bool EggData::has_body() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void EggData::set_has_body() {
  _has_bits_[0] |= 0x00000040u;
}
inline void EggData::clear_has_body() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void EggData::clear_body() {
  body_ = 0u;
  clear_has_body();
}
inline ::google::protobuf::uint32 EggData::body() const {
  // @@protoc_insertion_point(field_get:Cmd.EggData.body)
  return body_;
}
inline void EggData::set_body(::google::protobuf::uint32 value) {
  set_has_body();
  body_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EggData.body)
}

// optional uint32 relivetime = 8 [default = 0];
inline bool EggData::has_relivetime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void EggData::set_has_relivetime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void EggData::clear_has_relivetime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void EggData::clear_relivetime() {
  relivetime_ = 0u;
  clear_has_relivetime();
}
inline ::google::protobuf::uint32 EggData::relivetime() const {
  // @@protoc_insertion_point(field_get:Cmd.EggData.relivetime)
  return relivetime_;
}
inline void EggData::set_relivetime(::google::protobuf::uint32 value) {
  set_has_relivetime();
  relivetime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EggData.relivetime)
}

// optional uint32 hp = 9 [default = 0];
inline bool EggData::has_hp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void EggData::set_has_hp() {
  _has_bits_[0] |= 0x00000100u;
}
inline void EggData::clear_has_hp() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void EggData::clear_hp() {
  hp_ = 0u;
  clear_has_hp();
}
inline ::google::protobuf::uint32 EggData::hp() const {
  // @@protoc_insertion_point(field_get:Cmd.EggData.hp)
  return hp_;
}
inline void EggData::set_hp(::google::protobuf::uint32 value) {
  set_has_hp();
  hp_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EggData.hp)
}

// optional uint32 restoretime = 10 [default = 0];
inline bool EggData::has_restoretime() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void EggData::set_has_restoretime() {
  _has_bits_[0] |= 0x00000200u;
}
inline void EggData::clear_has_restoretime() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void EggData::clear_restoretime() {
  restoretime_ = 0u;
  clear_has_restoretime();
}
inline ::google::protobuf::uint32 EggData::restoretime() const {
  // @@protoc_insertion_point(field_get:Cmd.EggData.restoretime)
  return restoretime_;
}
inline void EggData::set_restoretime(::google::protobuf::uint32 value) {
  set_has_restoretime();
  restoretime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EggData.restoretime)
}

// optional uint32 time_happly = 11 [default = 0];
inline bool EggData::has_time_happly() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void EggData::set_has_time_happly() {
  _has_bits_[0] |= 0x00000400u;
}
inline void EggData::clear_has_time_happly() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void EggData::clear_time_happly() {
  time_happly_ = 0u;
  clear_has_time_happly();
}
inline ::google::protobuf::uint32 EggData::time_happly() const {
  // @@protoc_insertion_point(field_get:Cmd.EggData.time_happly)
  return time_happly_;
}
inline void EggData::set_time_happly(::google::protobuf::uint32 value) {
  set_has_time_happly();
  time_happly_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EggData.time_happly)
}

// optional uint32 time_excite = 12 [default = 0];
inline bool EggData::has_time_excite() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void EggData::set_has_time_excite() {
  _has_bits_[0] |= 0x00000800u;
}
inline void EggData::clear_has_time_excite() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void EggData::clear_time_excite() {
  time_excite_ = 0u;
  clear_has_time_excite();
}
inline ::google::protobuf::uint32 EggData::time_excite() const {
  // @@protoc_insertion_point(field_get:Cmd.EggData.time_excite)
  return time_excite_;
}
inline void EggData::set_time_excite(::google::protobuf::uint32 value) {
  set_has_time_excite();
  time_excite_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EggData.time_excite)
}

// optional uint32 time_happiness = 13 [default = 0];
inline bool EggData::has_time_happiness() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void EggData::set_has_time_happiness() {
  _has_bits_[0] |= 0x00001000u;
}
inline void EggData::clear_has_time_happiness() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void EggData::clear_time_happiness() {
  time_happiness_ = 0u;
  clear_has_time_happiness();
}
inline ::google::protobuf::uint32 EggData::time_happiness() const {
  // @@protoc_insertion_point(field_get:Cmd.EggData.time_happiness)
  return time_happiness_;
}
inline void EggData::set_time_happiness(::google::protobuf::uint32 value) {
  set_has_time_happiness();
  time_happiness_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EggData.time_happiness)
}

// optional uint32 time_happly_gift = 14 [default = 0];
inline bool EggData::has_time_happly_gift() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void EggData::set_has_time_happly_gift() {
  _has_bits_[0] |= 0x00002000u;
}
inline void EggData::clear_has_time_happly_gift() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void EggData::clear_time_happly_gift() {
  time_happly_gift_ = 0u;
  clear_has_time_happly_gift();
}
inline ::google::protobuf::uint32 EggData::time_happly_gift() const {
  // @@protoc_insertion_point(field_get:Cmd.EggData.time_happly_gift)
  return time_happly_gift_;
}
inline void EggData::set_time_happly_gift(::google::protobuf::uint32 value) {
  set_has_time_happly_gift();
  time_happly_gift_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EggData.time_happly_gift)
}

// optional uint32 time_excite_gift = 15 [default = 0];
inline bool EggData::has_time_excite_gift() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void EggData::set_has_time_excite_gift() {
  _has_bits_[0] |= 0x00004000u;
}
inline void EggData::clear_has_time_excite_gift() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void EggData::clear_time_excite_gift() {
  time_excite_gift_ = 0u;
  clear_has_time_excite_gift();
}
inline ::google::protobuf::uint32 EggData::time_excite_gift() const {
  // @@protoc_insertion_point(field_get:Cmd.EggData.time_excite_gift)
  return time_excite_gift_;
}
inline void EggData::set_time_excite_gift(::google::protobuf::uint32 value) {
  set_has_time_excite_gift();
  time_excite_gift_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EggData.time_excite_gift)
}

// optional uint32 time_happiness_gift = 16 [default = 0];
inline bool EggData::has_time_happiness_gift() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void EggData::set_has_time_happiness_gift() {
  _has_bits_[0] |= 0x00008000u;
}
inline void EggData::clear_has_time_happiness_gift() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void EggData::clear_time_happiness_gift() {
  time_happiness_gift_ = 0u;
  clear_has_time_happiness_gift();
}
inline ::google::protobuf::uint32 EggData::time_happiness_gift() const {
  // @@protoc_insertion_point(field_get:Cmd.EggData.time_happiness_gift)
  return time_happiness_gift_;
}
inline void EggData::set_time_happiness_gift(::google::protobuf::uint32 value) {
  set_has_time_happiness_gift();
  time_happiness_gift_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EggData.time_happiness_gift)
}

// optional uint32 touch_tick = 22 [default = 0];
inline bool EggData::has_touch_tick() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void EggData::set_has_touch_tick() {
  _has_bits_[0] |= 0x00010000u;
}
inline void EggData::clear_has_touch_tick() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void EggData::clear_touch_tick() {
  touch_tick_ = 0u;
  clear_has_touch_tick();
}
inline ::google::protobuf::uint32 EggData::touch_tick() const {
  // @@protoc_insertion_point(field_get:Cmd.EggData.touch_tick)
  return touch_tick_;
}
inline void EggData::set_touch_tick(::google::protobuf::uint32 value) {
  set_has_touch_tick();
  touch_tick_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EggData.touch_tick)
}

// optional uint32 feed_tick = 23 [default = 0];
inline bool EggData::has_feed_tick() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void EggData::set_has_feed_tick() {
  _has_bits_[0] |= 0x00020000u;
}
inline void EggData::clear_has_feed_tick() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void EggData::clear_feed_tick() {
  feed_tick_ = 0u;
  clear_has_feed_tick();
}
inline ::google::protobuf::uint32 EggData::feed_tick() const {
  // @@protoc_insertion_point(field_get:Cmd.EggData.feed_tick)
  return feed_tick_;
}
inline void EggData::set_feed_tick(::google::protobuf::uint32 value) {
  set_has_feed_tick();
  feed_tick_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EggData.feed_tick)
}

// optional string name = 17;
inline bool EggData::has_name() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void EggData::set_has_name() {
  _has_bits_[0] |= 0x00040000u;
}
inline void EggData::clear_has_name() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void EggData::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& EggData::name() const {
  // @@protoc_insertion_point(field_get:Cmd.EggData.name)
  return *name_;
}
inline void EggData::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.EggData.name)
}
inline void EggData::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.EggData.name)
}
inline void EggData::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.EggData.name)
}
inline ::std::string* EggData::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.EggData.name)
  return name_;
}
inline ::std::string* EggData::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EggData::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.EggData.name)
}

// optional bytes var = 18;
inline bool EggData::has_var() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void EggData::set_has_var() {
  _has_bits_[0] |= 0x00080000u;
}
inline void EggData::clear_has_var() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void EggData::clear_var() {
  if (var_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    var_->clear();
  }
  clear_has_var();
}
inline const ::std::string& EggData::var() const {
  // @@protoc_insertion_point(field_get:Cmd.EggData.var)
  return *var_;
}
inline void EggData::set_var(const ::std::string& value) {
  set_has_var();
  if (var_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    var_ = new ::std::string;
  }
  var_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.EggData.var)
}
inline void EggData::set_var(const char* value) {
  set_has_var();
  if (var_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    var_ = new ::std::string;
  }
  var_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.EggData.var)
}
inline void EggData::set_var(const void* value, size_t size) {
  set_has_var();
  if (var_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    var_ = new ::std::string;
  }
  var_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.EggData.var)
}
inline ::std::string* EggData::mutable_var() {
  set_has_var();
  if (var_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    var_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.EggData.var)
  return var_;
}
inline ::std::string* EggData::release_var() {
  clear_has_var();
  if (var_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = var_;
    var_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EggData::set_allocated_var(::std::string* var) {
  if (var_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete var_;
  }
  if (var) {
    set_has_var();
    var_ = var;
  } else {
    clear_has_var();
    var_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.EggData.var)
}

// repeated uint32 skillids = 19;
inline int EggData::skillids_size() const {
  return skillids_.size();
}
inline void EggData::clear_skillids() {
  skillids_.Clear();
}
inline ::google::protobuf::uint32 EggData::skillids(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.EggData.skillids)
  return skillids_.Get(index);
}
inline void EggData::set_skillids(int index, ::google::protobuf::uint32 value) {
  skillids_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.EggData.skillids)
}
inline void EggData::add_skillids(::google::protobuf::uint32 value) {
  skillids_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.EggData.skillids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
EggData::skillids() const {
  // @@protoc_insertion_point(field_list:Cmd.EggData.skillids)
  return skillids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
EggData::mutable_skillids() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.EggData.skillids)
  return &skillids_;
}

// repeated .Cmd.EggEquip equips = 20;
inline int EggData::equips_size() const {
  return equips_.size();
}
inline void EggData::clear_equips() {
  equips_.Clear();
}
inline const ::Cmd::EggEquip& EggData::equips(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.EggData.equips)
  return equips_.Get(index);
}
inline ::Cmd::EggEquip* EggData::mutable_equips(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.EggData.equips)
  return equips_.Mutable(index);
}
inline ::Cmd::EggEquip* EggData::add_equips() {
  // @@protoc_insertion_point(field_add:Cmd.EggData.equips)
  return equips_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::EggEquip >&
EggData::equips() const {
  // @@protoc_insertion_point(field_list:Cmd.EggData.equips)
  return equips_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::EggEquip >*
EggData::mutable_equips() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.EggData.equips)
  return &equips_;
}

// optional bytes buff = 21;
inline bool EggData::has_buff() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void EggData::set_has_buff() {
  _has_bits_[0] |= 0x00400000u;
}
inline void EggData::clear_has_buff() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void EggData::clear_buff() {
  if (buff_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    buff_->clear();
  }
  clear_has_buff();
}
inline const ::std::string& EggData::buff() const {
  // @@protoc_insertion_point(field_get:Cmd.EggData.buff)
  return *buff_;
}
inline void EggData::set_buff(const ::std::string& value) {
  set_has_buff();
  if (buff_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    buff_ = new ::std::string;
  }
  buff_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.EggData.buff)
}
inline void EggData::set_buff(const char* value) {
  set_has_buff();
  if (buff_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    buff_ = new ::std::string;
  }
  buff_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.EggData.buff)
}
inline void EggData::set_buff(const void* value, size_t size) {
  set_has_buff();
  if (buff_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    buff_ = new ::std::string;
  }
  buff_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.EggData.buff)
}
inline ::std::string* EggData::mutable_buff() {
  set_has_buff();
  if (buff_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    buff_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.EggData.buff)
  return buff_;
}
inline ::std::string* EggData::release_buff() {
  clear_has_buff();
  if (buff_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = buff_;
    buff_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EggData::set_allocated_buff(::std::string* buff) {
  if (buff_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete buff_;
  }
  if (buff) {
    set_has_buff();
    buff_ = buff;
  } else {
    clear_has_buff();
    buff_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.EggData.buff)
}

// repeated uint32 unlock_equip = 24;
inline int EggData::unlock_equip_size() const {
  return unlock_equip_.size();
}
inline void EggData::clear_unlock_equip() {
  unlock_equip_.Clear();
}
inline ::google::protobuf::uint32 EggData::unlock_equip(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.EggData.unlock_equip)
  return unlock_equip_.Get(index);
}
inline void EggData::set_unlock_equip(int index, ::google::protobuf::uint32 value) {
  unlock_equip_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.EggData.unlock_equip)
}
inline void EggData::add_unlock_equip(::google::protobuf::uint32 value) {
  unlock_equip_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.EggData.unlock_equip)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
EggData::unlock_equip() const {
  // @@protoc_insertion_point(field_list:Cmd.EggData.unlock_equip)
  return unlock_equip_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
EggData::mutable_unlock_equip() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.EggData.unlock_equip)
  return &unlock_equip_;
}

// repeated uint32 unlock_body = 25;
inline int EggData::unlock_body_size() const {
  return unlock_body_.size();
}
inline void EggData::clear_unlock_body() {
  unlock_body_.Clear();
}
inline ::google::protobuf::uint32 EggData::unlock_body(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.EggData.unlock_body)
  return unlock_body_.Get(index);
}
inline void EggData::set_unlock_body(int index, ::google::protobuf::uint32 value) {
  unlock_body_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.EggData.unlock_body)
}
inline void EggData::add_unlock_body(::google::protobuf::uint32 value) {
  unlock_body_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.EggData.unlock_body)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
EggData::unlock_body() const {
  // @@protoc_insertion_point(field_list:Cmd.EggData.unlock_body)
  return unlock_body_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
EggData::mutable_unlock_body() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.EggData.unlock_body)
  return &unlock_body_;
}

// optional uint32 version = 26 [default = 0];
inline bool EggData::has_version() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void EggData::set_has_version() {
  _has_bits_[0] |= 0x02000000u;
}
inline void EggData::clear_has_version() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void EggData::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 EggData::version() const {
  // @@protoc_insertion_point(field_get:Cmd.EggData.version)
  return version_;
}
inline void EggData::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EggData.version)
}

// optional bool skilloff = 27 [default = false];
inline bool EggData::has_skilloff() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void EggData::set_has_skilloff() {
  _has_bits_[0] |= 0x04000000u;
}
inline void EggData::clear_has_skilloff() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void EggData::clear_skilloff() {
  skilloff_ = false;
  clear_has_skilloff();
}
inline bool EggData::skilloff() const {
  // @@protoc_insertion_point(field_get:Cmd.EggData.skilloff)
  return skilloff_;
}
inline void EggData::set_skilloff(bool value) {
  set_has_skilloff();
  skilloff_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EggData.skilloff)
}

// optional uint32 exchange_count = 28 [default = 0];
inline bool EggData::has_exchange_count() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void EggData::set_has_exchange_count() {
  _has_bits_[0] |= 0x08000000u;
}
inline void EggData::clear_has_exchange_count() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void EggData::clear_exchange_count() {
  exchange_count_ = 0u;
  clear_has_exchange_count();
}
inline ::google::protobuf::uint32 EggData::exchange_count() const {
  // @@protoc_insertion_point(field_get:Cmd.EggData.exchange_count)
  return exchange_count_;
}
inline void EggData::set_exchange_count(::google::protobuf::uint32 value) {
  set_has_exchange_count();
  exchange_count_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EggData.exchange_count)
}

// optional string guid = 29;
inline bool EggData::has_guid() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void EggData::set_has_guid() {
  _has_bits_[0] |= 0x10000000u;
}
inline void EggData::clear_has_guid() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void EggData::clear_guid() {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_->clear();
  }
  clear_has_guid();
}
inline const ::std::string& EggData::guid() const {
  // @@protoc_insertion_point(field_get:Cmd.EggData.guid)
  return *guid_;
}
inline void EggData::set_guid(const ::std::string& value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.EggData.guid)
}
inline void EggData::set_guid(const char* value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.EggData.guid)
}
inline void EggData::set_guid(const char* value, size_t size) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.EggData.guid)
}
inline ::std::string* EggData::mutable_guid() {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.EggData.guid)
  return guid_;
}
inline ::std::string* EggData::release_guid() {
  clear_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = guid_;
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EggData::set_allocated_guid(::std::string* guid) {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guid_;
  }
  if (guid) {
    set_has_guid();
    guid_ = guid;
  } else {
    clear_has_guid();
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.EggData.guid)
}

// repeated .Cmd.PetEquipData defaultwears = 30;
inline int EggData::defaultwears_size() const {
  return defaultwears_.size();
}
inline void EggData::clear_defaultwears() {
  defaultwears_.Clear();
}
inline const ::Cmd::PetEquipData& EggData::defaultwears(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.EggData.defaultwears)
  return defaultwears_.Get(index);
}
inline ::Cmd::PetEquipData* EggData::mutable_defaultwears(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.EggData.defaultwears)
  return defaultwears_.Mutable(index);
}
inline ::Cmd::PetEquipData* EggData::add_defaultwears() {
  // @@protoc_insertion_point(field_add:Cmd.EggData.defaultwears)
  return defaultwears_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::PetEquipData >&
EggData::defaultwears() const {
  // @@protoc_insertion_point(field_list:Cmd.EggData.defaultwears)
  return defaultwears_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::PetEquipData >*
EggData::mutable_defaultwears() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.EggData.defaultwears)
  return &defaultwears_;
}

// repeated .Cmd.PetEquipData wears = 31;
inline int EggData::wears_size() const {
  return wears_.size();
}
inline void EggData::clear_wears() {
  wears_.Clear();
}
inline const ::Cmd::PetEquipData& EggData::wears(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.EggData.wears)
  return wears_.Get(index);
}
inline ::Cmd::PetEquipData* EggData::mutable_wears(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.EggData.wears)
  return wears_.Mutable(index);
}
inline ::Cmd::PetEquipData* EggData::add_wears() {
  // @@protoc_insertion_point(field_add:Cmd.EggData.wears)
  return wears_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::PetEquipData >&
EggData::wears() const {
  // @@protoc_insertion_point(field_list:Cmd.EggData.wears)
  return wears_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::PetEquipData >*
EggData::mutable_wears() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.EggData.wears)
  return &wears_;
}

// -------------------------------------------------------------------

// LoveLetterData

// optional string sendUserName = 1;
inline bool LoveLetterData::has_sendusername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoveLetterData::set_has_sendusername() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoveLetterData::clear_has_sendusername() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoveLetterData::clear_sendusername() {
  if (sendusername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sendusername_->clear();
  }
  clear_has_sendusername();
}
inline const ::std::string& LoveLetterData::sendusername() const {
  // @@protoc_insertion_point(field_get:Cmd.LoveLetterData.sendUserName)
  return *sendusername_;
}
inline void LoveLetterData::set_sendusername(const ::std::string& value) {
  set_has_sendusername();
  if (sendusername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sendusername_ = new ::std::string;
  }
  sendusername_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.LoveLetterData.sendUserName)
}
inline void LoveLetterData::set_sendusername(const char* value) {
  set_has_sendusername();
  if (sendusername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sendusername_ = new ::std::string;
  }
  sendusername_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.LoveLetterData.sendUserName)
}
inline void LoveLetterData::set_sendusername(const char* value, size_t size) {
  set_has_sendusername();
  if (sendusername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sendusername_ = new ::std::string;
  }
  sendusername_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.LoveLetterData.sendUserName)
}
inline ::std::string* LoveLetterData::mutable_sendusername() {
  set_has_sendusername();
  if (sendusername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sendusername_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.LoveLetterData.sendUserName)
  return sendusername_;
}
inline ::std::string* LoveLetterData::release_sendusername() {
  clear_has_sendusername();
  if (sendusername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sendusername_;
    sendusername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LoveLetterData::set_allocated_sendusername(::std::string* sendusername) {
  if (sendusername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sendusername_;
  }
  if (sendusername) {
    set_has_sendusername();
    sendusername_ = sendusername;
  } else {
    clear_has_sendusername();
    sendusername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.LoveLetterData.sendUserName)
}

// optional string bg = 2;
inline bool LoveLetterData::has_bg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoveLetterData::set_has_bg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoveLetterData::clear_has_bg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoveLetterData::clear_bg() {
  if (bg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bg_->clear();
  }
  clear_has_bg();
}
inline const ::std::string& LoveLetterData::bg() const {
  // @@protoc_insertion_point(field_get:Cmd.LoveLetterData.bg)
  return *bg_;
}
inline void LoveLetterData::set_bg(const ::std::string& value) {
  set_has_bg();
  if (bg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bg_ = new ::std::string;
  }
  bg_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.LoveLetterData.bg)
}
inline void LoveLetterData::set_bg(const char* value) {
  set_has_bg();
  if (bg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bg_ = new ::std::string;
  }
  bg_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.LoveLetterData.bg)
}
inline void LoveLetterData::set_bg(const char* value, size_t size) {
  set_has_bg();
  if (bg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bg_ = new ::std::string;
  }
  bg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.LoveLetterData.bg)
}
inline ::std::string* LoveLetterData::mutable_bg() {
  set_has_bg();
  if (bg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.LoveLetterData.bg)
  return bg_;
}
inline ::std::string* LoveLetterData::release_bg() {
  clear_has_bg();
  if (bg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = bg_;
    bg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LoveLetterData::set_allocated_bg(::std::string* bg) {
  if (bg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bg_;
  }
  if (bg) {
    set_has_bg();
    bg_ = bg;
  } else {
    clear_has_bg();
    bg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.LoveLetterData.bg)
}

// optional uint32 configID = 3;
inline bool LoveLetterData::has_configid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LoveLetterData::set_has_configid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LoveLetterData::clear_has_configid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LoveLetterData::clear_configid() {
  configid_ = 0u;
  clear_has_configid();
}
inline ::google::protobuf::uint32 LoveLetterData::configid() const {
  // @@protoc_insertion_point(field_get:Cmd.LoveLetterData.configID)
  return configid_;
}
inline void LoveLetterData::set_configid(::google::protobuf::uint32 value) {
  set_has_configid();
  configid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LoveLetterData.configID)
}

// optional string content = 4;
inline bool LoveLetterData::has_content() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LoveLetterData::set_has_content() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LoveLetterData::clear_has_content() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LoveLetterData::clear_content() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& LoveLetterData::content() const {
  // @@protoc_insertion_point(field_get:Cmd.LoveLetterData.content)
  return *content_;
}
inline void LoveLetterData::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.LoveLetterData.content)
}
inline void LoveLetterData::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.LoveLetterData.content)
}
inline void LoveLetterData::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.LoveLetterData.content)
}
inline ::std::string* LoveLetterData::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.LoveLetterData.content)
  return content_;
}
inline ::std::string* LoveLetterData::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LoveLetterData::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.LoveLetterData.content)
}

// optional string content2 = 5;
inline bool LoveLetterData::has_content2() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LoveLetterData::set_has_content2() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LoveLetterData::clear_has_content2() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LoveLetterData::clear_content2() {
  if (content2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content2_->clear();
  }
  clear_has_content2();
}
inline const ::std::string& LoveLetterData::content2() const {
  // @@protoc_insertion_point(field_get:Cmd.LoveLetterData.content2)
  return *content2_;
}
inline void LoveLetterData::set_content2(const ::std::string& value) {
  set_has_content2();
  if (content2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content2_ = new ::std::string;
  }
  content2_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.LoveLetterData.content2)
}
inline void LoveLetterData::set_content2(const char* value) {
  set_has_content2();
  if (content2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content2_ = new ::std::string;
  }
  content2_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.LoveLetterData.content2)
}
inline void LoveLetterData::set_content2(const char* value, size_t size) {
  set_has_content2();
  if (content2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content2_ = new ::std::string;
  }
  content2_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.LoveLetterData.content2)
}
inline ::std::string* LoveLetterData::mutable_content2() {
  set_has_content2();
  if (content2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content2_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.LoveLetterData.content2)
  return content2_;
}
inline ::std::string* LoveLetterData::release_content2() {
  clear_has_content2();
  if (content2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content2_;
    content2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LoveLetterData::set_allocated_content2(::std::string* content2) {
  if (content2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content2_;
  }
  if (content2) {
    set_has_content2();
    content2_ = content2;
  } else {
    clear_has_content2();
    content2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.LoveLetterData.content2)
}

// -------------------------------------------------------------------

// CodeData

// optional string code = 1;
inline bool CodeData::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CodeData::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CodeData::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CodeData::clear_code() {
  if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_->clear();
  }
  clear_has_code();
}
inline const ::std::string& CodeData::code() const {
  // @@protoc_insertion_point(field_get:Cmd.CodeData.code)
  return *code_;
}
inline void CodeData::set_code(const ::std::string& value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_ = new ::std::string;
  }
  code_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.CodeData.code)
}
inline void CodeData::set_code(const char* value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_ = new ::std::string;
  }
  code_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.CodeData.code)
}
inline void CodeData::set_code(const char* value, size_t size) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_ = new ::std::string;
  }
  code_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.CodeData.code)
}
inline ::std::string* CodeData::mutable_code() {
  set_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.CodeData.code)
  return code_;
}
inline ::std::string* CodeData::release_code() {
  clear_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = code_;
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CodeData::set_allocated_code(::std::string* code) {
  if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete code_;
  }
  if (code) {
    set_has_code();
    code_ = code;
  } else {
    clear_has_code();
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.CodeData.code)
}

// optional bool used = 2 [default = false];
inline bool CodeData::has_used() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CodeData::set_has_used() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CodeData::clear_has_used() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CodeData::clear_used() {
  used_ = false;
  clear_has_used();
}
inline bool CodeData::used() const {
  // @@protoc_insertion_point(field_get:Cmd.CodeData.used)
  return used_;
}
inline void CodeData::set_used(bool value) {
  set_has_used();
  used_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CodeData.used)
}

// -------------------------------------------------------------------

// WeddingData

// optional uint64 id = 1 [default = 0];
inline bool WeddingData::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WeddingData::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WeddingData::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WeddingData::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 WeddingData::id() const {
  // @@protoc_insertion_point(field_get:Cmd.WeddingData.id)
  return id_;
}
inline void WeddingData::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.WeddingData.id)
}

// optional uint32 zoneid = 2 [default = 0];
inline bool WeddingData::has_zoneid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WeddingData::set_has_zoneid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WeddingData::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WeddingData::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 WeddingData::zoneid() const {
  // @@protoc_insertion_point(field_get:Cmd.WeddingData.zoneid)
  return zoneid_;
}
inline void WeddingData::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.WeddingData.zoneid)
}

// optional uint64 charid1 = 3 [default = 0];
inline bool WeddingData::has_charid1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WeddingData::set_has_charid1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WeddingData::clear_has_charid1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WeddingData::clear_charid1() {
  charid1_ = GOOGLE_ULONGLONG(0);
  clear_has_charid1();
}
inline ::google::protobuf::uint64 WeddingData::charid1() const {
  // @@protoc_insertion_point(field_get:Cmd.WeddingData.charid1)
  return charid1_;
}
inline void WeddingData::set_charid1(::google::protobuf::uint64 value) {
  set_has_charid1();
  charid1_ = value;
  // @@protoc_insertion_point(field_set:Cmd.WeddingData.charid1)
}

// optional uint64 charid2 = 4 [default = 0];
inline bool WeddingData::has_charid2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WeddingData::set_has_charid2() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WeddingData::clear_has_charid2() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WeddingData::clear_charid2() {
  charid2_ = GOOGLE_ULONGLONG(0);
  clear_has_charid2();
}
inline ::google::protobuf::uint64 WeddingData::charid2() const {
  // @@protoc_insertion_point(field_get:Cmd.WeddingData.charid2)
  return charid2_;
}
inline void WeddingData::set_charid2(::google::protobuf::uint64 value) {
  set_has_charid2();
  charid2_ = value;
  // @@protoc_insertion_point(field_set:Cmd.WeddingData.charid2)
}

// optional uint32 weddingtime = 5 [default = 0];
inline bool WeddingData::has_weddingtime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WeddingData::set_has_weddingtime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void WeddingData::clear_has_weddingtime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void WeddingData::clear_weddingtime() {
  weddingtime_ = 0u;
  clear_has_weddingtime();
}
inline ::google::protobuf::uint32 WeddingData::weddingtime() const {
  // @@protoc_insertion_point(field_get:Cmd.WeddingData.weddingtime)
  return weddingtime_;
}
inline void WeddingData::set_weddingtime(::google::protobuf::uint32 value) {
  set_has_weddingtime();
  weddingtime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.WeddingData.weddingtime)
}

// optional uint32 photoidx = 6 [default = 0];
inline bool WeddingData::has_photoidx() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void WeddingData::set_has_photoidx() {
  _has_bits_[0] |= 0x00000020u;
}
inline void WeddingData::clear_has_photoidx() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void WeddingData::clear_photoidx() {
  photoidx_ = 0u;
  clear_has_photoidx();
}
inline ::google::protobuf::uint32 WeddingData::photoidx() const {
  // @@protoc_insertion_point(field_get:Cmd.WeddingData.photoidx)
  return photoidx_;
}
inline void WeddingData::set_photoidx(::google::protobuf::uint32 value) {
  set_has_photoidx();
  photoidx_ = value;
  // @@protoc_insertion_point(field_set:Cmd.WeddingData.photoidx)
}

// optional uint32 phototime = 7 [default = 0];
inline bool WeddingData::has_phototime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void WeddingData::set_has_phototime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void WeddingData::clear_has_phototime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void WeddingData::clear_phototime() {
  phototime_ = 0u;
  clear_has_phototime();
}
inline ::google::protobuf::uint32 WeddingData::phototime() const {
  // @@protoc_insertion_point(field_get:Cmd.WeddingData.phototime)
  return phototime_;
}
inline void WeddingData::set_phototime(::google::protobuf::uint32 value) {
  set_has_phototime();
  phototime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.WeddingData.phototime)
}

// optional string myname = 8;
inline bool WeddingData::has_myname() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void WeddingData::set_has_myname() {
  _has_bits_[0] |= 0x00000080u;
}
inline void WeddingData::clear_has_myname() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void WeddingData::clear_myname() {
  if (myname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    myname_->clear();
  }
  clear_has_myname();
}
inline const ::std::string& WeddingData::myname() const {
  // @@protoc_insertion_point(field_get:Cmd.WeddingData.myname)
  return *myname_;
}
inline void WeddingData::set_myname(const ::std::string& value) {
  set_has_myname();
  if (myname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    myname_ = new ::std::string;
  }
  myname_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.WeddingData.myname)
}
inline void WeddingData::set_myname(const char* value) {
  set_has_myname();
  if (myname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    myname_ = new ::std::string;
  }
  myname_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.WeddingData.myname)
}
inline void WeddingData::set_myname(const char* value, size_t size) {
  set_has_myname();
  if (myname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    myname_ = new ::std::string;
  }
  myname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.WeddingData.myname)
}
inline ::std::string* WeddingData::mutable_myname() {
  set_has_myname();
  if (myname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    myname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.WeddingData.myname)
  return myname_;
}
inline ::std::string* WeddingData::release_myname() {
  clear_has_myname();
  if (myname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = myname_;
    myname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void WeddingData::set_allocated_myname(::std::string* myname) {
  if (myname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete myname_;
  }
  if (myname) {
    set_has_myname();
    myname_ = myname;
  } else {
    clear_has_myname();
    myname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.WeddingData.myname)
}

// optional string partnername = 9;
inline bool WeddingData::has_partnername() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void WeddingData::set_has_partnername() {
  _has_bits_[0] |= 0x00000100u;
}
inline void WeddingData::clear_has_partnername() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void WeddingData::clear_partnername() {
  if (partnername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    partnername_->clear();
  }
  clear_has_partnername();
}
inline const ::std::string& WeddingData::partnername() const {
  // @@protoc_insertion_point(field_get:Cmd.WeddingData.partnername)
  return *partnername_;
}
inline void WeddingData::set_partnername(const ::std::string& value) {
  set_has_partnername();
  if (partnername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    partnername_ = new ::std::string;
  }
  partnername_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.WeddingData.partnername)
}
inline void WeddingData::set_partnername(const char* value) {
  set_has_partnername();
  if (partnername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    partnername_ = new ::std::string;
  }
  partnername_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.WeddingData.partnername)
}
inline void WeddingData::set_partnername(const char* value, size_t size) {
  set_has_partnername();
  if (partnername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    partnername_ = new ::std::string;
  }
  partnername_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.WeddingData.partnername)
}
inline ::std::string* WeddingData::mutable_partnername() {
  set_has_partnername();
  if (partnername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    partnername_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.WeddingData.partnername)
  return partnername_;
}
inline ::std::string* WeddingData::release_partnername() {
  clear_has_partnername();
  if (partnername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = partnername_;
    partnername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void WeddingData::set_allocated_partnername(::std::string* partnername) {
  if (partnername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete partnername_;
  }
  if (partnername) {
    set_has_partnername();
    partnername_ = partnername;
  } else {
    clear_has_partnername();
    partnername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.WeddingData.partnername)
}

// optional uint32 starttime = 10 [default = 0];
inline bool WeddingData::has_starttime() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void WeddingData::set_has_starttime() {
  _has_bits_[0] |= 0x00000200u;
}
inline void WeddingData::clear_has_starttime() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void WeddingData::clear_starttime() {
  starttime_ = 0u;
  clear_has_starttime();
}
inline ::google::protobuf::uint32 WeddingData::starttime() const {
  // @@protoc_insertion_point(field_get:Cmd.WeddingData.starttime)
  return starttime_;
}
inline void WeddingData::set_starttime(::google::protobuf::uint32 value) {
  set_has_starttime();
  starttime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.WeddingData.starttime)
}

// optional uint32 endtime = 11 [default = 0];
inline bool WeddingData::has_endtime() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void WeddingData::set_has_endtime() {
  _has_bits_[0] |= 0x00000400u;
}
inline void WeddingData::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void WeddingData::clear_endtime() {
  endtime_ = 0u;
  clear_has_endtime();
}
inline ::google::protobuf::uint32 WeddingData::endtime() const {
  // @@protoc_insertion_point(field_get:Cmd.WeddingData.endtime)
  return endtime_;
}
inline void WeddingData::set_endtime(::google::protobuf::uint32 value) {
  set_has_endtime();
  endtime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.WeddingData.endtime)
}

// optional bool notified = 12 [default = false];
inline bool WeddingData::has_notified() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void WeddingData::set_has_notified() {
  _has_bits_[0] |= 0x00000800u;
}
inline void WeddingData::clear_has_notified() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void WeddingData::clear_notified() {
  notified_ = false;
  clear_has_notified();
}
inline bool WeddingData::notified() const {
  // @@protoc_insertion_point(field_get:Cmd.WeddingData.notified)
  return notified_;
}
inline void WeddingData::set_notified(bool value) {
  set_has_notified();
  notified_ = value;
  // @@protoc_insertion_point(field_set:Cmd.WeddingData.notified)
}

// -------------------------------------------------------------------

// SenderData

// optional uint64 charid = 1;
inline bool SenderData::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SenderData::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SenderData::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SenderData::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 SenderData::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.SenderData.charid)
  return charid_;
}
inline void SenderData::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SenderData.charid)
}

// optional string name = 2;
inline bool SenderData::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SenderData::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SenderData::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SenderData::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& SenderData::name() const {
  // @@protoc_insertion_point(field_get:Cmd.SenderData.name)
  return *name_;
}
inline void SenderData::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.SenderData.name)
}
inline void SenderData::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.SenderData.name)
}
inline void SenderData::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.SenderData.name)
}
inline ::std::string* SenderData::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.SenderData.name)
  return name_;
}
inline ::std::string* SenderData::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SenderData::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.SenderData.name)
}

// -------------------------------------------------------------------

// ItemData

// optional .Cmd.ItemInfo base = 1;
inline bool ItemData::has_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ItemData::set_has_base() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ItemData::clear_has_base() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ItemData::clear_base() {
  if (base_ != NULL) base_->::Cmd::ItemInfo::Clear();
  clear_has_base();
}
inline const ::Cmd::ItemInfo& ItemData::base() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemData.base)
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
inline ::Cmd::ItemInfo* ItemData::mutable_base() {
  set_has_base();
  if (base_ == NULL) base_ = new ::Cmd::ItemInfo;
  // @@protoc_insertion_point(field_mutable:Cmd.ItemData.base)
  return base_;
}
inline ::Cmd::ItemInfo* ItemData::release_base() {
  clear_has_base();
  ::Cmd::ItemInfo* temp = base_;
  base_ = NULL;
  return temp;
}
inline void ItemData::set_allocated_base(::Cmd::ItemInfo* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ItemData.base)
}

// optional bool equiped = 2 [default = false];
inline bool ItemData::has_equiped() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ItemData::set_has_equiped() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ItemData::clear_has_equiped() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ItemData::clear_equiped() {
  equiped_ = false;
  clear_has_equiped();
}
inline bool ItemData::equiped() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemData.equiped)
  return equiped_;
}
inline void ItemData::set_equiped(bool value) {
  set_has_equiped();
  equiped_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemData.equiped)
}

// optional uint32 battlepoint = 3 [default = 0];
inline bool ItemData::has_battlepoint() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ItemData::set_has_battlepoint() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ItemData::clear_has_battlepoint() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ItemData::clear_battlepoint() {
  battlepoint_ = 0u;
  clear_has_battlepoint();
}
inline ::google::protobuf::uint32 ItemData::battlepoint() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemData.battlepoint)
  return battlepoint_;
}
inline void ItemData::set_battlepoint(::google::protobuf::uint32 value) {
  set_has_battlepoint();
  battlepoint_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemData.battlepoint)
}

// optional .Cmd.EquipData equip = 4;
inline bool ItemData::has_equip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ItemData::set_has_equip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ItemData::clear_has_equip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ItemData::clear_equip() {
  if (equip_ != NULL) equip_->::Cmd::EquipData::Clear();
  clear_has_equip();
}
inline const ::Cmd::EquipData& ItemData::equip() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemData.equip)
  return equip_ != NULL ? *equip_ : *default_instance_->equip_;
}
inline ::Cmd::EquipData* ItemData::mutable_equip() {
  set_has_equip();
  if (equip_ == NULL) equip_ = new ::Cmd::EquipData;
  // @@protoc_insertion_point(field_mutable:Cmd.ItemData.equip)
  return equip_;
}
inline ::Cmd::EquipData* ItemData::release_equip() {
  clear_has_equip();
  ::Cmd::EquipData* temp = equip_;
  equip_ = NULL;
  return temp;
}
inline void ItemData::set_allocated_equip(::Cmd::EquipData* equip) {
  delete equip_;
  equip_ = equip;
  if (equip) {
    set_has_equip();
  } else {
    clear_has_equip();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ItemData.equip)
}

// repeated .Cmd.CardData card = 5;
inline int ItemData::card_size() const {
  return card_.size();
}
inline void ItemData::clear_card() {
  card_.Clear();
}
inline const ::Cmd::CardData& ItemData::card(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.ItemData.card)
  return card_.Get(index);
}
inline ::Cmd::CardData* ItemData::mutable_card(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.ItemData.card)
  return card_.Mutable(index);
}
inline ::Cmd::CardData* ItemData::add_card() {
  // @@protoc_insertion_point(field_add:Cmd.ItemData.card)
  return card_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::CardData >&
ItemData::card() const {
  // @@protoc_insertion_point(field_list:Cmd.ItemData.card)
  return card_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::CardData >*
ItemData::mutable_card() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.ItemData.card)
  return &card_;
}

// optional .Cmd.EnchantData enchant = 6;
inline bool ItemData::has_enchant() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ItemData::set_has_enchant() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ItemData::clear_has_enchant() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ItemData::clear_enchant() {
  if (enchant_ != NULL) enchant_->::Cmd::EnchantData::Clear();
  clear_has_enchant();
}
inline const ::Cmd::EnchantData& ItemData::enchant() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemData.enchant)
  return enchant_ != NULL ? *enchant_ : *default_instance_->enchant_;
}
inline ::Cmd::EnchantData* ItemData::mutable_enchant() {
  set_has_enchant();
  if (enchant_ == NULL) enchant_ = new ::Cmd::EnchantData;
  // @@protoc_insertion_point(field_mutable:Cmd.ItemData.enchant)
  return enchant_;
}
inline ::Cmd::EnchantData* ItemData::release_enchant() {
  clear_has_enchant();
  ::Cmd::EnchantData* temp = enchant_;
  enchant_ = NULL;
  return temp;
}
inline void ItemData::set_allocated_enchant(::Cmd::EnchantData* enchant) {
  delete enchant_;
  enchant_ = enchant;
  if (enchant) {
    set_has_enchant();
  } else {
    clear_has_enchant();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ItemData.enchant)
}

// optional .Cmd.EnchantData previewenchant = 7;
inline bool ItemData::has_previewenchant() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ItemData::set_has_previewenchant() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ItemData::clear_has_previewenchant() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ItemData::clear_previewenchant() {
  if (previewenchant_ != NULL) previewenchant_->::Cmd::EnchantData::Clear();
  clear_has_previewenchant();
}
inline const ::Cmd::EnchantData& ItemData::previewenchant() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemData.previewenchant)
  return previewenchant_ != NULL ? *previewenchant_ : *default_instance_->previewenchant_;
}
inline ::Cmd::EnchantData* ItemData::mutable_previewenchant() {
  set_has_previewenchant();
  if (previewenchant_ == NULL) previewenchant_ = new ::Cmd::EnchantData;
  // @@protoc_insertion_point(field_mutable:Cmd.ItemData.previewenchant)
  return previewenchant_;
}
inline ::Cmd::EnchantData* ItemData::release_previewenchant() {
  clear_has_previewenchant();
  ::Cmd::EnchantData* temp = previewenchant_;
  previewenchant_ = NULL;
  return temp;
}
inline void ItemData::set_allocated_previewenchant(::Cmd::EnchantData* previewenchant) {
  delete previewenchant_;
  previewenchant_ = previewenchant;
  if (previewenchant) {
    set_has_previewenchant();
  } else {
    clear_has_previewenchant();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ItemData.previewenchant)
}

// optional .Cmd.RefineData refine = 8;
inline bool ItemData::has_refine() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ItemData::set_has_refine() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ItemData::clear_has_refine() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ItemData::clear_refine() {
  if (refine_ != NULL) refine_->::Cmd::RefineData::Clear();
  clear_has_refine();
}
inline const ::Cmd::RefineData& ItemData::refine() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemData.refine)
  return refine_ != NULL ? *refine_ : *default_instance_->refine_;
}
inline ::Cmd::RefineData* ItemData::mutable_refine() {
  set_has_refine();
  if (refine_ == NULL) refine_ = new ::Cmd::RefineData;
  // @@protoc_insertion_point(field_mutable:Cmd.ItemData.refine)
  return refine_;
}
inline ::Cmd::RefineData* ItemData::release_refine() {
  clear_has_refine();
  ::Cmd::RefineData* temp = refine_;
  refine_ = NULL;
  return temp;
}
inline void ItemData::set_allocated_refine(::Cmd::RefineData* refine) {
  delete refine_;
  refine_ = refine;
  if (refine) {
    set_has_refine();
  } else {
    clear_has_refine();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ItemData.refine)
}

// optional .Cmd.EggData egg = 9;
inline bool ItemData::has_egg() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ItemData::set_has_egg() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ItemData::clear_has_egg() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ItemData::clear_egg() {
  if (egg_ != NULL) egg_->::Cmd::EggData::Clear();
  clear_has_egg();
}
inline const ::Cmd::EggData& ItemData::egg() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemData.egg)
  return egg_ != NULL ? *egg_ : *default_instance_->egg_;
}
inline ::Cmd::EggData* ItemData::mutable_egg() {
  set_has_egg();
  if (egg_ == NULL) egg_ = new ::Cmd::EggData;
  // @@protoc_insertion_point(field_mutable:Cmd.ItemData.egg)
  return egg_;
}
inline ::Cmd::EggData* ItemData::release_egg() {
  clear_has_egg();
  ::Cmd::EggData* temp = egg_;
  egg_ = NULL;
  return temp;
}
inline void ItemData::set_allocated_egg(::Cmd::EggData* egg) {
  delete egg_;
  egg_ = egg;
  if (egg) {
    set_has_egg();
  } else {
    clear_has_egg();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ItemData.egg)
}

// optional .Cmd.LoveLetterData letter = 10;
inline bool ItemData::has_letter() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ItemData::set_has_letter() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ItemData::clear_has_letter() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ItemData::clear_letter() {
  if (letter_ != NULL) letter_->::Cmd::LoveLetterData::Clear();
  clear_has_letter();
}
inline const ::Cmd::LoveLetterData& ItemData::letter() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemData.letter)
  return letter_ != NULL ? *letter_ : *default_instance_->letter_;
}
inline ::Cmd::LoveLetterData* ItemData::mutable_letter() {
  set_has_letter();
  if (letter_ == NULL) letter_ = new ::Cmd::LoveLetterData;
  // @@protoc_insertion_point(field_mutable:Cmd.ItemData.letter)
  return letter_;
}
inline ::Cmd::LoveLetterData* ItemData::release_letter() {
  clear_has_letter();
  ::Cmd::LoveLetterData* temp = letter_;
  letter_ = NULL;
  return temp;
}
inline void ItemData::set_allocated_letter(::Cmd::LoveLetterData* letter) {
  delete letter_;
  letter_ = letter;
  if (letter) {
    set_has_letter();
  } else {
    clear_has_letter();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ItemData.letter)
}

// optional .Cmd.CodeData code = 11;
inline bool ItemData::has_code() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ItemData::set_has_code() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ItemData::clear_has_code() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ItemData::clear_code() {
  if (code_ != NULL) code_->::Cmd::CodeData::Clear();
  clear_has_code();
}
inline const ::Cmd::CodeData& ItemData::code() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemData.code)
  return code_ != NULL ? *code_ : *default_instance_->code_;
}
inline ::Cmd::CodeData* ItemData::mutable_code() {
  set_has_code();
  if (code_ == NULL) code_ = new ::Cmd::CodeData;
  // @@protoc_insertion_point(field_mutable:Cmd.ItemData.code)
  return code_;
}
inline ::Cmd::CodeData* ItemData::release_code() {
  clear_has_code();
  ::Cmd::CodeData* temp = code_;
  code_ = NULL;
  return temp;
}
inline void ItemData::set_allocated_code(::Cmd::CodeData* code) {
  delete code_;
  code_ = code;
  if (code) {
    set_has_code();
  } else {
    clear_has_code();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ItemData.code)
}

// optional .Cmd.WeddingData wedding = 12;
inline bool ItemData::has_wedding() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ItemData::set_has_wedding() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ItemData::clear_has_wedding() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ItemData::clear_wedding() {
  if (wedding_ != NULL) wedding_->::Cmd::WeddingData::Clear();
  clear_has_wedding();
}
inline const ::Cmd::WeddingData& ItemData::wedding() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemData.wedding)
  return wedding_ != NULL ? *wedding_ : *default_instance_->wedding_;
}
inline ::Cmd::WeddingData* ItemData::mutable_wedding() {
  set_has_wedding();
  if (wedding_ == NULL) wedding_ = new ::Cmd::WeddingData;
  // @@protoc_insertion_point(field_mutable:Cmd.ItemData.wedding)
  return wedding_;
}
inline ::Cmd::WeddingData* ItemData::release_wedding() {
  clear_has_wedding();
  ::Cmd::WeddingData* temp = wedding_;
  wedding_ = NULL;
  return temp;
}
inline void ItemData::set_allocated_wedding(::Cmd::WeddingData* wedding) {
  delete wedding_;
  wedding_ = wedding;
  if (wedding) {
    set_has_wedding();
  } else {
    clear_has_wedding();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ItemData.wedding)
}

// optional .Cmd.SenderData sender = 13;
inline bool ItemData::has_sender() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ItemData::set_has_sender() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ItemData::clear_has_sender() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ItemData::clear_sender() {
  if (sender_ != NULL) sender_->::Cmd::SenderData::Clear();
  clear_has_sender();
}
inline const ::Cmd::SenderData& ItemData::sender() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemData.sender)
  return sender_ != NULL ? *sender_ : *default_instance_->sender_;
}
inline ::Cmd::SenderData* ItemData::mutable_sender() {
  set_has_sender();
  if (sender_ == NULL) sender_ = new ::Cmd::SenderData;
  // @@protoc_insertion_point(field_mutable:Cmd.ItemData.sender)
  return sender_;
}
inline ::Cmd::SenderData* ItemData::release_sender() {
  clear_has_sender();
  ::Cmd::SenderData* temp = sender_;
  sender_ = NULL;
  return temp;
}
inline void ItemData::set_allocated_sender(::Cmd::SenderData* sender) {
  delete sender_;
  sender_ = sender;
  if (sender) {
    set_has_sender();
  } else {
    clear_has_sender();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ItemData.sender)
}

// -------------------------------------------------------------------

// PackageItem

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
inline bool PackageItem::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PackageItem::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PackageItem::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PackageItem::clear_cmd() {
  cmd_ = 6;
  clear_has_cmd();
}
inline ::Cmd::Command PackageItem::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.PackageItem.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void PackageItem::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PackageItem.cmd)
}

// optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_PACKAGEITEM];
inline bool PackageItem::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PackageItem::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PackageItem::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PackageItem::clear_param() {
  param_ = 1;
  clear_has_param();
}
inline ::Cmd::ItemParam PackageItem::param() const {
  // @@protoc_insertion_point(field_get:Cmd.PackageItem.param)
  return static_cast< ::Cmd::ItemParam >(param_);
}
inline void PackageItem::set_param(::Cmd::ItemParam value) {
  assert(::Cmd::ItemParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PackageItem.param)
}

// optional .Cmd.EPackType type = 3 [default = EPACKTYPE_MIN];
inline bool PackageItem::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PackageItem::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PackageItem::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PackageItem::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Cmd::EPackType PackageItem::type() const {
  // @@protoc_insertion_point(field_get:Cmd.PackageItem.type)
  return static_cast< ::Cmd::EPackType >(type_);
}
inline void PackageItem::set_type(::Cmd::EPackType value) {
  assert(::Cmd::EPackType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PackageItem.type)
}

// repeated .Cmd.ItemData data = 4;
inline int PackageItem::data_size() const {
  return data_.size();
}
inline void PackageItem::clear_data() {
  data_.Clear();
}
inline const ::Cmd::ItemData& PackageItem::data(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.PackageItem.data)
  return data_.Get(index);
}
inline ::Cmd::ItemData* PackageItem::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.PackageItem.data)
  return data_.Mutable(index);
}
inline ::Cmd::ItemData* PackageItem::add_data() {
  // @@protoc_insertion_point(field_add:Cmd.PackageItem.data)
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ItemData >&
PackageItem::data() const {
  // @@protoc_insertion_point(field_list:Cmd.PackageItem.data)
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::ItemData >*
PackageItem::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.PackageItem.data)
  return &data_;
}

// optional uint32 maxslot = 5 [default = 0];
inline bool PackageItem::has_maxslot() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PackageItem::set_has_maxslot() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PackageItem::clear_has_maxslot() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PackageItem::clear_maxslot() {
  maxslot_ = 0u;
  clear_has_maxslot();
}
inline ::google::protobuf::uint32 PackageItem::maxslot() const {
  // @@protoc_insertion_point(field_get:Cmd.PackageItem.maxslot)
  return maxslot_;
}
inline void PackageItem::set_maxslot(::google::protobuf::uint32 value) {
  set_has_maxslot();
  maxslot_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PackageItem.maxslot)
}

// -------------------------------------------------------------------

// PackageUpdate

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
inline bool PackageUpdate::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PackageUpdate::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PackageUpdate::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PackageUpdate::clear_cmd() {
  cmd_ = 6;
  clear_has_cmd();
}
inline ::Cmd::Command PackageUpdate::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.PackageUpdate.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void PackageUpdate::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PackageUpdate.cmd)
}

// optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_PACKAGEUPDATE];
inline bool PackageUpdate::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PackageUpdate::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PackageUpdate::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PackageUpdate::clear_param() {
  param_ = 2;
  clear_has_param();
}
inline ::Cmd::ItemParam PackageUpdate::param() const {
  // @@protoc_insertion_point(field_get:Cmd.PackageUpdate.param)
  return static_cast< ::Cmd::ItemParam >(param_);
}
inline void PackageUpdate::set_param(::Cmd::ItemParam value) {
  assert(::Cmd::ItemParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PackageUpdate.param)
}

// optional .Cmd.EPackType type = 3 [default = EPACKTYPE_MIN];
inline bool PackageUpdate::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PackageUpdate::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PackageUpdate::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PackageUpdate::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Cmd::EPackType PackageUpdate::type() const {
  // @@protoc_insertion_point(field_get:Cmd.PackageUpdate.type)
  return static_cast< ::Cmd::EPackType >(type_);
}
inline void PackageUpdate::set_type(::Cmd::EPackType value) {
  assert(::Cmd::EPackType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PackageUpdate.type)
}

// repeated .Cmd.ItemData updateItems = 4;
inline int PackageUpdate::updateitems_size() const {
  return updateitems_.size();
}
inline void PackageUpdate::clear_updateitems() {
  updateitems_.Clear();
}
inline const ::Cmd::ItemData& PackageUpdate::updateitems(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.PackageUpdate.updateItems)
  return updateitems_.Get(index);
}
inline ::Cmd::ItemData* PackageUpdate::mutable_updateitems(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.PackageUpdate.updateItems)
  return updateitems_.Mutable(index);
}
inline ::Cmd::ItemData* PackageUpdate::add_updateitems() {
  // @@protoc_insertion_point(field_add:Cmd.PackageUpdate.updateItems)
  return updateitems_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ItemData >&
PackageUpdate::updateitems() const {
  // @@protoc_insertion_point(field_list:Cmd.PackageUpdate.updateItems)
  return updateitems_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::ItemData >*
PackageUpdate::mutable_updateitems() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.PackageUpdate.updateItems)
  return &updateitems_;
}

// repeated .Cmd.ItemData delItems = 5;
inline int PackageUpdate::delitems_size() const {
  return delitems_.size();
}
inline void PackageUpdate::clear_delitems() {
  delitems_.Clear();
}
inline const ::Cmd::ItemData& PackageUpdate::delitems(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.PackageUpdate.delItems)
  return delitems_.Get(index);
}
inline ::Cmd::ItemData* PackageUpdate::mutable_delitems(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.PackageUpdate.delItems)
  return delitems_.Mutable(index);
}
inline ::Cmd::ItemData* PackageUpdate::add_delitems() {
  // @@protoc_insertion_point(field_add:Cmd.PackageUpdate.delItems)
  return delitems_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ItemData >&
PackageUpdate::delitems() const {
  // @@protoc_insertion_point(field_list:Cmd.PackageUpdate.delItems)
  return delitems_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::ItemData >*
PackageUpdate::mutable_delitems() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.PackageUpdate.delItems)
  return &delitems_;
}

// -------------------------------------------------------------------

// ItemUse

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
inline bool ItemUse::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ItemUse::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ItemUse::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ItemUse::clear_cmd() {
  cmd_ = 6;
  clear_has_cmd();
}
inline ::Cmd::Command ItemUse::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemUse.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ItemUse::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemUse.cmd)
}

// optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_ITEMUSE];
inline bool ItemUse::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ItemUse::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ItemUse::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ItemUse::clear_param() {
  param_ = 3;
  clear_has_param();
}
inline ::Cmd::ItemParam ItemUse::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemUse.param)
  return static_cast< ::Cmd::ItemParam >(param_);
}
inline void ItemUse::set_param(::Cmd::ItemParam value) {
  assert(::Cmd::ItemParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemUse.param)
}

// optional string itemguid = 3;
inline bool ItemUse::has_itemguid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ItemUse::set_has_itemguid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ItemUse::clear_has_itemguid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ItemUse::clear_itemguid() {
  if (itemguid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemguid_->clear();
  }
  clear_has_itemguid();
}
inline const ::std::string& ItemUse::itemguid() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemUse.itemguid)
  return *itemguid_;
}
inline void ItemUse::set_itemguid(const ::std::string& value) {
  set_has_itemguid();
  if (itemguid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemguid_ = new ::std::string;
  }
  itemguid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ItemUse.itemguid)
}
inline void ItemUse::set_itemguid(const char* value) {
  set_has_itemguid();
  if (itemguid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemguid_ = new ::std::string;
  }
  itemguid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ItemUse.itemguid)
}
inline void ItemUse::set_itemguid(const char* value, size_t size) {
  set_has_itemguid();
  if (itemguid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemguid_ = new ::std::string;
  }
  itemguid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ItemUse.itemguid)
}
inline ::std::string* ItemUse::mutable_itemguid() {
  set_has_itemguid();
  if (itemguid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemguid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ItemUse.itemguid)
  return itemguid_;
}
inline ::std::string* ItemUse::release_itemguid() {
  clear_has_itemguid();
  if (itemguid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = itemguid_;
    itemguid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ItemUse::set_allocated_itemguid(::std::string* itemguid) {
  if (itemguid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete itemguid_;
  }
  if (itemguid) {
    set_has_itemguid();
    itemguid_ = itemguid;
  } else {
    clear_has_itemguid();
    itemguid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ItemUse.itemguid)
}

// repeated uint64 targets = 4;
inline int ItemUse::targets_size() const {
  return targets_.size();
}
inline void ItemUse::clear_targets() {
  targets_.Clear();
}
inline ::google::protobuf::uint64 ItemUse::targets(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.ItemUse.targets)
  return targets_.Get(index);
}
inline void ItemUse::set_targets(int index, ::google::protobuf::uint64 value) {
  targets_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.ItemUse.targets)
}
inline void ItemUse::add_targets(::google::protobuf::uint64 value) {
  targets_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.ItemUse.targets)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
ItemUse::targets() const {
  // @@protoc_insertion_point(field_list:Cmd.ItemUse.targets)
  return targets_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
ItemUse::mutable_targets() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.ItemUse.targets)
  return &targets_;
}

// optional uint32 count = 5;
inline bool ItemUse::has_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ItemUse::set_has_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ItemUse::clear_has_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ItemUse::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 ItemUse::count() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemUse.count)
  return count_;
}
inline void ItemUse::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemUse.count)
}

// -------------------------------------------------------------------

// SortInfo

// optional string guid = 1;
inline bool SortInfo::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SortInfo::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SortInfo::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SortInfo::clear_guid() {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_->clear();
  }
  clear_has_guid();
}
inline const ::std::string& SortInfo::guid() const {
  // @@protoc_insertion_point(field_get:Cmd.SortInfo.guid)
  return *guid_;
}
inline void SortInfo::set_guid(const ::std::string& value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.SortInfo.guid)
}
inline void SortInfo::set_guid(const char* value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.SortInfo.guid)
}
inline void SortInfo::set_guid(const char* value, size_t size) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.SortInfo.guid)
}
inline ::std::string* SortInfo::mutable_guid() {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.SortInfo.guid)
  return guid_;
}
inline ::std::string* SortInfo::release_guid() {
  clear_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = guid_;
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SortInfo::set_allocated_guid(::std::string* guid) {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guid_;
  }
  if (guid) {
    set_has_guid();
    guid_ = guid;
  } else {
    clear_has_guid();
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.SortInfo.guid)
}

// optional uint32 index = 2 [default = 0];
inline bool SortInfo::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SortInfo::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SortInfo::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SortInfo::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 SortInfo::index() const {
  // @@protoc_insertion_point(field_get:Cmd.SortInfo.index)
  return index_;
}
inline void SortInfo::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SortInfo.index)
}

// -------------------------------------------------------------------

// PackageSort

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
inline bool PackageSort::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PackageSort::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PackageSort::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PackageSort::clear_cmd() {
  cmd_ = 6;
  clear_has_cmd();
}
inline ::Cmd::Command PackageSort::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.PackageSort.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void PackageSort::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PackageSort.cmd)
}

// optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_PACKAGESORT];
inline bool PackageSort::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PackageSort::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PackageSort::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PackageSort::clear_param() {
  param_ = 4;
  clear_has_param();
}
inline ::Cmd::ItemParam PackageSort::param() const {
  // @@protoc_insertion_point(field_get:Cmd.PackageSort.param)
  return static_cast< ::Cmd::ItemParam >(param_);
}
inline void PackageSort::set_param(::Cmd::ItemParam value) {
  assert(::Cmd::ItemParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PackageSort.param)
}

// optional .Cmd.EPackType type = 3 [default = EPACKTYPE_MIN];
inline bool PackageSort::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PackageSort::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PackageSort::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PackageSort::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Cmd::EPackType PackageSort::type() const {
  // @@protoc_insertion_point(field_get:Cmd.PackageSort.type)
  return static_cast< ::Cmd::EPackType >(type_);
}
inline void PackageSort::set_type(::Cmd::EPackType value) {
  assert(::Cmd::EPackType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PackageSort.type)
}

// repeated .Cmd.SortInfo item = 4;
inline int PackageSort::item_size() const {
  return item_.size();
}
inline void PackageSort::clear_item() {
  item_.Clear();
}
inline const ::Cmd::SortInfo& PackageSort::item(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.PackageSort.item)
  return item_.Get(index);
}
inline ::Cmd::SortInfo* PackageSort::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.PackageSort.item)
  return item_.Mutable(index);
}
inline ::Cmd::SortInfo* PackageSort::add_item() {
  // @@protoc_insertion_point(field_add:Cmd.PackageSort.item)
  return item_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::SortInfo >&
PackageSort::item() const {
  // @@protoc_insertion_point(field_list:Cmd.PackageSort.item)
  return item_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::SortInfo >*
PackageSort::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.PackageSort.item)
  return &item_;
}

// -------------------------------------------------------------------

// Equip

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
inline bool Equip::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Equip::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Equip::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Equip::clear_cmd() {
  cmd_ = 6;
  clear_has_cmd();
}
inline ::Cmd::Command Equip::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.Equip.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void Equip::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.Equip.cmd)
}

// optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_EQUIP];
inline bool Equip::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Equip::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Equip::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Equip::clear_param() {
  param_ = 5;
  clear_has_param();
}
inline ::Cmd::ItemParam Equip::param() const {
  // @@protoc_insertion_point(field_get:Cmd.Equip.param)
  return static_cast< ::Cmd::ItemParam >(param_);
}
inline void Equip::set_param(::Cmd::ItemParam value) {
  assert(::Cmd::ItemParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.Equip.param)
}

// optional .Cmd.EEquipOper oper = 3 [default = EEQUIPOPER_MIN];
inline bool Equip::has_oper() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Equip::set_has_oper() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Equip::clear_has_oper() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Equip::clear_oper() {
  oper_ = 0;
  clear_has_oper();
}
inline ::Cmd::EEquipOper Equip::oper() const {
  // @@protoc_insertion_point(field_get:Cmd.Equip.oper)
  return static_cast< ::Cmd::EEquipOper >(oper_);
}
inline void Equip::set_oper(::Cmd::EEquipOper value) {
  assert(::Cmd::EEquipOper_IsValid(value));
  set_has_oper();
  oper_ = value;
  // @@protoc_insertion_point(field_set:Cmd.Equip.oper)
}

// optional .Cmd.EEquipPos pos = 4 [default = EEQUIPPOS_MIN];
inline bool Equip::has_pos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Equip::set_has_pos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Equip::clear_has_pos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Equip::clear_pos() {
  pos_ = 0;
  clear_has_pos();
}
inline ::Cmd::EEquipPos Equip::pos() const {
  // @@protoc_insertion_point(field_get:Cmd.Equip.pos)
  return static_cast< ::Cmd::EEquipPos >(pos_);
}
inline void Equip::set_pos(::Cmd::EEquipPos value) {
  assert(::Cmd::EEquipPos_IsValid(value));
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:Cmd.Equip.pos)
}

// optional string guid = 5;
inline bool Equip::has_guid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Equip::set_has_guid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Equip::clear_has_guid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Equip::clear_guid() {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_->clear();
  }
  clear_has_guid();
}
inline const ::std::string& Equip::guid() const {
  // @@protoc_insertion_point(field_get:Cmd.Equip.guid)
  return *guid_;
}
inline void Equip::set_guid(const ::std::string& value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.Equip.guid)
}
inline void Equip::set_guid(const char* value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.Equip.guid)
}
inline void Equip::set_guid(const char* value, size_t size) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.Equip.guid)
}
inline ::std::string* Equip::mutable_guid() {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.Equip.guid)
  return guid_;
}
inline ::std::string* Equip::release_guid() {
  clear_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = guid_;
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Equip::set_allocated_guid(::std::string* guid) {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guid_;
  }
  if (guid) {
    set_has_guid();
    guid_ = guid;
  } else {
    clear_has_guid();
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.Equip.guid)
}

// optional bool transfer = 6 [default = false];
inline bool Equip::has_transfer() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Equip::set_has_transfer() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Equip::clear_has_transfer() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Equip::clear_transfer() {
  transfer_ = false;
  clear_has_transfer();
}
inline bool Equip::transfer() const {
  // @@protoc_insertion_point(field_get:Cmd.Equip.transfer)
  return transfer_;
}
inline void Equip::set_transfer(bool value) {
  set_has_transfer();
  transfer_ = value;
  // @@protoc_insertion_point(field_set:Cmd.Equip.transfer)
}

// optional uint32 count = 7 [default = 0];
inline bool Equip::has_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Equip::set_has_count() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Equip::clear_has_count() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Equip::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 Equip::count() const {
  // @@protoc_insertion_point(field_get:Cmd.Equip.count)
  return count_;
}
inline void Equip::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:Cmd.Equip.count)
}

// -------------------------------------------------------------------

// SItem

// optional string guid = 1;
inline bool SItem::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SItem::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SItem::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SItem::clear_guid() {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_->clear();
  }
  clear_has_guid();
}
inline const ::std::string& SItem::guid() const {
  // @@protoc_insertion_point(field_get:Cmd.SItem.guid)
  return *guid_;
}
inline void SItem::set_guid(const ::std::string& value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.SItem.guid)
}
inline void SItem::set_guid(const char* value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.SItem.guid)
}
inline void SItem::set_guid(const char* value, size_t size) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.SItem.guid)
}
inline ::std::string* SItem::mutable_guid() {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.SItem.guid)
  return guid_;
}
inline ::std::string* SItem::release_guid() {
  clear_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = guid_;
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SItem::set_allocated_guid(::std::string* guid) {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guid_;
  }
  if (guid) {
    set_has_guid();
    guid_ = guid;
  } else {
    clear_has_guid();
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.SItem.guid)
}

// optional uint32 count = 2 [default = 0];
inline bool SItem::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SItem::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SItem::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SItem::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 SItem::count() const {
  // @@protoc_insertion_point(field_get:Cmd.SItem.count)
  return count_;
}
inline void SItem::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SItem.count)
}

// -------------------------------------------------------------------

// SellItem

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
inline bool SellItem::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SellItem::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SellItem::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SellItem::clear_cmd() {
  cmd_ = 6;
  clear_has_cmd();
}
inline ::Cmd::Command SellItem::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.SellItem.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void SellItem::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SellItem.cmd)
}

// optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_SELLITEM];
inline bool SellItem::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SellItem::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SellItem::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SellItem::clear_param() {
  param_ = 6;
  clear_has_param();
}
inline ::Cmd::ItemParam SellItem::param() const {
  // @@protoc_insertion_point(field_get:Cmd.SellItem.param)
  return static_cast< ::Cmd::ItemParam >(param_);
}
inline void SellItem::set_param(::Cmd::ItemParam value) {
  assert(::Cmd::ItemParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SellItem.param)
}

// optional uint64 npcid = 3 [default = 0];
inline bool SellItem::has_npcid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SellItem::set_has_npcid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SellItem::clear_has_npcid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SellItem::clear_npcid() {
  npcid_ = GOOGLE_ULONGLONG(0);
  clear_has_npcid();
}
inline ::google::protobuf::uint64 SellItem::npcid() const {
  // @@protoc_insertion_point(field_get:Cmd.SellItem.npcid)
  return npcid_;
}
inline void SellItem::set_npcid(::google::protobuf::uint64 value) {
  set_has_npcid();
  npcid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SellItem.npcid)
}

// repeated .Cmd.SItem items = 4;
inline int SellItem::items_size() const {
  return items_.size();
}
inline void SellItem::clear_items() {
  items_.Clear();
}
inline const ::Cmd::SItem& SellItem::items(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.SellItem.items)
  return items_.Get(index);
}
inline ::Cmd::SItem* SellItem::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.SellItem.items)
  return items_.Mutable(index);
}
inline ::Cmd::SItem* SellItem::add_items() {
  // @@protoc_insertion_point(field_add:Cmd.SellItem.items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::SItem >&
SellItem::items() const {
  // @@protoc_insertion_point(field_list:Cmd.SellItem.items)
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::SItem >*
SellItem::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.SellItem.items)
  return &items_;
}

// -------------------------------------------------------------------

// EquipStrength

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
inline bool EquipStrength::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipStrength::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipStrength::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipStrength::clear_cmd() {
  cmd_ = 6;
  clear_has_cmd();
}
inline ::Cmd::Command EquipStrength::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipStrength.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void EquipStrength::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipStrength.cmd)
}

// optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_EQUIPSTRENGTH];
inline bool EquipStrength::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EquipStrength::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EquipStrength::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EquipStrength::clear_param() {
  param_ = 7;
  clear_has_param();
}
inline ::Cmd::ItemParam EquipStrength::param() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipStrength.param)
  return static_cast< ::Cmd::ItemParam >(param_);
}
inline void EquipStrength::set_param(::Cmd::ItemParam value) {
  assert(::Cmd::ItemParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipStrength.param)
}

// optional string guid = 3;
inline bool EquipStrength::has_guid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EquipStrength::set_has_guid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EquipStrength::clear_has_guid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EquipStrength::clear_guid() {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_->clear();
  }
  clear_has_guid();
}
inline const ::std::string& EquipStrength::guid() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipStrength.guid)
  return *guid_;
}
inline void EquipStrength::set_guid(const ::std::string& value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.EquipStrength.guid)
}
inline void EquipStrength::set_guid(const char* value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.EquipStrength.guid)
}
inline void EquipStrength::set_guid(const char* value, size_t size) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.EquipStrength.guid)
}
inline ::std::string* EquipStrength::mutable_guid() {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.EquipStrength.guid)
  return guid_;
}
inline ::std::string* EquipStrength::release_guid() {
  clear_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = guid_;
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EquipStrength::set_allocated_guid(::std::string* guid) {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guid_;
  }
  if (guid) {
    set_has_guid();
    guid_ = guid;
  } else {
    clear_has_guid();
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.EquipStrength.guid)
}

// optional uint32 destcount = 4 [default = 0];
inline bool EquipStrength::has_destcount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EquipStrength::set_has_destcount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EquipStrength::clear_has_destcount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EquipStrength::clear_destcount() {
  destcount_ = 0u;
  clear_has_destcount();
}
inline ::google::protobuf::uint32 EquipStrength::destcount() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipStrength.destcount)
  return destcount_;
}
inline void EquipStrength::set_destcount(::google::protobuf::uint32 value) {
  set_has_destcount();
  destcount_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipStrength.destcount)
}

// optional uint32 count = 5 [default = 0];
inline bool EquipStrength::has_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EquipStrength::set_has_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EquipStrength::clear_has_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EquipStrength::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 EquipStrength::count() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipStrength.count)
  return count_;
}
inline void EquipStrength::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipStrength.count)
}

// optional uint32 cricount = 6 [default = 0];
inline bool EquipStrength::has_cricount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void EquipStrength::set_has_cricount() {
  _has_bits_[0] |= 0x00000020u;
}
inline void EquipStrength::clear_has_cricount() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void EquipStrength::clear_cricount() {
  cricount_ = 0u;
  clear_has_cricount();
}
inline ::google::protobuf::uint32 EquipStrength::cricount() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipStrength.cricount)
  return cricount_;
}
inline void EquipStrength::set_cricount(::google::protobuf::uint32 value) {
  set_has_cricount();
  cricount_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipStrength.cricount)
}

// optional uint32 oldlv = 7 [default = 0];
inline bool EquipStrength::has_oldlv() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void EquipStrength::set_has_oldlv() {
  _has_bits_[0] |= 0x00000040u;
}
inline void EquipStrength::clear_has_oldlv() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void EquipStrength::clear_oldlv() {
  oldlv_ = 0u;
  clear_has_oldlv();
}
inline ::google::protobuf::uint32 EquipStrength::oldlv() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipStrength.oldlv)
  return oldlv_;
}
inline void EquipStrength::set_oldlv(::google::protobuf::uint32 value) {
  set_has_oldlv();
  oldlv_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipStrength.oldlv)
}

// optional uint32 newlv = 8 [default = 0];
inline bool EquipStrength::has_newlv() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void EquipStrength::set_has_newlv() {
  _has_bits_[0] |= 0x00000080u;
}
inline void EquipStrength::clear_has_newlv() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void EquipStrength::clear_newlv() {
  newlv_ = 0u;
  clear_has_newlv();
}
inline ::google::protobuf::uint32 EquipStrength::newlv() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipStrength.newlv)
  return newlv_;
}
inline void EquipStrength::set_newlv(::google::protobuf::uint32 value) {
  set_has_newlv();
  newlv_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipStrength.newlv)
}

// optional .Cmd.EStrengthResult result = 9 [default = ESTRENGTHRESULT_MIN];
inline bool EquipStrength::has_result() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void EquipStrength::set_has_result() {
  _has_bits_[0] |= 0x00000100u;
}
inline void EquipStrength::clear_has_result() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void EquipStrength::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::Cmd::EStrengthResult EquipStrength::result() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipStrength.result)
  return static_cast< ::Cmd::EStrengthResult >(result_);
}
inline void EquipStrength::set_result(::Cmd::EStrengthResult value) {
  assert(::Cmd::EStrengthResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipStrength.result)
}

// optional .Cmd.EStrengthType type = 10 [default = ESTRENGTHTYPE_MIN];
inline bool EquipStrength::has_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void EquipStrength::set_has_type() {
  _has_bits_[0] |= 0x00000200u;
}
inline void EquipStrength::clear_has_type() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void EquipStrength::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Cmd::EStrengthType EquipStrength::type() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipStrength.type)
  return static_cast< ::Cmd::EStrengthType >(type_);
}
inline void EquipStrength::set_type(::Cmd::EStrengthType value) {
  assert(::Cmd::EStrengthType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipStrength.type)
}

// -------------------------------------------------------------------

// Produce

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
inline bool Produce::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Produce::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Produce::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Produce::clear_cmd() {
  cmd_ = 6;
  clear_has_cmd();
}
inline ::Cmd::Command Produce::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.Produce.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void Produce::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.Produce.cmd)
}

// optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_PRODUCE];
inline bool Produce::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Produce::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Produce::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Produce::clear_param() {
  param_ = 9;
  clear_has_param();
}
inline ::Cmd::ItemParam Produce::param() const {
  // @@protoc_insertion_point(field_get:Cmd.Produce.param)
  return static_cast< ::Cmd::ItemParam >(param_);
}
inline void Produce::set_param(::Cmd::ItemParam value) {
  assert(::Cmd::ItemParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.Produce.param)
}

// optional .Cmd.EProduceType type = 3 [default = EPRODUCETYPE_MIN];
inline bool Produce::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Produce::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Produce::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Produce::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::Cmd::EProduceType Produce::type() const {
  // @@protoc_insertion_point(field_get:Cmd.Produce.type)
  return static_cast< ::Cmd::EProduceType >(type_);
}
inline void Produce::set_type(::Cmd::EProduceType value) {
  assert(::Cmd::EProduceType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.Produce.type)
}

// optional uint32 composeid = 4 [default = 0];
inline bool Produce::has_composeid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Produce::set_has_composeid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Produce::clear_has_composeid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Produce::clear_composeid() {
  composeid_ = 0u;
  clear_has_composeid();
}
inline ::google::protobuf::uint32 Produce::composeid() const {
  // @@protoc_insertion_point(field_get:Cmd.Produce.composeid)
  return composeid_;
}
inline void Produce::set_composeid(::google::protobuf::uint32 value) {
  set_has_composeid();
  composeid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.Produce.composeid)
}

// optional uint64 npcid = 5 [default = 0];
inline bool Produce::has_npcid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Produce::set_has_npcid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Produce::clear_has_npcid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Produce::clear_npcid() {
  npcid_ = GOOGLE_ULONGLONG(0);
  clear_has_npcid();
}
inline ::google::protobuf::uint64 Produce::npcid() const {
  // @@protoc_insertion_point(field_get:Cmd.Produce.npcid)
  return npcid_;
}
inline void Produce::set_npcid(::google::protobuf::uint64 value) {
  set_has_npcid();
  npcid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.Produce.npcid)
}

// optional uint32 itemid = 6 [default = 0];
inline bool Produce::has_itemid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Produce::set_has_itemid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Produce::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Produce::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 Produce::itemid() const {
  // @@protoc_insertion_point(field_get:Cmd.Produce.itemid)
  return itemid_;
}
inline void Produce::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.Produce.itemid)
}

// optional uint32 count = 7 [default = 1];
inline bool Produce::has_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Produce::set_has_count() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Produce::clear_has_count() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Produce::clear_count() {
  count_ = 1u;
  clear_has_count();
}
inline ::google::protobuf::uint32 Produce::count() const {
  // @@protoc_insertion_point(field_get:Cmd.Produce.count)
  return count_;
}
inline void Produce::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:Cmd.Produce.count)
}

// optional bool qucikproduce = 8 [default = false];
inline bool Produce::has_qucikproduce() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Produce::set_has_qucikproduce() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Produce::clear_has_qucikproduce() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Produce::clear_qucikproduce() {
  qucikproduce_ = false;
  clear_has_qucikproduce();
}
inline bool Produce::qucikproduce() const {
  // @@protoc_insertion_point(field_get:Cmd.Produce.qucikproduce)
  return qucikproduce_;
}
inline void Produce::set_qucikproduce(bool value) {
  set_has_qucikproduce();
  qucikproduce_ = value;
  // @@protoc_insertion_point(field_set:Cmd.Produce.qucikproduce)
}

// -------------------------------------------------------------------

// ProduceDone

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
inline bool ProduceDone::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProduceDone::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProduceDone::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProduceDone::clear_cmd() {
  cmd_ = 6;
  clear_has_cmd();
}
inline ::Cmd::Command ProduceDone::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ProduceDone.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ProduceDone::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ProduceDone.cmd)
}

// optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_PRODUCEDONE];
inline bool ProduceDone::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProduceDone::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProduceDone::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProduceDone::clear_param() {
  param_ = 10;
  clear_has_param();
}
inline ::Cmd::ItemParam ProduceDone::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ProduceDone.param)
  return static_cast< ::Cmd::ItemParam >(param_);
}
inline void ProduceDone::set_param(::Cmd::ItemParam value) {
  assert(::Cmd::ItemParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ProduceDone.param)
}

// optional .Cmd.EProduceType type = 3 [default = EPRODUCETYPE_MIN];
inline bool ProduceDone::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProduceDone::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProduceDone::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProduceDone::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::Cmd::EProduceType ProduceDone::type() const {
  // @@protoc_insertion_point(field_get:Cmd.ProduceDone.type)
  return static_cast< ::Cmd::EProduceType >(type_);
}
inline void ProduceDone::set_type(::Cmd::EProduceType value) {
  assert(::Cmd::EProduceType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ProduceDone.type)
}

// optional uint64 npcid = 4 [default = 0];
inline bool ProduceDone::has_npcid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProduceDone::set_has_npcid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProduceDone::clear_has_npcid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProduceDone::clear_npcid() {
  npcid_ = GOOGLE_ULONGLONG(0);
  clear_has_npcid();
}
inline ::google::protobuf::uint64 ProduceDone::npcid() const {
  // @@protoc_insertion_point(field_get:Cmd.ProduceDone.npcid)
  return npcid_;
}
inline void ProduceDone::set_npcid(::google::protobuf::uint64 value) {
  set_has_npcid();
  npcid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ProduceDone.npcid)
}

// optional uint64 charid = 5 [default = 0];
inline bool ProduceDone::has_charid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProduceDone::set_has_charid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProduceDone::clear_has_charid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProduceDone::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 ProduceDone::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.ProduceDone.charid)
  return charid_;
}
inline void ProduceDone::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ProduceDone.charid)
}

// optional uint32 delay = 6 [default = 0];
inline bool ProduceDone::has_delay() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProduceDone::set_has_delay() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProduceDone::clear_has_delay() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProduceDone::clear_delay() {
  delay_ = 0u;
  clear_has_delay();
}
inline ::google::protobuf::uint32 ProduceDone::delay() const {
  // @@protoc_insertion_point(field_get:Cmd.ProduceDone.delay)
  return delay_;
}
inline void ProduceDone::set_delay(::google::protobuf::uint32 value) {
  set_has_delay();
  delay_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ProduceDone.delay)
}

// optional uint32 itemid = 7 [default = 0];
inline bool ProduceDone::has_itemid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProduceDone::set_has_itemid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProduceDone::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProduceDone::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 ProduceDone::itemid() const {
  // @@protoc_insertion_point(field_get:Cmd.ProduceDone.itemid)
  return itemid_;
}
inline void ProduceDone::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ProduceDone.itemid)
}

// -------------------------------------------------------------------

// EquipRefine

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
inline bool EquipRefine::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipRefine::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipRefine::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipRefine::clear_cmd() {
  cmd_ = 6;
  clear_has_cmd();
}
inline ::Cmd::Command EquipRefine::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipRefine.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void EquipRefine::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipRefine.cmd)
}

// optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_REFINE];
inline bool EquipRefine::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EquipRefine::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EquipRefine::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EquipRefine::clear_param() {
  param_ = 11;
  clear_has_param();
}
inline ::Cmd::ItemParam EquipRefine::param() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipRefine.param)
  return static_cast< ::Cmd::ItemParam >(param_);
}
inline void EquipRefine::set_param(::Cmd::ItemParam value) {
  assert(::Cmd::ItemParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipRefine.param)
}

// optional string guid = 3;
inline bool EquipRefine::has_guid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EquipRefine::set_has_guid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EquipRefine::clear_has_guid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EquipRefine::clear_guid() {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_->clear();
  }
  clear_has_guid();
}
inline const ::std::string& EquipRefine::guid() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipRefine.guid)
  return *guid_;
}
inline void EquipRefine::set_guid(const ::std::string& value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.EquipRefine.guid)
}
inline void EquipRefine::set_guid(const char* value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.EquipRefine.guid)
}
inline void EquipRefine::set_guid(const char* value, size_t size) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.EquipRefine.guid)
}
inline ::std::string* EquipRefine::mutable_guid() {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.EquipRefine.guid)
  return guid_;
}
inline ::std::string* EquipRefine::release_guid() {
  clear_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = guid_;
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EquipRefine::set_allocated_guid(::std::string* guid) {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guid_;
  }
  if (guid) {
    set_has_guid();
    guid_ = guid;
  } else {
    clear_has_guid();
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.EquipRefine.guid)
}

// optional uint32 composeid = 4 [default = 0];
inline bool EquipRefine::has_composeid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EquipRefine::set_has_composeid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EquipRefine::clear_has_composeid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EquipRefine::clear_composeid() {
  composeid_ = 0u;
  clear_has_composeid();
}
inline ::google::protobuf::uint32 EquipRefine::composeid() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipRefine.composeid)
  return composeid_;
}
inline void EquipRefine::set_composeid(::google::protobuf::uint32 value) {
  set_has_composeid();
  composeid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipRefine.composeid)
}

// optional uint32 refinelv = 5 [default = 0];
inline bool EquipRefine::has_refinelv() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EquipRefine::set_has_refinelv() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EquipRefine::clear_has_refinelv() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EquipRefine::clear_refinelv() {
  refinelv_ = 0u;
  clear_has_refinelv();
}
inline ::google::protobuf::uint32 EquipRefine::refinelv() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipRefine.refinelv)
  return refinelv_;
}
inline void EquipRefine::set_refinelv(::google::protobuf::uint32 value) {
  set_has_refinelv();
  refinelv_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipRefine.refinelv)
}

// optional .Cmd.ERefineResult eresult = 6 [default = EREFINERESULT_MIN];
inline bool EquipRefine::has_eresult() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void EquipRefine::set_has_eresult() {
  _has_bits_[0] |= 0x00000020u;
}
inline void EquipRefine::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void EquipRefine::clear_eresult() {
  eresult_ = 0;
  clear_has_eresult();
}
inline ::Cmd::ERefineResult EquipRefine::eresult() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipRefine.eresult)
  return static_cast< ::Cmd::ERefineResult >(eresult_);
}
inline void EquipRefine::set_eresult(::Cmd::ERefineResult value) {
  assert(::Cmd::ERefineResult_IsValid(value));
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipRefine.eresult)
}

// optional uint64 npcid = 7 [default = 0];
inline bool EquipRefine::has_npcid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void EquipRefine::set_has_npcid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void EquipRefine::clear_has_npcid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void EquipRefine::clear_npcid() {
  npcid_ = GOOGLE_ULONGLONG(0);
  clear_has_npcid();
}
inline ::google::protobuf::uint64 EquipRefine::npcid() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipRefine.npcid)
  return npcid_;
}
inline void EquipRefine::set_npcid(::google::protobuf::uint64 value) {
  set_has_npcid();
  npcid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipRefine.npcid)
}

// optional bool saferefine = 8 [default = false];
inline bool EquipRefine::has_saferefine() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void EquipRefine::set_has_saferefine() {
  _has_bits_[0] |= 0x00000080u;
}
inline void EquipRefine::clear_has_saferefine() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void EquipRefine::clear_saferefine() {
  saferefine_ = false;
  clear_has_saferefine();
}
inline bool EquipRefine::saferefine() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipRefine.saferefine)
  return saferefine_;
}
inline void EquipRefine::set_saferefine(bool value) {
  set_has_saferefine();
  saferefine_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipRefine.saferefine)
}

// repeated string itemguid = 9;
inline int EquipRefine::itemguid_size() const {
  return itemguid_.size();
}
inline void EquipRefine::clear_itemguid() {
  itemguid_.Clear();
}
inline const ::std::string& EquipRefine::itemguid(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.EquipRefine.itemguid)
  return itemguid_.Get(index);
}
inline ::std::string* EquipRefine::mutable_itemguid(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.EquipRefine.itemguid)
  return itemguid_.Mutable(index);
}
inline void EquipRefine::set_itemguid(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Cmd.EquipRefine.itemguid)
  itemguid_.Mutable(index)->assign(value);
}
inline void EquipRefine::set_itemguid(int index, const char* value) {
  itemguid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.EquipRefine.itemguid)
}
inline void EquipRefine::set_itemguid(int index, const char* value, size_t size) {
  itemguid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.EquipRefine.itemguid)
}
inline ::std::string* EquipRefine::add_itemguid() {
  return itemguid_.Add();
}
inline void EquipRefine::add_itemguid(const ::std::string& value) {
  itemguid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Cmd.EquipRefine.itemguid)
}
inline void EquipRefine::add_itemguid(const char* value) {
  itemguid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Cmd.EquipRefine.itemguid)
}
inline void EquipRefine::add_itemguid(const char* value, size_t size) {
  itemguid_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Cmd.EquipRefine.itemguid)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
EquipRefine::itemguid() const {
  // @@protoc_insertion_point(field_list:Cmd.EquipRefine.itemguid)
  return itemguid_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
EquipRefine::mutable_itemguid() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.EquipRefine.itemguid)
  return &itemguid_;
}

// -------------------------------------------------------------------

// EquipDecompose

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
inline bool EquipDecompose::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipDecompose::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipDecompose::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipDecompose::clear_cmd() {
  cmd_ = 6;
  clear_has_cmd();
}
inline ::Cmd::Command EquipDecompose::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipDecompose.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void EquipDecompose::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipDecompose.cmd)
}

// optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_DECOMPOSE];
inline bool EquipDecompose::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EquipDecompose::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EquipDecompose::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EquipDecompose::clear_param() {
  param_ = 12;
  clear_has_param();
}
inline ::Cmd::ItemParam EquipDecompose::param() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipDecompose.param)
  return static_cast< ::Cmd::ItemParam >(param_);
}
inline void EquipDecompose::set_param(::Cmd::ItemParam value) {
  assert(::Cmd::ItemParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipDecompose.param)
}

// optional string guid = 3;
inline bool EquipDecompose::has_guid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EquipDecompose::set_has_guid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EquipDecompose::clear_has_guid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EquipDecompose::clear_guid() {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_->clear();
  }
  clear_has_guid();
}
inline const ::std::string& EquipDecompose::guid() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipDecompose.guid)
  return *guid_;
}
inline void EquipDecompose::set_guid(const ::std::string& value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.EquipDecompose.guid)
}
inline void EquipDecompose::set_guid(const char* value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.EquipDecompose.guid)
}
inline void EquipDecompose::set_guid(const char* value, size_t size) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.EquipDecompose.guid)
}
inline ::std::string* EquipDecompose::mutable_guid() {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.EquipDecompose.guid)
  return guid_;
}
inline ::std::string* EquipDecompose::release_guid() {
  clear_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = guid_;
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EquipDecompose::set_allocated_guid(::std::string* guid) {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guid_;
  }
  if (guid) {
    set_has_guid();
    guid_ = guid;
  } else {
    clear_has_guid();
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.EquipDecompose.guid)
}

// optional .Cmd.EDecomposeResult result = 4 [default = EDECOMPOSERESULT_MIN];
inline bool EquipDecompose::has_result() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EquipDecompose::set_has_result() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EquipDecompose::clear_has_result() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EquipDecompose::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::Cmd::EDecomposeResult EquipDecompose::result() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipDecompose.result)
  return static_cast< ::Cmd::EDecomposeResult >(result_);
}
inline void EquipDecompose::set_result(::Cmd::EDecomposeResult value) {
  assert(::Cmd::EDecomposeResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipDecompose.result)
}

// repeated .Cmd.ItemInfo items = 5;
inline int EquipDecompose::items_size() const {
  return items_.size();
}
inline void EquipDecompose::clear_items() {
  items_.Clear();
}
inline const ::Cmd::ItemInfo& EquipDecompose::items(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.EquipDecompose.items)
  return items_.Get(index);
}
inline ::Cmd::ItemInfo* EquipDecompose::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.EquipDecompose.items)
  return items_.Mutable(index);
}
inline ::Cmd::ItemInfo* EquipDecompose::add_items() {
  // @@protoc_insertion_point(field_add:Cmd.EquipDecompose.items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ItemInfo >&
EquipDecompose::items() const {
  // @@protoc_insertion_point(field_list:Cmd.EquipDecompose.items)
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::ItemInfo >*
EquipDecompose::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.EquipDecompose.items)
  return &items_;
}

// -------------------------------------------------------------------

// DecomposeResult

// optional .Cmd.ItemInfo item = 1;
inline bool DecomposeResult::has_item() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DecomposeResult::set_has_item() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DecomposeResult::clear_has_item() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DecomposeResult::clear_item() {
  if (item_ != NULL) item_->::Cmd::ItemInfo::Clear();
  clear_has_item();
}
inline const ::Cmd::ItemInfo& DecomposeResult::item() const {
  // @@protoc_insertion_point(field_get:Cmd.DecomposeResult.item)
  return item_ != NULL ? *item_ : *default_instance_->item_;
}
inline ::Cmd::ItemInfo* DecomposeResult::mutable_item() {
  set_has_item();
  if (item_ == NULL) item_ = new ::Cmd::ItemInfo;
  // @@protoc_insertion_point(field_mutable:Cmd.DecomposeResult.item)
  return item_;
}
inline ::Cmd::ItemInfo* DecomposeResult::release_item() {
  clear_has_item();
  ::Cmd::ItemInfo* temp = item_;
  item_ = NULL;
  return temp;
}
inline void DecomposeResult::set_allocated_item(::Cmd::ItemInfo* item) {
  delete item_;
  item_ = item;
  if (item) {
    set_has_item();
  } else {
    clear_has_item();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.DecomposeResult.item)
}

// optional uint32 rate = 2 [default = 0];
inline bool DecomposeResult::has_rate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DecomposeResult::set_has_rate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DecomposeResult::clear_has_rate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DecomposeResult::clear_rate() {
  rate_ = 0u;
  clear_has_rate();
}
inline ::google::protobuf::uint32 DecomposeResult::rate() const {
  // @@protoc_insertion_point(field_get:Cmd.DecomposeResult.rate)
  return rate_;
}
inline void DecomposeResult::set_rate(::google::protobuf::uint32 value) {
  set_has_rate();
  rate_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DecomposeResult.rate)
}

// optional uint32 min_count = 3 [default = 0];
inline bool DecomposeResult::has_min_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DecomposeResult::set_has_min_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DecomposeResult::clear_has_min_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DecomposeResult::clear_min_count() {
  min_count_ = 0u;
  clear_has_min_count();
}
inline ::google::protobuf::uint32 DecomposeResult::min_count() const {
  // @@protoc_insertion_point(field_get:Cmd.DecomposeResult.min_count)
  return min_count_;
}
inline void DecomposeResult::set_min_count(::google::protobuf::uint32 value) {
  set_has_min_count();
  min_count_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DecomposeResult.min_count)
}

// optional uint32 max_count = 4 [default = 0];
inline bool DecomposeResult::has_max_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DecomposeResult::set_has_max_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DecomposeResult::clear_has_max_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DecomposeResult::clear_max_count() {
  max_count_ = 0u;
  clear_has_max_count();
}
inline ::google::protobuf::uint32 DecomposeResult::max_count() const {
  // @@protoc_insertion_point(field_get:Cmd.DecomposeResult.max_count)
  return max_count_;
}
inline void DecomposeResult::set_max_count(::google::protobuf::uint32 value) {
  set_has_max_count();
  max_count_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DecomposeResult.max_count)
}

// -------------------------------------------------------------------

// QueryDecomposeResultItemCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
inline bool QueryDecomposeResultItemCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryDecomposeResultItemCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryDecomposeResultItemCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryDecomposeResultItemCmd::clear_cmd() {
  cmd_ = 6;
  clear_has_cmd();
}
inline ::Cmd::Command QueryDecomposeResultItemCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryDecomposeResultItemCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void QueryDecomposeResultItemCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryDecomposeResultItemCmd.cmd)
}

// optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_QUERYDECOMPOSERESULT];
inline bool QueryDecomposeResultItemCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryDecomposeResultItemCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryDecomposeResultItemCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryDecomposeResultItemCmd::clear_param() {
  param_ = 27;
  clear_has_param();
}
inline ::Cmd::ItemParam QueryDecomposeResultItemCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryDecomposeResultItemCmd.param)
  return static_cast< ::Cmd::ItemParam >(param_);
}
inline void QueryDecomposeResultItemCmd::set_param(::Cmd::ItemParam value) {
  assert(::Cmd::ItemParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryDecomposeResultItemCmd.param)
}

// optional string guid = 3;
inline bool QueryDecomposeResultItemCmd::has_guid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QueryDecomposeResultItemCmd::set_has_guid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QueryDecomposeResultItemCmd::clear_has_guid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QueryDecomposeResultItemCmd::clear_guid() {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_->clear();
  }
  clear_has_guid();
}
inline const ::std::string& QueryDecomposeResultItemCmd::guid() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryDecomposeResultItemCmd.guid)
  return *guid_;
}
inline void QueryDecomposeResultItemCmd::set_guid(const ::std::string& value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.QueryDecomposeResultItemCmd.guid)
}
inline void QueryDecomposeResultItemCmd::set_guid(const char* value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.QueryDecomposeResultItemCmd.guid)
}
inline void QueryDecomposeResultItemCmd::set_guid(const char* value, size_t size) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.QueryDecomposeResultItemCmd.guid)
}
inline ::std::string* QueryDecomposeResultItemCmd::mutable_guid() {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.QueryDecomposeResultItemCmd.guid)
  return guid_;
}
inline ::std::string* QueryDecomposeResultItemCmd::release_guid() {
  clear_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = guid_;
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void QueryDecomposeResultItemCmd::set_allocated_guid(::std::string* guid) {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guid_;
  }
  if (guid) {
    set_has_guid();
    guid_ = guid;
  } else {
    clear_has_guid();
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.QueryDecomposeResultItemCmd.guid)
}

// repeated .Cmd.DecomposeResult results = 4;
inline int QueryDecomposeResultItemCmd::results_size() const {
  return results_.size();
}
inline void QueryDecomposeResultItemCmd::clear_results() {
  results_.Clear();
}
inline const ::Cmd::DecomposeResult& QueryDecomposeResultItemCmd::results(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.QueryDecomposeResultItemCmd.results)
  return results_.Get(index);
}
inline ::Cmd::DecomposeResult* QueryDecomposeResultItemCmd::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.QueryDecomposeResultItemCmd.results)
  return results_.Mutable(index);
}
inline ::Cmd::DecomposeResult* QueryDecomposeResultItemCmd::add_results() {
  // @@protoc_insertion_point(field_add:Cmd.QueryDecomposeResultItemCmd.results)
  return results_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::DecomposeResult >&
QueryDecomposeResultItemCmd::results() const {
  // @@protoc_insertion_point(field_list:Cmd.QueryDecomposeResultItemCmd.results)
  return results_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::DecomposeResult >*
QueryDecomposeResultItemCmd::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.QueryDecomposeResultItemCmd.results)
  return &results_;
}

// optional uint32 sell_price = 5 [default = 0];
inline bool QueryDecomposeResultItemCmd::has_sell_price() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void QueryDecomposeResultItemCmd::set_has_sell_price() {
  _has_bits_[0] |= 0x00000010u;
}
inline void QueryDecomposeResultItemCmd::clear_has_sell_price() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void QueryDecomposeResultItemCmd::clear_sell_price() {
  sell_price_ = 0u;
  clear_has_sell_price();
}
inline ::google::protobuf::uint32 QueryDecomposeResultItemCmd::sell_price() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryDecomposeResultItemCmd.sell_price)
  return sell_price_;
}
inline void QueryDecomposeResultItemCmd::set_sell_price(::google::protobuf::uint32 value) {
  set_has_sell_price();
  sell_price_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryDecomposeResultItemCmd.sell_price)
}

// -------------------------------------------------------------------

// QueryEquipData

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
inline bool QueryEquipData::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryEquipData::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryEquipData::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryEquipData::clear_cmd() {
  cmd_ = 6;
  clear_has_cmd();
}
inline ::Cmd::Command QueryEquipData::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryEquipData.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void QueryEquipData::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryEquipData.cmd)
}

// optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_QUERYEQUIPDATA];
inline bool QueryEquipData::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryEquipData::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryEquipData::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryEquipData::clear_param() {
  param_ = 13;
  clear_has_param();
}
inline ::Cmd::ItemParam QueryEquipData::param() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryEquipData.param)
  return static_cast< ::Cmd::ItemParam >(param_);
}
inline void QueryEquipData::set_param(::Cmd::ItemParam value) {
  assert(::Cmd::ItemParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryEquipData.param)
}

// optional string guid = 3;
inline bool QueryEquipData::has_guid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QueryEquipData::set_has_guid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QueryEquipData::clear_has_guid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QueryEquipData::clear_guid() {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_->clear();
  }
  clear_has_guid();
}
inline const ::std::string& QueryEquipData::guid() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryEquipData.guid)
  return *guid_;
}
inline void QueryEquipData::set_guid(const ::std::string& value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.QueryEquipData.guid)
}
inline void QueryEquipData::set_guid(const char* value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.QueryEquipData.guid)
}
inline void QueryEquipData::set_guid(const char* value, size_t size) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.QueryEquipData.guid)
}
inline ::std::string* QueryEquipData::mutable_guid() {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.QueryEquipData.guid)
  return guid_;
}
inline ::std::string* QueryEquipData::release_guid() {
  clear_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = guid_;
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void QueryEquipData::set_allocated_guid(::std::string* guid) {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guid_;
  }
  if (guid) {
    set_has_guid();
    guid_ = guid;
  } else {
    clear_has_guid();
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.QueryEquipData.guid)
}

// optional .Cmd.EquipData data = 4;
inline bool QueryEquipData::has_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QueryEquipData::set_has_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QueryEquipData::clear_has_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QueryEquipData::clear_data() {
  if (data_ != NULL) data_->::Cmd::EquipData::Clear();
  clear_has_data();
}
inline const ::Cmd::EquipData& QueryEquipData::data() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryEquipData.data)
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::Cmd::EquipData* QueryEquipData::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::Cmd::EquipData;
  // @@protoc_insertion_point(field_mutable:Cmd.QueryEquipData.data)
  return data_;
}
inline ::Cmd::EquipData* QueryEquipData::release_data() {
  clear_has_data();
  ::Cmd::EquipData* temp = data_;
  data_ = NULL;
  return temp;
}
inline void QueryEquipData::set_allocated_data(::Cmd::EquipData* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.QueryEquipData.data)
}

// -------------------------------------------------------------------

// BrowsePackage

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
inline bool BrowsePackage::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BrowsePackage::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BrowsePackage::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BrowsePackage::clear_cmd() {
  cmd_ = 6;
  clear_has_cmd();
}
inline ::Cmd::Command BrowsePackage::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.BrowsePackage.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void BrowsePackage::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BrowsePackage.cmd)
}

// optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_BROWSEPACK];
inline bool BrowsePackage::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BrowsePackage::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BrowsePackage::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BrowsePackage::clear_param() {
  param_ = 14;
  clear_has_param();
}
inline ::Cmd::ItemParam BrowsePackage::param() const {
  // @@protoc_insertion_point(field_get:Cmd.BrowsePackage.param)
  return static_cast< ::Cmd::ItemParam >(param_);
}
inline void BrowsePackage::set_param(::Cmd::ItemParam value) {
  assert(::Cmd::ItemParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BrowsePackage.param)
}

// optional .Cmd.EPackType type = 3 [default = EPACKTYPE_MIN];
inline bool BrowsePackage::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BrowsePackage::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BrowsePackage::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BrowsePackage::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Cmd::EPackType BrowsePackage::type() const {
  // @@protoc_insertion_point(field_get:Cmd.BrowsePackage.type)
  return static_cast< ::Cmd::EPackType >(type_);
}
inline void BrowsePackage::set_type(::Cmd::EPackType value) {
  assert(::Cmd::EPackType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BrowsePackage.type)
}

// -------------------------------------------------------------------

// EquipCard

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
inline bool EquipCard::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipCard::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipCard::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipCard::clear_cmd() {
  cmd_ = 6;
  clear_has_cmd();
}
inline ::Cmd::Command EquipCard::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipCard.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void EquipCard::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipCard.cmd)
}

// optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_EQUIPCARD];
inline bool EquipCard::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EquipCard::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EquipCard::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EquipCard::clear_param() {
  param_ = 15;
  clear_has_param();
}
inline ::Cmd::ItemParam EquipCard::param() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipCard.param)
  return static_cast< ::Cmd::ItemParam >(param_);
}
inline void EquipCard::set_param(::Cmd::ItemParam value) {
  assert(::Cmd::ItemParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipCard.param)
}

// optional .Cmd.ECardOper oper = 3 [default = ECARDOPER_MIN];
inline bool EquipCard::has_oper() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EquipCard::set_has_oper() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EquipCard::clear_has_oper() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EquipCard::clear_oper() {
  oper_ = 0;
  clear_has_oper();
}
inline ::Cmd::ECardOper EquipCard::oper() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipCard.oper)
  return static_cast< ::Cmd::ECardOper >(oper_);
}
inline void EquipCard::set_oper(::Cmd::ECardOper value) {
  assert(::Cmd::ECardOper_IsValid(value));
  set_has_oper();
  oper_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipCard.oper)
}

// optional string cardguid = 4;
inline bool EquipCard::has_cardguid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EquipCard::set_has_cardguid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EquipCard::clear_has_cardguid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EquipCard::clear_cardguid() {
  if (cardguid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cardguid_->clear();
  }
  clear_has_cardguid();
}
inline const ::std::string& EquipCard::cardguid() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipCard.cardguid)
  return *cardguid_;
}
inline void EquipCard::set_cardguid(const ::std::string& value) {
  set_has_cardguid();
  if (cardguid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cardguid_ = new ::std::string;
  }
  cardguid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.EquipCard.cardguid)
}
inline void EquipCard::set_cardguid(const char* value) {
  set_has_cardguid();
  if (cardguid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cardguid_ = new ::std::string;
  }
  cardguid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.EquipCard.cardguid)
}
inline void EquipCard::set_cardguid(const char* value, size_t size) {
  set_has_cardguid();
  if (cardguid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cardguid_ = new ::std::string;
  }
  cardguid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.EquipCard.cardguid)
}
inline ::std::string* EquipCard::mutable_cardguid() {
  set_has_cardguid();
  if (cardguid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cardguid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.EquipCard.cardguid)
  return cardguid_;
}
inline ::std::string* EquipCard::release_cardguid() {
  clear_has_cardguid();
  if (cardguid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = cardguid_;
    cardguid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EquipCard::set_allocated_cardguid(::std::string* cardguid) {
  if (cardguid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cardguid_;
  }
  if (cardguid) {
    set_has_cardguid();
    cardguid_ = cardguid;
  } else {
    clear_has_cardguid();
    cardguid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.EquipCard.cardguid)
}

// optional string equipguid = 5;
inline bool EquipCard::has_equipguid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EquipCard::set_has_equipguid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EquipCard::clear_has_equipguid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EquipCard::clear_equipguid() {
  if (equipguid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    equipguid_->clear();
  }
  clear_has_equipguid();
}
inline const ::std::string& EquipCard::equipguid() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipCard.equipguid)
  return *equipguid_;
}
inline void EquipCard::set_equipguid(const ::std::string& value) {
  set_has_equipguid();
  if (equipguid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    equipguid_ = new ::std::string;
  }
  equipguid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.EquipCard.equipguid)
}
inline void EquipCard::set_equipguid(const char* value) {
  set_has_equipguid();
  if (equipguid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    equipguid_ = new ::std::string;
  }
  equipguid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.EquipCard.equipguid)
}
inline void EquipCard::set_equipguid(const char* value, size_t size) {
  set_has_equipguid();
  if (equipguid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    equipguid_ = new ::std::string;
  }
  equipguid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.EquipCard.equipguid)
}
inline ::std::string* EquipCard::mutable_equipguid() {
  set_has_equipguid();
  if (equipguid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    equipguid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.EquipCard.equipguid)
  return equipguid_;
}
inline ::std::string* EquipCard::release_equipguid() {
  clear_has_equipguid();
  if (equipguid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = equipguid_;
    equipguid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EquipCard::set_allocated_equipguid(::std::string* equipguid) {
  if (equipguid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete equipguid_;
  }
  if (equipguid) {
    set_has_equipguid();
    equipguid_ = equipguid;
  } else {
    clear_has_equipguid();
    equipguid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.EquipCard.equipguid)
}

// optional uint32 pos = 6 [default = 0];
inline bool EquipCard::has_pos() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void EquipCard::set_has_pos() {
  _has_bits_[0] |= 0x00000020u;
}
inline void EquipCard::clear_has_pos() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void EquipCard::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 EquipCard::pos() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipCard.pos)
  return pos_;
}
inline void EquipCard::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipCard.pos)
}

// -------------------------------------------------------------------

// ItemShow

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
inline bool ItemShow::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ItemShow::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ItemShow::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ItemShow::clear_cmd() {
  cmd_ = 6;
  clear_has_cmd();
}
inline ::Cmd::Command ItemShow::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemShow.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ItemShow::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemShow.cmd)
}

// optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_ITEMSHOW];
inline bool ItemShow::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ItemShow::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ItemShow::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ItemShow::clear_param() {
  param_ = 16;
  clear_has_param();
}
inline ::Cmd::ItemParam ItemShow::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemShow.param)
  return static_cast< ::Cmd::ItemParam >(param_);
}
inline void ItemShow::set_param(::Cmd::ItemParam value) {
  assert(::Cmd::ItemParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemShow.param)
}

// repeated .Cmd.ItemInfo items = 3;
inline int ItemShow::items_size() const {
  return items_.size();
}
inline void ItemShow::clear_items() {
  items_.Clear();
}
inline const ::Cmd::ItemInfo& ItemShow::items(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.ItemShow.items)
  return items_.Get(index);
}
inline ::Cmd::ItemInfo* ItemShow::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.ItemShow.items)
  return items_.Mutable(index);
}
inline ::Cmd::ItemInfo* ItemShow::add_items() {
  // @@protoc_insertion_point(field_add:Cmd.ItemShow.items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ItemInfo >&
ItemShow::items() const {
  // @@protoc_insertion_point(field_list:Cmd.ItemShow.items)
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::ItemInfo >*
ItemShow::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.ItemShow.items)
  return &items_;
}

// -------------------------------------------------------------------

// ItemShow64

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
inline bool ItemShow64::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ItemShow64::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ItemShow64::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ItemShow64::clear_cmd() {
  cmd_ = 6;
  clear_has_cmd();
}
inline ::Cmd::Command ItemShow64::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemShow64.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ItemShow64::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemShow64.cmd)
}

// optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_ITEMSHOW64];
inline bool ItemShow64::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ItemShow64::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ItemShow64::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ItemShow64::clear_param() {
  param_ = 35;
  clear_has_param();
}
inline ::Cmd::ItemParam ItemShow64::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemShow64.param)
  return static_cast< ::Cmd::ItemParam >(param_);
}
inline void ItemShow64::set_param(::Cmd::ItemParam value) {
  assert(::Cmd::ItemParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemShow64.param)
}

// optional uint32 id = 3;
inline bool ItemShow64::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ItemShow64::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ItemShow64::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ItemShow64::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 ItemShow64::id() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemShow64.id)
  return id_;
}
inline void ItemShow64::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemShow64.id)
}

// optional uint64 count = 4;
inline bool ItemShow64::has_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ItemShow64::set_has_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ItemShow64::clear_has_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ItemShow64::clear_count() {
  count_ = GOOGLE_ULONGLONG(0);
  clear_has_count();
}
inline ::google::protobuf::uint64 ItemShow64::count() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemShow64.count)
  return count_;
}
inline void ItemShow64::set_count(::google::protobuf::uint64 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemShow64.count)
}

// -------------------------------------------------------------------

// EquipRepair

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
inline bool EquipRepair::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipRepair::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipRepair::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipRepair::clear_cmd() {
  cmd_ = 6;
  clear_has_cmd();
}
inline ::Cmd::Command EquipRepair::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipRepair.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void EquipRepair::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipRepair.cmd)
}

// optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_REPAIR];
inline bool EquipRepair::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EquipRepair::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EquipRepair::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EquipRepair::clear_param() {
  param_ = 17;
  clear_has_param();
}
inline ::Cmd::ItemParam EquipRepair::param() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipRepair.param)
  return static_cast< ::Cmd::ItemParam >(param_);
}
inline void EquipRepair::set_param(::Cmd::ItemParam value) {
  assert(::Cmd::ItemParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipRepair.param)
}

// optional string targetguid = 3;
inline bool EquipRepair::has_targetguid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EquipRepair::set_has_targetguid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EquipRepair::clear_has_targetguid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EquipRepair::clear_targetguid() {
  if (targetguid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    targetguid_->clear();
  }
  clear_has_targetguid();
}
inline const ::std::string& EquipRepair::targetguid() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipRepair.targetguid)
  return *targetguid_;
}
inline void EquipRepair::set_targetguid(const ::std::string& value) {
  set_has_targetguid();
  if (targetguid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    targetguid_ = new ::std::string;
  }
  targetguid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.EquipRepair.targetguid)
}
inline void EquipRepair::set_targetguid(const char* value) {
  set_has_targetguid();
  if (targetguid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    targetguid_ = new ::std::string;
  }
  targetguid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.EquipRepair.targetguid)
}
inline void EquipRepair::set_targetguid(const char* value, size_t size) {
  set_has_targetguid();
  if (targetguid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    targetguid_ = new ::std::string;
  }
  targetguid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.EquipRepair.targetguid)
}
inline ::std::string* EquipRepair::mutable_targetguid() {
  set_has_targetguid();
  if (targetguid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    targetguid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.EquipRepair.targetguid)
  return targetguid_;
}
inline ::std::string* EquipRepair::release_targetguid() {
  clear_has_targetguid();
  if (targetguid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = targetguid_;
    targetguid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EquipRepair::set_allocated_targetguid(::std::string* targetguid) {
  if (targetguid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete targetguid_;
  }
  if (targetguid) {
    set_has_targetguid();
    targetguid_ = targetguid;
  } else {
    clear_has_targetguid();
    targetguid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.EquipRepair.targetguid)
}

// optional bool success = 4 [default = false];
inline bool EquipRepair::has_success() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EquipRepair::set_has_success() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EquipRepair::clear_has_success() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EquipRepair::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool EquipRepair::success() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipRepair.success)
  return success_;
}
inline void EquipRepair::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipRepair.success)
}

// optional string stuffguid = 5;
inline bool EquipRepair::has_stuffguid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EquipRepair::set_has_stuffguid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EquipRepair::clear_has_stuffguid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EquipRepair::clear_stuffguid() {
  if (stuffguid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stuffguid_->clear();
  }
  clear_has_stuffguid();
}
inline const ::std::string& EquipRepair::stuffguid() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipRepair.stuffguid)
  return *stuffguid_;
}
inline void EquipRepair::set_stuffguid(const ::std::string& value) {
  set_has_stuffguid();
  if (stuffguid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stuffguid_ = new ::std::string;
  }
  stuffguid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.EquipRepair.stuffguid)
}
inline void EquipRepair::set_stuffguid(const char* value) {
  set_has_stuffguid();
  if (stuffguid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stuffguid_ = new ::std::string;
  }
  stuffguid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.EquipRepair.stuffguid)
}
inline void EquipRepair::set_stuffguid(const char* value, size_t size) {
  set_has_stuffguid();
  if (stuffguid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stuffguid_ = new ::std::string;
  }
  stuffguid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.EquipRepair.stuffguid)
}
inline ::std::string* EquipRepair::mutable_stuffguid() {
  set_has_stuffguid();
  if (stuffguid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stuffguid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.EquipRepair.stuffguid)
  return stuffguid_;
}
inline ::std::string* EquipRepair::release_stuffguid() {
  clear_has_stuffguid();
  if (stuffguid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = stuffguid_;
    stuffguid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EquipRepair::set_allocated_stuffguid(::std::string* stuffguid) {
  if (stuffguid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete stuffguid_;
  }
  if (stuffguid) {
    set_has_stuffguid();
    stuffguid_ = stuffguid;
  } else {
    clear_has_stuffguid();
    stuffguid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.EquipRepair.stuffguid)
}

// -------------------------------------------------------------------

// HintNtf

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
inline bool HintNtf::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HintNtf::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HintNtf::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HintNtf::clear_cmd() {
  cmd_ = 6;
  clear_has_cmd();
}
inline ::Cmd::Command HintNtf::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.HintNtf.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void HintNtf::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.HintNtf.cmd)
}

// optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_HINTNTF];
inline bool HintNtf::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HintNtf::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HintNtf::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HintNtf::clear_param() {
  param_ = 18;
  clear_has_param();
}
inline ::Cmd::ItemParam HintNtf::param() const {
  // @@protoc_insertion_point(field_get:Cmd.HintNtf.param)
  return static_cast< ::Cmd::ItemParam >(param_);
}
inline void HintNtf::set_param(::Cmd::ItemParam value) {
  assert(::Cmd::ItemParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.HintNtf.param)
}

// optional uint32 itemid = 3 [default = 0];
inline bool HintNtf::has_itemid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HintNtf::set_has_itemid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HintNtf::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HintNtf::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 HintNtf::itemid() const {
  // @@protoc_insertion_point(field_get:Cmd.HintNtf.itemid)
  return itemid_;
}
inline void HintNtf::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.HintNtf.itemid)
}

// -------------------------------------------------------------------

// EnchantEquip

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
inline bool EnchantEquip::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EnchantEquip::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EnchantEquip::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EnchantEquip::clear_cmd() {
  cmd_ = 6;
  clear_has_cmd();
}
inline ::Cmd::Command EnchantEquip::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.EnchantEquip.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void EnchantEquip::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EnchantEquip.cmd)
}

// optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_ENCHANT];
inline bool EnchantEquip::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EnchantEquip::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EnchantEquip::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EnchantEquip::clear_param() {
  param_ = 19;
  clear_has_param();
}
inline ::Cmd::ItemParam EnchantEquip::param() const {
  // @@protoc_insertion_point(field_get:Cmd.EnchantEquip.param)
  return static_cast< ::Cmd::ItemParam >(param_);
}
inline void EnchantEquip::set_param(::Cmd::ItemParam value) {
  assert(::Cmd::ItemParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EnchantEquip.param)
}

// optional .Cmd.EEnchantType type = 3 [default = EENCHANTTYPE_MIN];
inline bool EnchantEquip::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EnchantEquip::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EnchantEquip::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EnchantEquip::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Cmd::EEnchantType EnchantEquip::type() const {
  // @@protoc_insertion_point(field_get:Cmd.EnchantEquip.type)
  return static_cast< ::Cmd::EEnchantType >(type_);
}
inline void EnchantEquip::set_type(::Cmd::EEnchantType value) {
  assert(::Cmd::EEnchantType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EnchantEquip.type)
}

// optional string guid = 4;
inline bool EnchantEquip::has_guid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EnchantEquip::set_has_guid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EnchantEquip::clear_has_guid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EnchantEquip::clear_guid() {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_->clear();
  }
  clear_has_guid();
}
inline const ::std::string& EnchantEquip::guid() const {
  // @@protoc_insertion_point(field_get:Cmd.EnchantEquip.guid)
  return *guid_;
}
inline void EnchantEquip::set_guid(const ::std::string& value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.EnchantEquip.guid)
}
inline void EnchantEquip::set_guid(const char* value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.EnchantEquip.guid)
}
inline void EnchantEquip::set_guid(const char* value, size_t size) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.EnchantEquip.guid)
}
inline ::std::string* EnchantEquip::mutable_guid() {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.EnchantEquip.guid)
  return guid_;
}
inline ::std::string* EnchantEquip::release_guid() {
  clear_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = guid_;
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EnchantEquip::set_allocated_guid(::std::string* guid) {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guid_;
  }
  if (guid) {
    set_has_guid();
    guid_ = guid;
  } else {
    clear_has_guid();
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.EnchantEquip.guid)
}

// -------------------------------------------------------------------

// TradeComposePair

// optional uint32 compose_id = 1;
inline bool TradeComposePair::has_compose_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TradeComposePair::set_has_compose_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TradeComposePair::clear_has_compose_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TradeComposePair::clear_compose_id() {
  compose_id_ = 0u;
  clear_has_compose_id();
}
inline ::google::protobuf::uint32 TradeComposePair::compose_id() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeComposePair.compose_id)
  return compose_id_;
}
inline void TradeComposePair::set_compose_id(::google::protobuf::uint32 value) {
  set_has_compose_id();
  compose_id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradeComposePair.compose_id)
}

// optional uint32 count = 2;
inline bool TradeComposePair::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TradeComposePair::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TradeComposePair::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TradeComposePair::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 TradeComposePair::count() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeComposePair.count)
  return count_;
}
inline void TradeComposePair::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradeComposePair.count)
}

// -------------------------------------------------------------------

// TradeRefineData

// repeated .Cmd.TradeComposePair composeInfos = 1;
inline int TradeRefineData::composeinfos_size() const {
  return composeinfos_.size();
}
inline void TradeRefineData::clear_composeinfos() {
  composeinfos_.Clear();
}
inline const ::Cmd::TradeComposePair& TradeRefineData::composeinfos(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.TradeRefineData.composeInfos)
  return composeinfos_.Get(index);
}
inline ::Cmd::TradeComposePair* TradeRefineData::mutable_composeinfos(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.TradeRefineData.composeInfos)
  return composeinfos_.Mutable(index);
}
inline ::Cmd::TradeComposePair* TradeRefineData::add_composeinfos() {
  // @@protoc_insertion_point(field_add:Cmd.TradeRefineData.composeInfos)
  return composeinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::TradeComposePair >&
TradeRefineData::composeinfos() const {
  // @@protoc_insertion_point(field_list:Cmd.TradeRefineData.composeInfos)
  return composeinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::TradeComposePair >*
TradeRefineData::mutable_composeinfos() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.TradeRefineData.composeInfos)
  return &composeinfos_;
}

// -------------------------------------------------------------------

// TradeItemBaseInfo

// optional uint32 itemid = 1;
inline bool TradeItemBaseInfo::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TradeItemBaseInfo::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TradeItemBaseInfo::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TradeItemBaseInfo::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 TradeItemBaseInfo::itemid() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeItemBaseInfo.itemid)
  return itemid_;
}
inline void TradeItemBaseInfo::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradeItemBaseInfo.itemid)
}

// optional uint32 price = 2;
inline bool TradeItemBaseInfo::has_price() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TradeItemBaseInfo::set_has_price() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TradeItemBaseInfo::clear_has_price() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TradeItemBaseInfo::clear_price() {
  price_ = 0u;
  clear_has_price();
}
inline ::google::protobuf::uint32 TradeItemBaseInfo::price() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeItemBaseInfo.price)
  return price_;
}
inline void TradeItemBaseInfo::set_price(::google::protobuf::uint32 value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradeItemBaseInfo.price)
}

// optional uint32 count = 3;
inline bool TradeItemBaseInfo::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TradeItemBaseInfo::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TradeItemBaseInfo::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TradeItemBaseInfo::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 TradeItemBaseInfo::count() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeItemBaseInfo.count)
  return count_;
}
inline void TradeItemBaseInfo::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradeItemBaseInfo.count)
}

// optional string guid = 4;
inline bool TradeItemBaseInfo::has_guid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TradeItemBaseInfo::set_has_guid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TradeItemBaseInfo::clear_has_guid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TradeItemBaseInfo::clear_guid() {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_->clear();
  }
  clear_has_guid();
}
inline const ::std::string& TradeItemBaseInfo::guid() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeItemBaseInfo.guid)
  return *guid_;
}
inline void TradeItemBaseInfo::set_guid(const ::std::string& value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.TradeItemBaseInfo.guid)
}
inline void TradeItemBaseInfo::set_guid(const char* value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.TradeItemBaseInfo.guid)
}
inline void TradeItemBaseInfo::set_guid(const char* value, size_t size) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.TradeItemBaseInfo.guid)
}
inline ::std::string* TradeItemBaseInfo::mutable_guid() {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.TradeItemBaseInfo.guid)
  return guid_;
}
inline ::std::string* TradeItemBaseInfo::release_guid() {
  clear_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = guid_;
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TradeItemBaseInfo::set_allocated_guid(::std::string* guid) {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guid_;
  }
  if (guid) {
    set_has_guid();
    guid_ = guid;
  } else {
    clear_has_guid();
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.TradeItemBaseInfo.guid)
}

// optional uint64 order_id = 5;
inline bool TradeItemBaseInfo::has_order_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TradeItemBaseInfo::set_has_order_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TradeItemBaseInfo::clear_has_order_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TradeItemBaseInfo::clear_order_id() {
  order_id_ = GOOGLE_ULONGLONG(0);
  clear_has_order_id();
}
inline ::google::protobuf::uint64 TradeItemBaseInfo::order_id() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeItemBaseInfo.order_id)
  return order_id_;
}
inline void TradeItemBaseInfo::set_order_id(::google::protobuf::uint64 value) {
  set_has_order_id();
  order_id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradeItemBaseInfo.order_id)
}

// optional uint32 refine_lv = 6;
inline bool TradeItemBaseInfo::has_refine_lv() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TradeItemBaseInfo::set_has_refine_lv() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TradeItemBaseInfo::clear_has_refine_lv() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TradeItemBaseInfo::clear_refine_lv() {
  refine_lv_ = 0u;
  clear_has_refine_lv();
}
inline ::google::protobuf::uint32 TradeItemBaseInfo::refine_lv() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeItemBaseInfo.refine_lv)
  return refine_lv_;
}
inline void TradeItemBaseInfo::set_refine_lv(::google::protobuf::uint32 value) {
  set_has_refine_lv();
  refine_lv_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradeItemBaseInfo.refine_lv)
}

// optional bool overlap = 8;
inline bool TradeItemBaseInfo::has_overlap() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TradeItemBaseInfo::set_has_overlap() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TradeItemBaseInfo::clear_has_overlap() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TradeItemBaseInfo::clear_overlap() {
  overlap_ = false;
  clear_has_overlap();
}
inline bool TradeItemBaseInfo::overlap() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeItemBaseInfo.overlap)
  return overlap_;
}
inline void TradeItemBaseInfo::set_overlap(bool value) {
  set_has_overlap();
  overlap_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradeItemBaseInfo.overlap)
}

// optional bool is_expired = 9;
inline bool TradeItemBaseInfo::has_is_expired() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TradeItemBaseInfo::set_has_is_expired() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TradeItemBaseInfo::clear_has_is_expired() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TradeItemBaseInfo::clear_is_expired() {
  is_expired_ = false;
  clear_has_is_expired();
}
inline bool TradeItemBaseInfo::is_expired() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeItemBaseInfo.is_expired)
  return is_expired_;
}
inline void TradeItemBaseInfo::set_is_expired(bool value) {
  set_has_is_expired();
  is_expired_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradeItemBaseInfo.is_expired)
}

// optional .Cmd.ItemData item_data = 10;
inline bool TradeItemBaseInfo::has_item_data() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TradeItemBaseInfo::set_has_item_data() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TradeItemBaseInfo::clear_has_item_data() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TradeItemBaseInfo::clear_item_data() {
  if (item_data_ != NULL) item_data_->::Cmd::ItemData::Clear();
  clear_has_item_data();
}
inline const ::Cmd::ItemData& TradeItemBaseInfo::item_data() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeItemBaseInfo.item_data)
  return item_data_ != NULL ? *item_data_ : *default_instance_->item_data_;
}
inline ::Cmd::ItemData* TradeItemBaseInfo::mutable_item_data() {
  set_has_item_data();
  if (item_data_ == NULL) item_data_ = new ::Cmd::ItemData;
  // @@protoc_insertion_point(field_mutable:Cmd.TradeItemBaseInfo.item_data)
  return item_data_;
}
inline ::Cmd::ItemData* TradeItemBaseInfo::release_item_data() {
  clear_has_item_data();
  ::Cmd::ItemData* temp = item_data_;
  item_data_ = NULL;
  return temp;
}
inline void TradeItemBaseInfo::set_allocated_item_data(::Cmd::ItemData* item_data) {
  delete item_data_;
  item_data_ = item_data;
  if (item_data) {
    set_has_item_data();
  } else {
    clear_has_item_data();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.TradeItemBaseInfo.item_data)
}

// optional uint32 publicity_id = 11 [default = 0];
inline bool TradeItemBaseInfo::has_publicity_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TradeItemBaseInfo::set_has_publicity_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TradeItemBaseInfo::clear_has_publicity_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TradeItemBaseInfo::clear_publicity_id() {
  publicity_id_ = 0u;
  clear_has_publicity_id();
}
inline ::google::protobuf::uint32 TradeItemBaseInfo::publicity_id() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeItemBaseInfo.publicity_id)
  return publicity_id_;
}
inline void TradeItemBaseInfo::set_publicity_id(::google::protobuf::uint32 value) {
  set_has_publicity_id();
  publicity_id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradeItemBaseInfo.publicity_id)
}

// optional uint32 end_time = 12 [default = 0];
inline bool TradeItemBaseInfo::has_end_time() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TradeItemBaseInfo::set_has_end_time() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TradeItemBaseInfo::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TradeItemBaseInfo::clear_end_time() {
  end_time_ = 0u;
  clear_has_end_time();
}
inline ::google::protobuf::uint32 TradeItemBaseInfo::end_time() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeItemBaseInfo.end_time)
  return end_time_;
}
inline void TradeItemBaseInfo::set_end_time(::google::protobuf::uint32 value) {
  set_has_end_time();
  end_time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradeItemBaseInfo.end_time)
}

// optional string key = 13;
inline bool TradeItemBaseInfo::has_key() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TradeItemBaseInfo::set_has_key() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TradeItemBaseInfo::clear_has_key() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TradeItemBaseInfo::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& TradeItemBaseInfo::key() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeItemBaseInfo.key)
  return *key_;
}
inline void TradeItemBaseInfo::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.TradeItemBaseInfo.key)
}
inline void TradeItemBaseInfo::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.TradeItemBaseInfo.key)
}
inline void TradeItemBaseInfo::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.TradeItemBaseInfo.key)
}
inline ::std::string* TradeItemBaseInfo::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.TradeItemBaseInfo.key)
  return key_;
}
inline ::std::string* TradeItemBaseInfo::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TradeItemBaseInfo::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.TradeItemBaseInfo.key)
}

// optional uint64 charid = 14;
inline bool TradeItemBaseInfo::has_charid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TradeItemBaseInfo::set_has_charid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void TradeItemBaseInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void TradeItemBaseInfo::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 TradeItemBaseInfo::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeItemBaseInfo.charid)
  return charid_;
}
inline void TradeItemBaseInfo::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradeItemBaseInfo.charid)
}

// optional string name = 15;
inline bool TradeItemBaseInfo::has_name() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void TradeItemBaseInfo::set_has_name() {
  _has_bits_[0] |= 0x00002000u;
}
inline void TradeItemBaseInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void TradeItemBaseInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& TradeItemBaseInfo::name() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeItemBaseInfo.name)
  return *name_;
}
inline void TradeItemBaseInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.TradeItemBaseInfo.name)
}
inline void TradeItemBaseInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.TradeItemBaseInfo.name)
}
inline void TradeItemBaseInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.TradeItemBaseInfo.name)
}
inline ::std::string* TradeItemBaseInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.TradeItemBaseInfo.name)
  return name_;
}
inline ::std::string* TradeItemBaseInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TradeItemBaseInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.TradeItemBaseInfo.name)
}

// optional .Cmd.ETradeType type = 16 [default = ETRADETYPE_TRADE];
inline bool TradeItemBaseInfo::has_type() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void TradeItemBaseInfo::set_has_type() {
  _has_bits_[0] |= 0x00004000u;
}
inline void TradeItemBaseInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void TradeItemBaseInfo::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::Cmd::ETradeType TradeItemBaseInfo::type() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeItemBaseInfo.type)
  return static_cast< ::Cmd::ETradeType >(type_);
}
inline void TradeItemBaseInfo::set_type(::Cmd::ETradeType value) {
  assert(::Cmd::ETradeType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradeItemBaseInfo.type)
}

// optional uint32 up_rate = 17 [default = 0];
inline bool TradeItemBaseInfo::has_up_rate() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void TradeItemBaseInfo::set_has_up_rate() {
  _has_bits_[0] |= 0x00008000u;
}
inline void TradeItemBaseInfo::clear_has_up_rate() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void TradeItemBaseInfo::clear_up_rate() {
  up_rate_ = 0u;
  clear_has_up_rate();
}
inline ::google::protobuf::uint32 TradeItemBaseInfo::up_rate() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeItemBaseInfo.up_rate)
  return up_rate_;
}
inline void TradeItemBaseInfo::set_up_rate(::google::protobuf::uint32 value) {
  set_has_up_rate();
  up_rate_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradeItemBaseInfo.up_rate)
}

// optional uint32 down_rate = 18 [default = 0];
inline bool TradeItemBaseInfo::has_down_rate() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void TradeItemBaseInfo::set_has_down_rate() {
  _has_bits_[0] |= 0x00010000u;
}
inline void TradeItemBaseInfo::clear_has_down_rate() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void TradeItemBaseInfo::clear_down_rate() {
  down_rate_ = 0u;
  clear_has_down_rate();
}
inline ::google::protobuf::uint32 TradeItemBaseInfo::down_rate() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeItemBaseInfo.down_rate)
  return down_rate_;
}
inline void TradeItemBaseInfo::set_down_rate(::google::protobuf::uint32 value) {
  set_has_down_rate();
  down_rate_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradeItemBaseInfo.down_rate)
}

// -------------------------------------------------------------------

// ProcessEnchantItemCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
inline bool ProcessEnchantItemCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProcessEnchantItemCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProcessEnchantItemCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProcessEnchantItemCmd::clear_cmd() {
  cmd_ = 6;
  clear_has_cmd();
}
inline ::Cmd::Command ProcessEnchantItemCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ProcessEnchantItemCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ProcessEnchantItemCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ProcessEnchantItemCmd.cmd)
}

// optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_PROCESSENCHANT];
inline bool ProcessEnchantItemCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProcessEnchantItemCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProcessEnchantItemCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProcessEnchantItemCmd::clear_param() {
  param_ = 20;
  clear_has_param();
}
inline ::Cmd::ItemParam ProcessEnchantItemCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ProcessEnchantItemCmd.param)
  return static_cast< ::Cmd::ItemParam >(param_);
}
inline void ProcessEnchantItemCmd::set_param(::Cmd::ItemParam value) {
  assert(::Cmd::ItemParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ProcessEnchantItemCmd.param)
}

// optional bool save = 3 [default = false];
inline bool ProcessEnchantItemCmd::has_save() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProcessEnchantItemCmd::set_has_save() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProcessEnchantItemCmd::clear_has_save() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProcessEnchantItemCmd::clear_save() {
  save_ = false;
  clear_has_save();
}
inline bool ProcessEnchantItemCmd::save() const {
  // @@protoc_insertion_point(field_get:Cmd.ProcessEnchantItemCmd.save)
  return save_;
}
inline void ProcessEnchantItemCmd::set_save(bool value) {
  set_has_save();
  save_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ProcessEnchantItemCmd.save)
}

// optional string itemid = 4;
inline bool ProcessEnchantItemCmd::has_itemid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProcessEnchantItemCmd::set_has_itemid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProcessEnchantItemCmd::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProcessEnchantItemCmd::clear_itemid() {
  if (itemid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemid_->clear();
  }
  clear_has_itemid();
}
inline const ::std::string& ProcessEnchantItemCmd::itemid() const {
  // @@protoc_insertion_point(field_get:Cmd.ProcessEnchantItemCmd.itemid)
  return *itemid_;
}
inline void ProcessEnchantItemCmd::set_itemid(const ::std::string& value) {
  set_has_itemid();
  if (itemid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemid_ = new ::std::string;
  }
  itemid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ProcessEnchantItemCmd.itemid)
}
inline void ProcessEnchantItemCmd::set_itemid(const char* value) {
  set_has_itemid();
  if (itemid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemid_ = new ::std::string;
  }
  itemid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ProcessEnchantItemCmd.itemid)
}
inline void ProcessEnchantItemCmd::set_itemid(const char* value, size_t size) {
  set_has_itemid();
  if (itemid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemid_ = new ::std::string;
  }
  itemid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ProcessEnchantItemCmd.itemid)
}
inline ::std::string* ProcessEnchantItemCmd::mutable_itemid() {
  set_has_itemid();
  if (itemid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ProcessEnchantItemCmd.itemid)
  return itemid_;
}
inline ::std::string* ProcessEnchantItemCmd::release_itemid() {
  clear_has_itemid();
  if (itemid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = itemid_;
    itemid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ProcessEnchantItemCmd::set_allocated_itemid(::std::string* itemid) {
  if (itemid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete itemid_;
  }
  if (itemid) {
    set_has_itemid();
    itemid_ = itemid;
  } else {
    clear_has_itemid();
    itemid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ProcessEnchantItemCmd.itemid)
}

// -------------------------------------------------------------------

// EquipExchangeItemCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
inline bool EquipExchangeItemCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipExchangeItemCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipExchangeItemCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipExchangeItemCmd::clear_cmd() {
  cmd_ = 6;
  clear_has_cmd();
}
inline ::Cmd::Command EquipExchangeItemCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipExchangeItemCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void EquipExchangeItemCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipExchangeItemCmd.cmd)
}

// optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_EQUIPEXCHANGE];
inline bool EquipExchangeItemCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EquipExchangeItemCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EquipExchangeItemCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EquipExchangeItemCmd::clear_param() {
  param_ = 21;
  clear_has_param();
}
inline ::Cmd::ItemParam EquipExchangeItemCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipExchangeItemCmd.param)
  return static_cast< ::Cmd::ItemParam >(param_);
}
inline void EquipExchangeItemCmd::set_param(::Cmd::ItemParam value) {
  assert(::Cmd::ItemParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipExchangeItemCmd.param)
}

// optional string guid = 3;
inline bool EquipExchangeItemCmd::has_guid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EquipExchangeItemCmd::set_has_guid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EquipExchangeItemCmd::clear_has_guid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EquipExchangeItemCmd::clear_guid() {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_->clear();
  }
  clear_has_guid();
}
inline const ::std::string& EquipExchangeItemCmd::guid() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipExchangeItemCmd.guid)
  return *guid_;
}
inline void EquipExchangeItemCmd::set_guid(const ::std::string& value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.EquipExchangeItemCmd.guid)
}
inline void EquipExchangeItemCmd::set_guid(const char* value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.EquipExchangeItemCmd.guid)
}
inline void EquipExchangeItemCmd::set_guid(const char* value, size_t size) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.EquipExchangeItemCmd.guid)
}
inline ::std::string* EquipExchangeItemCmd::mutable_guid() {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.EquipExchangeItemCmd.guid)
  return guid_;
}
inline ::std::string* EquipExchangeItemCmd::release_guid() {
  clear_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = guid_;
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EquipExchangeItemCmd::set_allocated_guid(::std::string* guid) {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guid_;
  }
  if (guid) {
    set_has_guid();
    guid_ = guid;
  } else {
    clear_has_guid();
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.EquipExchangeItemCmd.guid)
}

// optional .Cmd.EExchangeType type = 4 [default = EEXCHANGETYPE_MIN];
inline bool EquipExchangeItemCmd::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EquipExchangeItemCmd::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EquipExchangeItemCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EquipExchangeItemCmd::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Cmd::EExchangeType EquipExchangeItemCmd::type() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipExchangeItemCmd.type)
  return static_cast< ::Cmd::EExchangeType >(type_);
}
inline void EquipExchangeItemCmd::set_type(::Cmd::EExchangeType value) {
  assert(::Cmd::EExchangeType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipExchangeItemCmd.type)
}

// -------------------------------------------------------------------

// OnOffStoreItemCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
inline bool OnOffStoreItemCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OnOffStoreItemCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OnOffStoreItemCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OnOffStoreItemCmd::clear_cmd() {
  cmd_ = 6;
  clear_has_cmd();
}
inline ::Cmd::Command OnOffStoreItemCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.OnOffStoreItemCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void OnOffStoreItemCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.OnOffStoreItemCmd.cmd)
}

// optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_ONOFFSTORE];
inline bool OnOffStoreItemCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OnOffStoreItemCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OnOffStoreItemCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OnOffStoreItemCmd::clear_param() {
  param_ = 22;
  clear_has_param();
}
inline ::Cmd::ItemParam OnOffStoreItemCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.OnOffStoreItemCmd.param)
  return static_cast< ::Cmd::ItemParam >(param_);
}
inline void OnOffStoreItemCmd::set_param(::Cmd::ItemParam value) {
  assert(::Cmd::ItemParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.OnOffStoreItemCmd.param)
}

// optional bool open = 3 [default = false];
inline bool OnOffStoreItemCmd::has_open() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OnOffStoreItemCmd::set_has_open() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OnOffStoreItemCmd::clear_has_open() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OnOffStoreItemCmd::clear_open() {
  open_ = false;
  clear_has_open();
}
inline bool OnOffStoreItemCmd::open() const {
  // @@protoc_insertion_point(field_get:Cmd.OnOffStoreItemCmd.open)
  return open_;
}
inline void OnOffStoreItemCmd::set_open(bool value) {
  set_has_open();
  open_ = value;
  // @@protoc_insertion_point(field_set:Cmd.OnOffStoreItemCmd.open)
}

// -------------------------------------------------------------------

// PackSlotNtfItemCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
inline bool PackSlotNtfItemCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PackSlotNtfItemCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PackSlotNtfItemCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PackSlotNtfItemCmd::clear_cmd() {
  cmd_ = 6;
  clear_has_cmd();
}
inline ::Cmd::Command PackSlotNtfItemCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.PackSlotNtfItemCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void PackSlotNtfItemCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PackSlotNtfItemCmd.cmd)
}

// optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_PACKSLOTNTF];
inline bool PackSlotNtfItemCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PackSlotNtfItemCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PackSlotNtfItemCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PackSlotNtfItemCmd::clear_param() {
  param_ = 23;
  clear_has_param();
}
inline ::Cmd::ItemParam PackSlotNtfItemCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.PackSlotNtfItemCmd.param)
  return static_cast< ::Cmd::ItemParam >(param_);
}
inline void PackSlotNtfItemCmd::set_param(::Cmd::ItemParam value) {
  assert(::Cmd::ItemParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PackSlotNtfItemCmd.param)
}

// optional .Cmd.EPackType type = 3 [default = EPACKTYPE_MIN];
inline bool PackSlotNtfItemCmd::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PackSlotNtfItemCmd::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PackSlotNtfItemCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PackSlotNtfItemCmd::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Cmd::EPackType PackSlotNtfItemCmd::type() const {
  // @@protoc_insertion_point(field_get:Cmd.PackSlotNtfItemCmd.type)
  return static_cast< ::Cmd::EPackType >(type_);
}
inline void PackSlotNtfItemCmd::set_type(::Cmd::EPackType value) {
  assert(::Cmd::EPackType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PackSlotNtfItemCmd.type)
}

// optional uint32 maxslot = 4 [default = 0];
inline bool PackSlotNtfItemCmd::has_maxslot() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PackSlotNtfItemCmd::set_has_maxslot() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PackSlotNtfItemCmd::clear_has_maxslot() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PackSlotNtfItemCmd::clear_maxslot() {
  maxslot_ = 0u;
  clear_has_maxslot();
}
inline ::google::protobuf::uint32 PackSlotNtfItemCmd::maxslot() const {
  // @@protoc_insertion_point(field_get:Cmd.PackSlotNtfItemCmd.maxslot)
  return maxslot_;
}
inline void PackSlotNtfItemCmd::set_maxslot(::google::protobuf::uint32 value) {
  set_has_maxslot();
  maxslot_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PackSlotNtfItemCmd.maxslot)
}

// -------------------------------------------------------------------

// RestoreEquipItemCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
inline bool RestoreEquipItemCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RestoreEquipItemCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RestoreEquipItemCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RestoreEquipItemCmd::clear_cmd() {
  cmd_ = 6;
  clear_has_cmd();
}
inline ::Cmd::Command RestoreEquipItemCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.RestoreEquipItemCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void RestoreEquipItemCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RestoreEquipItemCmd.cmd)
}

// optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_RESTOREEQUIP];
inline bool RestoreEquipItemCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RestoreEquipItemCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RestoreEquipItemCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RestoreEquipItemCmd::clear_param() {
  param_ = 24;
  clear_has_param();
}
inline ::Cmd::ItemParam RestoreEquipItemCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.RestoreEquipItemCmd.param)
  return static_cast< ::Cmd::ItemParam >(param_);
}
inline void RestoreEquipItemCmd::set_param(::Cmd::ItemParam value) {
  assert(::Cmd::ItemParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RestoreEquipItemCmd.param)
}

// optional string equipid = 3;
inline bool RestoreEquipItemCmd::has_equipid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RestoreEquipItemCmd::set_has_equipid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RestoreEquipItemCmd::clear_has_equipid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RestoreEquipItemCmd::clear_equipid() {
  if (equipid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    equipid_->clear();
  }
  clear_has_equipid();
}
inline const ::std::string& RestoreEquipItemCmd::equipid() const {
  // @@protoc_insertion_point(field_get:Cmd.RestoreEquipItemCmd.equipid)
  return *equipid_;
}
inline void RestoreEquipItemCmd::set_equipid(const ::std::string& value) {
  set_has_equipid();
  if (equipid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    equipid_ = new ::std::string;
  }
  equipid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.RestoreEquipItemCmd.equipid)
}
inline void RestoreEquipItemCmd::set_equipid(const char* value) {
  set_has_equipid();
  if (equipid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    equipid_ = new ::std::string;
  }
  equipid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.RestoreEquipItemCmd.equipid)
}
inline void RestoreEquipItemCmd::set_equipid(const char* value, size_t size) {
  set_has_equipid();
  if (equipid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    equipid_ = new ::std::string;
  }
  equipid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.RestoreEquipItemCmd.equipid)
}
inline ::std::string* RestoreEquipItemCmd::mutable_equipid() {
  set_has_equipid();
  if (equipid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    equipid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.RestoreEquipItemCmd.equipid)
  return equipid_;
}
inline ::std::string* RestoreEquipItemCmd::release_equipid() {
  clear_has_equipid();
  if (equipid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = equipid_;
    equipid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RestoreEquipItemCmd::set_allocated_equipid(::std::string* equipid) {
  if (equipid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete equipid_;
  }
  if (equipid) {
    set_has_equipid();
    equipid_ = equipid;
  } else {
    clear_has_equipid();
    equipid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.RestoreEquipItemCmd.equipid)
}

// optional bool strengthlv = 4 [default = false];
inline bool RestoreEquipItemCmd::has_strengthlv() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RestoreEquipItemCmd::set_has_strengthlv() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RestoreEquipItemCmd::clear_has_strengthlv() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RestoreEquipItemCmd::clear_strengthlv() {
  strengthlv_ = false;
  clear_has_strengthlv();
}
inline bool RestoreEquipItemCmd::strengthlv() const {
  // @@protoc_insertion_point(field_get:Cmd.RestoreEquipItemCmd.strengthlv)
  return strengthlv_;
}
inline void RestoreEquipItemCmd::set_strengthlv(bool value) {
  set_has_strengthlv();
  strengthlv_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RestoreEquipItemCmd.strengthlv)
}

// repeated string cardids = 5;
inline int RestoreEquipItemCmd::cardids_size() const {
  return cardids_.size();
}
inline void RestoreEquipItemCmd::clear_cardids() {
  cardids_.Clear();
}
inline const ::std::string& RestoreEquipItemCmd::cardids(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.RestoreEquipItemCmd.cardids)
  return cardids_.Get(index);
}
inline ::std::string* RestoreEquipItemCmd::mutable_cardids(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.RestoreEquipItemCmd.cardids)
  return cardids_.Mutable(index);
}
inline void RestoreEquipItemCmd::set_cardids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Cmd.RestoreEquipItemCmd.cardids)
  cardids_.Mutable(index)->assign(value);
}
inline void RestoreEquipItemCmd::set_cardids(int index, const char* value) {
  cardids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.RestoreEquipItemCmd.cardids)
}
inline void RestoreEquipItemCmd::set_cardids(int index, const char* value, size_t size) {
  cardids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.RestoreEquipItemCmd.cardids)
}
inline ::std::string* RestoreEquipItemCmd::add_cardids() {
  return cardids_.Add();
}
inline void RestoreEquipItemCmd::add_cardids(const ::std::string& value) {
  cardids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Cmd.RestoreEquipItemCmd.cardids)
}
inline void RestoreEquipItemCmd::add_cardids(const char* value) {
  cardids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Cmd.RestoreEquipItemCmd.cardids)
}
inline void RestoreEquipItemCmd::add_cardids(const char* value, size_t size) {
  cardids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Cmd.RestoreEquipItemCmd.cardids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
RestoreEquipItemCmd::cardids() const {
  // @@protoc_insertion_point(field_list:Cmd.RestoreEquipItemCmd.cardids)
  return cardids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
RestoreEquipItemCmd::mutable_cardids() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.RestoreEquipItemCmd.cardids)
  return &cardids_;
}

// optional bool enchant = 6 [default = false];
inline bool RestoreEquipItemCmd::has_enchant() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RestoreEquipItemCmd::set_has_enchant() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RestoreEquipItemCmd::clear_has_enchant() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RestoreEquipItemCmd::clear_enchant() {
  enchant_ = false;
  clear_has_enchant();
}
inline bool RestoreEquipItemCmd::enchant() const {
  // @@protoc_insertion_point(field_get:Cmd.RestoreEquipItemCmd.enchant)
  return enchant_;
}
inline void RestoreEquipItemCmd::set_enchant(bool value) {
  set_has_enchant();
  enchant_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RestoreEquipItemCmd.enchant)
}

// optional bool upgrade = 7 [default = false];
inline bool RestoreEquipItemCmd::has_upgrade() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RestoreEquipItemCmd::set_has_upgrade() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RestoreEquipItemCmd::clear_has_upgrade() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RestoreEquipItemCmd::clear_upgrade() {
  upgrade_ = false;
  clear_has_upgrade();
}
inline bool RestoreEquipItemCmd::upgrade() const {
  // @@protoc_insertion_point(field_get:Cmd.RestoreEquipItemCmd.upgrade)
  return upgrade_;
}
inline void RestoreEquipItemCmd::set_upgrade(bool value) {
  set_has_upgrade();
  upgrade_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RestoreEquipItemCmd.upgrade)
}

// optional bool strengthlv2 = 8 [default = false];
inline bool RestoreEquipItemCmd::has_strengthlv2() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RestoreEquipItemCmd::set_has_strengthlv2() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RestoreEquipItemCmd::clear_has_strengthlv2() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RestoreEquipItemCmd::clear_strengthlv2() {
  strengthlv2_ = false;
  clear_has_strengthlv2();
}
inline bool RestoreEquipItemCmd::strengthlv2() const {
  // @@protoc_insertion_point(field_get:Cmd.RestoreEquipItemCmd.strengthlv2)
  return strengthlv2_;
}
inline void RestoreEquipItemCmd::set_strengthlv2(bool value) {
  set_has_strengthlv2();
  strengthlv2_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RestoreEquipItemCmd.strengthlv2)
}

// -------------------------------------------------------------------

// UseCountItemCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
inline bool UseCountItemCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UseCountItemCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UseCountItemCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UseCountItemCmd::clear_cmd() {
  cmd_ = 6;
  clear_has_cmd();
}
inline ::Cmd::Command UseCountItemCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.UseCountItemCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void UseCountItemCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UseCountItemCmd.cmd)
}

// optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_USECOUNT];
inline bool UseCountItemCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UseCountItemCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UseCountItemCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UseCountItemCmd::clear_param() {
  param_ = 25;
  clear_has_param();
}
inline ::Cmd::ItemParam UseCountItemCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.UseCountItemCmd.param)
  return static_cast< ::Cmd::ItemParam >(param_);
}
inline void UseCountItemCmd::set_param(::Cmd::ItemParam value) {
  assert(::Cmd::ItemParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UseCountItemCmd.param)
}

// required uint32 itemid = 3;
inline bool UseCountItemCmd::has_itemid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UseCountItemCmd::set_has_itemid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UseCountItemCmd::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UseCountItemCmd::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 UseCountItemCmd::itemid() const {
  // @@protoc_insertion_point(field_get:Cmd.UseCountItemCmd.itemid)
  return itemid_;
}
inline void UseCountItemCmd::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UseCountItemCmd.itemid)
}

// optional uint32 count = 4 [default = 0];
inline bool UseCountItemCmd::has_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UseCountItemCmd::set_has_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UseCountItemCmd::clear_has_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UseCountItemCmd::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 UseCountItemCmd::count() const {
  // @@protoc_insertion_point(field_get:Cmd.UseCountItemCmd.count)
  return count_;
}
inline void UseCountItemCmd::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UseCountItemCmd.count)
}

// -------------------------------------------------------------------

// ExchangeCardItemCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
inline bool ExchangeCardItemCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExchangeCardItemCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExchangeCardItemCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExchangeCardItemCmd::clear_cmd() {
  cmd_ = 6;
  clear_has_cmd();
}
inline ::Cmd::Command ExchangeCardItemCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ExchangeCardItemCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ExchangeCardItemCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ExchangeCardItemCmd.cmd)
}

// optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_EXCHANGECARD];
inline bool ExchangeCardItemCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExchangeCardItemCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExchangeCardItemCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExchangeCardItemCmd::clear_param() {
  param_ = 28;
  clear_has_param();
}
inline ::Cmd::ItemParam ExchangeCardItemCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ExchangeCardItemCmd.param)
  return static_cast< ::Cmd::ItemParam >(param_);
}
inline void ExchangeCardItemCmd::set_param(::Cmd::ItemParam value) {
  assert(::Cmd::ItemParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ExchangeCardItemCmd.param)
}

// optional .Cmd.EExchangeCardType type = 3 [default = EEXCHANGECARDTYPE_DRAW];
inline bool ExchangeCardItemCmd::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ExchangeCardItemCmd::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ExchangeCardItemCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ExchangeCardItemCmd::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::Cmd::EExchangeCardType ExchangeCardItemCmd::type() const {
  // @@protoc_insertion_point(field_get:Cmd.ExchangeCardItemCmd.type)
  return static_cast< ::Cmd::EExchangeCardType >(type_);
}
inline void ExchangeCardItemCmd::set_type(::Cmd::EExchangeCardType value) {
  assert(::Cmd::EExchangeCardType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ExchangeCardItemCmd.type)
}

// optional uint64 npcid = 4 [default = 0];
inline bool ExchangeCardItemCmd::has_npcid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ExchangeCardItemCmd::set_has_npcid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ExchangeCardItemCmd::clear_has_npcid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ExchangeCardItemCmd::clear_npcid() {
  npcid_ = GOOGLE_ULONGLONG(0);
  clear_has_npcid();
}
inline ::google::protobuf::uint64 ExchangeCardItemCmd::npcid() const {
  // @@protoc_insertion_point(field_get:Cmd.ExchangeCardItemCmd.npcid)
  return npcid_;
}
inline void ExchangeCardItemCmd::set_npcid(::google::protobuf::uint64 value) {
  set_has_npcid();
  npcid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ExchangeCardItemCmd.npcid)
}

// repeated string material = 5;
inline int ExchangeCardItemCmd::material_size() const {
  return material_.size();
}
inline void ExchangeCardItemCmd::clear_material() {
  material_.Clear();
}
inline const ::std::string& ExchangeCardItemCmd::material(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.ExchangeCardItemCmd.material)
  return material_.Get(index);
}
inline ::std::string* ExchangeCardItemCmd::mutable_material(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.ExchangeCardItemCmd.material)
  return material_.Mutable(index);
}
inline void ExchangeCardItemCmd::set_material(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Cmd.ExchangeCardItemCmd.material)
  material_.Mutable(index)->assign(value);
}
inline void ExchangeCardItemCmd::set_material(int index, const char* value) {
  material_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ExchangeCardItemCmd.material)
}
inline void ExchangeCardItemCmd::set_material(int index, const char* value, size_t size) {
  material_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ExchangeCardItemCmd.material)
}
inline ::std::string* ExchangeCardItemCmd::add_material() {
  return material_.Add();
}
inline void ExchangeCardItemCmd::add_material(const ::std::string& value) {
  material_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Cmd.ExchangeCardItemCmd.material)
}
inline void ExchangeCardItemCmd::add_material(const char* value) {
  material_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Cmd.ExchangeCardItemCmd.material)
}
inline void ExchangeCardItemCmd::add_material(const char* value, size_t size) {
  material_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Cmd.ExchangeCardItemCmd.material)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ExchangeCardItemCmd::material() const {
  // @@protoc_insertion_point(field_list:Cmd.ExchangeCardItemCmd.material)
  return material_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ExchangeCardItemCmd::mutable_material() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.ExchangeCardItemCmd.material)
  return &material_;
}

// optional uint64 charid = 6 [default = 0];
inline bool ExchangeCardItemCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ExchangeCardItemCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ExchangeCardItemCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ExchangeCardItemCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 ExchangeCardItemCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.ExchangeCardItemCmd.charid)
  return charid_;
}
inline void ExchangeCardItemCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ExchangeCardItemCmd.charid)
}

// optional uint32 cardid = 7 [default = 0];
inline bool ExchangeCardItemCmd::has_cardid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ExchangeCardItemCmd::set_has_cardid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ExchangeCardItemCmd::clear_has_cardid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ExchangeCardItemCmd::clear_cardid() {
  cardid_ = 0u;
  clear_has_cardid();
}
inline ::google::protobuf::uint32 ExchangeCardItemCmd::cardid() const {
  // @@protoc_insertion_point(field_get:Cmd.ExchangeCardItemCmd.cardid)
  return cardid_;
}
inline void ExchangeCardItemCmd::set_cardid(::google::protobuf::uint32 value) {
  set_has_cardid();
  cardid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ExchangeCardItemCmd.cardid)
}

// optional bool anim = 8 [default = false];
inline bool ExchangeCardItemCmd::has_anim() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ExchangeCardItemCmd::set_has_anim() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ExchangeCardItemCmd::clear_has_anim() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ExchangeCardItemCmd::clear_anim() {
  anim_ = false;
  clear_has_anim();
}
inline bool ExchangeCardItemCmd::anim() const {
  // @@protoc_insertion_point(field_get:Cmd.ExchangeCardItemCmd.anim)
  return anim_;
}
inline void ExchangeCardItemCmd::set_anim(bool value) {
  set_has_anim();
  anim_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ExchangeCardItemCmd.anim)
}

// repeated .Cmd.ItemInfo items = 9;
inline int ExchangeCardItemCmd::items_size() const {
  return items_.size();
}
inline void ExchangeCardItemCmd::clear_items() {
  items_.Clear();
}
inline const ::Cmd::ItemInfo& ExchangeCardItemCmd::items(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.ExchangeCardItemCmd.items)
  return items_.Get(index);
}
inline ::Cmd::ItemInfo* ExchangeCardItemCmd::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.ExchangeCardItemCmd.items)
  return items_.Mutable(index);
}
inline ::Cmd::ItemInfo* ExchangeCardItemCmd::add_items() {
  // @@protoc_insertion_point(field_add:Cmd.ExchangeCardItemCmd.items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ItemInfo >&
ExchangeCardItemCmd::items() const {
  // @@protoc_insertion_point(field_list:Cmd.ExchangeCardItemCmd.items)
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::ItemInfo >*
ExchangeCardItemCmd::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.ExchangeCardItemCmd.items)
  return &items_;
}

// -------------------------------------------------------------------

// GetCountItemCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
inline bool GetCountItemCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetCountItemCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetCountItemCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetCountItemCmd::clear_cmd() {
  cmd_ = 6;
  clear_has_cmd();
}
inline ::Cmd::Command GetCountItemCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.GetCountItemCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void GetCountItemCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GetCountItemCmd.cmd)
}

// optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_GETCOUNT];
inline bool GetCountItemCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetCountItemCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetCountItemCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetCountItemCmd::clear_param() {
  param_ = 29;
  clear_has_param();
}
inline ::Cmd::ItemParam GetCountItemCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.GetCountItemCmd.param)
  return static_cast< ::Cmd::ItemParam >(param_);
}
inline void GetCountItemCmd::set_param(::Cmd::ItemParam value) {
  assert(::Cmd::ItemParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GetCountItemCmd.param)
}

// optional uint32 itemid = 3;
inline bool GetCountItemCmd::has_itemid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetCountItemCmd::set_has_itemid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetCountItemCmd::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetCountItemCmd::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 GetCountItemCmd::itemid() const {
  // @@protoc_insertion_point(field_get:Cmd.GetCountItemCmd.itemid)
  return itemid_;
}
inline void GetCountItemCmd::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GetCountItemCmd.itemid)
}

// optional uint32 count = 4 [default = 0];
inline bool GetCountItemCmd::has_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GetCountItemCmd::set_has_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GetCountItemCmd::clear_has_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GetCountItemCmd::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 GetCountItemCmd::count() const {
  // @@protoc_insertion_point(field_get:Cmd.GetCountItemCmd.count)
  return count_;
}
inline void GetCountItemCmd::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GetCountItemCmd.count)
}

// optional .Cmd.ESource source = 5 [default = ESOURCE_MIN];
inline bool GetCountItemCmd::has_source() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GetCountItemCmd::set_has_source() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GetCountItemCmd::clear_has_source() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GetCountItemCmd::clear_source() {
  source_ = 0;
  clear_has_source();
}
inline ::Cmd::ESource GetCountItemCmd::source() const {
  // @@protoc_insertion_point(field_get:Cmd.GetCountItemCmd.source)
  return static_cast< ::Cmd::ESource >(source_);
}
inline void GetCountItemCmd::set_source(::Cmd::ESource value) {
  assert(::Cmd::ESource_IsValid(value));
  set_has_source();
  source_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GetCountItemCmd.source)
}

// -------------------------------------------------------------------

// SaveLoveLetterCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
inline bool SaveLoveLetterCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SaveLoveLetterCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SaveLoveLetterCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SaveLoveLetterCmd::clear_cmd() {
  cmd_ = 6;
  clear_has_cmd();
}
inline ::Cmd::Command SaveLoveLetterCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.SaveLoveLetterCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void SaveLoveLetterCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SaveLoveLetterCmd.cmd)
}

// optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_SAVE_LOVE_LETTER];
inline bool SaveLoveLetterCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SaveLoveLetterCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SaveLoveLetterCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SaveLoveLetterCmd::clear_param() {
  param_ = 30;
  clear_has_param();
}
inline ::Cmd::ItemParam SaveLoveLetterCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.SaveLoveLetterCmd.param)
  return static_cast< ::Cmd::ItemParam >(param_);
}
inline void SaveLoveLetterCmd::set_param(::Cmd::ItemParam value) {
  assert(::Cmd::ItemParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SaveLoveLetterCmd.param)
}

// optional uint32 dwID = 3;
inline bool SaveLoveLetterCmd::has_dwid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SaveLoveLetterCmd::set_has_dwid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SaveLoveLetterCmd::clear_has_dwid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SaveLoveLetterCmd::clear_dwid() {
  dwid_ = 0u;
  clear_has_dwid();
}
inline ::google::protobuf::uint32 SaveLoveLetterCmd::dwid() const {
  // @@protoc_insertion_point(field_get:Cmd.SaveLoveLetterCmd.dwID)
  return dwid_;
}
inline void SaveLoveLetterCmd::set_dwid(::google::protobuf::uint32 value) {
  set_has_dwid();
  dwid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SaveLoveLetterCmd.dwID)
}

// -------------------------------------------------------------------

// ItemDataShow

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
inline bool ItemDataShow::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ItemDataShow::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ItemDataShow::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ItemDataShow::clear_cmd() {
  cmd_ = 6;
  clear_has_cmd();
}
inline ::Cmd::Command ItemDataShow::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemDataShow.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ItemDataShow::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemDataShow.cmd)
}

// optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_ITEMDATASHOW];
inline bool ItemDataShow::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ItemDataShow::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ItemDataShow::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ItemDataShow::clear_param() {
  param_ = 31;
  clear_has_param();
}
inline ::Cmd::ItemParam ItemDataShow::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemDataShow.param)
  return static_cast< ::Cmd::ItemParam >(param_);
}
inline void ItemDataShow::set_param(::Cmd::ItemParam value) {
  assert(::Cmd::ItemParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemDataShow.param)
}

// repeated .Cmd.ItemData items = 3;
inline int ItemDataShow::items_size() const {
  return items_.size();
}
inline void ItemDataShow::clear_items() {
  items_.Clear();
}
inline const ::Cmd::ItemData& ItemDataShow::items(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.ItemDataShow.items)
  return items_.Get(index);
}
inline ::Cmd::ItemData* ItemDataShow::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.ItemDataShow.items)
  return items_.Mutable(index);
}
inline ::Cmd::ItemData* ItemDataShow::add_items() {
  // @@protoc_insertion_point(field_add:Cmd.ItemDataShow.items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ItemData >&
ItemDataShow::items() const {
  // @@protoc_insertion_point(field_list:Cmd.ItemDataShow.items)
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::ItemData >*
ItemDataShow::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.ItemDataShow.items)
  return &items_;
}

// -------------------------------------------------------------------

// LotteryCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
inline bool LotteryCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LotteryCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LotteryCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LotteryCmd::clear_cmd() {
  cmd_ = 6;
  clear_has_cmd();
}
inline ::Cmd::Command LotteryCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.LotteryCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void LotteryCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LotteryCmd.cmd)
}

// optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_LOTTERY];
inline bool LotteryCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LotteryCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LotteryCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LotteryCmd::clear_param() {
  param_ = 32;
  clear_has_param();
}
inline ::Cmd::ItemParam LotteryCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.LotteryCmd.param)
  return static_cast< ::Cmd::ItemParam >(param_);
}
inline void LotteryCmd::set_param(::Cmd::ItemParam value) {
  assert(::Cmd::ItemParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LotteryCmd.param)
}

// optional uint32 year = 3;
inline bool LotteryCmd::has_year() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LotteryCmd::set_has_year() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LotteryCmd::clear_has_year() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LotteryCmd::clear_year() {
  year_ = 0u;
  clear_has_year();
}
inline ::google::protobuf::uint32 LotteryCmd::year() const {
  // @@protoc_insertion_point(field_get:Cmd.LotteryCmd.year)
  return year_;
}
inline void LotteryCmd::set_year(::google::protobuf::uint32 value) {
  set_has_year();
  year_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LotteryCmd.year)
}

// optional uint32 month = 4;
inline bool LotteryCmd::has_month() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LotteryCmd::set_has_month() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LotteryCmd::clear_has_month() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LotteryCmd::clear_month() {
  month_ = 0u;
  clear_has_month();
}
inline ::google::protobuf::uint32 LotteryCmd::month() const {
  // @@protoc_insertion_point(field_get:Cmd.LotteryCmd.month)
  return month_;
}
inline void LotteryCmd::set_month(::google::protobuf::uint32 value) {
  set_has_month();
  month_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LotteryCmd.month)
}

// optional uint64 npcid = 5;
inline bool LotteryCmd::has_npcid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LotteryCmd::set_has_npcid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LotteryCmd::clear_has_npcid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LotteryCmd::clear_npcid() {
  npcid_ = GOOGLE_ULONGLONG(0);
  clear_has_npcid();
}
inline ::google::protobuf::uint64 LotteryCmd::npcid() const {
  // @@protoc_insertion_point(field_get:Cmd.LotteryCmd.npcid)
  return npcid_;
}
inline void LotteryCmd::set_npcid(::google::protobuf::uint64 value) {
  set_has_npcid();
  npcid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LotteryCmd.npcid)
}

// optional bool skip_anim = 6 [default = false];
inline bool LotteryCmd::has_skip_anim() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LotteryCmd::set_has_skip_anim() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LotteryCmd::clear_has_skip_anim() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LotteryCmd::clear_skip_anim() {
  skip_anim_ = false;
  clear_has_skip_anim();
}
inline bool LotteryCmd::skip_anim() const {
  // @@protoc_insertion_point(field_get:Cmd.LotteryCmd.skip_anim)
  return skip_anim_;
}
inline void LotteryCmd::set_skip_anim(bool value) {
  set_has_skip_anim();
  skip_anim_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LotteryCmd.skip_anim)
}

// optional uint32 price = 7;
inline bool LotteryCmd::has_price() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LotteryCmd::set_has_price() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LotteryCmd::clear_has_price() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LotteryCmd::clear_price() {
  price_ = 0u;
  clear_has_price();
}
inline ::google::protobuf::uint32 LotteryCmd::price() const {
  // @@protoc_insertion_point(field_get:Cmd.LotteryCmd.price)
  return price_;
}
inline void LotteryCmd::set_price(::google::protobuf::uint32 value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LotteryCmd.price)
}

// optional uint32 ticket = 8;
inline bool LotteryCmd::has_ticket() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LotteryCmd::set_has_ticket() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LotteryCmd::clear_has_ticket() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LotteryCmd::clear_ticket() {
  ticket_ = 0u;
  clear_has_ticket();
}
inline ::google::protobuf::uint32 LotteryCmd::ticket() const {
  // @@protoc_insertion_point(field_get:Cmd.LotteryCmd.ticket)
  return ticket_;
}
inline void LotteryCmd::set_ticket(::google::protobuf::uint32 value) {
  set_has_ticket();
  ticket_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LotteryCmd.ticket)
}

// optional .Cmd.ELotteryType type = 9;
inline bool LotteryCmd::has_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LotteryCmd::set_has_type() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LotteryCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LotteryCmd::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Cmd::ELotteryType LotteryCmd::type() const {
  // @@protoc_insertion_point(field_get:Cmd.LotteryCmd.type)
  return static_cast< ::Cmd::ELotteryType >(type_);
}
inline void LotteryCmd::set_type(::Cmd::ELotteryType value) {
  assert(::Cmd::ELotteryType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LotteryCmd.type)
}

// optional uint32 count = 10;
inline bool LotteryCmd::has_count() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void LotteryCmd::set_has_count() {
  _has_bits_[0] |= 0x00000200u;
}
inline void LotteryCmd::clear_has_count() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void LotteryCmd::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 LotteryCmd::count() const {
  // @@protoc_insertion_point(field_get:Cmd.LotteryCmd.count)
  return count_;
}
inline void LotteryCmd::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LotteryCmd.count)
}

// repeated .Cmd.ItemInfo items = 11;
inline int LotteryCmd::items_size() const {
  return items_.size();
}
inline void LotteryCmd::clear_items() {
  items_.Clear();
}
inline const ::Cmd::ItemInfo& LotteryCmd::items(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.LotteryCmd.items)
  return items_.Get(index);
}
inline ::Cmd::ItemInfo* LotteryCmd::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.LotteryCmd.items)
  return items_.Mutable(index);
}
inline ::Cmd::ItemInfo* LotteryCmd::add_items() {
  // @@protoc_insertion_point(field_add:Cmd.LotteryCmd.items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ItemInfo >&
LotteryCmd::items() const {
  // @@protoc_insertion_point(field_list:Cmd.LotteryCmd.items)
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::ItemInfo >*
LotteryCmd::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.LotteryCmd.items)
  return &items_;
}

// optional uint64 charid = 12;
inline bool LotteryCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void LotteryCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void LotteryCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void LotteryCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 LotteryCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.LotteryCmd.charid)
  return charid_;
}
inline void LotteryCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LotteryCmd.charid)
}

// optional string guid = 13;
inline bool LotteryCmd::has_guid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void LotteryCmd::set_has_guid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void LotteryCmd::clear_has_guid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void LotteryCmd::clear_guid() {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_->clear();
  }
  clear_has_guid();
}
inline const ::std::string& LotteryCmd::guid() const {
  // @@protoc_insertion_point(field_get:Cmd.LotteryCmd.guid)
  return *guid_;
}
inline void LotteryCmd::set_guid(const ::std::string& value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.LotteryCmd.guid)
}
inline void LotteryCmd::set_guid(const char* value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.LotteryCmd.guid)
}
inline void LotteryCmd::set_guid(const char* value, size_t size) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.LotteryCmd.guid)
}
inline ::std::string* LotteryCmd::mutable_guid() {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.LotteryCmd.guid)
  return guid_;
}
inline ::std::string* LotteryCmd::release_guid() {
  clear_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = guid_;
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LotteryCmd::set_allocated_guid(::std::string* guid) {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guid_;
  }
  if (guid) {
    set_has_guid();
    guid_ = guid;
  } else {
    clear_has_guid();
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.LotteryCmd.guid)
}

// optional uint32 today_cnt = 14;
inline bool LotteryCmd::has_today_cnt() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void LotteryCmd::set_has_today_cnt() {
  _has_bits_[0] |= 0x00002000u;
}
inline void LotteryCmd::clear_has_today_cnt() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void LotteryCmd::clear_today_cnt() {
  today_cnt_ = 0u;
  clear_has_today_cnt();
}
inline ::google::protobuf::uint32 LotteryCmd::today_cnt() const {
  // @@protoc_insertion_point(field_get:Cmd.LotteryCmd.today_cnt)
  return today_cnt_;
}
inline void LotteryCmd::set_today_cnt(::google::protobuf::uint32 value) {
  set_has_today_cnt();
  today_cnt_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LotteryCmd.today_cnt)
}

// -------------------------------------------------------------------

// LotteryRecoveryCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
inline bool LotteryRecoveryCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LotteryRecoveryCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LotteryRecoveryCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LotteryRecoveryCmd::clear_cmd() {
  cmd_ = 6;
  clear_has_cmd();
}
inline ::Cmd::Command LotteryRecoveryCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.LotteryRecoveryCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void LotteryRecoveryCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LotteryRecoveryCmd.cmd)
}

// optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_LOTTERY_RECOVERY];
inline bool LotteryRecoveryCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LotteryRecoveryCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LotteryRecoveryCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LotteryRecoveryCmd::clear_param() {
  param_ = 33;
  clear_has_param();
}
inline ::Cmd::ItemParam LotteryRecoveryCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.LotteryRecoveryCmd.param)
  return static_cast< ::Cmd::ItemParam >(param_);
}
inline void LotteryRecoveryCmd::set_param(::Cmd::ItemParam value) {
  assert(::Cmd::ItemParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LotteryRecoveryCmd.param)
}

// repeated string guids = 3;
inline int LotteryRecoveryCmd::guids_size() const {
  return guids_.size();
}
inline void LotteryRecoveryCmd::clear_guids() {
  guids_.Clear();
}
inline const ::std::string& LotteryRecoveryCmd::guids(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.LotteryRecoveryCmd.guids)
  return guids_.Get(index);
}
inline ::std::string* LotteryRecoveryCmd::mutable_guids(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.LotteryRecoveryCmd.guids)
  return guids_.Mutable(index);
}
inline void LotteryRecoveryCmd::set_guids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Cmd.LotteryRecoveryCmd.guids)
  guids_.Mutable(index)->assign(value);
}
inline void LotteryRecoveryCmd::set_guids(int index, const char* value) {
  guids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.LotteryRecoveryCmd.guids)
}
inline void LotteryRecoveryCmd::set_guids(int index, const char* value, size_t size) {
  guids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.LotteryRecoveryCmd.guids)
}
inline ::std::string* LotteryRecoveryCmd::add_guids() {
  return guids_.Add();
}
inline void LotteryRecoveryCmd::add_guids(const ::std::string& value) {
  guids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Cmd.LotteryRecoveryCmd.guids)
}
inline void LotteryRecoveryCmd::add_guids(const char* value) {
  guids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Cmd.LotteryRecoveryCmd.guids)
}
inline void LotteryRecoveryCmd::add_guids(const char* value, size_t size) {
  guids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Cmd.LotteryRecoveryCmd.guids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
LotteryRecoveryCmd::guids() const {
  // @@protoc_insertion_point(field_list:Cmd.LotteryRecoveryCmd.guids)
  return guids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
LotteryRecoveryCmd::mutable_guids() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.LotteryRecoveryCmd.guids)
  return &guids_;
}

// optional uint64 npcid = 4;
inline bool LotteryRecoveryCmd::has_npcid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LotteryRecoveryCmd::set_has_npcid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LotteryRecoveryCmd::clear_has_npcid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LotteryRecoveryCmd::clear_npcid() {
  npcid_ = GOOGLE_ULONGLONG(0);
  clear_has_npcid();
}
inline ::google::protobuf::uint64 LotteryRecoveryCmd::npcid() const {
  // @@protoc_insertion_point(field_get:Cmd.LotteryRecoveryCmd.npcid)
  return npcid_;
}
inline void LotteryRecoveryCmd::set_npcid(::google::protobuf::uint64 value) {
  set_has_npcid();
  npcid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LotteryRecoveryCmd.npcid)
}

// optional .Cmd.ELotteryType type = 5;
inline bool LotteryRecoveryCmd::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LotteryRecoveryCmd::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LotteryRecoveryCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LotteryRecoveryCmd::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Cmd::ELotteryType LotteryRecoveryCmd::type() const {
  // @@protoc_insertion_point(field_get:Cmd.LotteryRecoveryCmd.type)
  return static_cast< ::Cmd::ELotteryType >(type_);
}
inline void LotteryRecoveryCmd::set_type(::Cmd::ELotteryType value) {
  assert(::Cmd::ELotteryType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LotteryRecoveryCmd.type)
}

// -------------------------------------------------------------------

// LotterySubInfo

// optional uint32 itemid = 1;
inline bool LotterySubInfo::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LotterySubInfo::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LotterySubInfo::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LotterySubInfo::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 LotterySubInfo::itemid() const {
  // @@protoc_insertion_point(field_get:Cmd.LotterySubInfo.itemid)
  return itemid_;
}
inline void LotterySubInfo::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LotterySubInfo.itemid)
}

// optional uint32 recover_price = 2;
inline bool LotterySubInfo::has_recover_price() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LotterySubInfo::set_has_recover_price() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LotterySubInfo::clear_has_recover_price() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LotterySubInfo::clear_recover_price() {
  recover_price_ = 0u;
  clear_has_recover_price();
}
inline ::google::protobuf::uint32 LotterySubInfo::recover_price() const {
  // @@protoc_insertion_point(field_get:Cmd.LotterySubInfo.recover_price)
  return recover_price_;
}
inline void LotterySubInfo::set_recover_price(::google::protobuf::uint32 value) {
  set_has_recover_price();
  recover_price_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LotterySubInfo.recover_price)
}

// optional uint32 rate = 3;
inline bool LotterySubInfo::has_rate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LotterySubInfo::set_has_rate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LotterySubInfo::clear_has_rate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LotterySubInfo::clear_rate() {
  rate_ = 0u;
  clear_has_rate();
}
inline ::google::protobuf::uint32 LotterySubInfo::rate() const {
  // @@protoc_insertion_point(field_get:Cmd.LotterySubInfo.rate)
  return rate_;
}
inline void LotterySubInfo::set_rate(::google::protobuf::uint32 value) {
  set_has_rate();
  rate_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LotterySubInfo.rate)
}

// optional string rarity = 4;
inline bool LotterySubInfo::has_rarity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LotterySubInfo::set_has_rarity() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LotterySubInfo::clear_has_rarity() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LotterySubInfo::clear_rarity() {
  if (rarity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rarity_->clear();
  }
  clear_has_rarity();
}
inline const ::std::string& LotterySubInfo::rarity() const {
  // @@protoc_insertion_point(field_get:Cmd.LotterySubInfo.rarity)
  return *rarity_;
}
inline void LotterySubInfo::set_rarity(const ::std::string& value) {
  set_has_rarity();
  if (rarity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rarity_ = new ::std::string;
  }
  rarity_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.LotterySubInfo.rarity)
}
inline void LotterySubInfo::set_rarity(const char* value) {
  set_has_rarity();
  if (rarity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rarity_ = new ::std::string;
  }
  rarity_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.LotterySubInfo.rarity)
}
inline void LotterySubInfo::set_rarity(const char* value, size_t size) {
  set_has_rarity();
  if (rarity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rarity_ = new ::std::string;
  }
  rarity_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.LotterySubInfo.rarity)
}
inline ::std::string* LotterySubInfo::mutable_rarity() {
  set_has_rarity();
  if (rarity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rarity_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.LotterySubInfo.rarity)
  return rarity_;
}
inline ::std::string* LotterySubInfo::release_rarity() {
  clear_has_rarity();
  if (rarity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = rarity_;
    rarity_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LotterySubInfo::set_allocated_rarity(::std::string* rarity) {
  if (rarity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rarity_;
  }
  if (rarity) {
    set_has_rarity();
    rarity_ = rarity;
  } else {
    clear_has_rarity();
    rarity_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.LotterySubInfo.rarity)
}

// optional bool cur_batch = 5;
inline bool LotterySubInfo::has_cur_batch() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LotterySubInfo::set_has_cur_batch() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LotterySubInfo::clear_has_cur_batch() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LotterySubInfo::clear_cur_batch() {
  cur_batch_ = false;
  clear_has_cur_batch();
}
inline bool LotterySubInfo::cur_batch() const {
  // @@protoc_insertion_point(field_get:Cmd.LotterySubInfo.cur_batch)
  return cur_batch_;
}
inline void LotterySubInfo::set_cur_batch(bool value) {
  set_has_cur_batch();
  cur_batch_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LotterySubInfo.cur_batch)
}

// optional uint32 id = 6;
inline bool LotterySubInfo::has_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LotterySubInfo::set_has_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LotterySubInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LotterySubInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 LotterySubInfo::id() const {
  // @@protoc_insertion_point(field_get:Cmd.LotterySubInfo.id)
  return id_;
}
inline void LotterySubInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LotterySubInfo.id)
}

// optional uint32 recover_itemid = 7;
inline bool LotterySubInfo::has_recover_itemid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LotterySubInfo::set_has_recover_itemid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LotterySubInfo::clear_has_recover_itemid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LotterySubInfo::clear_recover_itemid() {
  recover_itemid_ = 0u;
  clear_has_recover_itemid();
}
inline ::google::protobuf::uint32 LotterySubInfo::recover_itemid() const {
  // @@protoc_insertion_point(field_get:Cmd.LotterySubInfo.recover_itemid)
  return recover_itemid_;
}
inline void LotterySubInfo::set_recover_itemid(::google::protobuf::uint32 value) {
  set_has_recover_itemid();
  recover_itemid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LotterySubInfo.recover_itemid)
}

// optional uint32 count = 8;
inline bool LotterySubInfo::has_count() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LotterySubInfo::set_has_count() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LotterySubInfo::clear_has_count() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LotterySubInfo::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 LotterySubInfo::count() const {
  // @@protoc_insertion_point(field_get:Cmd.LotterySubInfo.count)
  return count_;
}
inline void LotterySubInfo::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LotterySubInfo.count)
}

// optional uint32 female_itemid = 9;
inline bool LotterySubInfo::has_female_itemid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LotterySubInfo::set_has_female_itemid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LotterySubInfo::clear_has_female_itemid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LotterySubInfo::clear_female_itemid() {
  female_itemid_ = 0u;
  clear_has_female_itemid();
}
inline ::google::protobuf::uint32 LotterySubInfo::female_itemid() const {
  // @@protoc_insertion_point(field_get:Cmd.LotterySubInfo.female_itemid)
  return female_itemid_;
}
inline void LotterySubInfo::set_female_itemid(::google::protobuf::uint32 value) {
  set_has_female_itemid();
  female_itemid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LotterySubInfo.female_itemid)
}

// -------------------------------------------------------------------

// LotteryInfo

// optional uint32 year = 1;
inline bool LotteryInfo::has_year() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LotteryInfo::set_has_year() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LotteryInfo::clear_has_year() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LotteryInfo::clear_year() {
  year_ = 0u;
  clear_has_year();
}
inline ::google::protobuf::uint32 LotteryInfo::year() const {
  // @@protoc_insertion_point(field_get:Cmd.LotteryInfo.year)
  return year_;
}
inline void LotteryInfo::set_year(::google::protobuf::uint32 value) {
  set_has_year();
  year_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LotteryInfo.year)
}

// optional uint32 month = 2;
inline bool LotteryInfo::has_month() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LotteryInfo::set_has_month() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LotteryInfo::clear_has_month() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LotteryInfo::clear_month() {
  month_ = 0u;
  clear_has_month();
}
inline ::google::protobuf::uint32 LotteryInfo::month() const {
  // @@protoc_insertion_point(field_get:Cmd.LotteryInfo.month)
  return month_;
}
inline void LotteryInfo::set_month(::google::protobuf::uint32 value) {
  set_has_month();
  month_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LotteryInfo.month)
}

// optional uint32 price = 3;
inline bool LotteryInfo::has_price() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LotteryInfo::set_has_price() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LotteryInfo::clear_has_price() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LotteryInfo::clear_price() {
  price_ = 0u;
  clear_has_price();
}
inline ::google::protobuf::uint32 LotteryInfo::price() const {
  // @@protoc_insertion_point(field_get:Cmd.LotteryInfo.price)
  return price_;
}
inline void LotteryInfo::set_price(::google::protobuf::uint32 value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LotteryInfo.price)
}

// optional uint32 discount = 4;
inline bool LotteryInfo::has_discount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LotteryInfo::set_has_discount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LotteryInfo::clear_has_discount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LotteryInfo::clear_discount() {
  discount_ = 0u;
  clear_has_discount();
}
inline ::google::protobuf::uint32 LotteryInfo::discount() const {
  // @@protoc_insertion_point(field_get:Cmd.LotteryInfo.discount)
  return discount_;
}
inline void LotteryInfo::set_discount(::google::protobuf::uint32 value) {
  set_has_discount();
  discount_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LotteryInfo.discount)
}

// repeated .Cmd.LotterySubInfo subInfo = 5;
inline int LotteryInfo::subinfo_size() const {
  return subinfo_.size();
}
inline void LotteryInfo::clear_subinfo() {
  subinfo_.Clear();
}
inline const ::Cmd::LotterySubInfo& LotteryInfo::subinfo(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.LotteryInfo.subInfo)
  return subinfo_.Get(index);
}
inline ::Cmd::LotterySubInfo* LotteryInfo::mutable_subinfo(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.LotteryInfo.subInfo)
  return subinfo_.Mutable(index);
}
inline ::Cmd::LotterySubInfo* LotteryInfo::add_subinfo() {
  // @@protoc_insertion_point(field_add:Cmd.LotteryInfo.subInfo)
  return subinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::LotterySubInfo >&
LotteryInfo::subinfo() const {
  // @@protoc_insertion_point(field_list:Cmd.LotteryInfo.subInfo)
  return subinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::LotterySubInfo >*
LotteryInfo::mutable_subinfo() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.LotteryInfo.subInfo)
  return &subinfo_;
}

// optional uint32 lotterybox = 6;
inline bool LotteryInfo::has_lotterybox() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LotteryInfo::set_has_lotterybox() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LotteryInfo::clear_has_lotterybox() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LotteryInfo::clear_lotterybox() {
  lotterybox_ = 0u;
  clear_has_lotterybox();
}
inline ::google::protobuf::uint32 LotteryInfo::lotterybox() const {
  // @@protoc_insertion_point(field_get:Cmd.LotteryInfo.lotterybox)
  return lotterybox_;
}
inline void LotteryInfo::set_lotterybox(::google::protobuf::uint32 value) {
  set_has_lotterybox();
  lotterybox_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LotteryInfo.lotterybox)
}

// -------------------------------------------------------------------

// QueryLotteryInfo

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
inline bool QueryLotteryInfo::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryLotteryInfo::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryLotteryInfo::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryLotteryInfo::clear_cmd() {
  cmd_ = 6;
  clear_has_cmd();
}
inline ::Cmd::Command QueryLotteryInfo::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryLotteryInfo.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void QueryLotteryInfo::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryLotteryInfo.cmd)
}

// optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_QUERY_LOTTERYINFO];
inline bool QueryLotteryInfo::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryLotteryInfo::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryLotteryInfo::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryLotteryInfo::clear_param() {
  param_ = 34;
  clear_has_param();
}
inline ::Cmd::ItemParam QueryLotteryInfo::param() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryLotteryInfo.param)
  return static_cast< ::Cmd::ItemParam >(param_);
}
inline void QueryLotteryInfo::set_param(::Cmd::ItemParam value) {
  assert(::Cmd::ItemParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryLotteryInfo.param)
}

// repeated .Cmd.LotteryInfo infos = 3;
inline int QueryLotteryInfo::infos_size() const {
  return infos_.size();
}
inline void QueryLotteryInfo::clear_infos() {
  infos_.Clear();
}
inline const ::Cmd::LotteryInfo& QueryLotteryInfo::infos(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.QueryLotteryInfo.infos)
  return infos_.Get(index);
}
inline ::Cmd::LotteryInfo* QueryLotteryInfo::mutable_infos(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.QueryLotteryInfo.infos)
  return infos_.Mutable(index);
}
inline ::Cmd::LotteryInfo* QueryLotteryInfo::add_infos() {
  // @@protoc_insertion_point(field_add:Cmd.QueryLotteryInfo.infos)
  return infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::LotteryInfo >&
QueryLotteryInfo::infos() const {
  // @@protoc_insertion_point(field_list:Cmd.QueryLotteryInfo.infos)
  return infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::LotteryInfo >*
QueryLotteryInfo::mutable_infos() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.QueryLotteryInfo.infos)
  return &infos_;
}

// optional .Cmd.ELotteryType type = 4;
inline bool QueryLotteryInfo::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QueryLotteryInfo::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QueryLotteryInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QueryLotteryInfo::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Cmd::ELotteryType QueryLotteryInfo::type() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryLotteryInfo.type)
  return static_cast< ::Cmd::ELotteryType >(type_);
}
inline void QueryLotteryInfo::set_type(::Cmd::ELotteryType value) {
  assert(::Cmd::ELotteryType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryLotteryInfo.type)
}

// optional uint32 today_cnt = 5;
inline bool QueryLotteryInfo::has_today_cnt() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void QueryLotteryInfo::set_has_today_cnt() {
  _has_bits_[0] |= 0x00000010u;
}
inline void QueryLotteryInfo::clear_has_today_cnt() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void QueryLotteryInfo::clear_today_cnt() {
  today_cnt_ = 0u;
  clear_has_today_cnt();
}
inline ::google::protobuf::uint32 QueryLotteryInfo::today_cnt() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryLotteryInfo.today_cnt)
  return today_cnt_;
}
inline void QueryLotteryInfo::set_today_cnt(::google::protobuf::uint32 value) {
  set_has_today_cnt();
  today_cnt_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryLotteryInfo.today_cnt)
}

// optional uint32 max_cnt = 6;
inline bool QueryLotteryInfo::has_max_cnt() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void QueryLotteryInfo::set_has_max_cnt() {
  _has_bits_[0] |= 0x00000020u;
}
inline void QueryLotteryInfo::clear_has_max_cnt() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void QueryLotteryInfo::clear_max_cnt() {
  max_cnt_ = 0u;
  clear_has_max_cnt();
}
inline ::google::protobuf::uint32 QueryLotteryInfo::max_cnt() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryLotteryInfo.max_cnt)
  return max_cnt_;
}
inline void QueryLotteryInfo::set_max_cnt(::google::protobuf::uint32 value) {
  set_has_max_cnt();
  max_cnt_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryLotteryInfo.max_cnt)
}

// -------------------------------------------------------------------

// QuotaLog

// optional uint64 value = 1;
inline bool QuotaLog::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QuotaLog::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QuotaLog::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QuotaLog::clear_value() {
  value_ = GOOGLE_ULONGLONG(0);
  clear_has_value();
}
inline ::google::protobuf::uint64 QuotaLog::value() const {
  // @@protoc_insertion_point(field_get:Cmd.QuotaLog.value)
  return value_;
}
inline void QuotaLog::set_value(::google::protobuf::uint64 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuotaLog.value)
}

// optional .Cmd.EQuotaType type = 2;
inline bool QuotaLog::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QuotaLog::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QuotaLog::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QuotaLog::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::Cmd::EQuotaType QuotaLog::type() const {
  // @@protoc_insertion_point(field_get:Cmd.QuotaLog.type)
  return static_cast< ::Cmd::EQuotaType >(type_);
}
inline void QuotaLog::set_type(::Cmd::EQuotaType value) {
  assert(::Cmd::EQuotaType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuotaLog.type)
}

// optional uint32 time = 3;
inline bool QuotaLog::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QuotaLog::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QuotaLog::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QuotaLog::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 QuotaLog::time() const {
  // @@protoc_insertion_point(field_get:Cmd.QuotaLog.time)
  return time_;
}
inline void QuotaLog::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuotaLog.time)
}

// -------------------------------------------------------------------

// QuotaDetail

// optional uint64 value = 1;
inline bool QuotaDetail::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QuotaDetail::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QuotaDetail::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QuotaDetail::clear_value() {
  value_ = GOOGLE_ULONGLONG(0);
  clear_has_value();
}
inline ::google::protobuf::uint64 QuotaDetail::value() const {
  // @@protoc_insertion_point(field_get:Cmd.QuotaDetail.value)
  return value_;
}
inline void QuotaDetail::set_value(::google::protobuf::uint64 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuotaDetail.value)
}

// optional uint64 left = 2;
inline bool QuotaDetail::has_left() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QuotaDetail::set_has_left() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QuotaDetail::clear_has_left() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QuotaDetail::clear_left() {
  left_ = GOOGLE_ULONGLONG(0);
  clear_has_left();
}
inline ::google::protobuf::uint64 QuotaDetail::left() const {
  // @@protoc_insertion_point(field_get:Cmd.QuotaDetail.left)
  return left_;
}
inline void QuotaDetail::set_left(::google::protobuf::uint64 value) {
  set_has_left();
  left_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuotaDetail.left)
}

// optional uint32 expire_time = 3;
inline bool QuotaDetail::has_expire_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QuotaDetail::set_has_expire_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QuotaDetail::clear_has_expire_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QuotaDetail::clear_expire_time() {
  expire_time_ = 0u;
  clear_has_expire_time();
}
inline ::google::protobuf::uint32 QuotaDetail::expire_time() const {
  // @@protoc_insertion_point(field_get:Cmd.QuotaDetail.expire_time)
  return expire_time_;
}
inline void QuotaDetail::set_expire_time(::google::protobuf::uint32 value) {
  set_has_expire_time();
  expire_time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuotaDetail.expire_time)
}

// optional uint32 time = 4;
inline bool QuotaDetail::has_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QuotaDetail::set_has_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QuotaDetail::clear_has_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QuotaDetail::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 QuotaDetail::time() const {
  // @@protoc_insertion_point(field_get:Cmd.QuotaDetail.time)
  return time_;
}
inline void QuotaDetail::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuotaDetail.time)
}

// -------------------------------------------------------------------

// ReqQuotaLogCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
inline bool ReqQuotaLogCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqQuotaLogCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqQuotaLogCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqQuotaLogCmd::clear_cmd() {
  cmd_ = 6;
  clear_has_cmd();
}
inline ::Cmd::Command ReqQuotaLogCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqQuotaLogCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ReqQuotaLogCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReqQuotaLogCmd.cmd)
}

// optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_REQ_QUOTA_LOG];
inline bool ReqQuotaLogCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqQuotaLogCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqQuotaLogCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqQuotaLogCmd::clear_param() {
  param_ = 40;
  clear_has_param();
}
inline ::Cmd::ItemParam ReqQuotaLogCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqQuotaLogCmd.param)
  return static_cast< ::Cmd::ItemParam >(param_);
}
inline void ReqQuotaLogCmd::set_param(::Cmd::ItemParam value) {
  assert(::Cmd::ItemParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReqQuotaLogCmd.param)
}

// optional uint32 page_index = 3;
inline bool ReqQuotaLogCmd::has_page_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqQuotaLogCmd::set_has_page_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqQuotaLogCmd::clear_has_page_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqQuotaLogCmd::clear_page_index() {
  page_index_ = 0u;
  clear_has_page_index();
}
inline ::google::protobuf::uint32 ReqQuotaLogCmd::page_index() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqQuotaLogCmd.page_index)
  return page_index_;
}
inline void ReqQuotaLogCmd::set_page_index(::google::protobuf::uint32 value) {
  set_has_page_index();
  page_index_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReqQuotaLogCmd.page_index)
}

// repeated .Cmd.QuotaLog log = 4;
inline int ReqQuotaLogCmd::log_size() const {
  return log_.size();
}
inline void ReqQuotaLogCmd::clear_log() {
  log_.Clear();
}
inline const ::Cmd::QuotaLog& ReqQuotaLogCmd::log(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.ReqQuotaLogCmd.log)
  return log_.Get(index);
}
inline ::Cmd::QuotaLog* ReqQuotaLogCmd::mutable_log(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.ReqQuotaLogCmd.log)
  return log_.Mutable(index);
}
inline ::Cmd::QuotaLog* ReqQuotaLogCmd::add_log() {
  // @@protoc_insertion_point(field_add:Cmd.ReqQuotaLogCmd.log)
  return log_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::QuotaLog >&
ReqQuotaLogCmd::log() const {
  // @@protoc_insertion_point(field_list:Cmd.ReqQuotaLogCmd.log)
  return log_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::QuotaLog >*
ReqQuotaLogCmd::mutable_log() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.ReqQuotaLogCmd.log)
  return &log_;
}

// -------------------------------------------------------------------

// ReqQuotaDetailCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
inline bool ReqQuotaDetailCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqQuotaDetailCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqQuotaDetailCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqQuotaDetailCmd::clear_cmd() {
  cmd_ = 6;
  clear_has_cmd();
}
inline ::Cmd::Command ReqQuotaDetailCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqQuotaDetailCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ReqQuotaDetailCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReqQuotaDetailCmd.cmd)
}

// optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_REQ_QUOTA_DETAIL];
inline bool ReqQuotaDetailCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqQuotaDetailCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqQuotaDetailCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqQuotaDetailCmd::clear_param() {
  param_ = 41;
  clear_has_param();
}
inline ::Cmd::ItemParam ReqQuotaDetailCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqQuotaDetailCmd.param)
  return static_cast< ::Cmd::ItemParam >(param_);
}
inline void ReqQuotaDetailCmd::set_param(::Cmd::ItemParam value) {
  assert(::Cmd::ItemParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReqQuotaDetailCmd.param)
}

// optional uint32 page_index = 3;
inline bool ReqQuotaDetailCmd::has_page_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqQuotaDetailCmd::set_has_page_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqQuotaDetailCmd::clear_has_page_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqQuotaDetailCmd::clear_page_index() {
  page_index_ = 0u;
  clear_has_page_index();
}
inline ::google::protobuf::uint32 ReqQuotaDetailCmd::page_index() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqQuotaDetailCmd.page_index)
  return page_index_;
}
inline void ReqQuotaDetailCmd::set_page_index(::google::protobuf::uint32 value) {
  set_has_page_index();
  page_index_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReqQuotaDetailCmd.page_index)
}

// repeated .Cmd.QuotaDetail detail = 4;
inline int ReqQuotaDetailCmd::detail_size() const {
  return detail_.size();
}
inline void ReqQuotaDetailCmd::clear_detail() {
  detail_.Clear();
}
inline const ::Cmd::QuotaDetail& ReqQuotaDetailCmd::detail(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.ReqQuotaDetailCmd.detail)
  return detail_.Get(index);
}
inline ::Cmd::QuotaDetail* ReqQuotaDetailCmd::mutable_detail(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.ReqQuotaDetailCmd.detail)
  return detail_.Mutable(index);
}
inline ::Cmd::QuotaDetail* ReqQuotaDetailCmd::add_detail() {
  // @@protoc_insertion_point(field_add:Cmd.ReqQuotaDetailCmd.detail)
  return detail_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::QuotaDetail >&
ReqQuotaDetailCmd::detail() const {
  // @@protoc_insertion_point(field_list:Cmd.ReqQuotaDetailCmd.detail)
  return detail_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::QuotaDetail >*
ReqQuotaDetailCmd::mutable_detail() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.ReqQuotaDetailCmd.detail)
  return &detail_;
}

// -------------------------------------------------------------------

// EquipPosData

// optional .Cmd.EEquipPos pos = 1 [default = EEQUIPPOS_MIN];
inline bool EquipPosData::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipPosData::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipPosData::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipPosData::clear_pos() {
  pos_ = 0;
  clear_has_pos();
}
inline ::Cmd::EEquipPos EquipPosData::pos() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipPosData.pos)
  return static_cast< ::Cmd::EEquipPos >(pos_);
}
inline void EquipPosData::set_pos(::Cmd::EEquipPos value) {
  assert(::Cmd::EEquipPos_IsValid(value));
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipPosData.pos)
}

// optional uint32 offstarttime = 2 [default = 0];
inline bool EquipPosData::has_offstarttime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EquipPosData::set_has_offstarttime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EquipPosData::clear_has_offstarttime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EquipPosData::clear_offstarttime() {
  offstarttime_ = 0u;
  clear_has_offstarttime();
}
inline ::google::protobuf::uint32 EquipPosData::offstarttime() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipPosData.offstarttime)
  return offstarttime_;
}
inline void EquipPosData::set_offstarttime(::google::protobuf::uint32 value) {
  set_has_offstarttime();
  offstarttime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipPosData.offstarttime)
}

// optional uint32 offendtime = 3 [default = 0];
inline bool EquipPosData::has_offendtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EquipPosData::set_has_offendtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EquipPosData::clear_has_offendtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EquipPosData::clear_offendtime() {
  offendtime_ = 0u;
  clear_has_offendtime();
}
inline ::google::protobuf::uint32 EquipPosData::offendtime() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipPosData.offendtime)
  return offendtime_;
}
inline void EquipPosData::set_offendtime(::google::protobuf::uint32 value) {
  set_has_offendtime();
  offendtime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipPosData.offendtime)
}

// optional uint32 protecttime = 4 [default = 0];
inline bool EquipPosData::has_protecttime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EquipPosData::set_has_protecttime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EquipPosData::clear_has_protecttime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EquipPosData::clear_protecttime() {
  protecttime_ = 0u;
  clear_has_protecttime();
}
inline ::google::protobuf::uint32 EquipPosData::protecttime() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipPosData.protecttime)
  return protecttime_;
}
inline void EquipPosData::set_protecttime(::google::protobuf::uint32 value) {
  set_has_protecttime();
  protecttime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipPosData.protecttime)
}

// optional uint32 protectalways = 5 [default = 0];
inline bool EquipPosData::has_protectalways() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EquipPosData::set_has_protectalways() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EquipPosData::clear_has_protectalways() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EquipPosData::clear_protectalways() {
  protectalways_ = 0u;
  clear_has_protectalways();
}
inline ::google::protobuf::uint32 EquipPosData::protectalways() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipPosData.protectalways)
  return protectalways_;
}
inline void EquipPosData::set_protectalways(::google::protobuf::uint32 value) {
  set_has_protectalways();
  protectalways_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipPosData.protectalways)
}

// optional string recordguid = 6;
inline bool EquipPosData::has_recordguid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void EquipPosData::set_has_recordguid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void EquipPosData::clear_has_recordguid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void EquipPosData::clear_recordguid() {
  if (recordguid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    recordguid_->clear();
  }
  clear_has_recordguid();
}
inline const ::std::string& EquipPosData::recordguid() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipPosData.recordguid)
  return *recordguid_;
}
inline void EquipPosData::set_recordguid(const ::std::string& value) {
  set_has_recordguid();
  if (recordguid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    recordguid_ = new ::std::string;
  }
  recordguid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.EquipPosData.recordguid)
}
inline void EquipPosData::set_recordguid(const char* value) {
  set_has_recordguid();
  if (recordguid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    recordguid_ = new ::std::string;
  }
  recordguid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.EquipPosData.recordguid)
}
inline void EquipPosData::set_recordguid(const char* value, size_t size) {
  set_has_recordguid();
  if (recordguid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    recordguid_ = new ::std::string;
  }
  recordguid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.EquipPosData.recordguid)
}
inline ::std::string* EquipPosData::mutable_recordguid() {
  set_has_recordguid();
  if (recordguid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    recordguid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.EquipPosData.recordguid)
  return recordguid_;
}
inline ::std::string* EquipPosData::release_recordguid() {
  clear_has_recordguid();
  if (recordguid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = recordguid_;
    recordguid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EquipPosData::set_allocated_recordguid(::std::string* recordguid) {
  if (recordguid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete recordguid_;
  }
  if (recordguid) {
    set_has_recordguid();
    recordguid_ = recordguid;
  } else {
    clear_has_recordguid();
    recordguid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.EquipPosData.recordguid)
}

// -------------------------------------------------------------------

// EquipPosDataUpdate

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
inline bool EquipPosDataUpdate::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipPosDataUpdate::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipPosDataUpdate::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipPosDataUpdate::clear_cmd() {
  cmd_ = 6;
  clear_has_cmd();
}
inline ::Cmd::Command EquipPosDataUpdate::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipPosDataUpdate.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void EquipPosDataUpdate::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipPosDataUpdate.cmd)
}

// optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_EQUIPPOSDATA_UPDATE];
inline bool EquipPosDataUpdate::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EquipPosDataUpdate::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EquipPosDataUpdate::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EquipPosDataUpdate::clear_param() {
  param_ = 42;
  clear_has_param();
}
inline ::Cmd::ItemParam EquipPosDataUpdate::param() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipPosDataUpdate.param)
  return static_cast< ::Cmd::ItemParam >(param_);
}
inline void EquipPosDataUpdate::set_param(::Cmd::ItemParam value) {
  assert(::Cmd::ItemParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipPosDataUpdate.param)
}

// repeated .Cmd.EquipPosData datas = 3;
inline int EquipPosDataUpdate::datas_size() const {
  return datas_.size();
}
inline void EquipPosDataUpdate::clear_datas() {
  datas_.Clear();
}
inline const ::Cmd::EquipPosData& EquipPosDataUpdate::datas(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.EquipPosDataUpdate.datas)
  return datas_.Get(index);
}
inline ::Cmd::EquipPosData* EquipPosDataUpdate::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.EquipPosDataUpdate.datas)
  return datas_.Mutable(index);
}
inline ::Cmd::EquipPosData* EquipPosDataUpdate::add_datas() {
  // @@protoc_insertion_point(field_add:Cmd.EquipPosDataUpdate.datas)
  return datas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::EquipPosData >&
EquipPosDataUpdate::datas() const {
  // @@protoc_insertion_point(field_list:Cmd.EquipPosDataUpdate.datas)
  return datas_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::EquipPosData >*
EquipPosDataUpdate::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.EquipPosDataUpdate.datas)
  return &datas_;
}

// -------------------------------------------------------------------

// MatItemInfo

// optional uint32 itemid = 1;
inline bool MatItemInfo::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MatItemInfo::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MatItemInfo::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MatItemInfo::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 MatItemInfo::itemid() const {
  // @@protoc_insertion_point(field_get:Cmd.MatItemInfo.itemid)
  return itemid_;
}
inline void MatItemInfo::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MatItemInfo.itemid)
}

// optional uint32 num = 2;
inline bool MatItemInfo::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MatItemInfo::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MatItemInfo::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MatItemInfo::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 MatItemInfo::num() const {
  // @@protoc_insertion_point(field_get:Cmd.MatItemInfo.num)
  return num_;
}
inline void MatItemInfo::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MatItemInfo.num)
}

// -------------------------------------------------------------------

// HighRefineMatComposeCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
inline bool HighRefineMatComposeCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HighRefineMatComposeCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HighRefineMatComposeCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HighRefineMatComposeCmd::clear_cmd() {
  cmd_ = 6;
  clear_has_cmd();
}
inline ::Cmd::Command HighRefineMatComposeCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.HighRefineMatComposeCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void HighRefineMatComposeCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.HighRefineMatComposeCmd.cmd)
}

// optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_HIGHREFINE_MATCOMPOSE];
inline bool HighRefineMatComposeCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HighRefineMatComposeCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HighRefineMatComposeCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HighRefineMatComposeCmd::clear_param() {
  param_ = 36;
  clear_has_param();
}
inline ::Cmd::ItemParam HighRefineMatComposeCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.HighRefineMatComposeCmd.param)
  return static_cast< ::Cmd::ItemParam >(param_);
}
inline void HighRefineMatComposeCmd::set_param(::Cmd::ItemParam value) {
  assert(::Cmd::ItemParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.HighRefineMatComposeCmd.param)
}

// optional uint32 dataid = 3;
inline bool HighRefineMatComposeCmd::has_dataid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HighRefineMatComposeCmd::set_has_dataid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HighRefineMatComposeCmd::clear_has_dataid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HighRefineMatComposeCmd::clear_dataid() {
  dataid_ = 0u;
  clear_has_dataid();
}
inline ::google::protobuf::uint32 HighRefineMatComposeCmd::dataid() const {
  // @@protoc_insertion_point(field_get:Cmd.HighRefineMatComposeCmd.dataid)
  return dataid_;
}
inline void HighRefineMatComposeCmd::set_dataid(::google::protobuf::uint32 value) {
  set_has_dataid();
  dataid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.HighRefineMatComposeCmd.dataid)
}

// optional uint64 npcid = 4;
inline bool HighRefineMatComposeCmd::has_npcid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HighRefineMatComposeCmd::set_has_npcid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HighRefineMatComposeCmd::clear_has_npcid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HighRefineMatComposeCmd::clear_npcid() {
  npcid_ = GOOGLE_ULONGLONG(0);
  clear_has_npcid();
}
inline ::google::protobuf::uint64 HighRefineMatComposeCmd::npcid() const {
  // @@protoc_insertion_point(field_get:Cmd.HighRefineMatComposeCmd.npcid)
  return npcid_;
}
inline void HighRefineMatComposeCmd::set_npcid(::google::protobuf::uint64 value) {
  set_has_npcid();
  npcid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.HighRefineMatComposeCmd.npcid)
}

// repeated .Cmd.MatItemInfo mainmaterial = 5;
inline int HighRefineMatComposeCmd::mainmaterial_size() const {
  return mainmaterial_.size();
}
inline void HighRefineMatComposeCmd::clear_mainmaterial() {
  mainmaterial_.Clear();
}
inline const ::Cmd::MatItemInfo& HighRefineMatComposeCmd::mainmaterial(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.HighRefineMatComposeCmd.mainmaterial)
  return mainmaterial_.Get(index);
}
inline ::Cmd::MatItemInfo* HighRefineMatComposeCmd::mutable_mainmaterial(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.HighRefineMatComposeCmd.mainmaterial)
  return mainmaterial_.Mutable(index);
}
inline ::Cmd::MatItemInfo* HighRefineMatComposeCmd::add_mainmaterial() {
  // @@protoc_insertion_point(field_add:Cmd.HighRefineMatComposeCmd.mainmaterial)
  return mainmaterial_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::MatItemInfo >&
HighRefineMatComposeCmd::mainmaterial() const {
  // @@protoc_insertion_point(field_list:Cmd.HighRefineMatComposeCmd.mainmaterial)
  return mainmaterial_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::MatItemInfo >*
HighRefineMatComposeCmd::mutable_mainmaterial() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.HighRefineMatComposeCmd.mainmaterial)
  return &mainmaterial_;
}

// repeated .Cmd.MatItemInfo vicematerial = 6;
inline int HighRefineMatComposeCmd::vicematerial_size() const {
  return vicematerial_.size();
}
inline void HighRefineMatComposeCmd::clear_vicematerial() {
  vicematerial_.Clear();
}
inline const ::Cmd::MatItemInfo& HighRefineMatComposeCmd::vicematerial(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.HighRefineMatComposeCmd.vicematerial)
  return vicematerial_.Get(index);
}
inline ::Cmd::MatItemInfo* HighRefineMatComposeCmd::mutable_vicematerial(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.HighRefineMatComposeCmd.vicematerial)
  return vicematerial_.Mutable(index);
}
inline ::Cmd::MatItemInfo* HighRefineMatComposeCmd::add_vicematerial() {
  // @@protoc_insertion_point(field_add:Cmd.HighRefineMatComposeCmd.vicematerial)
  return vicematerial_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::MatItemInfo >&
HighRefineMatComposeCmd::vicematerial() const {
  // @@protoc_insertion_point(field_list:Cmd.HighRefineMatComposeCmd.vicematerial)
  return vicematerial_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::MatItemInfo >*
HighRefineMatComposeCmd::mutable_vicematerial() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.HighRefineMatComposeCmd.vicematerial)
  return &vicematerial_;
}

// -------------------------------------------------------------------

// HighRefineCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
inline bool HighRefineCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HighRefineCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HighRefineCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HighRefineCmd::clear_cmd() {
  cmd_ = 6;
  clear_has_cmd();
}
inline ::Cmd::Command HighRefineCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.HighRefineCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void HighRefineCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.HighRefineCmd.cmd)
}

// optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_HIGHREFINE];
inline bool HighRefineCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HighRefineCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HighRefineCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HighRefineCmd::clear_param() {
  param_ = 37;
  clear_has_param();
}
inline ::Cmd::ItemParam HighRefineCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.HighRefineCmd.param)
  return static_cast< ::Cmd::ItemParam >(param_);
}
inline void HighRefineCmd::set_param(::Cmd::ItemParam value) {
  assert(::Cmd::ItemParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.HighRefineCmd.param)
}

// optional uint32 dataid = 3;
inline bool HighRefineCmd::has_dataid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HighRefineCmd::set_has_dataid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HighRefineCmd::clear_has_dataid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HighRefineCmd::clear_dataid() {
  dataid_ = 0u;
  clear_has_dataid();
}
inline ::google::protobuf::uint32 HighRefineCmd::dataid() const {
  // @@protoc_insertion_point(field_get:Cmd.HighRefineCmd.dataid)
  return dataid_;
}
inline void HighRefineCmd::set_dataid(::google::protobuf::uint32 value) {
  set_has_dataid();
  dataid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.HighRefineCmd.dataid)
}

// -------------------------------------------------------------------

// HighRefineData

// optional .Cmd.EEquipPos pos = 1;
inline bool HighRefineData::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HighRefineData::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HighRefineData::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HighRefineData::clear_pos() {
  pos_ = 0;
  clear_has_pos();
}
inline ::Cmd::EEquipPos HighRefineData::pos() const {
  // @@protoc_insertion_point(field_get:Cmd.HighRefineData.pos)
  return static_cast< ::Cmd::EEquipPos >(pos_);
}
inline void HighRefineData::set_pos(::Cmd::EEquipPos value) {
  assert(::Cmd::EEquipPos_IsValid(value));
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:Cmd.HighRefineData.pos)
}

// repeated uint32 level = 2;
inline int HighRefineData::level_size() const {
  return level_.size();
}
inline void HighRefineData::clear_level() {
  level_.Clear();
}
inline ::google::protobuf::uint32 HighRefineData::level(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.HighRefineData.level)
  return level_.Get(index);
}
inline void HighRefineData::set_level(int index, ::google::protobuf::uint32 value) {
  level_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.HighRefineData.level)
}
inline void HighRefineData::add_level(::google::protobuf::uint32 value) {
  level_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.HighRefineData.level)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
HighRefineData::level() const {
  // @@protoc_insertion_point(field_list:Cmd.HighRefineData.level)
  return level_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
HighRefineData::mutable_level() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.HighRefineData.level)
  return &level_;
}

// -------------------------------------------------------------------

// NtfHighRefineDataCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
inline bool NtfHighRefineDataCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NtfHighRefineDataCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NtfHighRefineDataCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NtfHighRefineDataCmd::clear_cmd() {
  cmd_ = 6;
  clear_has_cmd();
}
inline ::Cmd::Command NtfHighRefineDataCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfHighRefineDataCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void NtfHighRefineDataCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfHighRefineDataCmd.cmd)
}

// optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_NTF_HIGHTREFINE_DATA];
inline bool NtfHighRefineDataCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NtfHighRefineDataCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NtfHighRefineDataCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NtfHighRefineDataCmd::clear_param() {
  param_ = 38;
  clear_has_param();
}
inline ::Cmd::ItemParam NtfHighRefineDataCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfHighRefineDataCmd.param)
  return static_cast< ::Cmd::ItemParam >(param_);
}
inline void NtfHighRefineDataCmd::set_param(::Cmd::ItemParam value) {
  assert(::Cmd::ItemParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfHighRefineDataCmd.param)
}

// repeated .Cmd.HighRefineData datas = 3;
inline int NtfHighRefineDataCmd::datas_size() const {
  return datas_.size();
}
inline void NtfHighRefineDataCmd::clear_datas() {
  datas_.Clear();
}
inline const ::Cmd::HighRefineData& NtfHighRefineDataCmd::datas(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.NtfHighRefineDataCmd.datas)
  return datas_.Get(index);
}
inline ::Cmd::HighRefineData* NtfHighRefineDataCmd::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.NtfHighRefineDataCmd.datas)
  return datas_.Mutable(index);
}
inline ::Cmd::HighRefineData* NtfHighRefineDataCmd::add_datas() {
  // @@protoc_insertion_point(field_add:Cmd.NtfHighRefineDataCmd.datas)
  return datas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::HighRefineData >&
NtfHighRefineDataCmd::datas() const {
  // @@protoc_insertion_point(field_list:Cmd.NtfHighRefineDataCmd.datas)
  return datas_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::HighRefineData >*
NtfHighRefineDataCmd::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.NtfHighRefineDataCmd.datas)
  return &datas_;
}

// -------------------------------------------------------------------

// UpdateHighRefineDataCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
inline bool UpdateHighRefineDataCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateHighRefineDataCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateHighRefineDataCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateHighRefineDataCmd::clear_cmd() {
  cmd_ = 6;
  clear_has_cmd();
}
inline ::Cmd::Command UpdateHighRefineDataCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.UpdateHighRefineDataCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void UpdateHighRefineDataCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UpdateHighRefineDataCmd.cmd)
}

// optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_UPDATE_HIGHTREFINE_DATA];
inline bool UpdateHighRefineDataCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdateHighRefineDataCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdateHighRefineDataCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdateHighRefineDataCmd::clear_param() {
  param_ = 39;
  clear_has_param();
}
inline ::Cmd::ItemParam UpdateHighRefineDataCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.UpdateHighRefineDataCmd.param)
  return static_cast< ::Cmd::ItemParam >(param_);
}
inline void UpdateHighRefineDataCmd::set_param(::Cmd::ItemParam value) {
  assert(::Cmd::ItemParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UpdateHighRefineDataCmd.param)
}

// optional .Cmd.HighRefineData data = 3;
inline bool UpdateHighRefineDataCmd::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UpdateHighRefineDataCmd::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UpdateHighRefineDataCmd::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UpdateHighRefineDataCmd::clear_data() {
  if (data_ != NULL) data_->::Cmd::HighRefineData::Clear();
  clear_has_data();
}
inline const ::Cmd::HighRefineData& UpdateHighRefineDataCmd::data() const {
  // @@protoc_insertion_point(field_get:Cmd.UpdateHighRefineDataCmd.data)
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::Cmd::HighRefineData* UpdateHighRefineDataCmd::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::Cmd::HighRefineData;
  // @@protoc_insertion_point(field_mutable:Cmd.UpdateHighRefineDataCmd.data)
  return data_;
}
inline ::Cmd::HighRefineData* UpdateHighRefineDataCmd::release_data() {
  clear_has_data();
  ::Cmd::HighRefineData* temp = data_;
  data_ = NULL;
  return temp;
}
inline void UpdateHighRefineDataCmd::set_allocated_data(::Cmd::HighRefineData* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.UpdateHighRefineDataCmd.data)
}

// -------------------------------------------------------------------

// UseCodItemCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
inline bool UseCodItemCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UseCodItemCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UseCodItemCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UseCodItemCmd::clear_cmd() {
  cmd_ = 6;
  clear_has_cmd();
}
inline ::Cmd::Command UseCodItemCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.UseCodItemCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void UseCodItemCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UseCodItemCmd.cmd)
}

// optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_USE_CODE_ITEM];
inline bool UseCodItemCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UseCodItemCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UseCodItemCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UseCodItemCmd::clear_param() {
  param_ = 43;
  clear_has_param();
}
inline ::Cmd::ItemParam UseCodItemCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.UseCodItemCmd.param)
  return static_cast< ::Cmd::ItemParam >(param_);
}
inline void UseCodItemCmd::set_param(::Cmd::ItemParam value) {
  assert(::Cmd::ItemParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UseCodItemCmd.param)
}

// optional string guid = 3;
inline bool UseCodItemCmd::has_guid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UseCodItemCmd::set_has_guid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UseCodItemCmd::clear_has_guid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UseCodItemCmd::clear_guid() {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_->clear();
  }
  clear_has_guid();
}
inline const ::std::string& UseCodItemCmd::guid() const {
  // @@protoc_insertion_point(field_get:Cmd.UseCodItemCmd.guid)
  return *guid_;
}
inline void UseCodItemCmd::set_guid(const ::std::string& value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.UseCodItemCmd.guid)
}
inline void UseCodItemCmd::set_guid(const char* value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.UseCodItemCmd.guid)
}
inline void UseCodItemCmd::set_guid(const char* value, size_t size) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.UseCodItemCmd.guid)
}
inline ::std::string* UseCodItemCmd::mutable_guid() {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.UseCodItemCmd.guid)
  return guid_;
}
inline ::std::string* UseCodItemCmd::release_guid() {
  clear_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = guid_;
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UseCodItemCmd::set_allocated_guid(::std::string* guid) {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guid_;
  }
  if (guid) {
    set_has_guid();
    guid_ = guid;
  } else {
    clear_has_guid();
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.UseCodItemCmd.guid)
}

// optional string code = 4;
inline bool UseCodItemCmd::has_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UseCodItemCmd::set_has_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UseCodItemCmd::clear_has_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UseCodItemCmd::clear_code() {
  if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_->clear();
  }
  clear_has_code();
}
inline const ::std::string& UseCodItemCmd::code() const {
  // @@protoc_insertion_point(field_get:Cmd.UseCodItemCmd.code)
  return *code_;
}
inline void UseCodItemCmd::set_code(const ::std::string& value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_ = new ::std::string;
  }
  code_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.UseCodItemCmd.code)
}
inline void UseCodItemCmd::set_code(const char* value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_ = new ::std::string;
  }
  code_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.UseCodItemCmd.code)
}
inline void UseCodItemCmd::set_code(const char* value, size_t size) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_ = new ::std::string;
  }
  code_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.UseCodItemCmd.code)
}
inline ::std::string* UseCodItemCmd::mutable_code() {
  set_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.UseCodItemCmd.code)
  return code_;
}
inline ::std::string* UseCodItemCmd::release_code() {
  clear_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = code_;
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UseCodItemCmd::set_allocated_code(::std::string* code) {
  if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete code_;
  }
  if (code) {
    set_has_code();
    code_ = code;
  } else {
    clear_has_code();
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.UseCodItemCmd.code)
}

// -------------------------------------------------------------------

// AddJobLevelItemCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
inline bool AddJobLevelItemCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddJobLevelItemCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddJobLevelItemCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddJobLevelItemCmd::clear_cmd() {
  cmd_ = 6;
  clear_has_cmd();
}
inline ::Cmd::Command AddJobLevelItemCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.AddJobLevelItemCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void AddJobLevelItemCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AddJobLevelItemCmd.cmd)
}

// optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_ADD_JOBLEVEL];
inline bool AddJobLevelItemCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AddJobLevelItemCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AddJobLevelItemCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AddJobLevelItemCmd::clear_param() {
  param_ = 44;
  clear_has_param();
}
inline ::Cmd::ItemParam AddJobLevelItemCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.AddJobLevelItemCmd.param)
  return static_cast< ::Cmd::ItemParam >(param_);
}
inline void AddJobLevelItemCmd::set_param(::Cmd::ItemParam value) {
  assert(::Cmd::ItemParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AddJobLevelItemCmd.param)
}

// optional uint32 item = 3 [default = 0];
inline bool AddJobLevelItemCmd::has_item() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AddJobLevelItemCmd::set_has_item() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AddJobLevelItemCmd::clear_has_item() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AddJobLevelItemCmd::clear_item() {
  item_ = 0u;
  clear_has_item();
}
inline ::google::protobuf::uint32 AddJobLevelItemCmd::item() const {
  // @@protoc_insertion_point(field_get:Cmd.AddJobLevelItemCmd.item)
  return item_;
}
inline void AddJobLevelItemCmd::set_item(::google::protobuf::uint32 value) {
  set_has_item();
  item_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AddJobLevelItemCmd.item)
}

// optional uint32 num = 4 [default = 0];
inline bool AddJobLevelItemCmd::has_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AddJobLevelItemCmd::set_has_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AddJobLevelItemCmd::clear_has_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AddJobLevelItemCmd::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 AddJobLevelItemCmd::num() const {
  // @@protoc_insertion_point(field_get:Cmd.AddJobLevelItemCmd.num)
  return num_;
}
inline void AddJobLevelItemCmd::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AddJobLevelItemCmd.num)
}

// -------------------------------------------------------------------

// LotterGivBuyCountCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
inline bool LotterGivBuyCountCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LotterGivBuyCountCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LotterGivBuyCountCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LotterGivBuyCountCmd::clear_cmd() {
  cmd_ = 6;
  clear_has_cmd();
}
inline ::Cmd::Command LotterGivBuyCountCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.LotterGivBuyCountCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void LotterGivBuyCountCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LotterGivBuyCountCmd.cmd)
}

// optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_LOTTERY_GIVE_BUY_COUNT];
inline bool LotterGivBuyCountCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LotterGivBuyCountCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LotterGivBuyCountCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LotterGivBuyCountCmd::clear_param() {
  param_ = 46;
  clear_has_param();
}
inline ::Cmd::ItemParam LotterGivBuyCountCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.LotterGivBuyCountCmd.param)
  return static_cast< ::Cmd::ItemParam >(param_);
}
inline void LotterGivBuyCountCmd::set_param(::Cmd::ItemParam value) {
  assert(::Cmd::ItemParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LotterGivBuyCountCmd.param)
}

// optional uint32 got_count = 3;
inline bool LotterGivBuyCountCmd::has_got_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LotterGivBuyCountCmd::set_has_got_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LotterGivBuyCountCmd::clear_has_got_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LotterGivBuyCountCmd::clear_got_count() {
  got_count_ = 0u;
  clear_has_got_count();
}
inline ::google::protobuf::uint32 LotterGivBuyCountCmd::got_count() const {
  // @@protoc_insertion_point(field_get:Cmd.LotterGivBuyCountCmd.got_count)
  return got_count_;
}
inline void LotterGivBuyCountCmd::set_got_count(::google::protobuf::uint32 value) {
  set_has_got_count();
  got_count_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LotterGivBuyCountCmd.got_count)
}

// optional uint32 max_count = 4;
inline bool LotterGivBuyCountCmd::has_max_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LotterGivBuyCountCmd::set_has_max_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LotterGivBuyCountCmd::clear_has_max_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LotterGivBuyCountCmd::clear_max_count() {
  max_count_ = 0u;
  clear_has_max_count();
}
inline ::google::protobuf::uint32 LotterGivBuyCountCmd::max_count() const {
  // @@protoc_insertion_point(field_get:Cmd.LotterGivBuyCountCmd.max_count)
  return max_count_;
}
inline void LotterGivBuyCountCmd::set_max_count(::google::protobuf::uint32 value) {
  set_has_max_count();
  max_count_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LotterGivBuyCountCmd.max_count)
}

// -------------------------------------------------------------------

// GiveWeddingDressCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
inline bool GiveWeddingDressCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GiveWeddingDressCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GiveWeddingDressCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GiveWeddingDressCmd::clear_cmd() {
  cmd_ = 6;
  clear_has_cmd();
}
inline ::Cmd::Command GiveWeddingDressCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.GiveWeddingDressCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void GiveWeddingDressCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GiveWeddingDressCmd.cmd)
}

// optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_GIVE_WEDDING_DRESS];
inline bool GiveWeddingDressCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GiveWeddingDressCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GiveWeddingDressCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GiveWeddingDressCmd::clear_param() {
  param_ = 47;
  clear_has_param();
}
inline ::Cmd::ItemParam GiveWeddingDressCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.GiveWeddingDressCmd.param)
  return static_cast< ::Cmd::ItemParam >(param_);
}
inline void GiveWeddingDressCmd::set_param(::Cmd::ItemParam value) {
  assert(::Cmd::ItemParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GiveWeddingDressCmd.param)
}

// optional string guid = 3;
inline bool GiveWeddingDressCmd::has_guid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GiveWeddingDressCmd::set_has_guid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GiveWeddingDressCmd::clear_has_guid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GiveWeddingDressCmd::clear_guid() {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_->clear();
  }
  clear_has_guid();
}
inline const ::std::string& GiveWeddingDressCmd::guid() const {
  // @@protoc_insertion_point(field_get:Cmd.GiveWeddingDressCmd.guid)
  return *guid_;
}
inline void GiveWeddingDressCmd::set_guid(const ::std::string& value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.GiveWeddingDressCmd.guid)
}
inline void GiveWeddingDressCmd::set_guid(const char* value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.GiveWeddingDressCmd.guid)
}
inline void GiveWeddingDressCmd::set_guid(const char* value, size_t size) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.GiveWeddingDressCmd.guid)
}
inline ::std::string* GiveWeddingDressCmd::mutable_guid() {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.GiveWeddingDressCmd.guid)
  return guid_;
}
inline ::std::string* GiveWeddingDressCmd::release_guid() {
  clear_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = guid_;
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GiveWeddingDressCmd::set_allocated_guid(::std::string* guid) {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guid_;
  }
  if (guid) {
    set_has_guid();
    guid_ = guid;
  } else {
    clear_has_guid();
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.GiveWeddingDressCmd.guid)
}

// optional string content = 6;
inline bool GiveWeddingDressCmd::has_content() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GiveWeddingDressCmd::set_has_content() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GiveWeddingDressCmd::clear_has_content() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GiveWeddingDressCmd::clear_content() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& GiveWeddingDressCmd::content() const {
  // @@protoc_insertion_point(field_get:Cmd.GiveWeddingDressCmd.content)
  return *content_;
}
inline void GiveWeddingDressCmd::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.GiveWeddingDressCmd.content)
}
inline void GiveWeddingDressCmd::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.GiveWeddingDressCmd.content)
}
inline void GiveWeddingDressCmd::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.GiveWeddingDressCmd.content)
}
inline ::std::string* GiveWeddingDressCmd::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.GiveWeddingDressCmd.content)
  return content_;
}
inline ::std::string* GiveWeddingDressCmd::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GiveWeddingDressCmd::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.GiveWeddingDressCmd.content)
}

// optional uint64 receiverid = 8;
inline bool GiveWeddingDressCmd::has_receiverid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GiveWeddingDressCmd::set_has_receiverid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GiveWeddingDressCmd::clear_has_receiverid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GiveWeddingDressCmd::clear_receiverid() {
  receiverid_ = GOOGLE_ULONGLONG(0);
  clear_has_receiverid();
}
inline ::google::protobuf::uint64 GiveWeddingDressCmd::receiverid() const {
  // @@protoc_insertion_point(field_get:Cmd.GiveWeddingDressCmd.receiverid)
  return receiverid_;
}
inline void GiveWeddingDressCmd::set_receiverid(::google::protobuf::uint64 value) {
  set_has_receiverid();
  receiverid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GiveWeddingDressCmd.receiverid)
}

// -------------------------------------------------------------------

// QuickStoreItemCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
inline bool QuickStoreItemCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QuickStoreItemCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QuickStoreItemCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QuickStoreItemCmd::clear_cmd() {
  cmd_ = 6;
  clear_has_cmd();
}
inline ::Cmd::Command QuickStoreItemCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.QuickStoreItemCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void QuickStoreItemCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuickStoreItemCmd.cmd)
}

// optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_QUICK_STOREITEM];
inline bool QuickStoreItemCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QuickStoreItemCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QuickStoreItemCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QuickStoreItemCmd::clear_param() {
  param_ = 48;
  clear_has_param();
}
inline ::Cmd::ItemParam QuickStoreItemCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.QuickStoreItemCmd.param)
  return static_cast< ::Cmd::ItemParam >(param_);
}
inline void QuickStoreItemCmd::set_param(::Cmd::ItemParam value) {
  assert(::Cmd::ItemParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuickStoreItemCmd.param)
}

// repeated .Cmd.ItemInfo items = 3;
inline int QuickStoreItemCmd::items_size() const {
  return items_.size();
}
inline void QuickStoreItemCmd::clear_items() {
  items_.Clear();
}
inline const ::Cmd::ItemInfo& QuickStoreItemCmd::items(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.QuickStoreItemCmd.items)
  return items_.Get(index);
}
inline ::Cmd::ItemInfo* QuickStoreItemCmd::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.QuickStoreItemCmd.items)
  return items_.Mutable(index);
}
inline ::Cmd::ItemInfo* QuickStoreItemCmd::add_items() {
  // @@protoc_insertion_point(field_add:Cmd.QuickStoreItemCmd.items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ItemInfo >&
QuickStoreItemCmd::items() const {
  // @@protoc_insertion_point(field_list:Cmd.QuickStoreItemCmd.items)
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::ItemInfo >*
QuickStoreItemCmd::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.QuickStoreItemCmd.items)
  return &items_;
}

// -------------------------------------------------------------------

// QuickSellItemCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
inline bool QuickSellItemCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QuickSellItemCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QuickSellItemCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QuickSellItemCmd::clear_cmd() {
  cmd_ = 6;
  clear_has_cmd();
}
inline ::Cmd::Command QuickSellItemCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.QuickSellItemCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void QuickSellItemCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuickSellItemCmd.cmd)
}

// optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_QUICK_SELLITEM];
inline bool QuickSellItemCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QuickSellItemCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QuickSellItemCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QuickSellItemCmd::clear_param() {
  param_ = 49;
  clear_has_param();
}
inline ::Cmd::ItemParam QuickSellItemCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.QuickSellItemCmd.param)
  return static_cast< ::Cmd::ItemParam >(param_);
}
inline void QuickSellItemCmd::set_param(::Cmd::ItemParam value) {
  assert(::Cmd::ItemParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuickSellItemCmd.param)
}

// repeated .Cmd.SItem items = 3;
inline int QuickSellItemCmd::items_size() const {
  return items_.size();
}
inline void QuickSellItemCmd::clear_items() {
  items_.Clear();
}
inline const ::Cmd::SItem& QuickSellItemCmd::items(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.QuickSellItemCmd.items)
  return items_.Get(index);
}
inline ::Cmd::SItem* QuickSellItemCmd::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.QuickSellItemCmd.items)
  return items_.Mutable(index);
}
inline ::Cmd::SItem* QuickSellItemCmd::add_items() {
  // @@protoc_insertion_point(field_add:Cmd.QuickSellItemCmd.items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::SItem >&
QuickSellItemCmd::items() const {
  // @@protoc_insertion_point(field_list:Cmd.QuickSellItemCmd.items)
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::SItem >*
QuickSellItemCmd::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.QuickSellItemCmd.items)
  return &items_;
}

// -------------------------------------------------------------------

// EnchantTransItemCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
inline bool EnchantTransItemCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EnchantTransItemCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EnchantTransItemCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EnchantTransItemCmd::clear_cmd() {
  cmd_ = 6;
  clear_has_cmd();
}
inline ::Cmd::Command EnchantTransItemCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.EnchantTransItemCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void EnchantTransItemCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EnchantTransItemCmd.cmd)
}

// optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_ENCHANT_TRANS];
inline bool EnchantTransItemCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EnchantTransItemCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EnchantTransItemCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EnchantTransItemCmd::clear_param() {
  param_ = 50;
  clear_has_param();
}
inline ::Cmd::ItemParam EnchantTransItemCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.EnchantTransItemCmd.param)
  return static_cast< ::Cmd::ItemParam >(param_);
}
inline void EnchantTransItemCmd::set_param(::Cmd::ItemParam value) {
  assert(::Cmd::ItemParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EnchantTransItemCmd.param)
}

// optional string from_guid = 3;
inline bool EnchantTransItemCmd::has_from_guid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EnchantTransItemCmd::set_has_from_guid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EnchantTransItemCmd::clear_has_from_guid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EnchantTransItemCmd::clear_from_guid() {
  if (from_guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    from_guid_->clear();
  }
  clear_has_from_guid();
}
inline const ::std::string& EnchantTransItemCmd::from_guid() const {
  // @@protoc_insertion_point(field_get:Cmd.EnchantTransItemCmd.from_guid)
  return *from_guid_;
}
inline void EnchantTransItemCmd::set_from_guid(const ::std::string& value) {
  set_has_from_guid();
  if (from_guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    from_guid_ = new ::std::string;
  }
  from_guid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.EnchantTransItemCmd.from_guid)
}
inline void EnchantTransItemCmd::set_from_guid(const char* value) {
  set_has_from_guid();
  if (from_guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    from_guid_ = new ::std::string;
  }
  from_guid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.EnchantTransItemCmd.from_guid)
}
inline void EnchantTransItemCmd::set_from_guid(const char* value, size_t size) {
  set_has_from_guid();
  if (from_guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    from_guid_ = new ::std::string;
  }
  from_guid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.EnchantTransItemCmd.from_guid)
}
inline ::std::string* EnchantTransItemCmd::mutable_from_guid() {
  set_has_from_guid();
  if (from_guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    from_guid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.EnchantTransItemCmd.from_guid)
  return from_guid_;
}
inline ::std::string* EnchantTransItemCmd::release_from_guid() {
  clear_has_from_guid();
  if (from_guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = from_guid_;
    from_guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EnchantTransItemCmd::set_allocated_from_guid(::std::string* from_guid) {
  if (from_guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete from_guid_;
  }
  if (from_guid) {
    set_has_from_guid();
    from_guid_ = from_guid;
  } else {
    clear_has_from_guid();
    from_guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.EnchantTransItemCmd.from_guid)
}

// optional string to_guid = 4;
inline bool EnchantTransItemCmd::has_to_guid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EnchantTransItemCmd::set_has_to_guid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EnchantTransItemCmd::clear_has_to_guid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EnchantTransItemCmd::clear_to_guid() {
  if (to_guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    to_guid_->clear();
  }
  clear_has_to_guid();
}
inline const ::std::string& EnchantTransItemCmd::to_guid() const {
  // @@protoc_insertion_point(field_get:Cmd.EnchantTransItemCmd.to_guid)
  return *to_guid_;
}
inline void EnchantTransItemCmd::set_to_guid(const ::std::string& value) {
  set_has_to_guid();
  if (to_guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    to_guid_ = new ::std::string;
  }
  to_guid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.EnchantTransItemCmd.to_guid)
}
inline void EnchantTransItemCmd::set_to_guid(const char* value) {
  set_has_to_guid();
  if (to_guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    to_guid_ = new ::std::string;
  }
  to_guid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.EnchantTransItemCmd.to_guid)
}
inline void EnchantTransItemCmd::set_to_guid(const char* value, size_t size) {
  set_has_to_guid();
  if (to_guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    to_guid_ = new ::std::string;
  }
  to_guid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.EnchantTransItemCmd.to_guid)
}
inline ::std::string* EnchantTransItemCmd::mutable_to_guid() {
  set_has_to_guid();
  if (to_guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    to_guid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.EnchantTransItemCmd.to_guid)
  return to_guid_;
}
inline ::std::string* EnchantTransItemCmd::release_to_guid() {
  clear_has_to_guid();
  if (to_guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = to_guid_;
    to_guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EnchantTransItemCmd::set_allocated_to_guid(::std::string* to_guid) {
  if (to_guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete to_guid_;
  }
  if (to_guid) {
    set_has_to_guid();
    to_guid_ = to_guid;
  } else {
    clear_has_to_guid();
    to_guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.EnchantTransItemCmd.to_guid)
}

// optional bool success = 5 [default = false];
inline bool EnchantTransItemCmd::has_success() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EnchantTransItemCmd::set_has_success() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EnchantTransItemCmd::clear_has_success() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EnchantTransItemCmd::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool EnchantTransItemCmd::success() const {
  // @@protoc_insertion_point(field_get:Cmd.EnchantTransItemCmd.success)
  return success_;
}
inline void EnchantTransItemCmd::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EnchantTransItemCmd.success)
}

// -------------------------------------------------------------------

// QueryLotteryHeadItemCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
inline bool QueryLotteryHeadItemCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryLotteryHeadItemCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryLotteryHeadItemCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryLotteryHeadItemCmd::clear_cmd() {
  cmd_ = 6;
  clear_has_cmd();
}
inline ::Cmd::Command QueryLotteryHeadItemCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryLotteryHeadItemCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void QueryLotteryHeadItemCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryLotteryHeadItemCmd.cmd)
}

// optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_QUERY_LOTTERYHEAD];
inline bool QueryLotteryHeadItemCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryLotteryHeadItemCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryLotteryHeadItemCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryLotteryHeadItemCmd::clear_param() {
  param_ = 51;
  clear_has_param();
}
inline ::Cmd::ItemParam QueryLotteryHeadItemCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryLotteryHeadItemCmd.param)
  return static_cast< ::Cmd::ItemParam >(param_);
}
inline void QueryLotteryHeadItemCmd::set_param(::Cmd::ItemParam value) {
  assert(::Cmd::ItemParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryLotteryHeadItemCmd.param)
}

// repeated uint32 ids = 3;
inline int QueryLotteryHeadItemCmd::ids_size() const {
  return ids_.size();
}
inline void QueryLotteryHeadItemCmd::clear_ids() {
  ids_.Clear();
}
inline ::google::protobuf::uint32 QueryLotteryHeadItemCmd::ids(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.QueryLotteryHeadItemCmd.ids)
  return ids_.Get(index);
}
inline void QueryLotteryHeadItemCmd::set_ids(int index, ::google::protobuf::uint32 value) {
  ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.QueryLotteryHeadItemCmd.ids)
}
inline void QueryLotteryHeadItemCmd::add_ids(::google::protobuf::uint32 value) {
  ids_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.QueryLotteryHeadItemCmd.ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
QueryLotteryHeadItemCmd::ids() const {
  // @@protoc_insertion_point(field_list:Cmd.QueryLotteryHeadItemCmd.ids)
  return ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
QueryLotteryHeadItemCmd::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.QueryLotteryHeadItemCmd.ids)
  return &ids_;
}

// -------------------------------------------------------------------

// LotteryRateInfo

// optional uint32 type = 1;
inline bool LotteryRateInfo::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LotteryRateInfo::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LotteryRateInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LotteryRateInfo::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 LotteryRateInfo::type() const {
  // @@protoc_insertion_point(field_get:Cmd.LotteryRateInfo.type)
  return type_;
}
inline void LotteryRateInfo::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LotteryRateInfo.type)
}

// optional uint32 rate = 2;
inline bool LotteryRateInfo::has_rate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LotteryRateInfo::set_has_rate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LotteryRateInfo::clear_has_rate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LotteryRateInfo::clear_rate() {
  rate_ = 0u;
  clear_has_rate();
}
inline ::google::protobuf::uint32 LotteryRateInfo::rate() const {
  // @@protoc_insertion_point(field_get:Cmd.LotteryRateInfo.rate)
  return rate_;
}
inline void LotteryRateInfo::set_rate(::google::protobuf::uint32 value) {
  set_has_rate();
  rate_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LotteryRateInfo.rate)
}

// -------------------------------------------------------------------

// LotteryRateQueryCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
inline bool LotteryRateQueryCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LotteryRateQueryCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LotteryRateQueryCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LotteryRateQueryCmd::clear_cmd() {
  cmd_ = 6;
  clear_has_cmd();
}
inline ::Cmd::Command LotteryRateQueryCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.LotteryRateQueryCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void LotteryRateQueryCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LotteryRateQueryCmd.cmd)
}

// optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_LOTTERY_RATE_QUERY];
inline bool LotteryRateQueryCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LotteryRateQueryCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LotteryRateQueryCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LotteryRateQueryCmd::clear_param() {
  param_ = 52;
  clear_has_param();
}
inline ::Cmd::ItemParam LotteryRateQueryCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.LotteryRateQueryCmd.param)
  return static_cast< ::Cmd::ItemParam >(param_);
}
inline void LotteryRateQueryCmd::set_param(::Cmd::ItemParam value) {
  assert(::Cmd::ItemParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LotteryRateQueryCmd.param)
}

// optional .Cmd.ELotteryType type = 3;
inline bool LotteryRateQueryCmd::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LotteryRateQueryCmd::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LotteryRateQueryCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LotteryRateQueryCmd::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Cmd::ELotteryType LotteryRateQueryCmd::type() const {
  // @@protoc_insertion_point(field_get:Cmd.LotteryRateQueryCmd.type)
  return static_cast< ::Cmd::ELotteryType >(type_);
}
inline void LotteryRateQueryCmd::set_type(::Cmd::ELotteryType value) {
  assert(::Cmd::ELotteryType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LotteryRateQueryCmd.type)
}

// repeated .Cmd.LotteryRateInfo infos = 4;
inline int LotteryRateQueryCmd::infos_size() const {
  return infos_.size();
}
inline void LotteryRateQueryCmd::clear_infos() {
  infos_.Clear();
}
inline const ::Cmd::LotteryRateInfo& LotteryRateQueryCmd::infos(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.LotteryRateQueryCmd.infos)
  return infos_.Get(index);
}
inline ::Cmd::LotteryRateInfo* LotteryRateQueryCmd::mutable_infos(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.LotteryRateQueryCmd.infos)
  return infos_.Mutable(index);
}
inline ::Cmd::LotteryRateInfo* LotteryRateQueryCmd::add_infos() {
  // @@protoc_insertion_point(field_add:Cmd.LotteryRateQueryCmd.infos)
  return infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::LotteryRateInfo >&
LotteryRateQueryCmd::infos() const {
  // @@protoc_insertion_point(field_list:Cmd.LotteryRateQueryCmd.infos)
  return infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::LotteryRateInfo >*
LotteryRateQueryCmd::mutable_infos() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.LotteryRateQueryCmd.infos)
  return &infos_;
}

// -------------------------------------------------------------------

// EquipComposeItemCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_ITEM_PROTOCMD];
inline bool EquipComposeItemCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipComposeItemCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipComposeItemCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipComposeItemCmd::clear_cmd() {
  cmd_ = 6;
  clear_has_cmd();
}
inline ::Cmd::Command EquipComposeItemCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipComposeItemCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void EquipComposeItemCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipComposeItemCmd.cmd)
}

// optional .Cmd.ItemParam param = 2 [default = ITEMPARAM_EQUIPCOMPOSE];
inline bool EquipComposeItemCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EquipComposeItemCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EquipComposeItemCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EquipComposeItemCmd::clear_param() {
  param_ = 53;
  clear_has_param();
}
inline ::Cmd::ItemParam EquipComposeItemCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipComposeItemCmd.param)
  return static_cast< ::Cmd::ItemParam >(param_);
}
inline void EquipComposeItemCmd::set_param(::Cmd::ItemParam value) {
  assert(::Cmd::ItemParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipComposeItemCmd.param)
}

// optional uint32 id = 3 [default = 0];
inline bool EquipComposeItemCmd::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EquipComposeItemCmd::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EquipComposeItemCmd::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EquipComposeItemCmd::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 EquipComposeItemCmd::id() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipComposeItemCmd.id)
  return id_;
}
inline void EquipComposeItemCmd::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipComposeItemCmd.id)
}

// repeated string materialequips = 4;
inline int EquipComposeItemCmd::materialequips_size() const {
  return materialequips_.size();
}
inline void EquipComposeItemCmd::clear_materialequips() {
  materialequips_.Clear();
}
inline const ::std::string& EquipComposeItemCmd::materialequips(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.EquipComposeItemCmd.materialequips)
  return materialequips_.Get(index);
}
inline ::std::string* EquipComposeItemCmd::mutable_materialequips(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.EquipComposeItemCmd.materialequips)
  return materialequips_.Mutable(index);
}
inline void EquipComposeItemCmd::set_materialequips(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Cmd.EquipComposeItemCmd.materialequips)
  materialequips_.Mutable(index)->assign(value);
}
inline void EquipComposeItemCmd::set_materialequips(int index, const char* value) {
  materialequips_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.EquipComposeItemCmd.materialequips)
}
inline void EquipComposeItemCmd::set_materialequips(int index, const char* value, size_t size) {
  materialequips_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.EquipComposeItemCmd.materialequips)
}
inline ::std::string* EquipComposeItemCmd::add_materialequips() {
  return materialequips_.Add();
}
inline void EquipComposeItemCmd::add_materialequips(const ::std::string& value) {
  materialequips_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Cmd.EquipComposeItemCmd.materialequips)
}
inline void EquipComposeItemCmd::add_materialequips(const char* value) {
  materialequips_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Cmd.EquipComposeItemCmd.materialequips)
}
inline void EquipComposeItemCmd::add_materialequips(const char* value, size_t size) {
  materialequips_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Cmd.EquipComposeItemCmd.materialequips)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
EquipComposeItemCmd::materialequips() const {
  // @@protoc_insertion_point(field_list:Cmd.EquipComposeItemCmd.materialequips)
  return materialequips_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
EquipComposeItemCmd::mutable_materialequips() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.EquipComposeItemCmd.materialequips)
  return &materialequips_;
}

// optional uint32 retmsg = 5 [default = 0];
inline bool EquipComposeItemCmd::has_retmsg() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EquipComposeItemCmd::set_has_retmsg() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EquipComposeItemCmd::clear_has_retmsg() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EquipComposeItemCmd::clear_retmsg() {
  retmsg_ = 0u;
  clear_has_retmsg();
}
inline ::google::protobuf::uint32 EquipComposeItemCmd::retmsg() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipComposeItemCmd.retmsg)
  return retmsg_;
}
inline void EquipComposeItemCmd::set_retmsg(::google::protobuf::uint32 value) {
  set_has_retmsg();
  retmsg_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipComposeItemCmd.retmsg)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Cmd::ItemParam> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::ItemParam>() {
  return ::Cmd::ItemParam_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EPackType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EPackType>() {
  return ::Cmd::EPackType_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EItemType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EItemType>() {
  return ::Cmd::EItemType_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EEquipType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EEquipType>() {
  return ::Cmd::EEquipType_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EBindType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EBindType>() {
  return ::Cmd::EBindType_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EExpireType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EExpireType>() {
  return ::Cmd::EExpireType_descriptor();
}
template <> struct is_proto_enum< ::Cmd::ERideType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::ERideType>() {
  return ::Cmd::ERideType_descriptor();
}
template <> struct is_proto_enum< ::Cmd::ETragetType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::ETragetType>() {
  return ::Cmd::ETragetType_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EEnchantType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EEnchantType>() {
  return ::Cmd::EEnchantType_descriptor();
}
template <> struct is_proto_enum< ::Cmd::ELetterType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::ELetterType>() {
  return ::Cmd::ELetterType_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EEquipOper> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EEquipOper>() {
  return ::Cmd::EEquipOper_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EEquipPos> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EEquipPos>() {
  return ::Cmd::EEquipPos_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EStrengthResult> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EStrengthResult>() {
  return ::Cmd::EStrengthResult_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EStrengthType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EStrengthType>() {
  return ::Cmd::EStrengthType_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EProduceType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EProduceType>() {
  return ::Cmd::EProduceType_descriptor();
}
template <> struct is_proto_enum< ::Cmd::ERefineResult> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::ERefineResult>() {
  return ::Cmd::ERefineResult_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EDecomposeResult> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EDecomposeResult>() {
  return ::Cmd::EDecomposeResult_descriptor();
}
template <> struct is_proto_enum< ::Cmd::ECardOper> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::ECardOper>() {
  return ::Cmd::ECardOper_descriptor();
}
template <> struct is_proto_enum< ::Cmd::ETradeType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::ETradeType>() {
  return ::Cmd::ETradeType_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EExchangeType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EExchangeType>() {
  return ::Cmd::EExchangeType_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EExchangeCardType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EExchangeCardType>() {
  return ::Cmd::EExchangeCardType_descriptor();
}
template <> struct is_proto_enum< ::Cmd::ELotteryType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::ELotteryType>() {
  return ::Cmd::ELotteryType_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EQuotaType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EQuotaType>() {
  return ::Cmd::EQuotaType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_SceneItem_2eproto__INCLUDED
