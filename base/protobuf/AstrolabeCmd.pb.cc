// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AstrolabeCmd.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "AstrolabeCmd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Cmd {

namespace {

const ::google::protobuf::Descriptor* AstrolabeCostData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AstrolabeCostData_reflection_ = NULL;
const ::google::protobuf::Descriptor* AstrolabeQueryCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AstrolabeQueryCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* AstrolabeActivateStarCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AstrolabeActivateStarCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* AstrolabeQueryResetCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AstrolabeQueryResetCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* AstrolabeResetCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AstrolabeResetCmd_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* AstrolabeParam_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EAstrolabeType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_AstrolabeCmd_2eproto() {
  protobuf_AddDesc_AstrolabeCmd_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "AstrolabeCmd.proto");
  GOOGLE_CHECK(file != NULL);
  AstrolabeCostData_descriptor_ = file->message_type(0);
  static const int AstrolabeCostData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AstrolabeCostData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AstrolabeCostData, count_),
  };
  AstrolabeCostData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AstrolabeCostData_descriptor_,
      AstrolabeCostData::default_instance_,
      AstrolabeCostData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AstrolabeCostData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AstrolabeCostData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AstrolabeCostData));
  AstrolabeQueryCmd_descriptor_ = file->message_type(1);
  static const int AstrolabeQueryCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AstrolabeQueryCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AstrolabeQueryCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AstrolabeQueryCmd, stars_),
  };
  AstrolabeQueryCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AstrolabeQueryCmd_descriptor_,
      AstrolabeQueryCmd::default_instance_,
      AstrolabeQueryCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AstrolabeQueryCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AstrolabeQueryCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AstrolabeQueryCmd));
  AstrolabeActivateStarCmd_descriptor_ = file->message_type(2);
  static const int AstrolabeActivateStarCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AstrolabeActivateStarCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AstrolabeActivateStarCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AstrolabeActivateStarCmd, stars_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AstrolabeActivateStarCmd, success_),
  };
  AstrolabeActivateStarCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AstrolabeActivateStarCmd_descriptor_,
      AstrolabeActivateStarCmd::default_instance_,
      AstrolabeActivateStarCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AstrolabeActivateStarCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AstrolabeActivateStarCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AstrolabeActivateStarCmd));
  AstrolabeQueryResetCmd_descriptor_ = file->message_type(3);
  static const int AstrolabeQueryResetCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AstrolabeQueryResetCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AstrolabeQueryResetCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AstrolabeQueryResetCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AstrolabeQueryResetCmd, items_),
  };
  AstrolabeQueryResetCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AstrolabeQueryResetCmd_descriptor_,
      AstrolabeQueryResetCmd::default_instance_,
      AstrolabeQueryResetCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AstrolabeQueryResetCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AstrolabeQueryResetCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AstrolabeQueryResetCmd));
  AstrolabeResetCmd_descriptor_ = file->message_type(4);
  static const int AstrolabeResetCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AstrolabeResetCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AstrolabeResetCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AstrolabeResetCmd, stars_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AstrolabeResetCmd, success_),
  };
  AstrolabeResetCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AstrolabeResetCmd_descriptor_,
      AstrolabeResetCmd::default_instance_,
      AstrolabeResetCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AstrolabeResetCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AstrolabeResetCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AstrolabeResetCmd));
  AstrolabeParam_descriptor_ = file->enum_type(0);
  EAstrolabeType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_AstrolabeCmd_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AstrolabeCostData_descriptor_, &AstrolabeCostData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AstrolabeQueryCmd_descriptor_, &AstrolabeQueryCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AstrolabeActivateStarCmd_descriptor_, &AstrolabeActivateStarCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AstrolabeQueryResetCmd_descriptor_, &AstrolabeQueryResetCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AstrolabeResetCmd_descriptor_, &AstrolabeResetCmd::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_AstrolabeCmd_2eproto() {
  delete AstrolabeCostData::default_instance_;
  delete AstrolabeCostData_reflection_;
  delete AstrolabeQueryCmd::default_instance_;
  delete AstrolabeQueryCmd_reflection_;
  delete AstrolabeActivateStarCmd::default_instance_;
  delete AstrolabeActivateStarCmd_reflection_;
  delete AstrolabeQueryResetCmd::default_instance_;
  delete AstrolabeQueryResetCmd_reflection_;
  delete AstrolabeResetCmd::default_instance_;
  delete AstrolabeResetCmd_reflection_;
}

void protobuf_AddDesc_AstrolabeCmd_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Cmd::protobuf_AddDesc_xCmd_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022AstrolabeCmd.proto\022\003Cmd\032\nxCmd.proto\"4\n"
    "\021AstrolabeCostData\022\r\n\002id\030\001 \001(\r:\0010\022\020\n\005cou"
    "nt\030\002 \001(\r:\0010\"\226\001\n\021AstrolabeQueryCmd\0228\n\003cmd"
    "\030\001 \001(\0162\014.Cmd.Command:\035SCENE_USER_ASTROLA"
    "BE_PROTOCMD\0228\n\005param\030\002 \001(\0162\023.Cmd.Astrola"
    "beParam:\024ASTROLABEPARAM_QUERY\022\r\n\005stars\030\003"
    " \003(\r\"\266\001\n\030AstrolabeActivateStarCmd\0228\n\003cmd"
    "\030\001 \001(\0162\014.Cmd.Command:\035SCENE_USER_ASTROLA"
    "BE_PROTOCMD\022@\n\005param\030\002 \001(\0162\023.Cmd.Astrola"
    "beParam:\034ASTROLABEPARAM_ACTIVATE_STAR\022\r\n"
    "\005stars\030\003 \003(\r\022\017\n\007success\030\005 \001(\010\"\334\001\n\026Astrol"
    "abeQueryResetCmd\0228\n\003cmd\030\001 \001(\0162\014.Cmd.Comm"
    "and:\035SCENE_USER_ASTROLABE_PROTOCMD\022>\n\005pa"
    "ram\030\002 \001(\0162\023.Cmd.AstrolabeParam:\032ASTROLAB"
    "EPARAM_QUERY_RESET\022!\n\004type\030\003 \001(\0162\023.Cmd.E"
    "AstrolabeType\022%\n\005items\030\004 \003(\0132\026.Cmd.Astro"
    "labeCostData\"\247\001\n\021AstrolabeResetCmd\0228\n\003cm"
    "d\030\001 \001(\0162\014.Cmd.Command:\035SCENE_USER_ASTROL"
    "ABE_PROTOCMD\0228\n\005param\030\002 \001(\0162\023.Cmd.Astrol"
    "abeParam:\024ASTROLABEPARAM_RESET\022\r\n\005stars\030"
    "\003 \003(\r\022\017\n\007success\030\004 \001(\010*\206\001\n\016AstrolabePara"
    "m\022\030\n\024ASTROLABEPARAM_QUERY\020\001\022 \n\034ASTROLABE"
    "PARAM_ACTIVATE_STAR\020\002\022\036\n\032ASTROLABEPARAM_"
    "QUERY_RESET\020\003\022\030\n\024ASTROLABEPARAM_RESET\020\004*"
    "_\n\016EAstrolabeType\022\026\n\022EASTROLABETYPE_MIN\020"
    "\000\022\035\n\031EASTROLABETYPE_PROFESSION\020\001\022\026\n\022EAST"
    "ROLABETYPE_MAX\020\002", 1056);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "AstrolabeCmd.proto", &protobuf_RegisterTypes);
  AstrolabeCostData::default_instance_ = new AstrolabeCostData();
  AstrolabeQueryCmd::default_instance_ = new AstrolabeQueryCmd();
  AstrolabeActivateStarCmd::default_instance_ = new AstrolabeActivateStarCmd();
  AstrolabeQueryResetCmd::default_instance_ = new AstrolabeQueryResetCmd();
  AstrolabeResetCmd::default_instance_ = new AstrolabeResetCmd();
  AstrolabeCostData::default_instance_->InitAsDefaultInstance();
  AstrolabeQueryCmd::default_instance_->InitAsDefaultInstance();
  AstrolabeActivateStarCmd::default_instance_->InitAsDefaultInstance();
  AstrolabeQueryResetCmd::default_instance_->InitAsDefaultInstance();
  AstrolabeResetCmd::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_AstrolabeCmd_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_AstrolabeCmd_2eproto {
  StaticDescriptorInitializer_AstrolabeCmd_2eproto() {
    protobuf_AddDesc_AstrolabeCmd_2eproto();
  }
} static_descriptor_initializer_AstrolabeCmd_2eproto_;
const ::google::protobuf::EnumDescriptor* AstrolabeParam_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AstrolabeParam_descriptor_;
}
bool AstrolabeParam_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EAstrolabeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EAstrolabeType_descriptor_;
}
bool EAstrolabeType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int AstrolabeCostData::kIdFieldNumber;
const int AstrolabeCostData::kCountFieldNumber;
#endif  // !_MSC_VER

AstrolabeCostData::AstrolabeCostData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.AstrolabeCostData)
}

void AstrolabeCostData::InitAsDefaultInstance() {
}

AstrolabeCostData::AstrolabeCostData(const AstrolabeCostData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.AstrolabeCostData)
}

void AstrolabeCostData::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AstrolabeCostData::~AstrolabeCostData() {
  // @@protoc_insertion_point(destructor:Cmd.AstrolabeCostData)
  SharedDtor();
}

void AstrolabeCostData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AstrolabeCostData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AstrolabeCostData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AstrolabeCostData_descriptor_;
}

const AstrolabeCostData& AstrolabeCostData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AstrolabeCmd_2eproto();
  return *default_instance_;
}

AstrolabeCostData* AstrolabeCostData::default_instance_ = NULL;

AstrolabeCostData* AstrolabeCostData::New() const {
  return new AstrolabeCostData;
}

void AstrolabeCostData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AstrolabeCostData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AstrolabeCostData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.AstrolabeCostData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional uint32 count = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.AstrolabeCostData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.AstrolabeCostData)
  return false;
#undef DO_
}

void AstrolabeCostData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.AstrolabeCostData)
  // optional uint32 id = 1 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 count = 2 [default = 0];
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.AstrolabeCostData)
}

::google::protobuf::uint8* AstrolabeCostData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.AstrolabeCostData)
  // optional uint32 id = 1 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 count = 2 [default = 0];
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.AstrolabeCostData)
  return target;
}

int AstrolabeCostData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 count = 2 [default = 0];
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AstrolabeCostData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AstrolabeCostData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AstrolabeCostData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AstrolabeCostData::MergeFrom(const AstrolabeCostData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AstrolabeCostData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AstrolabeCostData::CopyFrom(const AstrolabeCostData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AstrolabeCostData::IsInitialized() const {

  return true;
}

void AstrolabeCostData::Swap(AstrolabeCostData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AstrolabeCostData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AstrolabeCostData_descriptor_;
  metadata.reflection = AstrolabeCostData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AstrolabeQueryCmd::kCmdFieldNumber;
const int AstrolabeQueryCmd::kParamFieldNumber;
const int AstrolabeQueryCmd::kStarsFieldNumber;
#endif  // !_MSC_VER

AstrolabeQueryCmd::AstrolabeQueryCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.AstrolabeQueryCmd)
}

void AstrolabeQueryCmd::InitAsDefaultInstance() {
}

AstrolabeQueryCmd::AstrolabeQueryCmd(const AstrolabeQueryCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.AstrolabeQueryCmd)
}

void AstrolabeQueryCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 28;
  param_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AstrolabeQueryCmd::~AstrolabeQueryCmd() {
  // @@protoc_insertion_point(destructor:Cmd.AstrolabeQueryCmd)
  SharedDtor();
}

void AstrolabeQueryCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AstrolabeQueryCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AstrolabeQueryCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AstrolabeQueryCmd_descriptor_;
}

const AstrolabeQueryCmd& AstrolabeQueryCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AstrolabeCmd_2eproto();
  return *default_instance_;
}

AstrolabeQueryCmd* AstrolabeQueryCmd::default_instance_ = NULL;

AstrolabeQueryCmd* AstrolabeQueryCmd::New() const {
  return new AstrolabeQueryCmd;
}

void AstrolabeQueryCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 28;
    param_ = 1;
  }
  stars_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AstrolabeQueryCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.AstrolabeQueryCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ASTROLABE_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.AstrolabeParam param = 2 [default = ASTROLABEPARAM_QUERY];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::AstrolabeParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::AstrolabeParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_stars;
        break;
      }

      // repeated uint32 stars = 3;
      case 3: {
        if (tag == 24) {
         parse_stars:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_stars())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_stars())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_stars;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.AstrolabeQueryCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.AstrolabeQueryCmd)
  return false;
#undef DO_
}

void AstrolabeQueryCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.AstrolabeQueryCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ASTROLABE_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.AstrolabeParam param = 2 [default = ASTROLABEPARAM_QUERY];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated uint32 stars = 3;
  for (int i = 0; i < this->stars_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->stars(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.AstrolabeQueryCmd)
}

::google::protobuf::uint8* AstrolabeQueryCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.AstrolabeQueryCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ASTROLABE_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.AstrolabeParam param = 2 [default = ASTROLABEPARAM_QUERY];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated uint32 stars = 3;
  for (int i = 0; i < this->stars_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->stars(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.AstrolabeQueryCmd)
  return target;
}

int AstrolabeQueryCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ASTROLABE_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.AstrolabeParam param = 2 [default = ASTROLABEPARAM_QUERY];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated uint32 stars = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->stars_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->stars(i));
    }
    total_size += 1 * this->stars_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AstrolabeQueryCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AstrolabeQueryCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AstrolabeQueryCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AstrolabeQueryCmd::MergeFrom(const AstrolabeQueryCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  stars_.MergeFrom(from.stars_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AstrolabeQueryCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AstrolabeQueryCmd::CopyFrom(const AstrolabeQueryCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AstrolabeQueryCmd::IsInitialized() const {

  return true;
}

void AstrolabeQueryCmd::Swap(AstrolabeQueryCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    stars_.Swap(&other->stars_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AstrolabeQueryCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AstrolabeQueryCmd_descriptor_;
  metadata.reflection = AstrolabeQueryCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AstrolabeActivateStarCmd::kCmdFieldNumber;
const int AstrolabeActivateStarCmd::kParamFieldNumber;
const int AstrolabeActivateStarCmd::kStarsFieldNumber;
const int AstrolabeActivateStarCmd::kSuccessFieldNumber;
#endif  // !_MSC_VER

AstrolabeActivateStarCmd::AstrolabeActivateStarCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.AstrolabeActivateStarCmd)
}

void AstrolabeActivateStarCmd::InitAsDefaultInstance() {
}

AstrolabeActivateStarCmd::AstrolabeActivateStarCmd(const AstrolabeActivateStarCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.AstrolabeActivateStarCmd)
}

void AstrolabeActivateStarCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 28;
  param_ = 2;
  success_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AstrolabeActivateStarCmd::~AstrolabeActivateStarCmd() {
  // @@protoc_insertion_point(destructor:Cmd.AstrolabeActivateStarCmd)
  SharedDtor();
}

void AstrolabeActivateStarCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AstrolabeActivateStarCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AstrolabeActivateStarCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AstrolabeActivateStarCmd_descriptor_;
}

const AstrolabeActivateStarCmd& AstrolabeActivateStarCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AstrolabeCmd_2eproto();
  return *default_instance_;
}

AstrolabeActivateStarCmd* AstrolabeActivateStarCmd::default_instance_ = NULL;

AstrolabeActivateStarCmd* AstrolabeActivateStarCmd::New() const {
  return new AstrolabeActivateStarCmd;
}

void AstrolabeActivateStarCmd::Clear() {
  if (_has_bits_[0 / 32] & 11) {
    cmd_ = 28;
    param_ = 2;
    success_ = false;
  }
  stars_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AstrolabeActivateStarCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.AstrolabeActivateStarCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ASTROLABE_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.AstrolabeParam param = 2 [default = ASTROLABEPARAM_ACTIVATE_STAR];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::AstrolabeParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::AstrolabeParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_stars;
        break;
      }

      // repeated uint32 stars = 3;
      case 3: {
        if (tag == 24) {
         parse_stars:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_stars())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_stars())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_stars;
        if (input->ExpectTag(40)) goto parse_success;
        break;
      }

      // optional bool success = 5;
      case 5: {
        if (tag == 40) {
         parse_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.AstrolabeActivateStarCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.AstrolabeActivateStarCmd)
  return false;
#undef DO_
}

void AstrolabeActivateStarCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.AstrolabeActivateStarCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ASTROLABE_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.AstrolabeParam param = 2 [default = ASTROLABEPARAM_ACTIVATE_STAR];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated uint32 stars = 3;
  for (int i = 0; i < this->stars_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->stars(i), output);
  }

  // optional bool success = 5;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->success(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.AstrolabeActivateStarCmd)
}

::google::protobuf::uint8* AstrolabeActivateStarCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.AstrolabeActivateStarCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ASTROLABE_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.AstrolabeParam param = 2 [default = ASTROLABEPARAM_ACTIVATE_STAR];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated uint32 stars = 3;
  for (int i = 0; i < this->stars_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->stars(i), target);
  }

  // optional bool success = 5;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->success(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.AstrolabeActivateStarCmd)
  return target;
}

int AstrolabeActivateStarCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ASTROLABE_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.AstrolabeParam param = 2 [default = ASTROLABEPARAM_ACTIVATE_STAR];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional bool success = 5;
    if (has_success()) {
      total_size += 1 + 1;
    }

  }
  // repeated uint32 stars = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->stars_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->stars(i));
    }
    total_size += 1 * this->stars_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AstrolabeActivateStarCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AstrolabeActivateStarCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AstrolabeActivateStarCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AstrolabeActivateStarCmd::MergeFrom(const AstrolabeActivateStarCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  stars_.MergeFrom(from.stars_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_success()) {
      set_success(from.success());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AstrolabeActivateStarCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AstrolabeActivateStarCmd::CopyFrom(const AstrolabeActivateStarCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AstrolabeActivateStarCmd::IsInitialized() const {

  return true;
}

void AstrolabeActivateStarCmd::Swap(AstrolabeActivateStarCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    stars_.Swap(&other->stars_);
    std::swap(success_, other->success_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AstrolabeActivateStarCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AstrolabeActivateStarCmd_descriptor_;
  metadata.reflection = AstrolabeActivateStarCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AstrolabeQueryResetCmd::kCmdFieldNumber;
const int AstrolabeQueryResetCmd::kParamFieldNumber;
const int AstrolabeQueryResetCmd::kTypeFieldNumber;
const int AstrolabeQueryResetCmd::kItemsFieldNumber;
#endif  // !_MSC_VER

AstrolabeQueryResetCmd::AstrolabeQueryResetCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.AstrolabeQueryResetCmd)
}

void AstrolabeQueryResetCmd::InitAsDefaultInstance() {
}

AstrolabeQueryResetCmd::AstrolabeQueryResetCmd(const AstrolabeQueryResetCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.AstrolabeQueryResetCmd)
}

void AstrolabeQueryResetCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 28;
  param_ = 3;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AstrolabeQueryResetCmd::~AstrolabeQueryResetCmd() {
  // @@protoc_insertion_point(destructor:Cmd.AstrolabeQueryResetCmd)
  SharedDtor();
}

void AstrolabeQueryResetCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AstrolabeQueryResetCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AstrolabeQueryResetCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AstrolabeQueryResetCmd_descriptor_;
}

const AstrolabeQueryResetCmd& AstrolabeQueryResetCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AstrolabeCmd_2eproto();
  return *default_instance_;
}

AstrolabeQueryResetCmd* AstrolabeQueryResetCmd::default_instance_ = NULL;

AstrolabeQueryResetCmd* AstrolabeQueryResetCmd::New() const {
  return new AstrolabeQueryResetCmd;
}

void AstrolabeQueryResetCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 28;
    param_ = 3;
    type_ = 0;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AstrolabeQueryResetCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.AstrolabeQueryResetCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ASTROLABE_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.AstrolabeParam param = 2 [default = ASTROLABEPARAM_QUERY_RESET];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::AstrolabeParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::AstrolabeParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .Cmd.EAstrolabeType type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EAstrolabeType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EAstrolabeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_items;
        break;
      }

      // repeated .Cmd.AstrolabeCostData items = 4;
      case 4: {
        if (tag == 34) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.AstrolabeQueryResetCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.AstrolabeQueryResetCmd)
  return false;
#undef DO_
}

void AstrolabeQueryResetCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.AstrolabeQueryResetCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ASTROLABE_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.AstrolabeParam param = 2 [default = ASTROLABEPARAM_QUERY_RESET];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.EAstrolabeType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // repeated .Cmd.AstrolabeCostData items = 4;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.AstrolabeQueryResetCmd)
}

::google::protobuf::uint8* AstrolabeQueryResetCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.AstrolabeQueryResetCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ASTROLABE_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.AstrolabeParam param = 2 [default = ASTROLABEPARAM_QUERY_RESET];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.EAstrolabeType type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // repeated .Cmd.AstrolabeCostData items = 4;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.AstrolabeQueryResetCmd)
  return target;
}

int AstrolabeQueryResetCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ASTROLABE_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.AstrolabeParam param = 2 [default = ASTROLABEPARAM_QUERY_RESET];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.EAstrolabeType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated .Cmd.AstrolabeCostData items = 4;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AstrolabeQueryResetCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AstrolabeQueryResetCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AstrolabeQueryResetCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AstrolabeQueryResetCmd::MergeFrom(const AstrolabeQueryResetCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AstrolabeQueryResetCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AstrolabeQueryResetCmd::CopyFrom(const AstrolabeQueryResetCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AstrolabeQueryResetCmd::IsInitialized() const {

  return true;
}

void AstrolabeQueryResetCmd::Swap(AstrolabeQueryResetCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(type_, other->type_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AstrolabeQueryResetCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AstrolabeQueryResetCmd_descriptor_;
  metadata.reflection = AstrolabeQueryResetCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AstrolabeResetCmd::kCmdFieldNumber;
const int AstrolabeResetCmd::kParamFieldNumber;
const int AstrolabeResetCmd::kStarsFieldNumber;
const int AstrolabeResetCmd::kSuccessFieldNumber;
#endif  // !_MSC_VER

AstrolabeResetCmd::AstrolabeResetCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.AstrolabeResetCmd)
}

void AstrolabeResetCmd::InitAsDefaultInstance() {
}

AstrolabeResetCmd::AstrolabeResetCmd(const AstrolabeResetCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.AstrolabeResetCmd)
}

void AstrolabeResetCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 28;
  param_ = 4;
  success_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AstrolabeResetCmd::~AstrolabeResetCmd() {
  // @@protoc_insertion_point(destructor:Cmd.AstrolabeResetCmd)
  SharedDtor();
}

void AstrolabeResetCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AstrolabeResetCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AstrolabeResetCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AstrolabeResetCmd_descriptor_;
}

const AstrolabeResetCmd& AstrolabeResetCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AstrolabeCmd_2eproto();
  return *default_instance_;
}

AstrolabeResetCmd* AstrolabeResetCmd::default_instance_ = NULL;

AstrolabeResetCmd* AstrolabeResetCmd::New() const {
  return new AstrolabeResetCmd;
}

void AstrolabeResetCmd::Clear() {
  if (_has_bits_[0 / 32] & 11) {
    cmd_ = 28;
    param_ = 4;
    success_ = false;
  }
  stars_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AstrolabeResetCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.AstrolabeResetCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ASTROLABE_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.AstrolabeParam param = 2 [default = ASTROLABEPARAM_RESET];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::AstrolabeParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::AstrolabeParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_stars;
        break;
      }

      // repeated uint32 stars = 3;
      case 3: {
        if (tag == 24) {
         parse_stars:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_stars())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_stars())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_stars;
        if (input->ExpectTag(32)) goto parse_success;
        break;
      }

      // optional bool success = 4;
      case 4: {
        if (tag == 32) {
         parse_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.AstrolabeResetCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.AstrolabeResetCmd)
  return false;
#undef DO_
}

void AstrolabeResetCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.AstrolabeResetCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ASTROLABE_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.AstrolabeParam param = 2 [default = ASTROLABEPARAM_RESET];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated uint32 stars = 3;
  for (int i = 0; i < this->stars_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->stars(i), output);
  }

  // optional bool success = 4;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->success(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.AstrolabeResetCmd)
}

::google::protobuf::uint8* AstrolabeResetCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.AstrolabeResetCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ASTROLABE_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.AstrolabeParam param = 2 [default = ASTROLABEPARAM_RESET];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated uint32 stars = 3;
  for (int i = 0; i < this->stars_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->stars(i), target);
  }

  // optional bool success = 4;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->success(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.AstrolabeResetCmd)
  return target;
}

int AstrolabeResetCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_ASTROLABE_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.AstrolabeParam param = 2 [default = ASTROLABEPARAM_RESET];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional bool success = 4;
    if (has_success()) {
      total_size += 1 + 1;
    }

  }
  // repeated uint32 stars = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->stars_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->stars(i));
    }
    total_size += 1 * this->stars_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AstrolabeResetCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AstrolabeResetCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AstrolabeResetCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AstrolabeResetCmd::MergeFrom(const AstrolabeResetCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  stars_.MergeFrom(from.stars_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_success()) {
      set_success(from.success());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AstrolabeResetCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AstrolabeResetCmd::CopyFrom(const AstrolabeResetCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AstrolabeResetCmd::IsInitialized() const {

  return true;
}

void AstrolabeResetCmd::Swap(AstrolabeResetCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    stars_.Swap(&other->stars_);
    std::swap(success_, other->success_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AstrolabeResetCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AstrolabeResetCmd_descriptor_;
  metadata.reflection = AstrolabeResetCmd_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

// @@protoc_insertion_point(global_scope)
