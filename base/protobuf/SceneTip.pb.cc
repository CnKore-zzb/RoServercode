// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SceneTip.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SceneTip.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Cmd {

namespace {

const ::google::protobuf::Descriptor* RedTip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RedTip_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameTipCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameTipCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* BrowseRedTipCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BrowseRedTipCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddRedTip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddRedTip_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TipParam_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ERedSys_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ETipOpt_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ETipItemOpt_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_SceneTip_2eproto() {
  protobuf_AddDesc_SceneTip_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SceneTip.proto");
  GOOGLE_CHECK(file != NULL);
  RedTip_descriptor_ = file->message_type(0);
  static const int RedTip_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedTip, redsys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedTip, optitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedTip, tipid_),
  };
  RedTip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RedTip_descriptor_,
      RedTip::default_instance_,
      RedTip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedTip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedTip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RedTip));
  GameTipCmd_descriptor_ = file->message_type(1);
  static const int GameTipCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameTipCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameTipCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameTipCmd, opt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameTipCmd, redtip_),
  };
  GameTipCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameTipCmd_descriptor_,
      GameTipCmd::default_instance_,
      GameTipCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameTipCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameTipCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameTipCmd));
  BrowseRedTipCmd_descriptor_ = file->message_type(2);
  static const int BrowseRedTipCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrowseRedTipCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrowseRedTipCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrowseRedTipCmd, red_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrowseRedTipCmd, tipid_),
  };
  BrowseRedTipCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BrowseRedTipCmd_descriptor_,
      BrowseRedTipCmd::default_instance_,
      BrowseRedTipCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrowseRedTipCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrowseRedTipCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BrowseRedTipCmd));
  AddRedTip_descriptor_ = file->message_type(3);
  static const int AddRedTip_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRedTip, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRedTip, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRedTip, red_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRedTip, tipid_),
  };
  AddRedTip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddRedTip_descriptor_,
      AddRedTip::default_instance_,
      AddRedTip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRedTip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRedTip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddRedTip));
  TipParam_descriptor_ = file->enum_type(0);
  ERedSys_descriptor_ = file->enum_type(1);
  ETipOpt_descriptor_ = file->enum_type(2);
  ETipItemOpt_descriptor_ = file->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SceneTip_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RedTip_descriptor_, &RedTip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameTipCmd_descriptor_, &GameTipCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BrowseRedTipCmd_descriptor_, &BrowseRedTipCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddRedTip_descriptor_, &AddRedTip::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SceneTip_2eproto() {
  delete RedTip::default_instance_;
  delete RedTip_reflection_;
  delete GameTipCmd::default_instance_;
  delete GameTipCmd_reflection_;
  delete BrowseRedTipCmd::default_instance_;
  delete BrowseRedTipCmd_reflection_;
  delete AddRedTip::default_instance_;
  delete AddRedTip_reflection_;
}

void protobuf_AddDesc_SceneTip_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Cmd::protobuf_AddDesc_xCmd_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016SceneTip.proto\022\003Cmd\032\nxCmd.proto\"v\n\006Red"
    "Tip\022)\n\006redsys\030\001 \001(\0162\014.Cmd.ERedSys:\013EREDS"
    "YS_MIN\0222\n\007optItem\030\002 \001(\0162\020.Cmd.ETipItemOp"
    "t:\017ETIPITEMOPT_ADD\022\r\n\005tipid\030\003 \003(\004\"\261\001\n\nGa"
    "meTipCmd\0222\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\027SCE"
    "NE_USER_TIP_PROTOCMD\022*\n\005param\030\002 \001(\0162\r.Cm"
    "d.TipParam:\014TIPPARAM_RED\022&\n\003opt\030\003 \001(\0162\014."
    "Cmd.ETipOpt:\013ETIPOPT_MIN\022\033\n\006redtip\030\004 \003(\013"
    "2\013.Cmd.RedTip\"\256\001\n\017BrowseRedTipCmd\0222\n\003cmd"
    "\030\001 \001(\0162\014.Cmd.Command:\027SCENE_USER_TIP_PRO"
    "TOCMD\022-\n\005param\030\002 \001(\0162\r.Cmd.TipParam:\017TIP"
    "PARAM_BROWSE\022&\n\003red\030\003 \001(\0162\014.Cmd.ERedSys:"
    "\013EREDSYS_MIN\022\020\n\005tipid\030\004 \001(\004:\0010\"\253\001\n\tAddRe"
    "dTip\0222\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\027SCENE_U"
    "SER_TIP_PROTOCMD\0220\n\005param\030\002 \001(\0162\r.Cmd.Ti"
    "pParam:\022TIPPARAM_ADDREDTIP\022&\n\003red\030\003 \001(\0162"
    "\014.Cmd.ERedSys:\013EREDSYS_MIN\022\020\n\005tipid\030\004 \001("
    "\004:\0010*[\n\010TipParam\022\020\n\014TIPPARAM_RED\020\001\022\023\n\017TI"
    "PPARAM_BROWSE\020\002\022\026\n\022TIPPARAM_ADDREDTIP\020\003\022"
    "\020\n\014TIPPARAM_MAX\020\004*\257\013\n\007ERedSys\022\017\n\013EREDSYS"
    "_MIN\020\000\022\025\n\021EREDSYS_ADD_POINT\020\001\022\032\n\026EREDSYS"
    "_NEW_PROFESSION\020\002\022\031\n\025EREDSYS_PROFESSION_"
    "UP\020\003\022\024\n\020EREDSYS_ROLE_IMG\020\004\022\027\n\023EREDSYS_MO"
    "NSTER_IMG\020\005\022\026\n\022EREDSYS_PHOTOFRAME\020\006\022\027\n\023E"
    "REDSYS_SKILL_POINT\020\007\022\025\n\021EREDSYS_TEAMAPPL"
    "Y\020\023\022\032\n\026EREDSYS_MANUAL_MONSTER\020\024\022\027\n\023EREDS"
    "YS_MANUAL_HEAD\020\025\022\027\n\023EREDSYS_MANUAL_FACE\020"
    "\026\022\027\n\023EREDSYS_MANUAL_BACK\020\027\022\027\n\023EREDSYS_MA"
    "NUAL_TAIL\020\030\022\036\n\032EREDSYS_MANUAL_CARD_WEAPO"
    "N\020\031\022!\n\035EREDSYS_MANUAL_CARD_ASSISTANT\020\032\022\036"
    "\n\032EREDSYS_MANUAL_CARD_ARMOUR\020\033\022\034\n\030EREDSY"
    "S_MANUAL_CARD_ROBE\020\034\022\035\n\031EREDSYS_MANUAL_C"
    "ARD_SHOES\020\035\022!\n\035EREDSYS_MANUAL_CARD_ACCES"
    "SORY\020\036\022\034\n\030EREDSYS_MANUAL_CARD_HEAD\020\037\022\026\n\022"
    "EREDSYS_MANUAL_NPC\020 \022\030\n\024EREDSYS_MANUAL_M"
    "OUNT\020!\022\037\n\033EREDSYS_SOCIAL_FRIEND_APPLY\020\"\022"
    "\034\n\030EREDSYS_MANUAL_MONTHCARD\020#\022\032\n\026EREDSYS"
    "_MANUAL_NEWTAIL\020$\022\035\n\031EREDSYS_MANUAL_COLL"
    "ECTION\020%\022\027\n\023EREDSYS_MANUAL_FOOD\020&\022\027\n\023ERE"
    "DSYS_GUILD_APPLY\020(\022\037\n\033EREDSYS_GUILD_CHAL"
    "LENGE_ADD\020)\022\"\n\036EREDSYS_GUILD_CHALLENGE_R"
    "EWARD\020*\022\026\n\022EREDSYS_GUILD_ICON\020+\022\030\n\024EREDS"
    "YS_PRIVATE_CHAT\0202\022\030\n\024EREDSYS_TRADE_RECOR"
    "D\020<\022\031\n\025EREDSYS_PET_ADVENTURE\020F\022\036\n\032EREDSY"
    "S_TUTOR_TUTOR_UNLOCK\020P\022 \n\034EREDSYS_TUTOR_"
    "STUDENT_UNLOCK\020Q\022\027\n\023EREDSYS_TUTOR_APPLY\020"
    "R\022\026\n\022EREDSYS_TUTOR_TASK\020S\022\035\n\031EREDSYS_TUT"
    "OR_GROW_REWARD\020U\022\033\n\027EREDSYS_MANUAL_PRONT"
    "ERA\020e\022\031\n\025EREDSYS_MANUAL_GEFFEN\020f\022\031\n\025ERED"
    "SYS_MANUAL_MOROCC\020g\022\030\n\024EREDSYS_MANUAL_PA"
    "YON\020h\022\030\n\024EREDSYS_MANUAL_GLAST\020i\022\025\n\021EREDS"
    "YS_PACK_TEMP\020j\022\032\n\026EREDSYS_AUCTION_RECORD"
    "\020T\022\027\n\022EREDSYS_PEAK_LEVEL\020\204\001\022\027\n\022EREDSYS_B"
    "EING_BODY\020\254\002\022\036\n\031EREDSYS_SERVANT_RECOMMNE"
    "D\020\220\003\022\033\n\026EREDSYS_SERVANT_GROWTH\020\221\003\022\026\n\021ERE"
    "DSYS_DEAD_BOSS\020\330\004\022\020\n\013EREDSYS_MAX\020\331\004*B\n\007E"
    "TipOpt\022\017\n\013ETIPOPT_MIN\020\000\022\022\n\016ETIPOPT_UPDAT"
    "E\020\001\022\022\n\016ETIPOPT_DELETE\020\002*:\n\013ETipItemOpt\022\023"
    "\n\017ETIPITEMOPT_ADD\020\001\022\026\n\022ETIPITEMOPT_DELET"
    "E\020\002", 2363);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SceneTip.proto", &protobuf_RegisterTypes);
  RedTip::default_instance_ = new RedTip();
  GameTipCmd::default_instance_ = new GameTipCmd();
  BrowseRedTipCmd::default_instance_ = new BrowseRedTipCmd();
  AddRedTip::default_instance_ = new AddRedTip();
  RedTip::default_instance_->InitAsDefaultInstance();
  GameTipCmd::default_instance_->InitAsDefaultInstance();
  BrowseRedTipCmd::default_instance_->InitAsDefaultInstance();
  AddRedTip::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SceneTip_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SceneTip_2eproto {
  StaticDescriptorInitializer_SceneTip_2eproto() {
    protobuf_AddDesc_SceneTip_2eproto();
  }
} static_descriptor_initializer_SceneTip_2eproto_;
const ::google::protobuf::EnumDescriptor* TipParam_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TipParam_descriptor_;
}
bool TipParam_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ERedSys_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ERedSys_descriptor_;
}
bool ERedSys_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 40:
    case 41:
    case 42:
    case 43:
    case 50:
    case 60:
    case 70:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 132:
    case 300:
    case 400:
    case 401:
    case 600:
    case 601:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ETipOpt_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ETipOpt_descriptor_;
}
bool ETipOpt_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ETipItemOpt_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ETipItemOpt_descriptor_;
}
bool ETipItemOpt_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int RedTip::kRedsysFieldNumber;
const int RedTip::kOptItemFieldNumber;
const int RedTip::kTipidFieldNumber;
#endif  // !_MSC_VER

RedTip::RedTip()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.RedTip)
}

void RedTip::InitAsDefaultInstance() {
}

RedTip::RedTip(const RedTip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.RedTip)
}

void RedTip::SharedCtor() {
  _cached_size_ = 0;
  redsys_ = 0;
  optitem_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RedTip::~RedTip() {
  // @@protoc_insertion_point(destructor:Cmd.RedTip)
  SharedDtor();
}

void RedTip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RedTip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RedTip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RedTip_descriptor_;
}

const RedTip& RedTip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneTip_2eproto();
  return *default_instance_;
}

RedTip* RedTip::default_instance_ = NULL;

RedTip* RedTip::New() const {
  return new RedTip;
}

void RedTip::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    redsys_ = 0;
    optitem_ = 1;
  }
  tipid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RedTip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.RedTip)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.ERedSys redsys = 1 [default = EREDSYS_MIN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ERedSys_IsValid(value)) {
            set_redsys(static_cast< ::Cmd::ERedSys >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_optItem;
        break;
      }

      // optional .Cmd.ETipItemOpt optItem = 2 [default = ETIPITEMOPT_ADD];
      case 2: {
        if (tag == 16) {
         parse_optItem:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ETipItemOpt_IsValid(value)) {
            set_optitem(static_cast< ::Cmd::ETipItemOpt >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_tipid;
        break;
      }

      // repeated uint64 tipid = 3;
      case 3: {
        if (tag == 24) {
         parse_tipid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_tipid())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_tipid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_tipid;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.RedTip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.RedTip)
  return false;
#undef DO_
}

void RedTip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.RedTip)
  // optional .Cmd.ERedSys redsys = 1 [default = EREDSYS_MIN];
  if (has_redsys()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->redsys(), output);
  }

  // optional .Cmd.ETipItemOpt optItem = 2 [default = ETIPITEMOPT_ADD];
  if (has_optitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->optitem(), output);
  }

  // repeated uint64 tipid = 3;
  for (int i = 0; i < this->tipid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->tipid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.RedTip)
}

::google::protobuf::uint8* RedTip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.RedTip)
  // optional .Cmd.ERedSys redsys = 1 [default = EREDSYS_MIN];
  if (has_redsys()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->redsys(), target);
  }

  // optional .Cmd.ETipItemOpt optItem = 2 [default = ETIPITEMOPT_ADD];
  if (has_optitem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->optitem(), target);
  }

  // repeated uint64 tipid = 3;
  for (int i = 0; i < this->tipid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->tipid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.RedTip)
  return target;
}

int RedTip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.ERedSys redsys = 1 [default = EREDSYS_MIN];
    if (has_redsys()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->redsys());
    }

    // optional .Cmd.ETipItemOpt optItem = 2 [default = ETIPITEMOPT_ADD];
    if (has_optitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->optitem());
    }

  }
  // repeated uint64 tipid = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->tipid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->tipid(i));
    }
    total_size += 1 * this->tipid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RedTip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RedTip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RedTip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RedTip::MergeFrom(const RedTip& from) {
  GOOGLE_CHECK_NE(&from, this);
  tipid_.MergeFrom(from.tipid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_redsys()) {
      set_redsys(from.redsys());
    }
    if (from.has_optitem()) {
      set_optitem(from.optitem());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RedTip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedTip::CopyFrom(const RedTip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedTip::IsInitialized() const {

  return true;
}

void RedTip::Swap(RedTip* other) {
  if (other != this) {
    std::swap(redsys_, other->redsys_);
    std::swap(optitem_, other->optitem_);
    tipid_.Swap(&other->tipid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RedTip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RedTip_descriptor_;
  metadata.reflection = RedTip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameTipCmd::kCmdFieldNumber;
const int GameTipCmd::kParamFieldNumber;
const int GameTipCmd::kOptFieldNumber;
const int GameTipCmd::kRedtipFieldNumber;
#endif  // !_MSC_VER

GameTipCmd::GameTipCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GameTipCmd)
}

void GameTipCmd::InitAsDefaultInstance() {
}

GameTipCmd::GameTipCmd(const GameTipCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GameTipCmd)
}

void GameTipCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 18;
  param_ = 1;
  opt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameTipCmd::~GameTipCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GameTipCmd)
  SharedDtor();
}

void GameTipCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameTipCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameTipCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameTipCmd_descriptor_;
}

const GameTipCmd& GameTipCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneTip_2eproto();
  return *default_instance_;
}

GameTipCmd* GameTipCmd::default_instance_ = NULL;

GameTipCmd* GameTipCmd::New() const {
  return new GameTipCmd;
}

void GameTipCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 18;
    param_ = 1;
    opt_ = 0;
  }
  redtip_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameTipCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GameTipCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_TIP_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.TipParam param = 2 [default = TIPPARAM_RED];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::TipParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::TipParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_opt;
        break;
      }

      // optional .Cmd.ETipOpt opt = 3 [default = ETIPOPT_MIN];
      case 3: {
        if (tag == 24) {
         parse_opt:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ETipOpt_IsValid(value)) {
            set_opt(static_cast< ::Cmd::ETipOpt >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_redtip;
        break;
      }

      // repeated .Cmd.RedTip redtip = 4;
      case 4: {
        if (tag == 34) {
         parse_redtip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_redtip()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_redtip;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GameTipCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GameTipCmd)
  return false;
#undef DO_
}

void GameTipCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GameTipCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_TIP_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.TipParam param = 2 [default = TIPPARAM_RED];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.ETipOpt opt = 3 [default = ETIPOPT_MIN];
  if (has_opt()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->opt(), output);
  }

  // repeated .Cmd.RedTip redtip = 4;
  for (int i = 0; i < this->redtip_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->redtip(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GameTipCmd)
}

::google::protobuf::uint8* GameTipCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GameTipCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_TIP_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.TipParam param = 2 [default = TIPPARAM_RED];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.ETipOpt opt = 3 [default = ETIPOPT_MIN];
  if (has_opt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->opt(), target);
  }

  // repeated .Cmd.RedTip redtip = 4;
  for (int i = 0; i < this->redtip_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->redtip(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GameTipCmd)
  return target;
}

int GameTipCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_TIP_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.TipParam param = 2 [default = TIPPARAM_RED];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.ETipOpt opt = 3 [default = ETIPOPT_MIN];
    if (has_opt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->opt());
    }

  }
  // repeated .Cmd.RedTip redtip = 4;
  total_size += 1 * this->redtip_size();
  for (int i = 0; i < this->redtip_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->redtip(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameTipCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameTipCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameTipCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameTipCmd::MergeFrom(const GameTipCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  redtip_.MergeFrom(from.redtip_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_opt()) {
      set_opt(from.opt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameTipCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameTipCmd::CopyFrom(const GameTipCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameTipCmd::IsInitialized() const {

  return true;
}

void GameTipCmd::Swap(GameTipCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(opt_, other->opt_);
    redtip_.Swap(&other->redtip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameTipCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameTipCmd_descriptor_;
  metadata.reflection = GameTipCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BrowseRedTipCmd::kCmdFieldNumber;
const int BrowseRedTipCmd::kParamFieldNumber;
const int BrowseRedTipCmd::kRedFieldNumber;
const int BrowseRedTipCmd::kTipidFieldNumber;
#endif  // !_MSC_VER

BrowseRedTipCmd::BrowseRedTipCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BrowseRedTipCmd)
}

void BrowseRedTipCmd::InitAsDefaultInstance() {
}

BrowseRedTipCmd::BrowseRedTipCmd(const BrowseRedTipCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BrowseRedTipCmd)
}

void BrowseRedTipCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 18;
  param_ = 2;
  red_ = 0;
  tipid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BrowseRedTipCmd::~BrowseRedTipCmd() {
  // @@protoc_insertion_point(destructor:Cmd.BrowseRedTipCmd)
  SharedDtor();
}

void BrowseRedTipCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BrowseRedTipCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BrowseRedTipCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BrowseRedTipCmd_descriptor_;
}

const BrowseRedTipCmd& BrowseRedTipCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneTip_2eproto();
  return *default_instance_;
}

BrowseRedTipCmd* BrowseRedTipCmd::default_instance_ = NULL;

BrowseRedTipCmd* BrowseRedTipCmd::New() const {
  return new BrowseRedTipCmd;
}

void BrowseRedTipCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BrowseRedTipCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(tipid_, red_);
    cmd_ = 18;
    param_ = 2;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BrowseRedTipCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BrowseRedTipCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_TIP_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.TipParam param = 2 [default = TIPPARAM_BROWSE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::TipParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::TipParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_red;
        break;
      }

      // optional .Cmd.ERedSys red = 3 [default = EREDSYS_MIN];
      case 3: {
        if (tag == 24) {
         parse_red:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ERedSys_IsValid(value)) {
            set_red(static_cast< ::Cmd::ERedSys >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_tipid;
        break;
      }

      // optional uint64 tipid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_tipid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tipid_)));
          set_has_tipid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BrowseRedTipCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BrowseRedTipCmd)
  return false;
#undef DO_
}

void BrowseRedTipCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BrowseRedTipCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_TIP_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.TipParam param = 2 [default = TIPPARAM_BROWSE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.ERedSys red = 3 [default = EREDSYS_MIN];
  if (has_red()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->red(), output);
  }

  // optional uint64 tipid = 4 [default = 0];
  if (has_tipid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->tipid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BrowseRedTipCmd)
}

::google::protobuf::uint8* BrowseRedTipCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BrowseRedTipCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_TIP_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.TipParam param = 2 [default = TIPPARAM_BROWSE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.ERedSys red = 3 [default = EREDSYS_MIN];
  if (has_red()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->red(), target);
  }

  // optional uint64 tipid = 4 [default = 0];
  if (has_tipid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->tipid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BrowseRedTipCmd)
  return target;
}

int BrowseRedTipCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_TIP_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.TipParam param = 2 [default = TIPPARAM_BROWSE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.ERedSys red = 3 [default = EREDSYS_MIN];
    if (has_red()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->red());
    }

    // optional uint64 tipid = 4 [default = 0];
    if (has_tipid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tipid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BrowseRedTipCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BrowseRedTipCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BrowseRedTipCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BrowseRedTipCmd::MergeFrom(const BrowseRedTipCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_red()) {
      set_red(from.red());
    }
    if (from.has_tipid()) {
      set_tipid(from.tipid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BrowseRedTipCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BrowseRedTipCmd::CopyFrom(const BrowseRedTipCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BrowseRedTipCmd::IsInitialized() const {

  return true;
}

void BrowseRedTipCmd::Swap(BrowseRedTipCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(red_, other->red_);
    std::swap(tipid_, other->tipid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BrowseRedTipCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BrowseRedTipCmd_descriptor_;
  metadata.reflection = BrowseRedTipCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddRedTip::kCmdFieldNumber;
const int AddRedTip::kParamFieldNumber;
const int AddRedTip::kRedFieldNumber;
const int AddRedTip::kTipidFieldNumber;
#endif  // !_MSC_VER

AddRedTip::AddRedTip()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.AddRedTip)
}

void AddRedTip::InitAsDefaultInstance() {
}

AddRedTip::AddRedTip(const AddRedTip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.AddRedTip)
}

void AddRedTip::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 18;
  param_ = 3;
  red_ = 0;
  tipid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddRedTip::~AddRedTip() {
  // @@protoc_insertion_point(destructor:Cmd.AddRedTip)
  SharedDtor();
}

void AddRedTip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddRedTip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddRedTip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddRedTip_descriptor_;
}

const AddRedTip& AddRedTip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneTip_2eproto();
  return *default_instance_;
}

AddRedTip* AddRedTip::default_instance_ = NULL;

AddRedTip* AddRedTip::New() const {
  return new AddRedTip;
}

void AddRedTip::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AddRedTip*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(tipid_, red_);
    cmd_ = 18;
    param_ = 3;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddRedTip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.AddRedTip)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_TIP_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.TipParam param = 2 [default = TIPPARAM_ADDREDTIP];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::TipParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::TipParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_red;
        break;
      }

      // optional .Cmd.ERedSys red = 3 [default = EREDSYS_MIN];
      case 3: {
        if (tag == 24) {
         parse_red:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ERedSys_IsValid(value)) {
            set_red(static_cast< ::Cmd::ERedSys >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_tipid;
        break;
      }

      // optional uint64 tipid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_tipid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tipid_)));
          set_has_tipid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.AddRedTip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.AddRedTip)
  return false;
#undef DO_
}

void AddRedTip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.AddRedTip)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_TIP_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.TipParam param = 2 [default = TIPPARAM_ADDREDTIP];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.ERedSys red = 3 [default = EREDSYS_MIN];
  if (has_red()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->red(), output);
  }

  // optional uint64 tipid = 4 [default = 0];
  if (has_tipid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->tipid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.AddRedTip)
}

::google::protobuf::uint8* AddRedTip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.AddRedTip)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_TIP_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.TipParam param = 2 [default = TIPPARAM_ADDREDTIP];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.ERedSys red = 3 [default = EREDSYS_MIN];
  if (has_red()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->red(), target);
  }

  // optional uint64 tipid = 4 [default = 0];
  if (has_tipid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->tipid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.AddRedTip)
  return target;
}

int AddRedTip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_TIP_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.TipParam param = 2 [default = TIPPARAM_ADDREDTIP];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.ERedSys red = 3 [default = EREDSYS_MIN];
    if (has_red()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->red());
    }

    // optional uint64 tipid = 4 [default = 0];
    if (has_tipid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tipid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddRedTip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddRedTip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddRedTip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddRedTip::MergeFrom(const AddRedTip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_red()) {
      set_red(from.red());
    }
    if (from.has_tipid()) {
      set_tipid(from.tipid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddRedTip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddRedTip::CopyFrom(const AddRedTip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddRedTip::IsInitialized() const {

  return true;
}

void AddRedTip::Swap(AddRedTip* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(red_, other->red_);
    std::swap(tipid_, other->tipid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddRedTip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddRedTip_descriptor_;
  metadata.reflection = AddRedTip_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

// @@protoc_insertion_point(global_scope)
