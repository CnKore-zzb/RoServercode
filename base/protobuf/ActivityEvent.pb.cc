// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ActivityEvent.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ActivityEvent.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Cmd {

namespace {

const ::google::protobuf::Descriptor* AEReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AEReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* AEMapPos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AEMapPos_reflection_ = NULL;
const ::google::protobuf::Descriptor* AEMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AEMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* AEFreeTransferInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AEFreeTransferInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AESummonInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AESummonInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AERewardExtraInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AERewardExtraInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AERewardMultipleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AERewardMultipleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AERewardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AERewardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AELotteryDiscount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AELotteryDiscount_reflection_ = NULL;
const ::google::protobuf::Descriptor* AELotteryNpc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AELotteryNpc_reflection_ = NULL;
const ::google::protobuf::Descriptor* AEUrl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AEUrl_reflection_ = NULL;
const ::google::protobuf::Descriptor* AELotteryBanner_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AELotteryBanner_reflection_ = NULL;
const ::google::protobuf::Descriptor* AEGuildBuildingSubmitInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AEGuildBuildingSubmitInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AEShopInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AEShopInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityEventInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityEventInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AEResetInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AEResetInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AERewardItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AERewardItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityEventNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityEventNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityEventUserDataNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityEventUserDataNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityEventCnt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityEventCnt_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityEventNtfEventCntCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityEventNtfEventCntCmd_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ActivityEventParam_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EAERewardMode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ECoinType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EUserType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EActivityEventType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ActivityEvent_2eproto() {
  protobuf_AddDesc_ActivityEvent_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ActivityEvent.proto");
  GOOGLE_CHECK(file != NULL);
  AEReward_descriptor_ = file->message_type(0);
  static const int AEReward_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AEReward, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AEReward, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AEReward, weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AEReward, minlayer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AEReward, maxlayer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AEReward, difficultys_),
  };
  AEReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AEReward_descriptor_,
      AEReward::default_instance_,
      AEReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AEReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AEReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AEReward));
  AEMapPos_descriptor_ = file->message_type(1);
  static const int AEMapPos_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AEMapPos, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AEMapPos, range_),
  };
  AEMapPos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AEMapPos_descriptor_,
      AEMapPos::default_instance_,
      AEMapPos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AEMapPos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AEMapPos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AEMapPos));
  AEMap_descriptor_ = file->message_type(2);
  static const int AEMap_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AEMap, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AEMap, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AEMap, coord_),
  };
  AEMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AEMap_descriptor_,
      AEMap::default_instance_,
      AEMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AEMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AEMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AEMap));
  AEFreeTransferInfo_descriptor_ = file->message_type(3);
  static const int AEFreeTransferInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AEFreeTransferInfo, mapids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AEFreeTransferInfo, allfree_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AEFreeTransferInfo, teammapids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AEFreeTransferInfo, teamallfree_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AEFreeTransferInfo, storefree_),
  };
  AEFreeTransferInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AEFreeTransferInfo_descriptor_,
      AEFreeTransferInfo::default_instance_,
      AEFreeTransferInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AEFreeTransferInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AEFreeTransferInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AEFreeTransferInfo));
  AESummonInfo_descriptor_ = file->message_type(4);
  static const int AESummonInfo_offsets_[35] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AESummonInfo, monsterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AESummonInfo, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AESummonInfo, revive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AESummonInfo, iscreate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AESummonInfo, namezh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AESummonInfo, nameen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AESummonInfo, icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AESummonInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AESummonInfo, zone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AESummonInfo, race_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AESummonInfo, nature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AESummonInfo, shape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AESummonInfo, body_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AESummonInfo, jobexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AESummonInfo, baseexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AESummonInfo, str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AESummonInfo, dex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AESummonInfo, inte_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AESummonInfo, vit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AESummonInfo, agi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AESummonInfo, luk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AESummonInfo, atk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AESummonInfo, matk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AESummonInfo, def_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AESummonInfo, mdef_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AESummonInfo, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AESummonInfo, hit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AESummonInfo, flee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AESummonInfo, movespd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AESummonInfo, movespdrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AESummonInfo, scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AESummonInfo, normalskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AESummonInfo, rewardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AESummonInfo, rewards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AESummonInfo, map_),
  };
  AESummonInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AESummonInfo_descriptor_,
      AESummonInfo::default_instance_,
      AESummonInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AESummonInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AESummonInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AESummonInfo));
  AERewardExtraInfo_descriptor_ = file->message_type(5);
  static const int AERewardExtraInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AERewardExtraInfo, rewards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AERewardExtraInfo, finishcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AERewardExtraInfo, daylimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AERewardExtraInfo, acclimit_),
  };
  AERewardExtraInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AERewardExtraInfo_descriptor_,
      AERewardExtraInfo::default_instance_,
      AERewardExtraInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AERewardExtraInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AERewardExtraInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AERewardExtraInfo));
  AERewardMultipleInfo_descriptor_ = file->message_type(6);
  static const int AERewardMultipleInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AERewardMultipleInfo, multiple_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AERewardMultipleInfo, finishcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AERewardMultipleInfo, daylimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AERewardMultipleInfo, acclimit_),
  };
  AERewardMultipleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AERewardMultipleInfo_descriptor_,
      AERewardMultipleInfo::default_instance_,
      AERewardMultipleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AERewardMultipleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AERewardMultipleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AERewardMultipleInfo));
  AERewardInfo_descriptor_ = file->message_type(7);
  static const int AERewardInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AERewardInfo, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AERewardInfo, extrareward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AERewardInfo, multiplereward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AERewardInfo, extratimes_),
  };
  AERewardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AERewardInfo_descriptor_,
      AERewardInfo::default_instance_,
      AERewardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AERewardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AERewardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AERewardInfo));
  AELotteryDiscount_descriptor_ = file->message_type(8);
  static const int AELotteryDiscount_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AELotteryDiscount, lotterytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AELotteryDiscount, cointype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AELotteryDiscount, usertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AELotteryDiscount, discount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AELotteryDiscount, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AELotteryDiscount, yearmonth_),
  };
  AELotteryDiscount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AELotteryDiscount_descriptor_,
      AELotteryDiscount::default_instance_,
      AELotteryDiscount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AELotteryDiscount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AELotteryDiscount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AELotteryDiscount));
  AELotteryNpc_descriptor_ = file->message_type(9);
  static const int AELotteryNpc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AELotteryNpc, lotterytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AELotteryNpc, map_),
  };
  AELotteryNpc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AELotteryNpc_descriptor_,
      AELotteryNpc::default_instance_,
      AELotteryNpc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AELotteryNpc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AELotteryNpc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AELotteryNpc));
  AEUrl_descriptor_ = file->message_type(10);
  static const int AEUrl_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AEUrl, language_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AEUrl, url_),
  };
  AEUrl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AEUrl_descriptor_,
      AEUrl::default_instance_,
      AEUrl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AEUrl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AEUrl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AEUrl));
  AELotteryBanner_descriptor_ = file->message_type(11);
  static const int AELotteryBanner_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AELotteryBanner, lotterytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AELotteryBanner, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AELotteryBanner, urls_),
  };
  AELotteryBanner_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AELotteryBanner_descriptor_,
      AELotteryBanner::default_instance_,
      AELotteryBanner_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AELotteryBanner, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AELotteryBanner, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AELotteryBanner));
  AEGuildBuildingSubmitInfo_descriptor_ = file->message_type(12);
  static const int AEGuildBuildingSubmitInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AEGuildBuildingSubmitInfo, types_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AEGuildBuildingSubmitInfo, minlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AEGuildBuildingSubmitInfo, maxlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AEGuildBuildingSubmitInfo, submitinc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AEGuildBuildingSubmitInfo, rewardinc_),
  };
  AEGuildBuildingSubmitInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AEGuildBuildingSubmitInfo_descriptor_,
      AEGuildBuildingSubmitInfo::default_instance_,
      AEGuildBuildingSubmitInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AEGuildBuildingSubmitInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AEGuildBuildingSubmitInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AEGuildBuildingSubmitInfo));
  AEShopInfo_descriptor_ = file->message_type(13);
  static const int AEShopInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AEShopInfo, items_),
  };
  AEShopInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AEShopInfo_descriptor_,
      AEShopInfo::default_instance_,
      AEShopInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AEShopInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AEShopInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AEShopInfo));
  ActivityEventInfo_descriptor_ = file->message_type(14);
  static const int ActivityEventInfo_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityEventInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityEventInfo, begintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityEventInfo, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityEventInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityEventInfo, freetransferinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityEventInfo, summoninfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityEventInfo, rewardinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityEventInfo, resetinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityEventInfo, lotterydiscount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityEventInfo, lotterynpc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityEventInfo, lotterybanner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityEventInfo, gbuildingsubmitinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityEventInfo, shopinfo_),
  };
  ActivityEventInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityEventInfo_descriptor_,
      ActivityEventInfo::default_instance_,
      ActivityEventInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityEventInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityEventInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityEventInfo));
  AEResetInfo_descriptor_ = file->message_type(15);
  static const int AEResetInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AEResetInfo, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AEResetInfo, times_),
  };
  AEResetInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AEResetInfo_descriptor_,
      AEResetInfo::default_instance_,
      AEResetInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AEResetInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AEResetInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AEResetInfo));
  AERewardItem_descriptor_ = file->message_type(16);
  static const int AERewardItem_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AERewardItem, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AERewardItem, daycount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AERewardItem, acclimitcharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AERewardItem, multipledaycount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AERewardItem, multipleacclimitcharid_),
  };
  AERewardItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AERewardItem_descriptor_,
      AERewardItem::default_instance_,
      AERewardItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AERewardItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AERewardItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AERewardItem));
  ActivityEvent_descriptor_ = file->message_type(17);
  static const int ActivityEvent_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityEvent, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityEvent, begintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityEvent, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityEvent, freetransfer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityEvent, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityEvent, resetinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityEvent, lotterydiscount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityEvent, lotterybanner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityEvent, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityEvent, gbuildingsubmit_),
  };
  ActivityEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityEvent_descriptor_,
      ActivityEvent::default_instance_,
      ActivityEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityEvent));
  ActivityEventNtf_descriptor_ = file->message_type(18);
  static const int ActivityEventNtf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityEventNtf, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityEventNtf, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityEventNtf, events_),
  };
  ActivityEventNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityEventNtf_descriptor_,
      ActivityEventNtf::default_instance_,
      ActivityEventNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityEventNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityEventNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityEventNtf));
  ActivityEventUserDataNtf_descriptor_ = file->message_type(19);
  static const int ActivityEventUserDataNtf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityEventUserDataNtf, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityEventUserDataNtf, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityEventUserDataNtf, rewarditems_),
  };
  ActivityEventUserDataNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityEventUserDataNtf_descriptor_,
      ActivityEventUserDataNtf::default_instance_,
      ActivityEventUserDataNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityEventUserDataNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityEventUserDataNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityEventUserDataNtf));
  ActivityEventCnt_descriptor_ = file->message_type(20);
  static const int ActivityEventCnt_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityEventCnt, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityEventCnt, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityEventCnt, count_),
  };
  ActivityEventCnt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityEventCnt_descriptor_,
      ActivityEventCnt::default_instance_,
      ActivityEventCnt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityEventCnt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityEventCnt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityEventCnt));
  ActivityEventNtfEventCntCmd_descriptor_ = file->message_type(21);
  static const int ActivityEventNtfEventCntCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityEventNtfEventCntCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityEventNtfEventCntCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityEventNtfEventCntCmd, cnt_),
  };
  ActivityEventNtfEventCntCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityEventNtfEventCntCmd_descriptor_,
      ActivityEventNtfEventCntCmd::default_instance_,
      ActivityEventNtfEventCntCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityEventNtfEventCntCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityEventNtfEventCntCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityEventNtfEventCntCmd));
  ActivityEventParam_descriptor_ = file->enum_type(0);
  EAERewardMode_descriptor_ = file->enum_type(1);
  ECoinType_descriptor_ = file->enum_type(2);
  EUserType_descriptor_ = file->enum_type(3);
  EActivityEventType_descriptor_ = file->enum_type(4);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ActivityEvent_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AEReward_descriptor_, &AEReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AEMapPos_descriptor_, &AEMapPos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AEMap_descriptor_, &AEMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AEFreeTransferInfo_descriptor_, &AEFreeTransferInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AESummonInfo_descriptor_, &AESummonInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AERewardExtraInfo_descriptor_, &AERewardExtraInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AERewardMultipleInfo_descriptor_, &AERewardMultipleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AERewardInfo_descriptor_, &AERewardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AELotteryDiscount_descriptor_, &AELotteryDiscount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AELotteryNpc_descriptor_, &AELotteryNpc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AEUrl_descriptor_, &AEUrl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AELotteryBanner_descriptor_, &AELotteryBanner::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AEGuildBuildingSubmitInfo_descriptor_, &AEGuildBuildingSubmitInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AEShopInfo_descriptor_, &AEShopInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityEventInfo_descriptor_, &ActivityEventInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AEResetInfo_descriptor_, &AEResetInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AERewardItem_descriptor_, &AERewardItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityEvent_descriptor_, &ActivityEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityEventNtf_descriptor_, &ActivityEventNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityEventUserDataNtf_descriptor_, &ActivityEventUserDataNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityEventCnt_descriptor_, &ActivityEventCnt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityEventNtfEventCntCmd_descriptor_, &ActivityEventNtfEventCntCmd::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ActivityEvent_2eproto() {
  delete AEReward::default_instance_;
  delete AEReward_reflection_;
  delete AEMapPos::default_instance_;
  delete AEMapPos_reflection_;
  delete AEMap::default_instance_;
  delete AEMap_reflection_;
  delete AEFreeTransferInfo::default_instance_;
  delete AEFreeTransferInfo_reflection_;
  delete AESummonInfo::default_instance_;
  delete AESummonInfo_reflection_;
  delete AERewardExtraInfo::default_instance_;
  delete AERewardExtraInfo_reflection_;
  delete AERewardMultipleInfo::default_instance_;
  delete AERewardMultipleInfo_reflection_;
  delete AERewardInfo::default_instance_;
  delete AERewardInfo_reflection_;
  delete AELotteryDiscount::default_instance_;
  delete AELotteryDiscount_reflection_;
  delete AELotteryNpc::default_instance_;
  delete AELotteryNpc_reflection_;
  delete AEUrl::default_instance_;
  delete AEUrl_reflection_;
  delete AELotteryBanner::default_instance_;
  delete AELotteryBanner_reflection_;
  delete AEGuildBuildingSubmitInfo::default_instance_;
  delete AEGuildBuildingSubmitInfo_reflection_;
  delete AEShopInfo::default_instance_;
  delete AEShopInfo_reflection_;
  delete ActivityEventInfo::default_instance_;
  delete ActivityEventInfo_reflection_;
  delete AEResetInfo::default_instance_;
  delete AEResetInfo_reflection_;
  delete AERewardItem::default_instance_;
  delete AERewardItem_reflection_;
  delete ActivityEvent::default_instance_;
  delete ActivityEvent_reflection_;
  delete ActivityEventNtf::default_instance_;
  delete ActivityEventNtf_reflection_;
  delete ActivityEventUserDataNtf::default_instance_;
  delete ActivityEventUserDataNtf_reflection_;
  delete ActivityEventCnt::default_instance_;
  delete ActivityEventCnt_reflection_;
  delete ActivityEventNtfEventCntCmd::default_instance_;
  delete ActivityEventNtfEventCntCmd_reflection_;
}

void protobuf_AddDesc_ActivityEvent_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Cmd::protobuf_AddDesc_xCmd_2eproto();
  ::Cmd::protobuf_AddDesc_SceneItem_2eproto();
  ::Cmd::protobuf_AddDesc_GuildCmd_2eproto();
  ::Cmd::protobuf_AddDesc_SessionShop_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023ActivityEvent.proto\022\003Cmd\032\nxCmd.proto\032\017"
    "SceneItem.proto\032\016GuildCmd.proto\032\021Session"
    "Shop.proto\"}\n\010AEReward\022\r\n\002id\030\001 \001(\r:\0010\022\020\n"
    "\005count\030\002 \001(\r:\0010\022\021\n\006weight\030\003 \001(\r:\0010\022\023\n\010mi"
    "nlayer\030\004 \001(\r:\0010\022\023\n\010maxlayer\030\005 \001(\r:\0010\022\023\n\013"
    "difficultys\030\006 \003(\r\")\n\010AEMapPos\022\013\n\003pos\030\001 \003"
    "(\002\022\020\n\005range\030\002 \001(\002:\0010\"B\n\005AEMap\022\r\n\002id\030\001 \001("
    "\r:\0010\022\014\n\004desc\030\002 \001(\t\022\034\n\005coord\030\003 \003(\0132\r.Cmd."
    "AEMapPos\"\206\001\n\022AEFreeTransferInfo\022\016\n\006mapid"
    "s\030\001 \003(\r\022\026\n\007allfree\030\002 \001(\010:\005false\022\022\n\nteamm"
    "apids\030\003 \003(\r\022\032\n\013teamallfree\030\004 \001(\010:\005false\022"
    "\030\n\tstorefree\030\005 \001(\010:\005false\"\214\005\n\014AESummonIn"
    "fo\022\024\n\tmonsterid\030\001 \001(\r:\0010\022\020\n\005count\030\002 \001(\r:"
    "\0010\022\025\n\006revive\030\003 \001(\010:\005false\022\027\n\010iscreate\030\004 "
    "\001(\010:\005false\022\016\n\006namezh\030\005 \001(\t\022\016\n\006nameen\030\006 \001"
    "(\t\022\014\n\004icon\030\007 \001(\t\022\014\n\004type\030\010 \001(\t\022\014\n\004zone\030\t"
    " \001(\t\022\014\n\004race\030\n \001(\t\022\016\n\006nature\030\013 \001(\t\022\r\n\005sh"
    "ape\030\014 \001(\t\022\017\n\004body\030\r \001(\r:\0010\022\021\n\006jobexp\030\016 \001"
    "(\r:\0010\022\022\n\007baseexp\030\017 \001(\r:\0010\022\016\n\003str\030\020 \001(\002:\001"
    "0\022\016\n\003dex\030\021 \001(\002:\0010\022\017\n\004inte\030\022 \001(\002:\0010\022\016\n\003vi"
    "t\030\023 \001(\002:\0010\022\016\n\003agi\030\024 \001(\002:\0010\022\016\n\003luk\030\025 \001(\002:"
    "\0010\022\016\n\003atk\030\026 \001(\002:\0010\022\017\n\004matk\030\027 \001(\002:\0010\022\016\n\003d"
    "ef\030\030 \001(\002:\0010\022\017\n\004mdef\030\031 \001(\002:\0010\022\r\n\002hp\030\032 \001(\002"
    ":\0010\022\016\n\003hit\030\033 \001(\002:\0010\022\017\n\004flee\030\034 \001(\002:\0010\022\022\n\007"
    "movespd\030\035 \001(\002:\0010\022\026\n\013movespdrate\030\036 \001(\002:\0010"
    "\022\020\n\005scale\030\037 \001(\002:\0010\022\026\n\013normalskill\030  \001(\r:"
    "\0010\022\023\n\010rewardid\030! \001(\r:\0010\022\036\n\007rewards\030\" \003(\013"
    "2\r.Cmd.AEReward\022\027\n\003map\030# \003(\0132\n.Cmd.AEMap"
    "\"y\n\021AERewardExtraInfo\022\036\n\007rewards\030\001 \003(\0132\r"
    ".Cmd.AEReward\022\026\n\013finishcount\030\002 \001(\r:\0010\022\023\n"
    "\010daylimit\030\003 \001(\r:\0010\022\027\n\010acclimit\030\004 \001(\010:\005fa"
    "lse\"q\n\024AERewardMultipleInfo\022\023\n\010multiple\030"
    "\001 \001(\r:\0011\022\026\n\013finishcount\030\002 \001(\r:\0010\022\023\n\010dayl"
    "imit\030\003 \001(\r:\0010\022\027\n\010acclimit\030\004 \001(\010:\005false\"\272"
    "\001\n\014AERewardInfo\0223\n\004mode\030\001 \001(\0162\022.Cmd.EAER"
    "ewardMode:\021EAEREWARDMODE_MIN\022+\n\013extrarew"
    "ard\030\002 \001(\0132\026.Cmd.AERewardExtraInfo\0221\n\016mul"
    "tiplereward\030\003 \001(\0132\031.Cmd.AERewardMultiple"
    "Info\022\025\n\nextratimes\030\004 \001(\r:\0010\"\263\001\n\021AELotter"
    "yDiscount\022&\n\013lotterytype\030\001 \001(\0162\021.Cmd.ELo"
    "tteryType\022 \n\010cointype\030\002 \001(\0162\016.Cmd.ECoinT"
    "ype\022 \n\010usertype\030\003 \001(\0162\016.Cmd.EUserType\022\020\n"
    "\010discount\030\004 \001(\r\022\r\n\005count\030\005 \001(\r\022\021\n\tyearmo"
    "nth\030\007 \001(\r\"O\n\014AELotteryNpc\022&\n\013lotterytype"
    "\030\001 \001(\0162\021.Cmd.ELotteryType\022\027\n\003map\030\002 \003(\0132\n"
    ".Cmd.AEMap\")\n\005AEUrl\022\023\n\010language\030\001 \001(\r:\0010"
    "\022\013\n\003url\030\002 \001(\t\"a\n\017AELotteryBanner\022&\n\013lott"
    "erytype\030\001 \001(\0162\021.Cmd.ELotteryType\022\014\n\004path"
    "\030\002 \001(\t\022\030\n\004urls\030\003 \003(\0132\n.Cmd.AEUrl\"\217\001\n\031AEG"
    "uildBuildingSubmitInfo\022\"\n\005types\030\001 \003(\0162\023."
    "Cmd.EGuildBuilding\022\020\n\005minlv\030\002 \001(\r:\0010\022\020\n\005"
    "maxlv\030\003 \001(\r:\0010\022\024\n\tsubmitinc\030\004 \001(\r:\0010\022\024\n\t"
    "rewardinc\030\005 \001(\r:\0010\"*\n\nAEShopInfo\022\034\n\005item"
    "s\030\001 \003(\0132\r.Cmd.ShopItem\"\376\003\n\021ActivityEvent"
    "Info\022\r\n\002id\030\001 \001(\004:\0010\022\024\n\tbegintime\030\002 \001(\004:\001"
    "0\022\022\n\007endtime\030\003 \001(\004:\0010\022%\n\004type\030\004 \001(\0162\027.Cm"
    "d.EActivityEventType\0221\n\020freetransferinfo"
    "\030\005 \001(\0132\027.Cmd.AEFreeTransferInfo\022%\n\nsummo"
    "ninfo\030\006 \001(\0132\021.Cmd.AESummonInfo\022%\n\nreward"
    "info\030\007 \001(\0132\021.Cmd.AERewardInfo\022#\n\tresetin"
    "fo\030\010 \001(\0132\020.Cmd.AEResetInfo\022/\n\017lotterydis"
    "count\030\t \001(\0132\026.Cmd.AELotteryDiscount\022%\n\nl"
    "otterynpc\030\n \001(\0132\021.Cmd.AELotteryNpc\022+\n\rlo"
    "tterybanner\030\013 \001(\0132\024.Cmd.AELotteryBanner\022"
    ";\n\023gbuildingsubmitinfo\030\014 \001(\0132\036.Cmd.AEGui"
    "ldBuildingSubmitInfo\022!\n\010shopinfo\030\r \001(\0132\017"
    ".Cmd.AEShopInfo\"T\n\013AEResetInfo\0223\n\004mode\030\001"
    " \001(\0162\022.Cmd.EAERewardMode:\021EAEREWARDMODE_"
    "MIN\022\020\n\005times\030\002 \001(\r:\0010\"\263\001\n\014AERewardItem\0223"
    "\n\004mode\030\001 \001(\0162\022.Cmd.EAERewardMode:\021EAEREW"
    "ARDMODE_MIN\022\023\n\010daycount\030\002 \001(\r:\0010\022\031\n\016accl"
    "imitcharid\030\003 \001(\004:\0010\022\033\n\020multipledaycount\030"
    "\004 \001(\r:\0010\022!\n\026multipleacclimitcharid\030\005 \001(\004"
    ":\0010\"\222\003\n\rActivityEvent\022=\n\004type\030\001 \001(\0162\027.Cm"
    "d.EActivityEventType:\026EACTIVITYEVENTTYPE"
    "_MIN\022\024\n\tbegintime\030\002 \001(\004:\0010\022\022\n\007endtime\030\003 "
    "\001(\004:\0010\022-\n\014freetransfer\030\004 \001(\0132\027.Cmd.AEFre"
    "eTransferInfo\022!\n\006reward\030\005 \003(\0132\021.Cmd.AERe"
    "wardInfo\022#\n\tresetinfo\030\006 \003(\0132\020.Cmd.AERese"
    "tInfo\022/\n\017lotterydiscount\030\007 \001(\0132\026.Cmd.AEL"
    "otteryDiscount\022+\n\rlotterybanner\030\010 \001(\0132\024."
    "Cmd.AELotteryBanner\022\n\n\002id\030\t \001(\004\0227\n\017gbuil"
    "dingsubmit\030\n \001(\0132\036.Cmd.AEGuildBuildingSu"
    "bmitInfo\"\252\001\n\020ActivityEventNtf\0222\n\003cmd\030\001 \001"
    "(\0162\014.Cmd.Command:\027ACTIVITY_EVENT_PROTOCM"
    "D\022>\n\005param\030\002 \001(\0162\027.Cmd.ActivityEventPara"
    "m:\026ACTIVITYEVENTPARAM_NTF\022\"\n\006events\030\003 \003("
    "\0132\022.Cmd.ActivityEvent\"\300\001\n\030ActivityEventU"
    "serDataNtf\0222\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\027A"
    "CTIVITY_EVENT_PROTOCMD\022H\n\005param\030\002 \001(\0162\027."
    "Cmd.ActivityEventParam: ACTIVITYEVENTPAR"
    "AM_USER_DATA_NTF\022&\n\013rewarditems\030\003 \003(\0132\021."
    "Cmd.AERewardItem\"l\n\020ActivityEventCnt\022=\n\004"
    "type\030\001 \001(\0162\027.Cmd.EActivityEventType:\026EAC"
    "TIVITYEVENTTYPE_MIN\022\n\n\002id\030\002 \001(\004\022\r\n\005count"
    "\030\003 \001(\r\"\277\001\n\033ActivityEventNtfEventCntCmd\0222"
    "\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\027ACTIVITY_EVEN"
    "T_PROTOCMD\022H\n\005param\030\002 \001(\0162\027.Cmd.Activity"
    "EventParam: ACTIVITYEVENTPARAM_NTF_EVENT"
    "_CNT\022\"\n\003cnt\030\003 \003(\0132\025.Cmd.ActivityEventCnt"
    "*|\n\022ActivityEventParam\022\032\n\026ACTIVITYEVENTP"
    "ARAM_NTF\020\001\022$\n ACTIVITYEVENTPARAM_USER_DA"
    "TA_NTF\020\002\022$\n ACTIVITYEVENTPARAM_NTF_EVENT"
    "_CNT\020\003*\211\002\n\rEAERewardMode\022\025\n\021EAEREWARDMOD"
    "E_MIN\020\000\022\034\n\030EAEREWARDMODE_LABORATORY\020\001\022\035\n"
    "\031EAEREWARDMODE_WANTEDQUEST\020\002\022\026\n\022EAEREWAR"
    "DMODE_SEAL\020\003\022\036\n\032EAEREWARDMODE_GUILD_DONA"
    "TE\020\004\022\027\n\023EAEREWARDMODE_TOWER\020\005\022\033\n\027EAEREWA"
    "RDMODE_GUILDRAID\020\006\022\033\n\027EAEREWARDMODE_GUIL"
    "DDOJO\020\007\022\031\n\025EAEREWARDMODE_PVECARD\020\010*H\n\tEC"
    "oinType\022\021\n\rECoinType_Min\020\000\022\022\n\016ECoinType_"
    "Coin\020\001\022\024\n\020ECoinType_Ticket\020\002*2\n\tEUserTyp"
    "e\022\022\n\016EUserType_Char\020\001\022\021\n\rEUserType_Acc\020\002"
    "*\221\003\n\022EActivityEventType\022\032\n\026EACTIVITYEVEN"
    "TTYPE_MIN\020\000\022$\n EACTIVITYEVENTTYPE_FREE_T"
    "RANSFER\020\001\022\035\n\031EACTIVITYEVENTTYPE_SUMMON\020\002"
    "\022\035\n\031EACTIVITYEVENTTYPE_REWARD\020\003\022 \n\034EACTI"
    "VITYEVENTTYPE_RESETTIME\020\004\022\'\n#EACTIVITYEV"
    "ENTTYPE_LOTTERY_DISCOUNT\020\005\022\"\n\036EACTIVITYE"
    "VENTTYPE_LOTTERY_NPC\020\006\022%\n!EACTIVITYEVENT"
    "TYPE_LOTTERY_BANNER\020\007\022,\n(EACTIVITYEVENTT"
    "YPE_GUILD_BUILDING_SUBMIT\020\010\022\033\n\027EACTIVITY"
    "EVENTTYPE_SHOP\020\t\022\032\n\026EACTIVITYEVENTTYPE_M"
    "AX\020\n", 4924);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ActivityEvent.proto", &protobuf_RegisterTypes);
  AEReward::default_instance_ = new AEReward();
  AEMapPos::default_instance_ = new AEMapPos();
  AEMap::default_instance_ = new AEMap();
  AEFreeTransferInfo::default_instance_ = new AEFreeTransferInfo();
  AESummonInfo::default_instance_ = new AESummonInfo();
  AERewardExtraInfo::default_instance_ = new AERewardExtraInfo();
  AERewardMultipleInfo::default_instance_ = new AERewardMultipleInfo();
  AERewardInfo::default_instance_ = new AERewardInfo();
  AELotteryDiscount::default_instance_ = new AELotteryDiscount();
  AELotteryNpc::default_instance_ = new AELotteryNpc();
  AEUrl::default_instance_ = new AEUrl();
  AELotteryBanner::default_instance_ = new AELotteryBanner();
  AEGuildBuildingSubmitInfo::default_instance_ = new AEGuildBuildingSubmitInfo();
  AEShopInfo::default_instance_ = new AEShopInfo();
  ActivityEventInfo::default_instance_ = new ActivityEventInfo();
  AEResetInfo::default_instance_ = new AEResetInfo();
  AERewardItem::default_instance_ = new AERewardItem();
  ActivityEvent::default_instance_ = new ActivityEvent();
  ActivityEventNtf::default_instance_ = new ActivityEventNtf();
  ActivityEventUserDataNtf::default_instance_ = new ActivityEventUserDataNtf();
  ActivityEventCnt::default_instance_ = new ActivityEventCnt();
  ActivityEventNtfEventCntCmd::default_instance_ = new ActivityEventNtfEventCntCmd();
  AEReward::default_instance_->InitAsDefaultInstance();
  AEMapPos::default_instance_->InitAsDefaultInstance();
  AEMap::default_instance_->InitAsDefaultInstance();
  AEFreeTransferInfo::default_instance_->InitAsDefaultInstance();
  AESummonInfo::default_instance_->InitAsDefaultInstance();
  AERewardExtraInfo::default_instance_->InitAsDefaultInstance();
  AERewardMultipleInfo::default_instance_->InitAsDefaultInstance();
  AERewardInfo::default_instance_->InitAsDefaultInstance();
  AELotteryDiscount::default_instance_->InitAsDefaultInstance();
  AELotteryNpc::default_instance_->InitAsDefaultInstance();
  AEUrl::default_instance_->InitAsDefaultInstance();
  AELotteryBanner::default_instance_->InitAsDefaultInstance();
  AEGuildBuildingSubmitInfo::default_instance_->InitAsDefaultInstance();
  AEShopInfo::default_instance_->InitAsDefaultInstance();
  ActivityEventInfo::default_instance_->InitAsDefaultInstance();
  AEResetInfo::default_instance_->InitAsDefaultInstance();
  AERewardItem::default_instance_->InitAsDefaultInstance();
  ActivityEvent::default_instance_->InitAsDefaultInstance();
  ActivityEventNtf::default_instance_->InitAsDefaultInstance();
  ActivityEventUserDataNtf::default_instance_->InitAsDefaultInstance();
  ActivityEventCnt::default_instance_->InitAsDefaultInstance();
  ActivityEventNtfEventCntCmd::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ActivityEvent_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ActivityEvent_2eproto {
  StaticDescriptorInitializer_ActivityEvent_2eproto() {
    protobuf_AddDesc_ActivityEvent_2eproto();
  }
} static_descriptor_initializer_ActivityEvent_2eproto_;
const ::google::protobuf::EnumDescriptor* ActivityEventParam_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityEventParam_descriptor_;
}
bool ActivityEventParam_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EAERewardMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EAERewardMode_descriptor_;
}
bool EAERewardMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ECoinType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ECoinType_descriptor_;
}
bool ECoinType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EUserType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EUserType_descriptor_;
}
bool EUserType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EActivityEventType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EActivityEventType_descriptor_;
}
bool EActivityEventType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int AEReward::kIdFieldNumber;
const int AEReward::kCountFieldNumber;
const int AEReward::kWeightFieldNumber;
const int AEReward::kMinlayerFieldNumber;
const int AEReward::kMaxlayerFieldNumber;
const int AEReward::kDifficultysFieldNumber;
#endif  // !_MSC_VER

AEReward::AEReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.AEReward)
}

void AEReward::InitAsDefaultInstance() {
}

AEReward::AEReward(const AEReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.AEReward)
}

void AEReward::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  count_ = 0u;
  weight_ = 0u;
  minlayer_ = 0u;
  maxlayer_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AEReward::~AEReward() {
  // @@protoc_insertion_point(destructor:Cmd.AEReward)
  SharedDtor();
}

void AEReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AEReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AEReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AEReward_descriptor_;
}

const AEReward& AEReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityEvent_2eproto();
  return *default_instance_;
}

AEReward* AEReward::default_instance_ = NULL;

AEReward* AEReward::New() const {
  return new AEReward;
}

void AEReward::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AEReward*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(id_, minlayer_);
    maxlayer_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  difficultys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AEReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.AEReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional uint32 count = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_weight;
        break;
      }

      // optional uint32 weight = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_minlayer;
        break;
      }

      // optional uint32 minlayer = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_minlayer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minlayer_)));
          set_has_minlayer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_maxlayer;
        break;
      }

      // optional uint32 maxlayer = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_maxlayer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxlayer_)));
          set_has_maxlayer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_difficultys;
        break;
      }

      // repeated uint32 difficultys = 6;
      case 6: {
        if (tag == 48) {
         parse_difficultys:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_difficultys())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_difficultys())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_difficultys;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.AEReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.AEReward)
  return false;
#undef DO_
}

void AEReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.AEReward)
  // optional uint32 id = 1 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 count = 2 [default = 0];
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // optional uint32 weight = 3 [default = 0];
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->weight(), output);
  }

  // optional uint32 minlayer = 4 [default = 0];
  if (has_minlayer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->minlayer(), output);
  }

  // optional uint32 maxlayer = 5 [default = 0];
  if (has_maxlayer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->maxlayer(), output);
  }

  // repeated uint32 difficultys = 6;
  for (int i = 0; i < this->difficultys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->difficultys(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.AEReward)
}

::google::protobuf::uint8* AEReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.AEReward)
  // optional uint32 id = 1 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 count = 2 [default = 0];
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // optional uint32 weight = 3 [default = 0];
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->weight(), target);
  }

  // optional uint32 minlayer = 4 [default = 0];
  if (has_minlayer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->minlayer(), target);
  }

  // optional uint32 maxlayer = 5 [default = 0];
  if (has_maxlayer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->maxlayer(), target);
  }

  // repeated uint32 difficultys = 6;
  for (int i = 0; i < this->difficultys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->difficultys(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.AEReward)
  return target;
}

int AEReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 count = 2 [default = 0];
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional uint32 weight = 3 [default = 0];
    if (has_weight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weight());
    }

    // optional uint32 minlayer = 4 [default = 0];
    if (has_minlayer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->minlayer());
    }

    // optional uint32 maxlayer = 5 [default = 0];
    if (has_maxlayer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxlayer());
    }

  }
  // repeated uint32 difficultys = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->difficultys_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->difficultys(i));
    }
    total_size += 1 * this->difficultys_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AEReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AEReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AEReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AEReward::MergeFrom(const AEReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  difficultys_.MergeFrom(from.difficultys_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_weight()) {
      set_weight(from.weight());
    }
    if (from.has_minlayer()) {
      set_minlayer(from.minlayer());
    }
    if (from.has_maxlayer()) {
      set_maxlayer(from.maxlayer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AEReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AEReward::CopyFrom(const AEReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AEReward::IsInitialized() const {

  return true;
}

void AEReward::Swap(AEReward* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(count_, other->count_);
    std::swap(weight_, other->weight_);
    std::swap(minlayer_, other->minlayer_);
    std::swap(maxlayer_, other->maxlayer_);
    difficultys_.Swap(&other->difficultys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AEReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AEReward_descriptor_;
  metadata.reflection = AEReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AEMapPos::kPosFieldNumber;
const int AEMapPos::kRangeFieldNumber;
#endif  // !_MSC_VER

AEMapPos::AEMapPos()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.AEMapPos)
}

void AEMapPos::InitAsDefaultInstance() {
}

AEMapPos::AEMapPos(const AEMapPos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.AEMapPos)
}

void AEMapPos::SharedCtor() {
  _cached_size_ = 0;
  range_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AEMapPos::~AEMapPos() {
  // @@protoc_insertion_point(destructor:Cmd.AEMapPos)
  SharedDtor();
}

void AEMapPos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AEMapPos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AEMapPos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AEMapPos_descriptor_;
}

const AEMapPos& AEMapPos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityEvent_2eproto();
  return *default_instance_;
}

AEMapPos* AEMapPos::default_instance_ = NULL;

AEMapPos* AEMapPos::New() const {
  return new AEMapPos;
}

void AEMapPos::Clear() {
  range_ = 0;
  pos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AEMapPos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.AEMapPos)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float pos = 1;
      case 1: {
        if (tag == 13) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 13, input, this->mutable_pos())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_pos())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(13)) goto parse_pos;
        if (input->ExpectTag(21)) goto parse_range;
        break;
      }

      // optional float range = 2 [default = 0];
      case 2: {
        if (tag == 21) {
         parse_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &range_)));
          set_has_range();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.AEMapPos)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.AEMapPos)
  return false;
#undef DO_
}

void AEMapPos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.AEMapPos)
  // repeated float pos = 1;
  for (int i = 0; i < this->pos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      1, this->pos(i), output);
  }

  // optional float range = 2 [default = 0];
  if (has_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->range(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.AEMapPos)
}

::google::protobuf::uint8* AEMapPos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.AEMapPos)
  // repeated float pos = 1;
  for (int i = 0; i < this->pos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(1, this->pos(i), target);
  }

  // optional float range = 2 [default = 0];
  if (has_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->range(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.AEMapPos)
  return target;
}

int AEMapPos::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional float range = 2 [default = 0];
    if (has_range()) {
      total_size += 1 + 4;
    }

  }
  // repeated float pos = 1;
  {
    int data_size = 0;
    data_size = 4 * this->pos_size();
    total_size += 1 * this->pos_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AEMapPos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AEMapPos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AEMapPos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AEMapPos::MergeFrom(const AEMapPos& from) {
  GOOGLE_CHECK_NE(&from, this);
  pos_.MergeFrom(from.pos_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_range()) {
      set_range(from.range());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AEMapPos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AEMapPos::CopyFrom(const AEMapPos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AEMapPos::IsInitialized() const {

  return true;
}

void AEMapPos::Swap(AEMapPos* other) {
  if (other != this) {
    pos_.Swap(&other->pos_);
    std::swap(range_, other->range_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AEMapPos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AEMapPos_descriptor_;
  metadata.reflection = AEMapPos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AEMap::kIdFieldNumber;
const int AEMap::kDescFieldNumber;
const int AEMap::kCoordFieldNumber;
#endif  // !_MSC_VER

AEMap::AEMap()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.AEMap)
}

void AEMap::InitAsDefaultInstance() {
}

AEMap::AEMap(const AEMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.AEMap)
}

void AEMap::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AEMap::~AEMap() {
  // @@protoc_insertion_point(destructor:Cmd.AEMap)
  SharedDtor();
}

void AEMap::SharedDtor() {
  if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete desc_;
  }
  if (this != default_instance_) {
  }
}

void AEMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AEMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AEMap_descriptor_;
}

const AEMap& AEMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityEvent_2eproto();
  return *default_instance_;
}

AEMap* AEMap::default_instance_ = NULL;

AEMap* AEMap::New() const {
  return new AEMap;
}

void AEMap::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    id_ = 0u;
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        desc_->clear();
      }
    }
  }
  coord_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AEMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.AEMap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_desc;
        break;
      }

      // optional string desc = 2;
      case 2: {
        if (tag == 18) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "desc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_coord;
        break;
      }

      // repeated .Cmd.AEMapPos coord = 3;
      case 3: {
        if (tag == 26) {
         parse_coord:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_coord()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_coord;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.AEMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.AEMap)
  return false;
#undef DO_
}

void AEMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.AEMap)
  // optional uint32 id = 1 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional string desc = 2;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->desc(), output);
  }

  // repeated .Cmd.AEMapPos coord = 3;
  for (int i = 0; i < this->coord_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->coord(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.AEMap)
}

::google::protobuf::uint8* AEMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.AEMap)
  // optional uint32 id = 1 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional string desc = 2;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->desc(), target);
  }

  // repeated .Cmd.AEMapPos coord = 3;
  for (int i = 0; i < this->coord_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->coord(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.AEMap)
  return target;
}

int AEMap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional string desc = 2;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

  }
  // repeated .Cmd.AEMapPos coord = 3;
  total_size += 1 * this->coord_size();
  for (int i = 0; i < this->coord_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->coord(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AEMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AEMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AEMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AEMap::MergeFrom(const AEMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  coord_.MergeFrom(from.coord_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AEMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AEMap::CopyFrom(const AEMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AEMap::IsInitialized() const {

  return true;
}

void AEMap::Swap(AEMap* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(desc_, other->desc_);
    coord_.Swap(&other->coord_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AEMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AEMap_descriptor_;
  metadata.reflection = AEMap_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AEFreeTransferInfo::kMapidsFieldNumber;
const int AEFreeTransferInfo::kAllfreeFieldNumber;
const int AEFreeTransferInfo::kTeammapidsFieldNumber;
const int AEFreeTransferInfo::kTeamallfreeFieldNumber;
const int AEFreeTransferInfo::kStorefreeFieldNumber;
#endif  // !_MSC_VER

AEFreeTransferInfo::AEFreeTransferInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.AEFreeTransferInfo)
}

void AEFreeTransferInfo::InitAsDefaultInstance() {
}

AEFreeTransferInfo::AEFreeTransferInfo(const AEFreeTransferInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.AEFreeTransferInfo)
}

void AEFreeTransferInfo::SharedCtor() {
  _cached_size_ = 0;
  allfree_ = false;
  teamallfree_ = false;
  storefree_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AEFreeTransferInfo::~AEFreeTransferInfo() {
  // @@protoc_insertion_point(destructor:Cmd.AEFreeTransferInfo)
  SharedDtor();
}

void AEFreeTransferInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AEFreeTransferInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AEFreeTransferInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AEFreeTransferInfo_descriptor_;
}

const AEFreeTransferInfo& AEFreeTransferInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityEvent_2eproto();
  return *default_instance_;
}

AEFreeTransferInfo* AEFreeTransferInfo::default_instance_ = NULL;

AEFreeTransferInfo* AEFreeTransferInfo::New() const {
  return new AEFreeTransferInfo;
}

void AEFreeTransferInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AEFreeTransferInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(allfree_, storefree_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  mapids_.Clear();
  teammapids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AEFreeTransferInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.AEFreeTransferInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 mapids = 1;
      case 1: {
        if (tag == 8) {
         parse_mapids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_mapids())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_mapids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_mapids;
        if (input->ExpectTag(16)) goto parse_allfree;
        break;
      }

      // optional bool allfree = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_allfree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allfree_)));
          set_has_allfree();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_teammapids;
        break;
      }

      // repeated uint32 teammapids = 3;
      case 3: {
        if (tag == 24) {
         parse_teammapids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_teammapids())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_teammapids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_teammapids;
        if (input->ExpectTag(32)) goto parse_teamallfree;
        break;
      }

      // optional bool teamallfree = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_teamallfree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &teamallfree_)));
          set_has_teamallfree();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_storefree;
        break;
      }

      // optional bool storefree = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_storefree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &storefree_)));
          set_has_storefree();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.AEFreeTransferInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.AEFreeTransferInfo)
  return false;
#undef DO_
}

void AEFreeTransferInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.AEFreeTransferInfo)
  // repeated uint32 mapids = 1;
  for (int i = 0; i < this->mapids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->mapids(i), output);
  }

  // optional bool allfree = 2 [default = false];
  if (has_allfree()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->allfree(), output);
  }

  // repeated uint32 teammapids = 3;
  for (int i = 0; i < this->teammapids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->teammapids(i), output);
  }

  // optional bool teamallfree = 4 [default = false];
  if (has_teamallfree()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->teamallfree(), output);
  }

  // optional bool storefree = 5 [default = false];
  if (has_storefree()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->storefree(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.AEFreeTransferInfo)
}

::google::protobuf::uint8* AEFreeTransferInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.AEFreeTransferInfo)
  // repeated uint32 mapids = 1;
  for (int i = 0; i < this->mapids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->mapids(i), target);
  }

  // optional bool allfree = 2 [default = false];
  if (has_allfree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->allfree(), target);
  }

  // repeated uint32 teammapids = 3;
  for (int i = 0; i < this->teammapids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->teammapids(i), target);
  }

  // optional bool teamallfree = 4 [default = false];
  if (has_teamallfree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->teamallfree(), target);
  }

  // optional bool storefree = 5 [default = false];
  if (has_storefree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->storefree(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.AEFreeTransferInfo)
  return target;
}

int AEFreeTransferInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bool allfree = 2 [default = false];
    if (has_allfree()) {
      total_size += 1 + 1;
    }

    // optional bool teamallfree = 4 [default = false];
    if (has_teamallfree()) {
      total_size += 1 + 1;
    }

    // optional bool storefree = 5 [default = false];
    if (has_storefree()) {
      total_size += 1 + 1;
    }

  }
  // repeated uint32 mapids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->mapids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->mapids(i));
    }
    total_size += 1 * this->mapids_size() + data_size;
  }

  // repeated uint32 teammapids = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->teammapids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->teammapids(i));
    }
    total_size += 1 * this->teammapids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AEFreeTransferInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AEFreeTransferInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AEFreeTransferInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AEFreeTransferInfo::MergeFrom(const AEFreeTransferInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  mapids_.MergeFrom(from.mapids_);
  teammapids_.MergeFrom(from.teammapids_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_allfree()) {
      set_allfree(from.allfree());
    }
    if (from.has_teamallfree()) {
      set_teamallfree(from.teamallfree());
    }
    if (from.has_storefree()) {
      set_storefree(from.storefree());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AEFreeTransferInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AEFreeTransferInfo::CopyFrom(const AEFreeTransferInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AEFreeTransferInfo::IsInitialized() const {

  return true;
}

void AEFreeTransferInfo::Swap(AEFreeTransferInfo* other) {
  if (other != this) {
    mapids_.Swap(&other->mapids_);
    std::swap(allfree_, other->allfree_);
    teammapids_.Swap(&other->teammapids_);
    std::swap(teamallfree_, other->teamallfree_);
    std::swap(storefree_, other->storefree_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AEFreeTransferInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AEFreeTransferInfo_descriptor_;
  metadata.reflection = AEFreeTransferInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AESummonInfo::kMonsteridFieldNumber;
const int AESummonInfo::kCountFieldNumber;
const int AESummonInfo::kReviveFieldNumber;
const int AESummonInfo::kIscreateFieldNumber;
const int AESummonInfo::kNamezhFieldNumber;
const int AESummonInfo::kNameenFieldNumber;
const int AESummonInfo::kIconFieldNumber;
const int AESummonInfo::kTypeFieldNumber;
const int AESummonInfo::kZoneFieldNumber;
const int AESummonInfo::kRaceFieldNumber;
const int AESummonInfo::kNatureFieldNumber;
const int AESummonInfo::kShapeFieldNumber;
const int AESummonInfo::kBodyFieldNumber;
const int AESummonInfo::kJobexpFieldNumber;
const int AESummonInfo::kBaseexpFieldNumber;
const int AESummonInfo::kStrFieldNumber;
const int AESummonInfo::kDexFieldNumber;
const int AESummonInfo::kInteFieldNumber;
const int AESummonInfo::kVitFieldNumber;
const int AESummonInfo::kAgiFieldNumber;
const int AESummonInfo::kLukFieldNumber;
const int AESummonInfo::kAtkFieldNumber;
const int AESummonInfo::kMatkFieldNumber;
const int AESummonInfo::kDefFieldNumber;
const int AESummonInfo::kMdefFieldNumber;
const int AESummonInfo::kHpFieldNumber;
const int AESummonInfo::kHitFieldNumber;
const int AESummonInfo::kFleeFieldNumber;
const int AESummonInfo::kMovespdFieldNumber;
const int AESummonInfo::kMovespdrateFieldNumber;
const int AESummonInfo::kScaleFieldNumber;
const int AESummonInfo::kNormalskillFieldNumber;
const int AESummonInfo::kRewardidFieldNumber;
const int AESummonInfo::kRewardsFieldNumber;
const int AESummonInfo::kMapFieldNumber;
#endif  // !_MSC_VER

AESummonInfo::AESummonInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.AESummonInfo)
}

void AESummonInfo::InitAsDefaultInstance() {
}

AESummonInfo::AESummonInfo(const AESummonInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.AESummonInfo)
}

void AESummonInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  monsterid_ = 0u;
  count_ = 0u;
  revive_ = false;
  iscreate_ = false;
  namezh_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nameen_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  race_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nature_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  shape_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_ = 0u;
  jobexp_ = 0u;
  baseexp_ = 0u;
  str_ = 0;
  dex_ = 0;
  inte_ = 0;
  vit_ = 0;
  agi_ = 0;
  luk_ = 0;
  atk_ = 0;
  matk_ = 0;
  def_ = 0;
  mdef_ = 0;
  hp_ = 0;
  hit_ = 0;
  flee_ = 0;
  movespd_ = 0;
  movespdrate_ = 0;
  scale_ = 0;
  normalskill_ = 0u;
  rewardid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AESummonInfo::~AESummonInfo() {
  // @@protoc_insertion_point(destructor:Cmd.AESummonInfo)
  SharedDtor();
}

void AESummonInfo::SharedDtor() {
  if (namezh_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete namezh_;
  }
  if (nameen_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nameen_;
  }
  if (icon_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete icon_;
  }
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (zone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete zone_;
  }
  if (race_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete race_;
  }
  if (nature_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nature_;
  }
  if (shape_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete shape_;
  }
  if (this != default_instance_) {
  }
}

void AESummonInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AESummonInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AESummonInfo_descriptor_;
}

const AESummonInfo& AESummonInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityEvent_2eproto();
  return *default_instance_;
}

AESummonInfo* AESummonInfo::default_instance_ = NULL;

AESummonInfo* AESummonInfo::New() const {
  return new AESummonInfo;
}

void AESummonInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AESummonInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(monsterid_, count_);
    ZR_(revive_, iscreate_);
    if (has_namezh()) {
      if (namezh_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        namezh_->clear();
      }
    }
    if (has_nameen()) {
      if (nameen_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nameen_->clear();
      }
    }
    if (has_icon()) {
      if (icon_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        icon_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(jobexp_, str_);
    if (has_zone()) {
      if (zone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        zone_->clear();
      }
    }
    if (has_race()) {
      if (race_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        race_->clear();
      }
    }
    if (has_nature()) {
      if (nature_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nature_->clear();
      }
    }
    if (has_shape()) {
      if (shape_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        shape_->clear();
      }
    }
    body_ = 0u;
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(dex_, def_);
  }
  if (_has_bits_[24 / 32] & 4278190080) {
    ZR_(mdef_, normalskill_);
  }
  rewardid_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  rewards_.Clear();
  map_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AESummonInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.AESummonInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 monsterid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monsterid_)));
          set_has_monsterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional uint32 count = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_revive;
        break;
      }

      // optional bool revive = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_revive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &revive_)));
          set_has_revive();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_iscreate;
        break;
      }

      // optional bool iscreate = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_iscreate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iscreate_)));
          set_has_iscreate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_namezh;
        break;
      }

      // optional string namezh = 5;
      case 5: {
        if (tag == 42) {
         parse_namezh:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_namezh()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->namezh().data(), this->namezh().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "namezh");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_nameen;
        break;
      }

      // optional string nameen = 6;
      case 6: {
        if (tag == 50) {
         parse_nameen:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nameen()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nameen().data(), this->nameen().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nameen");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_icon;
        break;
      }

      // optional string icon = 7;
      case 7: {
        if (tag == 58) {
         parse_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->icon().data(), this->icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "icon");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_type;
        break;
      }

      // optional string type = 8;
      case 8: {
        if (tag == 66) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_zone;
        break;
      }

      // optional string zone = 9;
      case 9: {
        if (tag == 74) {
         parse_zone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->zone().data(), this->zone().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "zone");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_race;
        break;
      }

      // optional string race = 10;
      case 10: {
        if (tag == 82) {
         parse_race:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_race()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->race().data(), this->race().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "race");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_nature;
        break;
      }

      // optional string nature = 11;
      case 11: {
        if (tag == 90) {
         parse_nature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nature()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nature().data(), this->nature().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nature");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_shape;
        break;
      }

      // optional string shape = 12;
      case 12: {
        if (tag == 98) {
         parse_shape:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_shape()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->shape().data(), this->shape().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "shape");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_body;
        break;
      }

      // optional uint32 body = 13 [default = 0];
      case 13: {
        if (tag == 104) {
         parse_body:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &body_)));
          set_has_body();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_jobexp;
        break;
      }

      // optional uint32 jobexp = 14 [default = 0];
      case 14: {
        if (tag == 112) {
         parse_jobexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &jobexp_)));
          set_has_jobexp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_baseexp;
        break;
      }

      // optional uint32 baseexp = 15 [default = 0];
      case 15: {
        if (tag == 120) {
         parse_baseexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &baseexp_)));
          set_has_baseexp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(133)) goto parse_str;
        break;
      }

      // optional float str = 16 [default = 0];
      case 16: {
        if (tag == 133) {
         parse_str:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &str_)));
          set_has_str();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(141)) goto parse_dex;
        break;
      }

      // optional float dex = 17 [default = 0];
      case 17: {
        if (tag == 141) {
         parse_dex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dex_)));
          set_has_dex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(149)) goto parse_inte;
        break;
      }

      // optional float inte = 18 [default = 0];
      case 18: {
        if (tag == 149) {
         parse_inte:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &inte_)));
          set_has_inte();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(157)) goto parse_vit;
        break;
      }

      // optional float vit = 19 [default = 0];
      case 19: {
        if (tag == 157) {
         parse_vit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vit_)));
          set_has_vit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(165)) goto parse_agi;
        break;
      }

      // optional float agi = 20 [default = 0];
      case 20: {
        if (tag == 165) {
         parse_agi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &agi_)));
          set_has_agi();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(173)) goto parse_luk;
        break;
      }

      // optional float luk = 21 [default = 0];
      case 21: {
        if (tag == 173) {
         parse_luk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &luk_)));
          set_has_luk();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(181)) goto parse_atk;
        break;
      }

      // optional float atk = 22 [default = 0];
      case 22: {
        if (tag == 181) {
         parse_atk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &atk_)));
          set_has_atk();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(189)) goto parse_matk;
        break;
      }

      // optional float matk = 23 [default = 0];
      case 23: {
        if (tag == 189) {
         parse_matk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &matk_)));
          set_has_matk();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(197)) goto parse_def;
        break;
      }

      // optional float def = 24 [default = 0];
      case 24: {
        if (tag == 197) {
         parse_def:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &def_)));
          set_has_def();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(205)) goto parse_mdef;
        break;
      }

      // optional float mdef = 25 [default = 0];
      case 25: {
        if (tag == 205) {
         parse_mdef:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mdef_)));
          set_has_mdef();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(213)) goto parse_hp;
        break;
      }

      // optional float hp = 26 [default = 0];
      case 26: {
        if (tag == 213) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(221)) goto parse_hit;
        break;
      }

      // optional float hit = 27 [default = 0];
      case 27: {
        if (tag == 221) {
         parse_hit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hit_)));
          set_has_hit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(229)) goto parse_flee;
        break;
      }

      // optional float flee = 28 [default = 0];
      case 28: {
        if (tag == 229) {
         parse_flee:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &flee_)));
          set_has_flee();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(237)) goto parse_movespd;
        break;
      }

      // optional float movespd = 29 [default = 0];
      case 29: {
        if (tag == 237) {
         parse_movespd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &movespd_)));
          set_has_movespd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(245)) goto parse_movespdrate;
        break;
      }

      // optional float movespdrate = 30 [default = 0];
      case 30: {
        if (tag == 245) {
         parse_movespdrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &movespdrate_)));
          set_has_movespdrate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(253)) goto parse_scale;
        break;
      }

      // optional float scale = 31 [default = 0];
      case 31: {
        if (tag == 253) {
         parse_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
          set_has_scale();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_normalskill;
        break;
      }

      // optional uint32 normalskill = 32 [default = 0];
      case 32: {
        if (tag == 256) {
         parse_normalskill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &normalskill_)));
          set_has_normalskill();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_rewardid;
        break;
      }

      // optional uint32 rewardid = 33 [default = 0];
      case 33: {
        if (tag == 264) {
         parse_rewardid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rewardid_)));
          set_has_rewardid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(274)) goto parse_rewards;
        break;
      }

      // repeated .Cmd.AEReward rewards = 34;
      case 34: {
        if (tag == 274) {
         parse_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(274)) goto parse_rewards;
        if (input->ExpectTag(282)) goto parse_map;
        break;
      }

      // repeated .Cmd.AEMap map = 35;
      case 35: {
        if (tag == 282) {
         parse_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_map()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(282)) goto parse_map;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.AESummonInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.AESummonInfo)
  return false;
#undef DO_
}

void AESummonInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.AESummonInfo)
  // optional uint32 monsterid = 1 [default = 0];
  if (has_monsterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->monsterid(), output);
  }

  // optional uint32 count = 2 [default = 0];
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // optional bool revive = 3 [default = false];
  if (has_revive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->revive(), output);
  }

  // optional bool iscreate = 4 [default = false];
  if (has_iscreate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->iscreate(), output);
  }

  // optional string namezh = 5;
  if (has_namezh()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->namezh().data(), this->namezh().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "namezh");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->namezh(), output);
  }

  // optional string nameen = 6;
  if (has_nameen()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nameen().data(), this->nameen().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nameen");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->nameen(), output);
  }

  // optional string icon = 7;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "icon");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->icon(), output);
  }

  // optional string type = 8;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->type(), output);
  }

  // optional string zone = 9;
  if (has_zone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->zone().data(), this->zone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "zone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->zone(), output);
  }

  // optional string race = 10;
  if (has_race()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->race().data(), this->race().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "race");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->race(), output);
  }

  // optional string nature = 11;
  if (has_nature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nature().data(), this->nature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nature");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->nature(), output);
  }

  // optional string shape = 12;
  if (has_shape()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->shape().data(), this->shape().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "shape");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->shape(), output);
  }

  // optional uint32 body = 13 [default = 0];
  if (has_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->body(), output);
  }

  // optional uint32 jobexp = 14 [default = 0];
  if (has_jobexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->jobexp(), output);
  }

  // optional uint32 baseexp = 15 [default = 0];
  if (has_baseexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->baseexp(), output);
  }

  // optional float str = 16 [default = 0];
  if (has_str()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->str(), output);
  }

  // optional float dex = 17 [default = 0];
  if (has_dex()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->dex(), output);
  }

  // optional float inte = 18 [default = 0];
  if (has_inte()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->inte(), output);
  }

  // optional float vit = 19 [default = 0];
  if (has_vit()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->vit(), output);
  }

  // optional float agi = 20 [default = 0];
  if (has_agi()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->agi(), output);
  }

  // optional float luk = 21 [default = 0];
  if (has_luk()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->luk(), output);
  }

  // optional float atk = 22 [default = 0];
  if (has_atk()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->atk(), output);
  }

  // optional float matk = 23 [default = 0];
  if (has_matk()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(23, this->matk(), output);
  }

  // optional float def = 24 [default = 0];
  if (has_def()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->def(), output);
  }

  // optional float mdef = 25 [default = 0];
  if (has_mdef()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(25, this->mdef(), output);
  }

  // optional float hp = 26 [default = 0];
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(26, this->hp(), output);
  }

  // optional float hit = 27 [default = 0];
  if (has_hit()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(27, this->hit(), output);
  }

  // optional float flee = 28 [default = 0];
  if (has_flee()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(28, this->flee(), output);
  }

  // optional float movespd = 29 [default = 0];
  if (has_movespd()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(29, this->movespd(), output);
  }

  // optional float movespdrate = 30 [default = 0];
  if (has_movespdrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(30, this->movespdrate(), output);
  }

  // optional float scale = 31 [default = 0];
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(31, this->scale(), output);
  }

  // optional uint32 normalskill = 32 [default = 0];
  if (has_normalskill()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->normalskill(), output);
  }

  // optional uint32 rewardid = 33 [default = 0];
  if (has_rewardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->rewardid(), output);
  }

  // repeated .Cmd.AEReward rewards = 34;
  for (int i = 0; i < this->rewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, this->rewards(i), output);
  }

  // repeated .Cmd.AEMap map = 35;
  for (int i = 0; i < this->map_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      35, this->map(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.AESummonInfo)
}

::google::protobuf::uint8* AESummonInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.AESummonInfo)
  // optional uint32 monsterid = 1 [default = 0];
  if (has_monsterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->monsterid(), target);
  }

  // optional uint32 count = 2 [default = 0];
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // optional bool revive = 3 [default = false];
  if (has_revive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->revive(), target);
  }

  // optional bool iscreate = 4 [default = false];
  if (has_iscreate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->iscreate(), target);
  }

  // optional string namezh = 5;
  if (has_namezh()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->namezh().data(), this->namezh().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "namezh");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->namezh(), target);
  }

  // optional string nameen = 6;
  if (has_nameen()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nameen().data(), this->nameen().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nameen");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->nameen(), target);
  }

  // optional string icon = 7;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "icon");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->icon(), target);
  }

  // optional string type = 8;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->type(), target);
  }

  // optional string zone = 9;
  if (has_zone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->zone().data(), this->zone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "zone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->zone(), target);
  }

  // optional string race = 10;
  if (has_race()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->race().data(), this->race().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "race");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->race(), target);
  }

  // optional string nature = 11;
  if (has_nature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nature().data(), this->nature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nature");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->nature(), target);
  }

  // optional string shape = 12;
  if (has_shape()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->shape().data(), this->shape().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "shape");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->shape(), target);
  }

  // optional uint32 body = 13 [default = 0];
  if (has_body()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->body(), target);
  }

  // optional uint32 jobexp = 14 [default = 0];
  if (has_jobexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->jobexp(), target);
  }

  // optional uint32 baseexp = 15 [default = 0];
  if (has_baseexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->baseexp(), target);
  }

  // optional float str = 16 [default = 0];
  if (has_str()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->str(), target);
  }

  // optional float dex = 17 [default = 0];
  if (has_dex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->dex(), target);
  }

  // optional float inte = 18 [default = 0];
  if (has_inte()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->inte(), target);
  }

  // optional float vit = 19 [default = 0];
  if (has_vit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->vit(), target);
  }

  // optional float agi = 20 [default = 0];
  if (has_agi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->agi(), target);
  }

  // optional float luk = 21 [default = 0];
  if (has_luk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(21, this->luk(), target);
  }

  // optional float atk = 22 [default = 0];
  if (has_atk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(22, this->atk(), target);
  }

  // optional float matk = 23 [default = 0];
  if (has_matk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(23, this->matk(), target);
  }

  // optional float def = 24 [default = 0];
  if (has_def()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(24, this->def(), target);
  }

  // optional float mdef = 25 [default = 0];
  if (has_mdef()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(25, this->mdef(), target);
  }

  // optional float hp = 26 [default = 0];
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(26, this->hp(), target);
  }

  // optional float hit = 27 [default = 0];
  if (has_hit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(27, this->hit(), target);
  }

  // optional float flee = 28 [default = 0];
  if (has_flee()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(28, this->flee(), target);
  }

  // optional float movespd = 29 [default = 0];
  if (has_movespd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(29, this->movespd(), target);
  }

  // optional float movespdrate = 30 [default = 0];
  if (has_movespdrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(30, this->movespdrate(), target);
  }

  // optional float scale = 31 [default = 0];
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(31, this->scale(), target);
  }

  // optional uint32 normalskill = 32 [default = 0];
  if (has_normalskill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->normalskill(), target);
  }

  // optional uint32 rewardid = 33 [default = 0];
  if (has_rewardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(33, this->rewardid(), target);
  }

  // repeated .Cmd.AEReward rewards = 34;
  for (int i = 0; i < this->rewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        34, this->rewards(i), target);
  }

  // repeated .Cmd.AEMap map = 35;
  for (int i = 0; i < this->map_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        35, this->map(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.AESummonInfo)
  return target;
}

int AESummonInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 monsterid = 1 [default = 0];
    if (has_monsterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monsterid());
    }

    // optional uint32 count = 2 [default = 0];
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional bool revive = 3 [default = false];
    if (has_revive()) {
      total_size += 1 + 1;
    }

    // optional bool iscreate = 4 [default = false];
    if (has_iscreate()) {
      total_size += 1 + 1;
    }

    // optional string namezh = 5;
    if (has_namezh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->namezh());
    }

    // optional string nameen = 6;
    if (has_nameen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nameen());
    }

    // optional string icon = 7;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }

    // optional string type = 8;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string zone = 9;
    if (has_zone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->zone());
    }

    // optional string race = 10;
    if (has_race()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->race());
    }

    // optional string nature = 11;
    if (has_nature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nature());
    }

    // optional string shape = 12;
    if (has_shape()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->shape());
    }

    // optional uint32 body = 13 [default = 0];
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->body());
    }

    // optional uint32 jobexp = 14 [default = 0];
    if (has_jobexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->jobexp());
    }

    // optional uint32 baseexp = 15 [default = 0];
    if (has_baseexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->baseexp());
    }

    // optional float str = 16 [default = 0];
    if (has_str()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional float dex = 17 [default = 0];
    if (has_dex()) {
      total_size += 2 + 4;
    }

    // optional float inte = 18 [default = 0];
    if (has_inte()) {
      total_size += 2 + 4;
    }

    // optional float vit = 19 [default = 0];
    if (has_vit()) {
      total_size += 2 + 4;
    }

    // optional float agi = 20 [default = 0];
    if (has_agi()) {
      total_size += 2 + 4;
    }

    // optional float luk = 21 [default = 0];
    if (has_luk()) {
      total_size += 2 + 4;
    }

    // optional float atk = 22 [default = 0];
    if (has_atk()) {
      total_size += 2 + 4;
    }

    // optional float matk = 23 [default = 0];
    if (has_matk()) {
      total_size += 2 + 4;
    }

    // optional float def = 24 [default = 0];
    if (has_def()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional float mdef = 25 [default = 0];
    if (has_mdef()) {
      total_size += 2 + 4;
    }

    // optional float hp = 26 [default = 0];
    if (has_hp()) {
      total_size += 2 + 4;
    }

    // optional float hit = 27 [default = 0];
    if (has_hit()) {
      total_size += 2 + 4;
    }

    // optional float flee = 28 [default = 0];
    if (has_flee()) {
      total_size += 2 + 4;
    }

    // optional float movespd = 29 [default = 0];
    if (has_movespd()) {
      total_size += 2 + 4;
    }

    // optional float movespdrate = 30 [default = 0];
    if (has_movespdrate()) {
      total_size += 2 + 4;
    }

    // optional float scale = 31 [default = 0];
    if (has_scale()) {
      total_size += 2 + 4;
    }

    // optional uint32 normalskill = 32 [default = 0];
    if (has_normalskill()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->normalskill());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional uint32 rewardid = 33 [default = 0];
    if (has_rewardid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rewardid());
    }

  }
  // repeated .Cmd.AEReward rewards = 34;
  total_size += 2 * this->rewards_size();
  for (int i = 0; i < this->rewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewards(i));
  }

  // repeated .Cmd.AEMap map = 35;
  total_size += 2 * this->map_size();
  for (int i = 0; i < this->map_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->map(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AESummonInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AESummonInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AESummonInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AESummonInfo::MergeFrom(const AESummonInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewards_.MergeFrom(from.rewards_);
  map_.MergeFrom(from.map_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_monsterid()) {
      set_monsterid(from.monsterid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_revive()) {
      set_revive(from.revive());
    }
    if (from.has_iscreate()) {
      set_iscreate(from.iscreate());
    }
    if (from.has_namezh()) {
      set_namezh(from.namezh());
    }
    if (from.has_nameen()) {
      set_nameen(from.nameen());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_zone()) {
      set_zone(from.zone());
    }
    if (from.has_race()) {
      set_race(from.race());
    }
    if (from.has_nature()) {
      set_nature(from.nature());
    }
    if (from.has_shape()) {
      set_shape(from.shape());
    }
    if (from.has_body()) {
      set_body(from.body());
    }
    if (from.has_jobexp()) {
      set_jobexp(from.jobexp());
    }
    if (from.has_baseexp()) {
      set_baseexp(from.baseexp());
    }
    if (from.has_str()) {
      set_str(from.str());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_dex()) {
      set_dex(from.dex());
    }
    if (from.has_inte()) {
      set_inte(from.inte());
    }
    if (from.has_vit()) {
      set_vit(from.vit());
    }
    if (from.has_agi()) {
      set_agi(from.agi());
    }
    if (from.has_luk()) {
      set_luk(from.luk());
    }
    if (from.has_atk()) {
      set_atk(from.atk());
    }
    if (from.has_matk()) {
      set_matk(from.matk());
    }
    if (from.has_def()) {
      set_def(from.def());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_mdef()) {
      set_mdef(from.mdef());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_hit()) {
      set_hit(from.hit());
    }
    if (from.has_flee()) {
      set_flee(from.flee());
    }
    if (from.has_movespd()) {
      set_movespd(from.movespd());
    }
    if (from.has_movespdrate()) {
      set_movespdrate(from.movespdrate());
    }
    if (from.has_scale()) {
      set_scale(from.scale());
    }
    if (from.has_normalskill()) {
      set_normalskill(from.normalskill());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_rewardid()) {
      set_rewardid(from.rewardid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AESummonInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AESummonInfo::CopyFrom(const AESummonInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AESummonInfo::IsInitialized() const {

  return true;
}

void AESummonInfo::Swap(AESummonInfo* other) {
  if (other != this) {
    std::swap(monsterid_, other->monsterid_);
    std::swap(count_, other->count_);
    std::swap(revive_, other->revive_);
    std::swap(iscreate_, other->iscreate_);
    std::swap(namezh_, other->namezh_);
    std::swap(nameen_, other->nameen_);
    std::swap(icon_, other->icon_);
    std::swap(type_, other->type_);
    std::swap(zone_, other->zone_);
    std::swap(race_, other->race_);
    std::swap(nature_, other->nature_);
    std::swap(shape_, other->shape_);
    std::swap(body_, other->body_);
    std::swap(jobexp_, other->jobexp_);
    std::swap(baseexp_, other->baseexp_);
    std::swap(str_, other->str_);
    std::swap(dex_, other->dex_);
    std::swap(inte_, other->inte_);
    std::swap(vit_, other->vit_);
    std::swap(agi_, other->agi_);
    std::swap(luk_, other->luk_);
    std::swap(atk_, other->atk_);
    std::swap(matk_, other->matk_);
    std::swap(def_, other->def_);
    std::swap(mdef_, other->mdef_);
    std::swap(hp_, other->hp_);
    std::swap(hit_, other->hit_);
    std::swap(flee_, other->flee_);
    std::swap(movespd_, other->movespd_);
    std::swap(movespdrate_, other->movespdrate_);
    std::swap(scale_, other->scale_);
    std::swap(normalskill_, other->normalskill_);
    std::swap(rewardid_, other->rewardid_);
    rewards_.Swap(&other->rewards_);
    map_.Swap(&other->map_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AESummonInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AESummonInfo_descriptor_;
  metadata.reflection = AESummonInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AERewardExtraInfo::kRewardsFieldNumber;
const int AERewardExtraInfo::kFinishcountFieldNumber;
const int AERewardExtraInfo::kDaylimitFieldNumber;
const int AERewardExtraInfo::kAcclimitFieldNumber;
#endif  // !_MSC_VER

AERewardExtraInfo::AERewardExtraInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.AERewardExtraInfo)
}

void AERewardExtraInfo::InitAsDefaultInstance() {
}

AERewardExtraInfo::AERewardExtraInfo(const AERewardExtraInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.AERewardExtraInfo)
}

void AERewardExtraInfo::SharedCtor() {
  _cached_size_ = 0;
  finishcount_ = 0u;
  daylimit_ = 0u;
  acclimit_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AERewardExtraInfo::~AERewardExtraInfo() {
  // @@protoc_insertion_point(destructor:Cmd.AERewardExtraInfo)
  SharedDtor();
}

void AERewardExtraInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AERewardExtraInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AERewardExtraInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AERewardExtraInfo_descriptor_;
}

const AERewardExtraInfo& AERewardExtraInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityEvent_2eproto();
  return *default_instance_;
}

AERewardExtraInfo* AERewardExtraInfo::default_instance_ = NULL;

AERewardExtraInfo* AERewardExtraInfo::New() const {
  return new AERewardExtraInfo;
}

void AERewardExtraInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AERewardExtraInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(finishcount_, acclimit_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  rewards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AERewardExtraInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.AERewardExtraInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Cmd.AEReward rewards = 1;
      case 1: {
        if (tag == 10) {
         parse_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_rewards;
        if (input->ExpectTag(16)) goto parse_finishcount;
        break;
      }

      // optional uint32 finishcount = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_finishcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &finishcount_)));
          set_has_finishcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_daylimit;
        break;
      }

      // optional uint32 daylimit = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_daylimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &daylimit_)));
          set_has_daylimit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_acclimit;
        break;
      }

      // optional bool acclimit = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_acclimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &acclimit_)));
          set_has_acclimit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.AERewardExtraInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.AERewardExtraInfo)
  return false;
#undef DO_
}

void AERewardExtraInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.AERewardExtraInfo)
  // repeated .Cmd.AEReward rewards = 1;
  for (int i = 0; i < this->rewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewards(i), output);
  }

  // optional uint32 finishcount = 2 [default = 0];
  if (has_finishcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->finishcount(), output);
  }

  // optional uint32 daylimit = 3 [default = 0];
  if (has_daylimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->daylimit(), output);
  }

  // optional bool acclimit = 4 [default = false];
  if (has_acclimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->acclimit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.AERewardExtraInfo)
}

::google::protobuf::uint8* AERewardExtraInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.AERewardExtraInfo)
  // repeated .Cmd.AEReward rewards = 1;
  for (int i = 0; i < this->rewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rewards(i), target);
  }

  // optional uint32 finishcount = 2 [default = 0];
  if (has_finishcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->finishcount(), target);
  }

  // optional uint32 daylimit = 3 [default = 0];
  if (has_daylimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->daylimit(), target);
  }

  // optional bool acclimit = 4 [default = false];
  if (has_acclimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->acclimit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.AERewardExtraInfo)
  return target;
}

int AERewardExtraInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 finishcount = 2 [default = 0];
    if (has_finishcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->finishcount());
    }

    // optional uint32 daylimit = 3 [default = 0];
    if (has_daylimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->daylimit());
    }

    // optional bool acclimit = 4 [default = false];
    if (has_acclimit()) {
      total_size += 1 + 1;
    }

  }
  // repeated .Cmd.AEReward rewards = 1;
  total_size += 1 * this->rewards_size();
  for (int i = 0; i < this->rewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AERewardExtraInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AERewardExtraInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AERewardExtraInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AERewardExtraInfo::MergeFrom(const AERewardExtraInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewards_.MergeFrom(from.rewards_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_finishcount()) {
      set_finishcount(from.finishcount());
    }
    if (from.has_daylimit()) {
      set_daylimit(from.daylimit());
    }
    if (from.has_acclimit()) {
      set_acclimit(from.acclimit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AERewardExtraInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AERewardExtraInfo::CopyFrom(const AERewardExtraInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AERewardExtraInfo::IsInitialized() const {

  return true;
}

void AERewardExtraInfo::Swap(AERewardExtraInfo* other) {
  if (other != this) {
    rewards_.Swap(&other->rewards_);
    std::swap(finishcount_, other->finishcount_);
    std::swap(daylimit_, other->daylimit_);
    std::swap(acclimit_, other->acclimit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AERewardExtraInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AERewardExtraInfo_descriptor_;
  metadata.reflection = AERewardExtraInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AERewardMultipleInfo::kMultipleFieldNumber;
const int AERewardMultipleInfo::kFinishcountFieldNumber;
const int AERewardMultipleInfo::kDaylimitFieldNumber;
const int AERewardMultipleInfo::kAcclimitFieldNumber;
#endif  // !_MSC_VER

AERewardMultipleInfo::AERewardMultipleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.AERewardMultipleInfo)
}

void AERewardMultipleInfo::InitAsDefaultInstance() {
}

AERewardMultipleInfo::AERewardMultipleInfo(const AERewardMultipleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.AERewardMultipleInfo)
}

void AERewardMultipleInfo::SharedCtor() {
  _cached_size_ = 0;
  multiple_ = 1u;
  finishcount_ = 0u;
  daylimit_ = 0u;
  acclimit_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AERewardMultipleInfo::~AERewardMultipleInfo() {
  // @@protoc_insertion_point(destructor:Cmd.AERewardMultipleInfo)
  SharedDtor();
}

void AERewardMultipleInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AERewardMultipleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AERewardMultipleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AERewardMultipleInfo_descriptor_;
}

const AERewardMultipleInfo& AERewardMultipleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityEvent_2eproto();
  return *default_instance_;
}

AERewardMultipleInfo* AERewardMultipleInfo::default_instance_ = NULL;

AERewardMultipleInfo* AERewardMultipleInfo::New() const {
  return new AERewardMultipleInfo;
}

void AERewardMultipleInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AERewardMultipleInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(finishcount_, acclimit_);
    multiple_ = 1u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AERewardMultipleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.AERewardMultipleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 multiple = 1 [default = 1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &multiple_)));
          set_has_multiple();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_finishcount;
        break;
      }

      // optional uint32 finishcount = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_finishcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &finishcount_)));
          set_has_finishcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_daylimit;
        break;
      }

      // optional uint32 daylimit = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_daylimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &daylimit_)));
          set_has_daylimit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_acclimit;
        break;
      }

      // optional bool acclimit = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_acclimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &acclimit_)));
          set_has_acclimit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.AERewardMultipleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.AERewardMultipleInfo)
  return false;
#undef DO_
}

void AERewardMultipleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.AERewardMultipleInfo)
  // optional uint32 multiple = 1 [default = 1];
  if (has_multiple()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->multiple(), output);
  }

  // optional uint32 finishcount = 2 [default = 0];
  if (has_finishcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->finishcount(), output);
  }

  // optional uint32 daylimit = 3 [default = 0];
  if (has_daylimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->daylimit(), output);
  }

  // optional bool acclimit = 4 [default = false];
  if (has_acclimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->acclimit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.AERewardMultipleInfo)
}

::google::protobuf::uint8* AERewardMultipleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.AERewardMultipleInfo)
  // optional uint32 multiple = 1 [default = 1];
  if (has_multiple()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->multiple(), target);
  }

  // optional uint32 finishcount = 2 [default = 0];
  if (has_finishcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->finishcount(), target);
  }

  // optional uint32 daylimit = 3 [default = 0];
  if (has_daylimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->daylimit(), target);
  }

  // optional bool acclimit = 4 [default = false];
  if (has_acclimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->acclimit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.AERewardMultipleInfo)
  return target;
}

int AERewardMultipleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 multiple = 1 [default = 1];
    if (has_multiple()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->multiple());
    }

    // optional uint32 finishcount = 2 [default = 0];
    if (has_finishcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->finishcount());
    }

    // optional uint32 daylimit = 3 [default = 0];
    if (has_daylimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->daylimit());
    }

    // optional bool acclimit = 4 [default = false];
    if (has_acclimit()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AERewardMultipleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AERewardMultipleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AERewardMultipleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AERewardMultipleInfo::MergeFrom(const AERewardMultipleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_multiple()) {
      set_multiple(from.multiple());
    }
    if (from.has_finishcount()) {
      set_finishcount(from.finishcount());
    }
    if (from.has_daylimit()) {
      set_daylimit(from.daylimit());
    }
    if (from.has_acclimit()) {
      set_acclimit(from.acclimit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AERewardMultipleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AERewardMultipleInfo::CopyFrom(const AERewardMultipleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AERewardMultipleInfo::IsInitialized() const {

  return true;
}

void AERewardMultipleInfo::Swap(AERewardMultipleInfo* other) {
  if (other != this) {
    std::swap(multiple_, other->multiple_);
    std::swap(finishcount_, other->finishcount_);
    std::swap(daylimit_, other->daylimit_);
    std::swap(acclimit_, other->acclimit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AERewardMultipleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AERewardMultipleInfo_descriptor_;
  metadata.reflection = AERewardMultipleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AERewardInfo::kModeFieldNumber;
const int AERewardInfo::kExtrarewardFieldNumber;
const int AERewardInfo::kMultiplerewardFieldNumber;
const int AERewardInfo::kExtratimesFieldNumber;
#endif  // !_MSC_VER

AERewardInfo::AERewardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.AERewardInfo)
}

void AERewardInfo::InitAsDefaultInstance() {
  extrareward_ = const_cast< ::Cmd::AERewardExtraInfo*>(&::Cmd::AERewardExtraInfo::default_instance());
  multiplereward_ = const_cast< ::Cmd::AERewardMultipleInfo*>(&::Cmd::AERewardMultipleInfo::default_instance());
}

AERewardInfo::AERewardInfo(const AERewardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.AERewardInfo)
}

void AERewardInfo::SharedCtor() {
  _cached_size_ = 0;
  mode_ = 0;
  extrareward_ = NULL;
  multiplereward_ = NULL;
  extratimes_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AERewardInfo::~AERewardInfo() {
  // @@protoc_insertion_point(destructor:Cmd.AERewardInfo)
  SharedDtor();
}

void AERewardInfo::SharedDtor() {
  if (this != default_instance_) {
    delete extrareward_;
    delete multiplereward_;
  }
}

void AERewardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AERewardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AERewardInfo_descriptor_;
}

const AERewardInfo& AERewardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityEvent_2eproto();
  return *default_instance_;
}

AERewardInfo* AERewardInfo::default_instance_ = NULL;

AERewardInfo* AERewardInfo::New() const {
  return new AERewardInfo;
}

void AERewardInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AERewardInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(mode_, extratimes_);
    if (has_extrareward()) {
      if (extrareward_ != NULL) extrareward_->::Cmd::AERewardExtraInfo::Clear();
    }
    if (has_multiplereward()) {
      if (multiplereward_ != NULL) multiplereward_->::Cmd::AERewardMultipleInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AERewardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.AERewardInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.EAERewardMode mode = 1 [default = EAEREWARDMODE_MIN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EAERewardMode_IsValid(value)) {
            set_mode(static_cast< ::Cmd::EAERewardMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_extrareward;
        break;
      }

      // optional .Cmd.AERewardExtraInfo extrareward = 2;
      case 2: {
        if (tag == 18) {
         parse_extrareward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_extrareward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_multiplereward;
        break;
      }

      // optional .Cmd.AERewardMultipleInfo multiplereward = 3;
      case 3: {
        if (tag == 26) {
         parse_multiplereward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_multiplereward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_extratimes;
        break;
      }

      // optional uint32 extratimes = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_extratimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &extratimes_)));
          set_has_extratimes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.AERewardInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.AERewardInfo)
  return false;
#undef DO_
}

void AERewardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.AERewardInfo)
  // optional .Cmd.EAERewardMode mode = 1 [default = EAEREWARDMODE_MIN];
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mode(), output);
  }

  // optional .Cmd.AERewardExtraInfo extrareward = 2;
  if (has_extrareward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->extrareward(), output);
  }

  // optional .Cmd.AERewardMultipleInfo multiplereward = 3;
  if (has_multiplereward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->multiplereward(), output);
  }

  // optional uint32 extratimes = 4 [default = 0];
  if (has_extratimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->extratimes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.AERewardInfo)
}

::google::protobuf::uint8* AERewardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.AERewardInfo)
  // optional .Cmd.EAERewardMode mode = 1 [default = EAEREWARDMODE_MIN];
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mode(), target);
  }

  // optional .Cmd.AERewardExtraInfo extrareward = 2;
  if (has_extrareward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->extrareward(), target);
  }

  // optional .Cmd.AERewardMultipleInfo multiplereward = 3;
  if (has_multiplereward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->multiplereward(), target);
  }

  // optional uint32 extratimes = 4 [default = 0];
  if (has_extratimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->extratimes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.AERewardInfo)
  return target;
}

int AERewardInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.EAERewardMode mode = 1 [default = EAEREWARDMODE_MIN];
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }

    // optional .Cmd.AERewardExtraInfo extrareward = 2;
    if (has_extrareward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->extrareward());
    }

    // optional .Cmd.AERewardMultipleInfo multiplereward = 3;
    if (has_multiplereward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->multiplereward());
    }

    // optional uint32 extratimes = 4 [default = 0];
    if (has_extratimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->extratimes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AERewardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AERewardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AERewardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AERewardInfo::MergeFrom(const AERewardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_extrareward()) {
      mutable_extrareward()->::Cmd::AERewardExtraInfo::MergeFrom(from.extrareward());
    }
    if (from.has_multiplereward()) {
      mutable_multiplereward()->::Cmd::AERewardMultipleInfo::MergeFrom(from.multiplereward());
    }
    if (from.has_extratimes()) {
      set_extratimes(from.extratimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AERewardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AERewardInfo::CopyFrom(const AERewardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AERewardInfo::IsInitialized() const {

  return true;
}

void AERewardInfo::Swap(AERewardInfo* other) {
  if (other != this) {
    std::swap(mode_, other->mode_);
    std::swap(extrareward_, other->extrareward_);
    std::swap(multiplereward_, other->multiplereward_);
    std::swap(extratimes_, other->extratimes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AERewardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AERewardInfo_descriptor_;
  metadata.reflection = AERewardInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AELotteryDiscount::kLotterytypeFieldNumber;
const int AELotteryDiscount::kCointypeFieldNumber;
const int AELotteryDiscount::kUsertypeFieldNumber;
const int AELotteryDiscount::kDiscountFieldNumber;
const int AELotteryDiscount::kCountFieldNumber;
const int AELotteryDiscount::kYearmonthFieldNumber;
#endif  // !_MSC_VER

AELotteryDiscount::AELotteryDiscount()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.AELotteryDiscount)
}

void AELotteryDiscount::InitAsDefaultInstance() {
}

AELotteryDiscount::AELotteryDiscount(const AELotteryDiscount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.AELotteryDiscount)
}

void AELotteryDiscount::SharedCtor() {
  _cached_size_ = 0;
  lotterytype_ = 0;
  cointype_ = 0;
  usertype_ = 1;
  discount_ = 0u;
  count_ = 0u;
  yearmonth_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AELotteryDiscount::~AELotteryDiscount() {
  // @@protoc_insertion_point(destructor:Cmd.AELotteryDiscount)
  SharedDtor();
}

void AELotteryDiscount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AELotteryDiscount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AELotteryDiscount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AELotteryDiscount_descriptor_;
}

const AELotteryDiscount& AELotteryDiscount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityEvent_2eproto();
  return *default_instance_;
}

AELotteryDiscount* AELotteryDiscount::default_instance_ = NULL;

AELotteryDiscount* AELotteryDiscount::New() const {
  return new AELotteryDiscount;
}

void AELotteryDiscount::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AELotteryDiscount*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(lotterytype_, cointype_);
    ZR_(discount_, yearmonth_);
    usertype_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AELotteryDiscount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.AELotteryDiscount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.ELotteryType lotterytype = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ELotteryType_IsValid(value)) {
            set_lotterytype(static_cast< ::Cmd::ELotteryType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cointype;
        break;
      }

      // optional .Cmd.ECoinType cointype = 2;
      case 2: {
        if (tag == 16) {
         parse_cointype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ECoinType_IsValid(value)) {
            set_cointype(static_cast< ::Cmd::ECoinType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_usertype;
        break;
      }

      // optional .Cmd.EUserType usertype = 3;
      case 3: {
        if (tag == 24) {
         parse_usertype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EUserType_IsValid(value)) {
            set_usertype(static_cast< ::Cmd::EUserType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_discount;
        break;
      }

      // optional uint32 discount = 4;
      case 4: {
        if (tag == 32) {
         parse_discount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &discount_)));
          set_has_discount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_count;
        break;
      }

      // optional uint32 count = 5;
      case 5: {
        if (tag == 40) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_yearmonth;
        break;
      }

      // optional uint32 yearmonth = 7;
      case 7: {
        if (tag == 56) {
         parse_yearmonth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &yearmonth_)));
          set_has_yearmonth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.AELotteryDiscount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.AELotteryDiscount)
  return false;
#undef DO_
}

void AELotteryDiscount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.AELotteryDiscount)
  // optional .Cmd.ELotteryType lotterytype = 1;
  if (has_lotterytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->lotterytype(), output);
  }

  // optional .Cmd.ECoinType cointype = 2;
  if (has_cointype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->cointype(), output);
  }

  // optional .Cmd.EUserType usertype = 3;
  if (has_usertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->usertype(), output);
  }

  // optional uint32 discount = 4;
  if (has_discount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->discount(), output);
  }

  // optional uint32 count = 5;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->count(), output);
  }

  // optional uint32 yearmonth = 7;
  if (has_yearmonth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->yearmonth(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.AELotteryDiscount)
}

::google::protobuf::uint8* AELotteryDiscount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.AELotteryDiscount)
  // optional .Cmd.ELotteryType lotterytype = 1;
  if (has_lotterytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->lotterytype(), target);
  }

  // optional .Cmd.ECoinType cointype = 2;
  if (has_cointype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->cointype(), target);
  }

  // optional .Cmd.EUserType usertype = 3;
  if (has_usertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->usertype(), target);
  }

  // optional uint32 discount = 4;
  if (has_discount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->discount(), target);
  }

  // optional uint32 count = 5;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->count(), target);
  }

  // optional uint32 yearmonth = 7;
  if (has_yearmonth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->yearmonth(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.AELotteryDiscount)
  return target;
}

int AELotteryDiscount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.ELotteryType lotterytype = 1;
    if (has_lotterytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->lotterytype());
    }

    // optional .Cmd.ECoinType cointype = 2;
    if (has_cointype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cointype());
    }

    // optional .Cmd.EUserType usertype = 3;
    if (has_usertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->usertype());
    }

    // optional uint32 discount = 4;
    if (has_discount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->discount());
    }

    // optional uint32 count = 5;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional uint32 yearmonth = 7;
    if (has_yearmonth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->yearmonth());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AELotteryDiscount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AELotteryDiscount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AELotteryDiscount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AELotteryDiscount::MergeFrom(const AELotteryDiscount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lotterytype()) {
      set_lotterytype(from.lotterytype());
    }
    if (from.has_cointype()) {
      set_cointype(from.cointype());
    }
    if (from.has_usertype()) {
      set_usertype(from.usertype());
    }
    if (from.has_discount()) {
      set_discount(from.discount());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_yearmonth()) {
      set_yearmonth(from.yearmonth());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AELotteryDiscount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AELotteryDiscount::CopyFrom(const AELotteryDiscount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AELotteryDiscount::IsInitialized() const {

  return true;
}

void AELotteryDiscount::Swap(AELotteryDiscount* other) {
  if (other != this) {
    std::swap(lotterytype_, other->lotterytype_);
    std::swap(cointype_, other->cointype_);
    std::swap(usertype_, other->usertype_);
    std::swap(discount_, other->discount_);
    std::swap(count_, other->count_);
    std::swap(yearmonth_, other->yearmonth_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AELotteryDiscount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AELotteryDiscount_descriptor_;
  metadata.reflection = AELotteryDiscount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AELotteryNpc::kLotterytypeFieldNumber;
const int AELotteryNpc::kMapFieldNumber;
#endif  // !_MSC_VER

AELotteryNpc::AELotteryNpc()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.AELotteryNpc)
}

void AELotteryNpc::InitAsDefaultInstance() {
}

AELotteryNpc::AELotteryNpc(const AELotteryNpc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.AELotteryNpc)
}

void AELotteryNpc::SharedCtor() {
  _cached_size_ = 0;
  lotterytype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AELotteryNpc::~AELotteryNpc() {
  // @@protoc_insertion_point(destructor:Cmd.AELotteryNpc)
  SharedDtor();
}

void AELotteryNpc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AELotteryNpc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AELotteryNpc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AELotteryNpc_descriptor_;
}

const AELotteryNpc& AELotteryNpc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityEvent_2eproto();
  return *default_instance_;
}

AELotteryNpc* AELotteryNpc::default_instance_ = NULL;

AELotteryNpc* AELotteryNpc::New() const {
  return new AELotteryNpc;
}

void AELotteryNpc::Clear() {
  lotterytype_ = 0;
  map_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AELotteryNpc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.AELotteryNpc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.ELotteryType lotterytype = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ELotteryType_IsValid(value)) {
            set_lotterytype(static_cast< ::Cmd::ELotteryType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_map;
        break;
      }

      // repeated .Cmd.AEMap map = 2;
      case 2: {
        if (tag == 18) {
         parse_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_map()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_map;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.AELotteryNpc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.AELotteryNpc)
  return false;
#undef DO_
}

void AELotteryNpc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.AELotteryNpc)
  // optional .Cmd.ELotteryType lotterytype = 1;
  if (has_lotterytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->lotterytype(), output);
  }

  // repeated .Cmd.AEMap map = 2;
  for (int i = 0; i < this->map_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->map(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.AELotteryNpc)
}

::google::protobuf::uint8* AELotteryNpc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.AELotteryNpc)
  // optional .Cmd.ELotteryType lotterytype = 1;
  if (has_lotterytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->lotterytype(), target);
  }

  // repeated .Cmd.AEMap map = 2;
  for (int i = 0; i < this->map_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->map(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.AELotteryNpc)
  return target;
}

int AELotteryNpc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.ELotteryType lotterytype = 1;
    if (has_lotterytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->lotterytype());
    }

  }
  // repeated .Cmd.AEMap map = 2;
  total_size += 1 * this->map_size();
  for (int i = 0; i < this->map_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->map(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AELotteryNpc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AELotteryNpc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AELotteryNpc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AELotteryNpc::MergeFrom(const AELotteryNpc& from) {
  GOOGLE_CHECK_NE(&from, this);
  map_.MergeFrom(from.map_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lotterytype()) {
      set_lotterytype(from.lotterytype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AELotteryNpc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AELotteryNpc::CopyFrom(const AELotteryNpc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AELotteryNpc::IsInitialized() const {

  return true;
}

void AELotteryNpc::Swap(AELotteryNpc* other) {
  if (other != this) {
    std::swap(lotterytype_, other->lotterytype_);
    map_.Swap(&other->map_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AELotteryNpc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AELotteryNpc_descriptor_;
  metadata.reflection = AELotteryNpc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AEUrl::kLanguageFieldNumber;
const int AEUrl::kUrlFieldNumber;
#endif  // !_MSC_VER

AEUrl::AEUrl()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.AEUrl)
}

void AEUrl::InitAsDefaultInstance() {
}

AEUrl::AEUrl(const AEUrl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.AEUrl)
}

void AEUrl::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  language_ = 0u;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AEUrl::~AEUrl() {
  // @@protoc_insertion_point(destructor:Cmd.AEUrl)
  SharedDtor();
}

void AEUrl::SharedDtor() {
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_;
  }
  if (this != default_instance_) {
  }
}

void AEUrl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AEUrl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AEUrl_descriptor_;
}

const AEUrl& AEUrl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityEvent_2eproto();
  return *default_instance_;
}

AEUrl* AEUrl::default_instance_ = NULL;

AEUrl* AEUrl::New() const {
  return new AEUrl;
}

void AEUrl::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    language_ = 0u;
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        url_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AEUrl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.AEUrl)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 language = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &language_)));
          set_has_language();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_url;
        break;
      }

      // optional string url = 2;
      case 2: {
        if (tag == 18) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.AEUrl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.AEUrl)
  return false;
#undef DO_
}

void AEUrl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.AEUrl)
  // optional uint32 language = 1 [default = 0];
  if (has_language()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->language(), output);
  }

  // optional string url = 2;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.AEUrl)
}

::google::protobuf::uint8* AEUrl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.AEUrl)
  // optional uint32 language = 1 [default = 0];
  if (has_language()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->language(), target);
  }

  // optional string url = 2;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.AEUrl)
  return target;
}

int AEUrl::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 language = 1 [default = 0];
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->language());
    }

    // optional string url = 2;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AEUrl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AEUrl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AEUrl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AEUrl::MergeFrom(const AEUrl& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_language()) {
      set_language(from.language());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AEUrl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AEUrl::CopyFrom(const AEUrl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AEUrl::IsInitialized() const {

  return true;
}

void AEUrl::Swap(AEUrl* other) {
  if (other != this) {
    std::swap(language_, other->language_);
    std::swap(url_, other->url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AEUrl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AEUrl_descriptor_;
  metadata.reflection = AEUrl_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AELotteryBanner::kLotterytypeFieldNumber;
const int AELotteryBanner::kPathFieldNumber;
const int AELotteryBanner::kUrlsFieldNumber;
#endif  // !_MSC_VER

AELotteryBanner::AELotteryBanner()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.AELotteryBanner)
}

void AELotteryBanner::InitAsDefaultInstance() {
}

AELotteryBanner::AELotteryBanner(const AELotteryBanner& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.AELotteryBanner)
}

void AELotteryBanner::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  lotterytype_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AELotteryBanner::~AELotteryBanner() {
  // @@protoc_insertion_point(destructor:Cmd.AELotteryBanner)
  SharedDtor();
}

void AELotteryBanner::SharedDtor() {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void AELotteryBanner::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AELotteryBanner::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AELotteryBanner_descriptor_;
}

const AELotteryBanner& AELotteryBanner::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityEvent_2eproto();
  return *default_instance_;
}

AELotteryBanner* AELotteryBanner::default_instance_ = NULL;

AELotteryBanner* AELotteryBanner::New() const {
  return new AELotteryBanner;
}

void AELotteryBanner::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    lotterytype_ = 0;
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        path_->clear();
      }
    }
  }
  urls_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AELotteryBanner::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.AELotteryBanner)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.ELotteryType lotterytype = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ELotteryType_IsValid(value)) {
            set_lotterytype(static_cast< ::Cmd::ELotteryType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_path;
        break;
      }

      // optional string path = 2;
      case 2: {
        if (tag == 18) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_urls;
        break;
      }

      // repeated .Cmd.AEUrl urls = 3;
      case 3: {
        if (tag == 26) {
         parse_urls:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_urls()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_urls;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.AELotteryBanner)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.AELotteryBanner)
  return false;
#undef DO_
}

void AELotteryBanner::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.AELotteryBanner)
  // optional .Cmd.ELotteryType lotterytype = 1;
  if (has_lotterytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->lotterytype(), output);
  }

  // optional string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->path(), output);
  }

  // repeated .Cmd.AEUrl urls = 3;
  for (int i = 0; i < this->urls_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->urls(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.AELotteryBanner)
}

::google::protobuf::uint8* AELotteryBanner::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.AELotteryBanner)
  // optional .Cmd.ELotteryType lotterytype = 1;
  if (has_lotterytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->lotterytype(), target);
  }

  // optional string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }

  // repeated .Cmd.AEUrl urls = 3;
  for (int i = 0; i < this->urls_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->urls(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.AELotteryBanner)
  return target;
}

int AELotteryBanner::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.ELotteryType lotterytype = 1;
    if (has_lotterytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->lotterytype());
    }

    // optional string path = 2;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

  }
  // repeated .Cmd.AEUrl urls = 3;
  total_size += 1 * this->urls_size();
  for (int i = 0; i < this->urls_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->urls(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AELotteryBanner::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AELotteryBanner* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AELotteryBanner*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AELotteryBanner::MergeFrom(const AELotteryBanner& from) {
  GOOGLE_CHECK_NE(&from, this);
  urls_.MergeFrom(from.urls_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lotterytype()) {
      set_lotterytype(from.lotterytype());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AELotteryBanner::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AELotteryBanner::CopyFrom(const AELotteryBanner& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AELotteryBanner::IsInitialized() const {

  return true;
}

void AELotteryBanner::Swap(AELotteryBanner* other) {
  if (other != this) {
    std::swap(lotterytype_, other->lotterytype_);
    std::swap(path_, other->path_);
    urls_.Swap(&other->urls_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AELotteryBanner::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AELotteryBanner_descriptor_;
  metadata.reflection = AELotteryBanner_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AEGuildBuildingSubmitInfo::kTypesFieldNumber;
const int AEGuildBuildingSubmitInfo::kMinlvFieldNumber;
const int AEGuildBuildingSubmitInfo::kMaxlvFieldNumber;
const int AEGuildBuildingSubmitInfo::kSubmitincFieldNumber;
const int AEGuildBuildingSubmitInfo::kRewardincFieldNumber;
#endif  // !_MSC_VER

AEGuildBuildingSubmitInfo::AEGuildBuildingSubmitInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.AEGuildBuildingSubmitInfo)
}

void AEGuildBuildingSubmitInfo::InitAsDefaultInstance() {
}

AEGuildBuildingSubmitInfo::AEGuildBuildingSubmitInfo(const AEGuildBuildingSubmitInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.AEGuildBuildingSubmitInfo)
}

void AEGuildBuildingSubmitInfo::SharedCtor() {
  _cached_size_ = 0;
  minlv_ = 0u;
  maxlv_ = 0u;
  submitinc_ = 0u;
  rewardinc_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AEGuildBuildingSubmitInfo::~AEGuildBuildingSubmitInfo() {
  // @@protoc_insertion_point(destructor:Cmd.AEGuildBuildingSubmitInfo)
  SharedDtor();
}

void AEGuildBuildingSubmitInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AEGuildBuildingSubmitInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AEGuildBuildingSubmitInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AEGuildBuildingSubmitInfo_descriptor_;
}

const AEGuildBuildingSubmitInfo& AEGuildBuildingSubmitInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityEvent_2eproto();
  return *default_instance_;
}

AEGuildBuildingSubmitInfo* AEGuildBuildingSubmitInfo::default_instance_ = NULL;

AEGuildBuildingSubmitInfo* AEGuildBuildingSubmitInfo::New() const {
  return new AEGuildBuildingSubmitInfo;
}

void AEGuildBuildingSubmitInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AEGuildBuildingSubmitInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(minlv_, rewardinc_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  types_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AEGuildBuildingSubmitInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.AEGuildBuildingSubmitInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Cmd.EGuildBuilding types = 1;
      case 1: {
        if (tag == 8) {
         parse_types:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EGuildBuilding_IsValid(value)) {
            add_types(static_cast< ::Cmd::EGuildBuilding >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::Cmd::EGuildBuilding_IsValid,
                 this->mutable_types())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_types;
        if (input->ExpectTag(16)) goto parse_minlv;
        break;
      }

      // optional uint32 minlv = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_minlv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minlv_)));
          set_has_minlv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_maxlv;
        break;
      }

      // optional uint32 maxlv = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_maxlv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxlv_)));
          set_has_maxlv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_submitinc;
        break;
      }

      // optional uint32 submitinc = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_submitinc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &submitinc_)));
          set_has_submitinc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_rewardinc;
        break;
      }

      // optional uint32 rewardinc = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_rewardinc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rewardinc_)));
          set_has_rewardinc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.AEGuildBuildingSubmitInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.AEGuildBuildingSubmitInfo)
  return false;
#undef DO_
}

void AEGuildBuildingSubmitInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.AEGuildBuildingSubmitInfo)
  // repeated .Cmd.EGuildBuilding types = 1;
  for (int i = 0; i < this->types_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->types(i), output);
  }

  // optional uint32 minlv = 2 [default = 0];
  if (has_minlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->minlv(), output);
  }

  // optional uint32 maxlv = 3 [default = 0];
  if (has_maxlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->maxlv(), output);
  }

  // optional uint32 submitinc = 4 [default = 0];
  if (has_submitinc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->submitinc(), output);
  }

  // optional uint32 rewardinc = 5 [default = 0];
  if (has_rewardinc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->rewardinc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.AEGuildBuildingSubmitInfo)
}

::google::protobuf::uint8* AEGuildBuildingSubmitInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.AEGuildBuildingSubmitInfo)
  // repeated .Cmd.EGuildBuilding types = 1;
  for (int i = 0; i < this->types_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->types(i), target);
  }

  // optional uint32 minlv = 2 [default = 0];
  if (has_minlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->minlv(), target);
  }

  // optional uint32 maxlv = 3 [default = 0];
  if (has_maxlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->maxlv(), target);
  }

  // optional uint32 submitinc = 4 [default = 0];
  if (has_submitinc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->submitinc(), target);
  }

  // optional uint32 rewardinc = 5 [default = 0];
  if (has_rewardinc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->rewardinc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.AEGuildBuildingSubmitInfo)
  return target;
}

int AEGuildBuildingSubmitInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 minlv = 2 [default = 0];
    if (has_minlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->minlv());
    }

    // optional uint32 maxlv = 3 [default = 0];
    if (has_maxlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxlv());
    }

    // optional uint32 submitinc = 4 [default = 0];
    if (has_submitinc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->submitinc());
    }

    // optional uint32 rewardinc = 5 [default = 0];
    if (has_rewardinc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rewardinc());
    }

  }
  // repeated .Cmd.EGuildBuilding types = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->types_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->types(i));
    }
    total_size += 1 * this->types_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AEGuildBuildingSubmitInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AEGuildBuildingSubmitInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AEGuildBuildingSubmitInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AEGuildBuildingSubmitInfo::MergeFrom(const AEGuildBuildingSubmitInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  types_.MergeFrom(from.types_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_minlv()) {
      set_minlv(from.minlv());
    }
    if (from.has_maxlv()) {
      set_maxlv(from.maxlv());
    }
    if (from.has_submitinc()) {
      set_submitinc(from.submitinc());
    }
    if (from.has_rewardinc()) {
      set_rewardinc(from.rewardinc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AEGuildBuildingSubmitInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AEGuildBuildingSubmitInfo::CopyFrom(const AEGuildBuildingSubmitInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AEGuildBuildingSubmitInfo::IsInitialized() const {

  return true;
}

void AEGuildBuildingSubmitInfo::Swap(AEGuildBuildingSubmitInfo* other) {
  if (other != this) {
    types_.Swap(&other->types_);
    std::swap(minlv_, other->minlv_);
    std::swap(maxlv_, other->maxlv_);
    std::swap(submitinc_, other->submitinc_);
    std::swap(rewardinc_, other->rewardinc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AEGuildBuildingSubmitInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AEGuildBuildingSubmitInfo_descriptor_;
  metadata.reflection = AEGuildBuildingSubmitInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AEShopInfo::kItemsFieldNumber;
#endif  // !_MSC_VER

AEShopInfo::AEShopInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.AEShopInfo)
}

void AEShopInfo::InitAsDefaultInstance() {
}

AEShopInfo::AEShopInfo(const AEShopInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.AEShopInfo)
}

void AEShopInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AEShopInfo::~AEShopInfo() {
  // @@protoc_insertion_point(destructor:Cmd.AEShopInfo)
  SharedDtor();
}

void AEShopInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AEShopInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AEShopInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AEShopInfo_descriptor_;
}

const AEShopInfo& AEShopInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityEvent_2eproto();
  return *default_instance_;
}

AEShopInfo* AEShopInfo::default_instance_ = NULL;

AEShopInfo* AEShopInfo::New() const {
  return new AEShopInfo;
}

void AEShopInfo::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AEShopInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.AEShopInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Cmd.ShopItem items = 1;
      case 1: {
        if (tag == 10) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.AEShopInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.AEShopInfo)
  return false;
#undef DO_
}

void AEShopInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.AEShopInfo)
  // repeated .Cmd.ShopItem items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.AEShopInfo)
}

::google::protobuf::uint8* AEShopInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.AEShopInfo)
  // repeated .Cmd.ShopItem items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.AEShopInfo)
  return target;
}

int AEShopInfo::ByteSize() const {
  int total_size = 0;

  // repeated .Cmd.ShopItem items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AEShopInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AEShopInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AEShopInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AEShopInfo::MergeFrom(const AEShopInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AEShopInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AEShopInfo::CopyFrom(const AEShopInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AEShopInfo::IsInitialized() const {

  return true;
}

void AEShopInfo::Swap(AEShopInfo* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AEShopInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AEShopInfo_descriptor_;
  metadata.reflection = AEShopInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityEventInfo::kIdFieldNumber;
const int ActivityEventInfo::kBegintimeFieldNumber;
const int ActivityEventInfo::kEndtimeFieldNumber;
const int ActivityEventInfo::kTypeFieldNumber;
const int ActivityEventInfo::kFreetransferinfoFieldNumber;
const int ActivityEventInfo::kSummoninfoFieldNumber;
const int ActivityEventInfo::kRewardinfoFieldNumber;
const int ActivityEventInfo::kResetinfoFieldNumber;
const int ActivityEventInfo::kLotterydiscountFieldNumber;
const int ActivityEventInfo::kLotterynpcFieldNumber;
const int ActivityEventInfo::kLotterybannerFieldNumber;
const int ActivityEventInfo::kGbuildingsubmitinfoFieldNumber;
const int ActivityEventInfo::kShopinfoFieldNumber;
#endif  // !_MSC_VER

ActivityEventInfo::ActivityEventInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ActivityEventInfo)
}

void ActivityEventInfo::InitAsDefaultInstance() {
  freetransferinfo_ = const_cast< ::Cmd::AEFreeTransferInfo*>(&::Cmd::AEFreeTransferInfo::default_instance());
  summoninfo_ = const_cast< ::Cmd::AESummonInfo*>(&::Cmd::AESummonInfo::default_instance());
  rewardinfo_ = const_cast< ::Cmd::AERewardInfo*>(&::Cmd::AERewardInfo::default_instance());
  resetinfo_ = const_cast< ::Cmd::AEResetInfo*>(&::Cmd::AEResetInfo::default_instance());
  lotterydiscount_ = const_cast< ::Cmd::AELotteryDiscount*>(&::Cmd::AELotteryDiscount::default_instance());
  lotterynpc_ = const_cast< ::Cmd::AELotteryNpc*>(&::Cmd::AELotteryNpc::default_instance());
  lotterybanner_ = const_cast< ::Cmd::AELotteryBanner*>(&::Cmd::AELotteryBanner::default_instance());
  gbuildingsubmitinfo_ = const_cast< ::Cmd::AEGuildBuildingSubmitInfo*>(&::Cmd::AEGuildBuildingSubmitInfo::default_instance());
  shopinfo_ = const_cast< ::Cmd::AEShopInfo*>(&::Cmd::AEShopInfo::default_instance());
}

ActivityEventInfo::ActivityEventInfo(const ActivityEventInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ActivityEventInfo)
}

void ActivityEventInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  begintime_ = GOOGLE_ULONGLONG(0);
  endtime_ = GOOGLE_ULONGLONG(0);
  type_ = 0;
  freetransferinfo_ = NULL;
  summoninfo_ = NULL;
  rewardinfo_ = NULL;
  resetinfo_ = NULL;
  lotterydiscount_ = NULL;
  lotterynpc_ = NULL;
  lotterybanner_ = NULL;
  gbuildingsubmitinfo_ = NULL;
  shopinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityEventInfo::~ActivityEventInfo() {
  // @@protoc_insertion_point(destructor:Cmd.ActivityEventInfo)
  SharedDtor();
}

void ActivityEventInfo::SharedDtor() {
  if (this != default_instance_) {
    delete freetransferinfo_;
    delete summoninfo_;
    delete rewardinfo_;
    delete resetinfo_;
    delete lotterydiscount_;
    delete lotterynpc_;
    delete lotterybanner_;
    delete gbuildingsubmitinfo_;
    delete shopinfo_;
  }
}

void ActivityEventInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityEventInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityEventInfo_descriptor_;
}

const ActivityEventInfo& ActivityEventInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityEvent_2eproto();
  return *default_instance_;
}

ActivityEventInfo* ActivityEventInfo::default_instance_ = NULL;

ActivityEventInfo* ActivityEventInfo::New() const {
  return new ActivityEventInfo;
}

void ActivityEventInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ActivityEventInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, endtime_);
    type_ = 0;
    if (has_freetransferinfo()) {
      if (freetransferinfo_ != NULL) freetransferinfo_->::Cmd::AEFreeTransferInfo::Clear();
    }
    if (has_summoninfo()) {
      if (summoninfo_ != NULL) summoninfo_->::Cmd::AESummonInfo::Clear();
    }
    if (has_rewardinfo()) {
      if (rewardinfo_ != NULL) rewardinfo_->::Cmd::AERewardInfo::Clear();
    }
    if (has_resetinfo()) {
      if (resetinfo_ != NULL) resetinfo_->::Cmd::AEResetInfo::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 7936) {
    if (has_lotterydiscount()) {
      if (lotterydiscount_ != NULL) lotterydiscount_->::Cmd::AELotteryDiscount::Clear();
    }
    if (has_lotterynpc()) {
      if (lotterynpc_ != NULL) lotterynpc_->::Cmd::AELotteryNpc::Clear();
    }
    if (has_lotterybanner()) {
      if (lotterybanner_ != NULL) lotterybanner_->::Cmd::AELotteryBanner::Clear();
    }
    if (has_gbuildingsubmitinfo()) {
      if (gbuildingsubmitinfo_ != NULL) gbuildingsubmitinfo_->::Cmd::AEGuildBuildingSubmitInfo::Clear();
    }
    if (has_shopinfo()) {
      if (shopinfo_ != NULL) shopinfo_->::Cmd::AEShopInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityEventInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ActivityEventInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_begintime;
        break;
      }

      // optional uint64 begintime = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_begintime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &begintime_)));
          set_has_begintime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_endtime;
        break;
      }

      // optional uint64 endtime = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional .Cmd.EActivityEventType type = 4;
      case 4: {
        if (tag == 32) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EActivityEventType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EActivityEventType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_freetransferinfo;
        break;
      }

      // optional .Cmd.AEFreeTransferInfo freetransferinfo = 5;
      case 5: {
        if (tag == 42) {
         parse_freetransferinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_freetransferinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_summoninfo;
        break;
      }

      // optional .Cmd.AESummonInfo summoninfo = 6;
      case 6: {
        if (tag == 50) {
         parse_summoninfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_summoninfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_rewardinfo;
        break;
      }

      // optional .Cmd.AERewardInfo rewardinfo = 7;
      case 7: {
        if (tag == 58) {
         parse_rewardinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rewardinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_resetinfo;
        break;
      }

      // optional .Cmd.AEResetInfo resetinfo = 8;
      case 8: {
        if (tag == 66) {
         parse_resetinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resetinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_lotterydiscount;
        break;
      }

      // optional .Cmd.AELotteryDiscount lotterydiscount = 9;
      case 9: {
        if (tag == 74) {
         parse_lotterydiscount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lotterydiscount()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_lotterynpc;
        break;
      }

      // optional .Cmd.AELotteryNpc lotterynpc = 10;
      case 10: {
        if (tag == 82) {
         parse_lotterynpc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lotterynpc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_lotterybanner;
        break;
      }

      // optional .Cmd.AELotteryBanner lotterybanner = 11;
      case 11: {
        if (tag == 90) {
         parse_lotterybanner:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lotterybanner()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_gbuildingsubmitinfo;
        break;
      }

      // optional .Cmd.AEGuildBuildingSubmitInfo gbuildingsubmitinfo = 12;
      case 12: {
        if (tag == 98) {
         parse_gbuildingsubmitinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gbuildingsubmitinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_shopinfo;
        break;
      }

      // optional .Cmd.AEShopInfo shopinfo = 13;
      case 13: {
        if (tag == 106) {
         parse_shopinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shopinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ActivityEventInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ActivityEventInfo)
  return false;
#undef DO_
}

void ActivityEventInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ActivityEventInfo)
  // optional uint64 id = 1 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint64 begintime = 2 [default = 0];
  if (has_begintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->begintime(), output);
  }

  // optional uint64 endtime = 3 [default = 0];
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->endtime(), output);
  }

  // optional .Cmd.EActivityEventType type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  // optional .Cmd.AEFreeTransferInfo freetransferinfo = 5;
  if (has_freetransferinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->freetransferinfo(), output);
  }

  // optional .Cmd.AESummonInfo summoninfo = 6;
  if (has_summoninfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->summoninfo(), output);
  }

  // optional .Cmd.AERewardInfo rewardinfo = 7;
  if (has_rewardinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->rewardinfo(), output);
  }

  // optional .Cmd.AEResetInfo resetinfo = 8;
  if (has_resetinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->resetinfo(), output);
  }

  // optional .Cmd.AELotteryDiscount lotterydiscount = 9;
  if (has_lotterydiscount()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->lotterydiscount(), output);
  }

  // optional .Cmd.AELotteryNpc lotterynpc = 10;
  if (has_lotterynpc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->lotterynpc(), output);
  }

  // optional .Cmd.AELotteryBanner lotterybanner = 11;
  if (has_lotterybanner()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->lotterybanner(), output);
  }

  // optional .Cmd.AEGuildBuildingSubmitInfo gbuildingsubmitinfo = 12;
  if (has_gbuildingsubmitinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->gbuildingsubmitinfo(), output);
  }

  // optional .Cmd.AEShopInfo shopinfo = 13;
  if (has_shopinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->shopinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ActivityEventInfo)
}

::google::protobuf::uint8* ActivityEventInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ActivityEventInfo)
  // optional uint64 id = 1 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint64 begintime = 2 [default = 0];
  if (has_begintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->begintime(), target);
  }

  // optional uint64 endtime = 3 [default = 0];
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->endtime(), target);
  }

  // optional .Cmd.EActivityEventType type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  // optional .Cmd.AEFreeTransferInfo freetransferinfo = 5;
  if (has_freetransferinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->freetransferinfo(), target);
  }

  // optional .Cmd.AESummonInfo summoninfo = 6;
  if (has_summoninfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->summoninfo(), target);
  }

  // optional .Cmd.AERewardInfo rewardinfo = 7;
  if (has_rewardinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->rewardinfo(), target);
  }

  // optional .Cmd.AEResetInfo resetinfo = 8;
  if (has_resetinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->resetinfo(), target);
  }

  // optional .Cmd.AELotteryDiscount lotterydiscount = 9;
  if (has_lotterydiscount()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->lotterydiscount(), target);
  }

  // optional .Cmd.AELotteryNpc lotterynpc = 10;
  if (has_lotterynpc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->lotterynpc(), target);
  }

  // optional .Cmd.AELotteryBanner lotterybanner = 11;
  if (has_lotterybanner()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->lotterybanner(), target);
  }

  // optional .Cmd.AEGuildBuildingSubmitInfo gbuildingsubmitinfo = 12;
  if (has_gbuildingsubmitinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->gbuildingsubmitinfo(), target);
  }

  // optional .Cmd.AEShopInfo shopinfo = 13;
  if (has_shopinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->shopinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ActivityEventInfo)
  return target;
}

int ActivityEventInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint64 begintime = 2 [default = 0];
    if (has_begintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->begintime());
    }

    // optional uint64 endtime = 3 [default = 0];
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->endtime());
    }

    // optional .Cmd.EActivityEventType type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .Cmd.AEFreeTransferInfo freetransferinfo = 5;
    if (has_freetransferinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->freetransferinfo());
    }

    // optional .Cmd.AESummonInfo summoninfo = 6;
    if (has_summoninfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->summoninfo());
    }

    // optional .Cmd.AERewardInfo rewardinfo = 7;
    if (has_rewardinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rewardinfo());
    }

    // optional .Cmd.AEResetInfo resetinfo = 8;
    if (has_resetinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->resetinfo());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .Cmd.AELotteryDiscount lotterydiscount = 9;
    if (has_lotterydiscount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lotterydiscount());
    }

    // optional .Cmd.AELotteryNpc lotterynpc = 10;
    if (has_lotterynpc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lotterynpc());
    }

    // optional .Cmd.AELotteryBanner lotterybanner = 11;
    if (has_lotterybanner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lotterybanner());
    }

    // optional .Cmd.AEGuildBuildingSubmitInfo gbuildingsubmitinfo = 12;
    if (has_gbuildingsubmitinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gbuildingsubmitinfo());
    }

    // optional .Cmd.AEShopInfo shopinfo = 13;
    if (has_shopinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shopinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityEventInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityEventInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityEventInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityEventInfo::MergeFrom(const ActivityEventInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_begintime()) {
      set_begintime(from.begintime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_freetransferinfo()) {
      mutable_freetransferinfo()->::Cmd::AEFreeTransferInfo::MergeFrom(from.freetransferinfo());
    }
    if (from.has_summoninfo()) {
      mutable_summoninfo()->::Cmd::AESummonInfo::MergeFrom(from.summoninfo());
    }
    if (from.has_rewardinfo()) {
      mutable_rewardinfo()->::Cmd::AERewardInfo::MergeFrom(from.rewardinfo());
    }
    if (from.has_resetinfo()) {
      mutable_resetinfo()->::Cmd::AEResetInfo::MergeFrom(from.resetinfo());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_lotterydiscount()) {
      mutable_lotterydiscount()->::Cmd::AELotteryDiscount::MergeFrom(from.lotterydiscount());
    }
    if (from.has_lotterynpc()) {
      mutable_lotterynpc()->::Cmd::AELotteryNpc::MergeFrom(from.lotterynpc());
    }
    if (from.has_lotterybanner()) {
      mutable_lotterybanner()->::Cmd::AELotteryBanner::MergeFrom(from.lotterybanner());
    }
    if (from.has_gbuildingsubmitinfo()) {
      mutable_gbuildingsubmitinfo()->::Cmd::AEGuildBuildingSubmitInfo::MergeFrom(from.gbuildingsubmitinfo());
    }
    if (from.has_shopinfo()) {
      mutable_shopinfo()->::Cmd::AEShopInfo::MergeFrom(from.shopinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityEventInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityEventInfo::CopyFrom(const ActivityEventInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityEventInfo::IsInitialized() const {

  return true;
}

void ActivityEventInfo::Swap(ActivityEventInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(begintime_, other->begintime_);
    std::swap(endtime_, other->endtime_);
    std::swap(type_, other->type_);
    std::swap(freetransferinfo_, other->freetransferinfo_);
    std::swap(summoninfo_, other->summoninfo_);
    std::swap(rewardinfo_, other->rewardinfo_);
    std::swap(resetinfo_, other->resetinfo_);
    std::swap(lotterydiscount_, other->lotterydiscount_);
    std::swap(lotterynpc_, other->lotterynpc_);
    std::swap(lotterybanner_, other->lotterybanner_);
    std::swap(gbuildingsubmitinfo_, other->gbuildingsubmitinfo_);
    std::swap(shopinfo_, other->shopinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityEventInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityEventInfo_descriptor_;
  metadata.reflection = ActivityEventInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AEResetInfo::kModeFieldNumber;
const int AEResetInfo::kTimesFieldNumber;
#endif  // !_MSC_VER

AEResetInfo::AEResetInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.AEResetInfo)
}

void AEResetInfo::InitAsDefaultInstance() {
}

AEResetInfo::AEResetInfo(const AEResetInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.AEResetInfo)
}

void AEResetInfo::SharedCtor() {
  _cached_size_ = 0;
  mode_ = 0;
  times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AEResetInfo::~AEResetInfo() {
  // @@protoc_insertion_point(destructor:Cmd.AEResetInfo)
  SharedDtor();
}

void AEResetInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AEResetInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AEResetInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AEResetInfo_descriptor_;
}

const AEResetInfo& AEResetInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityEvent_2eproto();
  return *default_instance_;
}

AEResetInfo* AEResetInfo::default_instance_ = NULL;

AEResetInfo* AEResetInfo::New() const {
  return new AEResetInfo;
}

void AEResetInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AEResetInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(mode_, times_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AEResetInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.AEResetInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.EAERewardMode mode = 1 [default = EAEREWARDMODE_MIN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EAERewardMode_IsValid(value)) {
            set_mode(static_cast< ::Cmd::EAERewardMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_times;
        break;
      }

      // optional uint32 times = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.AEResetInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.AEResetInfo)
  return false;
#undef DO_
}

void AEResetInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.AEResetInfo)
  // optional .Cmd.EAERewardMode mode = 1 [default = EAEREWARDMODE_MIN];
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mode(), output);
  }

  // optional uint32 times = 2 [default = 0];
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.AEResetInfo)
}

::google::protobuf::uint8* AEResetInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.AEResetInfo)
  // optional .Cmd.EAERewardMode mode = 1 [default = EAEREWARDMODE_MIN];
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mode(), target);
  }

  // optional uint32 times = 2 [default = 0];
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.AEResetInfo)
  return target;
}

int AEResetInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.EAERewardMode mode = 1 [default = EAEREWARDMODE_MIN];
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }

    // optional uint32 times = 2 [default = 0];
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->times());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AEResetInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AEResetInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AEResetInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AEResetInfo::MergeFrom(const AEResetInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AEResetInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AEResetInfo::CopyFrom(const AEResetInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AEResetInfo::IsInitialized() const {

  return true;
}

void AEResetInfo::Swap(AEResetInfo* other) {
  if (other != this) {
    std::swap(mode_, other->mode_);
    std::swap(times_, other->times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AEResetInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AEResetInfo_descriptor_;
  metadata.reflection = AEResetInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AERewardItem::kModeFieldNumber;
const int AERewardItem::kDaycountFieldNumber;
const int AERewardItem::kAcclimitcharidFieldNumber;
const int AERewardItem::kMultipledaycountFieldNumber;
const int AERewardItem::kMultipleacclimitcharidFieldNumber;
#endif  // !_MSC_VER

AERewardItem::AERewardItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.AERewardItem)
}

void AERewardItem::InitAsDefaultInstance() {
}

AERewardItem::AERewardItem(const AERewardItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.AERewardItem)
}

void AERewardItem::SharedCtor() {
  _cached_size_ = 0;
  mode_ = 0;
  daycount_ = 0u;
  acclimitcharid_ = GOOGLE_ULONGLONG(0);
  multipledaycount_ = 0u;
  multipleacclimitcharid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AERewardItem::~AERewardItem() {
  // @@protoc_insertion_point(destructor:Cmd.AERewardItem)
  SharedDtor();
}

void AERewardItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AERewardItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AERewardItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AERewardItem_descriptor_;
}

const AERewardItem& AERewardItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityEvent_2eproto();
  return *default_instance_;
}

AERewardItem* AERewardItem::default_instance_ = NULL;

AERewardItem* AERewardItem::New() const {
  return new AERewardItem;
}

void AERewardItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AERewardItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(mode_, multipledaycount_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AERewardItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.AERewardItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.EAERewardMode mode = 1 [default = EAEREWARDMODE_MIN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EAERewardMode_IsValid(value)) {
            set_mode(static_cast< ::Cmd::EAERewardMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_daycount;
        break;
      }

      // optional uint32 daycount = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_daycount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &daycount_)));
          set_has_daycount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_acclimitcharid;
        break;
      }

      // optional uint64 acclimitcharid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_acclimitcharid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &acclimitcharid_)));
          set_has_acclimitcharid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_multipledaycount;
        break;
      }

      // optional uint32 multipledaycount = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_multipledaycount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &multipledaycount_)));
          set_has_multipledaycount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_multipleacclimitcharid;
        break;
      }

      // optional uint64 multipleacclimitcharid = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_multipleacclimitcharid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &multipleacclimitcharid_)));
          set_has_multipleacclimitcharid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.AERewardItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.AERewardItem)
  return false;
#undef DO_
}

void AERewardItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.AERewardItem)
  // optional .Cmd.EAERewardMode mode = 1 [default = EAEREWARDMODE_MIN];
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mode(), output);
  }

  // optional uint32 daycount = 2 [default = 0];
  if (has_daycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->daycount(), output);
  }

  // optional uint64 acclimitcharid = 3 [default = 0];
  if (has_acclimitcharid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->acclimitcharid(), output);
  }

  // optional uint32 multipledaycount = 4 [default = 0];
  if (has_multipledaycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->multipledaycount(), output);
  }

  // optional uint64 multipleacclimitcharid = 5 [default = 0];
  if (has_multipleacclimitcharid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->multipleacclimitcharid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.AERewardItem)
}

::google::protobuf::uint8* AERewardItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.AERewardItem)
  // optional .Cmd.EAERewardMode mode = 1 [default = EAEREWARDMODE_MIN];
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mode(), target);
  }

  // optional uint32 daycount = 2 [default = 0];
  if (has_daycount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->daycount(), target);
  }

  // optional uint64 acclimitcharid = 3 [default = 0];
  if (has_acclimitcharid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->acclimitcharid(), target);
  }

  // optional uint32 multipledaycount = 4 [default = 0];
  if (has_multipledaycount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->multipledaycount(), target);
  }

  // optional uint64 multipleacclimitcharid = 5 [default = 0];
  if (has_multipleacclimitcharid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->multipleacclimitcharid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.AERewardItem)
  return target;
}

int AERewardItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.EAERewardMode mode = 1 [default = EAEREWARDMODE_MIN];
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }

    // optional uint32 daycount = 2 [default = 0];
    if (has_daycount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->daycount());
    }

    // optional uint64 acclimitcharid = 3 [default = 0];
    if (has_acclimitcharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->acclimitcharid());
    }

    // optional uint32 multipledaycount = 4 [default = 0];
    if (has_multipledaycount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->multipledaycount());
    }

    // optional uint64 multipleacclimitcharid = 5 [default = 0];
    if (has_multipleacclimitcharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->multipleacclimitcharid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AERewardItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AERewardItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AERewardItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AERewardItem::MergeFrom(const AERewardItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_daycount()) {
      set_daycount(from.daycount());
    }
    if (from.has_acclimitcharid()) {
      set_acclimitcharid(from.acclimitcharid());
    }
    if (from.has_multipledaycount()) {
      set_multipledaycount(from.multipledaycount());
    }
    if (from.has_multipleacclimitcharid()) {
      set_multipleacclimitcharid(from.multipleacclimitcharid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AERewardItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AERewardItem::CopyFrom(const AERewardItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AERewardItem::IsInitialized() const {

  return true;
}

void AERewardItem::Swap(AERewardItem* other) {
  if (other != this) {
    std::swap(mode_, other->mode_);
    std::swap(daycount_, other->daycount_);
    std::swap(acclimitcharid_, other->acclimitcharid_);
    std::swap(multipledaycount_, other->multipledaycount_);
    std::swap(multipleacclimitcharid_, other->multipleacclimitcharid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AERewardItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AERewardItem_descriptor_;
  metadata.reflection = AERewardItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityEvent::kTypeFieldNumber;
const int ActivityEvent::kBegintimeFieldNumber;
const int ActivityEvent::kEndtimeFieldNumber;
const int ActivityEvent::kFreetransferFieldNumber;
const int ActivityEvent::kRewardFieldNumber;
const int ActivityEvent::kResetinfoFieldNumber;
const int ActivityEvent::kLotterydiscountFieldNumber;
const int ActivityEvent::kLotterybannerFieldNumber;
const int ActivityEvent::kIdFieldNumber;
const int ActivityEvent::kGbuildingsubmitFieldNumber;
#endif  // !_MSC_VER

ActivityEvent::ActivityEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ActivityEvent)
}

void ActivityEvent::InitAsDefaultInstance() {
  freetransfer_ = const_cast< ::Cmd::AEFreeTransferInfo*>(&::Cmd::AEFreeTransferInfo::default_instance());
  lotterydiscount_ = const_cast< ::Cmd::AELotteryDiscount*>(&::Cmd::AELotteryDiscount::default_instance());
  lotterybanner_ = const_cast< ::Cmd::AELotteryBanner*>(&::Cmd::AELotteryBanner::default_instance());
  gbuildingsubmit_ = const_cast< ::Cmd::AEGuildBuildingSubmitInfo*>(&::Cmd::AEGuildBuildingSubmitInfo::default_instance());
}

ActivityEvent::ActivityEvent(const ActivityEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ActivityEvent)
}

void ActivityEvent::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  begintime_ = GOOGLE_ULONGLONG(0);
  endtime_ = GOOGLE_ULONGLONG(0);
  freetransfer_ = NULL;
  lotterydiscount_ = NULL;
  lotterybanner_ = NULL;
  id_ = GOOGLE_ULONGLONG(0);
  gbuildingsubmit_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityEvent::~ActivityEvent() {
  // @@protoc_insertion_point(destructor:Cmd.ActivityEvent)
  SharedDtor();
}

void ActivityEvent::SharedDtor() {
  if (this != default_instance_) {
    delete freetransfer_;
    delete lotterydiscount_;
    delete lotterybanner_;
    delete gbuildingsubmit_;
  }
}

void ActivityEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityEvent_descriptor_;
}

const ActivityEvent& ActivityEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityEvent_2eproto();
  return *default_instance_;
}

ActivityEvent* ActivityEvent::default_instance_ = NULL;

ActivityEvent* ActivityEvent::New() const {
  return new ActivityEvent;
}

void ActivityEvent::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ActivityEvent*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 207) {
    ZR_(begintime_, endtime_);
    type_ = 0;
    if (has_freetransfer()) {
      if (freetransfer_ != NULL) freetransfer_->::Cmd::AEFreeTransferInfo::Clear();
    }
    if (has_lotterydiscount()) {
      if (lotterydiscount_ != NULL) lotterydiscount_->::Cmd::AELotteryDiscount::Clear();
    }
    if (has_lotterybanner()) {
      if (lotterybanner_ != NULL) lotterybanner_->::Cmd::AELotteryBanner::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 768) {
    id_ = GOOGLE_ULONGLONG(0);
    if (has_gbuildingsubmit()) {
      if (gbuildingsubmit_ != NULL) gbuildingsubmit_->::Cmd::AEGuildBuildingSubmitInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  reward_.Clear();
  resetinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ActivityEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.EActivityEventType type = 1 [default = EACTIVITYEVENTTYPE_MIN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EActivityEventType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EActivityEventType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_begintime;
        break;
      }

      // optional uint64 begintime = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_begintime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &begintime_)));
          set_has_begintime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_endtime;
        break;
      }

      // optional uint64 endtime = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_freetransfer;
        break;
      }

      // optional .Cmd.AEFreeTransferInfo freetransfer = 4;
      case 4: {
        if (tag == 34) {
         parse_freetransfer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_freetransfer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_reward;
        break;
      }

      // repeated .Cmd.AERewardInfo reward = 5;
      case 5: {
        if (tag == 42) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_reward;
        if (input->ExpectTag(50)) goto parse_resetinfo;
        break;
      }

      // repeated .Cmd.AEResetInfo resetinfo = 6;
      case 6: {
        if (tag == 50) {
         parse_resetinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_resetinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_resetinfo;
        if (input->ExpectTag(58)) goto parse_lotterydiscount;
        break;
      }

      // optional .Cmd.AELotteryDiscount lotterydiscount = 7;
      case 7: {
        if (tag == 58) {
         parse_lotterydiscount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lotterydiscount()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_lotterybanner;
        break;
      }

      // optional .Cmd.AELotteryBanner lotterybanner = 8;
      case 8: {
        if (tag == 66) {
         parse_lotterybanner:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lotterybanner()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_id;
        break;
      }

      // optional uint64 id = 9;
      case 9: {
        if (tag == 72) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_gbuildingsubmit;
        break;
      }

      // optional .Cmd.AEGuildBuildingSubmitInfo gbuildingsubmit = 10;
      case 10: {
        if (tag == 82) {
         parse_gbuildingsubmit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gbuildingsubmit()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ActivityEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ActivityEvent)
  return false;
#undef DO_
}

void ActivityEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ActivityEvent)
  // optional .Cmd.EActivityEventType type = 1 [default = EACTIVITYEVENTTYPE_MIN];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint64 begintime = 2 [default = 0];
  if (has_begintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->begintime(), output);
  }

  // optional uint64 endtime = 3 [default = 0];
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->endtime(), output);
  }

  // optional .Cmd.AEFreeTransferInfo freetransfer = 4;
  if (has_freetransfer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->freetransfer(), output);
  }

  // repeated .Cmd.AERewardInfo reward = 5;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->reward(i), output);
  }

  // repeated .Cmd.AEResetInfo resetinfo = 6;
  for (int i = 0; i < this->resetinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->resetinfo(i), output);
  }

  // optional .Cmd.AELotteryDiscount lotterydiscount = 7;
  if (has_lotterydiscount()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->lotterydiscount(), output);
  }

  // optional .Cmd.AELotteryBanner lotterybanner = 8;
  if (has_lotterybanner()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->lotterybanner(), output);
  }

  // optional uint64 id = 9;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->id(), output);
  }

  // optional .Cmd.AEGuildBuildingSubmitInfo gbuildingsubmit = 10;
  if (has_gbuildingsubmit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->gbuildingsubmit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ActivityEvent)
}

::google::protobuf::uint8* ActivityEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ActivityEvent)
  // optional .Cmd.EActivityEventType type = 1 [default = EACTIVITYEVENTTYPE_MIN];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint64 begintime = 2 [default = 0];
  if (has_begintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->begintime(), target);
  }

  // optional uint64 endtime = 3 [default = 0];
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->endtime(), target);
  }

  // optional .Cmd.AEFreeTransferInfo freetransfer = 4;
  if (has_freetransfer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->freetransfer(), target);
  }

  // repeated .Cmd.AERewardInfo reward = 5;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->reward(i), target);
  }

  // repeated .Cmd.AEResetInfo resetinfo = 6;
  for (int i = 0; i < this->resetinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->resetinfo(i), target);
  }

  // optional .Cmd.AELotteryDiscount lotterydiscount = 7;
  if (has_lotterydiscount()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->lotterydiscount(), target);
  }

  // optional .Cmd.AELotteryBanner lotterybanner = 8;
  if (has_lotterybanner()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->lotterybanner(), target);
  }

  // optional uint64 id = 9;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->id(), target);
  }

  // optional .Cmd.AEGuildBuildingSubmitInfo gbuildingsubmit = 10;
  if (has_gbuildingsubmit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->gbuildingsubmit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ActivityEvent)
  return target;
}

int ActivityEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.EActivityEventType type = 1 [default = EACTIVITYEVENTTYPE_MIN];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint64 begintime = 2 [default = 0];
    if (has_begintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->begintime());
    }

    // optional uint64 endtime = 3 [default = 0];
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->endtime());
    }

    // optional .Cmd.AEFreeTransferInfo freetransfer = 4;
    if (has_freetransfer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->freetransfer());
    }

    // optional .Cmd.AELotteryDiscount lotterydiscount = 7;
    if (has_lotterydiscount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lotterydiscount());
    }

    // optional .Cmd.AELotteryBanner lotterybanner = 8;
    if (has_lotterybanner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lotterybanner());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 id = 9;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional .Cmd.AEGuildBuildingSubmitInfo gbuildingsubmit = 10;
    if (has_gbuildingsubmit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gbuildingsubmit());
    }

  }
  // repeated .Cmd.AERewardInfo reward = 5;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  // repeated .Cmd.AEResetInfo resetinfo = 6;
  total_size += 1 * this->resetinfo_size();
  for (int i = 0; i < this->resetinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->resetinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityEvent::MergeFrom(const ActivityEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_.MergeFrom(from.reward_);
  resetinfo_.MergeFrom(from.resetinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_begintime()) {
      set_begintime(from.begintime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_freetransfer()) {
      mutable_freetransfer()->::Cmd::AEFreeTransferInfo::MergeFrom(from.freetransfer());
    }
    if (from.has_lotterydiscount()) {
      mutable_lotterydiscount()->::Cmd::AELotteryDiscount::MergeFrom(from.lotterydiscount());
    }
    if (from.has_lotterybanner()) {
      mutable_lotterybanner()->::Cmd::AELotteryBanner::MergeFrom(from.lotterybanner());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_gbuildingsubmit()) {
      mutable_gbuildingsubmit()->::Cmd::AEGuildBuildingSubmitInfo::MergeFrom(from.gbuildingsubmit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityEvent::CopyFrom(const ActivityEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityEvent::IsInitialized() const {

  return true;
}

void ActivityEvent::Swap(ActivityEvent* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(begintime_, other->begintime_);
    std::swap(endtime_, other->endtime_);
    std::swap(freetransfer_, other->freetransfer_);
    reward_.Swap(&other->reward_);
    resetinfo_.Swap(&other->resetinfo_);
    std::swap(lotterydiscount_, other->lotterydiscount_);
    std::swap(lotterybanner_, other->lotterybanner_);
    std::swap(id_, other->id_);
    std::swap(gbuildingsubmit_, other->gbuildingsubmit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityEvent_descriptor_;
  metadata.reflection = ActivityEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityEventNtf::kCmdFieldNumber;
const int ActivityEventNtf::kParamFieldNumber;
const int ActivityEventNtf::kEventsFieldNumber;
#endif  // !_MSC_VER

ActivityEventNtf::ActivityEventNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ActivityEventNtf)
}

void ActivityEventNtf::InitAsDefaultInstance() {
}

ActivityEventNtf::ActivityEventNtf(const ActivityEventNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ActivityEventNtf)
}

void ActivityEventNtf::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 64;
  param_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityEventNtf::~ActivityEventNtf() {
  // @@protoc_insertion_point(destructor:Cmd.ActivityEventNtf)
  SharedDtor();
}

void ActivityEventNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActivityEventNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityEventNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityEventNtf_descriptor_;
}

const ActivityEventNtf& ActivityEventNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityEvent_2eproto();
  return *default_instance_;
}

ActivityEventNtf* ActivityEventNtf::default_instance_ = NULL;

ActivityEventNtf* ActivityEventNtf::New() const {
  return new ActivityEventNtf;
}

void ActivityEventNtf::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 64;
    param_ = 1;
  }
  events_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityEventNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ActivityEventNtf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = ACTIVITY_EVENT_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ActivityEventParam param = 2 [default = ACTIVITYEVENTPARAM_NTF];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ActivityEventParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ActivityEventParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_events;
        break;
      }

      // repeated .Cmd.ActivityEvent events = 3;
      case 3: {
        if (tag == 26) {
         parse_events:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_events()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_events;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ActivityEventNtf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ActivityEventNtf)
  return false;
#undef DO_
}

void ActivityEventNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ActivityEventNtf)
  // optional .Cmd.Command cmd = 1 [default = ACTIVITY_EVENT_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ActivityEventParam param = 2 [default = ACTIVITYEVENTPARAM_NTF];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.ActivityEvent events = 3;
  for (int i = 0; i < this->events_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->events(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ActivityEventNtf)
}

::google::protobuf::uint8* ActivityEventNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ActivityEventNtf)
  // optional .Cmd.Command cmd = 1 [default = ACTIVITY_EVENT_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ActivityEventParam param = 2 [default = ACTIVITYEVENTPARAM_NTF];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.ActivityEvent events = 3;
  for (int i = 0; i < this->events_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->events(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ActivityEventNtf)
  return target;
}

int ActivityEventNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = ACTIVITY_EVENT_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ActivityEventParam param = 2 [default = ACTIVITYEVENTPARAM_NTF];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.ActivityEvent events = 3;
  total_size += 1 * this->events_size();
  for (int i = 0; i < this->events_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->events(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityEventNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityEventNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityEventNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityEventNtf::MergeFrom(const ActivityEventNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  events_.MergeFrom(from.events_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityEventNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityEventNtf::CopyFrom(const ActivityEventNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityEventNtf::IsInitialized() const {

  return true;
}

void ActivityEventNtf::Swap(ActivityEventNtf* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    events_.Swap(&other->events_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityEventNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityEventNtf_descriptor_;
  metadata.reflection = ActivityEventNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityEventUserDataNtf::kCmdFieldNumber;
const int ActivityEventUserDataNtf::kParamFieldNumber;
const int ActivityEventUserDataNtf::kRewarditemsFieldNumber;
#endif  // !_MSC_VER

ActivityEventUserDataNtf::ActivityEventUserDataNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ActivityEventUserDataNtf)
}

void ActivityEventUserDataNtf::InitAsDefaultInstance() {
}

ActivityEventUserDataNtf::ActivityEventUserDataNtf(const ActivityEventUserDataNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ActivityEventUserDataNtf)
}

void ActivityEventUserDataNtf::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 64;
  param_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityEventUserDataNtf::~ActivityEventUserDataNtf() {
  // @@protoc_insertion_point(destructor:Cmd.ActivityEventUserDataNtf)
  SharedDtor();
}

void ActivityEventUserDataNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActivityEventUserDataNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityEventUserDataNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityEventUserDataNtf_descriptor_;
}

const ActivityEventUserDataNtf& ActivityEventUserDataNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityEvent_2eproto();
  return *default_instance_;
}

ActivityEventUserDataNtf* ActivityEventUserDataNtf::default_instance_ = NULL;

ActivityEventUserDataNtf* ActivityEventUserDataNtf::New() const {
  return new ActivityEventUserDataNtf;
}

void ActivityEventUserDataNtf::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 64;
    param_ = 2;
  }
  rewarditems_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityEventUserDataNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ActivityEventUserDataNtf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = ACTIVITY_EVENT_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ActivityEventParam param = 2 [default = ACTIVITYEVENTPARAM_USER_DATA_NTF];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ActivityEventParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ActivityEventParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_rewarditems;
        break;
      }

      // repeated .Cmd.AERewardItem rewarditems = 3;
      case 3: {
        if (tag == 26) {
         parse_rewarditems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewarditems()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_rewarditems;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ActivityEventUserDataNtf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ActivityEventUserDataNtf)
  return false;
#undef DO_
}

void ActivityEventUserDataNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ActivityEventUserDataNtf)
  // optional .Cmd.Command cmd = 1 [default = ACTIVITY_EVENT_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ActivityEventParam param = 2 [default = ACTIVITYEVENTPARAM_USER_DATA_NTF];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.AERewardItem rewarditems = 3;
  for (int i = 0; i < this->rewarditems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rewarditems(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ActivityEventUserDataNtf)
}

::google::protobuf::uint8* ActivityEventUserDataNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ActivityEventUserDataNtf)
  // optional .Cmd.Command cmd = 1 [default = ACTIVITY_EVENT_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ActivityEventParam param = 2 [default = ACTIVITYEVENTPARAM_USER_DATA_NTF];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.AERewardItem rewarditems = 3;
  for (int i = 0; i < this->rewarditems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rewarditems(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ActivityEventUserDataNtf)
  return target;
}

int ActivityEventUserDataNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = ACTIVITY_EVENT_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ActivityEventParam param = 2 [default = ACTIVITYEVENTPARAM_USER_DATA_NTF];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.AERewardItem rewarditems = 3;
  total_size += 1 * this->rewarditems_size();
  for (int i = 0; i < this->rewarditems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewarditems(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityEventUserDataNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityEventUserDataNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityEventUserDataNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityEventUserDataNtf::MergeFrom(const ActivityEventUserDataNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewarditems_.MergeFrom(from.rewarditems_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityEventUserDataNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityEventUserDataNtf::CopyFrom(const ActivityEventUserDataNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityEventUserDataNtf::IsInitialized() const {

  return true;
}

void ActivityEventUserDataNtf::Swap(ActivityEventUserDataNtf* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    rewarditems_.Swap(&other->rewarditems_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityEventUserDataNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityEventUserDataNtf_descriptor_;
  metadata.reflection = ActivityEventUserDataNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityEventCnt::kTypeFieldNumber;
const int ActivityEventCnt::kIdFieldNumber;
const int ActivityEventCnt::kCountFieldNumber;
#endif  // !_MSC_VER

ActivityEventCnt::ActivityEventCnt()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ActivityEventCnt)
}

void ActivityEventCnt::InitAsDefaultInstance() {
}

ActivityEventCnt::ActivityEventCnt(const ActivityEventCnt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ActivityEventCnt)
}

void ActivityEventCnt::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityEventCnt::~ActivityEventCnt() {
  // @@protoc_insertion_point(destructor:Cmd.ActivityEventCnt)
  SharedDtor();
}

void ActivityEventCnt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActivityEventCnt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityEventCnt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityEventCnt_descriptor_;
}

const ActivityEventCnt& ActivityEventCnt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityEvent_2eproto();
  return *default_instance_;
}

ActivityEventCnt* ActivityEventCnt::default_instance_ = NULL;

ActivityEventCnt* ActivityEventCnt::New() const {
  return new ActivityEventCnt;
}

void ActivityEventCnt::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ActivityEventCnt*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityEventCnt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ActivityEventCnt)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.EActivityEventType type = 1 [default = EACTIVITYEVENTTYPE_MIN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EActivityEventType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EActivityEventType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint64 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // optional uint32 count = 3;
      case 3: {
        if (tag == 24) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ActivityEventCnt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ActivityEventCnt)
  return false;
#undef DO_
}

void ActivityEventCnt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ActivityEventCnt)
  // optional .Cmd.EActivityEventType type = 1 [default = EACTIVITYEVENTTYPE_MIN];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint64 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->id(), output);
  }

  // optional uint32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ActivityEventCnt)
}

::google::protobuf::uint8* ActivityEventCnt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ActivityEventCnt)
  // optional .Cmd.EActivityEventType type = 1 [default = EACTIVITYEVENTTYPE_MIN];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint64 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->id(), target);
  }

  // optional uint32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ActivityEventCnt)
  return target;
}

int ActivityEventCnt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.EActivityEventType type = 1 [default = EACTIVITYEVENTTYPE_MIN];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint64 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityEventCnt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityEventCnt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityEventCnt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityEventCnt::MergeFrom(const ActivityEventCnt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityEventCnt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityEventCnt::CopyFrom(const ActivityEventCnt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityEventCnt::IsInitialized() const {

  return true;
}

void ActivityEventCnt::Swap(ActivityEventCnt* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityEventCnt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityEventCnt_descriptor_;
  metadata.reflection = ActivityEventCnt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityEventNtfEventCntCmd::kCmdFieldNumber;
const int ActivityEventNtfEventCntCmd::kParamFieldNumber;
const int ActivityEventNtfEventCntCmd::kCntFieldNumber;
#endif  // !_MSC_VER

ActivityEventNtfEventCntCmd::ActivityEventNtfEventCntCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ActivityEventNtfEventCntCmd)
}

void ActivityEventNtfEventCntCmd::InitAsDefaultInstance() {
}

ActivityEventNtfEventCntCmd::ActivityEventNtfEventCntCmd(const ActivityEventNtfEventCntCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ActivityEventNtfEventCntCmd)
}

void ActivityEventNtfEventCntCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 64;
  param_ = 3;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityEventNtfEventCntCmd::~ActivityEventNtfEventCntCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ActivityEventNtfEventCntCmd)
  SharedDtor();
}

void ActivityEventNtfEventCntCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActivityEventNtfEventCntCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityEventNtfEventCntCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityEventNtfEventCntCmd_descriptor_;
}

const ActivityEventNtfEventCntCmd& ActivityEventNtfEventCntCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityEvent_2eproto();
  return *default_instance_;
}

ActivityEventNtfEventCntCmd* ActivityEventNtfEventCntCmd::default_instance_ = NULL;

ActivityEventNtfEventCntCmd* ActivityEventNtfEventCntCmd::New() const {
  return new ActivityEventNtfEventCntCmd;
}

void ActivityEventNtfEventCntCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 64;
    param_ = 3;
  }
  cnt_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityEventNtfEventCntCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ActivityEventNtfEventCntCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = ACTIVITY_EVENT_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ActivityEventParam param = 2 [default = ACTIVITYEVENTPARAM_NTF_EVENT_CNT];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ActivityEventParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ActivityEventParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cnt;
        break;
      }

      // repeated .Cmd.ActivityEventCnt cnt = 3;
      case 3: {
        if (tag == 26) {
         parse_cnt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cnt()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cnt;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ActivityEventNtfEventCntCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ActivityEventNtfEventCntCmd)
  return false;
#undef DO_
}

void ActivityEventNtfEventCntCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ActivityEventNtfEventCntCmd)
  // optional .Cmd.Command cmd = 1 [default = ACTIVITY_EVENT_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ActivityEventParam param = 2 [default = ACTIVITYEVENTPARAM_NTF_EVENT_CNT];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.ActivityEventCnt cnt = 3;
  for (int i = 0; i < this->cnt_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cnt(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ActivityEventNtfEventCntCmd)
}

::google::protobuf::uint8* ActivityEventNtfEventCntCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ActivityEventNtfEventCntCmd)
  // optional .Cmd.Command cmd = 1 [default = ACTIVITY_EVENT_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ActivityEventParam param = 2 [default = ACTIVITYEVENTPARAM_NTF_EVENT_CNT];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.ActivityEventCnt cnt = 3;
  for (int i = 0; i < this->cnt_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cnt(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ActivityEventNtfEventCntCmd)
  return target;
}

int ActivityEventNtfEventCntCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = ACTIVITY_EVENT_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ActivityEventParam param = 2 [default = ACTIVITYEVENTPARAM_NTF_EVENT_CNT];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.ActivityEventCnt cnt = 3;
  total_size += 1 * this->cnt_size();
  for (int i = 0; i < this->cnt_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cnt(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityEventNtfEventCntCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityEventNtfEventCntCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityEventNtfEventCntCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityEventNtfEventCntCmd::MergeFrom(const ActivityEventNtfEventCntCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  cnt_.MergeFrom(from.cnt_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityEventNtfEventCntCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityEventNtfEventCntCmd::CopyFrom(const ActivityEventNtfEventCntCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityEventNtfEventCntCmd::IsInitialized() const {

  return true;
}

void ActivityEventNtfEventCntCmd::Swap(ActivityEventNtfEventCntCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    cnt_.Swap(&other->cnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityEventNtfEventCntCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityEventNtfEventCntCmd_descriptor_;
  metadata.reflection = ActivityEventNtfEventCntCmd_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

// @@protoc_insertion_point(global_scope)
