// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PhotoCmd.proto

#ifndef PROTOBUF_PhotoCmd_2eproto__INCLUDED
#define PROTOBUF_PhotoCmd_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "xCmd.pb.h"
#include "GuildCmd.pb.h"
#include "ProtoCommon.pb.h"
// @@protoc_insertion_point(includes)

namespace Cmd {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_PhotoCmd_2eproto();
void protobuf_AssignDesc_PhotoCmd_2eproto();
void protobuf_ShutdownFile_PhotoCmd_2eproto();

class PhotoItem;
class PhotoQueryListCmd;
class PhotoOptCmd;
class PhotoUpdateNtf;
class FrameActionPhotoCmd;
class QueryFramePhotoListPhotoCmd;
class QueryUserPhotoListPhotoCmd;
class FrameShow;
class UpdateFrameShowPhotoCmd;
class FramePhotoUpdatePhotoCmd;
class PhotoMd5;
class QueryMd5ListPhotoCmd;
class AddMd5PhotoCmd;
class RemoveMd5PhotoCmd;

enum PhotoParam {
  PHOTOPARAM_QUERY_PHOTO_LIST = 1,
  PHOTOPARAM_PHOTO_OPT = 2,
  PHOTOPARAM_PHOTO_UPDATE = 3,
  PHOTOPARAM_FRAME_ACTION = 4,
  PHOTOPARAM_QUERY_FRAMEPHOTOLIST = 5,
  PHOTOPARAM_QUERY_USERPHOTOLIST = 6,
  PHOTOPARAM_UPDATE_FRAMESHOW = 7,
  PHOTOPARAM_UPDATE_FRAMEPHOTO = 8,
  PHOTOPARAM_QUERY_MD5LIST = 9,
  PHOTOPARAM_ADD_MD5 = 10,
  PHOTOPARAM_REMOVE_MD5 = 11
};
bool PhotoParam_IsValid(int value);
const PhotoParam PhotoParam_MIN = PHOTOPARAM_QUERY_PHOTO_LIST;
const PhotoParam PhotoParam_MAX = PHOTOPARAM_REMOVE_MD5;
const int PhotoParam_ARRAYSIZE = PhotoParam_MAX + 1;

const ::google::protobuf::EnumDescriptor* PhotoParam_descriptor();
inline const ::std::string& PhotoParam_Name(PhotoParam value) {
  return ::google::protobuf::internal::NameOfEnum(
    PhotoParam_descriptor(), value);
}
inline bool PhotoParam_Parse(
    const ::std::string& name, PhotoParam* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PhotoParam>(
    PhotoParam_descriptor(), name, value);
}
enum EPhotoOptType {
  EPHOTOOPTTYPE_MIN = 0,
  EPHOTOOPTTYPE_ADD = 1,
  EPHOTOOPTTYPE_UPLOAD = 2,
  EPHOTOOPTTYPE_REMOVE = 3,
  EPHOTOOPTTYPE_REPLACE = 4,
  EPHOTOOPTTYPE_MAX = 5
};
bool EPhotoOptType_IsValid(int value);
const EPhotoOptType EPhotoOptType_MIN = EPHOTOOPTTYPE_MIN;
const EPhotoOptType EPhotoOptType_MAX = EPHOTOOPTTYPE_MAX;
const int EPhotoOptType_ARRAYSIZE = EPhotoOptType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EPhotoOptType_descriptor();
inline const ::std::string& EPhotoOptType_Name(EPhotoOptType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EPhotoOptType_descriptor(), value);
}
inline bool EPhotoOptType_Parse(
    const ::std::string& name, EPhotoOptType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EPhotoOptType>(
    EPhotoOptType_descriptor(), name, value);
}
enum EFrameAction {
  EFRAMEACTION_MIN = 0,
  EFRAMEACTION_UPLOAD = 1,
  EFRAMEACTION_REMOVE = 2,
  EFRAMEACTION_MAX = 3
};
bool EFrameAction_IsValid(int value);
const EFrameAction EFrameAction_MIN = EFRAMEACTION_MIN;
const EFrameAction EFrameAction_MAX = EFRAMEACTION_MAX;
const int EFrameAction_ARRAYSIZE = EFrameAction_MAX + 1;

const ::google::protobuf::EnumDescriptor* EFrameAction_descriptor();
inline const ::std::string& EFrameAction_Name(EFrameAction value) {
  return ::google::protobuf::internal::NameOfEnum(
    EFrameAction_descriptor(), value);
}
inline bool EFrameAction_Parse(
    const ::std::string& name, EFrameAction* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EFrameAction>(
    EFrameAction_descriptor(), name, value);
}
// ===================================================================

class PhotoItem : public ::google::protobuf::Message {
 public:
  PhotoItem();
  virtual ~PhotoItem();

  PhotoItem(const PhotoItem& from);

  inline PhotoItem& operator=(const PhotoItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PhotoItem& default_instance();

  void Swap(PhotoItem* other);

  // implements Message ----------------------------------------------

  PhotoItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PhotoItem& from);
  void MergeFrom(const PhotoItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 index = 1 [default = 0];
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // optional uint32 mapid = 2 [default = 0];
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapidFieldNumber = 2;
  inline ::google::protobuf::uint32 mapid() const;
  inline void set_mapid(::google::protobuf::uint32 value);

  // optional uint32 time = 3 [default = 0];
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional uint32 anglez = 4 [default = 0];
  inline bool has_anglez() const;
  inline void clear_anglez();
  static const int kAnglezFieldNumber = 4;
  inline ::google::protobuf::uint32 anglez() const;
  inline void set_anglez(::google::protobuf::uint32 value);

  // optional bool isupload = 5 [default = false];
  inline bool has_isupload() const;
  inline void clear_isupload();
  static const int kIsuploadFieldNumber = 5;
  inline bool isupload() const;
  inline void set_isupload(bool value);

  // optional uint64 charid = 6 [default = 0];
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 6;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.PhotoItem)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_mapid();
  inline void clear_has_mapid();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_anglez();
  inline void clear_has_anglez();
  inline void set_has_isupload();
  inline void clear_has_isupload();
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 index_;
  ::google::protobuf::uint32 mapid_;
  ::google::protobuf::uint32 time_;
  ::google::protobuf::uint32 anglez_;
  ::google::protobuf::uint64 charid_;
  bool isupload_;
  friend void  protobuf_AddDesc_PhotoCmd_2eproto();
  friend void protobuf_AssignDesc_PhotoCmd_2eproto();
  friend void protobuf_ShutdownFile_PhotoCmd_2eproto();

  void InitAsDefaultInstance();
  static PhotoItem* default_instance_;
};
// -------------------------------------------------------------------

class PhotoQueryListCmd : public ::google::protobuf::Message {
 public:
  PhotoQueryListCmd();
  virtual ~PhotoQueryListCmd();

  PhotoQueryListCmd(const PhotoQueryListCmd& from);

  inline PhotoQueryListCmd& operator=(const PhotoQueryListCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PhotoQueryListCmd& default_instance();

  void Swap(PhotoQueryListCmd* other);

  // implements Message ----------------------------------------------

  PhotoQueryListCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PhotoQueryListCmd& from);
  void MergeFrom(const PhotoQueryListCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PHOTO_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.PhotoParam param = 2 [default = PHOTOPARAM_QUERY_PHOTO_LIST];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::PhotoParam param() const;
  inline void set_param(::Cmd::PhotoParam value);

  // repeated .Cmd.PhotoItem photos = 3;
  inline int photos_size() const;
  inline void clear_photos();
  static const int kPhotosFieldNumber = 3;
  inline const ::Cmd::PhotoItem& photos(int index) const;
  inline ::Cmd::PhotoItem* mutable_photos(int index);
  inline ::Cmd::PhotoItem* add_photos();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::PhotoItem >&
      photos() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::PhotoItem >*
      mutable_photos();

  // optional uint32 size = 4 [default = 0];
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 4;
  inline ::google::protobuf::uint32 size() const;
  inline void set_size(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.PhotoQueryListCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_size();
  inline void clear_has_size();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::PhotoItem > photos_;
  ::google::protobuf::uint32 size_;
  friend void  protobuf_AddDesc_PhotoCmd_2eproto();
  friend void protobuf_AssignDesc_PhotoCmd_2eproto();
  friend void protobuf_ShutdownFile_PhotoCmd_2eproto();

  void InitAsDefaultInstance();
  static PhotoQueryListCmd* default_instance_;
};
// -------------------------------------------------------------------

class PhotoOptCmd : public ::google::protobuf::Message {
 public:
  PhotoOptCmd();
  virtual ~PhotoOptCmd();

  PhotoOptCmd(const PhotoOptCmd& from);

  inline PhotoOptCmd& operator=(const PhotoOptCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PhotoOptCmd& default_instance();

  void Swap(PhotoOptCmd* other);

  // implements Message ----------------------------------------------

  PhotoOptCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PhotoOptCmd& from);
  void MergeFrom(const PhotoOptCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PHOTO_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.PhotoParam param = 2 [default = PHOTOPARAM_PHOTO_OPT];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::PhotoParam param() const;
  inline void set_param(::Cmd::PhotoParam value);

  // optional .Cmd.EPhotoOptType opttype = 3 [default = EPHOTOOPTTYPE_MIN];
  inline bool has_opttype() const;
  inline void clear_opttype();
  static const int kOpttypeFieldNumber = 3;
  inline ::Cmd::EPhotoOptType opttype() const;
  inline void set_opttype(::Cmd::EPhotoOptType value);

  // optional uint32 index = 4 [default = 0];
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 4;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // optional uint32 anglez = 5 [default = 0];
  inline bool has_anglez() const;
  inline void clear_anglez();
  static const int kAnglezFieldNumber = 5;
  inline ::google::protobuf::uint32 anglez() const;
  inline void set_anglez(::google::protobuf::uint32 value);

  // optional uint32 mapid = 6 [default = 0];
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapidFieldNumber = 6;
  inline ::google::protobuf::uint32 mapid() const;
  inline void set_mapid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.PhotoOptCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_opttype();
  inline void clear_has_opttype();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_anglez();
  inline void clear_has_anglez();
  inline void set_has_mapid();
  inline void clear_has_mapid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  int opttype_;
  ::google::protobuf::uint32 index_;
  ::google::protobuf::uint32 anglez_;
  ::google::protobuf::uint32 mapid_;
  friend void  protobuf_AddDesc_PhotoCmd_2eproto();
  friend void protobuf_AssignDesc_PhotoCmd_2eproto();
  friend void protobuf_ShutdownFile_PhotoCmd_2eproto();

  void InitAsDefaultInstance();
  static PhotoOptCmd* default_instance_;
};
// -------------------------------------------------------------------

class PhotoUpdateNtf : public ::google::protobuf::Message {
 public:
  PhotoUpdateNtf();
  virtual ~PhotoUpdateNtf();

  PhotoUpdateNtf(const PhotoUpdateNtf& from);

  inline PhotoUpdateNtf& operator=(const PhotoUpdateNtf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PhotoUpdateNtf& default_instance();

  void Swap(PhotoUpdateNtf* other);

  // implements Message ----------------------------------------------

  PhotoUpdateNtf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PhotoUpdateNtf& from);
  void MergeFrom(const PhotoUpdateNtf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PHOTO_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.PhotoParam param = 2 [default = PHOTOPARAM_PHOTO_UPDATE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::PhotoParam param() const;
  inline void set_param(::Cmd::PhotoParam value);

  // optional .Cmd.EPhotoOptType opttype = 3 [default = EPHOTOOPTTYPE_MIN];
  inline bool has_opttype() const;
  inline void clear_opttype();
  static const int kOpttypeFieldNumber = 3;
  inline ::Cmd::EPhotoOptType opttype() const;
  inline void set_opttype(::Cmd::EPhotoOptType value);

  // optional .Cmd.PhotoItem photo = 4;
  inline bool has_photo() const;
  inline void clear_photo();
  static const int kPhotoFieldNumber = 4;
  inline const ::Cmd::PhotoItem& photo() const;
  inline ::Cmd::PhotoItem* mutable_photo();
  inline ::Cmd::PhotoItem* release_photo();
  inline void set_allocated_photo(::Cmd::PhotoItem* photo);

  // @@protoc_insertion_point(class_scope:Cmd.PhotoUpdateNtf)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_opttype();
  inline void clear_has_opttype();
  inline void set_has_photo();
  inline void clear_has_photo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::Cmd::PhotoItem* photo_;
  int opttype_;
  friend void  protobuf_AddDesc_PhotoCmd_2eproto();
  friend void protobuf_AssignDesc_PhotoCmd_2eproto();
  friend void protobuf_ShutdownFile_PhotoCmd_2eproto();

  void InitAsDefaultInstance();
  static PhotoUpdateNtf* default_instance_;
};
// -------------------------------------------------------------------

class FrameActionPhotoCmd : public ::google::protobuf::Message {
 public:
  FrameActionPhotoCmd();
  virtual ~FrameActionPhotoCmd();

  FrameActionPhotoCmd(const FrameActionPhotoCmd& from);

  inline FrameActionPhotoCmd& operator=(const FrameActionPhotoCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FrameActionPhotoCmd& default_instance();

  void Swap(FrameActionPhotoCmd* other);

  // implements Message ----------------------------------------------

  FrameActionPhotoCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FrameActionPhotoCmd& from);
  void MergeFrom(const FrameActionPhotoCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PHOTO_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.PhotoParam param = 2 [default = PHOTOPARAM_FRAME_ACTION];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::PhotoParam param() const;
  inline void set_param(::Cmd::PhotoParam value);

  // optional uint32 frameid = 3 [default = 0];
  inline bool has_frameid() const;
  inline void clear_frameid();
  static const int kFrameidFieldNumber = 3;
  inline ::google::protobuf::uint32 frameid() const;
  inline void set_frameid(::google::protobuf::uint32 value);

  // optional .Cmd.EFrameAction action = 4 [default = EFRAMEACTION_MIN];
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 4;
  inline ::Cmd::EFrameAction action() const;
  inline void set_action(::Cmd::EFrameAction value);

  // repeated .Cmd.GuildPhoto photos = 5;
  inline int photos_size() const;
  inline void clear_photos();
  static const int kPhotosFieldNumber = 5;
  inline const ::Cmd::GuildPhoto& photos(int index) const;
  inline ::Cmd::GuildPhoto* mutable_photos(int index);
  inline ::Cmd::GuildPhoto* add_photos();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::GuildPhoto >&
      photos() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::GuildPhoto >*
      mutable_photos();

  // @@protoc_insertion_point(class_scope:Cmd.FrameActionPhotoCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_frameid();
  inline void clear_has_frameid();
  inline void set_has_action();
  inline void clear_has_action();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 frameid_;
  int action_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::GuildPhoto > photos_;
  friend void  protobuf_AddDesc_PhotoCmd_2eproto();
  friend void protobuf_AssignDesc_PhotoCmd_2eproto();
  friend void protobuf_ShutdownFile_PhotoCmd_2eproto();

  void InitAsDefaultInstance();
  static FrameActionPhotoCmd* default_instance_;
};
// -------------------------------------------------------------------

class QueryFramePhotoListPhotoCmd : public ::google::protobuf::Message {
 public:
  QueryFramePhotoListPhotoCmd();
  virtual ~QueryFramePhotoListPhotoCmd();

  QueryFramePhotoListPhotoCmd(const QueryFramePhotoListPhotoCmd& from);

  inline QueryFramePhotoListPhotoCmd& operator=(const QueryFramePhotoListPhotoCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryFramePhotoListPhotoCmd& default_instance();

  void Swap(QueryFramePhotoListPhotoCmd* other);

  // implements Message ----------------------------------------------

  QueryFramePhotoListPhotoCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryFramePhotoListPhotoCmd& from);
  void MergeFrom(const QueryFramePhotoListPhotoCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PHOTO_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.PhotoParam param = 2 [default = PHOTOPARAM_QUERY_FRAMEPHOTOLIST];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::PhotoParam param() const;
  inline void set_param(::Cmd::PhotoParam value);

  // optional uint32 frameid = 3 [default = 0];
  inline bool has_frameid() const;
  inline void clear_frameid();
  static const int kFrameidFieldNumber = 3;
  inline ::google::protobuf::uint32 frameid() const;
  inline void set_frameid(::google::protobuf::uint32 value);

  // repeated .Cmd.GuildPhoto photos = 4;
  inline int photos_size() const;
  inline void clear_photos();
  static const int kPhotosFieldNumber = 4;
  inline const ::Cmd::GuildPhoto& photos(int index) const;
  inline ::Cmd::GuildPhoto* mutable_photos(int index);
  inline ::Cmd::GuildPhoto* add_photos();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::GuildPhoto >&
      photos() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::GuildPhoto >*
      mutable_photos();

  // @@protoc_insertion_point(class_scope:Cmd.QueryFramePhotoListPhotoCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_frameid();
  inline void clear_has_frameid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::GuildPhoto > photos_;
  ::google::protobuf::uint32 frameid_;
  friend void  protobuf_AddDesc_PhotoCmd_2eproto();
  friend void protobuf_AssignDesc_PhotoCmd_2eproto();
  friend void protobuf_ShutdownFile_PhotoCmd_2eproto();

  void InitAsDefaultInstance();
  static QueryFramePhotoListPhotoCmd* default_instance_;
};
// -------------------------------------------------------------------

class QueryUserPhotoListPhotoCmd : public ::google::protobuf::Message {
 public:
  QueryUserPhotoListPhotoCmd();
  virtual ~QueryUserPhotoListPhotoCmd();

  QueryUserPhotoListPhotoCmd(const QueryUserPhotoListPhotoCmd& from);

  inline QueryUserPhotoListPhotoCmd& operator=(const QueryUserPhotoListPhotoCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryUserPhotoListPhotoCmd& default_instance();

  void Swap(QueryUserPhotoListPhotoCmd* other);

  // implements Message ----------------------------------------------

  QueryUserPhotoListPhotoCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryUserPhotoListPhotoCmd& from);
  void MergeFrom(const QueryUserPhotoListPhotoCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PHOTO_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.PhotoParam param = 2 [default = PHOTOPARAM_QUERY_USERPHOTOLIST];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::PhotoParam param() const;
  inline void set_param(::Cmd::PhotoParam value);

  // repeated .Cmd.PhotoFrame frames = 3;
  inline int frames_size() const;
  inline void clear_frames();
  static const int kFramesFieldNumber = 3;
  inline const ::Cmd::PhotoFrame& frames(int index) const;
  inline ::Cmd::PhotoFrame* mutable_frames(int index);
  inline ::Cmd::PhotoFrame* add_frames();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::PhotoFrame >&
      frames() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::PhotoFrame >*
      mutable_frames();

  // optional uint32 maxphoto = 4 [default = 0];
  inline bool has_maxphoto() const;
  inline void clear_maxphoto();
  static const int kMaxphotoFieldNumber = 4;
  inline ::google::protobuf::uint32 maxphoto() const;
  inline void set_maxphoto(::google::protobuf::uint32 value);

  // optional uint32 maxframe = 5 [default = 0];
  inline bool has_maxframe() const;
  inline void clear_maxframe();
  static const int kMaxframeFieldNumber = 5;
  inline ::google::protobuf::uint32 maxframe() const;
  inline void set_maxframe(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.QueryUserPhotoListPhotoCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_maxphoto();
  inline void clear_has_maxphoto();
  inline void set_has_maxframe();
  inline void clear_has_maxframe();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::PhotoFrame > frames_;
  ::google::protobuf::uint32 maxphoto_;
  ::google::protobuf::uint32 maxframe_;
  friend void  protobuf_AddDesc_PhotoCmd_2eproto();
  friend void protobuf_AssignDesc_PhotoCmd_2eproto();
  friend void protobuf_ShutdownFile_PhotoCmd_2eproto();

  void InitAsDefaultInstance();
  static QueryUserPhotoListPhotoCmd* default_instance_;
};
// -------------------------------------------------------------------

class FrameShow : public ::google::protobuf::Message {
 public:
  FrameShow();
  virtual ~FrameShow();

  FrameShow(const FrameShow& from);

  inline FrameShow& operator=(const FrameShow& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FrameShow& default_instance();

  void Swap(FrameShow* other);

  // implements Message ----------------------------------------------

  FrameShow* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FrameShow& from);
  void MergeFrom(const FrameShow& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 frameid = 1 [default = 0];
  inline bool has_frameid() const;
  inline void clear_frameid();
  static const int kFrameidFieldNumber = 1;
  inline ::google::protobuf::uint32 frameid() const;
  inline void set_frameid(::google::protobuf::uint32 value);

  // optional .Cmd.GuildPhoto photo = 2;
  inline bool has_photo() const;
  inline void clear_photo();
  static const int kPhotoFieldNumber = 2;
  inline const ::Cmd::GuildPhoto& photo() const;
  inline ::Cmd::GuildPhoto* mutable_photo();
  inline ::Cmd::GuildPhoto* release_photo();
  inline void set_allocated_photo(::Cmd::GuildPhoto* photo);

  // @@protoc_insertion_point(class_scope:Cmd.FrameShow)
 private:
  inline void set_has_frameid();
  inline void clear_has_frameid();
  inline void set_has_photo();
  inline void clear_has_photo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Cmd::GuildPhoto* photo_;
  ::google::protobuf::uint32 frameid_;
  friend void  protobuf_AddDesc_PhotoCmd_2eproto();
  friend void protobuf_AssignDesc_PhotoCmd_2eproto();
  friend void protobuf_ShutdownFile_PhotoCmd_2eproto();

  void InitAsDefaultInstance();
  static FrameShow* default_instance_;
};
// -------------------------------------------------------------------

class UpdateFrameShowPhotoCmd : public ::google::protobuf::Message {
 public:
  UpdateFrameShowPhotoCmd();
  virtual ~UpdateFrameShowPhotoCmd();

  UpdateFrameShowPhotoCmd(const UpdateFrameShowPhotoCmd& from);

  inline UpdateFrameShowPhotoCmd& operator=(const UpdateFrameShowPhotoCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateFrameShowPhotoCmd& default_instance();

  void Swap(UpdateFrameShowPhotoCmd* other);

  // implements Message ----------------------------------------------

  UpdateFrameShowPhotoCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateFrameShowPhotoCmd& from);
  void MergeFrom(const UpdateFrameShowPhotoCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PHOTO_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.PhotoParam param = 2 [default = PHOTOPARAM_UPDATE_FRAMESHOW];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::PhotoParam param() const;
  inline void set_param(::Cmd::PhotoParam value);

  // repeated .Cmd.FrameShow shows = 3;
  inline int shows_size() const;
  inline void clear_shows();
  static const int kShowsFieldNumber = 3;
  inline const ::Cmd::FrameShow& shows(int index) const;
  inline ::Cmd::FrameShow* mutable_shows(int index);
  inline ::Cmd::FrameShow* add_shows();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::FrameShow >&
      shows() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::FrameShow >*
      mutable_shows();

  // @@protoc_insertion_point(class_scope:Cmd.UpdateFrameShowPhotoCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::FrameShow > shows_;
  friend void  protobuf_AddDesc_PhotoCmd_2eproto();
  friend void protobuf_AssignDesc_PhotoCmd_2eproto();
  friend void protobuf_ShutdownFile_PhotoCmd_2eproto();

  void InitAsDefaultInstance();
  static UpdateFrameShowPhotoCmd* default_instance_;
};
// -------------------------------------------------------------------

class FramePhotoUpdatePhotoCmd : public ::google::protobuf::Message {
 public:
  FramePhotoUpdatePhotoCmd();
  virtual ~FramePhotoUpdatePhotoCmd();

  FramePhotoUpdatePhotoCmd(const FramePhotoUpdatePhotoCmd& from);

  inline FramePhotoUpdatePhotoCmd& operator=(const FramePhotoUpdatePhotoCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FramePhotoUpdatePhotoCmd& default_instance();

  void Swap(FramePhotoUpdatePhotoCmd* other);

  // implements Message ----------------------------------------------

  FramePhotoUpdatePhotoCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FramePhotoUpdatePhotoCmd& from);
  void MergeFrom(const FramePhotoUpdatePhotoCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PHOTO_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.PhotoParam param = 2 [default = PHOTOPARAM_UPDATE_FRAMEPHOTO];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::PhotoParam param() const;
  inline void set_param(::Cmd::PhotoParam value);

  // optional uint32 frameid = 3 [default = 0];
  inline bool has_frameid() const;
  inline void clear_frameid();
  static const int kFrameidFieldNumber = 3;
  inline ::google::protobuf::uint32 frameid() const;
  inline void set_frameid(::google::protobuf::uint32 value);

  // optional .Cmd.GuildPhoto update = 4;
  inline bool has_update() const;
  inline void clear_update();
  static const int kUpdateFieldNumber = 4;
  inline const ::Cmd::GuildPhoto& update() const;
  inline ::Cmd::GuildPhoto* mutable_update();
  inline ::Cmd::GuildPhoto* release_update();
  inline void set_allocated_update(::Cmd::GuildPhoto* update);

  // optional .Cmd.GuildPhoto del = 5;
  inline bool has_del() const;
  inline void clear_del();
  static const int kDelFieldNumber = 5;
  inline const ::Cmd::GuildPhoto& del() const;
  inline ::Cmd::GuildPhoto* mutable_del();
  inline ::Cmd::GuildPhoto* release_del();
  inline void set_allocated_del(::Cmd::GuildPhoto* del);

  // @@protoc_insertion_point(class_scope:Cmd.FramePhotoUpdatePhotoCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_frameid();
  inline void clear_has_frameid();
  inline void set_has_update();
  inline void clear_has_update();
  inline void set_has_del();
  inline void clear_has_del();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::Cmd::GuildPhoto* update_;
  ::Cmd::GuildPhoto* del_;
  ::google::protobuf::uint32 frameid_;
  friend void  protobuf_AddDesc_PhotoCmd_2eproto();
  friend void protobuf_AssignDesc_PhotoCmd_2eproto();
  friend void protobuf_ShutdownFile_PhotoCmd_2eproto();

  void InitAsDefaultInstance();
  static FramePhotoUpdatePhotoCmd* default_instance_;
};
// -------------------------------------------------------------------

class PhotoMd5 : public ::google::protobuf::Message {
 public:
  PhotoMd5();
  virtual ~PhotoMd5();

  PhotoMd5(const PhotoMd5& from);

  inline PhotoMd5& operator=(const PhotoMd5& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PhotoMd5& default_instance();

  void Swap(PhotoMd5* other);

  // implements Message ----------------------------------------------

  PhotoMd5* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PhotoMd5& from);
  void MergeFrom(const PhotoMd5& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 sourceid = 1 [default = 0];
  inline bool has_sourceid() const;
  inline void clear_sourceid();
  static const int kSourceidFieldNumber = 1;
  inline ::google::protobuf::uint32 sourceid() const;
  inline void set_sourceid(::google::protobuf::uint32 value);

  // optional uint32 time = 2 [default = 0];
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional .Cmd.ESource source = 3 [default = ESOURCE_MIN];
  inline bool has_source() const;
  inline void clear_source();
  static const int kSourceFieldNumber = 3;
  inline ::Cmd::ESource source() const;
  inline void set_source(::Cmd::ESource value);

  // optional string md5 = 4;
  inline bool has_md5() const;
  inline void clear_md5();
  static const int kMd5FieldNumber = 4;
  inline const ::std::string& md5() const;
  inline void set_md5(const ::std::string& value);
  inline void set_md5(const char* value);
  inline void set_md5(const char* value, size_t size);
  inline ::std::string* mutable_md5();
  inline ::std::string* release_md5();
  inline void set_allocated_md5(::std::string* md5);

  // @@protoc_insertion_point(class_scope:Cmd.PhotoMd5)
 private:
  inline void set_has_sourceid();
  inline void clear_has_sourceid();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_source();
  inline void clear_has_source();
  inline void set_has_md5();
  inline void clear_has_md5();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 sourceid_;
  ::google::protobuf::uint32 time_;
  ::std::string* md5_;
  int source_;
  friend void  protobuf_AddDesc_PhotoCmd_2eproto();
  friend void protobuf_AssignDesc_PhotoCmd_2eproto();
  friend void protobuf_ShutdownFile_PhotoCmd_2eproto();

  void InitAsDefaultInstance();
  static PhotoMd5* default_instance_;
};
// -------------------------------------------------------------------

class QueryMd5ListPhotoCmd : public ::google::protobuf::Message {
 public:
  QueryMd5ListPhotoCmd();
  virtual ~QueryMd5ListPhotoCmd();

  QueryMd5ListPhotoCmd(const QueryMd5ListPhotoCmd& from);

  inline QueryMd5ListPhotoCmd& operator=(const QueryMd5ListPhotoCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryMd5ListPhotoCmd& default_instance();

  void Swap(QueryMd5ListPhotoCmd* other);

  // implements Message ----------------------------------------------

  QueryMd5ListPhotoCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryMd5ListPhotoCmd& from);
  void MergeFrom(const QueryMd5ListPhotoCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PHOTO_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.PhotoParam param = 2 [default = PHOTOPARAM_QUERY_MD5LIST];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::PhotoParam param() const;
  inline void set_param(::Cmd::PhotoParam value);

  // repeated .Cmd.PhotoMd5 item = 3;
  inline int item_size() const;
  inline void clear_item();
  static const int kItemFieldNumber = 3;
  inline const ::Cmd::PhotoMd5& item(int index) const;
  inline ::Cmd::PhotoMd5* mutable_item(int index);
  inline ::Cmd::PhotoMd5* add_item();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::PhotoMd5 >&
      item() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::PhotoMd5 >*
      mutable_item();

  // @@protoc_insertion_point(class_scope:Cmd.QueryMd5ListPhotoCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::PhotoMd5 > item_;
  friend void  protobuf_AddDesc_PhotoCmd_2eproto();
  friend void protobuf_AssignDesc_PhotoCmd_2eproto();
  friend void protobuf_ShutdownFile_PhotoCmd_2eproto();

  void InitAsDefaultInstance();
  static QueryMd5ListPhotoCmd* default_instance_;
};
// -------------------------------------------------------------------

class AddMd5PhotoCmd : public ::google::protobuf::Message {
 public:
  AddMd5PhotoCmd();
  virtual ~AddMd5PhotoCmd();

  AddMd5PhotoCmd(const AddMd5PhotoCmd& from);

  inline AddMd5PhotoCmd& operator=(const AddMd5PhotoCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddMd5PhotoCmd& default_instance();

  void Swap(AddMd5PhotoCmd* other);

  // implements Message ----------------------------------------------

  AddMd5PhotoCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddMd5PhotoCmd& from);
  void MergeFrom(const AddMd5PhotoCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PHOTO_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.PhotoParam param = 2 [default = PHOTOPARAM_ADD_MD5];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::PhotoParam param() const;
  inline void set_param(::Cmd::PhotoParam value);

  // optional .Cmd.PhotoMd5 md5 = 3;
  inline bool has_md5() const;
  inline void clear_md5();
  static const int kMd5FieldNumber = 3;
  inline const ::Cmd::PhotoMd5& md5() const;
  inline ::Cmd::PhotoMd5* mutable_md5();
  inline ::Cmd::PhotoMd5* release_md5();
  inline void set_allocated_md5(::Cmd::PhotoMd5* md5);

  // @@protoc_insertion_point(class_scope:Cmd.AddMd5PhotoCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_md5();
  inline void clear_has_md5();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::Cmd::PhotoMd5* md5_;
  friend void  protobuf_AddDesc_PhotoCmd_2eproto();
  friend void protobuf_AssignDesc_PhotoCmd_2eproto();
  friend void protobuf_ShutdownFile_PhotoCmd_2eproto();

  void InitAsDefaultInstance();
  static AddMd5PhotoCmd* default_instance_;
};
// -------------------------------------------------------------------

class RemoveMd5PhotoCmd : public ::google::protobuf::Message {
 public:
  RemoveMd5PhotoCmd();
  virtual ~RemoveMd5PhotoCmd();

  RemoveMd5PhotoCmd(const RemoveMd5PhotoCmd& from);

  inline RemoveMd5PhotoCmd& operator=(const RemoveMd5PhotoCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoveMd5PhotoCmd& default_instance();

  void Swap(RemoveMd5PhotoCmd* other);

  // implements Message ----------------------------------------------

  RemoveMd5PhotoCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RemoveMd5PhotoCmd& from);
  void MergeFrom(const RemoveMd5PhotoCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_PHOTO_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.PhotoParam param = 2 [default = PHOTOPARAM_REMOVE_MD5];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::PhotoParam param() const;
  inline void set_param(::Cmd::PhotoParam value);

  // optional .Cmd.PhotoMd5 md5 = 3;
  inline bool has_md5() const;
  inline void clear_md5();
  static const int kMd5FieldNumber = 3;
  inline const ::Cmd::PhotoMd5& md5() const;
  inline ::Cmd::PhotoMd5* mutable_md5();
  inline ::Cmd::PhotoMd5* release_md5();
  inline void set_allocated_md5(::Cmd::PhotoMd5* md5);

  // @@protoc_insertion_point(class_scope:Cmd.RemoveMd5PhotoCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_md5();
  inline void clear_has_md5();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::Cmd::PhotoMd5* md5_;
  friend void  protobuf_AddDesc_PhotoCmd_2eproto();
  friend void protobuf_AssignDesc_PhotoCmd_2eproto();
  friend void protobuf_ShutdownFile_PhotoCmd_2eproto();

  void InitAsDefaultInstance();
  static RemoveMd5PhotoCmd* default_instance_;
};
// ===================================================================


// ===================================================================

// PhotoItem

// optional uint32 index = 1 [default = 0];
inline bool PhotoItem::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PhotoItem::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PhotoItem::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PhotoItem::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 PhotoItem::index() const {
  // @@protoc_insertion_point(field_get:Cmd.PhotoItem.index)
  return index_;
}
inline void PhotoItem::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PhotoItem.index)
}

// optional uint32 mapid = 2 [default = 0];
inline bool PhotoItem::has_mapid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PhotoItem::set_has_mapid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PhotoItem::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PhotoItem::clear_mapid() {
  mapid_ = 0u;
  clear_has_mapid();
}
inline ::google::protobuf::uint32 PhotoItem::mapid() const {
  // @@protoc_insertion_point(field_get:Cmd.PhotoItem.mapid)
  return mapid_;
}
inline void PhotoItem::set_mapid(::google::protobuf::uint32 value) {
  set_has_mapid();
  mapid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PhotoItem.mapid)
}

// optional uint32 time = 3 [default = 0];
inline bool PhotoItem::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PhotoItem::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PhotoItem::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PhotoItem::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 PhotoItem::time() const {
  // @@protoc_insertion_point(field_get:Cmd.PhotoItem.time)
  return time_;
}
inline void PhotoItem::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PhotoItem.time)
}

// optional uint32 anglez = 4 [default = 0];
inline bool PhotoItem::has_anglez() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PhotoItem::set_has_anglez() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PhotoItem::clear_has_anglez() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PhotoItem::clear_anglez() {
  anglez_ = 0u;
  clear_has_anglez();
}
inline ::google::protobuf::uint32 PhotoItem::anglez() const {
  // @@protoc_insertion_point(field_get:Cmd.PhotoItem.anglez)
  return anglez_;
}
inline void PhotoItem::set_anglez(::google::protobuf::uint32 value) {
  set_has_anglez();
  anglez_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PhotoItem.anglez)
}

// optional bool isupload = 5 [default = false];
inline bool PhotoItem::has_isupload() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PhotoItem::set_has_isupload() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PhotoItem::clear_has_isupload() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PhotoItem::clear_isupload() {
  isupload_ = false;
  clear_has_isupload();
}
inline bool PhotoItem::isupload() const {
  // @@protoc_insertion_point(field_get:Cmd.PhotoItem.isupload)
  return isupload_;
}
inline void PhotoItem::set_isupload(bool value) {
  set_has_isupload();
  isupload_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PhotoItem.isupload)
}

// optional uint64 charid = 6 [default = 0];
inline bool PhotoItem::has_charid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PhotoItem::set_has_charid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PhotoItem::clear_has_charid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PhotoItem::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 PhotoItem::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.PhotoItem.charid)
  return charid_;
}
inline void PhotoItem::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PhotoItem.charid)
}

// -------------------------------------------------------------------

// PhotoQueryListCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_PHOTO_PROTOCMD];
inline bool PhotoQueryListCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PhotoQueryListCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PhotoQueryListCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PhotoQueryListCmd::clear_cmd() {
  cmd_ = 30;
  clear_has_cmd();
}
inline ::Cmd::Command PhotoQueryListCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.PhotoQueryListCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void PhotoQueryListCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PhotoQueryListCmd.cmd)
}

// optional .Cmd.PhotoParam param = 2 [default = PHOTOPARAM_QUERY_PHOTO_LIST];
inline bool PhotoQueryListCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PhotoQueryListCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PhotoQueryListCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PhotoQueryListCmd::clear_param() {
  param_ = 1;
  clear_has_param();
}
inline ::Cmd::PhotoParam PhotoQueryListCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.PhotoQueryListCmd.param)
  return static_cast< ::Cmd::PhotoParam >(param_);
}
inline void PhotoQueryListCmd::set_param(::Cmd::PhotoParam value) {
  assert(::Cmd::PhotoParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PhotoQueryListCmd.param)
}

// repeated .Cmd.PhotoItem photos = 3;
inline int PhotoQueryListCmd::photos_size() const {
  return photos_.size();
}
inline void PhotoQueryListCmd::clear_photos() {
  photos_.Clear();
}
inline const ::Cmd::PhotoItem& PhotoQueryListCmd::photos(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.PhotoQueryListCmd.photos)
  return photos_.Get(index);
}
inline ::Cmd::PhotoItem* PhotoQueryListCmd::mutable_photos(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.PhotoQueryListCmd.photos)
  return photos_.Mutable(index);
}
inline ::Cmd::PhotoItem* PhotoQueryListCmd::add_photos() {
  // @@protoc_insertion_point(field_add:Cmd.PhotoQueryListCmd.photos)
  return photos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::PhotoItem >&
PhotoQueryListCmd::photos() const {
  // @@protoc_insertion_point(field_list:Cmd.PhotoQueryListCmd.photos)
  return photos_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::PhotoItem >*
PhotoQueryListCmd::mutable_photos() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.PhotoQueryListCmd.photos)
  return &photos_;
}

// optional uint32 size = 4 [default = 0];
inline bool PhotoQueryListCmd::has_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PhotoQueryListCmd::set_has_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PhotoQueryListCmd::clear_has_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PhotoQueryListCmd::clear_size() {
  size_ = 0u;
  clear_has_size();
}
inline ::google::protobuf::uint32 PhotoQueryListCmd::size() const {
  // @@protoc_insertion_point(field_get:Cmd.PhotoQueryListCmd.size)
  return size_;
}
inline void PhotoQueryListCmd::set_size(::google::protobuf::uint32 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PhotoQueryListCmd.size)
}

// -------------------------------------------------------------------

// PhotoOptCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_PHOTO_PROTOCMD];
inline bool PhotoOptCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PhotoOptCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PhotoOptCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PhotoOptCmd::clear_cmd() {
  cmd_ = 30;
  clear_has_cmd();
}
inline ::Cmd::Command PhotoOptCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.PhotoOptCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void PhotoOptCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PhotoOptCmd.cmd)
}

// optional .Cmd.PhotoParam param = 2 [default = PHOTOPARAM_PHOTO_OPT];
inline bool PhotoOptCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PhotoOptCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PhotoOptCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PhotoOptCmd::clear_param() {
  param_ = 2;
  clear_has_param();
}
inline ::Cmd::PhotoParam PhotoOptCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.PhotoOptCmd.param)
  return static_cast< ::Cmd::PhotoParam >(param_);
}
inline void PhotoOptCmd::set_param(::Cmd::PhotoParam value) {
  assert(::Cmd::PhotoParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PhotoOptCmd.param)
}

// optional .Cmd.EPhotoOptType opttype = 3 [default = EPHOTOOPTTYPE_MIN];
inline bool PhotoOptCmd::has_opttype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PhotoOptCmd::set_has_opttype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PhotoOptCmd::clear_has_opttype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PhotoOptCmd::clear_opttype() {
  opttype_ = 0;
  clear_has_opttype();
}
inline ::Cmd::EPhotoOptType PhotoOptCmd::opttype() const {
  // @@protoc_insertion_point(field_get:Cmd.PhotoOptCmd.opttype)
  return static_cast< ::Cmd::EPhotoOptType >(opttype_);
}
inline void PhotoOptCmd::set_opttype(::Cmd::EPhotoOptType value) {
  assert(::Cmd::EPhotoOptType_IsValid(value));
  set_has_opttype();
  opttype_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PhotoOptCmd.opttype)
}

// optional uint32 index = 4 [default = 0];
inline bool PhotoOptCmd::has_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PhotoOptCmd::set_has_index() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PhotoOptCmd::clear_has_index() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PhotoOptCmd::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 PhotoOptCmd::index() const {
  // @@protoc_insertion_point(field_get:Cmd.PhotoOptCmd.index)
  return index_;
}
inline void PhotoOptCmd::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PhotoOptCmd.index)
}

// optional uint32 anglez = 5 [default = 0];
inline bool PhotoOptCmd::has_anglez() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PhotoOptCmd::set_has_anglez() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PhotoOptCmd::clear_has_anglez() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PhotoOptCmd::clear_anglez() {
  anglez_ = 0u;
  clear_has_anglez();
}
inline ::google::protobuf::uint32 PhotoOptCmd::anglez() const {
  // @@protoc_insertion_point(field_get:Cmd.PhotoOptCmd.anglez)
  return anglez_;
}
inline void PhotoOptCmd::set_anglez(::google::protobuf::uint32 value) {
  set_has_anglez();
  anglez_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PhotoOptCmd.anglez)
}

// optional uint32 mapid = 6 [default = 0];
inline bool PhotoOptCmd::has_mapid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PhotoOptCmd::set_has_mapid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PhotoOptCmd::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PhotoOptCmd::clear_mapid() {
  mapid_ = 0u;
  clear_has_mapid();
}
inline ::google::protobuf::uint32 PhotoOptCmd::mapid() const {
  // @@protoc_insertion_point(field_get:Cmd.PhotoOptCmd.mapid)
  return mapid_;
}
inline void PhotoOptCmd::set_mapid(::google::protobuf::uint32 value) {
  set_has_mapid();
  mapid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PhotoOptCmd.mapid)
}

// -------------------------------------------------------------------

// PhotoUpdateNtf

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_PHOTO_PROTOCMD];
inline bool PhotoUpdateNtf::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PhotoUpdateNtf::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PhotoUpdateNtf::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PhotoUpdateNtf::clear_cmd() {
  cmd_ = 30;
  clear_has_cmd();
}
inline ::Cmd::Command PhotoUpdateNtf::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.PhotoUpdateNtf.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void PhotoUpdateNtf::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PhotoUpdateNtf.cmd)
}

// optional .Cmd.PhotoParam param = 2 [default = PHOTOPARAM_PHOTO_UPDATE];
inline bool PhotoUpdateNtf::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PhotoUpdateNtf::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PhotoUpdateNtf::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PhotoUpdateNtf::clear_param() {
  param_ = 3;
  clear_has_param();
}
inline ::Cmd::PhotoParam PhotoUpdateNtf::param() const {
  // @@protoc_insertion_point(field_get:Cmd.PhotoUpdateNtf.param)
  return static_cast< ::Cmd::PhotoParam >(param_);
}
inline void PhotoUpdateNtf::set_param(::Cmd::PhotoParam value) {
  assert(::Cmd::PhotoParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PhotoUpdateNtf.param)
}

// optional .Cmd.EPhotoOptType opttype = 3 [default = EPHOTOOPTTYPE_MIN];
inline bool PhotoUpdateNtf::has_opttype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PhotoUpdateNtf::set_has_opttype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PhotoUpdateNtf::clear_has_opttype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PhotoUpdateNtf::clear_opttype() {
  opttype_ = 0;
  clear_has_opttype();
}
inline ::Cmd::EPhotoOptType PhotoUpdateNtf::opttype() const {
  // @@protoc_insertion_point(field_get:Cmd.PhotoUpdateNtf.opttype)
  return static_cast< ::Cmd::EPhotoOptType >(opttype_);
}
inline void PhotoUpdateNtf::set_opttype(::Cmd::EPhotoOptType value) {
  assert(::Cmd::EPhotoOptType_IsValid(value));
  set_has_opttype();
  opttype_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PhotoUpdateNtf.opttype)
}

// optional .Cmd.PhotoItem photo = 4;
inline bool PhotoUpdateNtf::has_photo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PhotoUpdateNtf::set_has_photo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PhotoUpdateNtf::clear_has_photo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PhotoUpdateNtf::clear_photo() {
  if (photo_ != NULL) photo_->::Cmd::PhotoItem::Clear();
  clear_has_photo();
}
inline const ::Cmd::PhotoItem& PhotoUpdateNtf::photo() const {
  // @@protoc_insertion_point(field_get:Cmd.PhotoUpdateNtf.photo)
  return photo_ != NULL ? *photo_ : *default_instance_->photo_;
}
inline ::Cmd::PhotoItem* PhotoUpdateNtf::mutable_photo() {
  set_has_photo();
  if (photo_ == NULL) photo_ = new ::Cmd::PhotoItem;
  // @@protoc_insertion_point(field_mutable:Cmd.PhotoUpdateNtf.photo)
  return photo_;
}
inline ::Cmd::PhotoItem* PhotoUpdateNtf::release_photo() {
  clear_has_photo();
  ::Cmd::PhotoItem* temp = photo_;
  photo_ = NULL;
  return temp;
}
inline void PhotoUpdateNtf::set_allocated_photo(::Cmd::PhotoItem* photo) {
  delete photo_;
  photo_ = photo;
  if (photo) {
    set_has_photo();
  } else {
    clear_has_photo();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.PhotoUpdateNtf.photo)
}

// -------------------------------------------------------------------

// FrameActionPhotoCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_PHOTO_PROTOCMD];
inline bool FrameActionPhotoCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FrameActionPhotoCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FrameActionPhotoCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FrameActionPhotoCmd::clear_cmd() {
  cmd_ = 30;
  clear_has_cmd();
}
inline ::Cmd::Command FrameActionPhotoCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.FrameActionPhotoCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void FrameActionPhotoCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.FrameActionPhotoCmd.cmd)
}

// optional .Cmd.PhotoParam param = 2 [default = PHOTOPARAM_FRAME_ACTION];
inline bool FrameActionPhotoCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FrameActionPhotoCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FrameActionPhotoCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FrameActionPhotoCmd::clear_param() {
  param_ = 4;
  clear_has_param();
}
inline ::Cmd::PhotoParam FrameActionPhotoCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.FrameActionPhotoCmd.param)
  return static_cast< ::Cmd::PhotoParam >(param_);
}
inline void FrameActionPhotoCmd::set_param(::Cmd::PhotoParam value) {
  assert(::Cmd::PhotoParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.FrameActionPhotoCmd.param)
}

// optional uint32 frameid = 3 [default = 0];
inline bool FrameActionPhotoCmd::has_frameid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FrameActionPhotoCmd::set_has_frameid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FrameActionPhotoCmd::clear_has_frameid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FrameActionPhotoCmd::clear_frameid() {
  frameid_ = 0u;
  clear_has_frameid();
}
inline ::google::protobuf::uint32 FrameActionPhotoCmd::frameid() const {
  // @@protoc_insertion_point(field_get:Cmd.FrameActionPhotoCmd.frameid)
  return frameid_;
}
inline void FrameActionPhotoCmd::set_frameid(::google::protobuf::uint32 value) {
  set_has_frameid();
  frameid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.FrameActionPhotoCmd.frameid)
}

// optional .Cmd.EFrameAction action = 4 [default = EFRAMEACTION_MIN];
inline bool FrameActionPhotoCmd::has_action() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FrameActionPhotoCmd::set_has_action() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FrameActionPhotoCmd::clear_has_action() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FrameActionPhotoCmd::clear_action() {
  action_ = 0;
  clear_has_action();
}
inline ::Cmd::EFrameAction FrameActionPhotoCmd::action() const {
  // @@protoc_insertion_point(field_get:Cmd.FrameActionPhotoCmd.action)
  return static_cast< ::Cmd::EFrameAction >(action_);
}
inline void FrameActionPhotoCmd::set_action(::Cmd::EFrameAction value) {
  assert(::Cmd::EFrameAction_IsValid(value));
  set_has_action();
  action_ = value;
  // @@protoc_insertion_point(field_set:Cmd.FrameActionPhotoCmd.action)
}

// repeated .Cmd.GuildPhoto photos = 5;
inline int FrameActionPhotoCmd::photos_size() const {
  return photos_.size();
}
inline void FrameActionPhotoCmd::clear_photos() {
  photos_.Clear();
}
inline const ::Cmd::GuildPhoto& FrameActionPhotoCmd::photos(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.FrameActionPhotoCmd.photos)
  return photos_.Get(index);
}
inline ::Cmd::GuildPhoto* FrameActionPhotoCmd::mutable_photos(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.FrameActionPhotoCmd.photos)
  return photos_.Mutable(index);
}
inline ::Cmd::GuildPhoto* FrameActionPhotoCmd::add_photos() {
  // @@protoc_insertion_point(field_add:Cmd.FrameActionPhotoCmd.photos)
  return photos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::GuildPhoto >&
FrameActionPhotoCmd::photos() const {
  // @@protoc_insertion_point(field_list:Cmd.FrameActionPhotoCmd.photos)
  return photos_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::GuildPhoto >*
FrameActionPhotoCmd::mutable_photos() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.FrameActionPhotoCmd.photos)
  return &photos_;
}

// -------------------------------------------------------------------

// QueryFramePhotoListPhotoCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_PHOTO_PROTOCMD];
inline bool QueryFramePhotoListPhotoCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryFramePhotoListPhotoCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryFramePhotoListPhotoCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryFramePhotoListPhotoCmd::clear_cmd() {
  cmd_ = 30;
  clear_has_cmd();
}
inline ::Cmd::Command QueryFramePhotoListPhotoCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryFramePhotoListPhotoCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void QueryFramePhotoListPhotoCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryFramePhotoListPhotoCmd.cmd)
}

// optional .Cmd.PhotoParam param = 2 [default = PHOTOPARAM_QUERY_FRAMEPHOTOLIST];
inline bool QueryFramePhotoListPhotoCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryFramePhotoListPhotoCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryFramePhotoListPhotoCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryFramePhotoListPhotoCmd::clear_param() {
  param_ = 5;
  clear_has_param();
}
inline ::Cmd::PhotoParam QueryFramePhotoListPhotoCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryFramePhotoListPhotoCmd.param)
  return static_cast< ::Cmd::PhotoParam >(param_);
}
inline void QueryFramePhotoListPhotoCmd::set_param(::Cmd::PhotoParam value) {
  assert(::Cmd::PhotoParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryFramePhotoListPhotoCmd.param)
}

// optional uint32 frameid = 3 [default = 0];
inline bool QueryFramePhotoListPhotoCmd::has_frameid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QueryFramePhotoListPhotoCmd::set_has_frameid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QueryFramePhotoListPhotoCmd::clear_has_frameid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QueryFramePhotoListPhotoCmd::clear_frameid() {
  frameid_ = 0u;
  clear_has_frameid();
}
inline ::google::protobuf::uint32 QueryFramePhotoListPhotoCmd::frameid() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryFramePhotoListPhotoCmd.frameid)
  return frameid_;
}
inline void QueryFramePhotoListPhotoCmd::set_frameid(::google::protobuf::uint32 value) {
  set_has_frameid();
  frameid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryFramePhotoListPhotoCmd.frameid)
}

// repeated .Cmd.GuildPhoto photos = 4;
inline int QueryFramePhotoListPhotoCmd::photos_size() const {
  return photos_.size();
}
inline void QueryFramePhotoListPhotoCmd::clear_photos() {
  photos_.Clear();
}
inline const ::Cmd::GuildPhoto& QueryFramePhotoListPhotoCmd::photos(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.QueryFramePhotoListPhotoCmd.photos)
  return photos_.Get(index);
}
inline ::Cmd::GuildPhoto* QueryFramePhotoListPhotoCmd::mutable_photos(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.QueryFramePhotoListPhotoCmd.photos)
  return photos_.Mutable(index);
}
inline ::Cmd::GuildPhoto* QueryFramePhotoListPhotoCmd::add_photos() {
  // @@protoc_insertion_point(field_add:Cmd.QueryFramePhotoListPhotoCmd.photos)
  return photos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::GuildPhoto >&
QueryFramePhotoListPhotoCmd::photos() const {
  // @@protoc_insertion_point(field_list:Cmd.QueryFramePhotoListPhotoCmd.photos)
  return photos_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::GuildPhoto >*
QueryFramePhotoListPhotoCmd::mutable_photos() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.QueryFramePhotoListPhotoCmd.photos)
  return &photos_;
}

// -------------------------------------------------------------------

// QueryUserPhotoListPhotoCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_PHOTO_PROTOCMD];
inline bool QueryUserPhotoListPhotoCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryUserPhotoListPhotoCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryUserPhotoListPhotoCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryUserPhotoListPhotoCmd::clear_cmd() {
  cmd_ = 30;
  clear_has_cmd();
}
inline ::Cmd::Command QueryUserPhotoListPhotoCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryUserPhotoListPhotoCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void QueryUserPhotoListPhotoCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryUserPhotoListPhotoCmd.cmd)
}

// optional .Cmd.PhotoParam param = 2 [default = PHOTOPARAM_QUERY_USERPHOTOLIST];
inline bool QueryUserPhotoListPhotoCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryUserPhotoListPhotoCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryUserPhotoListPhotoCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryUserPhotoListPhotoCmd::clear_param() {
  param_ = 6;
  clear_has_param();
}
inline ::Cmd::PhotoParam QueryUserPhotoListPhotoCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryUserPhotoListPhotoCmd.param)
  return static_cast< ::Cmd::PhotoParam >(param_);
}
inline void QueryUserPhotoListPhotoCmd::set_param(::Cmd::PhotoParam value) {
  assert(::Cmd::PhotoParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryUserPhotoListPhotoCmd.param)
}

// repeated .Cmd.PhotoFrame frames = 3;
inline int QueryUserPhotoListPhotoCmd::frames_size() const {
  return frames_.size();
}
inline void QueryUserPhotoListPhotoCmd::clear_frames() {
  frames_.Clear();
}
inline const ::Cmd::PhotoFrame& QueryUserPhotoListPhotoCmd::frames(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.QueryUserPhotoListPhotoCmd.frames)
  return frames_.Get(index);
}
inline ::Cmd::PhotoFrame* QueryUserPhotoListPhotoCmd::mutable_frames(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.QueryUserPhotoListPhotoCmd.frames)
  return frames_.Mutable(index);
}
inline ::Cmd::PhotoFrame* QueryUserPhotoListPhotoCmd::add_frames() {
  // @@protoc_insertion_point(field_add:Cmd.QueryUserPhotoListPhotoCmd.frames)
  return frames_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::PhotoFrame >&
QueryUserPhotoListPhotoCmd::frames() const {
  // @@protoc_insertion_point(field_list:Cmd.QueryUserPhotoListPhotoCmd.frames)
  return frames_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::PhotoFrame >*
QueryUserPhotoListPhotoCmd::mutable_frames() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.QueryUserPhotoListPhotoCmd.frames)
  return &frames_;
}

// optional uint32 maxphoto = 4 [default = 0];
inline bool QueryUserPhotoListPhotoCmd::has_maxphoto() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QueryUserPhotoListPhotoCmd::set_has_maxphoto() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QueryUserPhotoListPhotoCmd::clear_has_maxphoto() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QueryUserPhotoListPhotoCmd::clear_maxphoto() {
  maxphoto_ = 0u;
  clear_has_maxphoto();
}
inline ::google::protobuf::uint32 QueryUserPhotoListPhotoCmd::maxphoto() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryUserPhotoListPhotoCmd.maxphoto)
  return maxphoto_;
}
inline void QueryUserPhotoListPhotoCmd::set_maxphoto(::google::protobuf::uint32 value) {
  set_has_maxphoto();
  maxphoto_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryUserPhotoListPhotoCmd.maxphoto)
}

// optional uint32 maxframe = 5 [default = 0];
inline bool QueryUserPhotoListPhotoCmd::has_maxframe() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void QueryUserPhotoListPhotoCmd::set_has_maxframe() {
  _has_bits_[0] |= 0x00000010u;
}
inline void QueryUserPhotoListPhotoCmd::clear_has_maxframe() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void QueryUserPhotoListPhotoCmd::clear_maxframe() {
  maxframe_ = 0u;
  clear_has_maxframe();
}
inline ::google::protobuf::uint32 QueryUserPhotoListPhotoCmd::maxframe() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryUserPhotoListPhotoCmd.maxframe)
  return maxframe_;
}
inline void QueryUserPhotoListPhotoCmd::set_maxframe(::google::protobuf::uint32 value) {
  set_has_maxframe();
  maxframe_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryUserPhotoListPhotoCmd.maxframe)
}

// -------------------------------------------------------------------

// FrameShow

// optional uint32 frameid = 1 [default = 0];
inline bool FrameShow::has_frameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FrameShow::set_has_frameid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FrameShow::clear_has_frameid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FrameShow::clear_frameid() {
  frameid_ = 0u;
  clear_has_frameid();
}
inline ::google::protobuf::uint32 FrameShow::frameid() const {
  // @@protoc_insertion_point(field_get:Cmd.FrameShow.frameid)
  return frameid_;
}
inline void FrameShow::set_frameid(::google::protobuf::uint32 value) {
  set_has_frameid();
  frameid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.FrameShow.frameid)
}

// optional .Cmd.GuildPhoto photo = 2;
inline bool FrameShow::has_photo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FrameShow::set_has_photo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FrameShow::clear_has_photo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FrameShow::clear_photo() {
  if (photo_ != NULL) photo_->::Cmd::GuildPhoto::Clear();
  clear_has_photo();
}
inline const ::Cmd::GuildPhoto& FrameShow::photo() const {
  // @@protoc_insertion_point(field_get:Cmd.FrameShow.photo)
  return photo_ != NULL ? *photo_ : *default_instance_->photo_;
}
inline ::Cmd::GuildPhoto* FrameShow::mutable_photo() {
  set_has_photo();
  if (photo_ == NULL) photo_ = new ::Cmd::GuildPhoto;
  // @@protoc_insertion_point(field_mutable:Cmd.FrameShow.photo)
  return photo_;
}
inline ::Cmd::GuildPhoto* FrameShow::release_photo() {
  clear_has_photo();
  ::Cmd::GuildPhoto* temp = photo_;
  photo_ = NULL;
  return temp;
}
inline void FrameShow::set_allocated_photo(::Cmd::GuildPhoto* photo) {
  delete photo_;
  photo_ = photo;
  if (photo) {
    set_has_photo();
  } else {
    clear_has_photo();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.FrameShow.photo)
}

// -------------------------------------------------------------------

// UpdateFrameShowPhotoCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_PHOTO_PROTOCMD];
inline bool UpdateFrameShowPhotoCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateFrameShowPhotoCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateFrameShowPhotoCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateFrameShowPhotoCmd::clear_cmd() {
  cmd_ = 30;
  clear_has_cmd();
}
inline ::Cmd::Command UpdateFrameShowPhotoCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.UpdateFrameShowPhotoCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void UpdateFrameShowPhotoCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UpdateFrameShowPhotoCmd.cmd)
}

// optional .Cmd.PhotoParam param = 2 [default = PHOTOPARAM_UPDATE_FRAMESHOW];
inline bool UpdateFrameShowPhotoCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdateFrameShowPhotoCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdateFrameShowPhotoCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdateFrameShowPhotoCmd::clear_param() {
  param_ = 7;
  clear_has_param();
}
inline ::Cmd::PhotoParam UpdateFrameShowPhotoCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.UpdateFrameShowPhotoCmd.param)
  return static_cast< ::Cmd::PhotoParam >(param_);
}
inline void UpdateFrameShowPhotoCmd::set_param(::Cmd::PhotoParam value) {
  assert(::Cmd::PhotoParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UpdateFrameShowPhotoCmd.param)
}

// repeated .Cmd.FrameShow shows = 3;
inline int UpdateFrameShowPhotoCmd::shows_size() const {
  return shows_.size();
}
inline void UpdateFrameShowPhotoCmd::clear_shows() {
  shows_.Clear();
}
inline const ::Cmd::FrameShow& UpdateFrameShowPhotoCmd::shows(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.UpdateFrameShowPhotoCmd.shows)
  return shows_.Get(index);
}
inline ::Cmd::FrameShow* UpdateFrameShowPhotoCmd::mutable_shows(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.UpdateFrameShowPhotoCmd.shows)
  return shows_.Mutable(index);
}
inline ::Cmd::FrameShow* UpdateFrameShowPhotoCmd::add_shows() {
  // @@protoc_insertion_point(field_add:Cmd.UpdateFrameShowPhotoCmd.shows)
  return shows_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::FrameShow >&
UpdateFrameShowPhotoCmd::shows() const {
  // @@protoc_insertion_point(field_list:Cmd.UpdateFrameShowPhotoCmd.shows)
  return shows_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::FrameShow >*
UpdateFrameShowPhotoCmd::mutable_shows() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.UpdateFrameShowPhotoCmd.shows)
  return &shows_;
}

// -------------------------------------------------------------------

// FramePhotoUpdatePhotoCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_PHOTO_PROTOCMD];
inline bool FramePhotoUpdatePhotoCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FramePhotoUpdatePhotoCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FramePhotoUpdatePhotoCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FramePhotoUpdatePhotoCmd::clear_cmd() {
  cmd_ = 30;
  clear_has_cmd();
}
inline ::Cmd::Command FramePhotoUpdatePhotoCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.FramePhotoUpdatePhotoCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void FramePhotoUpdatePhotoCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.FramePhotoUpdatePhotoCmd.cmd)
}

// optional .Cmd.PhotoParam param = 2 [default = PHOTOPARAM_UPDATE_FRAMEPHOTO];
inline bool FramePhotoUpdatePhotoCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FramePhotoUpdatePhotoCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FramePhotoUpdatePhotoCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FramePhotoUpdatePhotoCmd::clear_param() {
  param_ = 8;
  clear_has_param();
}
inline ::Cmd::PhotoParam FramePhotoUpdatePhotoCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.FramePhotoUpdatePhotoCmd.param)
  return static_cast< ::Cmd::PhotoParam >(param_);
}
inline void FramePhotoUpdatePhotoCmd::set_param(::Cmd::PhotoParam value) {
  assert(::Cmd::PhotoParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.FramePhotoUpdatePhotoCmd.param)
}

// optional uint32 frameid = 3 [default = 0];
inline bool FramePhotoUpdatePhotoCmd::has_frameid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FramePhotoUpdatePhotoCmd::set_has_frameid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FramePhotoUpdatePhotoCmd::clear_has_frameid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FramePhotoUpdatePhotoCmd::clear_frameid() {
  frameid_ = 0u;
  clear_has_frameid();
}
inline ::google::protobuf::uint32 FramePhotoUpdatePhotoCmd::frameid() const {
  // @@protoc_insertion_point(field_get:Cmd.FramePhotoUpdatePhotoCmd.frameid)
  return frameid_;
}
inline void FramePhotoUpdatePhotoCmd::set_frameid(::google::protobuf::uint32 value) {
  set_has_frameid();
  frameid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.FramePhotoUpdatePhotoCmd.frameid)
}

// optional .Cmd.GuildPhoto update = 4;
inline bool FramePhotoUpdatePhotoCmd::has_update() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FramePhotoUpdatePhotoCmd::set_has_update() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FramePhotoUpdatePhotoCmd::clear_has_update() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FramePhotoUpdatePhotoCmd::clear_update() {
  if (update_ != NULL) update_->::Cmd::GuildPhoto::Clear();
  clear_has_update();
}
inline const ::Cmd::GuildPhoto& FramePhotoUpdatePhotoCmd::update() const {
  // @@protoc_insertion_point(field_get:Cmd.FramePhotoUpdatePhotoCmd.update)
  return update_ != NULL ? *update_ : *default_instance_->update_;
}
inline ::Cmd::GuildPhoto* FramePhotoUpdatePhotoCmd::mutable_update() {
  set_has_update();
  if (update_ == NULL) update_ = new ::Cmd::GuildPhoto;
  // @@protoc_insertion_point(field_mutable:Cmd.FramePhotoUpdatePhotoCmd.update)
  return update_;
}
inline ::Cmd::GuildPhoto* FramePhotoUpdatePhotoCmd::release_update() {
  clear_has_update();
  ::Cmd::GuildPhoto* temp = update_;
  update_ = NULL;
  return temp;
}
inline void FramePhotoUpdatePhotoCmd::set_allocated_update(::Cmd::GuildPhoto* update) {
  delete update_;
  update_ = update;
  if (update) {
    set_has_update();
  } else {
    clear_has_update();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.FramePhotoUpdatePhotoCmd.update)
}

// optional .Cmd.GuildPhoto del = 5;
inline bool FramePhotoUpdatePhotoCmd::has_del() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FramePhotoUpdatePhotoCmd::set_has_del() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FramePhotoUpdatePhotoCmd::clear_has_del() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FramePhotoUpdatePhotoCmd::clear_del() {
  if (del_ != NULL) del_->::Cmd::GuildPhoto::Clear();
  clear_has_del();
}
inline const ::Cmd::GuildPhoto& FramePhotoUpdatePhotoCmd::del() const {
  // @@protoc_insertion_point(field_get:Cmd.FramePhotoUpdatePhotoCmd.del)
  return del_ != NULL ? *del_ : *default_instance_->del_;
}
inline ::Cmd::GuildPhoto* FramePhotoUpdatePhotoCmd::mutable_del() {
  set_has_del();
  if (del_ == NULL) del_ = new ::Cmd::GuildPhoto;
  // @@protoc_insertion_point(field_mutable:Cmd.FramePhotoUpdatePhotoCmd.del)
  return del_;
}
inline ::Cmd::GuildPhoto* FramePhotoUpdatePhotoCmd::release_del() {
  clear_has_del();
  ::Cmd::GuildPhoto* temp = del_;
  del_ = NULL;
  return temp;
}
inline void FramePhotoUpdatePhotoCmd::set_allocated_del(::Cmd::GuildPhoto* del) {
  delete del_;
  del_ = del;
  if (del) {
    set_has_del();
  } else {
    clear_has_del();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.FramePhotoUpdatePhotoCmd.del)
}

// -------------------------------------------------------------------

// PhotoMd5

// optional uint32 sourceid = 1 [default = 0];
inline bool PhotoMd5::has_sourceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PhotoMd5::set_has_sourceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PhotoMd5::clear_has_sourceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PhotoMd5::clear_sourceid() {
  sourceid_ = 0u;
  clear_has_sourceid();
}
inline ::google::protobuf::uint32 PhotoMd5::sourceid() const {
  // @@protoc_insertion_point(field_get:Cmd.PhotoMd5.sourceid)
  return sourceid_;
}
inline void PhotoMd5::set_sourceid(::google::protobuf::uint32 value) {
  set_has_sourceid();
  sourceid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PhotoMd5.sourceid)
}

// optional uint32 time = 2 [default = 0];
inline bool PhotoMd5::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PhotoMd5::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PhotoMd5::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PhotoMd5::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 PhotoMd5::time() const {
  // @@protoc_insertion_point(field_get:Cmd.PhotoMd5.time)
  return time_;
}
inline void PhotoMd5::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PhotoMd5.time)
}

// optional .Cmd.ESource source = 3 [default = ESOURCE_MIN];
inline bool PhotoMd5::has_source() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PhotoMd5::set_has_source() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PhotoMd5::clear_has_source() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PhotoMd5::clear_source() {
  source_ = 0;
  clear_has_source();
}
inline ::Cmd::ESource PhotoMd5::source() const {
  // @@protoc_insertion_point(field_get:Cmd.PhotoMd5.source)
  return static_cast< ::Cmd::ESource >(source_);
}
inline void PhotoMd5::set_source(::Cmd::ESource value) {
  assert(::Cmd::ESource_IsValid(value));
  set_has_source();
  source_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PhotoMd5.source)
}

// optional string md5 = 4;
inline bool PhotoMd5::has_md5() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PhotoMd5::set_has_md5() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PhotoMd5::clear_has_md5() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PhotoMd5::clear_md5() {
  if (md5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    md5_->clear();
  }
  clear_has_md5();
}
inline const ::std::string& PhotoMd5::md5() const {
  // @@protoc_insertion_point(field_get:Cmd.PhotoMd5.md5)
  return *md5_;
}
inline void PhotoMd5::set_md5(const ::std::string& value) {
  set_has_md5();
  if (md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    md5_ = new ::std::string;
  }
  md5_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.PhotoMd5.md5)
}
inline void PhotoMd5::set_md5(const char* value) {
  set_has_md5();
  if (md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    md5_ = new ::std::string;
  }
  md5_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.PhotoMd5.md5)
}
inline void PhotoMd5::set_md5(const char* value, size_t size) {
  set_has_md5();
  if (md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    md5_ = new ::std::string;
  }
  md5_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.PhotoMd5.md5)
}
inline ::std::string* PhotoMd5::mutable_md5() {
  set_has_md5();
  if (md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    md5_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.PhotoMd5.md5)
  return md5_;
}
inline ::std::string* PhotoMd5::release_md5() {
  clear_has_md5();
  if (md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = md5_;
    md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PhotoMd5::set_allocated_md5(::std::string* md5) {
  if (md5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete md5_;
  }
  if (md5) {
    set_has_md5();
    md5_ = md5;
  } else {
    clear_has_md5();
    md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.PhotoMd5.md5)
}

// -------------------------------------------------------------------

// QueryMd5ListPhotoCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_PHOTO_PROTOCMD];
inline bool QueryMd5ListPhotoCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryMd5ListPhotoCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryMd5ListPhotoCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryMd5ListPhotoCmd::clear_cmd() {
  cmd_ = 30;
  clear_has_cmd();
}
inline ::Cmd::Command QueryMd5ListPhotoCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryMd5ListPhotoCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void QueryMd5ListPhotoCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryMd5ListPhotoCmd.cmd)
}

// optional .Cmd.PhotoParam param = 2 [default = PHOTOPARAM_QUERY_MD5LIST];
inline bool QueryMd5ListPhotoCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryMd5ListPhotoCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryMd5ListPhotoCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryMd5ListPhotoCmd::clear_param() {
  param_ = 9;
  clear_has_param();
}
inline ::Cmd::PhotoParam QueryMd5ListPhotoCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryMd5ListPhotoCmd.param)
  return static_cast< ::Cmd::PhotoParam >(param_);
}
inline void QueryMd5ListPhotoCmd::set_param(::Cmd::PhotoParam value) {
  assert(::Cmd::PhotoParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryMd5ListPhotoCmd.param)
}

// repeated .Cmd.PhotoMd5 item = 3;
inline int QueryMd5ListPhotoCmd::item_size() const {
  return item_.size();
}
inline void QueryMd5ListPhotoCmd::clear_item() {
  item_.Clear();
}
inline const ::Cmd::PhotoMd5& QueryMd5ListPhotoCmd::item(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.QueryMd5ListPhotoCmd.item)
  return item_.Get(index);
}
inline ::Cmd::PhotoMd5* QueryMd5ListPhotoCmd::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.QueryMd5ListPhotoCmd.item)
  return item_.Mutable(index);
}
inline ::Cmd::PhotoMd5* QueryMd5ListPhotoCmd::add_item() {
  // @@protoc_insertion_point(field_add:Cmd.QueryMd5ListPhotoCmd.item)
  return item_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::PhotoMd5 >&
QueryMd5ListPhotoCmd::item() const {
  // @@protoc_insertion_point(field_list:Cmd.QueryMd5ListPhotoCmd.item)
  return item_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::PhotoMd5 >*
QueryMd5ListPhotoCmd::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.QueryMd5ListPhotoCmd.item)
  return &item_;
}

// -------------------------------------------------------------------

// AddMd5PhotoCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_PHOTO_PROTOCMD];
inline bool AddMd5PhotoCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddMd5PhotoCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddMd5PhotoCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddMd5PhotoCmd::clear_cmd() {
  cmd_ = 30;
  clear_has_cmd();
}
inline ::Cmd::Command AddMd5PhotoCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.AddMd5PhotoCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void AddMd5PhotoCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AddMd5PhotoCmd.cmd)
}

// optional .Cmd.PhotoParam param = 2 [default = PHOTOPARAM_ADD_MD5];
inline bool AddMd5PhotoCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AddMd5PhotoCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AddMd5PhotoCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AddMd5PhotoCmd::clear_param() {
  param_ = 10;
  clear_has_param();
}
inline ::Cmd::PhotoParam AddMd5PhotoCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.AddMd5PhotoCmd.param)
  return static_cast< ::Cmd::PhotoParam >(param_);
}
inline void AddMd5PhotoCmd::set_param(::Cmd::PhotoParam value) {
  assert(::Cmd::PhotoParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AddMd5PhotoCmd.param)
}

// optional .Cmd.PhotoMd5 md5 = 3;
inline bool AddMd5PhotoCmd::has_md5() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AddMd5PhotoCmd::set_has_md5() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AddMd5PhotoCmd::clear_has_md5() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AddMd5PhotoCmd::clear_md5() {
  if (md5_ != NULL) md5_->::Cmd::PhotoMd5::Clear();
  clear_has_md5();
}
inline const ::Cmd::PhotoMd5& AddMd5PhotoCmd::md5() const {
  // @@protoc_insertion_point(field_get:Cmd.AddMd5PhotoCmd.md5)
  return md5_ != NULL ? *md5_ : *default_instance_->md5_;
}
inline ::Cmd::PhotoMd5* AddMd5PhotoCmd::mutable_md5() {
  set_has_md5();
  if (md5_ == NULL) md5_ = new ::Cmd::PhotoMd5;
  // @@protoc_insertion_point(field_mutable:Cmd.AddMd5PhotoCmd.md5)
  return md5_;
}
inline ::Cmd::PhotoMd5* AddMd5PhotoCmd::release_md5() {
  clear_has_md5();
  ::Cmd::PhotoMd5* temp = md5_;
  md5_ = NULL;
  return temp;
}
inline void AddMd5PhotoCmd::set_allocated_md5(::Cmd::PhotoMd5* md5) {
  delete md5_;
  md5_ = md5;
  if (md5) {
    set_has_md5();
  } else {
    clear_has_md5();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.AddMd5PhotoCmd.md5)
}

// -------------------------------------------------------------------

// RemoveMd5PhotoCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_PHOTO_PROTOCMD];
inline bool RemoveMd5PhotoCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RemoveMd5PhotoCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RemoveMd5PhotoCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RemoveMd5PhotoCmd::clear_cmd() {
  cmd_ = 30;
  clear_has_cmd();
}
inline ::Cmd::Command RemoveMd5PhotoCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.RemoveMd5PhotoCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void RemoveMd5PhotoCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RemoveMd5PhotoCmd.cmd)
}

// optional .Cmd.PhotoParam param = 2 [default = PHOTOPARAM_REMOVE_MD5];
inline bool RemoveMd5PhotoCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RemoveMd5PhotoCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RemoveMd5PhotoCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RemoveMd5PhotoCmd::clear_param() {
  param_ = 11;
  clear_has_param();
}
inline ::Cmd::PhotoParam RemoveMd5PhotoCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.RemoveMd5PhotoCmd.param)
  return static_cast< ::Cmd::PhotoParam >(param_);
}
inline void RemoveMd5PhotoCmd::set_param(::Cmd::PhotoParam value) {
  assert(::Cmd::PhotoParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RemoveMd5PhotoCmd.param)
}

// optional .Cmd.PhotoMd5 md5 = 3;
inline bool RemoveMd5PhotoCmd::has_md5() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RemoveMd5PhotoCmd::set_has_md5() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RemoveMd5PhotoCmd::clear_has_md5() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RemoveMd5PhotoCmd::clear_md5() {
  if (md5_ != NULL) md5_->::Cmd::PhotoMd5::Clear();
  clear_has_md5();
}
inline const ::Cmd::PhotoMd5& RemoveMd5PhotoCmd::md5() const {
  // @@protoc_insertion_point(field_get:Cmd.RemoveMd5PhotoCmd.md5)
  return md5_ != NULL ? *md5_ : *default_instance_->md5_;
}
inline ::Cmd::PhotoMd5* RemoveMd5PhotoCmd::mutable_md5() {
  set_has_md5();
  if (md5_ == NULL) md5_ = new ::Cmd::PhotoMd5;
  // @@protoc_insertion_point(field_mutable:Cmd.RemoveMd5PhotoCmd.md5)
  return md5_;
}
inline ::Cmd::PhotoMd5* RemoveMd5PhotoCmd::release_md5() {
  clear_has_md5();
  ::Cmd::PhotoMd5* temp = md5_;
  md5_ = NULL;
  return temp;
}
inline void RemoveMd5PhotoCmd::set_allocated_md5(::Cmd::PhotoMd5* md5) {
  delete md5_;
  md5_ = md5;
  if (md5) {
    set_has_md5();
  } else {
    clear_has_md5();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.RemoveMd5PhotoCmd.md5)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Cmd::PhotoParam> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::PhotoParam>() {
  return ::Cmd::PhotoParam_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EPhotoOptType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EPhotoOptType>() {
  return ::Cmd::EPhotoOptType_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EFrameAction> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EFrameAction>() {
  return ::Cmd::EFrameAction_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_PhotoCmd_2eproto__INCLUDED
