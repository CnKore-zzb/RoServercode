// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SceneUser2.proto

#ifndef PROTOBUF_SceneUser2_2eproto__INCLUDED
#define PROTOBUF_SceneUser2_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "xCmd.pb.h"
#include "SceneUser.pb.h"
#include "ProtoCommon.pb.h"
#include "Var.pb.h"
#include "SessionSociality.pb.h"
#include "SceneSkill.pb.h"
#include "SceneBeing.pb.h"
#include "AstrolabeCmd.pb.h"
// @@protoc_insertion_point(includes)

namespace Cmd {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_SceneUser2_2eproto();
void protobuf_AssignDesc_SceneUser2_2eproto();
void protobuf_ShutdownFile_SceneUser2_2eproto();

class GoCity;
class MsgLangParam;
class MsgParam;
class SysMsg;
class NpcDataSync;
class UserNineSyncCmd;
class UserActionNtf;
class BufferData;
class UserBuffNineSyncCmd;
class ExitPosUserCmd;
class Relive;
class VarUpdate;
class TalkInfo;
class ServerTime;
class EffectUserCmd;
class MenuList;
class NewMenu;
class TeamInfoNine;
class UsePortrait;
class UseFrame;
class NewPortraitFrame;
class QueryPortraitListUserCmd;
class UseDressing;
class NewDressing;
class DressingListUserCmd;
class AddAttrPoint;
class ShopGotItem;
class QueryShopGotItem;
class UpdateShopGotItem;
class OpenUI;
class DbgSysMsg;
class FollowTransferCmd;
class CallNpcFuncCmd;
class ModelShow;
class SoundEffectCmd;
class PresetMsg;
class PresetMsgCmd;
class ChangeBgmCmd;
class FighterInfo;
class QueryFighterInfo;
class GameTimeCmd;
class CDTimeItem;
class CDTimeUserCmd;
class StateChange;
class Photo;
class ShakeScreen;
class ShortcutItem;
class QueryShortcut;
class PutShortcut;
class NpcChangeAngle;
class CameraFocus;
class GoToListUserCmd;
class GoToGearUserCmd;
class NewTransMapCmd;
class DeathTransferListCmd;
class NewDeathTransferCmd;
class UseDeathTransferCmd;
class FollowerUser;
class BeFollowUserCmd;
class LaboratoryUserCmd;
class GotoLaboratoryUserCmd;
class ExchangeProfession;
class Scenery;
class SceneryUserCmd;
class GoMapQuestUserCmd;
class GoMapFollowUserCmd;
class UserAutoHitCmd;
class UploadSceneryPhotoUserCmd;
class UpyunUrl;
class DownloadSceneryPhotoUserCmd;
class QueryMapArea;
class NewMapAreaNtf;
class BuffForeverCmd;
class InviteJoinHandsUserCmd;
class BreakUpHandsUserCmd;
class HandStatusUserCmd;
class QueryShow;
class MusicItem;
class QueryMusicList;
class DemandMusic;
class CloseMusicFrame;
class UploadOkSceneryUserCmd;
class JoinHandsUserCmd;
class TraceItem;
class QueryTraceList;
class UpdateTraceList;
class SetDirection;
class BattleTimelenUserCmd;
class SetOptionUserCmd;
class QueryUserInfoUserCmd;
class CountDownTickUserCmd;
class ItemMusicNtfUserCmd;
class ShakeTreeUserCmd;
class Tree;
class TreeListUserCmd;
class ActivityNtfUserCmd;
class ZoneInfo;
class RecentZoneInfo;
class QueryZoneStatusUserCmd;
class JumpZoneUserCmd;
class ItemImageUserNtfUserCmd;
class InviteFollowUserCmd;
class ChangeNameUserCmd;
class ChargePlayUserCmd;
class RequireNpcFuncUserCmd;
class CheckSeatUserCmd;
class NtfSeatUserCmd;
class YoyoSeatUserCmd;
class ShowSeatUserCmd;
class SetNormalSkillOptionUserCmd;
class NewSetOptionUserCmd;
class UnsolvedSceneryNtfUserCmd;
class VisibleNpc;
class NtfVisibleNpcUserCmd;
class UpyunAuthorizationCmd;
class TransformPreDataCmd;
class UserRenameCmd;
class BuyZenyCmd;
class CallTeamerUserCmd;
class CallTeamerReplyUserCmd;
class SpecialEffectCmd;
class MarriageProposalCmd;
class MarriageProposalReplyCmd;
class UploadWeddingPhotoUserCmd;
class MarriageProposalSuccessCmd;
class InviteeWeddingStartNtfUserCmd;
class KFCShareUserCmd;
class CheckRelationUserCmd;
class TwinsActionUserCmd;
class ShowServantUserCmd;
class ReplaceServantUserCmd;
class ServantService;
class RecommendItemInfo;
class RecommendServantUserCmd;
class ReceiveServantUserCmd;
class FavorabilityStatus;
class ServantRewardStatusUserCmd;
class ProfessionInfo;
class ProfessionQueryUserCmd;
class ProfessionBuyUserCmd;
class ProfessionChangeUserCmd;
class AstrolabeProfessionData;
class AttrProfessionData;
class EquipInfo;
class EquipPackData;
class SkillValidPosData;
class SkillProfessionData;
class ProfessionUserInfo;
class SlotInfo;
class UserAstrolMaterialData;
class UpdateRecordInfoUserCmd;
class SaveRecordUserCmd;
class LoadRecordUserCmd;
class ChangeRecordNameUserCmd;
class BuyRecordSlotUserCmd;
class DeleteRecordUserCmd;
class UpdateBranchInfoUserCmd;
class EnterCapraActivityCmd;
class InviteWithMeUserCmd;
class QueryAltmanKillUserCmd;
class BoothInfo;
class BoothReqUserCmd;
class BoothInfoSyncUserCmd;
class DressUpModelUserCmd;
class DressUpHeadUserCmd;
class StageInfo;
class QueryStageUserCmd;
class DressUpLineUpUserCmd;
class StageUserDataType;
class DressUpStageUserCmd;
class GoToFunctionMapUserCmd;
class GrowthCurInfo;
class GrowthItemInfo;
class GrowthValueInfo;
class GrowthGroupInfo;
class GrowthServantUserCmd;
class ReceiveGrowthServantUserCmd;
class GrowthOpenServantUserCmd;
class CheatTagUserCmd;
class CheatTagStatUserCmd;

enum User2Param {
  USER2PARAM_GOCITY = 1,
  USER2PARAM_SYSMSG = 2,
  USER2PARAM_NPCDATASYNC = 3,
  USER2PARAM_USERNINESYNC = 4,
  USER2PARAM_ACTION = 5,
  USER2PARAM_BUFFERSYNC = 6,
  USER2PARAM_EXIT_POS = 7,
  USER2PARAM_RELIVE = 8,
  USER2PARAM_VAR = 9,
  USER2PARAM_TALKINFO = 10,
  USER2PARAM_SERVERTIME = 11,
  USER2PARAM_NEWTRANSMAP = 12,
  USER2PARAM_EFFECT = 14,
  USER2PARAM_MENU = 15,
  USER2PARAM_NEWMENU = 16,
  USER2PARAM_TEAMINFONINE = 17,
  USER2PARAM_USEPORTRAIT = 18,
  USER2PARAM_USEFRAME = 19,
  USER2PARAM_NEWPORTRAITFRAME = 20,
  USER2PARAM_QUERYPORTRAITLIST = 24,
  USER2PARAM_ADDATTRPOINT = 21,
  USER2PARAM_QUERYSHOPGOTITEM = 22,
  USER2PARAM_UPDATESHOPGOTITEM = 23,
  USER2PARAM_USEDRESSING = 25,
  USER2PARAM_NEWDRESSING = 26,
  USER2PARAM_DRESSINGLIST = 27,
  USER2PARAM_OPENUI = 29,
  USER2PARAM_DBGSYSMSG = 30,
  USER2PARAM_FOLLOWTRANSFER = 32,
  USER2PARAM_NPCFUNC = 33,
  USER2PARAM_MODELSHOW = 34,
  USER2PARAM_SOUNDEFFECT = 35,
  USER2PARAM_PRESETCHATMSG = 36,
  USER2PARAM_CHANGEBGM = 37,
  USER2PARAM_QUERYFIGHTERINFO = 38,
  USER2PARAM_GAMETIME = 40,
  USER2PARAM_CDTIME = 41,
  USER2PARAM_STATECHANGE = 42,
  USER2PARAM_PHOTO = 44,
  USER2PARAM_SHAKESCREEN = 45,
  USER2PARAM_QUERYSHORTCUT = 47,
  USER2PARAM_PUTSHORTCUT = 48,
  USER2PARAM_NPCANGLE = 49,
  USER2PARAM_CAMERAFOCUS = 50,
  USER2PARAM_GOTO_LIST = 51,
  USER2PARAM_GOTO_GEAR = 52,
  USER2PARAM_FOLLOWER = 53,
  USER2PARAM_LABORATORY = 54,
  USER2PARAM_EXCHANGEPROFESSION = 56,
  USER2PARAM_GOTO_LABORATORY = 57,
  USER2PARAM_SCENERY = 58,
  USER2PARAM_GOMAP_QUEST = 59,
  USER2PARAM_GOMAP_FOLLOW = 60,
  USER2PARAM_AUTOHIT = 61,
  USER2PARAM_UPLOAD_SCENERY_PHOTO = 62,
  USER2PARAM_QUERY_MAPAREA = 63,
  USER2PARAM_NEW_MAPAREA = 64,
  USER2PARAM_FOREVER_BUFF = 66,
  USER2PARAM_INVITE_JOIN_HANDS = 67,
  USER2PARAM_BREAK_UP_HANDS = 68,
  USER2PARAM_QUERY_ACTION = 69,
  USER2PARAM_MUSIC_LIST = 70,
  USER2PARAM_MUSIC_DEMAND = 71,
  USER2PARAM_MUSIC_CLOSE = 72,
  USER2PARAM_UPLOAD_OK_SCENERY = 73,
  USER2PARAM_JOIN_HANDS = 74,
  USER2PARAM_QUERY_TRACE_LIST = 75,
  USER2PARAM_UPDATE_TRACE_LIST = 76,
  USER2PARAM_SET_DIRECTION = 77,
  USER2PARAM_DOWNLOAD_SCENERY_PHOTO = 80,
  USER2PARAM_BATTLE_TIMELEN_USER_CMD = 82,
  USER2PARAM_SETOPTION = 83,
  USER2PARAM_QUERYUSERINFO = 84,
  USER2PARAM_COUNTDOWN_TICK = 85,
  USER2PARAM_ITEM_MUSIC_NTF = 86,
  USER2PARAM_SHAKETREE = 87,
  USER2PARAM_TREELIST = 88,
  USER2PARAM_ACTIVITY_NTF = 89,
  USER2PARAM_QUERY_ZONESTATUS = 91,
  USER2PARAM_JUMP_ZONE = 92,
  USER2PARAM_ITEMIMAGE_USER_NTF = 93,
  USER2PARAM_HANDSTATUS = 95,
  USER2PARAM_BEFOLLOW = 96,
  USER2PARAM_INVITEFOLLOW = 97,
  USER2PARAM_CHANGENAME = 98,
  USER2PARAM_CHARGEPLAY = 99,
  USER2PARAM_REQUIRENPCFUNC = 100,
  USER2PARAM_CHECK_SEAT = 101,
  USER2PARAM_NTF_SEAT = 102,
  USER2PARAM_SET_NORMALSKILL_OPTION = 103,
  USER2PARAM_UNSOLVED_SCENERY_NTF = 104,
  USER2PARAM_NTF_VISIBLENPC = 105,
  USER2PARAM_NEW_SET_OPTION = 106,
  USER2PARAM_UPYUN_AUTHORIZATION = 107,
  USER2PARAM_TRANSFORM_PREDATA = 108,
  USER2PARAM_USER_RENAME = 109,
  USER2PARAM_ENTER_CAPRA_ACTIVITY = 110,
  USER2PARAM_BUY_ZENY = 111,
  USER2PARAM_CALL_TEAMER = 112,
  USER2PARAM_CALL_TEAMER_JOIN = 113,
  USER2PARAM_YOYO_SEAT = 114,
  USER2PARAM_SHOW_SEAT = 115,
  USER2PARAM_SPECIAL_EFFECT = 116,
  USER2PARAM_MARRIAGE_PROPOSAL = 117,
  USER2PARAM_MARRIAGE_PROPOSAL_REPLY = 118,
  USER2PARAM_UPLOAD_WEDDING_PHOTO = 119,
  USER2PARAM_MARRIAGE_PROPOSAL_SUCCESS = 120,
  USER2PARAM_INVITEE_WEDDING_START_NTF = 121,
  USER2PARAM_SERVANT_SHOW = 122,
  USER2PARAM_SERVANT_REPLACE = 123,
  USER2PARAM_SERVANT_SERVICE = 124,
  USER2PARAM_SERVANT_RECOMMEND = 125,
  USER2PARAM_SERVANT_RECEIVE = 126,
  USER2PARAM_SERVANT_REWARD_STATUS = 127,
  USER2PARAM_KFC_SHARE = 128,
  USER2PARAM_TWINS_ACTION = 129,
  USER2PARAM_CHECK_RELATION = 130,
  USER2PARAM_PROFESSION_QUERY = 131,
  USER2PARAM_PROFESSION_BUY = 132,
  USER2PARAM_PROFESSION_CHANGE = 133,
  USER2PARAM_UPDATE_RECORD_INFO = 134,
  USER2PARAM_SAVE_RECORD = 135,
  USER2PARAM_LOAD_RECORD = 136,
  USER2PARAM_CHANGE_RECORD_NAME = 137,
  USER2PARAM_BUY_RECORD_SLOT = 138,
  USER2PARAM_DELETE_RECORD = 139,
  USER2PARAM_UPDATE_BRANCH_INFO = 140,
  USER2PARAM_GOTO_FUNCMAP = 141,
  USER2PARAM_INVITE_WITH_ME = 142,
  USER2PARAM_QUERY_ALTMAN_KILL = 143,
  USER2PARAM_USER_BOOTH_REQ = 144,
  USER2PARAM_BOOTH_INFO_SYNC = 145,
  USER2PARAM_DRESSUP_MODEL = 146,
  USER2PARAM_DRESSUP_HEAD = 147,
  USER2PARAM_QUERY_STAGE = 148,
  USER2PARAM_DRESSUP_LINEUP = 149,
  USER2PARAM_DRESSUP_STAGE = 150,
  USER2PARAM_DEATH_TRANSFER_LIST = 151,
  USER2PARAM_NEW_DEATH_TRANSFER = 152,
  USER2PARAM_TRANSFER = 153,
  USER2PARAM_SERVANT_GROWTH = 154,
  USER2PARAM_SERVANT_RECEIVE_GROWTH = 155,
  USER2PARAM_SERVANT_GROWTH_OPEN = 156,
  USER2PARAM_CHEAT_TAG = 157,
  USER2PARAM_CHEAT_TAG_STAT = 158
};
bool User2Param_IsValid(int value);
const User2Param User2Param_MIN = USER2PARAM_GOCITY;
const User2Param User2Param_MAX = USER2PARAM_CHEAT_TAG_STAT;
const int User2Param_ARRAYSIZE = User2Param_MAX + 1;

const ::google::protobuf::EnumDescriptor* User2Param_descriptor();
inline const ::std::string& User2Param_Name(User2Param value) {
  return ::google::protobuf::internal::NameOfEnum(
    User2Param_descriptor(), value);
}
inline bool User2Param_Parse(
    const ::std::string& name, User2Param* value) {
  return ::google::protobuf::internal::ParseNamedEnum<User2Param>(
    User2Param_descriptor(), name, value);
}
enum EMessageType {
  EMESSAGETYPE_MIN = 0,
  EMESSAGETYPE_FRAME = 1,
  EMESSAGETYPE_GETEXP = 2,
  EMESSAGETYPE_TIME_DOWN = 3,
  EMESSAGETYPE_TIME_DOWN_NOT_CLEAR = 4,
  EMESSAGETYPE_MIDDLE_SHOW = 5,
  EMESSAGETYPE_MAX = 6
};
bool EMessageType_IsValid(int value);
const EMessageType EMessageType_MIN = EMESSAGETYPE_MIN;
const EMessageType EMessageType_MAX = EMESSAGETYPE_MAX;
const int EMessageType_ARRAYSIZE = EMessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EMessageType_descriptor();
inline const ::std::string& EMessageType_Name(EMessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EMessageType_descriptor(), value);
}
inline bool EMessageType_Parse(
    const ::std::string& name, EMessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EMessageType>(
    EMessageType_descriptor(), name, value);
}
enum EMessageActOpt {
  EMESSAGEACT_ADD = 1,
  EMESSAGEACT_DEL = 2
};
bool EMessageActOpt_IsValid(int value);
const EMessageActOpt EMessageActOpt_MIN = EMESSAGEACT_ADD;
const EMessageActOpt EMessageActOpt_MAX = EMESSAGEACT_DEL;
const int EMessageActOpt_ARRAYSIZE = EMessageActOpt_MAX + 1;

const ::google::protobuf::EnumDescriptor* EMessageActOpt_descriptor();
inline const ::std::string& EMessageActOpt_Name(EMessageActOpt value) {
  return ::google::protobuf::internal::NameOfEnum(
    EMessageActOpt_descriptor(), value);
}
inline bool EMessageActOpt_Parse(
    const ::std::string& name, EMessageActOpt* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EMessageActOpt>(
    EMessageActOpt_descriptor(), name, value);
}
enum EUserActionType {
  EUSERACTIONTYPE_MIN = 0,
  EUSERACTIONTYPE_ADDHP = 1,
  EUSERACTIONTYPE_REFINE = 2,
  EUSERACTIONTYPE_EXPRESSION = 3,
  EUSERACTIONTYPE_MOTION = 4,
  EUSERACTIONTYPE_GEAR_ACTION = 5,
  EUSERACTIONTYPE_NORMALMOTION = 6,
  EUSERACTIONTYPE_DIALOG = 7,
  EUSERACTIONTYPE_MAX = 8
};
bool EUserActionType_IsValid(int value);
const EUserActionType EUserActionType_MIN = EUSERACTIONTYPE_MIN;
const EUserActionType EUserActionType_MAX = EUSERACTIONTYPE_MAX;
const int EUserActionType_ARRAYSIZE = EUserActionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EUserActionType_descriptor();
inline const ::std::string& EUserActionType_Name(EUserActionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EUserActionType_descriptor(), value);
}
inline bool EUserActionType_Parse(
    const ::std::string& name, EUserActionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EUserActionType>(
    EUserActionType_descriptor(), name, value);
}
enum EReliveType {
  ERELIVETYPE_MIN = 0,
  ERELIVETYPE_RETURN = 1,
  ERELIVETYPE_MONEY = 2,
  ERELIVETYPE_RAND = 3,
  ERELIVETYPE_RETURNSAVE = 4,
  ERELIVETYPE_SKILL = 5,
  ERELIVETYPE_TOWER = 6,
  ERELIVETYPE_MAX = 7
};
bool EReliveType_IsValid(int value);
const EReliveType EReliveType_MIN = ERELIVETYPE_MIN;
const EReliveType EReliveType_MAX = ERELIVETYPE_MAX;
const int EReliveType_ARRAYSIZE = EReliveType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EReliveType_descriptor();
inline const ::std::string& EReliveType_Name(EReliveType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EReliveType_descriptor(), value);
}
inline bool EReliveType_Parse(
    const ::std::string& name, EReliveType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EReliveType>(
    EReliveType_descriptor(), name, value);
}
enum EEffectOpt {
  EEFFECTOPT_PLAY = 1,
  EEFFECTOPT_STOP = 2,
  EEFFECTOPT_DELETE = 3
};
bool EEffectOpt_IsValid(int value);
const EEffectOpt EEffectOpt_MIN = EEFFECTOPT_PLAY;
const EEffectOpt EEffectOpt_MAX = EEFFECTOPT_DELETE;
const int EEffectOpt_ARRAYSIZE = EEffectOpt_MAX + 1;

const ::google::protobuf::EnumDescriptor* EEffectOpt_descriptor();
inline const ::std::string& EEffectOpt_Name(EEffectOpt value) {
  return ::google::protobuf::internal::NameOfEnum(
    EEffectOpt_descriptor(), value);
}
inline bool EEffectOpt_Parse(
    const ::std::string& name, EEffectOpt* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EEffectOpt>(
    EEffectOpt_descriptor(), name, value);
}
enum EEffectType {
  EEFFECTTYPE_NORMAL = 1,
  EEFFECTTYPE_ACCEPTQUEST = 2,
  EEFFECTTYPE_FINISHQUEST = 3,
  EEFFECTTYPE_MVPSHOW = 4,
  EEFFECTTYPE_SCENEEFFECT = 5
};
bool EEffectType_IsValid(int value);
const EEffectType EEffectType_MIN = EEFFECTTYPE_NORMAL;
const EEffectType EEffectType_MAX = EEFFECTTYPE_SCENEEFFECT;
const int EEffectType_ARRAYSIZE = EEffectType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EEffectType_descriptor();
inline const ::std::string& EEffectType_Name(EEffectType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EEffectType_descriptor(), value);
}
inline bool EEffectType_Parse(
    const ::std::string& name, EEffectType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EEffectType>(
    EEffectType_descriptor(), name, value);
}
enum EDressType {
  EDRESSTYPE_MIN = 0,
  EDRESSTYPE_HAIR = 1,
  EDRESSTYPE_HAIRCOLOR = 2,
  EDRESSTYPE_EYE = 3,
  EDRESSTYPE_CLOTH = 4,
  EDRESSTYPE_MAX = 5
};
bool EDressType_IsValid(int value);
const EDressType EDressType_MIN = EDRESSTYPE_MIN;
const EDressType EDressType_MAX = EDRESSTYPE_MAX;
const int EDressType_ARRAYSIZE = EDressType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EDressType_descriptor();
inline const ::std::string& EDressType_Name(EDressType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EDressType_descriptor(), value);
}
inline bool EDressType_Parse(
    const ::std::string& name, EDressType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EDressType>(
    EDressType_descriptor(), name, value);
}
enum PointType {
  POINTTYPE_ADD = 1,
  POINTTYPE_RESET = 2
};
bool PointType_IsValid(int value);
const PointType PointType_MIN = POINTTYPE_ADD;
const PointType PointType_MAX = POINTTYPE_RESET;
const int PointType_ARRAYSIZE = PointType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PointType_descriptor();
inline const ::std::string& PointType_Name(PointType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PointType_descriptor(), value);
}
inline bool PointType_Parse(
    const ::std::string& name, PointType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PointType>(
    PointType_descriptor(), name, value);
}
enum EDbgMsgType {
  EDBGMSGTYPE_MIN = 0,
  EDBGMSGTYPE_TEST = 1
};
bool EDbgMsgType_IsValid(int value);
const EDbgMsgType EDbgMsgType_MIN = EDBGMSGTYPE_MIN;
const EDbgMsgType EDbgMsgType_MAX = EDBGMSGTYPE_TEST;
const int EDbgMsgType_ARRAYSIZE = EDbgMsgType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EDbgMsgType_descriptor();
inline const ::std::string& EDbgMsgType_Name(EDbgMsgType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EDbgMsgType_descriptor(), value);
}
inline bool EDbgMsgType_Parse(
    const ::std::string& name, EDbgMsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EDbgMsgType>(
    EDbgMsgType_descriptor(), name, value);
}
enum GameTimeOpt {
  EGAMETIMEOPT_SYNC = 1,
  EGAMETIMEOPT_ADJUST = 2
};
bool GameTimeOpt_IsValid(int value);
const GameTimeOpt GameTimeOpt_MIN = EGAMETIMEOPT_SYNC;
const GameTimeOpt GameTimeOpt_MAX = EGAMETIMEOPT_ADJUST;
const int GameTimeOpt_ARRAYSIZE = GameTimeOpt_MAX + 1;

const ::google::protobuf::EnumDescriptor* GameTimeOpt_descriptor();
inline const ::std::string& GameTimeOpt_Name(GameTimeOpt value) {
  return ::google::protobuf::internal::NameOfEnum(
    GameTimeOpt_descriptor(), value);
}
inline bool GameTimeOpt_Parse(
    const ::std::string& name, GameTimeOpt* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GameTimeOpt>(
    GameTimeOpt_descriptor(), name, value);
}
enum CD_TYPE {
  CD_TYPE_SKILL = 0,
  CD_TYPE_ITEM = 1,
  CD_TYPE_SKILLDEALY = 2
};
bool CD_TYPE_IsValid(int value);
const CD_TYPE CD_TYPE_MIN = CD_TYPE_SKILL;
const CD_TYPE CD_TYPE_MAX = CD_TYPE_SKILLDEALY;
const int CD_TYPE_ARRAYSIZE = CD_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* CD_TYPE_descriptor();
inline const ::std::string& CD_TYPE_Name(CD_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    CD_TYPE_descriptor(), value);
}
inline bool CD_TYPE_Parse(
    const ::std::string& name, CD_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CD_TYPE>(
    CD_TYPE_descriptor(), name, value);
}
enum EGoToGearType {
  EGoToGearType_Single = 1,
  EGoToGearType_Hand = 2,
  EGoToGearType_Team = 3,
  EGoToGearType_Free = 4
};
bool EGoToGearType_IsValid(int value);
const EGoToGearType EGoToGearType_MIN = EGoToGearType_Single;
const EGoToGearType EGoToGearType_MAX = EGoToGearType_Free;
const int EGoToGearType_ARRAYSIZE = EGoToGearType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EGoToGearType_descriptor();
inline const ::std::string& EGoToGearType_Name(EGoToGearType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EGoToGearType_descriptor(), value);
}
inline bool EGoToGearType_Parse(
    const ::std::string& name, EGoToGearType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EGoToGearType>(
    EGoToGearType_descriptor(), name, value);
}
enum EFollowType {
  EFOLLOWTYPE_MIN = 0,
  EFOLLOWTYPE_HAND = 1,
  EFOLLOWTYPE_BREAK = 5,
  EFOLLOWTYPE_TWINSACTION = 6,
  EFOLLOWTYPE_MAX = 7
};
bool EFollowType_IsValid(int value);
const EFollowType EFollowType_MIN = EFOLLOWTYPE_MIN;
const EFollowType EFollowType_MAX = EFOLLOWTYPE_MAX;
const int EFollowType_ARRAYSIZE = EFollowType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EFollowType_descriptor();
inline const ::std::string& EFollowType_Name(EFollowType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EFollowType_descriptor(), value);
}
inline bool EFollowType_Parse(
    const ::std::string& name, EFollowType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EFollowType>(
    EFollowType_descriptor(), name, value);
}
enum EAlbumType {
  EALBUMTYPE_MIN = 0,
  EALBUMTYPE_SCENERY = 1,
  EALBUMTYPE_PHOTO = 2,
  EALBUMTYPE_GUILD_ICON = 3,
  EALBUMTYPE_WEDDING = 4,
  EALBUMTYPE_MAX = 5
};
bool EAlbumType_IsValid(int value);
const EAlbumType EAlbumType_MIN = EALBUMTYPE_MIN;
const EAlbumType EAlbumType_MAX = EALBUMTYPE_MAX;
const int EAlbumType_ARRAYSIZE = EAlbumType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EAlbumType_descriptor();
inline const ::std::string& EAlbumType_Name(EAlbumType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EAlbumType_descriptor(), value);
}
inline bool EAlbumType_Parse(
    const ::std::string& name, EAlbumType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EAlbumType>(
    EAlbumType_descriptor(), name, value);
}
enum EBattleStatus {
  EBATTLESTATUS_EASY = 1,
  EBATTLESTATUS_TIRED = 2,
  EBATTLESTATUS_HIGHTIRED = 3
};
bool EBattleStatus_IsValid(int value);
const EBattleStatus EBattleStatus_MIN = EBATTLESTATUS_EASY;
const EBattleStatus EBattleStatus_MAX = EBATTLESTATUS_HIGHTIRED;
const int EBattleStatus_ARRAYSIZE = EBattleStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* EBattleStatus_descriptor();
inline const ::std::string& EBattleStatus_Name(EBattleStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    EBattleStatus_descriptor(), value);
}
inline bool EBattleStatus_Parse(
    const ::std::string& name, EBattleStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EBattleStatus>(
    EBattleStatus_descriptor(), name, value);
}
enum EQueryType {
  EQUERYTYPE_MIN = 0,
  EQUERYTYPE_ALL = 1,
  EQUERYTYPE_FRIEND = 2,
  EQUERYTYPE_CLOSE = 3,
  EQUERYTYPE_WEDDING_ALL = 4,
  EQUERYTYPE_WEDDING_FRIEND = 5,
  EQUERYTYPE_WEDDING_CLOSE = 6,
  EQUERYTYPE_MAX = 7
};
bool EQueryType_IsValid(int value);
const EQueryType EQueryType_MIN = EQUERYTYPE_MIN;
const EQueryType EQueryType_MAX = EQUERYTYPE_MAX;
const int EQueryType_ARRAYSIZE = EQueryType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EQueryType_descriptor();
inline const ::std::string& EQueryType_Name(EQueryType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EQueryType_descriptor(), value);
}
inline bool EQueryType_Parse(
    const ::std::string& name, EQueryType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EQueryType>(
    EQueryType_descriptor(), name, value);
}
enum EFashionHideType {
  EFASHIONHIDETYPE_HEAD = 0,
  EFASHIONHIDETYPE_BACK = 1,
  EFASHIONHIDETYPE_FACE = 2,
  EFASHIONHIDETYPE_TAIL = 3,
  EFASHIONHIDETYPE_MOUTH = 4,
  EFASHIONHIDETYPE_BODY = 5,
  EFASHIONHIDETYPE_MAX = 6
};
bool EFashionHideType_IsValid(int value);
const EFashionHideType EFashionHideType_MIN = EFASHIONHIDETYPE_HEAD;
const EFashionHideType EFashionHideType_MAX = EFASHIONHIDETYPE_MAX;
const int EFashionHideType_ARRAYSIZE = EFashionHideType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EFashionHideType_descriptor();
inline const ::std::string& EFashionHideType_Name(EFashionHideType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EFashionHideType_descriptor(), value);
}
inline bool EFashionHideType_Parse(
    const ::std::string& name, EFashionHideType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EFashionHideType>(
    EFashionHideType_descriptor(), name, value);
}
enum ECountDownType {
  ECOUNTDOWNTYPE_DOJO = 1,
  ECOUNTDOWNTYPE_TOWER = 2,
  ECOUNTDOWNTYPE_ALTMAN = 3
};
bool ECountDownType_IsValid(int value);
const ECountDownType ECountDownType_MIN = ECOUNTDOWNTYPE_DOJO;
const ECountDownType ECountDownType_MAX = ECOUNTDOWNTYPE_ALTMAN;
const int ECountDownType_ARRAYSIZE = ECountDownType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ECountDownType_descriptor();
inline const ::std::string& ECountDownType_Name(ECountDownType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ECountDownType_descriptor(), value);
}
inline bool ECountDownType_Parse(
    const ::std::string& name, ECountDownType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ECountDownType>(
    ECountDownType_descriptor(), name, value);
}
enum ETreeStatus {
  ETREESTATUS_MIN = 0,
  ETREESTATUS_NORMAL = 1,
  ETREESTATUS_MONSTER = 2,
  ETREESTATUS_REWARD = 3,
  ETREESTATUS_DEAD = 4,
  ETREESTATUS_MAX = 5
};
bool ETreeStatus_IsValid(int value);
const ETreeStatus ETreeStatus_MIN = ETREESTATUS_MIN;
const ETreeStatus ETreeStatus_MAX = ETREESTATUS_MAX;
const int ETreeStatus_ARRAYSIZE = ETreeStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* ETreeStatus_descriptor();
inline const ::std::string& ETreeStatus_Name(ETreeStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    ETreeStatus_descriptor(), value);
}
inline bool ETreeStatus_Parse(
    const ::std::string& name, ETreeStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ETreeStatus>(
    ETreeStatus_descriptor(), name, value);
}
enum EZoneStatus {
  EZONESTATUS_MIN = 0,
  EZONESTATUS_FREE = 1,
  EZONESTATUS_BUSY = 2,
  EZONESTATUS_VERYBUSY = 3,
  EZONESTATUS_MAX = 4
};
bool EZoneStatus_IsValid(int value);
const EZoneStatus EZoneStatus_MIN = EZONESTATUS_MIN;
const EZoneStatus EZoneStatus_MAX = EZONESTATUS_MAX;
const int EZoneStatus_ARRAYSIZE = EZoneStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* EZoneStatus_descriptor();
inline const ::std::string& EZoneStatus_Name(EZoneStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    EZoneStatus_descriptor(), value);
}
inline bool EZoneStatus_Parse(
    const ::std::string& name, EZoneStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EZoneStatus>(
    EZoneStatus_descriptor(), name, value);
}
enum EZoneState {
  EZONESTATE_MIN = 0,
  EZONESTATE_FULL = 1,
  EZONESTATE_NOFULL = 2,
  EZONESTATE_MAX = 3
};
bool EZoneState_IsValid(int value);
const EZoneState EZoneState_MIN = EZONESTATE_MIN;
const EZoneState EZoneState_MAX = EZONESTATE_MAX;
const int EZoneState_ARRAYSIZE = EZoneState_MAX + 1;

const ::google::protobuf::EnumDescriptor* EZoneState_descriptor();
inline const ::std::string& EZoneState_Name(EZoneState value) {
  return ::google::protobuf::internal::NameOfEnum(
    EZoneState_descriptor(), value);
}
inline bool EZoneState_Parse(
    const ::std::string& name, EZoneState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EZoneState>(
    EZoneState_descriptor(), name, value);
}
enum EJumpZone {
  EJUMPZONE_MIN = 0,
  EJUMPZONE_GUILD = 1,
  EJUMPZONE_TEAM = 2,
  EJUMPZONE_USER = 3,
  EJUMPZONE_MAX = 4
};
bool EJumpZone_IsValid(int value);
const EJumpZone EJumpZone_MIN = EJUMPZONE_MIN;
const EJumpZone EJumpZone_MAX = EJUMPZONE_MAX;
const int EJumpZone_ARRAYSIZE = EJumpZone_MAX + 1;

const ::google::protobuf::EnumDescriptor* EJumpZone_descriptor();
inline const ::std::string& EJumpZone_Name(EJumpZone value) {
  return ::google::protobuf::internal::NameOfEnum(
    EJumpZone_descriptor(), value);
}
inline bool EJumpZone_Parse(
    const ::std::string& name, EJumpZone* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EJumpZone>(
    EJumpZone_descriptor(), name, value);
}
enum SeatShowType {
  SEAT_SHOW_VISIBLE = 0,
  SEAT_SHOW_INVISIBLE = 1
};
bool SeatShowType_IsValid(int value);
const SeatShowType SeatShowType_MIN = SEAT_SHOW_VISIBLE;
const SeatShowType SeatShowType_MAX = SEAT_SHOW_INVISIBLE;
const int SeatShowType_ARRAYSIZE = SeatShowType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SeatShowType_descriptor();
inline const ::std::string& SeatShowType_Name(SeatShowType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SeatShowType_descriptor(), value);
}
inline bool SeatShowType_Parse(
    const ::std::string& name, SeatShowType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SeatShowType>(
    SeatShowType_descriptor(), name, value);
}
enum EOptionType {
  EOPTIONTYPE_USE_SAVE_HP = 0,
  EOPTIONTYPE_USE_SAVE_SP = 1,
  EOPTIONTYPE_USE_SLIM = 2,
  EOPTIONTYPE_LOTTERY_CNT_HEAD = 3,
  EOPTIONTYPE_LOTTERY_CNT_EQUIP = 4,
  EOPTIONTYPE_LOTTERY_CNT_CARD = 5,
  EOPTIONTYPE_LOTTERY_CNT_MAGIC = 6,
  EOPTIONTYPE_LOTTERY_CNT_GIVE = 7,
  EOPTIONTYPE_USE_PETTALK = 8,
  EOPTIONTYPE_MAX = 63
};
bool EOptionType_IsValid(int value);
const EOptionType EOptionType_MIN = EOPTIONTYPE_USE_SAVE_HP;
const EOptionType EOptionType_MAX = EOPTIONTYPE_MAX;
const int EOptionType_ARRAYSIZE = EOptionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EOptionType_descriptor();
inline const ::std::string& EOptionType_Name(EOptionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EOptionType_descriptor(), value);
}
inline bool EOptionType_Parse(
    const ::std::string& name, EOptionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EOptionType>(
    EOptionType_descriptor(), name, value);
}
enum ERenameErrCode {
  ERENAME_SUCCESS = 0,
  ERENAME_CD = 1,
  ERENAME_CONFLICT = 2
};
bool ERenameErrCode_IsValid(int value);
const ERenameErrCode ERenameErrCode_MIN = ERENAME_SUCCESS;
const ERenameErrCode ERenameErrCode_MAX = ERENAME_CONFLICT;
const int ERenameErrCode_ARRAYSIZE = ERenameErrCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ERenameErrCode_descriptor();
inline const ::std::string& ERenameErrCode_Name(ERenameErrCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ERenameErrCode_descriptor(), value);
}
inline bool ERenameErrCode_Parse(
    const ::std::string& name, ERenameErrCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ERenameErrCode>(
    ERenameErrCode_descriptor(), name, value);
}
enum EProposalReply {
  EPROPOSALREPLY_YES = 0,
  EPROPOSALREPLY_NO = 1,
  EPROPOSALREPLY_OUTRANGE = 2,
  EPROPOSALREPLY_CANCEL = 3
};
bool EProposalReply_IsValid(int value);
const EProposalReply EProposalReply_MIN = EPROPOSALREPLY_YES;
const EProposalReply EProposalReply_MAX = EPROPOSALREPLY_CANCEL;
const int EProposalReply_ARRAYSIZE = EProposalReply_MAX + 1;

const ::google::protobuf::EnumDescriptor* EProposalReply_descriptor();
inline const ::std::string& EProposalReply_Name(EProposalReply value) {
  return ::google::protobuf::internal::NameOfEnum(
    EProposalReply_descriptor(), value);
}
inline bool EProposalReply_Parse(
    const ::std::string& name, EProposalReply* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EProposalReply>(
    EProposalReply_descriptor(), name, value);
}
enum ETwinsOperation {
  ETWINS_OPERATION_MIN = 0,
  ETWINS_OPERATION_SPONSOR = 1,
  ETWINS_OPERATION_REQUEST = 2,
  ETWINS_OPERATION_AGREE = 3,
  ETWINS_OPERATION_DISAGREE = 4,
  ETWINS_OPERATION_COMMIT = 5
};
bool ETwinsOperation_IsValid(int value);
const ETwinsOperation ETwinsOperation_MIN = ETWINS_OPERATION_MIN;
const ETwinsOperation ETwinsOperation_MAX = ETWINS_OPERATION_COMMIT;
const int ETwinsOperation_ARRAYSIZE = ETwinsOperation_MAX + 1;

const ::google::protobuf::EnumDescriptor* ETwinsOperation_descriptor();
inline const ::std::string& ETwinsOperation_Name(ETwinsOperation value) {
  return ::google::protobuf::internal::NameOfEnum(
    ETwinsOperation_descriptor(), value);
}
inline bool ETwinsOperation_Parse(
    const ::std::string& name, ETwinsOperation* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ETwinsOperation>(
    ETwinsOperation_descriptor(), name, value);
}
enum EServantService {
  ESERVANT_SERVICE_RECOMMEND = 1,
  ESERVANT_SERVICE_FINANCE_THREE = 2,
  ESERVANT_SERVICE_FINANCE_SEVEN = 3,
  ESERVANT_SERVICE_UPGRADE = 4,
  ESERVANT_SERVICE_SPECIAL = 5
};
bool EServantService_IsValid(int value);
const EServantService EServantService_MIN = ESERVANT_SERVICE_RECOMMEND;
const EServantService EServantService_MAX = ESERVANT_SERVICE_SPECIAL;
const int EServantService_ARRAYSIZE = EServantService_MAX + 1;

const ::google::protobuf::EnumDescriptor* EServantService_descriptor();
inline const ::std::string& EServantService_Name(EServantService value) {
  return ::google::protobuf::internal::NameOfEnum(
    EServantService_descriptor(), value);
}
inline bool EServantService_Parse(
    const ::std::string& name, EServantService* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EServantService>(
    EServantService_descriptor(), name, value);
}
enum ERecommendStatus {
  ERECOMMEND_STATUS_MIN = 0,
  ERECOMMEND_STATUS_GO = 1,
  ERECOMMEND_STATUS_RECEIVE = 2,
  ERECOMMEND_STATUS_FINISH = 3
};
bool ERecommendStatus_IsValid(int value);
const ERecommendStatus ERecommendStatus_MIN = ERECOMMEND_STATUS_MIN;
const ERecommendStatus ERecommendStatus_MAX = ERECOMMEND_STATUS_FINISH;
const int ERecommendStatus_ARRAYSIZE = ERecommendStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* ERecommendStatus_descriptor();
inline const ::std::string& ERecommendStatus_Name(ERecommendStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    ERecommendStatus_descriptor(), value);
}
inline bool ERecommendStatus_Parse(
    const ::std::string& name, ERecommendStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ERecommendStatus>(
    ERecommendStatus_descriptor(), name, value);
}
enum EProfressionDataType {
  ETypeAdvance = 0,
  ETypeBranch = 1,
  ETypeRecord = 2
};
bool EProfressionDataType_IsValid(int value);
const EProfressionDataType EProfressionDataType_MIN = ETypeAdvance;
const EProfressionDataType EProfressionDataType_MAX = ETypeRecord;
const int EProfressionDataType_ARRAYSIZE = EProfressionDataType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EProfressionDataType_descriptor();
inline const ::std::string& EProfressionDataType_Name(EProfressionDataType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EProfressionDataType_descriptor(), value);
}
inline bool EProfressionDataType_Parse(
    const ::std::string& name, EProfressionDataType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EProfressionDataType>(
    EProfressionDataType_descriptor(), name, value);
}
enum ESlotType {
  ESLOT_DEFAULT = 1,
  ESLOT_BUY = 2,
  ESLOT_MONTH_CARD = 3
};
bool ESlotType_IsValid(int value);
const ESlotType ESlotType_MIN = ESLOT_DEFAULT;
const ESlotType ESlotType_MAX = ESLOT_MONTH_CARD;
const int ESlotType_ARRAYSIZE = ESlotType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ESlotType_descriptor();
inline const ::std::string& ESlotType_Name(ESlotType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ESlotType_descriptor(), value);
}
inline bool ESlotType_Parse(
    const ::std::string& name, ESlotType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ESlotType>(
    ESlotType_descriptor(), name, value);
}
enum EBoothOper {
  EBOOTHOPER_OPEN = 0,
  EBOOTHOPER_CLOSE = 1,
  EBOOTHOPER_UPDATE = 2
};
bool EBoothOper_IsValid(int value);
const EBoothOper EBoothOper_MIN = EBOOTHOPER_OPEN;
const EBoothOper EBoothOper_MAX = EBOOTHOPER_UPDATE;
const int EBoothOper_ARRAYSIZE = EBoothOper_MAX + 1;

const ::google::protobuf::EnumDescriptor* EBoothOper_descriptor();
inline const ::std::string& EBoothOper_Name(EBoothOper value) {
  return ::google::protobuf::internal::NameOfEnum(
    EBoothOper_descriptor(), value);
}
inline bool EBoothOper_Parse(
    const ::std::string& name, EBoothOper* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EBoothOper>(
    EBoothOper_descriptor(), name, value);
}
enum EBoothSign {
  EBOOTHSIGN_WHITE = 0,
  EBOOTHSIGN_GREEN = 1,
  EBOOTHSIGN_BLUE = 2,
  EBOOTHSIGN_PURPLE = 3,
  EBOOTHSIGN_ORANGE = 4,
  EBOOTHSIGN_PINK = 5
};
bool EBoothSign_IsValid(int value);
const EBoothSign EBoothSign_MIN = EBOOTHSIGN_WHITE;
const EBoothSign EBoothSign_MAX = EBOOTHSIGN_PINK;
const int EBoothSign_ARRAYSIZE = EBoothSign_MAX + 1;

const ::google::protobuf::EnumDescriptor* EBoothSign_descriptor();
inline const ::std::string& EBoothSign_Name(EBoothSign value) {
  return ::google::protobuf::internal::NameOfEnum(
    EBoothSign_descriptor(), value);
}
inline bool EBoothSign_Parse(
    const ::std::string& name, EBoothSign* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EBoothSign>(
    EBoothSign_descriptor(), name, value);
}
enum EDressUpStatus {
  EDRESSUP_MIN = 0,
  EDRESSUP_WAIT = 1,
  EDRESSUP_SHOW = 2
};
bool EDressUpStatus_IsValid(int value);
const EDressUpStatus EDressUpStatus_MIN = EDRESSUP_MIN;
const EDressUpStatus EDressUpStatus_MAX = EDRESSUP_SHOW;
const int EDressUpStatus_ARRAYSIZE = EDressUpStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* EDressUpStatus_descriptor();
inline const ::std::string& EDressUpStatus_Name(EDressUpStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    EDressUpStatus_descriptor(), value);
}
inline bool EDressUpStatus_Parse(
    const ::std::string& name, EDressUpStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EDressUpStatus>(
    EDressUpStatus_descriptor(), name, value);
}
enum EFuncMapType {
  EFUNCMAPTYPE_POLLY = 1
};
bool EFuncMapType_IsValid(int value);
const EFuncMapType EFuncMapType_MIN = EFUNCMAPTYPE_POLLY;
const EFuncMapType EFuncMapType_MAX = EFUNCMAPTYPE_POLLY;
const int EFuncMapType_ARRAYSIZE = EFuncMapType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EFuncMapType_descriptor();
inline const ::std::string& EFuncMapType_Name(EFuncMapType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EFuncMapType_descriptor(), value);
}
inline bool EFuncMapType_Parse(
    const ::std::string& name, EFuncMapType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EFuncMapType>(
    EFuncMapType_descriptor(), name, value);
}
enum EGrowthStatus {
  EGROWTH_STATUS_MIN = 0,
  EGROWTH_STATUS_GO = 1,
  EGROWTH_STATUS_RECEIVE = 2,
  EGROWTH_STATUS_FINISH = 3
};
bool EGrowthStatus_IsValid(int value);
const EGrowthStatus EGrowthStatus_MIN = EGROWTH_STATUS_MIN;
const EGrowthStatus EGrowthStatus_MAX = EGROWTH_STATUS_FINISH;
const int EGrowthStatus_ARRAYSIZE = EGrowthStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* EGrowthStatus_descriptor();
inline const ::std::string& EGrowthStatus_Name(EGrowthStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    EGrowthStatus_descriptor(), value);
}
inline bool EGrowthStatus_Parse(
    const ::std::string& name, EGrowthStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EGrowthStatus>(
    EGrowthStatus_descriptor(), name, value);
}
enum EGrowthType {
  EGROWTH_TYPE_MIN = 0,
  EGROWTH_TYPE_STEP = 1,
  EGROWTH_TYPE_EP = 2
};
bool EGrowthType_IsValid(int value);
const EGrowthType EGrowthType_MIN = EGROWTH_TYPE_MIN;
const EGrowthType EGrowthType_MAX = EGROWTH_TYPE_EP;
const int EGrowthType_ARRAYSIZE = EGrowthType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EGrowthType_descriptor();
inline const ::std::string& EGrowthType_Name(EGrowthType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EGrowthType_descriptor(), value);
}
inline bool EGrowthType_Parse(
    const ::std::string& name, EGrowthType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EGrowthType>(
    EGrowthType_descriptor(), name, value);
}
// ===================================================================

class GoCity : public ::google::protobuf::Message {
 public:
  GoCity();
  virtual ~GoCity();

  GoCity(const GoCity& from);

  inline GoCity& operator=(const GoCity& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GoCity& default_instance();

  void Swap(GoCity* other);

  // implements Message ----------------------------------------------

  GoCity* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GoCity& from);
  void MergeFrom(const GoCity& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_GOCITY];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional uint32 mapid = 3 [default = 0];
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapidFieldNumber = 3;
  inline ::google::protobuf::uint32 mapid() const;
  inline void set_mapid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.GoCity)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_mapid();
  inline void clear_has_mapid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 mapid_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static GoCity* default_instance_;
};
// -------------------------------------------------------------------

class MsgLangParam : public ::google::protobuf::Message {
 public:
  MsgLangParam();
  virtual ~MsgLangParam();

  MsgLangParam(const MsgLangParam& from);

  inline MsgLangParam& operator=(const MsgLangParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgLangParam& default_instance();

  void Swap(MsgLangParam* other);

  // implements Message ----------------------------------------------

  MsgLangParam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgLangParam& from);
  void MergeFrom(const MsgLangParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 language = 1 [default = 0];
  inline bool has_language() const;
  inline void clear_language();
  static const int kLanguageFieldNumber = 1;
  inline ::google::protobuf::uint32 language() const;
  inline void set_language(::google::protobuf::uint32 value);

  // optional string param = 2;
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline const ::std::string& param() const;
  inline void set_param(const ::std::string& value);
  inline void set_param(const char* value);
  inline void set_param(const char* value, size_t size);
  inline ::std::string* mutable_param();
  inline ::std::string* release_param();
  inline void set_allocated_param(::std::string* param);

  // @@protoc_insertion_point(class_scope:Cmd.MsgLangParam)
 private:
  inline void set_has_language();
  inline void clear_has_language();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* param_;
  ::google::protobuf::uint32 language_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static MsgLangParam* default_instance_;
};
// -------------------------------------------------------------------

class MsgParam : public ::google::protobuf::Message {
 public:
  MsgParam();
  virtual ~MsgParam();

  MsgParam(const MsgParam& from);

  inline MsgParam& operator=(const MsgParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgParam& default_instance();

  void Swap(MsgParam* other);

  // implements Message ----------------------------------------------

  MsgParam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgParam& from);
  void MergeFrom(const MsgParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string param = 1;
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 1;
  inline const ::std::string& param() const;
  inline void set_param(const ::std::string& value);
  inline void set_param(const char* value);
  inline void set_param(const char* value, size_t size);
  inline ::std::string* mutable_param();
  inline ::std::string* release_param();
  inline void set_allocated_param(::std::string* param);

  // repeated string subparams = 2;
  inline int subparams_size() const;
  inline void clear_subparams();
  static const int kSubparamsFieldNumber = 2;
  inline const ::std::string& subparams(int index) const;
  inline ::std::string* mutable_subparams(int index);
  inline void set_subparams(int index, const ::std::string& value);
  inline void set_subparams(int index, const char* value);
  inline void set_subparams(int index, const char* value, size_t size);
  inline ::std::string* add_subparams();
  inline void add_subparams(const ::std::string& value);
  inline void add_subparams(const char* value);
  inline void add_subparams(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& subparams() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_subparams();

  // repeated .Cmd.MsgLangParam langparams = 3;
  inline int langparams_size() const;
  inline void clear_langparams();
  static const int kLangparamsFieldNumber = 3;
  inline const ::Cmd::MsgLangParam& langparams(int index) const;
  inline ::Cmd::MsgLangParam* mutable_langparams(int index);
  inline ::Cmd::MsgLangParam* add_langparams();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::MsgLangParam >&
      langparams() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::MsgLangParam >*
      mutable_langparams();

  // @@protoc_insertion_point(class_scope:Cmd.MsgParam)
 private:
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* param_;
  ::google::protobuf::RepeatedPtrField< ::std::string> subparams_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::MsgLangParam > langparams_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static MsgParam* default_instance_;
};
// -------------------------------------------------------------------

class SysMsg : public ::google::protobuf::Message {
 public:
  SysMsg();
  virtual ~SysMsg();

  SysMsg(const SysMsg& from);

  inline SysMsg& operator=(const SysMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SysMsg& default_instance();

  void Swap(SysMsg* other);

  // implements Message ----------------------------------------------

  SysMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SysMsg& from);
  void MergeFrom(const SysMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SYSMSG];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional uint32 id = 3 [default = 0];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional .Cmd.EMessageType type = 4 [default = EMESSAGETYPE_MIN];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::Cmd::EMessageType type() const;
  inline void set_type(::Cmd::EMessageType value);

  // repeated .Cmd.MsgParam params = 5;
  inline int params_size() const;
  inline void clear_params();
  static const int kParamsFieldNumber = 5;
  inline const ::Cmd::MsgParam& params(int index) const;
  inline ::Cmd::MsgParam* mutable_params(int index);
  inline ::Cmd::MsgParam* add_params();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::MsgParam >&
      params() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::MsgParam >*
      mutable_params();

  // optional .Cmd.EMessageActOpt act = 6 [default = EMESSAGEACT_ADD];
  inline bool has_act() const;
  inline void clear_act();
  static const int kActFieldNumber = 6;
  inline ::Cmd::EMessageActOpt act() const;
  inline void set_act(::Cmd::EMessageActOpt value);

  // optional uint32 delay = 7 [default = 0];
  inline bool has_delay() const;
  inline void clear_delay();
  static const int kDelayFieldNumber = 7;
  inline ::google::protobuf::uint32 delay() const;
  inline void set_delay(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.SysMsg)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_act();
  inline void clear_has_act();
  inline void set_has_delay();
  inline void clear_has_delay();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 id_;
  int type_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::MsgParam > params_;
  int act_;
  ::google::protobuf::uint32 delay_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static SysMsg* default_instance_;
};
// -------------------------------------------------------------------

class NpcDataSync : public ::google::protobuf::Message {
 public:
  NpcDataSync();
  virtual ~NpcDataSync();

  NpcDataSync(const NpcDataSync& from);

  inline NpcDataSync& operator=(const NpcDataSync& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NpcDataSync& default_instance();

  void Swap(NpcDataSync* other);

  // implements Message ----------------------------------------------

  NpcDataSync* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NpcDataSync& from);
  void MergeFrom(const NpcDataSync& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_NPCDATASYNC];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional uint64 guid = 3 [default = 0];
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 3;
  inline ::google::protobuf::uint64 guid() const;
  inline void set_guid(::google::protobuf::uint64 value);

  // repeated .Cmd.UserAttr attrs = 4;
  inline int attrs_size() const;
  inline void clear_attrs();
  static const int kAttrsFieldNumber = 4;
  inline const ::Cmd::UserAttr& attrs(int index) const;
  inline ::Cmd::UserAttr* mutable_attrs(int index);
  inline ::Cmd::UserAttr* add_attrs();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::UserAttr >&
      attrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::UserAttr >*
      mutable_attrs();

  // repeated .Cmd.UserData datas = 5;
  inline int datas_size() const;
  inline void clear_datas();
  static const int kDatasFieldNumber = 5;
  inline const ::Cmd::UserData& datas(int index) const;
  inline ::Cmd::UserData* mutable_datas(int index);
  inline ::Cmd::UserData* add_datas();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::UserData >&
      datas() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::UserData >*
      mutable_datas();

  // @@protoc_insertion_point(class_scope:Cmd.NpcDataSync)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_guid();
  inline void clear_has_guid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 guid_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::UserAttr > attrs_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::UserData > datas_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static NpcDataSync* default_instance_;
};
// -------------------------------------------------------------------

class UserNineSyncCmd : public ::google::protobuf::Message {
 public:
  UserNineSyncCmd();
  virtual ~UserNineSyncCmd();

  UserNineSyncCmd(const UserNineSyncCmd& from);

  inline UserNineSyncCmd& operator=(const UserNineSyncCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserNineSyncCmd& default_instance();

  void Swap(UserNineSyncCmd* other);

  // implements Message ----------------------------------------------

  UserNineSyncCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserNineSyncCmd& from);
  void MergeFrom(const UserNineSyncCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_USERNINESYNC];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional uint64 guid = 3 [default = 0];
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 3;
  inline ::google::protobuf::uint64 guid() const;
  inline void set_guid(::google::protobuf::uint64 value);

  // repeated .Cmd.UserData datas = 4;
  inline int datas_size() const;
  inline void clear_datas();
  static const int kDatasFieldNumber = 4;
  inline const ::Cmd::UserData& datas(int index) const;
  inline ::Cmd::UserData* mutable_datas(int index);
  inline ::Cmd::UserData* add_datas();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::UserData >&
      datas() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::UserData >*
      mutable_datas();

  // repeated .Cmd.UserAttr attrs = 5;
  inline int attrs_size() const;
  inline void clear_attrs();
  static const int kAttrsFieldNumber = 5;
  inline const ::Cmd::UserAttr& attrs(int index) const;
  inline ::Cmd::UserAttr* mutable_attrs(int index);
  inline ::Cmd::UserAttr* add_attrs();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::UserAttr >&
      attrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::UserAttr >*
      mutable_attrs();

  // @@protoc_insertion_point(class_scope:Cmd.UserNineSyncCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_guid();
  inline void clear_has_guid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 guid_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::UserData > datas_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::UserAttr > attrs_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static UserNineSyncCmd* default_instance_;
};
// -------------------------------------------------------------------

class UserActionNtf : public ::google::protobuf::Message {
 public:
  UserActionNtf();
  virtual ~UserActionNtf();

  UserActionNtf(const UserActionNtf& from);

  inline UserActionNtf& operator=(const UserActionNtf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserActionNtf& default_instance();

  void Swap(UserActionNtf* other);

  // implements Message ----------------------------------------------

  UserActionNtf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserActionNtf& from);
  void MergeFrom(const UserActionNtf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_ACTION];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional uint64 charid = 3 [default = 0];
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 3;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional uint64 value = 5 [default = 0];
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 5;
  inline ::google::protobuf::uint64 value() const;
  inline void set_value(::google::protobuf::uint64 value);

  // optional .Cmd.EUserActionType type = 4 [default = EUSERACTIONTYPE_MIN];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::Cmd::EUserActionType type() const;
  inline void set_type(::Cmd::EUserActionType value);

  // optional uint32 delay = 6 [default = 0];
  inline bool has_delay() const;
  inline void clear_delay();
  static const int kDelayFieldNumber = 6;
  inline ::google::protobuf::uint32 delay() const;
  inline void set_delay(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.UserActionNtf)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_delay();
  inline void clear_has_delay();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 charid_;
  ::google::protobuf::uint64 value_;
  int type_;
  ::google::protobuf::uint32 delay_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static UserActionNtf* default_instance_;
};
// -------------------------------------------------------------------

class BufferData : public ::google::protobuf::Message {
 public:
  BufferData();
  virtual ~BufferData();

  BufferData(const BufferData& from);

  inline BufferData& operator=(const BufferData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BufferData& default_instance();

  void Swap(BufferData* other);

  // implements Message ----------------------------------------------

  BufferData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BufferData& from);
  void MergeFrom(const BufferData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1 [default = 0];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 layer = 2 [default = 0];
  inline bool has_layer() const;
  inline void clear_layer();
  static const int kLayerFieldNumber = 2;
  inline ::google::protobuf::uint32 layer() const;
  inline void set_layer(::google::protobuf::uint32 value);

  // optional uint64 time = 3 [default = 0];
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::uint64 time() const;
  inline void set_time(::google::protobuf::uint64 value);

  // optional bool active = 4 [default = true];
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 4;
  inline bool active() const;
  inline void set_active(bool value);

  // optional string fromname = 5;
  inline bool has_fromname() const;
  inline void clear_fromname();
  static const int kFromnameFieldNumber = 5;
  inline const ::std::string& fromname() const;
  inline void set_fromname(const ::std::string& value);
  inline void set_fromname(const char* value);
  inline void set_fromname(const char* value, size_t size);
  inline ::std::string* mutable_fromname();
  inline ::std::string* release_fromname();
  inline void set_allocated_fromname(::std::string* fromname);

  // optional uint64 fromid = 6 [default = 0];
  inline bool has_fromid() const;
  inline void clear_fromid();
  static const int kFromidFieldNumber = 6;
  inline ::google::protobuf::uint64 fromid() const;
  inline void set_fromid(::google::protobuf::uint64 value);

  // optional uint32 level = 7 [default = 0];
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 7;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.BufferData)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_layer();
  inline void clear_has_layer();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_active();
  inline void clear_has_active();
  inline void set_has_fromname();
  inline void clear_has_fromname();
  inline void set_has_fromid();
  inline void clear_has_fromid();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 layer_;
  ::google::protobuf::uint64 time_;
  ::std::string* fromname_;
  bool active_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint64 fromid_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static BufferData* default_instance_;
};
// -------------------------------------------------------------------

class UserBuffNineSyncCmd : public ::google::protobuf::Message {
 public:
  UserBuffNineSyncCmd();
  virtual ~UserBuffNineSyncCmd();

  UserBuffNineSyncCmd(const UserBuffNineSyncCmd& from);

  inline UserBuffNineSyncCmd& operator=(const UserBuffNineSyncCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserBuffNineSyncCmd& default_instance();

  void Swap(UserBuffNineSyncCmd* other);

  // implements Message ----------------------------------------------

  UserBuffNineSyncCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserBuffNineSyncCmd& from);
  void MergeFrom(const UserBuffNineSyncCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_BUFFERSYNC];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional uint64 guid = 3 [default = 0];
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 3;
  inline ::google::protobuf::uint64 guid() const;
  inline void set_guid(::google::protobuf::uint64 value);

  // repeated .Cmd.BufferData updates = 4;
  inline int updates_size() const;
  inline void clear_updates();
  static const int kUpdatesFieldNumber = 4;
  inline const ::Cmd::BufferData& updates(int index) const;
  inline ::Cmd::BufferData* mutable_updates(int index);
  inline ::Cmd::BufferData* add_updates();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::BufferData >&
      updates() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::BufferData >*
      mutable_updates();

  // repeated uint32 dels = 5;
  inline int dels_size() const;
  inline void clear_dels();
  static const int kDelsFieldNumber = 5;
  inline ::google::protobuf::uint32 dels(int index) const;
  inline void set_dels(int index, ::google::protobuf::uint32 value);
  inline void add_dels(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      dels() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_dels();

  // @@protoc_insertion_point(class_scope:Cmd.UserBuffNineSyncCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_guid();
  inline void clear_has_guid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 guid_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::BufferData > updates_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > dels_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static UserBuffNineSyncCmd* default_instance_;
};
// -------------------------------------------------------------------

class ExitPosUserCmd : public ::google::protobuf::Message {
 public:
  ExitPosUserCmd();
  virtual ~ExitPosUserCmd();

  ExitPosUserCmd(const ExitPosUserCmd& from);

  inline ExitPosUserCmd& operator=(const ExitPosUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExitPosUserCmd& default_instance();

  void Swap(ExitPosUserCmd* other);

  // implements Message ----------------------------------------------

  ExitPosUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExitPosUserCmd& from);
  void MergeFrom(const ExitPosUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_EXIT_POS];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional .Cmd.ScenePos pos = 3;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 3;
  inline const ::Cmd::ScenePos& pos() const;
  inline ::Cmd::ScenePos* mutable_pos();
  inline ::Cmd::ScenePos* release_pos();
  inline void set_allocated_pos(::Cmd::ScenePos* pos);

  // optional uint32 exitid = 4;
  inline bool has_exitid() const;
  inline void clear_exitid();
  static const int kExitidFieldNumber = 4;
  inline ::google::protobuf::uint32 exitid() const;
  inline void set_exitid(::google::protobuf::uint32 value);

  // optional uint32 mapid = 5;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapidFieldNumber = 5;
  inline ::google::protobuf::uint32 mapid() const;
  inline void set_mapid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.ExitPosUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_exitid();
  inline void clear_has_exitid();
  inline void set_has_mapid();
  inline void clear_has_mapid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::Cmd::ScenePos* pos_;
  ::google::protobuf::uint32 exitid_;
  ::google::protobuf::uint32 mapid_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static ExitPosUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class Relive : public ::google::protobuf::Message {
 public:
  Relive();
  virtual ~Relive();

  Relive(const Relive& from);

  inline Relive& operator=(const Relive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Relive& default_instance();

  void Swap(Relive* other);

  // implements Message ----------------------------------------------

  Relive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Relive& from);
  void MergeFrom(const Relive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_RELIVE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional .Cmd.EReliveType type = 3 [default = ERELIVETYPE_MIN];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::Cmd::EReliveType type() const;
  inline void set_type(::Cmd::EReliveType value);

  // @@protoc_insertion_point(class_scope:Cmd.Relive)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  int type_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static Relive* default_instance_;
};
// -------------------------------------------------------------------

class VarUpdate : public ::google::protobuf::Message {
 public:
  VarUpdate();
  virtual ~VarUpdate();

  VarUpdate(const VarUpdate& from);

  inline VarUpdate& operator=(const VarUpdate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VarUpdate& default_instance();

  void Swap(VarUpdate* other);

  // implements Message ----------------------------------------------

  VarUpdate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VarUpdate& from);
  void MergeFrom(const VarUpdate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_VAR];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // repeated .Cmd.Var vars = 3;
  inline int vars_size() const;
  inline void clear_vars();
  static const int kVarsFieldNumber = 3;
  inline const ::Cmd::Var& vars(int index) const;
  inline ::Cmd::Var* mutable_vars(int index);
  inline ::Cmd::Var* add_vars();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::Var >&
      vars() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::Var >*
      mutable_vars();

  // @@protoc_insertion_point(class_scope:Cmd.VarUpdate)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::Var > vars_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static VarUpdate* default_instance_;
};
// -------------------------------------------------------------------

class TalkInfo : public ::google::protobuf::Message {
 public:
  TalkInfo();
  virtual ~TalkInfo();

  TalkInfo(const TalkInfo& from);

  inline TalkInfo& operator=(const TalkInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TalkInfo& default_instance();

  void Swap(TalkInfo* other);

  // implements Message ----------------------------------------------

  TalkInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TalkInfo& from);
  void MergeFrom(const TalkInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_TALKINFO];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional uint64 guid = 3 [default = 0];
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 3;
  inline ::google::protobuf::uint64 guid() const;
  inline void set_guid(::google::protobuf::uint64 value);

  // optional uint32 talkid = 4;
  inline bool has_talkid() const;
  inline void clear_talkid();
  static const int kTalkidFieldNumber = 4;
  inline ::google::protobuf::uint32 talkid() const;
  inline void set_talkid(::google::protobuf::uint32 value);

  // optional string talkmessage = 5;
  inline bool has_talkmessage() const;
  inline void clear_talkmessage();
  static const int kTalkmessageFieldNumber = 5;
  inline const ::std::string& talkmessage() const;
  inline void set_talkmessage(const ::std::string& value);
  inline void set_talkmessage(const char* value);
  inline void set_talkmessage(const char* value, size_t size);
  inline ::std::string* mutable_talkmessage();
  inline ::std::string* release_talkmessage();
  inline void set_allocated_talkmessage(::std::string* talkmessage);

  // repeated .Cmd.MsgParam params = 6;
  inline int params_size() const;
  inline void clear_params();
  static const int kParamsFieldNumber = 6;
  inline const ::Cmd::MsgParam& params(int index) const;
  inline ::Cmd::MsgParam* mutable_params(int index);
  inline ::Cmd::MsgParam* add_params();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::MsgParam >&
      params() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::MsgParam >*
      mutable_params();

  // @@protoc_insertion_point(class_scope:Cmd.TalkInfo)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_talkid();
  inline void clear_has_talkid();
  inline void set_has_talkmessage();
  inline void clear_has_talkmessage();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 guid_;
  ::std::string* talkmessage_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::MsgParam > params_;
  ::google::protobuf::uint32 talkid_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static TalkInfo* default_instance_;
};
// -------------------------------------------------------------------

class ServerTime : public ::google::protobuf::Message {
 public:
  ServerTime();
  virtual ~ServerTime();

  ServerTime(const ServerTime& from);

  inline ServerTime& operator=(const ServerTime& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerTime& default_instance();

  void Swap(ServerTime* other);

  // implements Message ----------------------------------------------

  ServerTime* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerTime& from);
  void MergeFrom(const ServerTime& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SERVERTIME];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional uint64 time = 3 [default = 0];
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::uint64 time() const;
  inline void set_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.ServerTime)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 time_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static ServerTime* default_instance_;
};
// -------------------------------------------------------------------

class EffectUserCmd : public ::google::protobuf::Message {
 public:
  EffectUserCmd();
  virtual ~EffectUserCmd();

  EffectUserCmd(const EffectUserCmd& from);

  inline EffectUserCmd& operator=(const EffectUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EffectUserCmd& default_instance();

  void Swap(EffectUserCmd* other);

  // implements Message ----------------------------------------------

  EffectUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EffectUserCmd& from);
  void MergeFrom(const EffectUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_EFFECT];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional .Cmd.EEffectType effecttype = 3 [default = EEFFECTTYPE_NORMAL];
  inline bool has_effecttype() const;
  inline void clear_effecttype();
  static const int kEffecttypeFieldNumber = 3;
  inline ::Cmd::EEffectType effecttype() const;
  inline void set_effecttype(::Cmd::EEffectType value);

  // optional uint64 charid = 4;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 4;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional uint32 effectpos = 5;
  inline bool has_effectpos() const;
  inline void clear_effectpos();
  static const int kEffectposFieldNumber = 5;
  inline ::google::protobuf::uint32 effectpos() const;
  inline void set_effectpos(::google::protobuf::uint32 value);

  // optional .Cmd.ScenePos pos = 6;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 6;
  inline const ::Cmd::ScenePos& pos() const;
  inline ::Cmd::ScenePos* mutable_pos();
  inline ::Cmd::ScenePos* release_pos();
  inline void set_allocated_pos(::Cmd::ScenePos* pos);

  // optional string effect = 7;
  inline bool has_effect() const;
  inline void clear_effect();
  static const int kEffectFieldNumber = 7;
  inline const ::std::string& effect() const;
  inline void set_effect(const ::std::string& value);
  inline void set_effect(const char* value);
  inline void set_effect(const char* value, size_t size);
  inline ::std::string* mutable_effect();
  inline ::std::string* release_effect();
  inline void set_allocated_effect(::std::string* effect);

  // optional uint32 msec = 8 [default = 0];
  inline bool has_msec() const;
  inline void clear_msec();
  static const int kMsecFieldNumber = 8;
  inline ::google::protobuf::uint32 msec() const;
  inline void set_msec(::google::protobuf::uint32 value);

  // optional uint32 times = 9 [default = 1];
  inline bool has_times() const;
  inline void clear_times();
  static const int kTimesFieldNumber = 9;
  inline ::google::protobuf::uint32 times() const;
  inline void set_times(::google::protobuf::uint32 value);

  // optional uint32 index = 10 [default = 1];
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 10;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // optional .Cmd.EEffectOpt opt = 11 [default = EEFFECTOPT_PLAY];
  inline bool has_opt() const;
  inline void clear_opt();
  static const int kOptFieldNumber = 11;
  inline ::Cmd::EEffectOpt opt() const;
  inline void set_opt(::Cmd::EEffectOpt value);

  // optional bool posbind = 12 [default = false];
  inline bool has_posbind() const;
  inline void clear_posbind();
  static const int kPosbindFieldNumber = 12;
  inline bool posbind() const;
  inline void set_posbind(bool value);

  // optional bool epbind = 13 [default = false];
  inline bool has_epbind() const;
  inline void clear_epbind();
  static const int kEpbindFieldNumber = 13;
  inline bool epbind() const;
  inline void set_epbind(bool value);

  // optional uint32 delay = 14 [default = 0];
  inline bool has_delay() const;
  inline void clear_delay();
  static const int kDelayFieldNumber = 14;
  inline ::google::protobuf::uint32 delay() const;
  inline void set_delay(::google::protobuf::uint32 value);

  // optional uint64 id = 15 [default = 0];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 15;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional uint32 dir = 16;
  inline bool has_dir() const;
  inline void clear_dir();
  static const int kDirFieldNumber = 16;
  inline ::google::protobuf::uint32 dir() const;
  inline void set_dir(::google::protobuf::uint32 value);

  // optional uint32 skillid = 17 [default = 0];
  inline bool has_skillid() const;
  inline void clear_skillid();
  static const int kSkillidFieldNumber = 17;
  inline ::google::protobuf::uint32 skillid() const;
  inline void set_skillid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.EffectUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_effecttype();
  inline void clear_has_effecttype();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_effectpos();
  inline void clear_has_effectpos();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_effect();
  inline void clear_has_effect();
  inline void set_has_msec();
  inline void clear_has_msec();
  inline void set_has_times();
  inline void clear_has_times();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_opt();
  inline void clear_has_opt();
  inline void set_has_posbind();
  inline void clear_has_posbind();
  inline void set_has_epbind();
  inline void clear_has_epbind();
  inline void set_has_delay();
  inline void clear_has_delay();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_dir();
  inline void clear_has_dir();
  inline void set_has_skillid();
  inline void clear_has_skillid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 charid_;
  int effecttype_;
  ::google::protobuf::uint32 effectpos_;
  ::Cmd::ScenePos* pos_;
  ::std::string* effect_;
  ::google::protobuf::uint32 msec_;
  ::google::protobuf::uint32 times_;
  ::google::protobuf::uint32 index_;
  int opt_;
  bool posbind_;
  bool epbind_;
  ::google::protobuf::uint32 delay_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint32 dir_;
  ::google::protobuf::uint32 skillid_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static EffectUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class MenuList : public ::google::protobuf::Message {
 public:
  MenuList();
  virtual ~MenuList();

  MenuList(const MenuList& from);

  inline MenuList& operator=(const MenuList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MenuList& default_instance();

  void Swap(MenuList* other);

  // implements Message ----------------------------------------------

  MenuList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MenuList& from);
  void MergeFrom(const MenuList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_MENU];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // repeated uint32 list = 3;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 3;
  inline ::google::protobuf::uint32 list(int index) const;
  inline void set_list(int index, ::google::protobuf::uint32 value);
  inline void add_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_list();

  // repeated uint32 dellist = 4;
  inline int dellist_size() const;
  inline void clear_dellist();
  static const int kDellistFieldNumber = 4;
  inline ::google::protobuf::uint32 dellist(int index) const;
  inline void set_dellist(int index, ::google::protobuf::uint32 value);
  inline void add_dellist(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      dellist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_dellist();

  // @@protoc_insertion_point(class_scope:Cmd.MenuList)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > list_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > dellist_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static MenuList* default_instance_;
};
// -------------------------------------------------------------------

class NewMenu : public ::google::protobuf::Message {
 public:
  NewMenu();
  virtual ~NewMenu();

  NewMenu(const NewMenu& from);

  inline NewMenu& operator=(const NewMenu& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NewMenu& default_instance();

  void Swap(NewMenu* other);

  // implements Message ----------------------------------------------

  NewMenu* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NewMenu& from);
  void MergeFrom(const NewMenu& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_NEWMENU];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional bool animplay = 3 [default = true];
  inline bool has_animplay() const;
  inline void clear_animplay();
  static const int kAnimplayFieldNumber = 3;
  inline bool animplay() const;
  inline void set_animplay(bool value);

  // repeated uint32 list = 4;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 4;
  inline ::google::protobuf::uint32 list(int index) const;
  inline void set_list(int index, ::google::protobuf::uint32 value);
  inline void add_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_list();

  // @@protoc_insertion_point(class_scope:Cmd.NewMenu)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_animplay();
  inline void clear_has_animplay();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > list_;
  bool animplay_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static NewMenu* default_instance_;
};
// -------------------------------------------------------------------

class TeamInfoNine : public ::google::protobuf::Message {
 public:
  TeamInfoNine();
  virtual ~TeamInfoNine();

  TeamInfoNine(const TeamInfoNine& from);

  inline TeamInfoNine& operator=(const TeamInfoNine& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamInfoNine& default_instance();

  void Swap(TeamInfoNine* other);

  // implements Message ----------------------------------------------

  TeamInfoNine* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TeamInfoNine& from);
  void MergeFrom(const TeamInfoNine& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_TEAMINFONINE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional uint64 userid = 3 [default = 0];
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 3;
  inline ::google::protobuf::uint64 userid() const;
  inline void set_userid(::google::protobuf::uint64 value);

  // optional uint32 id = 4 [default = 0];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 4;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional string name = 5;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 5;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:Cmd.TeamInfoNine)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 userid_;
  ::std::string* name_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static TeamInfoNine* default_instance_;
};
// -------------------------------------------------------------------

class UsePortrait : public ::google::protobuf::Message {
 public:
  UsePortrait();
  virtual ~UsePortrait();

  UsePortrait(const UsePortrait& from);

  inline UsePortrait& operator=(const UsePortrait& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UsePortrait& default_instance();

  void Swap(UsePortrait* other);

  // implements Message ----------------------------------------------

  UsePortrait* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UsePortrait& from);
  void MergeFrom(const UsePortrait& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_USEPORTRAIT];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional uint32 id = 3 [default = 0];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.UsePortrait)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static UsePortrait* default_instance_;
};
// -------------------------------------------------------------------

class UseFrame : public ::google::protobuf::Message {
 public:
  UseFrame();
  virtual ~UseFrame();

  UseFrame(const UseFrame& from);

  inline UseFrame& operator=(const UseFrame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UseFrame& default_instance();

  void Swap(UseFrame* other);

  // implements Message ----------------------------------------------

  UseFrame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UseFrame& from);
  void MergeFrom(const UseFrame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_USEFRAME];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional uint32 id = 3 [default = 0];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.UseFrame)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static UseFrame* default_instance_;
};
// -------------------------------------------------------------------

class NewPortraitFrame : public ::google::protobuf::Message {
 public:
  NewPortraitFrame();
  virtual ~NewPortraitFrame();

  NewPortraitFrame(const NewPortraitFrame& from);

  inline NewPortraitFrame& operator=(const NewPortraitFrame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NewPortraitFrame& default_instance();

  void Swap(NewPortraitFrame* other);

  // implements Message ----------------------------------------------

  NewPortraitFrame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NewPortraitFrame& from);
  void MergeFrom(const NewPortraitFrame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_NEWPORTRAITFRAME];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // repeated uint32 portrait = 3;
  inline int portrait_size() const;
  inline void clear_portrait();
  static const int kPortraitFieldNumber = 3;
  inline ::google::protobuf::uint32 portrait(int index) const;
  inline void set_portrait(int index, ::google::protobuf::uint32 value);
  inline void add_portrait(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      portrait() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_portrait();

  // repeated uint32 frame = 4;
  inline int frame_size() const;
  inline void clear_frame();
  static const int kFrameFieldNumber = 4;
  inline ::google::protobuf::uint32 frame(int index) const;
  inline void set_frame(int index, ::google::protobuf::uint32 value);
  inline void add_frame(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      frame() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_frame();

  // @@protoc_insertion_point(class_scope:Cmd.NewPortraitFrame)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > portrait_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > frame_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static NewPortraitFrame* default_instance_;
};
// -------------------------------------------------------------------

class QueryPortraitListUserCmd : public ::google::protobuf::Message {
 public:
  QueryPortraitListUserCmd();
  virtual ~QueryPortraitListUserCmd();

  QueryPortraitListUserCmd(const QueryPortraitListUserCmd& from);

  inline QueryPortraitListUserCmd& operator=(const QueryPortraitListUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryPortraitListUserCmd& default_instance();

  void Swap(QueryPortraitListUserCmd* other);

  // implements Message ----------------------------------------------

  QueryPortraitListUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryPortraitListUserCmd& from);
  void MergeFrom(const QueryPortraitListUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_QUERYPORTRAITLIST];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // repeated uint32 portrait = 3;
  inline int portrait_size() const;
  inline void clear_portrait();
  static const int kPortraitFieldNumber = 3;
  inline ::google::protobuf::uint32 portrait(int index) const;
  inline void set_portrait(int index, ::google::protobuf::uint32 value);
  inline void add_portrait(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      portrait() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_portrait();

  // @@protoc_insertion_point(class_scope:Cmd.QueryPortraitListUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > portrait_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static QueryPortraitListUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class UseDressing : public ::google::protobuf::Message {
 public:
  UseDressing();
  virtual ~UseDressing();

  UseDressing(const UseDressing& from);

  inline UseDressing& operator=(const UseDressing& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UseDressing& default_instance();

  void Swap(UseDressing* other);

  // implements Message ----------------------------------------------

  UseDressing* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UseDressing& from);
  void MergeFrom(const UseDressing& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_USEDRESSING];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional uint32 id = 3 [default = 0];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint64 charid = 4 [default = 0];
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 4;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional .Cmd.EDressType type = 5 [default = EDRESSTYPE_MIN];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 5;
  inline ::Cmd::EDressType type() const;
  inline void set_type(::Cmd::EDressType value);

  // @@protoc_insertion_point(class_scope:Cmd.UseDressing)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 charid_;
  ::google::protobuf::uint32 id_;
  int type_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static UseDressing* default_instance_;
};
// -------------------------------------------------------------------

class NewDressing : public ::google::protobuf::Message {
 public:
  NewDressing();
  virtual ~NewDressing();

  NewDressing(const NewDressing& from);

  inline NewDressing& operator=(const NewDressing& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NewDressing& default_instance();

  void Swap(NewDressing* other);

  // implements Message ----------------------------------------------

  NewDressing* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NewDressing& from);
  void MergeFrom(const NewDressing& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_NEWDRESSING];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional .Cmd.EDressType type = 3 [default = EDRESSTYPE_MIN];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::Cmd::EDressType type() const;
  inline void set_type(::Cmd::EDressType value);

  // repeated uint32 dressids = 4;
  inline int dressids_size() const;
  inline void clear_dressids();
  static const int kDressidsFieldNumber = 4;
  inline ::google::protobuf::uint32 dressids(int index) const;
  inline void set_dressids(int index, ::google::protobuf::uint32 value);
  inline void add_dressids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      dressids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_dressids();

  // @@protoc_insertion_point(class_scope:Cmd.NewDressing)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > dressids_;
  int type_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static NewDressing* default_instance_;
};
// -------------------------------------------------------------------

class DressingListUserCmd : public ::google::protobuf::Message {
 public:
  DressingListUserCmd();
  virtual ~DressingListUserCmd();

  DressingListUserCmd(const DressingListUserCmd& from);

  inline DressingListUserCmd& operator=(const DressingListUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DressingListUserCmd& default_instance();

  void Swap(DressingListUserCmd* other);

  // implements Message ----------------------------------------------

  DressingListUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DressingListUserCmd& from);
  void MergeFrom(const DressingListUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_DRESSINGLIST];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional .Cmd.EDressType type = 3 [default = EDRESSTYPE_MIN];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::Cmd::EDressType type() const;
  inline void set_type(::Cmd::EDressType value);

  // repeated uint32 dressids = 4;
  inline int dressids_size() const;
  inline void clear_dressids();
  static const int kDressidsFieldNumber = 4;
  inline ::google::protobuf::uint32 dressids(int index) const;
  inline void set_dressids(int index, ::google::protobuf::uint32 value);
  inline void add_dressids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      dressids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_dressids();

  // @@protoc_insertion_point(class_scope:Cmd.DressingListUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > dressids_;
  int type_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static DressingListUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class AddAttrPoint : public ::google::protobuf::Message {
 public:
  AddAttrPoint();
  virtual ~AddAttrPoint();

  AddAttrPoint(const AddAttrPoint& from);

  inline AddAttrPoint& operator=(const AddAttrPoint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddAttrPoint& default_instance();

  void Swap(AddAttrPoint* other);

  // implements Message ----------------------------------------------

  AddAttrPoint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddAttrPoint& from);
  void MergeFrom(const AddAttrPoint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_ADDATTRPOINT];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional .Cmd.PointType type = 3 [default = POINTTYPE_ADD];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::Cmd::PointType type() const;
  inline void set_type(::Cmd::PointType value);

  // optional uint32 strpoint = 4 [default = 0];
  inline bool has_strpoint() const;
  inline void clear_strpoint();
  static const int kStrpointFieldNumber = 4;
  inline ::google::protobuf::uint32 strpoint() const;
  inline void set_strpoint(::google::protobuf::uint32 value);

  // optional uint32 intpoint = 5 [default = 0];
  inline bool has_intpoint() const;
  inline void clear_intpoint();
  static const int kIntpointFieldNumber = 5;
  inline ::google::protobuf::uint32 intpoint() const;
  inline void set_intpoint(::google::protobuf::uint32 value);

  // optional uint32 agipoint = 6 [default = 0];
  inline bool has_agipoint() const;
  inline void clear_agipoint();
  static const int kAgipointFieldNumber = 6;
  inline ::google::protobuf::uint32 agipoint() const;
  inline void set_agipoint(::google::protobuf::uint32 value);

  // optional uint32 dexpoint = 7 [default = 0];
  inline bool has_dexpoint() const;
  inline void clear_dexpoint();
  static const int kDexpointFieldNumber = 7;
  inline ::google::protobuf::uint32 dexpoint() const;
  inline void set_dexpoint(::google::protobuf::uint32 value);

  // optional uint32 vitpoint = 8 [default = 0];
  inline bool has_vitpoint() const;
  inline void clear_vitpoint();
  static const int kVitpointFieldNumber = 8;
  inline ::google::protobuf::uint32 vitpoint() const;
  inline void set_vitpoint(::google::protobuf::uint32 value);

  // optional uint32 lukpoint = 9 [default = 0];
  inline bool has_lukpoint() const;
  inline void clear_lukpoint();
  static const int kLukpointFieldNumber = 9;
  inline ::google::protobuf::uint32 lukpoint() const;
  inline void set_lukpoint(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.AddAttrPoint)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_strpoint();
  inline void clear_has_strpoint();
  inline void set_has_intpoint();
  inline void clear_has_intpoint();
  inline void set_has_agipoint();
  inline void clear_has_agipoint();
  inline void set_has_dexpoint();
  inline void clear_has_dexpoint();
  inline void set_has_vitpoint();
  inline void clear_has_vitpoint();
  inline void set_has_lukpoint();
  inline void clear_has_lukpoint();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  int type_;
  ::google::protobuf::uint32 strpoint_;
  ::google::protobuf::uint32 intpoint_;
  ::google::protobuf::uint32 agipoint_;
  ::google::protobuf::uint32 dexpoint_;
  ::google::protobuf::uint32 vitpoint_;
  ::google::protobuf::uint32 lukpoint_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static AddAttrPoint* default_instance_;
};
// -------------------------------------------------------------------

class ShopGotItem : public ::google::protobuf::Message {
 public:
  ShopGotItem();
  virtual ~ShopGotItem();

  ShopGotItem(const ShopGotItem& from);

  inline ShopGotItem& operator=(const ShopGotItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShopGotItem& default_instance();

  void Swap(ShopGotItem* other);

  // implements Message ----------------------------------------------

  ShopGotItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ShopGotItem& from);
  void MergeFrom(const ShopGotItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1 [default = 0];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 count = 2 [default = 0];
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.ShopGotItem)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 count_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static ShopGotItem* default_instance_;
};
// -------------------------------------------------------------------

class QueryShopGotItem : public ::google::protobuf::Message {
 public:
  QueryShopGotItem();
  virtual ~QueryShopGotItem();

  QueryShopGotItem(const QueryShopGotItem& from);

  inline QueryShopGotItem& operator=(const QueryShopGotItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryShopGotItem& default_instance();

  void Swap(QueryShopGotItem* other);

  // implements Message ----------------------------------------------

  QueryShopGotItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryShopGotItem& from);
  void MergeFrom(const QueryShopGotItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_QUERYSHOPGOTITEM];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // repeated .Cmd.ShopGotItem items = 3;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 3;
  inline const ::Cmd::ShopGotItem& items(int index) const;
  inline ::Cmd::ShopGotItem* mutable_items(int index);
  inline ::Cmd::ShopGotItem* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ShopGotItem >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::ShopGotItem >*
      mutable_items();

  // repeated .Cmd.ShopGotItem discountitems = 4;
  inline int discountitems_size() const;
  inline void clear_discountitems();
  static const int kDiscountitemsFieldNumber = 4;
  inline const ::Cmd::ShopGotItem& discountitems(int index) const;
  inline ::Cmd::ShopGotItem* mutable_discountitems(int index);
  inline ::Cmd::ShopGotItem* add_discountitems();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ShopGotItem >&
      discountitems() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::ShopGotItem >*
      mutable_discountitems();

  // repeated .Cmd.ShopGotItem limititems = 5;
  inline int limititems_size() const;
  inline void clear_limititems();
  static const int kLimititemsFieldNumber = 5;
  inline const ::Cmd::ShopGotItem& limititems(int index) const;
  inline ::Cmd::ShopGotItem* mutable_limititems(int index);
  inline ::Cmd::ShopGotItem* add_limititems();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ShopGotItem >&
      limititems() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::ShopGotItem >*
      mutable_limititems();

  // @@protoc_insertion_point(class_scope:Cmd.QueryShopGotItem)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::ShopGotItem > items_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::ShopGotItem > discountitems_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::ShopGotItem > limititems_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static QueryShopGotItem* default_instance_;
};
// -------------------------------------------------------------------

class UpdateShopGotItem : public ::google::protobuf::Message {
 public:
  UpdateShopGotItem();
  virtual ~UpdateShopGotItem();

  UpdateShopGotItem(const UpdateShopGotItem& from);

  inline UpdateShopGotItem& operator=(const UpdateShopGotItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateShopGotItem& default_instance();

  void Swap(UpdateShopGotItem* other);

  // implements Message ----------------------------------------------

  UpdateShopGotItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateShopGotItem& from);
  void MergeFrom(const UpdateShopGotItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_UPDATESHOPGOTITEM];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional .Cmd.ShopGotItem item = 3;
  inline bool has_item() const;
  inline void clear_item();
  static const int kItemFieldNumber = 3;
  inline const ::Cmd::ShopGotItem& item() const;
  inline ::Cmd::ShopGotItem* mutable_item();
  inline ::Cmd::ShopGotItem* release_item();
  inline void set_allocated_item(::Cmd::ShopGotItem* item);

  // optional .Cmd.ShopGotItem discountitem = 4;
  inline bool has_discountitem() const;
  inline void clear_discountitem();
  static const int kDiscountitemFieldNumber = 4;
  inline const ::Cmd::ShopGotItem& discountitem() const;
  inline ::Cmd::ShopGotItem* mutable_discountitem();
  inline ::Cmd::ShopGotItem* release_discountitem();
  inline void set_allocated_discountitem(::Cmd::ShopGotItem* discountitem);

  // optional .Cmd.ShopGotItem limititem = 5;
  inline bool has_limititem() const;
  inline void clear_limititem();
  static const int kLimititemFieldNumber = 5;
  inline const ::Cmd::ShopGotItem& limititem() const;
  inline ::Cmd::ShopGotItem* mutable_limititem();
  inline ::Cmd::ShopGotItem* release_limititem();
  inline void set_allocated_limititem(::Cmd::ShopGotItem* limititem);

  // @@protoc_insertion_point(class_scope:Cmd.UpdateShopGotItem)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_item();
  inline void clear_has_item();
  inline void set_has_discountitem();
  inline void clear_has_discountitem();
  inline void set_has_limititem();
  inline void clear_has_limititem();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::Cmd::ShopGotItem* item_;
  ::Cmd::ShopGotItem* discountitem_;
  ::Cmd::ShopGotItem* limititem_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static UpdateShopGotItem* default_instance_;
};
// -------------------------------------------------------------------

class OpenUI : public ::google::protobuf::Message {
 public:
  OpenUI();
  virtual ~OpenUI();

  OpenUI(const OpenUI& from);

  inline OpenUI& operator=(const OpenUI& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OpenUI& default_instance();

  void Swap(OpenUI* other);

  // implements Message ----------------------------------------------

  OpenUI* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OpenUI& from);
  void MergeFrom(const OpenUI& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_OPENUI];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional uint32 id = 3 [default = 0];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 ui = 4 [default = 0];
  inline bool has_ui() const;
  inline void clear_ui();
  static const int kUiFieldNumber = 4;
  inline ::google::protobuf::uint32 ui() const;
  inline void set_ui(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.OpenUI)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_ui();
  inline void clear_has_ui();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 ui_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static OpenUI* default_instance_;
};
// -------------------------------------------------------------------

class DbgSysMsg : public ::google::protobuf::Message {
 public:
  DbgSysMsg();
  virtual ~DbgSysMsg();

  DbgSysMsg(const DbgSysMsg& from);

  inline DbgSysMsg& operator=(const DbgSysMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DbgSysMsg& default_instance();

  void Swap(DbgSysMsg* other);

  // implements Message ----------------------------------------------

  DbgSysMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DbgSysMsg& from);
  void MergeFrom(const DbgSysMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_DBGSYSMSG];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // required .Cmd.EDbgMsgType type = 3 [default = EDBGMSGTYPE_MIN];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::Cmd::EDbgMsgType type() const;
  inline void set_type(::Cmd::EDbgMsgType value);

  // required string content = 4;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 4;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:Cmd.DbgSysMsg)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::std::string* content_;
  int type_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static DbgSysMsg* default_instance_;
};
// -------------------------------------------------------------------

class FollowTransferCmd : public ::google::protobuf::Message {
 public:
  FollowTransferCmd();
  virtual ~FollowTransferCmd();

  FollowTransferCmd(const FollowTransferCmd& from);

  inline FollowTransferCmd& operator=(const FollowTransferCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FollowTransferCmd& default_instance();

  void Swap(FollowTransferCmd* other);

  // implements Message ----------------------------------------------

  FollowTransferCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FollowTransferCmd& from);
  void MergeFrom(const FollowTransferCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_FOLLOWTRANSFER];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional uint64 targetId = 3;
  inline bool has_targetid() const;
  inline void clear_targetid();
  static const int kTargetIdFieldNumber = 3;
  inline ::google::protobuf::uint64 targetid() const;
  inline void set_targetid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.FollowTransferCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_targetid();
  inline void clear_has_targetid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 targetid_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static FollowTransferCmd* default_instance_;
};
// -------------------------------------------------------------------

class CallNpcFuncCmd : public ::google::protobuf::Message {
 public:
  CallNpcFuncCmd();
  virtual ~CallNpcFuncCmd();

  CallNpcFuncCmd(const CallNpcFuncCmd& from);

  inline CallNpcFuncCmd& operator=(const CallNpcFuncCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CallNpcFuncCmd& default_instance();

  void Swap(CallNpcFuncCmd* other);

  // implements Message ----------------------------------------------

  CallNpcFuncCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CallNpcFuncCmd& from);
  void MergeFrom(const CallNpcFuncCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_NPCFUNC];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional uint32 type = 3 [default = 0];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional string funparam = 4;
  inline bool has_funparam() const;
  inline void clear_funparam();
  static const int kFunparamFieldNumber = 4;
  inline const ::std::string& funparam() const;
  inline void set_funparam(const ::std::string& value);
  inline void set_funparam(const char* value);
  inline void set_funparam(const char* value, size_t size);
  inline ::std::string* mutable_funparam();
  inline ::std::string* release_funparam();
  inline void set_allocated_funparam(::std::string* funparam);

  // @@protoc_insertion_point(class_scope:Cmd.CallNpcFuncCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_funparam();
  inline void clear_has_funparam();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::std::string* funparam_;
  ::google::protobuf::uint32 type_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static CallNpcFuncCmd* default_instance_;
};
// -------------------------------------------------------------------

class ModelShow : public ::google::protobuf::Message {
 public:
  ModelShow();
  virtual ~ModelShow();

  ModelShow(const ModelShow& from);

  inline ModelShow& operator=(const ModelShow& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ModelShow& default_instance();

  void Swap(ModelShow* other);

  // implements Message ----------------------------------------------

  ModelShow* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ModelShow& from);
  void MergeFrom(const ModelShow& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_MODELSHOW];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional uint32 type = 3 [default = 0];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional string data = 4;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 4;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const char* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:Cmd.ModelShow)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::std::string* data_;
  ::google::protobuf::uint32 type_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static ModelShow* default_instance_;
};
// -------------------------------------------------------------------

class SoundEffectCmd : public ::google::protobuf::Message {
 public:
  SoundEffectCmd();
  virtual ~SoundEffectCmd();

  SoundEffectCmd(const SoundEffectCmd& from);

  inline SoundEffectCmd& operator=(const SoundEffectCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SoundEffectCmd& default_instance();

  void Swap(SoundEffectCmd* other);

  // implements Message ----------------------------------------------

  SoundEffectCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SoundEffectCmd& from);
  void MergeFrom(const SoundEffectCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SOUNDEFFECT];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional string se = 3;
  inline bool has_se() const;
  inline void clear_se();
  static const int kSeFieldNumber = 3;
  inline const ::std::string& se() const;
  inline void set_se(const ::std::string& value);
  inline void set_se(const char* value);
  inline void set_se(const char* value, size_t size);
  inline ::std::string* mutable_se();
  inline ::std::string* release_se();
  inline void set_allocated_se(::std::string* se);

  // optional .Cmd.ScenePos pos = 4;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 4;
  inline const ::Cmd::ScenePos& pos() const;
  inline ::Cmd::ScenePos* mutable_pos();
  inline ::Cmd::ScenePos* release_pos();
  inline void set_allocated_pos(::Cmd::ScenePos* pos);

  // optional uint32 msec = 5 [default = 0];
  inline bool has_msec() const;
  inline void clear_msec();
  static const int kMsecFieldNumber = 5;
  inline ::google::protobuf::uint32 msec() const;
  inline void set_msec(::google::protobuf::uint32 value);

  // optional uint32 times = 6 [default = 1];
  inline bool has_times() const;
  inline void clear_times();
  static const int kTimesFieldNumber = 6;
  inline ::google::protobuf::uint32 times() const;
  inline void set_times(::google::protobuf::uint32 value);

  // optional uint32 delay = 7 [default = 0];
  inline bool has_delay() const;
  inline void clear_delay();
  static const int kDelayFieldNumber = 7;
  inline ::google::protobuf::uint32 delay() const;
  inline void set_delay(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.SoundEffectCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_se();
  inline void clear_has_se();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_msec();
  inline void clear_has_msec();
  inline void set_has_times();
  inline void clear_has_times();
  inline void set_has_delay();
  inline void clear_has_delay();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::std::string* se_;
  ::Cmd::ScenePos* pos_;
  ::google::protobuf::uint32 msec_;
  ::google::protobuf::uint32 times_;
  ::google::protobuf::uint32 delay_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static SoundEffectCmd* default_instance_;
};
// -------------------------------------------------------------------

class PresetMsg : public ::google::protobuf::Message {
 public:
  PresetMsg();
  virtual ~PresetMsg();

  PresetMsg(const PresetMsg& from);

  inline PresetMsg& operator=(const PresetMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PresetMsg& default_instance();

  void Swap(PresetMsg* other);

  // implements Message ----------------------------------------------

  PresetMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PresetMsg& from);
  void MergeFrom(const PresetMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 msgid = 1 [default = 0];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgidFieldNumber = 1;
  inline ::google::protobuf::uint32 msgid() const;
  inline void set_msgid(::google::protobuf::uint32 value);

  // optional string msg = 2;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 2;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:Cmd.PresetMsg)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* msg_;
  ::google::protobuf::uint32 msgid_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static PresetMsg* default_instance_;
};
// -------------------------------------------------------------------

class PresetMsgCmd : public ::google::protobuf::Message {
 public:
  PresetMsgCmd();
  virtual ~PresetMsgCmd();

  PresetMsgCmd(const PresetMsgCmd& from);

  inline PresetMsgCmd& operator=(const PresetMsgCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PresetMsgCmd& default_instance();

  void Swap(PresetMsgCmd* other);

  // implements Message ----------------------------------------------

  PresetMsgCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PresetMsgCmd& from);
  void MergeFrom(const PresetMsgCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_PRESETCHATMSG];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // repeated string msgs = 3;
  inline int msgs_size() const;
  inline void clear_msgs();
  static const int kMsgsFieldNumber = 3;
  inline const ::std::string& msgs(int index) const;
  inline ::std::string* mutable_msgs(int index);
  inline void set_msgs(int index, const ::std::string& value);
  inline void set_msgs(int index, const char* value);
  inline void set_msgs(int index, const char* value, size_t size);
  inline ::std::string* add_msgs();
  inline void add_msgs(const ::std::string& value);
  inline void add_msgs(const char* value);
  inline void add_msgs(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& msgs() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_msgs();

  // @@protoc_insertion_point(class_scope:Cmd.PresetMsgCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedPtrField< ::std::string> msgs_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static PresetMsgCmd* default_instance_;
};
// -------------------------------------------------------------------

class ChangeBgmCmd : public ::google::protobuf::Message {
 public:
  ChangeBgmCmd();
  virtual ~ChangeBgmCmd();

  ChangeBgmCmd(const ChangeBgmCmd& from);

  inline ChangeBgmCmd& operator=(const ChangeBgmCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChangeBgmCmd& default_instance();

  void Swap(ChangeBgmCmd* other);

  // implements Message ----------------------------------------------

  ChangeBgmCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChangeBgmCmd& from);
  void MergeFrom(const ChangeBgmCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_CHANGEBGM];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional string bgm = 3;
  inline bool has_bgm() const;
  inline void clear_bgm();
  static const int kBgmFieldNumber = 3;
  inline const ::std::string& bgm() const;
  inline void set_bgm(const ::std::string& value);
  inline void set_bgm(const char* value);
  inline void set_bgm(const char* value, size_t size);
  inline ::std::string* mutable_bgm();
  inline ::std::string* release_bgm();
  inline void set_allocated_bgm(::std::string* bgm);

  // optional bool play = 4 [default = true];
  inline bool has_play() const;
  inline void clear_play();
  static const int kPlayFieldNumber = 4;
  inline bool play() const;
  inline void set_play(bool value);

  // optional uint32 times = 5 [default = 0];
  inline bool has_times() const;
  inline void clear_times();
  static const int kTimesFieldNumber = 5;
  inline ::google::protobuf::uint32 times() const;
  inline void set_times(::google::protobuf::uint32 value);

  // optional .Cmd.EBgmType type = 6;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 6;
  inline ::Cmd::EBgmType type() const;
  inline void set_type(::Cmd::EBgmType value);

  // @@protoc_insertion_point(class_scope:Cmd.ChangeBgmCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_bgm();
  inline void clear_has_bgm();
  inline void set_has_play();
  inline void clear_has_play();
  inline void set_has_times();
  inline void clear_has_times();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::std::string* bgm_;
  bool play_;
  ::google::protobuf::uint32 times_;
  int type_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static ChangeBgmCmd* default_instance_;
};
// -------------------------------------------------------------------

class FighterInfo : public ::google::protobuf::Message {
 public:
  FighterInfo();
  virtual ~FighterInfo();

  FighterInfo(const FighterInfo& from);

  inline FighterInfo& operator=(const FighterInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FighterInfo& default_instance();

  void Swap(FighterInfo* other);

  // implements Message ----------------------------------------------

  FighterInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FighterInfo& from);
  void MergeFrom(const FighterInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Cmd.UserData datas = 1;
  inline int datas_size() const;
  inline void clear_datas();
  static const int kDatasFieldNumber = 1;
  inline const ::Cmd::UserData& datas(int index) const;
  inline ::Cmd::UserData* mutable_datas(int index);
  inline ::Cmd::UserData* add_datas();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::UserData >&
      datas() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::UserData >*
      mutable_datas();

  // repeated .Cmd.UserAttr attrs = 2;
  inline int attrs_size() const;
  inline void clear_attrs();
  static const int kAttrsFieldNumber = 2;
  inline const ::Cmd::UserAttr& attrs(int index) const;
  inline ::Cmd::UserAttr* mutable_attrs(int index);
  inline ::Cmd::UserAttr* add_attrs();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::UserAttr >&
      attrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::UserAttr >*
      mutable_attrs();

  // @@protoc_insertion_point(class_scope:Cmd.FighterInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::UserData > datas_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::UserAttr > attrs_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static FighterInfo* default_instance_;
};
// -------------------------------------------------------------------

class QueryFighterInfo : public ::google::protobuf::Message {
 public:
  QueryFighterInfo();
  virtual ~QueryFighterInfo();

  QueryFighterInfo(const QueryFighterInfo& from);

  inline QueryFighterInfo& operator=(const QueryFighterInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryFighterInfo& default_instance();

  void Swap(QueryFighterInfo* other);

  // implements Message ----------------------------------------------

  QueryFighterInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryFighterInfo& from);
  void MergeFrom(const QueryFighterInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_QUERYFIGHTERINFO];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // repeated .Cmd.FighterInfo fighters = 3;
  inline int fighters_size() const;
  inline void clear_fighters();
  static const int kFightersFieldNumber = 3;
  inline const ::Cmd::FighterInfo& fighters(int index) const;
  inline ::Cmd::FighterInfo* mutable_fighters(int index);
  inline ::Cmd::FighterInfo* add_fighters();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::FighterInfo >&
      fighters() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::FighterInfo >*
      mutable_fighters();

  // @@protoc_insertion_point(class_scope:Cmd.QueryFighterInfo)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::FighterInfo > fighters_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static QueryFighterInfo* default_instance_;
};
// -------------------------------------------------------------------

class GameTimeCmd : public ::google::protobuf::Message {
 public:
  GameTimeCmd();
  virtual ~GameTimeCmd();

  GameTimeCmd(const GameTimeCmd& from);

  inline GameTimeCmd& operator=(const GameTimeCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameTimeCmd& default_instance();

  void Swap(GameTimeCmd* other);

  // implements Message ----------------------------------------------

  GameTimeCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameTimeCmd& from);
  void MergeFrom(const GameTimeCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_GAMETIME];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional .Cmd.GameTimeOpt opt = 3 [default = EGAMETIMEOPT_SYNC];
  inline bool has_opt() const;
  inline void clear_opt();
  static const int kOptFieldNumber = 3;
  inline ::Cmd::GameTimeOpt opt() const;
  inline void set_opt(::Cmd::GameTimeOpt value);

  // optional uint32 sec = 4 [default = 1];
  inline bool has_sec() const;
  inline void clear_sec();
  static const int kSecFieldNumber = 4;
  inline ::google::protobuf::uint32 sec() const;
  inline void set_sec(::google::protobuf::uint32 value);

  // optional uint32 speed = 5 [default = 1];
  inline bool has_speed() const;
  inline void clear_speed();
  static const int kSpeedFieldNumber = 5;
  inline ::google::protobuf::uint32 speed() const;
  inline void set_speed(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.GameTimeCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_opt();
  inline void clear_has_opt();
  inline void set_has_sec();
  inline void clear_has_sec();
  inline void set_has_speed();
  inline void clear_has_speed();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  int opt_;
  ::google::protobuf::uint32 sec_;
  ::google::protobuf::uint32 speed_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static GameTimeCmd* default_instance_;
};
// -------------------------------------------------------------------

class CDTimeItem : public ::google::protobuf::Message {
 public:
  CDTimeItem();
  virtual ~CDTimeItem();

  CDTimeItem(const CDTimeItem& from);

  inline CDTimeItem& operator=(const CDTimeItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CDTimeItem& default_instance();

  void Swap(CDTimeItem* other);

  // implements Message ----------------------------------------------

  CDTimeItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDTimeItem& from);
  void MergeFrom(const CDTimeItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint64 time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::uint64 time() const;
  inline void set_time(::google::protobuf::uint64 value);

  // optional .Cmd.CD_TYPE type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::Cmd::CD_TYPE type() const;
  inline void set_type(::Cmd::CD_TYPE value);

  // @@protoc_insertion_point(class_scope:Cmd.CDTimeItem)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 time_;
  ::google::protobuf::uint32 id_;
  int type_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static CDTimeItem* default_instance_;
};
// -------------------------------------------------------------------

class CDTimeUserCmd : public ::google::protobuf::Message {
 public:
  CDTimeUserCmd();
  virtual ~CDTimeUserCmd();

  CDTimeUserCmd(const CDTimeUserCmd& from);

  inline CDTimeUserCmd& operator=(const CDTimeUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CDTimeUserCmd& default_instance();

  void Swap(CDTimeUserCmd* other);

  // implements Message ----------------------------------------------

  CDTimeUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDTimeUserCmd& from);
  void MergeFrom(const CDTimeUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_CDTIME];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // repeated .Cmd.CDTimeItem list = 3;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 3;
  inline const ::Cmd::CDTimeItem& list(int index) const;
  inline ::Cmd::CDTimeItem* mutable_list(int index);
  inline ::Cmd::CDTimeItem* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::CDTimeItem >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::CDTimeItem >*
      mutable_list();

  // @@protoc_insertion_point(class_scope:Cmd.CDTimeUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::CDTimeItem > list_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static CDTimeUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class StateChange : public ::google::protobuf::Message {
 public:
  StateChange();
  virtual ~StateChange();

  StateChange(const StateChange& from);

  inline StateChange& operator=(const StateChange& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StateChange& default_instance();

  void Swap(StateChange* other);

  // implements Message ----------------------------------------------

  StateChange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StateChange& from);
  void MergeFrom(const StateChange& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_STATECHANGE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional .Cmd.ECreatureStatus status = 3 [default = ECREATURESTATUS_MIN];
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 3;
  inline ::Cmd::ECreatureStatus status() const;
  inline void set_status(::Cmd::ECreatureStatus value);

  // @@protoc_insertion_point(class_scope:Cmd.StateChange)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  int status_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static StateChange* default_instance_;
};
// -------------------------------------------------------------------

class Photo : public ::google::protobuf::Message {
 public:
  Photo();
  virtual ~Photo();

  Photo(const Photo& from);

  inline Photo& operator=(const Photo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Photo& default_instance();

  void Swap(Photo* other);

  // implements Message ----------------------------------------------

  Photo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Photo& from);
  void MergeFrom(const Photo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_PHOTO];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional uint64 guid = 3 [default = 0];
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 3;
  inline ::google::protobuf::uint64 guid() const;
  inline void set_guid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.Photo)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_guid();
  inline void clear_has_guid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 guid_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static Photo* default_instance_;
};
// -------------------------------------------------------------------

class ShakeScreen : public ::google::protobuf::Message {
 public:
  ShakeScreen();
  virtual ~ShakeScreen();

  ShakeScreen(const ShakeScreen& from);

  inline ShakeScreen& operator=(const ShakeScreen& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShakeScreen& default_instance();

  void Swap(ShakeScreen* other);

  // implements Message ----------------------------------------------

  ShakeScreen* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ShakeScreen& from);
  void MergeFrom(const ShakeScreen& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SHAKESCREEN];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional uint32 maxamplitude = 3 [default = 3];
  inline bool has_maxamplitude() const;
  inline void clear_maxamplitude();
  static const int kMaxamplitudeFieldNumber = 3;
  inline ::google::protobuf::uint32 maxamplitude() const;
  inline void set_maxamplitude(::google::protobuf::uint32 value);

  // optional uint32 msec = 4 [default = 0];
  inline bool has_msec() const;
  inline void clear_msec();
  static const int kMsecFieldNumber = 4;
  inline ::google::protobuf::uint32 msec() const;
  inline void set_msec(::google::protobuf::uint32 value);

  // optional uint32 shaketype = 5 [default = 1];
  inline bool has_shaketype() const;
  inline void clear_shaketype();
  static const int kShaketypeFieldNumber = 5;
  inline ::google::protobuf::uint32 shaketype() const;
  inline void set_shaketype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.ShakeScreen)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_maxamplitude();
  inline void clear_has_maxamplitude();
  inline void set_has_msec();
  inline void clear_has_msec();
  inline void set_has_shaketype();
  inline void clear_has_shaketype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 maxamplitude_;
  ::google::protobuf::uint32 msec_;
  ::google::protobuf::uint32 shaketype_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static ShakeScreen* default_instance_;
};
// -------------------------------------------------------------------

class ShortcutItem : public ::google::protobuf::Message {
 public:
  ShortcutItem();
  virtual ~ShortcutItem();

  ShortcutItem(const ShortcutItem& from);

  inline ShortcutItem& operator=(const ShortcutItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShortcutItem& default_instance();

  void Swap(ShortcutItem* other);

  // implements Message ----------------------------------------------

  ShortcutItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ShortcutItem& from);
  void MergeFrom(const ShortcutItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string guid = 1;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline const ::std::string& guid() const;
  inline void set_guid(const ::std::string& value);
  inline void set_guid(const char* value);
  inline void set_guid(const char* value, size_t size);
  inline ::std::string* mutable_guid();
  inline ::std::string* release_guid();
  inline void set_allocated_guid(::std::string* guid);

  // optional uint32 type = 2 [default = 0];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint32 pos = 3 [default = 0];
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 3;
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.ShortcutItem)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_pos();
  inline void clear_has_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* guid_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 pos_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static ShortcutItem* default_instance_;
};
// -------------------------------------------------------------------

class QueryShortcut : public ::google::protobuf::Message {
 public:
  QueryShortcut();
  virtual ~QueryShortcut();

  QueryShortcut(const QueryShortcut& from);

  inline QueryShortcut& operator=(const QueryShortcut& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryShortcut& default_instance();

  void Swap(QueryShortcut* other);

  // implements Message ----------------------------------------------

  QueryShortcut* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryShortcut& from);
  void MergeFrom(const QueryShortcut& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_QUERYSHORTCUT];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // repeated .Cmd.ShortcutItem list = 3;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 3;
  inline const ::Cmd::ShortcutItem& list(int index) const;
  inline ::Cmd::ShortcutItem* mutable_list(int index);
  inline ::Cmd::ShortcutItem* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ShortcutItem >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::ShortcutItem >*
      mutable_list();

  // @@protoc_insertion_point(class_scope:Cmd.QueryShortcut)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::ShortcutItem > list_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static QueryShortcut* default_instance_;
};
// -------------------------------------------------------------------

class PutShortcut : public ::google::protobuf::Message {
 public:
  PutShortcut();
  virtual ~PutShortcut();

  PutShortcut(const PutShortcut& from);

  inline PutShortcut& operator=(const PutShortcut& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PutShortcut& default_instance();

  void Swap(PutShortcut* other);

  // implements Message ----------------------------------------------

  PutShortcut* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PutShortcut& from);
  void MergeFrom(const PutShortcut& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_PUTSHORTCUT];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional .Cmd.ShortcutItem item = 3;
  inline bool has_item() const;
  inline void clear_item();
  static const int kItemFieldNumber = 3;
  inline const ::Cmd::ShortcutItem& item() const;
  inline ::Cmd::ShortcutItem* mutable_item();
  inline ::Cmd::ShortcutItem* release_item();
  inline void set_allocated_item(::Cmd::ShortcutItem* item);

  // @@protoc_insertion_point(class_scope:Cmd.PutShortcut)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_item();
  inline void clear_has_item();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::Cmd::ShortcutItem* item_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static PutShortcut* default_instance_;
};
// -------------------------------------------------------------------

class NpcChangeAngle : public ::google::protobuf::Message {
 public:
  NpcChangeAngle();
  virtual ~NpcChangeAngle();

  NpcChangeAngle(const NpcChangeAngle& from);

  inline NpcChangeAngle& operator=(const NpcChangeAngle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NpcChangeAngle& default_instance();

  void Swap(NpcChangeAngle* other);

  // implements Message ----------------------------------------------

  NpcChangeAngle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NpcChangeAngle& from);
  void MergeFrom(const NpcChangeAngle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_NPCANGLE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional uint64 guid = 3 [default = 0];
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 3;
  inline ::google::protobuf::uint64 guid() const;
  inline void set_guid(::google::protobuf::uint64 value);

  // optional uint64 targetid = 4 [default = 0];
  inline bool has_targetid() const;
  inline void clear_targetid();
  static const int kTargetidFieldNumber = 4;
  inline ::google::protobuf::uint64 targetid() const;
  inline void set_targetid(::google::protobuf::uint64 value);

  // optional uint32 angle = 5 [default = 0];
  inline bool has_angle() const;
  inline void clear_angle();
  static const int kAngleFieldNumber = 5;
  inline ::google::protobuf::uint32 angle() const;
  inline void set_angle(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.NpcChangeAngle)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_targetid();
  inline void clear_has_targetid();
  inline void set_has_angle();
  inline void clear_has_angle();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 guid_;
  ::google::protobuf::uint64 targetid_;
  ::google::protobuf::uint32 angle_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static NpcChangeAngle* default_instance_;
};
// -------------------------------------------------------------------

class CameraFocus : public ::google::protobuf::Message {
 public:
  CameraFocus();
  virtual ~CameraFocus();

  CameraFocus(const CameraFocus& from);

  inline CameraFocus& operator=(const CameraFocus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CameraFocus& default_instance();

  void Swap(CameraFocus* other);

  // implements Message ----------------------------------------------

  CameraFocus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CameraFocus& from);
  void MergeFrom(const CameraFocus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_CAMERAFOCUS];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // repeated uint64 targets = 3;
  inline int targets_size() const;
  inline void clear_targets();
  static const int kTargetsFieldNumber = 3;
  inline ::google::protobuf::uint64 targets(int index) const;
  inline void set_targets(int index, ::google::protobuf::uint64 value);
  inline void add_targets(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      targets() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_targets();

  // @@protoc_insertion_point(class_scope:Cmd.CameraFocus)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > targets_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static CameraFocus* default_instance_;
};
// -------------------------------------------------------------------

class GoToListUserCmd : public ::google::protobuf::Message {
 public:
  GoToListUserCmd();
  virtual ~GoToListUserCmd();

  GoToListUserCmd(const GoToListUserCmd& from);

  inline GoToListUserCmd& operator=(const GoToListUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GoToListUserCmd& default_instance();

  void Swap(GoToListUserCmd* other);

  // implements Message ----------------------------------------------

  GoToListUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GoToListUserCmd& from);
  void MergeFrom(const GoToListUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_GOTO_LIST];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // repeated uint32 mapid = 3;
  inline int mapid_size() const;
  inline void clear_mapid();
  static const int kMapidFieldNumber = 3;
  inline ::google::protobuf::uint32 mapid(int index) const;
  inline void set_mapid(int index, ::google::protobuf::uint32 value);
  inline void add_mapid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      mapid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_mapid();

  // @@protoc_insertion_point(class_scope:Cmd.GoToListUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > mapid_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static GoToListUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class GoToGearUserCmd : public ::google::protobuf::Message {
 public:
  GoToGearUserCmd();
  virtual ~GoToGearUserCmd();

  GoToGearUserCmd(const GoToGearUserCmd& from);

  inline GoToGearUserCmd& operator=(const GoToGearUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GoToGearUserCmd& default_instance();

  void Swap(GoToGearUserCmd* other);

  // implements Message ----------------------------------------------

  GoToGearUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GoToGearUserCmd& from);
  void MergeFrom(const GoToGearUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_GOTO_GEAR];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional uint32 mapid = 3;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapidFieldNumber = 3;
  inline ::google::protobuf::uint32 mapid() const;
  inline void set_mapid(::google::protobuf::uint32 value);

  // optional .Cmd.EGoToGearType type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::Cmd::EGoToGearType type() const;
  inline void set_type(::Cmd::EGoToGearType value);

  // repeated uint64 otherids = 5;
  inline int otherids_size() const;
  inline void clear_otherids();
  static const int kOtheridsFieldNumber = 5;
  inline ::google::protobuf::uint64 otherids(int index) const;
  inline void set_otherids(int index, ::google::protobuf::uint64 value);
  inline void add_otherids(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      otherids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_otherids();

  // @@protoc_insertion_point(class_scope:Cmd.GoToGearUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_mapid();
  inline void clear_has_mapid();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 mapid_;
  int type_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > otherids_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static GoToGearUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class NewTransMapCmd : public ::google::protobuf::Message {
 public:
  NewTransMapCmd();
  virtual ~NewTransMapCmd();

  NewTransMapCmd(const NewTransMapCmd& from);

  inline NewTransMapCmd& operator=(const NewTransMapCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NewTransMapCmd& default_instance();

  void Swap(NewTransMapCmd* other);

  // implements Message ----------------------------------------------

  NewTransMapCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NewTransMapCmd& from);
  void MergeFrom(const NewTransMapCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_NEWTRANSMAP];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // repeated uint32 mapid = 3;
  inline int mapid_size() const;
  inline void clear_mapid();
  static const int kMapidFieldNumber = 3;
  inline ::google::protobuf::uint32 mapid(int index) const;
  inline void set_mapid(int index, ::google::protobuf::uint32 value);
  inline void add_mapid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      mapid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_mapid();

  // @@protoc_insertion_point(class_scope:Cmd.NewTransMapCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > mapid_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static NewTransMapCmd* default_instance_;
};
// -------------------------------------------------------------------

class DeathTransferListCmd : public ::google::protobuf::Message {
 public:
  DeathTransferListCmd();
  virtual ~DeathTransferListCmd();

  DeathTransferListCmd(const DeathTransferListCmd& from);

  inline DeathTransferListCmd& operator=(const DeathTransferListCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeathTransferListCmd& default_instance();

  void Swap(DeathTransferListCmd* other);

  // implements Message ----------------------------------------------

  DeathTransferListCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeathTransferListCmd& from);
  void MergeFrom(const DeathTransferListCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_DEATH_TRANSFER_LIST];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // repeated uint32 npcId = 3;
  inline int npcid_size() const;
  inline void clear_npcid();
  static const int kNpcIdFieldNumber = 3;
  inline ::google::protobuf::uint32 npcid(int index) const;
  inline void set_npcid(int index, ::google::protobuf::uint32 value);
  inline void add_npcid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      npcid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_npcid();

  // @@protoc_insertion_point(class_scope:Cmd.DeathTransferListCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > npcid_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static DeathTransferListCmd* default_instance_;
};
// -------------------------------------------------------------------

class NewDeathTransferCmd : public ::google::protobuf::Message {
 public:
  NewDeathTransferCmd();
  virtual ~NewDeathTransferCmd();

  NewDeathTransferCmd(const NewDeathTransferCmd& from);

  inline NewDeathTransferCmd& operator=(const NewDeathTransferCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NewDeathTransferCmd& default_instance();

  void Swap(NewDeathTransferCmd* other);

  // implements Message ----------------------------------------------

  NewDeathTransferCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NewDeathTransferCmd& from);
  void MergeFrom(const NewDeathTransferCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_NEW_DEATH_TRANSFER];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional uint32 npcId = 3;
  inline bool has_npcid() const;
  inline void clear_npcid();
  static const int kNpcIdFieldNumber = 3;
  inline ::google::protobuf::uint32 npcid() const;
  inline void set_npcid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.NewDeathTransferCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_npcid();
  inline void clear_has_npcid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 npcid_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static NewDeathTransferCmd* default_instance_;
};
// -------------------------------------------------------------------

class UseDeathTransferCmd : public ::google::protobuf::Message {
 public:
  UseDeathTransferCmd();
  virtual ~UseDeathTransferCmd();

  UseDeathTransferCmd(const UseDeathTransferCmd& from);

  inline UseDeathTransferCmd& operator=(const UseDeathTransferCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UseDeathTransferCmd& default_instance();

  void Swap(UseDeathTransferCmd* other);

  // implements Message ----------------------------------------------

  UseDeathTransferCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UseDeathTransferCmd& from);
  void MergeFrom(const UseDeathTransferCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_TRANSFER];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional uint32 fromNpcId = 3;
  inline bool has_fromnpcid() const;
  inline void clear_fromnpcid();
  static const int kFromNpcIdFieldNumber = 3;
  inline ::google::protobuf::uint32 fromnpcid() const;
  inline void set_fromnpcid(::google::protobuf::uint32 value);

  // optional uint32 toNpcId = 4;
  inline bool has_tonpcid() const;
  inline void clear_tonpcid();
  static const int kToNpcIdFieldNumber = 4;
  inline ::google::protobuf::uint32 tonpcid() const;
  inline void set_tonpcid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.UseDeathTransferCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_fromnpcid();
  inline void clear_has_fromnpcid();
  inline void set_has_tonpcid();
  inline void clear_has_tonpcid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 fromnpcid_;
  ::google::protobuf::uint32 tonpcid_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static UseDeathTransferCmd* default_instance_;
};
// -------------------------------------------------------------------

class FollowerUser : public ::google::protobuf::Message {
 public:
  FollowerUser();
  virtual ~FollowerUser();

  FollowerUser(const FollowerUser& from);

  inline FollowerUser& operator=(const FollowerUser& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FollowerUser& default_instance();

  void Swap(FollowerUser* other);

  // implements Message ----------------------------------------------

  FollowerUser* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FollowerUser& from);
  void MergeFrom(const FollowerUser& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_FOLLOWER];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional uint64 userid = 3 [default = 0];
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 3;
  inline ::google::protobuf::uint64 userid() const;
  inline void set_userid(::google::protobuf::uint64 value);

  // optional .Cmd.EFollowType eType = 4 [default = EFOLLOWTYPE_MIN];
  inline bool has_etype() const;
  inline void clear_etype();
  static const int kETypeFieldNumber = 4;
  inline ::Cmd::EFollowType etype() const;
  inline void set_etype(::Cmd::EFollowType value);

  // @@protoc_insertion_point(class_scope:Cmd.FollowerUser)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_etype();
  inline void clear_has_etype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 userid_;
  int etype_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static FollowerUser* default_instance_;
};
// -------------------------------------------------------------------

class BeFollowUserCmd : public ::google::protobuf::Message {
 public:
  BeFollowUserCmd();
  virtual ~BeFollowUserCmd();

  BeFollowUserCmd(const BeFollowUserCmd& from);

  inline BeFollowUserCmd& operator=(const BeFollowUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BeFollowUserCmd& default_instance();

  void Swap(BeFollowUserCmd* other);

  // implements Message ----------------------------------------------

  BeFollowUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BeFollowUserCmd& from);
  void MergeFrom(const BeFollowUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_BEFOLLOW];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional uint64 userid = 3 [default = 0];
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 3;
  inline ::google::protobuf::uint64 userid() const;
  inline void set_userid(::google::protobuf::uint64 value);

  // optional .Cmd.EFollowType eType = 4 [default = EFOLLOWTYPE_MIN];
  inline bool has_etype() const;
  inline void clear_etype();
  static const int kETypeFieldNumber = 4;
  inline ::Cmd::EFollowType etype() const;
  inline void set_etype(::Cmd::EFollowType value);

  // @@protoc_insertion_point(class_scope:Cmd.BeFollowUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_etype();
  inline void clear_has_etype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 userid_;
  int etype_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static BeFollowUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class LaboratoryUserCmd : public ::google::protobuf::Message {
 public:
  LaboratoryUserCmd();
  virtual ~LaboratoryUserCmd();

  LaboratoryUserCmd(const LaboratoryUserCmd& from);

  inline LaboratoryUserCmd& operator=(const LaboratoryUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LaboratoryUserCmd& default_instance();

  void Swap(LaboratoryUserCmd* other);

  // implements Message ----------------------------------------------

  LaboratoryUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LaboratoryUserCmd& from);
  void MergeFrom(const LaboratoryUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_LABORATORY];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional uint32 round = 3 [default = 0];
  inline bool has_round() const;
  inline void clear_round();
  static const int kRoundFieldNumber = 3;
  inline ::google::protobuf::uint32 round() const;
  inline void set_round(::google::protobuf::uint32 value);

  // optional uint32 curscore = 4 [default = 0];
  inline bool has_curscore() const;
  inline void clear_curscore();
  static const int kCurscoreFieldNumber = 4;
  inline ::google::protobuf::uint32 curscore() const;
  inline void set_curscore(::google::protobuf::uint32 value);

  // optional uint32 maxscore = 5 [default = 0];
  inline bool has_maxscore() const;
  inline void clear_maxscore();
  static const int kMaxscoreFieldNumber = 5;
  inline ::google::protobuf::uint32 maxscore() const;
  inline void set_maxscore(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.LaboratoryUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_round();
  inline void clear_has_round();
  inline void set_has_curscore();
  inline void clear_has_curscore();
  inline void set_has_maxscore();
  inline void clear_has_maxscore();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 round_;
  ::google::protobuf::uint32 curscore_;
  ::google::protobuf::uint32 maxscore_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static LaboratoryUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class GotoLaboratoryUserCmd : public ::google::protobuf::Message {
 public:
  GotoLaboratoryUserCmd();
  virtual ~GotoLaboratoryUserCmd();

  GotoLaboratoryUserCmd(const GotoLaboratoryUserCmd& from);

  inline GotoLaboratoryUserCmd& operator=(const GotoLaboratoryUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GotoLaboratoryUserCmd& default_instance();

  void Swap(GotoLaboratoryUserCmd* other);

  // implements Message ----------------------------------------------

  GotoLaboratoryUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GotoLaboratoryUserCmd& from);
  void MergeFrom(const GotoLaboratoryUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_GOTO_LABORATORY];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional uint32 funid = 3;
  inline bool has_funid() const;
  inline void clear_funid();
  static const int kFunidFieldNumber = 3;
  inline ::google::protobuf::uint32 funid() const;
  inline void set_funid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.GotoLaboratoryUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_funid();
  inline void clear_has_funid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 funid_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static GotoLaboratoryUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class ExchangeProfession : public ::google::protobuf::Message {
 public:
  ExchangeProfession();
  virtual ~ExchangeProfession();

  ExchangeProfession(const ExchangeProfession& from);

  inline ExchangeProfession& operator=(const ExchangeProfession& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExchangeProfession& default_instance();

  void Swap(ExchangeProfession* other);

  // implements Message ----------------------------------------------

  ExchangeProfession* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExchangeProfession& from);
  void MergeFrom(const ExchangeProfession& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_EXCHANGEPROFESSION];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional uint64 guid = 3 [default = 0];
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 3;
  inline ::google::protobuf::uint64 guid() const;
  inline void set_guid(::google::protobuf::uint64 value);

  // repeated .Cmd.UserData datas = 4;
  inline int datas_size() const;
  inline void clear_datas();
  static const int kDatasFieldNumber = 4;
  inline const ::Cmd::UserData& datas(int index) const;
  inline ::Cmd::UserData* mutable_datas(int index);
  inline ::Cmd::UserData* add_datas();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::UserData >&
      datas() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::UserData >*
      mutable_datas();

  // repeated .Cmd.UserAttr attrs = 5;
  inline int attrs_size() const;
  inline void clear_attrs();
  static const int kAttrsFieldNumber = 5;
  inline const ::Cmd::UserAttr& attrs(int index) const;
  inline ::Cmd::UserAttr* mutable_attrs(int index);
  inline ::Cmd::UserAttr* add_attrs();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::UserAttr >&
      attrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::UserAttr >*
      mutable_attrs();

  // repeated .Cmd.UserAttr pointattrs = 6;
  inline int pointattrs_size() const;
  inline void clear_pointattrs();
  static const int kPointattrsFieldNumber = 6;
  inline const ::Cmd::UserAttr& pointattrs(int index) const;
  inline ::Cmd::UserAttr* mutable_pointattrs(int index);
  inline ::Cmd::UserAttr* add_pointattrs();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::UserAttr >&
      pointattrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::UserAttr >*
      mutable_pointattrs();

  // optional .Cmd.EProfressionDataType type = 7 [default = ETypeAdvance];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 7;
  inline ::Cmd::EProfressionDataType type() const;
  inline void set_type(::Cmd::EProfressionDataType value);

  // @@protoc_insertion_point(class_scope:Cmd.ExchangeProfession)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 guid_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::UserData > datas_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::UserAttr > attrs_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::UserAttr > pointattrs_;
  int type_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static ExchangeProfession* default_instance_;
};
// -------------------------------------------------------------------

class Scenery : public ::google::protobuf::Message {
 public:
  Scenery();
  virtual ~Scenery();

  Scenery(const Scenery& from);

  inline Scenery& operator=(const Scenery& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Scenery& default_instance();

  void Swap(Scenery* other);

  // implements Message ----------------------------------------------

  Scenery* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Scenery& from);
  void MergeFrom(const Scenery& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 sceneryid = 1 [default = 0];
  inline bool has_sceneryid() const;
  inline void clear_sceneryid();
  static const int kSceneryidFieldNumber = 1;
  inline ::google::protobuf::uint32 sceneryid() const;
  inline void set_sceneryid(::google::protobuf::uint32 value);

  // optional uint32 anglez = 2 [default = 0];
  inline bool has_anglez() const;
  inline void clear_anglez();
  static const int kAnglezFieldNumber = 2;
  inline ::google::protobuf::uint32 anglez() const;
  inline void set_anglez(::google::protobuf::uint32 value);

  // optional uint64 charid = 3 [default = 0];
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 3;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.Scenery)
 private:
  inline void set_has_sceneryid();
  inline void clear_has_sceneryid();
  inline void set_has_anglez();
  inline void clear_has_anglez();
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 sceneryid_;
  ::google::protobuf::uint32 anglez_;
  ::google::protobuf::uint64 charid_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static Scenery* default_instance_;
};
// -------------------------------------------------------------------

class SceneryUserCmd : public ::google::protobuf::Message {
 public:
  SceneryUserCmd();
  virtual ~SceneryUserCmd();

  SceneryUserCmd(const SceneryUserCmd& from);

  inline SceneryUserCmd& operator=(const SceneryUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SceneryUserCmd& default_instance();

  void Swap(SceneryUserCmd* other);

  // implements Message ----------------------------------------------

  SceneryUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SceneryUserCmd& from);
  void MergeFrom(const SceneryUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SCENERY];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional uint32 mapid = 3 [default = 0];
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapidFieldNumber = 3;
  inline ::google::protobuf::uint32 mapid() const;
  inline void set_mapid(::google::protobuf::uint32 value);

  // repeated .Cmd.Scenery scenerys = 4;
  inline int scenerys_size() const;
  inline void clear_scenerys();
  static const int kScenerysFieldNumber = 4;
  inline const ::Cmd::Scenery& scenerys(int index) const;
  inline ::Cmd::Scenery* mutable_scenerys(int index);
  inline ::Cmd::Scenery* add_scenerys();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::Scenery >&
      scenerys() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::Scenery >*
      mutable_scenerys();

  // @@protoc_insertion_point(class_scope:Cmd.SceneryUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_mapid();
  inline void clear_has_mapid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::Scenery > scenerys_;
  ::google::protobuf::uint32 mapid_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static SceneryUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class GoMapQuestUserCmd : public ::google::protobuf::Message {
 public:
  GoMapQuestUserCmd();
  virtual ~GoMapQuestUserCmd();

  GoMapQuestUserCmd(const GoMapQuestUserCmd& from);

  inline GoMapQuestUserCmd& operator=(const GoMapQuestUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GoMapQuestUserCmd& default_instance();

  void Swap(GoMapQuestUserCmd* other);

  // implements Message ----------------------------------------------

  GoMapQuestUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GoMapQuestUserCmd& from);
  void MergeFrom(const GoMapQuestUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_GOMAP_QUEST];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional uint32 questid = 3 [default = 0];
  inline bool has_questid() const;
  inline void clear_questid();
  static const int kQuestidFieldNumber = 3;
  inline ::google::protobuf::uint32 questid() const;
  inline void set_questid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.GoMapQuestUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_questid();
  inline void clear_has_questid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 questid_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static GoMapQuestUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class GoMapFollowUserCmd : public ::google::protobuf::Message {
 public:
  GoMapFollowUserCmd();
  virtual ~GoMapFollowUserCmd();

  GoMapFollowUserCmd(const GoMapFollowUserCmd& from);

  inline GoMapFollowUserCmd& operator=(const GoMapFollowUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GoMapFollowUserCmd& default_instance();

  void Swap(GoMapFollowUserCmd* other);

  // implements Message ----------------------------------------------

  GoMapFollowUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GoMapFollowUserCmd& from);
  void MergeFrom(const GoMapFollowUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_GOMAP_FOLLOW];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional uint32 mapid = 3 [default = 0];
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapidFieldNumber = 3;
  inline ::google::protobuf::uint32 mapid() const;
  inline void set_mapid(::google::protobuf::uint32 value);

  // optional uint64 charid = 4 [default = 0];
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 4;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.GoMapFollowUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_mapid();
  inline void clear_has_mapid();
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 charid_;
  ::google::protobuf::uint32 mapid_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static GoMapFollowUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class UserAutoHitCmd : public ::google::protobuf::Message {
 public:
  UserAutoHitCmd();
  virtual ~UserAutoHitCmd();

  UserAutoHitCmd(const UserAutoHitCmd& from);

  inline UserAutoHitCmd& operator=(const UserAutoHitCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserAutoHitCmd& default_instance();

  void Swap(UserAutoHitCmd* other);

  // implements Message ----------------------------------------------

  UserAutoHitCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserAutoHitCmd& from);
  void MergeFrom(const UserAutoHitCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_AUTOHIT];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional uint64 charid = 3 [default = 0];
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 3;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.UserAutoHitCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 charid_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static UserAutoHitCmd* default_instance_;
};
// -------------------------------------------------------------------

class UploadSceneryPhotoUserCmd : public ::google::protobuf::Message {
 public:
  UploadSceneryPhotoUserCmd();
  virtual ~UploadSceneryPhotoUserCmd();

  UploadSceneryPhotoUserCmd(const UploadSceneryPhotoUserCmd& from);

  inline UploadSceneryPhotoUserCmd& operator=(const UploadSceneryPhotoUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UploadSceneryPhotoUserCmd& default_instance();

  void Swap(UploadSceneryPhotoUserCmd* other);

  // implements Message ----------------------------------------------

  UploadSceneryPhotoUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UploadSceneryPhotoUserCmd& from);
  void MergeFrom(const UploadSceneryPhotoUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_UPLOAD_SCENERY_PHOTO];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional .Cmd.EAlbumType type = 3 [default = EALBUMTYPE_SCENERY];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::Cmd::EAlbumType type() const;
  inline void set_type(::Cmd::EAlbumType value);

  // optional uint32 sceneryid = 4;
  inline bool has_sceneryid() const;
  inline void clear_sceneryid();
  static const int kSceneryidFieldNumber = 4;
  inline ::google::protobuf::uint32 sceneryid() const;
  inline void set_sceneryid(::google::protobuf::uint32 value);

  // optional string policy = 5;
  inline bool has_policy() const;
  inline void clear_policy();
  static const int kPolicyFieldNumber = 5;
  inline const ::std::string& policy() const;
  inline void set_policy(const ::std::string& value);
  inline void set_policy(const char* value);
  inline void set_policy(const char* value, size_t size);
  inline ::std::string* mutable_policy();
  inline ::std::string* release_policy();
  inline void set_allocated_policy(::std::string* policy);

  // optional string signature = 6;
  inline bool has_signature() const;
  inline void clear_signature();
  static const int kSignatureFieldNumber = 6;
  inline const ::std::string& signature() const;
  inline void set_signature(const ::std::string& value);
  inline void set_signature(const char* value);
  inline void set_signature(const char* value, size_t size);
  inline ::std::string* mutable_signature();
  inline ::std::string* release_signature();
  inline void set_allocated_signature(::std::string* signature);

  // @@protoc_insertion_point(class_scope:Cmd.UploadSceneryPhotoUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_sceneryid();
  inline void clear_has_sceneryid();
  inline void set_has_policy();
  inline void clear_has_policy();
  inline void set_has_signature();
  inline void clear_has_signature();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  int type_;
  ::google::protobuf::uint32 sceneryid_;
  ::std::string* policy_;
  ::std::string* signature_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static UploadSceneryPhotoUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class UpyunUrl : public ::google::protobuf::Message {
 public:
  UpyunUrl();
  virtual ~UpyunUrl();

  UpyunUrl(const UpyunUrl& from);

  inline UpyunUrl& operator=(const UpyunUrl& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpyunUrl& default_instance();

  void Swap(UpyunUrl* other);

  // implements Message ----------------------------------------------

  UpyunUrl* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpyunUrl& from);
  void MergeFrom(const UpyunUrl& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.EAlbumType type = 1 [default = EALBUMTYPE_SCENERY];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::Cmd::EAlbumType type() const;
  inline void set_type(::Cmd::EAlbumType value);

  // optional string char_url = 2;
  inline bool has_char_url() const;
  inline void clear_char_url();
  static const int kCharUrlFieldNumber = 2;
  inline const ::std::string& char_url() const;
  inline void set_char_url(const ::std::string& value);
  inline void set_char_url(const char* value);
  inline void set_char_url(const char* value, size_t size);
  inline ::std::string* mutable_char_url();
  inline ::std::string* release_char_url();
  inline void set_allocated_char_url(::std::string* char_url);

  // optional string acc_url = 3;
  inline bool has_acc_url() const;
  inline void clear_acc_url();
  static const int kAccUrlFieldNumber = 3;
  inline const ::std::string& acc_url() const;
  inline void set_acc_url(const ::std::string& value);
  inline void set_acc_url(const char* value);
  inline void set_acc_url(const char* value, size_t size);
  inline ::std::string* mutable_acc_url();
  inline ::std::string* release_acc_url();
  inline void set_allocated_acc_url(::std::string* acc_url);

  // @@protoc_insertion_point(class_scope:Cmd.UpyunUrl)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_char_url();
  inline void clear_has_char_url();
  inline void set_has_acc_url();
  inline void clear_has_acc_url();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* char_url_;
  ::std::string* acc_url_;
  int type_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static UpyunUrl* default_instance_;
};
// -------------------------------------------------------------------

class DownloadSceneryPhotoUserCmd : public ::google::protobuf::Message {
 public:
  DownloadSceneryPhotoUserCmd();
  virtual ~DownloadSceneryPhotoUserCmd();

  DownloadSceneryPhotoUserCmd(const DownloadSceneryPhotoUserCmd& from);

  inline DownloadSceneryPhotoUserCmd& operator=(const DownloadSceneryPhotoUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DownloadSceneryPhotoUserCmd& default_instance();

  void Swap(DownloadSceneryPhotoUserCmd* other);

  // implements Message ----------------------------------------------

  DownloadSceneryPhotoUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DownloadSceneryPhotoUserCmd& from);
  void MergeFrom(const DownloadSceneryPhotoUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_DOWNLOAD_SCENERY_PHOTO];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // repeated .Cmd.UpyunUrl urls = 3;
  inline int urls_size() const;
  inline void clear_urls();
  static const int kUrlsFieldNumber = 3;
  inline const ::Cmd::UpyunUrl& urls(int index) const;
  inline ::Cmd::UpyunUrl* mutable_urls(int index);
  inline ::Cmd::UpyunUrl* add_urls();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::UpyunUrl >&
      urls() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::UpyunUrl >*
      mutable_urls();

  // @@protoc_insertion_point(class_scope:Cmd.DownloadSceneryPhotoUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::UpyunUrl > urls_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static DownloadSceneryPhotoUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class QueryMapArea : public ::google::protobuf::Message {
 public:
  QueryMapArea();
  virtual ~QueryMapArea();

  QueryMapArea(const QueryMapArea& from);

  inline QueryMapArea& operator=(const QueryMapArea& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryMapArea& default_instance();

  void Swap(QueryMapArea* other);

  // implements Message ----------------------------------------------

  QueryMapArea* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryMapArea& from);
  void MergeFrom(const QueryMapArea& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_QUERY_MAPAREA];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // repeated uint32 areas = 3;
  inline int areas_size() const;
  inline void clear_areas();
  static const int kAreasFieldNumber = 3;
  inline ::google::protobuf::uint32 areas(int index) const;
  inline void set_areas(int index, ::google::protobuf::uint32 value);
  inline void add_areas(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      areas() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_areas();

  // @@protoc_insertion_point(class_scope:Cmd.QueryMapArea)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > areas_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static QueryMapArea* default_instance_;
};
// -------------------------------------------------------------------

class NewMapAreaNtf : public ::google::protobuf::Message {
 public:
  NewMapAreaNtf();
  virtual ~NewMapAreaNtf();

  NewMapAreaNtf(const NewMapAreaNtf& from);

  inline NewMapAreaNtf& operator=(const NewMapAreaNtf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NewMapAreaNtf& default_instance();

  void Swap(NewMapAreaNtf* other);

  // implements Message ----------------------------------------------

  NewMapAreaNtf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NewMapAreaNtf& from);
  void MergeFrom(const NewMapAreaNtf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_NEW_MAPAREA];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional uint32 area = 3 [default = 0];
  inline bool has_area() const;
  inline void clear_area();
  static const int kAreaFieldNumber = 3;
  inline ::google::protobuf::uint32 area() const;
  inline void set_area(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.NewMapAreaNtf)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_area();
  inline void clear_has_area();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 area_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static NewMapAreaNtf* default_instance_;
};
// -------------------------------------------------------------------

class BuffForeverCmd : public ::google::protobuf::Message {
 public:
  BuffForeverCmd();
  virtual ~BuffForeverCmd();

  BuffForeverCmd(const BuffForeverCmd& from);

  inline BuffForeverCmd& operator=(const BuffForeverCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuffForeverCmd& default_instance();

  void Swap(BuffForeverCmd* other);

  // implements Message ----------------------------------------------

  BuffForeverCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuffForeverCmd& from);
  void MergeFrom(const BuffForeverCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_FOREVER_BUFF];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // repeated .Cmd.BufferData buff = 3;
  inline int buff_size() const;
  inline void clear_buff();
  static const int kBuffFieldNumber = 3;
  inline const ::Cmd::BufferData& buff(int index) const;
  inline ::Cmd::BufferData* mutable_buff(int index);
  inline ::Cmd::BufferData* add_buff();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::BufferData >&
      buff() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::BufferData >*
      mutable_buff();

  // @@protoc_insertion_point(class_scope:Cmd.BuffForeverCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::BufferData > buff_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static BuffForeverCmd* default_instance_;
};
// -------------------------------------------------------------------

class InviteJoinHandsUserCmd : public ::google::protobuf::Message {
 public:
  InviteJoinHandsUserCmd();
  virtual ~InviteJoinHandsUserCmd();

  InviteJoinHandsUserCmd(const InviteJoinHandsUserCmd& from);

  inline InviteJoinHandsUserCmd& operator=(const InviteJoinHandsUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InviteJoinHandsUserCmd& default_instance();

  void Swap(InviteJoinHandsUserCmd* other);

  // implements Message ----------------------------------------------

  InviteJoinHandsUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InviteJoinHandsUserCmd& from);
  void MergeFrom(const InviteJoinHandsUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_INVITE_JOIN_HANDS];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional uint64 charid = 3 [default = 0];
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 3;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional uint64 masterid = 4 [default = 0];
  inline bool has_masterid() const;
  inline void clear_masterid();
  static const int kMasteridFieldNumber = 4;
  inline ::google::protobuf::uint64 masterid() const;
  inline void set_masterid(::google::protobuf::uint64 value);

  // optional uint32 time = 5 [default = 0];
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 5;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional string mastername = 6;
  inline bool has_mastername() const;
  inline void clear_mastername();
  static const int kMasternameFieldNumber = 6;
  inline const ::std::string& mastername() const;
  inline void set_mastername(const ::std::string& value);
  inline void set_mastername(const char* value);
  inline void set_mastername(const char* value, size_t size);
  inline ::std::string* mutable_mastername();
  inline ::std::string* release_mastername();
  inline void set_allocated_mastername(::std::string* mastername);

  // optional bytes sign = 7;
  inline bool has_sign() const;
  inline void clear_sign();
  static const int kSignFieldNumber = 7;
  inline const ::std::string& sign() const;
  inline void set_sign(const ::std::string& value);
  inline void set_sign(const char* value);
  inline void set_sign(const void* value, size_t size);
  inline ::std::string* mutable_sign();
  inline ::std::string* release_sign();
  inline void set_allocated_sign(::std::string* sign);

  // @@protoc_insertion_point(class_scope:Cmd.InviteJoinHandsUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_masterid();
  inline void clear_has_masterid();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_mastername();
  inline void clear_has_mastername();
  inline void set_has_sign();
  inline void clear_has_sign();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 charid_;
  ::google::protobuf::uint64 masterid_;
  ::std::string* mastername_;
  ::std::string* sign_;
  ::google::protobuf::uint32 time_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static InviteJoinHandsUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class BreakUpHandsUserCmd : public ::google::protobuf::Message {
 public:
  BreakUpHandsUserCmd();
  virtual ~BreakUpHandsUserCmd();

  BreakUpHandsUserCmd(const BreakUpHandsUserCmd& from);

  inline BreakUpHandsUserCmd& operator=(const BreakUpHandsUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BreakUpHandsUserCmd& default_instance();

  void Swap(BreakUpHandsUserCmd* other);

  // implements Message ----------------------------------------------

  BreakUpHandsUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BreakUpHandsUserCmd& from);
  void MergeFrom(const BreakUpHandsUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_BREAK_UP_HANDS];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // @@protoc_insertion_point(class_scope:Cmd.BreakUpHandsUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static BreakUpHandsUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class HandStatusUserCmd : public ::google::protobuf::Message {
 public:
  HandStatusUserCmd();
  virtual ~HandStatusUserCmd();

  HandStatusUserCmd(const HandStatusUserCmd& from);

  inline HandStatusUserCmd& operator=(const HandStatusUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HandStatusUserCmd& default_instance();

  void Swap(HandStatusUserCmd* other);

  // implements Message ----------------------------------------------

  HandStatusUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HandStatusUserCmd& from);
  void MergeFrom(const HandStatusUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_HANDSTATUS];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional bool build = 3 [default = true];
  inline bool has_build() const;
  inline void clear_build();
  static const int kBuildFieldNumber = 3;
  inline bool build() const;
  inline void set_build(bool value);

  // optional uint64 masterid = 4 [default = 0];
  inline bool has_masterid() const;
  inline void clear_masterid();
  static const int kMasteridFieldNumber = 4;
  inline ::google::protobuf::uint64 masterid() const;
  inline void set_masterid(::google::protobuf::uint64 value);

  // optional uint64 followid = 5 [default = 0];
  inline bool has_followid() const;
  inline void clear_followid();
  static const int kFollowidFieldNumber = 5;
  inline ::google::protobuf::uint64 followid() const;
  inline void set_followid(::google::protobuf::uint64 value);

  // optional uint32 type = 6 [default = 0];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 6;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.HandStatusUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_build();
  inline void clear_has_build();
  inline void set_has_masterid();
  inline void clear_has_masterid();
  inline void set_has_followid();
  inline void clear_has_followid();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 masterid_;
  bool build_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint64 followid_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static HandStatusUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class QueryShow : public ::google::protobuf::Message {
 public:
  QueryShow();
  virtual ~QueryShow();

  QueryShow(const QueryShow& from);

  inline QueryShow& operator=(const QueryShow& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryShow& default_instance();

  void Swap(QueryShow* other);

  // implements Message ----------------------------------------------

  QueryShow* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryShow& from);
  void MergeFrom(const QueryShow& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_QUERY_ACTION];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // repeated uint32 actionid = 3;
  inline int actionid_size() const;
  inline void clear_actionid();
  static const int kActionidFieldNumber = 3;
  inline ::google::protobuf::uint32 actionid(int index) const;
  inline void set_actionid(int index, ::google::protobuf::uint32 value);
  inline void add_actionid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      actionid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_actionid();

  // repeated uint32 expression = 4;
  inline int expression_size() const;
  inline void clear_expression();
  static const int kExpressionFieldNumber = 4;
  inline ::google::protobuf::uint32 expression(int index) const;
  inline void set_expression(int index, ::google::protobuf::uint32 value);
  inline void add_expression(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      expression() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_expression();

  // @@protoc_insertion_point(class_scope:Cmd.QueryShow)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > actionid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > expression_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static QueryShow* default_instance_;
};
// -------------------------------------------------------------------

class MusicItem : public ::google::protobuf::Message {
 public:
  MusicItem();
  virtual ~MusicItem();

  MusicItem(const MusicItem& from);

  inline MusicItem& operator=(const MusicItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MusicItem& default_instance();

  void Swap(MusicItem* other);

  // implements Message ----------------------------------------------

  MusicItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MusicItem& from);
  void MergeFrom(const MusicItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 charid = 1 [default = 0];
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional uint32 demandtime = 2 [default = 0];
  inline bool has_demandtime() const;
  inline void clear_demandtime();
  static const int kDemandtimeFieldNumber = 2;
  inline ::google::protobuf::uint32 demandtime() const;
  inline void set_demandtime(::google::protobuf::uint32 value);

  // optional uint32 mapid = 3 [default = 0];
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapidFieldNumber = 3;
  inline ::google::protobuf::uint32 mapid() const;
  inline void set_mapid(::google::protobuf::uint32 value);

  // optional uint32 npcid = 4 [default = 0];
  inline bool has_npcid() const;
  inline void clear_npcid();
  static const int kNpcidFieldNumber = 4;
  inline ::google::protobuf::uint32 npcid() const;
  inline void set_npcid(::google::protobuf::uint32 value);

  // optional uint32 musicid = 5 [default = 0];
  inline bool has_musicid() const;
  inline void clear_musicid();
  static const int kMusicidFieldNumber = 5;
  inline ::google::protobuf::uint32 musicid() const;
  inline void set_musicid(::google::protobuf::uint32 value);

  // optional uint32 starttime = 6 [default = 0];
  inline bool has_starttime() const;
  inline void clear_starttime();
  static const int kStarttimeFieldNumber = 6;
  inline ::google::protobuf::uint32 starttime() const;
  inline void set_starttime(::google::protobuf::uint32 value);

  // optional uint32 endtime = 7 [default = 0];
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndtimeFieldNumber = 7;
  inline ::google::protobuf::uint32 endtime() const;
  inline void set_endtime(::google::protobuf::uint32 value);

  // optional uint32 status = 8 [default = 0];
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 8;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);

  // optional string name = 9;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 9;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:Cmd.MusicItem)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_demandtime();
  inline void clear_has_demandtime();
  inline void set_has_mapid();
  inline void clear_has_mapid();
  inline void set_has_npcid();
  inline void clear_has_npcid();
  inline void set_has_musicid();
  inline void clear_has_musicid();
  inline void set_has_starttime();
  inline void clear_has_starttime();
  inline void set_has_endtime();
  inline void clear_has_endtime();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 charid_;
  ::google::protobuf::uint32 demandtime_;
  ::google::protobuf::uint32 mapid_;
  ::google::protobuf::uint32 npcid_;
  ::google::protobuf::uint32 musicid_;
  ::google::protobuf::uint32 starttime_;
  ::google::protobuf::uint32 endtime_;
  ::std::string* name_;
  ::google::protobuf::uint32 status_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static MusicItem* default_instance_;
};
// -------------------------------------------------------------------

class QueryMusicList : public ::google::protobuf::Message {
 public:
  QueryMusicList();
  virtual ~QueryMusicList();

  QueryMusicList(const QueryMusicList& from);

  inline QueryMusicList& operator=(const QueryMusicList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryMusicList& default_instance();

  void Swap(QueryMusicList* other);

  // implements Message ----------------------------------------------

  QueryMusicList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryMusicList& from);
  void MergeFrom(const QueryMusicList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_MUSIC_LIST];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional uint64 npcid = 3 [default = 0];
  inline bool has_npcid() const;
  inline void clear_npcid();
  static const int kNpcidFieldNumber = 3;
  inline ::google::protobuf::uint64 npcid() const;
  inline void set_npcid(::google::protobuf::uint64 value);

  // repeated .Cmd.MusicItem items = 4;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 4;
  inline const ::Cmd::MusicItem& items(int index) const;
  inline ::Cmd::MusicItem* mutable_items(int index);
  inline ::Cmd::MusicItem* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::MusicItem >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::MusicItem >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:Cmd.QueryMusicList)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_npcid();
  inline void clear_has_npcid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 npcid_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::MusicItem > items_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static QueryMusicList* default_instance_;
};
// -------------------------------------------------------------------

class DemandMusic : public ::google::protobuf::Message {
 public:
  DemandMusic();
  virtual ~DemandMusic();

  DemandMusic(const DemandMusic& from);

  inline DemandMusic& operator=(const DemandMusic& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DemandMusic& default_instance();

  void Swap(DemandMusic* other);

  // implements Message ----------------------------------------------

  DemandMusic* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DemandMusic& from);
  void MergeFrom(const DemandMusic& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_MUSIC_DEMAND];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional uint64 npcid = 3 [default = 0];
  inline bool has_npcid() const;
  inline void clear_npcid();
  static const int kNpcidFieldNumber = 3;
  inline ::google::protobuf::uint64 npcid() const;
  inline void set_npcid(::google::protobuf::uint64 value);

  // optional uint32 musicid = 4 [default = 0];
  inline bool has_musicid() const;
  inline void clear_musicid();
  static const int kMusicidFieldNumber = 4;
  inline ::google::protobuf::uint32 musicid() const;
  inline void set_musicid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.DemandMusic)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_npcid();
  inline void clear_has_npcid();
  inline void set_has_musicid();
  inline void clear_has_musicid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 npcid_;
  ::google::protobuf::uint32 musicid_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static DemandMusic* default_instance_;
};
// -------------------------------------------------------------------

class CloseMusicFrame : public ::google::protobuf::Message {
 public:
  CloseMusicFrame();
  virtual ~CloseMusicFrame();

  CloseMusicFrame(const CloseMusicFrame& from);

  inline CloseMusicFrame& operator=(const CloseMusicFrame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CloseMusicFrame& default_instance();

  void Swap(CloseMusicFrame* other);

  // implements Message ----------------------------------------------

  CloseMusicFrame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CloseMusicFrame& from);
  void MergeFrom(const CloseMusicFrame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_MUSIC_CLOSE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // @@protoc_insertion_point(class_scope:Cmd.CloseMusicFrame)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static CloseMusicFrame* default_instance_;
};
// -------------------------------------------------------------------

class UploadOkSceneryUserCmd : public ::google::protobuf::Message {
 public:
  UploadOkSceneryUserCmd();
  virtual ~UploadOkSceneryUserCmd();

  UploadOkSceneryUserCmd(const UploadOkSceneryUserCmd& from);

  inline UploadOkSceneryUserCmd& operator=(const UploadOkSceneryUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UploadOkSceneryUserCmd& default_instance();

  void Swap(UploadOkSceneryUserCmd* other);

  // implements Message ----------------------------------------------

  UploadOkSceneryUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UploadOkSceneryUserCmd& from);
  void MergeFrom(const UploadOkSceneryUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_UPLOAD_OK_SCENERY];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional uint32 sceneryid = 3 [default = 0];
  inline bool has_sceneryid() const;
  inline void clear_sceneryid();
  static const int kSceneryidFieldNumber = 3;
  inline ::google::protobuf::uint32 sceneryid() const;
  inline void set_sceneryid(::google::protobuf::uint32 value);

  // optional uint32 status = 4 [default = 0];
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 4;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);

  // optional uint32 anglez = 5 [default = 0];
  inline bool has_anglez() const;
  inline void clear_anglez();
  static const int kAnglezFieldNumber = 5;
  inline ::google::protobuf::uint32 anglez() const;
  inline void set_anglez(::google::protobuf::uint32 value);

  // optional uint32 time = 6 [default = 0];
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 6;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.UploadOkSceneryUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_sceneryid();
  inline void clear_has_sceneryid();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_anglez();
  inline void clear_has_anglez();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 sceneryid_;
  ::google::protobuf::uint32 status_;
  ::google::protobuf::uint32 anglez_;
  ::google::protobuf::uint32 time_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static UploadOkSceneryUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class JoinHandsUserCmd : public ::google::protobuf::Message {
 public:
  JoinHandsUserCmd();
  virtual ~JoinHandsUserCmd();

  JoinHandsUserCmd(const JoinHandsUserCmd& from);

  inline JoinHandsUserCmd& operator=(const JoinHandsUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JoinHandsUserCmd& default_instance();

  void Swap(JoinHandsUserCmd* other);

  // implements Message ----------------------------------------------

  JoinHandsUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JoinHandsUserCmd& from);
  void MergeFrom(const JoinHandsUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_JOIN_HANDS];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional uint64 masterid = 3 [default = 0];
  inline bool has_masterid() const;
  inline void clear_masterid();
  static const int kMasteridFieldNumber = 3;
  inline ::google::protobuf::uint64 masterid() const;
  inline void set_masterid(::google::protobuf::uint64 value);

  // optional string sign = 4;
  inline bool has_sign() const;
  inline void clear_sign();
  static const int kSignFieldNumber = 4;
  inline const ::std::string& sign() const;
  inline void set_sign(const ::std::string& value);
  inline void set_sign(const char* value);
  inline void set_sign(const char* value, size_t size);
  inline ::std::string* mutable_sign();
  inline ::std::string* release_sign();
  inline void set_allocated_sign(::std::string* sign);

  // optional uint32 time = 5 [default = 0];
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 5;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.JoinHandsUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_masterid();
  inline void clear_has_masterid();
  inline void set_has_sign();
  inline void clear_has_sign();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 masterid_;
  ::std::string* sign_;
  ::google::protobuf::uint32 time_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static JoinHandsUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class TraceItem : public ::google::protobuf::Message {
 public:
  TraceItem();
  virtual ~TraceItem();

  TraceItem(const TraceItem& from);

  inline TraceItem& operator=(const TraceItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TraceItem& default_instance();

  void Swap(TraceItem* other);

  // implements Message ----------------------------------------------

  TraceItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TraceItem& from);
  void MergeFrom(const TraceItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 itemid = 1 [default = 0];
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 1;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint32 monsterid = 2 [default = 0];
  inline bool has_monsterid() const;
  inline void clear_monsterid();
  static const int kMonsteridFieldNumber = 2;
  inline ::google::protobuf::uint32 monsterid() const;
  inline void set_monsterid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.TraceItem)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_monsterid();
  inline void clear_has_monsterid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 monsterid_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static TraceItem* default_instance_;
};
// -------------------------------------------------------------------

class QueryTraceList : public ::google::protobuf::Message {
 public:
  QueryTraceList();
  virtual ~QueryTraceList();

  QueryTraceList(const QueryTraceList& from);

  inline QueryTraceList& operator=(const QueryTraceList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryTraceList& default_instance();

  void Swap(QueryTraceList* other);

  // implements Message ----------------------------------------------

  QueryTraceList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryTraceList& from);
  void MergeFrom(const QueryTraceList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_QUERY_TRACE_LIST];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // repeated .Cmd.TraceItem items = 3;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 3;
  inline const ::Cmd::TraceItem& items(int index) const;
  inline ::Cmd::TraceItem* mutable_items(int index);
  inline ::Cmd::TraceItem* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::TraceItem >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::TraceItem >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:Cmd.QueryTraceList)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::TraceItem > items_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static QueryTraceList* default_instance_;
};
// -------------------------------------------------------------------

class UpdateTraceList : public ::google::protobuf::Message {
 public:
  UpdateTraceList();
  virtual ~UpdateTraceList();

  UpdateTraceList(const UpdateTraceList& from);

  inline UpdateTraceList& operator=(const UpdateTraceList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateTraceList& default_instance();

  void Swap(UpdateTraceList* other);

  // implements Message ----------------------------------------------

  UpdateTraceList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateTraceList& from);
  void MergeFrom(const UpdateTraceList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_UPDATE_TRACE_LIST];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // repeated .Cmd.TraceItem updates = 3;
  inline int updates_size() const;
  inline void clear_updates();
  static const int kUpdatesFieldNumber = 3;
  inline const ::Cmd::TraceItem& updates(int index) const;
  inline ::Cmd::TraceItem* mutable_updates(int index);
  inline ::Cmd::TraceItem* add_updates();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::TraceItem >&
      updates() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::TraceItem >*
      mutable_updates();

  // repeated uint32 dels = 4;
  inline int dels_size() const;
  inline void clear_dels();
  static const int kDelsFieldNumber = 4;
  inline ::google::protobuf::uint32 dels(int index) const;
  inline void set_dels(int index, ::google::protobuf::uint32 value);
  inline void add_dels(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      dels() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_dels();

  // @@protoc_insertion_point(class_scope:Cmd.UpdateTraceList)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::TraceItem > updates_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > dels_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static UpdateTraceList* default_instance_;
};
// -------------------------------------------------------------------

class SetDirection : public ::google::protobuf::Message {
 public:
  SetDirection();
  virtual ~SetDirection();

  SetDirection(const SetDirection& from);

  inline SetDirection& operator=(const SetDirection& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetDirection& default_instance();

  void Swap(SetDirection* other);

  // implements Message ----------------------------------------------

  SetDirection* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetDirection& from);
  void MergeFrom(const SetDirection& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SET_DIRECTION];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional uint32 dir = 3 [default = 0];
  inline bool has_dir() const;
  inline void clear_dir();
  static const int kDirFieldNumber = 3;
  inline ::google::protobuf::uint32 dir() const;
  inline void set_dir(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.SetDirection)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_dir();
  inline void clear_has_dir();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 dir_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static SetDirection* default_instance_;
};
// -------------------------------------------------------------------

class BattleTimelenUserCmd : public ::google::protobuf::Message {
 public:
  BattleTimelenUserCmd();
  virtual ~BattleTimelenUserCmd();

  BattleTimelenUserCmd(const BattleTimelenUserCmd& from);

  inline BattleTimelenUserCmd& operator=(const BattleTimelenUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BattleTimelenUserCmd& default_instance();

  void Swap(BattleTimelenUserCmd* other);

  // implements Message ----------------------------------------------

  BattleTimelenUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BattleTimelenUserCmd& from);
  void MergeFrom(const BattleTimelenUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_BATTLE_TIMELEN_USER_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional uint32 timelen = 3 [default = 0];
  inline bool has_timelen() const;
  inline void clear_timelen();
  static const int kTimelenFieldNumber = 3;
  inline ::google::protobuf::uint32 timelen() const;
  inline void set_timelen(::google::protobuf::uint32 value);

  // optional uint32 totaltime = 4 [default = 0];
  inline bool has_totaltime() const;
  inline void clear_totaltime();
  static const int kTotaltimeFieldNumber = 4;
  inline ::google::protobuf::uint32 totaltime() const;
  inline void set_totaltime(::google::protobuf::uint32 value);

  // optional uint32 musictime = 5 [default = 0];
  inline bool has_musictime() const;
  inline void clear_musictime();
  static const int kMusictimeFieldNumber = 5;
  inline ::google::protobuf::uint32 musictime() const;
  inline void set_musictime(::google::protobuf::uint32 value);

  // optional uint32 tutortime = 6 [default = 0];
  inline bool has_tutortime() const;
  inline void clear_tutortime();
  static const int kTutortimeFieldNumber = 6;
  inline ::google::protobuf::uint32 tutortime() const;
  inline void set_tutortime(::google::protobuf::uint32 value);

  // optional .Cmd.EBattleStatus estatus = 7 [default = EBATTLESTATUS_EASY];
  inline bool has_estatus() const;
  inline void clear_estatus();
  static const int kEstatusFieldNumber = 7;
  inline ::Cmd::EBattleStatus estatus() const;
  inline void set_estatus(::Cmd::EBattleStatus value);

  // @@protoc_insertion_point(class_scope:Cmd.BattleTimelenUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_timelen();
  inline void clear_has_timelen();
  inline void set_has_totaltime();
  inline void clear_has_totaltime();
  inline void set_has_musictime();
  inline void clear_has_musictime();
  inline void set_has_tutortime();
  inline void clear_has_tutortime();
  inline void set_has_estatus();
  inline void clear_has_estatus();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 timelen_;
  ::google::protobuf::uint32 totaltime_;
  ::google::protobuf::uint32 musictime_;
  ::google::protobuf::uint32 tutortime_;
  int estatus_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static BattleTimelenUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class SetOptionUserCmd : public ::google::protobuf::Message {
 public:
  SetOptionUserCmd();
  virtual ~SetOptionUserCmd();

  SetOptionUserCmd(const SetOptionUserCmd& from);

  inline SetOptionUserCmd& operator=(const SetOptionUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetOptionUserCmd& default_instance();

  void Swap(SetOptionUserCmd* other);

  // implements Message ----------------------------------------------

  SetOptionUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetOptionUserCmd& from);
  void MergeFrom(const SetOptionUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SETOPTION];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional .Cmd.EQueryType type = 3 [default = EQUERYTYPE_MIN];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::Cmd::EQueryType type() const;
  inline void set_type(::Cmd::EQueryType value);

  // optional uint32 fashionhide = 4 [default = 0];
  inline bool has_fashionhide() const;
  inline void clear_fashionhide();
  static const int kFashionhideFieldNumber = 4;
  inline ::google::protobuf::uint32 fashionhide() const;
  inline void set_fashionhide(::google::protobuf::uint32 value);

  // optional .Cmd.EQueryType wedding_type = 5 [default = EQUERYTYPE_MIN];
  inline bool has_wedding_type() const;
  inline void clear_wedding_type();
  static const int kWeddingTypeFieldNumber = 5;
  inline ::Cmd::EQueryType wedding_type() const;
  inline void set_wedding_type(::Cmd::EQueryType value);

  // @@protoc_insertion_point(class_scope:Cmd.SetOptionUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_fashionhide();
  inline void clear_has_fashionhide();
  inline void set_has_wedding_type();
  inline void clear_has_wedding_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  int type_;
  ::google::protobuf::uint32 fashionhide_;
  int wedding_type_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static SetOptionUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class QueryUserInfoUserCmd : public ::google::protobuf::Message {
 public:
  QueryUserInfoUserCmd();
  virtual ~QueryUserInfoUserCmd();

  QueryUserInfoUserCmd(const QueryUserInfoUserCmd& from);

  inline QueryUserInfoUserCmd& operator=(const QueryUserInfoUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryUserInfoUserCmd& default_instance();

  void Swap(QueryUserInfoUserCmd* other);

  // implements Message ----------------------------------------------

  QueryUserInfoUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryUserInfoUserCmd& from);
  void MergeFrom(const QueryUserInfoUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_QUERYUSERINFO];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional uint64 charid = 3 [default = 0];
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 3;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional uint64 teamid = 4 [default = 0];
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamidFieldNumber = 4;
  inline ::google::protobuf::uint64 teamid() const;
  inline void set_teamid(::google::protobuf::uint64 value);

  // optional bool blink = 5 [default = false];
  inline bool has_blink() const;
  inline void clear_blink();
  static const int kBlinkFieldNumber = 5;
  inline bool blink() const;
  inline void set_blink(bool value);

  // @@protoc_insertion_point(class_scope:Cmd.QueryUserInfoUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_blink();
  inline void clear_has_blink();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 charid_;
  ::google::protobuf::uint64 teamid_;
  bool blink_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static QueryUserInfoUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class CountDownTickUserCmd : public ::google::protobuf::Message {
 public:
  CountDownTickUserCmd();
  virtual ~CountDownTickUserCmd();

  CountDownTickUserCmd(const CountDownTickUserCmd& from);

  inline CountDownTickUserCmd& operator=(const CountDownTickUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CountDownTickUserCmd& default_instance();

  void Swap(CountDownTickUserCmd* other);

  // implements Message ----------------------------------------------

  CountDownTickUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CountDownTickUserCmd& from);
  void MergeFrom(const CountDownTickUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_COUNTDOWN_TICK];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional .Cmd.ECountDownType type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::Cmd::ECountDownType type() const;
  inline void set_type(::Cmd::ECountDownType value);

  // optional uint32 tick = 4;
  inline bool has_tick() const;
  inline void clear_tick();
  static const int kTickFieldNumber = 4;
  inline ::google::protobuf::uint32 tick() const;
  inline void set_tick(::google::protobuf::uint32 value);

  // optional uint32 time = 5;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 5;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional string sign = 6;
  inline bool has_sign() const;
  inline void clear_sign();
  static const int kSignFieldNumber = 6;
  inline const ::std::string& sign() const;
  inline void set_sign(const ::std::string& value);
  inline void set_sign(const char* value);
  inline void set_sign(const char* value, size_t size);
  inline ::std::string* mutable_sign();
  inline ::std::string* release_sign();
  inline void set_allocated_sign(::std::string* sign);

  // optional uint32 extparam = 7;
  inline bool has_extparam() const;
  inline void clear_extparam();
  static const int kExtparamFieldNumber = 7;
  inline ::google::protobuf::uint32 extparam() const;
  inline void set_extparam(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.CountDownTickUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_tick();
  inline void clear_has_tick();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_sign();
  inline void clear_has_sign();
  inline void set_has_extparam();
  inline void clear_has_extparam();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  int type_;
  ::google::protobuf::uint32 tick_;
  ::std::string* sign_;
  ::google::protobuf::uint32 time_;
  ::google::protobuf::uint32 extparam_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static CountDownTickUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class ItemMusicNtfUserCmd : public ::google::protobuf::Message {
 public:
  ItemMusicNtfUserCmd();
  virtual ~ItemMusicNtfUserCmd();

  ItemMusicNtfUserCmd(const ItemMusicNtfUserCmd& from);

  inline ItemMusicNtfUserCmd& operator=(const ItemMusicNtfUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ItemMusicNtfUserCmd& default_instance();

  void Swap(ItemMusicNtfUserCmd* other);

  // implements Message ----------------------------------------------

  ItemMusicNtfUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ItemMusicNtfUserCmd& from);
  void MergeFrom(const ItemMusicNtfUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_ITEM_MUSIC_NTF];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional bool add = 3;
  inline bool has_add() const;
  inline void clear_add();
  static const int kAddFieldNumber = 3;
  inline bool add() const;
  inline void set_add(bool value);

  // optional string uri = 4;
  inline bool has_uri() const;
  inline void clear_uri();
  static const int kUriFieldNumber = 4;
  inline const ::std::string& uri() const;
  inline void set_uri(const ::std::string& value);
  inline void set_uri(const char* value);
  inline void set_uri(const char* value, size_t size);
  inline ::std::string* mutable_uri();
  inline ::std::string* release_uri();
  inline void set_allocated_uri(::std::string* uri);

  // optional uint32 starttime = 5;
  inline bool has_starttime() const;
  inline void clear_starttime();
  static const int kStarttimeFieldNumber = 5;
  inline ::google::protobuf::uint32 starttime() const;
  inline void set_starttime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.ItemMusicNtfUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_add();
  inline void clear_has_add();
  inline void set_has_uri();
  inline void clear_has_uri();
  inline void set_has_starttime();
  inline void clear_has_starttime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::std::string* uri_;
  bool add_;
  ::google::protobuf::uint32 starttime_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static ItemMusicNtfUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class ShakeTreeUserCmd : public ::google::protobuf::Message {
 public:
  ShakeTreeUserCmd();
  virtual ~ShakeTreeUserCmd();

  ShakeTreeUserCmd(const ShakeTreeUserCmd& from);

  inline ShakeTreeUserCmd& operator=(const ShakeTreeUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShakeTreeUserCmd& default_instance();

  void Swap(ShakeTreeUserCmd* other);

  // implements Message ----------------------------------------------

  ShakeTreeUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ShakeTreeUserCmd& from);
  void MergeFrom(const ShakeTreeUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SHAKETREE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional uint64 npcid = 3 [default = 0];
  inline bool has_npcid() const;
  inline void clear_npcid();
  static const int kNpcidFieldNumber = 3;
  inline ::google::protobuf::uint64 npcid() const;
  inline void set_npcid(::google::protobuf::uint64 value);

  // optional .Cmd.ETreeStatus result = 4 [default = ETREESTATUS_MIN];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 4;
  inline ::Cmd::ETreeStatus result() const;
  inline void set_result(::Cmd::ETreeStatus value);

  // @@protoc_insertion_point(class_scope:Cmd.ShakeTreeUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_npcid();
  inline void clear_has_npcid();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 npcid_;
  int result_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static ShakeTreeUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class Tree : public ::google::protobuf::Message {
 public:
  Tree();
  virtual ~Tree();

  Tree(const Tree& from);

  inline Tree& operator=(const Tree& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Tree& default_instance();

  void Swap(Tree* other);

  // implements Message ----------------------------------------------

  Tree* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Tree& from);
  void MergeFrom(const Tree& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 id = 1 [default = 0];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional uint32 typeid = 2 [default = 0];
  inline bool has_typeid_() const;
  inline void clear_typeid_();
  static const int kTypeidFieldNumber = 2;
  inline ::google::protobuf::uint32 typeid_() const;
  inline void set_typeid_(::google::protobuf::uint32 value);

  // optional .Cmd.ScenePos pos = 3;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 3;
  inline const ::Cmd::ScenePos& pos() const;
  inline ::Cmd::ScenePos* mutable_pos();
  inline ::Cmd::ScenePos* release_pos();
  inline void set_allocated_pos(::Cmd::ScenePos* pos);

  // @@protoc_insertion_point(class_scope:Cmd.Tree)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_typeid_();
  inline void clear_has_typeid_();
  inline void set_has_pos();
  inline void clear_has_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 id_;
  ::Cmd::ScenePos* pos_;
  ::google::protobuf::uint32 typeid__;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static Tree* default_instance_;
};
// -------------------------------------------------------------------

class TreeListUserCmd : public ::google::protobuf::Message {
 public:
  TreeListUserCmd();
  virtual ~TreeListUserCmd();

  TreeListUserCmd(const TreeListUserCmd& from);

  inline TreeListUserCmd& operator=(const TreeListUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TreeListUserCmd& default_instance();

  void Swap(TreeListUserCmd* other);

  // implements Message ----------------------------------------------

  TreeListUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TreeListUserCmd& from);
  void MergeFrom(const TreeListUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_TREELIST];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // repeated .Cmd.Tree updates = 3;
  inline int updates_size() const;
  inline void clear_updates();
  static const int kUpdatesFieldNumber = 3;
  inline const ::Cmd::Tree& updates(int index) const;
  inline ::Cmd::Tree* mutable_updates(int index);
  inline ::Cmd::Tree* add_updates();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::Tree >&
      updates() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::Tree >*
      mutable_updates();

  // repeated uint64 dels = 4;
  inline int dels_size() const;
  inline void clear_dels();
  static const int kDelsFieldNumber = 4;
  inline ::google::protobuf::uint64 dels(int index) const;
  inline void set_dels(int index, ::google::protobuf::uint64 value);
  inline void add_dels(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      dels() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_dels();

  // @@protoc_insertion_point(class_scope:Cmd.TreeListUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::Tree > updates_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > dels_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static TreeListUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class ActivityNtfUserCmd : public ::google::protobuf::Message {
 public:
  ActivityNtfUserCmd();
  virtual ~ActivityNtfUserCmd();

  ActivityNtfUserCmd(const ActivityNtfUserCmd& from);

  inline ActivityNtfUserCmd& operator=(const ActivityNtfUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActivityNtfUserCmd& default_instance();

  void Swap(ActivityNtfUserCmd* other);

  // implements Message ----------------------------------------------

  ActivityNtfUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActivityNtfUserCmd& from);
  void MergeFrom(const ActivityNtfUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_ACTIVITY_NTF];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional uint32 id = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 mapid = 4 [default = 0];
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapidFieldNumber = 4;
  inline ::google::protobuf::uint32 mapid() const;
  inline void set_mapid(::google::protobuf::uint32 value);

  // optional uint32 endtime = 5 [default = 0];
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndtimeFieldNumber = 5;
  inline ::google::protobuf::uint32 endtime() const;
  inline void set_endtime(::google::protobuf::uint32 value);

  // optional uint32 progress = 6;
  inline bool has_progress() const;
  inline void clear_progress();
  static const int kProgressFieldNumber = 6;
  inline ::google::protobuf::uint32 progress() const;
  inline void set_progress(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.ActivityNtfUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_mapid();
  inline void clear_has_mapid();
  inline void set_has_endtime();
  inline void clear_has_endtime();
  inline void set_has_progress();
  inline void clear_has_progress();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 mapid_;
  ::google::protobuf::uint32 endtime_;
  ::google::protobuf::uint32 progress_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static ActivityNtfUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class ZoneInfo : public ::google::protobuf::Message {
 public:
  ZoneInfo();
  virtual ~ZoneInfo();

  ZoneInfo(const ZoneInfo& from);

  inline ZoneInfo& operator=(const ZoneInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ZoneInfo& default_instance();

  void Swap(ZoneInfo* other);

  // implements Message ----------------------------------------------

  ZoneInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ZoneInfo& from);
  void MergeFrom(const ZoneInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 zoneid = 1 [default = 0];
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 1;
  inline ::google::protobuf::uint32 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint32 value);

  // optional uint32 maxbaselv = 2 [default = 0];
  inline bool has_maxbaselv() const;
  inline void clear_maxbaselv();
  static const int kMaxbaselvFieldNumber = 2;
  inline ::google::protobuf::uint32 maxbaselv() const;
  inline void set_maxbaselv(::google::protobuf::uint32 value);

  // optional .Cmd.EZoneStatus status = 3 [default = EZONESTATUS_MIN];
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 3;
  inline ::Cmd::EZoneStatus status() const;
  inline void set_status(::Cmd::EZoneStatus value);

  // optional .Cmd.EZoneState state = 4 [default = EZONESTATE_MIN];
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 4;
  inline ::Cmd::EZoneState state() const;
  inline void set_state(::Cmd::EZoneState value);

  // @@protoc_insertion_point(class_scope:Cmd.ZoneInfo)
 private:
  inline void set_has_zoneid();
  inline void clear_has_zoneid();
  inline void set_has_maxbaselv();
  inline void clear_has_maxbaselv();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_state();
  inline void clear_has_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 zoneid_;
  ::google::protobuf::uint32 maxbaselv_;
  int status_;
  int state_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static ZoneInfo* default_instance_;
};
// -------------------------------------------------------------------

class RecentZoneInfo : public ::google::protobuf::Message {
 public:
  RecentZoneInfo();
  virtual ~RecentZoneInfo();

  RecentZoneInfo(const RecentZoneInfo& from);

  inline RecentZoneInfo& operator=(const RecentZoneInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RecentZoneInfo& default_instance();

  void Swap(RecentZoneInfo* other);

  // implements Message ----------------------------------------------

  RecentZoneInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecentZoneInfo& from);
  void MergeFrom(const RecentZoneInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.EJumpZone type = 1 [default = EJUMPZONE_MIN];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::Cmd::EJumpZone type() const;
  inline void set_type(::Cmd::EJumpZone value);

  // optional uint32 zoneid = 2 [default = 0];
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 2;
  inline ::google::protobuf::uint32 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.RecentZoneInfo)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_zoneid();
  inline void clear_has_zoneid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int type_;
  ::google::protobuf::uint32 zoneid_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static RecentZoneInfo* default_instance_;
};
// -------------------------------------------------------------------

class QueryZoneStatusUserCmd : public ::google::protobuf::Message {
 public:
  QueryZoneStatusUserCmd();
  virtual ~QueryZoneStatusUserCmd();

  QueryZoneStatusUserCmd(const QueryZoneStatusUserCmd& from);

  inline QueryZoneStatusUserCmd& operator=(const QueryZoneStatusUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryZoneStatusUserCmd& default_instance();

  void Swap(QueryZoneStatusUserCmd* other);

  // implements Message ----------------------------------------------

  QueryZoneStatusUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryZoneStatusUserCmd& from);
  void MergeFrom(const QueryZoneStatusUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_QUERY_ZONESTATUS];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // repeated .Cmd.ZoneInfo infos = 3;
  inline int infos_size() const;
  inline void clear_infos();
  static const int kInfosFieldNumber = 3;
  inline const ::Cmd::ZoneInfo& infos(int index) const;
  inline ::Cmd::ZoneInfo* mutable_infos(int index);
  inline ::Cmd::ZoneInfo* add_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ZoneInfo >&
      infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::ZoneInfo >*
      mutable_infos();

  // repeated .Cmd.RecentZoneInfo recents = 4;
  inline int recents_size() const;
  inline void clear_recents();
  static const int kRecentsFieldNumber = 4;
  inline const ::Cmd::RecentZoneInfo& recents(int index) const;
  inline ::Cmd::RecentZoneInfo* mutable_recents(int index);
  inline ::Cmd::RecentZoneInfo* add_recents();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::RecentZoneInfo >&
      recents() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::RecentZoneInfo >*
      mutable_recents();

  // @@protoc_insertion_point(class_scope:Cmd.QueryZoneStatusUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::ZoneInfo > infos_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::RecentZoneInfo > recents_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static QueryZoneStatusUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class JumpZoneUserCmd : public ::google::protobuf::Message {
 public:
  JumpZoneUserCmd();
  virtual ~JumpZoneUserCmd();

  JumpZoneUserCmd(const JumpZoneUserCmd& from);

  inline JumpZoneUserCmd& operator=(const JumpZoneUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JumpZoneUserCmd& default_instance();

  void Swap(JumpZoneUserCmd* other);

  // implements Message ----------------------------------------------

  JumpZoneUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JumpZoneUserCmd& from);
  void MergeFrom(const JumpZoneUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_JUMP_ZONE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional uint64 npcid = 3 [default = 0];
  inline bool has_npcid() const;
  inline void clear_npcid();
  static const int kNpcidFieldNumber = 3;
  inline ::google::protobuf::uint64 npcid() const;
  inline void set_npcid(::google::protobuf::uint64 value);

  // optional uint32 zoneid = 4 [default = 0];
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 4;
  inline ::google::protobuf::uint32 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.JumpZoneUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_npcid();
  inline void clear_has_npcid();
  inline void set_has_zoneid();
  inline void clear_has_zoneid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 npcid_;
  ::google::protobuf::uint32 zoneid_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static JumpZoneUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class ItemImageUserNtfUserCmd : public ::google::protobuf::Message {
 public:
  ItemImageUserNtfUserCmd();
  virtual ~ItemImageUserNtfUserCmd();

  ItemImageUserNtfUserCmd(const ItemImageUserNtfUserCmd& from);

  inline ItemImageUserNtfUserCmd& operator=(const ItemImageUserNtfUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ItemImageUserNtfUserCmd& default_instance();

  void Swap(ItemImageUserNtfUserCmd* other);

  // implements Message ----------------------------------------------

  ItemImageUserNtfUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ItemImageUserNtfUserCmd& from);
  void MergeFrom(const ItemImageUserNtfUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_ITEMIMAGE_USER_NTF];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional uint64 userid = 3 [default = 0];
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 3;
  inline ::google::protobuf::uint64 userid() const;
  inline void set_userid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.ItemImageUserNtfUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_userid();
  inline void clear_has_userid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 userid_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static ItemImageUserNtfUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class InviteFollowUserCmd : public ::google::protobuf::Message {
 public:
  InviteFollowUserCmd();
  virtual ~InviteFollowUserCmd();

  InviteFollowUserCmd(const InviteFollowUserCmd& from);

  inline InviteFollowUserCmd& operator=(const InviteFollowUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InviteFollowUserCmd& default_instance();

  void Swap(InviteFollowUserCmd* other);

  // implements Message ----------------------------------------------

  InviteFollowUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InviteFollowUserCmd& from);
  void MergeFrom(const InviteFollowUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_INVITEFOLLOW];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional uint64 charid = 3 [default = 0];
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 3;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional bool follow = 4 [default = true];
  inline bool has_follow() const;
  inline void clear_follow();
  static const int kFollowFieldNumber = 4;
  inline bool follow() const;
  inline void set_follow(bool value);

  // @@protoc_insertion_point(class_scope:Cmd.InviteFollowUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_follow();
  inline void clear_has_follow();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 charid_;
  bool follow_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static InviteFollowUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class ChangeNameUserCmd : public ::google::protobuf::Message {
 public:
  ChangeNameUserCmd();
  virtual ~ChangeNameUserCmd();

  ChangeNameUserCmd(const ChangeNameUserCmd& from);

  inline ChangeNameUserCmd& operator=(const ChangeNameUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChangeNameUserCmd& default_instance();

  void Swap(ChangeNameUserCmd* other);

  // implements Message ----------------------------------------------

  ChangeNameUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChangeNameUserCmd& from);
  void MergeFrom(const ChangeNameUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_CHANGENAME];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:Cmd.ChangeNameUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::std::string* name_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static ChangeNameUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class ChargePlayUserCmd : public ::google::protobuf::Message {
 public:
  ChargePlayUserCmd();
  virtual ~ChargePlayUserCmd();

  ChargePlayUserCmd(const ChargePlayUserCmd& from);

  inline ChargePlayUserCmd& operator=(const ChargePlayUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChargePlayUserCmd& default_instance();

  void Swap(ChargePlayUserCmd* other);

  // implements Message ----------------------------------------------

  ChargePlayUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChargePlayUserCmd& from);
  void MergeFrom(const ChargePlayUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_CHARGEPLAY];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // repeated uint32 chargeids = 3;
  inline int chargeids_size() const;
  inline void clear_chargeids();
  static const int kChargeidsFieldNumber = 3;
  inline ::google::protobuf::uint32 chargeids(int index) const;
  inline void set_chargeids(int index, ::google::protobuf::uint32 value);
  inline void add_chargeids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      chargeids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_chargeids();

  // @@protoc_insertion_point(class_scope:Cmd.ChargePlayUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > chargeids_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static ChargePlayUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class RequireNpcFuncUserCmd : public ::google::protobuf::Message {
 public:
  RequireNpcFuncUserCmd();
  virtual ~RequireNpcFuncUserCmd();

  RequireNpcFuncUserCmd(const RequireNpcFuncUserCmd& from);

  inline RequireNpcFuncUserCmd& operator=(const RequireNpcFuncUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequireNpcFuncUserCmd& default_instance();

  void Swap(RequireNpcFuncUserCmd* other);

  // implements Message ----------------------------------------------

  RequireNpcFuncUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequireNpcFuncUserCmd& from);
  void MergeFrom(const RequireNpcFuncUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_REQUIRENPCFUNC];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional uint32 npcid = 3 [default = 0];
  inline bool has_npcid() const;
  inline void clear_npcid();
  static const int kNpcidFieldNumber = 3;
  inline ::google::protobuf::uint32 npcid() const;
  inline void set_npcid(::google::protobuf::uint32 value);

  // repeated string functions = 4;
  inline int functions_size() const;
  inline void clear_functions();
  static const int kFunctionsFieldNumber = 4;
  inline const ::std::string& functions(int index) const;
  inline ::std::string* mutable_functions(int index);
  inline void set_functions(int index, const ::std::string& value);
  inline void set_functions(int index, const char* value);
  inline void set_functions(int index, const char* value, size_t size);
  inline ::std::string* add_functions();
  inline void add_functions(const ::std::string& value);
  inline void add_functions(const char* value);
  inline void add_functions(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& functions() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_functions();

  // @@protoc_insertion_point(class_scope:Cmd.RequireNpcFuncUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_npcid();
  inline void clear_has_npcid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedPtrField< ::std::string> functions_;
  ::google::protobuf::uint32 npcid_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static RequireNpcFuncUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class CheckSeatUserCmd : public ::google::protobuf::Message {
 public:
  CheckSeatUserCmd();
  virtual ~CheckSeatUserCmd();

  CheckSeatUserCmd(const CheckSeatUserCmd& from);

  inline CheckSeatUserCmd& operator=(const CheckSeatUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckSeatUserCmd& default_instance();

  void Swap(CheckSeatUserCmd* other);

  // implements Message ----------------------------------------------

  CheckSeatUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CheckSeatUserCmd& from);
  void MergeFrom(const CheckSeatUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_CHECK_SEAT];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional uint32 seatid = 3 [default = 0];
  inline bool has_seatid() const;
  inline void clear_seatid();
  static const int kSeatidFieldNumber = 3;
  inline ::google::protobuf::uint32 seatid() const;
  inline void set_seatid(::google::protobuf::uint32 value);

  // optional bool success = 4;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 4;
  inline bool success() const;
  inline void set_success(bool value);

  // @@protoc_insertion_point(class_scope:Cmd.CheckSeatUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_seatid();
  inline void clear_has_seatid();
  inline void set_has_success();
  inline void clear_has_success();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 seatid_;
  bool success_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static CheckSeatUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class NtfSeatUserCmd : public ::google::protobuf::Message {
 public:
  NtfSeatUserCmd();
  virtual ~NtfSeatUserCmd();

  NtfSeatUserCmd(const NtfSeatUserCmd& from);

  inline NtfSeatUserCmd& operator=(const NtfSeatUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NtfSeatUserCmd& default_instance();

  void Swap(NtfSeatUserCmd* other);

  // implements Message ----------------------------------------------

  NtfSeatUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NtfSeatUserCmd& from);
  void MergeFrom(const NtfSeatUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_NTF_SEAT];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional uint64 charid = 3;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 3;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional uint32 seatid = 4;
  inline bool has_seatid() const;
  inline void clear_seatid();
  static const int kSeatidFieldNumber = 4;
  inline ::google::protobuf::uint32 seatid() const;
  inline void set_seatid(::google::protobuf::uint32 value);

  // optional bool isseatdown = 5;
  inline bool has_isseatdown() const;
  inline void clear_isseatdown();
  static const int kIsseatdownFieldNumber = 5;
  inline bool isseatdown() const;
  inline void set_isseatdown(bool value);

  // @@protoc_insertion_point(class_scope:Cmd.NtfSeatUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_seatid();
  inline void clear_has_seatid();
  inline void set_has_isseatdown();
  inline void clear_has_isseatdown();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 charid_;
  ::google::protobuf::uint32 seatid_;
  bool isseatdown_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static NtfSeatUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class YoyoSeatUserCmd : public ::google::protobuf::Message {
 public:
  YoyoSeatUserCmd();
  virtual ~YoyoSeatUserCmd();

  YoyoSeatUserCmd(const YoyoSeatUserCmd& from);

  inline YoyoSeatUserCmd& operator=(const YoyoSeatUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const YoyoSeatUserCmd& default_instance();

  void Swap(YoyoSeatUserCmd* other);

  // implements Message ----------------------------------------------

  YoyoSeatUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const YoyoSeatUserCmd& from);
  void MergeFrom(const YoyoSeatUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_YOYO_SEAT];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional uint64 guid = 3 [default = 0];
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 3;
  inline ::google::protobuf::uint64 guid() const;
  inline void set_guid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.YoyoSeatUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_guid();
  inline void clear_has_guid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 guid_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static YoyoSeatUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class ShowSeatUserCmd : public ::google::protobuf::Message {
 public:
  ShowSeatUserCmd();
  virtual ~ShowSeatUserCmd();

  ShowSeatUserCmd(const ShowSeatUserCmd& from);

  inline ShowSeatUserCmd& operator=(const ShowSeatUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShowSeatUserCmd& default_instance();

  void Swap(ShowSeatUserCmd* other);

  // implements Message ----------------------------------------------

  ShowSeatUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ShowSeatUserCmd& from);
  void MergeFrom(const ShowSeatUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SHOW_SEAT];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // repeated uint32 seatid = 3;
  inline int seatid_size() const;
  inline void clear_seatid();
  static const int kSeatidFieldNumber = 3;
  inline ::google::protobuf::uint32 seatid(int index) const;
  inline void set_seatid(int index, ::google::protobuf::uint32 value);
  inline void add_seatid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      seatid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_seatid();

  // optional .Cmd.SeatShowType show = 4 [default = SEAT_SHOW_VISIBLE];
  inline bool has_show() const;
  inline void clear_show();
  static const int kShowFieldNumber = 4;
  inline ::Cmd::SeatShowType show() const;
  inline void set_show(::Cmd::SeatShowType value);

  // @@protoc_insertion_point(class_scope:Cmd.ShowSeatUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_show();
  inline void clear_has_show();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > seatid_;
  int show_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static ShowSeatUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class SetNormalSkillOptionUserCmd : public ::google::protobuf::Message {
 public:
  SetNormalSkillOptionUserCmd();
  virtual ~SetNormalSkillOptionUserCmd();

  SetNormalSkillOptionUserCmd(const SetNormalSkillOptionUserCmd& from);

  inline SetNormalSkillOptionUserCmd& operator=(const SetNormalSkillOptionUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetNormalSkillOptionUserCmd& default_instance();

  void Swap(SetNormalSkillOptionUserCmd* other);

  // implements Message ----------------------------------------------

  SetNormalSkillOptionUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetNormalSkillOptionUserCmd& from);
  void MergeFrom(const SetNormalSkillOptionUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SET_NORMALSKILL_OPTION];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional uint32 flag = 3;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 3;
  inline ::google::protobuf::uint32 flag() const;
  inline void set_flag(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.SetNormalSkillOptionUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_flag();
  inline void clear_has_flag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 flag_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static SetNormalSkillOptionUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class NewSetOptionUserCmd : public ::google::protobuf::Message {
 public:
  NewSetOptionUserCmd();
  virtual ~NewSetOptionUserCmd();

  NewSetOptionUserCmd(const NewSetOptionUserCmd& from);

  inline NewSetOptionUserCmd& operator=(const NewSetOptionUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NewSetOptionUserCmd& default_instance();

  void Swap(NewSetOptionUserCmd* other);

  // implements Message ----------------------------------------------

  NewSetOptionUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NewSetOptionUserCmd& from);
  void MergeFrom(const NewSetOptionUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_NEW_SET_OPTION];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional .Cmd.EOptionType type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::Cmd::EOptionType type() const;
  inline void set_type(::Cmd::EOptionType value);

  // optional uint32 flag = 4;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 4;
  inline ::google::protobuf::uint32 flag() const;
  inline void set_flag(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.NewSetOptionUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_flag();
  inline void clear_has_flag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  int type_;
  ::google::protobuf::uint32 flag_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static NewSetOptionUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class UnsolvedSceneryNtfUserCmd : public ::google::protobuf::Message {
 public:
  UnsolvedSceneryNtfUserCmd();
  virtual ~UnsolvedSceneryNtfUserCmd();

  UnsolvedSceneryNtfUserCmd(const UnsolvedSceneryNtfUserCmd& from);

  inline UnsolvedSceneryNtfUserCmd& operator=(const UnsolvedSceneryNtfUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UnsolvedSceneryNtfUserCmd& default_instance();

  void Swap(UnsolvedSceneryNtfUserCmd* other);

  // implements Message ----------------------------------------------

  UnsolvedSceneryNtfUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnsolvedSceneryNtfUserCmd& from);
  void MergeFrom(const UnsolvedSceneryNtfUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_UNSOLVED_SCENERY_NTF];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // repeated uint32 ids = 3;
  inline int ids_size() const;
  inline void clear_ids();
  static const int kIdsFieldNumber = 3;
  inline ::google::protobuf::uint32 ids(int index) const;
  inline void set_ids(int index, ::google::protobuf::uint32 value);
  inline void add_ids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_ids();

  // @@protoc_insertion_point(class_scope:Cmd.UnsolvedSceneryNtfUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > ids_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static UnsolvedSceneryNtfUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class VisibleNpc : public ::google::protobuf::Message {
 public:
  VisibleNpc();
  virtual ~VisibleNpc();

  VisibleNpc(const VisibleNpc& from);

  inline VisibleNpc& operator=(const VisibleNpc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VisibleNpc& default_instance();

  void Swap(VisibleNpc* other);

  // implements Message ----------------------------------------------

  VisibleNpc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VisibleNpc& from);
  void MergeFrom(const VisibleNpc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 npcid = 1 [default = 0];
  inline bool has_npcid() const;
  inline void clear_npcid();
  static const int kNpcidFieldNumber = 1;
  inline ::google::protobuf::uint32 npcid() const;
  inline void set_npcid(::google::protobuf::uint32 value);

  // optional .Cmd.ScenePos pos = 2;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  inline const ::Cmd::ScenePos& pos() const;
  inline ::Cmd::ScenePos* mutable_pos();
  inline ::Cmd::ScenePos* release_pos();
  inline void set_allocated_pos(::Cmd::ScenePos* pos);

  // optional uint64 uniqueid = 3 [default = 0];
  inline bool has_uniqueid() const;
  inline void clear_uniqueid();
  static const int kUniqueidFieldNumber = 3;
  inline ::google::protobuf::uint64 uniqueid() const;
  inline void set_uniqueid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.VisibleNpc)
 private:
  inline void set_has_npcid();
  inline void clear_has_npcid();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_uniqueid();
  inline void clear_has_uniqueid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Cmd::ScenePos* pos_;
  ::google::protobuf::uint64 uniqueid_;
  ::google::protobuf::uint32 npcid_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static VisibleNpc* default_instance_;
};
// -------------------------------------------------------------------

class NtfVisibleNpcUserCmd : public ::google::protobuf::Message {
 public:
  NtfVisibleNpcUserCmd();
  virtual ~NtfVisibleNpcUserCmd();

  NtfVisibleNpcUserCmd(const NtfVisibleNpcUserCmd& from);

  inline NtfVisibleNpcUserCmd& operator=(const NtfVisibleNpcUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NtfVisibleNpcUserCmd& default_instance();

  void Swap(NtfVisibleNpcUserCmd* other);

  // implements Message ----------------------------------------------

  NtfVisibleNpcUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NtfVisibleNpcUserCmd& from);
  void MergeFrom(const NtfVisibleNpcUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_NTF_VISIBLENPC];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // repeated .Cmd.VisibleNpc npcs = 3;
  inline int npcs_size() const;
  inline void clear_npcs();
  static const int kNpcsFieldNumber = 3;
  inline const ::Cmd::VisibleNpc& npcs(int index) const;
  inline ::Cmd::VisibleNpc* mutable_npcs(int index);
  inline ::Cmd::VisibleNpc* add_npcs();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::VisibleNpc >&
      npcs() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::VisibleNpc >*
      mutable_npcs();

  // optional uint32 type = 4 [default = 0];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.NtfVisibleNpcUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::VisibleNpc > npcs_;
  ::google::protobuf::uint32 type_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static NtfVisibleNpcUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class UpyunAuthorizationCmd : public ::google::protobuf::Message {
 public:
  UpyunAuthorizationCmd();
  virtual ~UpyunAuthorizationCmd();

  UpyunAuthorizationCmd(const UpyunAuthorizationCmd& from);

  inline UpyunAuthorizationCmd& operator=(const UpyunAuthorizationCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpyunAuthorizationCmd& default_instance();

  void Swap(UpyunAuthorizationCmd* other);

  // implements Message ----------------------------------------------

  UpyunAuthorizationCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpyunAuthorizationCmd& from);
  void MergeFrom(const UpyunAuthorizationCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_UPYUN_AUTHORIZATION];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional string authvalue = 3;
  inline bool has_authvalue() const;
  inline void clear_authvalue();
  static const int kAuthvalueFieldNumber = 3;
  inline const ::std::string& authvalue() const;
  inline void set_authvalue(const ::std::string& value);
  inline void set_authvalue(const char* value);
  inline void set_authvalue(const char* value, size_t size);
  inline ::std::string* mutable_authvalue();
  inline ::std::string* release_authvalue();
  inline void set_allocated_authvalue(::std::string* authvalue);

  // @@protoc_insertion_point(class_scope:Cmd.UpyunAuthorizationCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_authvalue();
  inline void clear_has_authvalue();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::std::string* authvalue_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static UpyunAuthorizationCmd* default_instance_;
};
// -------------------------------------------------------------------

class TransformPreDataCmd : public ::google::protobuf::Message {
 public:
  TransformPreDataCmd();
  virtual ~TransformPreDataCmd();

  TransformPreDataCmd(const TransformPreDataCmd& from);

  inline TransformPreDataCmd& operator=(const TransformPreDataCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TransformPreDataCmd& default_instance();

  void Swap(TransformPreDataCmd* other);

  // implements Message ----------------------------------------------

  TransformPreDataCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TransformPreDataCmd& from);
  void MergeFrom(const TransformPreDataCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_TRANSFORM_PREDATA];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // repeated .Cmd.UserData datas = 3;
  inline int datas_size() const;
  inline void clear_datas();
  static const int kDatasFieldNumber = 3;
  inline const ::Cmd::UserData& datas(int index) const;
  inline ::Cmd::UserData* mutable_datas(int index);
  inline ::Cmd::UserData* add_datas();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::UserData >&
      datas() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::UserData >*
      mutable_datas();

  // @@protoc_insertion_point(class_scope:Cmd.TransformPreDataCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::UserData > datas_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static TransformPreDataCmd* default_instance_;
};
// -------------------------------------------------------------------

class UserRenameCmd : public ::google::protobuf::Message {
 public:
  UserRenameCmd();
  virtual ~UserRenameCmd();

  UserRenameCmd(const UserRenameCmd& from);

  inline UserRenameCmd& operator=(const UserRenameCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserRenameCmd& default_instance();

  void Swap(UserRenameCmd* other);

  // implements Message ----------------------------------------------

  UserRenameCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserRenameCmd& from);
  void MergeFrom(const UserRenameCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_USER_RENAME];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional .Cmd.ERenameErrCode code = 4 [default = ERENAME_SUCCESS];
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 4;
  inline ::Cmd::ERenameErrCode code() const;
  inline void set_code(::Cmd::ERenameErrCode value);

  // @@protoc_insertion_point(class_scope:Cmd.UserRenameCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_code();
  inline void clear_has_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::std::string* name_;
  int code_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static UserRenameCmd* default_instance_;
};
// -------------------------------------------------------------------

class BuyZenyCmd : public ::google::protobuf::Message {
 public:
  BuyZenyCmd();
  virtual ~BuyZenyCmd();

  BuyZenyCmd(const BuyZenyCmd& from);

  inline BuyZenyCmd& operator=(const BuyZenyCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuyZenyCmd& default_instance();

  void Swap(BuyZenyCmd* other);

  // implements Message ----------------------------------------------

  BuyZenyCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuyZenyCmd& from);
  void MergeFrom(const BuyZenyCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_BUY_ZENY];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional uint32 bcoin = 3;
  inline bool has_bcoin() const;
  inline void clear_bcoin();
  static const int kBcoinFieldNumber = 3;
  inline ::google::protobuf::uint32 bcoin() const;
  inline void set_bcoin(::google::protobuf::uint32 value);

  // optional uint64 zeny = 4;
  inline bool has_zeny() const;
  inline void clear_zeny();
  static const int kZenyFieldNumber = 4;
  inline ::google::protobuf::uint64 zeny() const;
  inline void set_zeny(::google::protobuf::uint64 value);

  // optional bool ret = 5;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 5;
  inline bool ret() const;
  inline void set_ret(bool value);

  // @@protoc_insertion_point(class_scope:Cmd.BuyZenyCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_bcoin();
  inline void clear_has_bcoin();
  inline void set_has_zeny();
  inline void clear_has_zeny();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 zeny_;
  ::google::protobuf::uint32 bcoin_;
  bool ret_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static BuyZenyCmd* default_instance_;
};
// -------------------------------------------------------------------

class CallTeamerUserCmd : public ::google::protobuf::Message {
 public:
  CallTeamerUserCmd();
  virtual ~CallTeamerUserCmd();

  CallTeamerUserCmd(const CallTeamerUserCmd& from);

  inline CallTeamerUserCmd& operator=(const CallTeamerUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CallTeamerUserCmd& default_instance();

  void Swap(CallTeamerUserCmd* other);

  // implements Message ----------------------------------------------

  CallTeamerUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CallTeamerUserCmd& from);
  void MergeFrom(const CallTeamerUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_CALL_TEAMER];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional uint64 masterid = 3 [default = 0];
  inline bool has_masterid() const;
  inline void clear_masterid();
  static const int kMasteridFieldNumber = 3;
  inline ::google::protobuf::uint64 masterid() const;
  inline void set_masterid(::google::protobuf::uint64 value);

  // optional string sign = 4;
  inline bool has_sign() const;
  inline void clear_sign();
  static const int kSignFieldNumber = 4;
  inline const ::std::string& sign() const;
  inline void set_sign(const ::std::string& value);
  inline void set_sign(const char* value);
  inline void set_sign(const char* value, size_t size);
  inline ::std::string* mutable_sign();
  inline ::std::string* release_sign();
  inline void set_allocated_sign(::std::string* sign);

  // optional uint32 time = 5 [default = 0];
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 5;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional string username = 6;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 6;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // optional uint32 mapid = 7 [default = 0];
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapidFieldNumber = 7;
  inline ::google::protobuf::uint32 mapid() const;
  inline void set_mapid(::google::protobuf::uint32 value);

  // optional .Cmd.ScenePos pos = 8;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 8;
  inline const ::Cmd::ScenePos& pos() const;
  inline ::Cmd::ScenePos* mutable_pos();
  inline ::Cmd::ScenePos* release_pos();
  inline void set_allocated_pos(::Cmd::ScenePos* pos);

  // @@protoc_insertion_point(class_scope:Cmd.CallTeamerUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_masterid();
  inline void clear_has_masterid();
  inline void set_has_sign();
  inline void clear_has_sign();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_mapid();
  inline void clear_has_mapid();
  inline void set_has_pos();
  inline void clear_has_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 masterid_;
  ::std::string* sign_;
  ::std::string* username_;
  ::google::protobuf::uint32 time_;
  ::google::protobuf::uint32 mapid_;
  ::Cmd::ScenePos* pos_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static CallTeamerUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class CallTeamerReplyUserCmd : public ::google::protobuf::Message {
 public:
  CallTeamerReplyUserCmd();
  virtual ~CallTeamerReplyUserCmd();

  CallTeamerReplyUserCmd(const CallTeamerReplyUserCmd& from);

  inline CallTeamerReplyUserCmd& operator=(const CallTeamerReplyUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CallTeamerReplyUserCmd& default_instance();

  void Swap(CallTeamerReplyUserCmd* other);

  // implements Message ----------------------------------------------

  CallTeamerReplyUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CallTeamerReplyUserCmd& from);
  void MergeFrom(const CallTeamerReplyUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_CALL_TEAMER_JOIN];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional uint64 masterid = 3 [default = 0];
  inline bool has_masterid() const;
  inline void clear_masterid();
  static const int kMasteridFieldNumber = 3;
  inline ::google::protobuf::uint64 masterid() const;
  inline void set_masterid(::google::protobuf::uint64 value);

  // optional string sign = 4;
  inline bool has_sign() const;
  inline void clear_sign();
  static const int kSignFieldNumber = 4;
  inline const ::std::string& sign() const;
  inline void set_sign(const ::std::string& value);
  inline void set_sign(const char* value);
  inline void set_sign(const char* value, size_t size);
  inline ::std::string* mutable_sign();
  inline ::std::string* release_sign();
  inline void set_allocated_sign(::std::string* sign);

  // optional uint32 time = 5 [default = 0];
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 5;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional uint32 mapid = 6 [default = 0];
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapidFieldNumber = 6;
  inline ::google::protobuf::uint32 mapid() const;
  inline void set_mapid(::google::protobuf::uint32 value);

  // optional .Cmd.ScenePos pos = 7;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 7;
  inline const ::Cmd::ScenePos& pos() const;
  inline ::Cmd::ScenePos* mutable_pos();
  inline ::Cmd::ScenePos* release_pos();
  inline void set_allocated_pos(::Cmd::ScenePos* pos);

  // @@protoc_insertion_point(class_scope:Cmd.CallTeamerReplyUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_masterid();
  inline void clear_has_masterid();
  inline void set_has_sign();
  inline void clear_has_sign();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_mapid();
  inline void clear_has_mapid();
  inline void set_has_pos();
  inline void clear_has_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 masterid_;
  ::std::string* sign_;
  ::google::protobuf::uint32 time_;
  ::google::protobuf::uint32 mapid_;
  ::Cmd::ScenePos* pos_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static CallTeamerReplyUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class SpecialEffectCmd : public ::google::protobuf::Message {
 public:
  SpecialEffectCmd();
  virtual ~SpecialEffectCmd();

  SpecialEffectCmd(const SpecialEffectCmd& from);

  inline SpecialEffectCmd& operator=(const SpecialEffectCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SpecialEffectCmd& default_instance();

  void Swap(SpecialEffectCmd* other);

  // implements Message ----------------------------------------------

  SpecialEffectCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SpecialEffectCmd& from);
  void MergeFrom(const SpecialEffectCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SPECIAL_EFFECT];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional uint32 dramaid = 3;
  inline bool has_dramaid() const;
  inline void clear_dramaid();
  static const int kDramaidFieldNumber = 3;
  inline ::google::protobuf::uint32 dramaid() const;
  inline void set_dramaid(::google::protobuf::uint32 value);

  // optional uint32 starttime = 4;
  inline bool has_starttime() const;
  inline void clear_starttime();
  static const int kStarttimeFieldNumber = 4;
  inline ::google::protobuf::uint32 starttime() const;
  inline void set_starttime(::google::protobuf::uint32 value);

  // optional uint32 times = 5 [default = 0];
  inline bool has_times() const;
  inline void clear_times();
  static const int kTimesFieldNumber = 5;
  inline ::google::protobuf::uint32 times() const;
  inline void set_times(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.SpecialEffectCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_dramaid();
  inline void clear_has_dramaid();
  inline void set_has_starttime();
  inline void clear_has_starttime();
  inline void set_has_times();
  inline void clear_has_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 dramaid_;
  ::google::protobuf::uint32 starttime_;
  ::google::protobuf::uint32 times_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static SpecialEffectCmd* default_instance_;
};
// -------------------------------------------------------------------

class MarriageProposalCmd : public ::google::protobuf::Message {
 public:
  MarriageProposalCmd();
  virtual ~MarriageProposalCmd();

  MarriageProposalCmd(const MarriageProposalCmd& from);

  inline MarriageProposalCmd& operator=(const MarriageProposalCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MarriageProposalCmd& default_instance();

  void Swap(MarriageProposalCmd* other);

  // implements Message ----------------------------------------------

  MarriageProposalCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MarriageProposalCmd& from);
  void MergeFrom(const MarriageProposalCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_MARRIAGE_PROPOSAL];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional uint64 masterid = 3 [default = 0];
  inline bool has_masterid() const;
  inline void clear_masterid();
  static const int kMasteridFieldNumber = 3;
  inline ::google::protobuf::uint64 masterid() const;
  inline void set_masterid(::google::protobuf::uint64 value);

  // optional uint32 itemid = 4 [default = 0];
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 4;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint32 time = 5 [default = 0];
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 5;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional string mastername = 6;
  inline bool has_mastername() const;
  inline void clear_mastername();
  static const int kMasternameFieldNumber = 6;
  inline const ::std::string& mastername() const;
  inline void set_mastername(const ::std::string& value);
  inline void set_mastername(const char* value);
  inline void set_mastername(const char* value, size_t size);
  inline ::std::string* mutable_mastername();
  inline ::std::string* release_mastername();
  inline void set_allocated_mastername(::std::string* mastername);

  // optional bytes sign = 7;
  inline bool has_sign() const;
  inline void clear_sign();
  static const int kSignFieldNumber = 7;
  inline const ::std::string& sign() const;
  inline void set_sign(const ::std::string& value);
  inline void set_sign(const char* value);
  inline void set_sign(const void* value, size_t size);
  inline ::std::string* mutable_sign();
  inline ::std::string* release_sign();
  inline void set_allocated_sign(::std::string* sign);

  // @@protoc_insertion_point(class_scope:Cmd.MarriageProposalCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_masterid();
  inline void clear_has_masterid();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_mastername();
  inline void clear_has_mastername();
  inline void set_has_sign();
  inline void clear_has_sign();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 masterid_;
  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 time_;
  ::std::string* mastername_;
  ::std::string* sign_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static MarriageProposalCmd* default_instance_;
};
// -------------------------------------------------------------------

class MarriageProposalReplyCmd : public ::google::protobuf::Message {
 public:
  MarriageProposalReplyCmd();
  virtual ~MarriageProposalReplyCmd();

  MarriageProposalReplyCmd(const MarriageProposalReplyCmd& from);

  inline MarriageProposalReplyCmd& operator=(const MarriageProposalReplyCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MarriageProposalReplyCmd& default_instance();

  void Swap(MarriageProposalReplyCmd* other);

  // implements Message ----------------------------------------------

  MarriageProposalReplyCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MarriageProposalReplyCmd& from);
  void MergeFrom(const MarriageProposalReplyCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_MARRIAGE_PROPOSAL_REPLY];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional uint64 masterid = 3 [default = 0];
  inline bool has_masterid() const;
  inline void clear_masterid();
  static const int kMasteridFieldNumber = 3;
  inline ::google::protobuf::uint64 masterid() const;
  inline void set_masterid(::google::protobuf::uint64 value);

  // optional .Cmd.EProposalReply reply = 4 [default = EPROPOSALREPLY_YES];
  inline bool has_reply() const;
  inline void clear_reply();
  static const int kReplyFieldNumber = 4;
  inline ::Cmd::EProposalReply reply() const;
  inline void set_reply(::Cmd::EProposalReply value);

  // optional uint32 time = 5 [default = 0];
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 5;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional string sign = 6;
  inline bool has_sign() const;
  inline void clear_sign();
  static const int kSignFieldNumber = 6;
  inline const ::std::string& sign() const;
  inline void set_sign(const ::std::string& value);
  inline void set_sign(const char* value);
  inline void set_sign(const char* value, size_t size);
  inline ::std::string* mutable_sign();
  inline ::std::string* release_sign();
  inline void set_allocated_sign(::std::string* sign);

  // @@protoc_insertion_point(class_scope:Cmd.MarriageProposalReplyCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_masterid();
  inline void clear_has_masterid();
  inline void set_has_reply();
  inline void clear_has_reply();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_sign();
  inline void clear_has_sign();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 masterid_;
  int reply_;
  ::google::protobuf::uint32 time_;
  ::std::string* sign_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static MarriageProposalReplyCmd* default_instance_;
};
// -------------------------------------------------------------------

class UploadWeddingPhotoUserCmd : public ::google::protobuf::Message {
 public:
  UploadWeddingPhotoUserCmd();
  virtual ~UploadWeddingPhotoUserCmd();

  UploadWeddingPhotoUserCmd(const UploadWeddingPhotoUserCmd& from);

  inline UploadWeddingPhotoUserCmd& operator=(const UploadWeddingPhotoUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UploadWeddingPhotoUserCmd& default_instance();

  void Swap(UploadWeddingPhotoUserCmd* other);

  // implements Message ----------------------------------------------

  UploadWeddingPhotoUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UploadWeddingPhotoUserCmd& from);
  void MergeFrom(const UploadWeddingPhotoUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_UPLOAD_WEDDING_PHOTO];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional string itemguid = 3;
  inline bool has_itemguid() const;
  inline void clear_itemguid();
  static const int kItemguidFieldNumber = 3;
  inline const ::std::string& itemguid() const;
  inline void set_itemguid(const ::std::string& value);
  inline void set_itemguid(const char* value);
  inline void set_itemguid(const char* value, size_t size);
  inline ::std::string* mutable_itemguid();
  inline ::std::string* release_itemguid();
  inline void set_allocated_itemguid(::std::string* itemguid);

  // optional uint32 index = 4 [default = 0];
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 4;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // optional uint32 time = 5 [default = 0];
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 5;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.UploadWeddingPhotoUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_itemguid();
  inline void clear_has_itemguid();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::std::string* itemguid_;
  ::google::protobuf::uint32 index_;
  ::google::protobuf::uint32 time_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static UploadWeddingPhotoUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class MarriageProposalSuccessCmd : public ::google::protobuf::Message {
 public:
  MarriageProposalSuccessCmd();
  virtual ~MarriageProposalSuccessCmd();

  MarriageProposalSuccessCmd(const MarriageProposalSuccessCmd& from);

  inline MarriageProposalSuccessCmd& operator=(const MarriageProposalSuccessCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MarriageProposalSuccessCmd& default_instance();

  void Swap(MarriageProposalSuccessCmd* other);

  // implements Message ----------------------------------------------

  MarriageProposalSuccessCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MarriageProposalSuccessCmd& from);
  void MergeFrom(const MarriageProposalSuccessCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_MARRIAGE_PROPOSAL_SUCCESS];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional uint64 charid = 3 [default = 0];
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 3;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional bool ismaster = 4 [default = true];
  inline bool has_ismaster() const;
  inline void clear_ismaster();
  static const int kIsmasterFieldNumber = 4;
  inline bool ismaster() const;
  inline void set_ismaster(bool value);

  // @@protoc_insertion_point(class_scope:Cmd.MarriageProposalSuccessCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_ismaster();
  inline void clear_has_ismaster();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 charid_;
  bool ismaster_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static MarriageProposalSuccessCmd* default_instance_;
};
// -------------------------------------------------------------------

class InviteeWeddingStartNtfUserCmd : public ::google::protobuf::Message {
 public:
  InviteeWeddingStartNtfUserCmd();
  virtual ~InviteeWeddingStartNtfUserCmd();

  InviteeWeddingStartNtfUserCmd(const InviteeWeddingStartNtfUserCmd& from);

  inline InviteeWeddingStartNtfUserCmd& operator=(const InviteeWeddingStartNtfUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InviteeWeddingStartNtfUserCmd& default_instance();

  void Swap(InviteeWeddingStartNtfUserCmd* other);

  // implements Message ----------------------------------------------

  InviteeWeddingStartNtfUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InviteeWeddingStartNtfUserCmd& from);
  void MergeFrom(const InviteeWeddingStartNtfUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_INVITEE_WEDDING_START_NTF];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional string itemguid = 3;
  inline bool has_itemguid() const;
  inline void clear_itemguid();
  static const int kItemguidFieldNumber = 3;
  inline const ::std::string& itemguid() const;
  inline void set_itemguid(const ::std::string& value);
  inline void set_itemguid(const char* value);
  inline void set_itemguid(const char* value, size_t size);
  inline ::std::string* mutable_itemguid();
  inline ::std::string* release_itemguid();
  inline void set_allocated_itemguid(::std::string* itemguid);

  // @@protoc_insertion_point(class_scope:Cmd.InviteeWeddingStartNtfUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_itemguid();
  inline void clear_has_itemguid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::std::string* itemguid_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static InviteeWeddingStartNtfUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class KFCShareUserCmd : public ::google::protobuf::Message {
 public:
  KFCShareUserCmd();
  virtual ~KFCShareUserCmd();

  KFCShareUserCmd(const KFCShareUserCmd& from);

  inline KFCShareUserCmd& operator=(const KFCShareUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KFCShareUserCmd& default_instance();

  void Swap(KFCShareUserCmd* other);

  // implements Message ----------------------------------------------

  KFCShareUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KFCShareUserCmd& from);
  void MergeFrom(const KFCShareUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_KFC_SHARE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // @@protoc_insertion_point(class_scope:Cmd.KFCShareUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static KFCShareUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class CheckRelationUserCmd : public ::google::protobuf::Message {
 public:
  CheckRelationUserCmd();
  virtual ~CheckRelationUserCmd();

  CheckRelationUserCmd(const CheckRelationUserCmd& from);

  inline CheckRelationUserCmd& operator=(const CheckRelationUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckRelationUserCmd& default_instance();

  void Swap(CheckRelationUserCmd* other);

  // implements Message ----------------------------------------------

  CheckRelationUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CheckRelationUserCmd& from);
  void MergeFrom(const CheckRelationUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_CHECK_RELATION];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional uint64 charid = 3 [default = 0];
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 3;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional .Cmd.ESocialRelation etype = 4 [default = ESOCIALRELATION_MIN];
  inline bool has_etype() const;
  inline void clear_etype();
  static const int kEtypeFieldNumber = 4;
  inline ::Cmd::ESocialRelation etype() const;
  inline void set_etype(::Cmd::ESocialRelation value);

  // optional bool ret = 5 [default = false];
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 5;
  inline bool ret() const;
  inline void set_ret(bool value);

  // @@protoc_insertion_point(class_scope:Cmd.CheckRelationUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_etype();
  inline void clear_has_etype();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 charid_;
  int etype_;
  bool ret_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static CheckRelationUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class TwinsActionUserCmd : public ::google::protobuf::Message {
 public:
  TwinsActionUserCmd();
  virtual ~TwinsActionUserCmd();

  TwinsActionUserCmd(const TwinsActionUserCmd& from);

  inline TwinsActionUserCmd& operator=(const TwinsActionUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TwinsActionUserCmd& default_instance();

  void Swap(TwinsActionUserCmd* other);

  // implements Message ----------------------------------------------

  TwinsActionUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TwinsActionUserCmd& from);
  void MergeFrom(const TwinsActionUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_TWINS_ACTION];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional uint64 userid = 3 [default = 0];
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 3;
  inline ::google::protobuf::uint64 userid() const;
  inline void set_userid(::google::protobuf::uint64 value);

  // optional uint32 actionid = 4 [default = 0];
  inline bool has_actionid() const;
  inline void clear_actionid();
  static const int kActionidFieldNumber = 4;
  inline ::google::protobuf::uint32 actionid() const;
  inline void set_actionid(::google::protobuf::uint32 value);

  // optional .Cmd.ETwinsOperation etype = 5 [default = ETWINS_OPERATION_MIN];
  inline bool has_etype() const;
  inline void clear_etype();
  static const int kEtypeFieldNumber = 5;
  inline ::Cmd::ETwinsOperation etype() const;
  inline void set_etype(::Cmd::ETwinsOperation value);

  // optional bool sponsor = 6 [default = true];
  inline bool has_sponsor() const;
  inline void clear_sponsor();
  static const int kSponsorFieldNumber = 6;
  inline bool sponsor() const;
  inline void set_sponsor(bool value);

  // @@protoc_insertion_point(class_scope:Cmd.TwinsActionUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_actionid();
  inline void clear_has_actionid();
  inline void set_has_etype();
  inline void clear_has_etype();
  inline void set_has_sponsor();
  inline void clear_has_sponsor();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 userid_;
  ::google::protobuf::uint32 actionid_;
  int etype_;
  bool sponsor_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static TwinsActionUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class ShowServantUserCmd : public ::google::protobuf::Message {
 public:
  ShowServantUserCmd();
  virtual ~ShowServantUserCmd();

  ShowServantUserCmd(const ShowServantUserCmd& from);

  inline ShowServantUserCmd& operator=(const ShowServantUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShowServantUserCmd& default_instance();

  void Swap(ShowServantUserCmd* other);

  // implements Message ----------------------------------------------

  ShowServantUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ShowServantUserCmd& from);
  void MergeFrom(const ShowServantUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SERVANT_SHOW];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional bool show = 3;
  inline bool has_show() const;
  inline void clear_show();
  static const int kShowFieldNumber = 3;
  inline bool show() const;
  inline void set_show(bool value);

  // @@protoc_insertion_point(class_scope:Cmd.ShowServantUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_show();
  inline void clear_has_show();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  bool show_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static ShowServantUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class ReplaceServantUserCmd : public ::google::protobuf::Message {
 public:
  ReplaceServantUserCmd();
  virtual ~ReplaceServantUserCmd();

  ReplaceServantUserCmd(const ReplaceServantUserCmd& from);

  inline ReplaceServantUserCmd& operator=(const ReplaceServantUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReplaceServantUserCmd& default_instance();

  void Swap(ReplaceServantUserCmd* other);

  // implements Message ----------------------------------------------

  ReplaceServantUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReplaceServantUserCmd& from);
  void MergeFrom(const ReplaceServantUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SERVANT_REPLACE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional bool replace = 3;
  inline bool has_replace() const;
  inline void clear_replace();
  static const int kReplaceFieldNumber = 3;
  inline bool replace() const;
  inline void set_replace(bool value);

  // optional uint32 servant = 4 [default = 0];
  inline bool has_servant() const;
  inline void clear_servant();
  static const int kServantFieldNumber = 4;
  inline ::google::protobuf::uint32 servant() const;
  inline void set_servant(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.ReplaceServantUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_replace();
  inline void clear_has_replace();
  inline void set_has_servant();
  inline void clear_has_servant();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  bool replace_;
  ::google::protobuf::uint32 servant_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static ReplaceServantUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class ServantService : public ::google::protobuf::Message {
 public:
  ServantService();
  virtual ~ServantService();

  ServantService(const ServantService& from);

  inline ServantService& operator=(const ServantService& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServantService& default_instance();

  void Swap(ServantService* other);

  // implements Message ----------------------------------------------

  ServantService* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServantService& from);
  void MergeFrom(const ServantService& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SERVANT_SERVICE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional .Cmd.EServantService type = 3 [default = ESERVANT_SERVICE_RECOMMEND];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::Cmd::EServantService type() const;
  inline void set_type(::Cmd::EServantService value);

  // @@protoc_insertion_point(class_scope:Cmd.ServantService)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  int type_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static ServantService* default_instance_;
};
// -------------------------------------------------------------------

class RecommendItemInfo : public ::google::protobuf::Message {
 public:
  RecommendItemInfo();
  virtual ~RecommendItemInfo();

  RecommendItemInfo(const RecommendItemInfo& from);

  inline RecommendItemInfo& operator=(const RecommendItemInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RecommendItemInfo& default_instance();

  void Swap(RecommendItemInfo* other);

  // implements Message ----------------------------------------------

  RecommendItemInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecommendItemInfo& from);
  void MergeFrom(const RecommendItemInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 dwid = 1 [default = 0];
  inline bool has_dwid() const;
  inline void clear_dwid();
  static const int kDwidFieldNumber = 1;
  inline ::google::protobuf::uint32 dwid() const;
  inline void set_dwid(::google::protobuf::uint32 value);

  // optional uint32 finishtimes = 2 [default = 0];
  inline bool has_finishtimes() const;
  inline void clear_finishtimes();
  static const int kFinishtimesFieldNumber = 2;
  inline ::google::protobuf::uint32 finishtimes() const;
  inline void set_finishtimes(::google::protobuf::uint32 value);

  // optional .Cmd.ERecommendStatus status = 3 [default = ERECOMMEND_STATUS_MIN];
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 3;
  inline ::Cmd::ERecommendStatus status() const;
  inline void set_status(::Cmd::ERecommendStatus value);

  // optional bool realopen = 4 [default = false];
  inline bool has_realopen() const;
  inline void clear_realopen();
  static const int kRealopenFieldNumber = 4;
  inline bool realopen() const;
  inline void set_realopen(bool value);

  // @@protoc_insertion_point(class_scope:Cmd.RecommendItemInfo)
 private:
  inline void set_has_dwid();
  inline void clear_has_dwid();
  inline void set_has_finishtimes();
  inline void clear_has_finishtimes();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_realopen();
  inline void clear_has_realopen();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 dwid_;
  ::google::protobuf::uint32 finishtimes_;
  int status_;
  bool realopen_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static RecommendItemInfo* default_instance_;
};
// -------------------------------------------------------------------

class RecommendServantUserCmd : public ::google::protobuf::Message {
 public:
  RecommendServantUserCmd();
  virtual ~RecommendServantUserCmd();

  RecommendServantUserCmd(const RecommendServantUserCmd& from);

  inline RecommendServantUserCmd& operator=(const RecommendServantUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RecommendServantUserCmd& default_instance();

  void Swap(RecommendServantUserCmd* other);

  // implements Message ----------------------------------------------

  RecommendServantUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecommendServantUserCmd& from);
  void MergeFrom(const RecommendServantUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SERVANT_RECOMMEND];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // repeated .Cmd.RecommendItemInfo items = 3;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 3;
  inline const ::Cmd::RecommendItemInfo& items(int index) const;
  inline ::Cmd::RecommendItemInfo* mutable_items(int index);
  inline ::Cmd::RecommendItemInfo* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::RecommendItemInfo >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::RecommendItemInfo >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:Cmd.RecommendServantUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::RecommendItemInfo > items_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static RecommendServantUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class ReceiveServantUserCmd : public ::google::protobuf::Message {
 public:
  ReceiveServantUserCmd();
  virtual ~ReceiveServantUserCmd();

  ReceiveServantUserCmd(const ReceiveServantUserCmd& from);

  inline ReceiveServantUserCmd& operator=(const ReceiveServantUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReceiveServantUserCmd& default_instance();

  void Swap(ReceiveServantUserCmd* other);

  // implements Message ----------------------------------------------

  ReceiveServantUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReceiveServantUserCmd& from);
  void MergeFrom(const ReceiveServantUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SERVANT_RECEIVE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional bool favorability = 3 [default = false];
  inline bool has_favorability() const;
  inline void clear_favorability();
  static const int kFavorabilityFieldNumber = 3;
  inline bool favorability() const;
  inline void set_favorability(bool value);

  // optional uint32 dwid = 4;
  inline bool has_dwid() const;
  inline void clear_dwid();
  static const int kDwidFieldNumber = 4;
  inline ::google::protobuf::uint32 dwid() const;
  inline void set_dwid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.ReceiveServantUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_favorability();
  inline void clear_has_favorability();
  inline void set_has_dwid();
  inline void clear_has_dwid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  bool favorability_;
  ::google::protobuf::uint32 dwid_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static ReceiveServantUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class FavorabilityStatus : public ::google::protobuf::Message {
 public:
  FavorabilityStatus();
  virtual ~FavorabilityStatus();

  FavorabilityStatus(const FavorabilityStatus& from);

  inline FavorabilityStatus& operator=(const FavorabilityStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FavorabilityStatus& default_instance();

  void Swap(FavorabilityStatus* other);

  // implements Message ----------------------------------------------

  FavorabilityStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FavorabilityStatus& from);
  void MergeFrom(const FavorabilityStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 favorability = 1 [default = 0];
  inline bool has_favorability() const;
  inline void clear_favorability();
  static const int kFavorabilityFieldNumber = 1;
  inline ::google::protobuf::uint32 favorability() const;
  inline void set_favorability(::google::protobuf::uint32 value);

  // optional uint32 status = 2 [default = 0];
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.FavorabilityStatus)
 private:
  inline void set_has_favorability();
  inline void clear_has_favorability();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 favorability_;
  ::google::protobuf::uint32 status_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static FavorabilityStatus* default_instance_;
};
// -------------------------------------------------------------------

class ServantRewardStatusUserCmd : public ::google::protobuf::Message {
 public:
  ServantRewardStatusUserCmd();
  virtual ~ServantRewardStatusUserCmd();

  ServantRewardStatusUserCmd(const ServantRewardStatusUserCmd& from);

  inline ServantRewardStatusUserCmd& operator=(const ServantRewardStatusUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServantRewardStatusUserCmd& default_instance();

  void Swap(ServantRewardStatusUserCmd* other);

  // implements Message ----------------------------------------------

  ServantRewardStatusUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServantRewardStatusUserCmd& from);
  void MergeFrom(const ServantRewardStatusUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SERVANT_REWARD_STATUS];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // repeated .Cmd.FavorabilityStatus items = 3;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 3;
  inline const ::Cmd::FavorabilityStatus& items(int index) const;
  inline ::Cmd::FavorabilityStatus* mutable_items(int index);
  inline ::Cmd::FavorabilityStatus* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::FavorabilityStatus >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::FavorabilityStatus >*
      mutable_items();

  // optional uint32 stayfavo = 4 [default = 0];
  inline bool has_stayfavo() const;
  inline void clear_stayfavo();
  static const int kStayfavoFieldNumber = 4;
  inline ::google::protobuf::uint32 stayfavo() const;
  inline void set_stayfavo(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.ServantRewardStatusUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_stayfavo();
  inline void clear_has_stayfavo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::FavorabilityStatus > items_;
  ::google::protobuf::uint32 stayfavo_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static ServantRewardStatusUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class ProfessionInfo : public ::google::protobuf::Message {
 public:
  ProfessionInfo();
  virtual ~ProfessionInfo();

  ProfessionInfo(const ProfessionInfo& from);

  inline ProfessionInfo& operator=(const ProfessionInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProfessionInfo& default_instance();

  void Swap(ProfessionInfo* other);

  // implements Message ----------------------------------------------

  ProfessionInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProfessionInfo& from);
  void MergeFrom(const ProfessionInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 branch = 1;
  inline bool has_branch() const;
  inline void clear_branch();
  static const int kBranchFieldNumber = 1;
  inline ::google::protobuf::uint32 branch() const;
  inline void set_branch(::google::protobuf::uint32 value);

  // optional uint32 profession = 2;
  inline bool has_profession() const;
  inline void clear_profession();
  static const int kProfessionFieldNumber = 2;
  inline ::google::protobuf::uint32 profession() const;
  inline void set_profession(::google::protobuf::uint32 value);

  // optional uint32 joblv = 3;
  inline bool has_joblv() const;
  inline void clear_joblv();
  static const int kJoblvFieldNumber = 3;
  inline ::google::protobuf::uint32 joblv() const;
  inline void set_joblv(::google::protobuf::uint32 value);

  // optional bool iscurrent = 4 [default = false];
  inline bool has_iscurrent() const;
  inline void clear_iscurrent();
  static const int kIscurrentFieldNumber = 4;
  inline bool iscurrent() const;
  inline void set_iscurrent(bool value);

  // optional bool isbuy = 5 [default = false];
  inline bool has_isbuy() const;
  inline void clear_isbuy();
  static const int kIsbuyFieldNumber = 5;
  inline bool isbuy() const;
  inline void set_isbuy(bool value);

  // @@protoc_insertion_point(class_scope:Cmd.ProfessionInfo)
 private:
  inline void set_has_branch();
  inline void clear_has_branch();
  inline void set_has_profession();
  inline void clear_has_profession();
  inline void set_has_joblv();
  inline void clear_has_joblv();
  inline void set_has_iscurrent();
  inline void clear_has_iscurrent();
  inline void set_has_isbuy();
  inline void clear_has_isbuy();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 branch_;
  ::google::protobuf::uint32 profession_;
  ::google::protobuf::uint32 joblv_;
  bool iscurrent_;
  bool isbuy_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static ProfessionInfo* default_instance_;
};
// -------------------------------------------------------------------

class ProfessionQueryUserCmd : public ::google::protobuf::Message {
 public:
  ProfessionQueryUserCmd();
  virtual ~ProfessionQueryUserCmd();

  ProfessionQueryUserCmd(const ProfessionQueryUserCmd& from);

  inline ProfessionQueryUserCmd& operator=(const ProfessionQueryUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProfessionQueryUserCmd& default_instance();

  void Swap(ProfessionQueryUserCmd* other);

  // implements Message ----------------------------------------------

  ProfessionQueryUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProfessionQueryUserCmd& from);
  void MergeFrom(const ProfessionQueryUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_PROFESSION_QUERY];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // repeated .Cmd.ProfessionInfo items = 3;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 3;
  inline const ::Cmd::ProfessionInfo& items(int index) const;
  inline ::Cmd::ProfessionInfo* mutable_items(int index);
  inline ::Cmd::ProfessionInfo* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ProfessionInfo >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::ProfessionInfo >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:Cmd.ProfessionQueryUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::ProfessionInfo > items_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static ProfessionQueryUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class ProfessionBuyUserCmd : public ::google::protobuf::Message {
 public:
  ProfessionBuyUserCmd();
  virtual ~ProfessionBuyUserCmd();

  ProfessionBuyUserCmd(const ProfessionBuyUserCmd& from);

  inline ProfessionBuyUserCmd& operator=(const ProfessionBuyUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProfessionBuyUserCmd& default_instance();

  void Swap(ProfessionBuyUserCmd* other);

  // implements Message ----------------------------------------------

  ProfessionBuyUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProfessionBuyUserCmd& from);
  void MergeFrom(const ProfessionBuyUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_PROFESSION_BUY];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional uint32 branch = 3;
  inline bool has_branch() const;
  inline void clear_branch();
  static const int kBranchFieldNumber = 3;
  inline ::google::protobuf::uint32 branch() const;
  inline void set_branch(::google::protobuf::uint32 value);

  // optional bool success = 4 [default = true];
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 4;
  inline bool success() const;
  inline void set_success(bool value);

  // @@protoc_insertion_point(class_scope:Cmd.ProfessionBuyUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_branch();
  inline void clear_has_branch();
  inline void set_has_success();
  inline void clear_has_success();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 branch_;
  bool success_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static ProfessionBuyUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class ProfessionChangeUserCmd : public ::google::protobuf::Message {
 public:
  ProfessionChangeUserCmd();
  virtual ~ProfessionChangeUserCmd();

  ProfessionChangeUserCmd(const ProfessionChangeUserCmd& from);

  inline ProfessionChangeUserCmd& operator=(const ProfessionChangeUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProfessionChangeUserCmd& default_instance();

  void Swap(ProfessionChangeUserCmd* other);

  // implements Message ----------------------------------------------

  ProfessionChangeUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProfessionChangeUserCmd& from);
  void MergeFrom(const ProfessionChangeUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_PROFESSION_CHANGE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional uint32 branch = 3;
  inline bool has_branch() const;
  inline void clear_branch();
  static const int kBranchFieldNumber = 3;
  inline ::google::protobuf::uint32 branch() const;
  inline void set_branch(::google::protobuf::uint32 value);

  // optional bool success = 4 [default = true];
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 4;
  inline bool success() const;
  inline void set_success(bool value);

  // @@protoc_insertion_point(class_scope:Cmd.ProfessionChangeUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_branch();
  inline void clear_has_branch();
  inline void set_has_success();
  inline void clear_has_success();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 branch_;
  bool success_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static ProfessionChangeUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class AstrolabeProfessionData : public ::google::protobuf::Message {
 public:
  AstrolabeProfessionData();
  virtual ~AstrolabeProfessionData();

  AstrolabeProfessionData(const AstrolabeProfessionData& from);

  inline AstrolabeProfessionData& operator=(const AstrolabeProfessionData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AstrolabeProfessionData& default_instance();

  void Swap(AstrolabeProfessionData* other);

  // implements Message ----------------------------------------------

  AstrolabeProfessionData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AstrolabeProfessionData& from);
  void MergeFrom(const AstrolabeProfessionData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 stars = 2;
  inline int stars_size() const;
  inline void clear_stars();
  static const int kStarsFieldNumber = 2;
  inline ::google::protobuf::uint32 stars(int index) const;
  inline void set_stars(int index, ::google::protobuf::uint32 value);
  inline void add_stars(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      stars() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_stars();

  // @@protoc_insertion_point(class_scope:Cmd.AstrolabeProfessionData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > stars_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static AstrolabeProfessionData* default_instance_;
};
// -------------------------------------------------------------------

class AttrProfessionData : public ::google::protobuf::Message {
 public:
  AttrProfessionData();
  virtual ~AttrProfessionData();

  AttrProfessionData(const AttrProfessionData& from);

  inline AttrProfessionData& operator=(const AttrProfessionData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AttrProfessionData& default_instance();

  void Swap(AttrProfessionData* other);

  // implements Message ----------------------------------------------

  AttrProfessionData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AttrProfessionData& from);
  void MergeFrom(const AttrProfessionData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Cmd.UserAttr attrs = 1;
  inline int attrs_size() const;
  inline void clear_attrs();
  static const int kAttrsFieldNumber = 1;
  inline const ::Cmd::UserAttr& attrs(int index) const;
  inline ::Cmd::UserAttr* mutable_attrs(int index);
  inline ::Cmd::UserAttr* add_attrs();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::UserAttr >&
      attrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::UserAttr >*
      mutable_attrs();

  // repeated .Cmd.UserData datas = 2;
  inline int datas_size() const;
  inline void clear_datas();
  static const int kDatasFieldNumber = 2;
  inline const ::Cmd::UserData& datas(int index) const;
  inline ::Cmd::UserData* mutable_datas(int index);
  inline ::Cmd::UserData* add_datas();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::UserData >&
      datas() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::UserData >*
      mutable_datas();

  // @@protoc_insertion_point(class_scope:Cmd.AttrProfessionData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::UserAttr > attrs_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::UserData > datas_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static AttrProfessionData* default_instance_;
};
// -------------------------------------------------------------------

class EquipInfo : public ::google::protobuf::Message {
 public:
  EquipInfo();
  virtual ~EquipInfo();

  EquipInfo(const EquipInfo& from);

  inline EquipInfo& operator=(const EquipInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipInfo& default_instance();

  void Swap(EquipInfo* other);

  // implements Message ----------------------------------------------

  EquipInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipInfo& from);
  void MergeFrom(const EquipInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 pos = 1;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 1;
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // optional uint32 type_id = 2;
  inline bool has_type_id() const;
  inline void clear_type_id();
  static const int kTypeIdFieldNumber = 2;
  inline ::google::protobuf::uint32 type_id() const;
  inline void set_type_id(::google::protobuf::uint32 value);

  // optional string guid = 3;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 3;
  inline const ::std::string& guid() const;
  inline void set_guid(const ::std::string& value);
  inline void set_guid(const char* value);
  inline void set_guid(const char* value, size_t size);
  inline ::std::string* mutable_guid();
  inline ::std::string* release_guid();
  inline void set_allocated_guid(::std::string* guid);

  // @@protoc_insertion_point(class_scope:Cmd.EquipInfo)
 private:
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_type_id();
  inline void clear_has_type_id();
  inline void set_has_guid();
  inline void clear_has_guid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 pos_;
  ::google::protobuf::uint32 type_id_;
  ::std::string* guid_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static EquipInfo* default_instance_;
};
// -------------------------------------------------------------------

class EquipPackData : public ::google::protobuf::Message {
 public:
  EquipPackData();
  virtual ~EquipPackData();

  EquipPackData(const EquipPackData& from);

  inline EquipPackData& operator=(const EquipPackData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipPackData& default_instance();

  void Swap(EquipPackData* other);

  // implements Message ----------------------------------------------

  EquipPackData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipPackData& from);
  void MergeFrom(const EquipPackData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // repeated .Cmd.EquipInfo datas = 2;
  inline int datas_size() const;
  inline void clear_datas();
  static const int kDatasFieldNumber = 2;
  inline const ::Cmd::EquipInfo& datas(int index) const;
  inline ::Cmd::EquipInfo* mutable_datas(int index);
  inline ::Cmd::EquipInfo* add_datas();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::EquipInfo >&
      datas() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::EquipInfo >*
      mutable_datas();

  // @@protoc_insertion_point(class_scope:Cmd.EquipPackData)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::EquipInfo > datas_;
  ::google::protobuf::uint32 type_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static EquipPackData* default_instance_;
};
// -------------------------------------------------------------------

class SkillValidPosData : public ::google::protobuf::Message {
 public:
  SkillValidPosData();
  virtual ~SkillValidPosData();

  SkillValidPosData(const SkillValidPosData& from);

  inline SkillValidPosData& operator=(const SkillValidPosData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SkillValidPosData& default_instance();

  void Swap(SkillValidPosData* other);

  // implements Message ----------------------------------------------

  SkillValidPosData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SkillValidPosData& from);
  void MergeFrom(const SkillValidPosData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 pos = 1;
  inline int pos_size() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 1;
  inline ::google::protobuf::uint32 pos(int index) const;
  inline void set_pos(int index, ::google::protobuf::uint32 value);
  inline void add_pos(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      pos() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_pos();

  // repeated uint32 autopos = 2;
  inline int autopos_size() const;
  inline void clear_autopos();
  static const int kAutoposFieldNumber = 2;
  inline ::google::protobuf::uint32 autopos(int index) const;
  inline void set_autopos(int index, ::google::protobuf::uint32 value);
  inline void add_autopos(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      autopos() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_autopos();

  // repeated uint32 extendpos = 3;
  inline int extendpos_size() const;
  inline void clear_extendpos();
  static const int kExtendposFieldNumber = 3;
  inline ::google::protobuf::uint32 extendpos(int index) const;
  inline void set_extendpos(int index, ::google::protobuf::uint32 value);
  inline void add_extendpos(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      extendpos() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_extendpos();

  // @@protoc_insertion_point(class_scope:Cmd.SkillValidPosData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > pos_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > autopos_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > extendpos_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static SkillValidPosData* default_instance_;
};
// -------------------------------------------------------------------

class SkillProfessionData : public ::google::protobuf::Message {
 public:
  SkillProfessionData();
  virtual ~SkillProfessionData();

  SkillProfessionData(const SkillProfessionData& from);

  inline SkillProfessionData& operator=(const SkillProfessionData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SkillProfessionData& default_instance();

  void Swap(SkillProfessionData* other);

  // implements Message ----------------------------------------------

  SkillProfessionData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SkillProfessionData& from);
  void MergeFrom(const SkillProfessionData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 left_point = 1;
  inline bool has_left_point() const;
  inline void clear_left_point();
  static const int kLeftPointFieldNumber = 1;
  inline ::google::protobuf::uint32 left_point() const;
  inline void set_left_point(::google::protobuf::uint32 value);

  // repeated .Cmd.SkillData datas = 2;
  inline int datas_size() const;
  inline void clear_datas();
  static const int kDatasFieldNumber = 2;
  inline const ::Cmd::SkillData& datas(int index) const;
  inline ::Cmd::SkillData* mutable_datas(int index);
  inline ::Cmd::SkillData* add_datas();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::SkillData >&
      datas() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::SkillData >*
      mutable_datas();

  // optional .Cmd.SkillData novice_data = 3;
  inline bool has_novice_data() const;
  inline void clear_novice_data();
  static const int kNoviceDataFieldNumber = 3;
  inline const ::Cmd::SkillData& novice_data() const;
  inline ::Cmd::SkillData* mutable_novice_data();
  inline ::Cmd::SkillData* release_novice_data();
  inline void set_allocated_novice_data(::Cmd::SkillData* novice_data);

  // repeated .Cmd.BeingSkillData beings = 4;
  inline int beings_size() const;
  inline void clear_beings();
  static const int kBeingsFieldNumber = 4;
  inline const ::Cmd::BeingSkillData& beings(int index) const;
  inline ::Cmd::BeingSkillData* mutable_beings(int index);
  inline ::Cmd::BeingSkillData* add_beings();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::BeingSkillData >&
      beings() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::BeingSkillData >*
      mutable_beings();

  // optional uint32 curbeingid = 5;
  inline bool has_curbeingid() const;
  inline void clear_curbeingid();
  static const int kCurbeingidFieldNumber = 5;
  inline ::google::protobuf::uint32 curbeingid() const;
  inline void set_curbeingid(::google::protobuf::uint32 value);

  // repeated .Cmd.BeingInfo beinginfos = 6;
  inline int beinginfos_size() const;
  inline void clear_beinginfos();
  static const int kBeinginfosFieldNumber = 6;
  inline const ::Cmd::BeingInfo& beinginfos(int index) const;
  inline ::Cmd::BeingInfo* mutable_beinginfos(int index);
  inline ::Cmd::BeingInfo* add_beinginfos();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::BeingInfo >&
      beinginfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::BeingInfo >*
      mutable_beinginfos();

  // optional .Cmd.SkillValidPosData skillpos = 7;
  inline bool has_skillpos() const;
  inline void clear_skillpos();
  static const int kSkillposFieldNumber = 7;
  inline const ::Cmd::SkillValidPosData& skillpos() const;
  inline ::Cmd::SkillValidPosData* mutable_skillpos();
  inline ::Cmd::SkillValidPosData* release_skillpos();
  inline void set_allocated_skillpos(::Cmd::SkillValidPosData* skillpos);

  // optional .Cmd.SkillValidPos shortcut = 8;
  inline bool has_shortcut() const;
  inline void clear_shortcut();
  static const int kShortcutFieldNumber = 8;
  inline const ::Cmd::SkillValidPos& shortcut() const;
  inline ::Cmd::SkillValidPos* mutable_shortcut();
  inline ::Cmd::SkillValidPos* release_shortcut();
  inline void set_allocated_shortcut(::Cmd::SkillValidPos* shortcut);

  // @@protoc_insertion_point(class_scope:Cmd.SkillProfessionData)
 private:
  inline void set_has_left_point();
  inline void clear_has_left_point();
  inline void set_has_novice_data();
  inline void clear_has_novice_data();
  inline void set_has_curbeingid();
  inline void clear_has_curbeingid();
  inline void set_has_skillpos();
  inline void clear_has_skillpos();
  inline void set_has_shortcut();
  inline void clear_has_shortcut();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::SkillData > datas_;
  ::Cmd::SkillData* novice_data_;
  ::google::protobuf::uint32 left_point_;
  ::google::protobuf::uint32 curbeingid_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::BeingSkillData > beings_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::BeingInfo > beinginfos_;
  ::Cmd::SkillValidPosData* skillpos_;
  ::Cmd::SkillValidPos* shortcut_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static SkillProfessionData* default_instance_;
};
// -------------------------------------------------------------------

class ProfessionUserInfo : public ::google::protobuf::Message {
 public:
  ProfessionUserInfo();
  virtual ~ProfessionUserInfo();

  ProfessionUserInfo(const ProfessionUserInfo& from);

  inline ProfessionUserInfo& operator=(const ProfessionUserInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProfessionUserInfo& default_instance();

  void Swap(ProfessionUserInfo* other);

  // implements Message ----------------------------------------------

  ProfessionUserInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProfessionUserInfo& from);
  void MergeFrom(const ProfessionUserInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 profession = 2;
  inline bool has_profession() const;
  inline void clear_profession();
  static const int kProfessionFieldNumber = 2;
  inline ::google::protobuf::uint32 profession() const;
  inline void set_profession(::google::protobuf::uint32 value);

  // optional uint32 joblv = 3 [default = 0];
  inline bool has_joblv() const;
  inline void clear_joblv();
  static const int kJoblvFieldNumber = 3;
  inline ::google::protobuf::uint32 joblv() const;
  inline void set_joblv(::google::protobuf::uint32 value);

  // optional uint32 jobexp = 4 [default = 0];
  inline bool has_jobexp() const;
  inline void clear_jobexp();
  static const int kJobexpFieldNumber = 4;
  inline ::google::protobuf::uint32 jobexp() const;
  inline void set_jobexp(::google::protobuf::uint32 value);

  // optional .Cmd.EProfressionDataType type = 5 [default = ETypeBranch];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 5;
  inline ::Cmd::EProfressionDataType type() const;
  inline void set_type(::Cmd::EProfressionDataType value);

  // optional string recordname = 6;
  inline bool has_recordname() const;
  inline void clear_recordname();
  static const int kRecordnameFieldNumber = 6;
  inline const ::std::string& recordname() const;
  inline void set_recordname(const ::std::string& value);
  inline void set_recordname(const char* value);
  inline void set_recordname(const char* value, size_t size);
  inline ::std::string* mutable_recordname();
  inline ::std::string* release_recordname();
  inline void set_allocated_recordname(::std::string* recordname);

  // optional uint32 recordtime = 7;
  inline bool has_recordtime() const;
  inline void clear_recordtime();
  static const int kRecordtimeFieldNumber = 7;
  inline ::google::protobuf::uint32 recordtime() const;
  inline void set_recordtime(::google::protobuf::uint32 value);

  // optional uint64 charid = 8;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 8;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional string charname = 9;
  inline bool has_charname() const;
  inline void clear_charname();
  static const int kCharnameFieldNumber = 9;
  inline const ::std::string& charname() const;
  inline void set_charname(const ::std::string& value);
  inline void set_charname(const char* value);
  inline void set_charname(const char* value, size_t size);
  inline ::std::string* mutable_charname();
  inline ::std::string* release_charname();
  inline void set_allocated_charname(::std::string* charname);

  // optional .Cmd.AttrProfessionData attr_data = 10;
  inline bool has_attr_data() const;
  inline void clear_attr_data();
  static const int kAttrDataFieldNumber = 10;
  inline const ::Cmd::AttrProfessionData& attr_data() const;
  inline ::Cmd::AttrProfessionData* mutable_attr_data();
  inline ::Cmd::AttrProfessionData* release_attr_data();
  inline void set_allocated_attr_data(::Cmd::AttrProfessionData* attr_data);

  // repeated .Cmd.EquipPackData equip_data = 11;
  inline int equip_data_size() const;
  inline void clear_equip_data();
  static const int kEquipDataFieldNumber = 11;
  inline const ::Cmd::EquipPackData& equip_data(int index) const;
  inline ::Cmd::EquipPackData* mutable_equip_data(int index);
  inline ::Cmd::EquipPackData* add_equip_data();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::EquipPackData >&
      equip_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::EquipPackData >*
      mutable_equip_data();

  // optional .Cmd.AstrolabeProfessionData astrolabe_data = 12;
  inline bool has_astrolabe_data() const;
  inline void clear_astrolabe_data();
  static const int kAstrolabeDataFieldNumber = 12;
  inline const ::Cmd::AstrolabeProfessionData& astrolabe_data() const;
  inline ::Cmd::AstrolabeProfessionData* mutable_astrolabe_data();
  inline ::Cmd::AstrolabeProfessionData* release_astrolabe_data();
  inline void set_allocated_astrolabe_data(::Cmd::AstrolabeProfessionData* astrolabe_data);

  // optional .Cmd.SkillProfessionData skill_data = 13;
  inline bool has_skill_data() const;
  inline void clear_skill_data();
  static const int kSkillDataFieldNumber = 13;
  inline const ::Cmd::SkillProfessionData& skill_data() const;
  inline ::Cmd::SkillProfessionData* mutable_skill_data();
  inline ::Cmd::SkillProfessionData* release_skill_data();
  inline void set_allocated_skill_data(::Cmd::SkillProfessionData* skill_data);

  // optional bool isfirst = 14 [default = true];
  inline bool has_isfirst() const;
  inline void clear_isfirst();
  static const int kIsfirstFieldNumber = 14;
  inline bool isfirst() const;
  inline void set_isfirst(bool value);

  // optional bool isbuy = 15 [default = false];
  inline bool has_isbuy() const;
  inline void clear_isbuy();
  static const int kIsbuyFieldNumber = 15;
  inline bool isbuy() const;
  inline void set_isbuy(bool value);

  // @@protoc_insertion_point(class_scope:Cmd.ProfessionUserInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_profession();
  inline void clear_has_profession();
  inline void set_has_joblv();
  inline void clear_has_joblv();
  inline void set_has_jobexp();
  inline void clear_has_jobexp();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_recordname();
  inline void clear_has_recordname();
  inline void set_has_recordtime();
  inline void clear_has_recordtime();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_charname();
  inline void clear_has_charname();
  inline void set_has_attr_data();
  inline void clear_has_attr_data();
  inline void set_has_astrolabe_data();
  inline void clear_has_astrolabe_data();
  inline void set_has_skill_data();
  inline void clear_has_skill_data();
  inline void set_has_isfirst();
  inline void clear_has_isfirst();
  inline void set_has_isbuy();
  inline void clear_has_isbuy();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 profession_;
  ::google::protobuf::uint32 joblv_;
  ::google::protobuf::uint32 jobexp_;
  ::std::string* recordname_;
  int type_;
  ::google::protobuf::uint32 recordtime_;
  ::google::protobuf::uint64 charid_;
  ::std::string* charname_;
  ::Cmd::AttrProfessionData* attr_data_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::EquipPackData > equip_data_;
  ::Cmd::AstrolabeProfessionData* astrolabe_data_;
  ::Cmd::SkillProfessionData* skill_data_;
  bool isfirst_;
  bool isbuy_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static ProfessionUserInfo* default_instance_;
};
// -------------------------------------------------------------------

class SlotInfo : public ::google::protobuf::Message {
 public:
  SlotInfo();
  virtual ~SlotInfo();

  SlotInfo(const SlotInfo& from);

  inline SlotInfo& operator=(const SlotInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SlotInfo& default_instance();

  void Swap(SlotInfo* other);

  // implements Message ----------------------------------------------

  SlotInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SlotInfo& from);
  void MergeFrom(const SlotInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional .Cmd.ESlotType type = 2 [default = ESLOT_DEFAULT];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::Cmd::ESlotType type() const;
  inline void set_type(::Cmd::ESlotType value);

  // optional bool active = 3 [default = false];
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 3;
  inline bool active() const;
  inline void set_active(bool value);

  // optional uint32 costid = 4;
  inline bool has_costid() const;
  inline void clear_costid();
  static const int kCostidFieldNumber = 4;
  inline ::google::protobuf::uint32 costid() const;
  inline void set_costid(::google::protobuf::uint32 value);

  // optional uint32 costnum = 5;
  inline bool has_costnum() const;
  inline void clear_costnum();
  static const int kCostnumFieldNumber = 5;
  inline ::google::protobuf::uint32 costnum() const;
  inline void set_costnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.SlotInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_active();
  inline void clear_has_active();
  inline void set_has_costid();
  inline void clear_has_costid();
  inline void set_has_costnum();
  inline void clear_has_costnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  int type_;
  bool active_;
  ::google::protobuf::uint32 costid_;
  ::google::protobuf::uint32 costnum_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static SlotInfo* default_instance_;
};
// -------------------------------------------------------------------

class UserAstrolMaterialData : public ::google::protobuf::Message {
 public:
  UserAstrolMaterialData();
  virtual ~UserAstrolMaterialData();

  UserAstrolMaterialData(const UserAstrolMaterialData& from);

  inline UserAstrolMaterialData& operator=(const UserAstrolMaterialData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserAstrolMaterialData& default_instance();

  void Swap(UserAstrolMaterialData* other);

  // implements Message ----------------------------------------------

  UserAstrolMaterialData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserAstrolMaterialData& from);
  void MergeFrom(const UserAstrolMaterialData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // repeated .Cmd.AstrolabeCostData materials = 2;
  inline int materials_size() const;
  inline void clear_materials();
  static const int kMaterialsFieldNumber = 2;
  inline const ::Cmd::AstrolabeCostData& materials(int index) const;
  inline ::Cmd::AstrolabeCostData* mutable_materials(int index);
  inline ::Cmd::AstrolabeCostData* add_materials();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::AstrolabeCostData >&
      materials() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::AstrolabeCostData >*
      mutable_materials();

  // @@protoc_insertion_point(class_scope:Cmd.UserAstrolMaterialData)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 charid_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::AstrolabeCostData > materials_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static UserAstrolMaterialData* default_instance_;
};
// -------------------------------------------------------------------

class UpdateRecordInfoUserCmd : public ::google::protobuf::Message {
 public:
  UpdateRecordInfoUserCmd();
  virtual ~UpdateRecordInfoUserCmd();

  UpdateRecordInfoUserCmd(const UpdateRecordInfoUserCmd& from);

  inline UpdateRecordInfoUserCmd& operator=(const UpdateRecordInfoUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateRecordInfoUserCmd& default_instance();

  void Swap(UpdateRecordInfoUserCmd* other);

  // implements Message ----------------------------------------------

  UpdateRecordInfoUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateRecordInfoUserCmd& from);
  void MergeFrom(const UpdateRecordInfoUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_UPDATE_RECORD_INFO];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // repeated .Cmd.SlotInfo slots = 3;
  inline int slots_size() const;
  inline void clear_slots();
  static const int kSlotsFieldNumber = 3;
  inline const ::Cmd::SlotInfo& slots(int index) const;
  inline ::Cmd::SlotInfo* mutable_slots(int index);
  inline ::Cmd::SlotInfo* add_slots();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::SlotInfo >&
      slots() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::SlotInfo >*
      mutable_slots();

  // repeated .Cmd.ProfessionUserInfo records = 4;
  inline int records_size() const;
  inline void clear_records();
  static const int kRecordsFieldNumber = 4;
  inline const ::Cmd::ProfessionUserInfo& records(int index) const;
  inline ::Cmd::ProfessionUserInfo* mutable_records(int index);
  inline ::Cmd::ProfessionUserInfo* add_records();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ProfessionUserInfo >&
      records() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::ProfessionUserInfo >*
      mutable_records();

  // repeated uint32 delete_ids = 5;
  inline int delete_ids_size() const;
  inline void clear_delete_ids();
  static const int kDeleteIdsFieldNumber = 5;
  inline ::google::protobuf::uint32 delete_ids(int index) const;
  inline void set_delete_ids(int index, ::google::protobuf::uint32 value);
  inline void add_delete_ids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      delete_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_delete_ids();

  // optional uint32 card_expiretime = 6;
  inline bool has_card_expiretime() const;
  inline void clear_card_expiretime();
  static const int kCardExpiretimeFieldNumber = 6;
  inline ::google::protobuf::uint32 card_expiretime() const;
  inline void set_card_expiretime(::google::protobuf::uint32 value);

  // repeated .Cmd.UserAstrolMaterialData astrol_data = 7;
  inline int astrol_data_size() const;
  inline void clear_astrol_data();
  static const int kAstrolDataFieldNumber = 7;
  inline const ::Cmd::UserAstrolMaterialData& astrol_data(int index) const;
  inline ::Cmd::UserAstrolMaterialData* mutable_astrol_data(int index);
  inline ::Cmd::UserAstrolMaterialData* add_astrol_data();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::UserAstrolMaterialData >&
      astrol_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::UserAstrolMaterialData >*
      mutable_astrol_data();

  // @@protoc_insertion_point(class_scope:Cmd.UpdateRecordInfoUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_card_expiretime();
  inline void clear_has_card_expiretime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::SlotInfo > slots_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::ProfessionUserInfo > records_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > delete_ids_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::UserAstrolMaterialData > astrol_data_;
  ::google::protobuf::uint32 card_expiretime_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static UpdateRecordInfoUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class SaveRecordUserCmd : public ::google::protobuf::Message {
 public:
  SaveRecordUserCmd();
  virtual ~SaveRecordUserCmd();

  SaveRecordUserCmd(const SaveRecordUserCmd& from);

  inline SaveRecordUserCmd& operator=(const SaveRecordUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SaveRecordUserCmd& default_instance();

  void Swap(SaveRecordUserCmd* other);

  // implements Message ----------------------------------------------

  SaveRecordUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SaveRecordUserCmd& from);
  void MergeFrom(const SaveRecordUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SAVE_RECORD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional uint32 slotid = 3;
  inline bool has_slotid() const;
  inline void clear_slotid();
  static const int kSlotidFieldNumber = 3;
  inline ::google::protobuf::uint32 slotid() const;
  inline void set_slotid(::google::protobuf::uint32 value);

  // optional string record_name = 4;
  inline bool has_record_name() const;
  inline void clear_record_name();
  static const int kRecordNameFieldNumber = 4;
  inline const ::std::string& record_name() const;
  inline void set_record_name(const ::std::string& value);
  inline void set_record_name(const char* value);
  inline void set_record_name(const char* value, size_t size);
  inline ::std::string* mutable_record_name();
  inline ::std::string* release_record_name();
  inline void set_allocated_record_name(::std::string* record_name);

  // @@protoc_insertion_point(class_scope:Cmd.SaveRecordUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_slotid();
  inline void clear_has_slotid();
  inline void set_has_record_name();
  inline void clear_has_record_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::std::string* record_name_;
  ::google::protobuf::uint32 slotid_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static SaveRecordUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class LoadRecordUserCmd : public ::google::protobuf::Message {
 public:
  LoadRecordUserCmd();
  virtual ~LoadRecordUserCmd();

  LoadRecordUserCmd(const LoadRecordUserCmd& from);

  inline LoadRecordUserCmd& operator=(const LoadRecordUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoadRecordUserCmd& default_instance();

  void Swap(LoadRecordUserCmd* other);

  // implements Message ----------------------------------------------

  LoadRecordUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoadRecordUserCmd& from);
  void MergeFrom(const LoadRecordUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_LOAD_RECORD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional uint32 slotid = 3;
  inline bool has_slotid() const;
  inline void clear_slotid();
  static const int kSlotidFieldNumber = 3;
  inline ::google::protobuf::uint32 slotid() const;
  inline void set_slotid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.LoadRecordUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_slotid();
  inline void clear_has_slotid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 slotid_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static LoadRecordUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class ChangeRecordNameUserCmd : public ::google::protobuf::Message {
 public:
  ChangeRecordNameUserCmd();
  virtual ~ChangeRecordNameUserCmd();

  ChangeRecordNameUserCmd(const ChangeRecordNameUserCmd& from);

  inline ChangeRecordNameUserCmd& operator=(const ChangeRecordNameUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChangeRecordNameUserCmd& default_instance();

  void Swap(ChangeRecordNameUserCmd* other);

  // implements Message ----------------------------------------------

  ChangeRecordNameUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChangeRecordNameUserCmd& from);
  void MergeFrom(const ChangeRecordNameUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_CHANGE_RECORD_NAME];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional uint32 slotid = 3;
  inline bool has_slotid() const;
  inline void clear_slotid();
  static const int kSlotidFieldNumber = 3;
  inline ::google::protobuf::uint32 slotid() const;
  inline void set_slotid(::google::protobuf::uint32 value);

  // optional string record_name = 4;
  inline bool has_record_name() const;
  inline void clear_record_name();
  static const int kRecordNameFieldNumber = 4;
  inline const ::std::string& record_name() const;
  inline void set_record_name(const ::std::string& value);
  inline void set_record_name(const char* value);
  inline void set_record_name(const char* value, size_t size);
  inline ::std::string* mutable_record_name();
  inline ::std::string* release_record_name();
  inline void set_allocated_record_name(::std::string* record_name);

  // @@protoc_insertion_point(class_scope:Cmd.ChangeRecordNameUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_slotid();
  inline void clear_has_slotid();
  inline void set_has_record_name();
  inline void clear_has_record_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::std::string* record_name_;
  ::google::protobuf::uint32 slotid_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static ChangeRecordNameUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class BuyRecordSlotUserCmd : public ::google::protobuf::Message {
 public:
  BuyRecordSlotUserCmd();
  virtual ~BuyRecordSlotUserCmd();

  BuyRecordSlotUserCmd(const BuyRecordSlotUserCmd& from);

  inline BuyRecordSlotUserCmd& operator=(const BuyRecordSlotUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuyRecordSlotUserCmd& default_instance();

  void Swap(BuyRecordSlotUserCmd* other);

  // implements Message ----------------------------------------------

  BuyRecordSlotUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuyRecordSlotUserCmd& from);
  void MergeFrom(const BuyRecordSlotUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_BUY_RECORD_SLOT];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional uint32 slotid = 3;
  inline bool has_slotid() const;
  inline void clear_slotid();
  static const int kSlotidFieldNumber = 3;
  inline ::google::protobuf::uint32 slotid() const;
  inline void set_slotid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.BuyRecordSlotUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_slotid();
  inline void clear_has_slotid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 slotid_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static BuyRecordSlotUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class DeleteRecordUserCmd : public ::google::protobuf::Message {
 public:
  DeleteRecordUserCmd();
  virtual ~DeleteRecordUserCmd();

  DeleteRecordUserCmd(const DeleteRecordUserCmd& from);

  inline DeleteRecordUserCmd& operator=(const DeleteRecordUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteRecordUserCmd& default_instance();

  void Swap(DeleteRecordUserCmd* other);

  // implements Message ----------------------------------------------

  DeleteRecordUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeleteRecordUserCmd& from);
  void MergeFrom(const DeleteRecordUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_DELETE_RECORD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional uint32 slotid = 3;
  inline bool has_slotid() const;
  inline void clear_slotid();
  static const int kSlotidFieldNumber = 3;
  inline ::google::protobuf::uint32 slotid() const;
  inline void set_slotid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.DeleteRecordUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_slotid();
  inline void clear_has_slotid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 slotid_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static DeleteRecordUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class UpdateBranchInfoUserCmd : public ::google::protobuf::Message {
 public:
  UpdateBranchInfoUserCmd();
  virtual ~UpdateBranchInfoUserCmd();

  UpdateBranchInfoUserCmd(const UpdateBranchInfoUserCmd& from);

  inline UpdateBranchInfoUserCmd& operator=(const UpdateBranchInfoUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateBranchInfoUserCmd& default_instance();

  void Swap(UpdateBranchInfoUserCmd* other);

  // implements Message ----------------------------------------------

  UpdateBranchInfoUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateBranchInfoUserCmd& from);
  void MergeFrom(const UpdateBranchInfoUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_UPDATE_BRANCH_INFO];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // repeated .Cmd.ProfessionUserInfo datas = 3;
  inline int datas_size() const;
  inline void clear_datas();
  static const int kDatasFieldNumber = 3;
  inline const ::Cmd::ProfessionUserInfo& datas(int index) const;
  inline ::Cmd::ProfessionUserInfo* mutable_datas(int index);
  inline ::Cmd::ProfessionUserInfo* add_datas();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ProfessionUserInfo >&
      datas() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::ProfessionUserInfo >*
      mutable_datas();

  // optional uint32 sync_type = 4 [default = 0];
  inline bool has_sync_type() const;
  inline void clear_sync_type();
  static const int kSyncTypeFieldNumber = 4;
  inline ::google::protobuf::uint32 sync_type() const;
  inline void set_sync_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.UpdateBranchInfoUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_sync_type();
  inline void clear_has_sync_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::ProfessionUserInfo > datas_;
  ::google::protobuf::uint32 sync_type_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static UpdateBranchInfoUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class EnterCapraActivityCmd : public ::google::protobuf::Message {
 public:
  EnterCapraActivityCmd();
  virtual ~EnterCapraActivityCmd();

  EnterCapraActivityCmd(const EnterCapraActivityCmd& from);

  inline EnterCapraActivityCmd& operator=(const EnterCapraActivityCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EnterCapraActivityCmd& default_instance();

  void Swap(EnterCapraActivityCmd* other);

  // implements Message ----------------------------------------------

  EnterCapraActivityCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EnterCapraActivityCmd& from);
  void MergeFrom(const EnterCapraActivityCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_ENTER_CAPRA_ACTIVITY];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // @@protoc_insertion_point(class_scope:Cmd.EnterCapraActivityCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static EnterCapraActivityCmd* default_instance_;
};
// -------------------------------------------------------------------

class InviteWithMeUserCmd : public ::google::protobuf::Message {
 public:
  InviteWithMeUserCmd();
  virtual ~InviteWithMeUserCmd();

  InviteWithMeUserCmd(const InviteWithMeUserCmd& from);

  inline InviteWithMeUserCmd& operator=(const InviteWithMeUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InviteWithMeUserCmd& default_instance();

  void Swap(InviteWithMeUserCmd* other);

  // implements Message ----------------------------------------------

  InviteWithMeUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InviteWithMeUserCmd& from);
  void MergeFrom(const InviteWithMeUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_INVITE_WITH_ME];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional uint64 sendid = 3 [default = 0];
  inline bool has_sendid() const;
  inline void clear_sendid();
  static const int kSendidFieldNumber = 3;
  inline ::google::protobuf::uint64 sendid() const;
  inline void set_sendid(::google::protobuf::uint64 value);

  // optional uint32 time = 4 [default = 0];
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional bool reply = 5 [default = false];
  inline bool has_reply() const;
  inline void clear_reply();
  static const int kReplyFieldNumber = 5;
  inline bool reply() const;
  inline void set_reply(bool value);

  // optional bytes sign = 6;
  inline bool has_sign() const;
  inline void clear_sign();
  static const int kSignFieldNumber = 6;
  inline const ::std::string& sign() const;
  inline void set_sign(const ::std::string& value);
  inline void set_sign(const char* value);
  inline void set_sign(const void* value, size_t size);
  inline ::std::string* mutable_sign();
  inline ::std::string* release_sign();
  inline void set_allocated_sign(::std::string* sign);

  // @@protoc_insertion_point(class_scope:Cmd.InviteWithMeUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_sendid();
  inline void clear_has_sendid();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_reply();
  inline void clear_has_reply();
  inline void set_has_sign();
  inline void clear_has_sign();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 sendid_;
  ::google::protobuf::uint32 time_;
  bool reply_;
  ::std::string* sign_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static InviteWithMeUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class QueryAltmanKillUserCmd : public ::google::protobuf::Message {
 public:
  QueryAltmanKillUserCmd();
  virtual ~QueryAltmanKillUserCmd();

  QueryAltmanKillUserCmd(const QueryAltmanKillUserCmd& from);

  inline QueryAltmanKillUserCmd& operator=(const QueryAltmanKillUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryAltmanKillUserCmd& default_instance();

  void Swap(QueryAltmanKillUserCmd* other);

  // implements Message ----------------------------------------------

  QueryAltmanKillUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryAltmanKillUserCmd& from);
  void MergeFrom(const QueryAltmanKillUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_QUERY_ALTMAN_KILL];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // @@protoc_insertion_point(class_scope:Cmd.QueryAltmanKillUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static QueryAltmanKillUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class BoothInfo : public ::google::protobuf::Message {
 public:
  BoothInfo();
  virtual ~BoothInfo();

  BoothInfo(const BoothInfo& from);

  inline BoothInfo& operator=(const BoothInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BoothInfo& default_instance();

  void Swap(BoothInfo* other);

  // implements Message ----------------------------------------------

  BoothInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BoothInfo& from);
  void MergeFrom(const BoothInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional .Cmd.EBoothSign sign = 2;
  inline bool has_sign() const;
  inline void clear_sign();
  static const int kSignFieldNumber = 2;
  inline ::Cmd::EBoothSign sign() const;
  inline void set_sign(::Cmd::EBoothSign value);

  // @@protoc_insertion_point(class_scope:Cmd.BoothInfo)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_sign();
  inline void clear_has_sign();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  int sign_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static BoothInfo* default_instance_;
};
// -------------------------------------------------------------------

class BoothReqUserCmd : public ::google::protobuf::Message {
 public:
  BoothReqUserCmd();
  virtual ~BoothReqUserCmd();

  BoothReqUserCmd(const BoothReqUserCmd& from);

  inline BoothReqUserCmd& operator=(const BoothReqUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BoothReqUserCmd& default_instance();

  void Swap(BoothReqUserCmd* other);

  // implements Message ----------------------------------------------

  BoothReqUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BoothReqUserCmd& from);
  void MergeFrom(const BoothReqUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_USER_BOOTH_REQ];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional .Cmd.EBoothOper oper = 4 [default = EBOOTHOPER_OPEN];
  inline bool has_oper() const;
  inline void clear_oper();
  static const int kOperFieldNumber = 4;
  inline ::Cmd::EBoothOper oper() const;
  inline void set_oper(::Cmd::EBoothOper value);

  // optional bool success = 5 [default = true];
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 5;
  inline bool success() const;
  inline void set_success(bool value);

  // @@protoc_insertion_point(class_scope:Cmd.BoothReqUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_oper();
  inline void clear_has_oper();
  inline void set_has_success();
  inline void clear_has_success();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::std::string* name_;
  int oper_;
  bool success_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static BoothReqUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class BoothInfoSyncUserCmd : public ::google::protobuf::Message {
 public:
  BoothInfoSyncUserCmd();
  virtual ~BoothInfoSyncUserCmd();

  BoothInfoSyncUserCmd(const BoothInfoSyncUserCmd& from);

  inline BoothInfoSyncUserCmd& operator=(const BoothInfoSyncUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BoothInfoSyncUserCmd& default_instance();

  void Swap(BoothInfoSyncUserCmd* other);

  // implements Message ----------------------------------------------

  BoothInfoSyncUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BoothInfoSyncUserCmd& from);
  void MergeFrom(const BoothInfoSyncUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_BOOTH_INFO_SYNC];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional uint64 charid = 3;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 3;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional .Cmd.EBoothOper oper = 4 [default = EBOOTHOPER_OPEN];
  inline bool has_oper() const;
  inline void clear_oper();
  static const int kOperFieldNumber = 4;
  inline ::Cmd::EBoothOper oper() const;
  inline void set_oper(::Cmd::EBoothOper value);

  // optional .Cmd.BoothInfo info = 5;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 5;
  inline const ::Cmd::BoothInfo& info() const;
  inline ::Cmd::BoothInfo* mutable_info();
  inline ::Cmd::BoothInfo* release_info();
  inline void set_allocated_info(::Cmd::BoothInfo* info);

  // @@protoc_insertion_point(class_scope:Cmd.BoothInfoSyncUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_oper();
  inline void clear_has_oper();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 charid_;
  ::Cmd::BoothInfo* info_;
  int oper_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static BoothInfoSyncUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class DressUpModelUserCmd : public ::google::protobuf::Message {
 public:
  DressUpModelUserCmd();
  virtual ~DressUpModelUserCmd();

  DressUpModelUserCmd(const DressUpModelUserCmd& from);

  inline DressUpModelUserCmd& operator=(const DressUpModelUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DressUpModelUserCmd& default_instance();

  void Swap(DressUpModelUserCmd* other);

  // implements Message ----------------------------------------------

  DressUpModelUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DressUpModelUserCmd& from);
  void MergeFrom(const DressUpModelUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_DRESSUP_MODEL];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional uint32 stageid = 3 [default = 0];
  inline bool has_stageid() const;
  inline void clear_stageid();
  static const int kStageidFieldNumber = 3;
  inline ::google::protobuf::uint32 stageid() const;
  inline void set_stageid(::google::protobuf::uint32 value);

  // optional .Cmd.EUserDataType type = 4 [default = EUSERDATATYPE_MIN];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::Cmd::EUserDataType type() const;
  inline void set_type(::Cmd::EUserDataType value);

  // optional uint32 value = 5 [default = 0];
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 5;
  inline ::google::protobuf::uint32 value() const;
  inline void set_value(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.DressUpModelUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_stageid();
  inline void clear_has_stageid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 stageid_;
  int type_;
  ::google::protobuf::uint32 value_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static DressUpModelUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class DressUpHeadUserCmd : public ::google::protobuf::Message {
 public:
  DressUpHeadUserCmd();
  virtual ~DressUpHeadUserCmd();

  DressUpHeadUserCmd(const DressUpHeadUserCmd& from);

  inline DressUpHeadUserCmd& operator=(const DressUpHeadUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DressUpHeadUserCmd& default_instance();

  void Swap(DressUpHeadUserCmd* other);

  // implements Message ----------------------------------------------

  DressUpHeadUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DressUpHeadUserCmd& from);
  void MergeFrom(const DressUpHeadUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_DRESSUP_HEAD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional .Cmd.EUserDataType type = 3 [default = EUSERDATATYPE_MIN];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::Cmd::EUserDataType type() const;
  inline void set_type(::Cmd::EUserDataType value);

  // optional uint32 value = 4 [default = 0];
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 4;
  inline ::google::protobuf::uint32 value() const;
  inline void set_value(::google::protobuf::uint32 value);

  // optional bool puton = 5 [default = true];
  inline bool has_puton() const;
  inline void clear_puton();
  static const int kPutonFieldNumber = 5;
  inline bool puton() const;
  inline void set_puton(bool value);

  // @@protoc_insertion_point(class_scope:Cmd.DressUpHeadUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_puton();
  inline void clear_has_puton();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  int type_;
  ::google::protobuf::uint32 value_;
  bool puton_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static DressUpHeadUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class StageInfo : public ::google::protobuf::Message {
 public:
  StageInfo();
  virtual ~StageInfo();

  StageInfo(const StageInfo& from);

  inline StageInfo& operator=(const StageInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StageInfo& default_instance();

  void Swap(StageInfo* other);

  // implements Message ----------------------------------------------

  StageInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StageInfo& from);
  void MergeFrom(const StageInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 stageid = 1 [default = 0];
  inline bool has_stageid() const;
  inline void clear_stageid();
  static const int kStageidFieldNumber = 1;
  inline ::google::protobuf::uint32 stageid() const;
  inline void set_stageid(::google::protobuf::uint32 value);

  // optional uint32 usernum = 2 [default = 0];
  inline bool has_usernum() const;
  inline void clear_usernum();
  static const int kUsernumFieldNumber = 2;
  inline ::google::protobuf::uint32 usernum() const;
  inline void set_usernum(::google::protobuf::uint32 value);

  // optional uint32 waittime = 3 [default = 0];
  inline bool has_waittime() const;
  inline void clear_waittime();
  static const int kWaittimeFieldNumber = 3;
  inline ::google::protobuf::uint32 waittime() const;
  inline void set_waittime(::google::protobuf::uint32 value);

  // optional uint32 status = 4 [default = 0];
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 4;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.StageInfo)
 private:
  inline void set_has_stageid();
  inline void clear_has_stageid();
  inline void set_has_usernum();
  inline void clear_has_usernum();
  inline void set_has_waittime();
  inline void clear_has_waittime();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 stageid_;
  ::google::protobuf::uint32 usernum_;
  ::google::protobuf::uint32 waittime_;
  ::google::protobuf::uint32 status_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static StageInfo* default_instance_;
};
// -------------------------------------------------------------------

class QueryStageUserCmd : public ::google::protobuf::Message {
 public:
  QueryStageUserCmd();
  virtual ~QueryStageUserCmd();

  QueryStageUserCmd(const QueryStageUserCmd& from);

  inline QueryStageUserCmd& operator=(const QueryStageUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryStageUserCmd& default_instance();

  void Swap(QueryStageUserCmd* other);

  // implements Message ----------------------------------------------

  QueryStageUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryStageUserCmd& from);
  void MergeFrom(const QueryStageUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_QUERY_STAGE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional uint32 stageid = 3 [default = 0];
  inline bool has_stageid() const;
  inline void clear_stageid();
  static const int kStageidFieldNumber = 3;
  inline ::google::protobuf::uint32 stageid() const;
  inline void set_stageid(::google::protobuf::uint32 value);

  // repeated .Cmd.StageInfo info = 4;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 4;
  inline const ::Cmd::StageInfo& info(int index) const;
  inline ::Cmd::StageInfo* mutable_info(int index);
  inline ::Cmd::StageInfo* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::StageInfo >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::StageInfo >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:Cmd.QueryStageUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_stageid();
  inline void clear_has_stageid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::StageInfo > info_;
  ::google::protobuf::uint32 stageid_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static QueryStageUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class DressUpLineUpUserCmd : public ::google::protobuf::Message {
 public:
  DressUpLineUpUserCmd();
  virtual ~DressUpLineUpUserCmd();

  DressUpLineUpUserCmd(const DressUpLineUpUserCmd& from);

  inline DressUpLineUpUserCmd& operator=(const DressUpLineUpUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DressUpLineUpUserCmd& default_instance();

  void Swap(DressUpLineUpUserCmd* other);

  // implements Message ----------------------------------------------

  DressUpLineUpUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DressUpLineUpUserCmd& from);
  void MergeFrom(const DressUpLineUpUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_DRESSUP_LINEUP];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional uint32 stageid = 3 [default = 0];
  inline bool has_stageid() const;
  inline void clear_stageid();
  static const int kStageidFieldNumber = 3;
  inline ::google::protobuf::uint32 stageid() const;
  inline void set_stageid(::google::protobuf::uint32 value);

  // optional uint32 mode = 4 [default = 0];
  inline bool has_mode() const;
  inline void clear_mode();
  static const int kModeFieldNumber = 4;
  inline ::google::protobuf::uint32 mode() const;
  inline void set_mode(::google::protobuf::uint32 value);

  // optional bool enter = 5 [default = false];
  inline bool has_enter() const;
  inline void clear_enter();
  static const int kEnterFieldNumber = 5;
  inline bool enter() const;
  inline void set_enter(bool value);

  // @@protoc_insertion_point(class_scope:Cmd.DressUpLineUpUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_stageid();
  inline void clear_has_stageid();
  inline void set_has_mode();
  inline void clear_has_mode();
  inline void set_has_enter();
  inline void clear_has_enter();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 stageid_;
  ::google::protobuf::uint32 mode_;
  bool enter_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static DressUpLineUpUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class StageUserDataType : public ::google::protobuf::Message {
 public:
  StageUserDataType();
  virtual ~StageUserDataType();

  StageUserDataType(const StageUserDataType& from);

  inline StageUserDataType& operator=(const StageUserDataType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StageUserDataType& default_instance();

  void Swap(StageUserDataType* other);

  // implements Message ----------------------------------------------

  StageUserDataType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StageUserDataType& from);
  void MergeFrom(const StageUserDataType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.EUserDataType type = 1 [default = EUSERDATATYPE_MIN];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::Cmd::EUserDataType type() const;
  inline void set_type(::Cmd::EUserDataType value);

  // optional uint32 value = 2 [default = 0];
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::uint32 value() const;
  inline void set_value(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.StageUserDataType)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int type_;
  ::google::protobuf::uint32 value_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static StageUserDataType* default_instance_;
};
// -------------------------------------------------------------------

class DressUpStageUserCmd : public ::google::protobuf::Message {
 public:
  DressUpStageUserCmd();
  virtual ~DressUpStageUserCmd();

  DressUpStageUserCmd(const DressUpStageUserCmd& from);

  inline DressUpStageUserCmd& operator=(const DressUpStageUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DressUpStageUserCmd& default_instance();

  void Swap(DressUpStageUserCmd* other);

  // implements Message ----------------------------------------------

  DressUpStageUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DressUpStageUserCmd& from);
  void MergeFrom(const DressUpStageUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_DRESSUP_STAGE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // repeated uint64 userid = 3;
  inline int userid_size() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 3;
  inline ::google::protobuf::uint64 userid(int index) const;
  inline void set_userid(int index, ::google::protobuf::uint64 value);
  inline void add_userid(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      userid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_userid();

  // optional uint32 stageid = 4 [default = 0];
  inline bool has_stageid() const;
  inline void clear_stageid();
  static const int kStageidFieldNumber = 4;
  inline ::google::protobuf::uint32 stageid() const;
  inline void set_stageid(::google::protobuf::uint32 value);

  // repeated .Cmd.StageUserDataType datas = 5;
  inline int datas_size() const;
  inline void clear_datas();
  static const int kDatasFieldNumber = 5;
  inline const ::Cmd::StageUserDataType& datas(int index) const;
  inline ::Cmd::StageUserDataType* mutable_datas(int index);
  inline ::Cmd::StageUserDataType* add_datas();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::StageUserDataType >&
      datas() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::StageUserDataType >*
      mutable_datas();

  // @@protoc_insertion_point(class_scope:Cmd.DressUpStageUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_stageid();
  inline void clear_has_stageid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > userid_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::StageUserDataType > datas_;
  ::google::protobuf::uint32 stageid_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static DressUpStageUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class GoToFunctionMapUserCmd : public ::google::protobuf::Message {
 public:
  GoToFunctionMapUserCmd();
  virtual ~GoToFunctionMapUserCmd();

  GoToFunctionMapUserCmd(const GoToFunctionMapUserCmd& from);

  inline GoToFunctionMapUserCmd& operator=(const GoToFunctionMapUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GoToFunctionMapUserCmd& default_instance();

  void Swap(GoToFunctionMapUserCmd* other);

  // implements Message ----------------------------------------------

  GoToFunctionMapUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GoToFunctionMapUserCmd& from);
  void MergeFrom(const GoToFunctionMapUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_GOTO_FUNCMAP];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // required .Cmd.EFuncMapType etype = 3;
  inline bool has_etype() const;
  inline void clear_etype();
  static const int kEtypeFieldNumber = 3;
  inline ::Cmd::EFuncMapType etype() const;
  inline void set_etype(::Cmd::EFuncMapType value);

  // @@protoc_insertion_point(class_scope:Cmd.GoToFunctionMapUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_etype();
  inline void clear_has_etype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  int etype_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static GoToFunctionMapUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class GrowthCurInfo : public ::google::protobuf::Message {
 public:
  GrowthCurInfo();
  virtual ~GrowthCurInfo();

  GrowthCurInfo(const GrowthCurInfo& from);

  inline GrowthCurInfo& operator=(const GrowthCurInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GrowthCurInfo& default_instance();

  void Swap(GrowthCurInfo* other);

  // implements Message ----------------------------------------------

  GrowthCurInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GrowthCurInfo& from);
  void MergeFrom(const GrowthCurInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.EGrowthType type = 1 [default = EGROWTH_TYPE_STEP];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::Cmd::EGrowthType type() const;
  inline void set_type(::Cmd::EGrowthType value);

  // optional uint32 groupid = 2 [default = 0];
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 2;
  inline ::google::protobuf::uint32 groupid() const;
  inline void set_groupid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.GrowthCurInfo)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_groupid();
  inline void clear_has_groupid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int type_;
  ::google::protobuf::uint32 groupid_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static GrowthCurInfo* default_instance_;
};
// -------------------------------------------------------------------

class GrowthItemInfo : public ::google::protobuf::Message {
 public:
  GrowthItemInfo();
  virtual ~GrowthItemInfo();

  GrowthItemInfo(const GrowthItemInfo& from);

  inline GrowthItemInfo& operator=(const GrowthItemInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GrowthItemInfo& default_instance();

  void Swap(GrowthItemInfo* other);

  // implements Message ----------------------------------------------

  GrowthItemInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GrowthItemInfo& from);
  void MergeFrom(const GrowthItemInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 dwid = 1 [default = 0];
  inline bool has_dwid() const;
  inline void clear_dwid();
  static const int kDwidFieldNumber = 1;
  inline ::google::protobuf::uint32 dwid() const;
  inline void set_dwid(::google::protobuf::uint32 value);

  // optional uint32 finishtimes = 2 [default = 0];
  inline bool has_finishtimes() const;
  inline void clear_finishtimes();
  static const int kFinishtimesFieldNumber = 2;
  inline ::google::protobuf::uint32 finishtimes() const;
  inline void set_finishtimes(::google::protobuf::uint32 value);

  // optional .Cmd.EGrowthStatus status = 3 [default = EGROWTH_STATUS_MIN];
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 3;
  inline ::Cmd::EGrowthStatus status() const;
  inline void set_status(::Cmd::EGrowthStatus value);

  // @@protoc_insertion_point(class_scope:Cmd.GrowthItemInfo)
 private:
  inline void set_has_dwid();
  inline void clear_has_dwid();
  inline void set_has_finishtimes();
  inline void clear_has_finishtimes();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 dwid_;
  ::google::protobuf::uint32 finishtimes_;
  int status_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static GrowthItemInfo* default_instance_;
};
// -------------------------------------------------------------------

class GrowthValueInfo : public ::google::protobuf::Message {
 public:
  GrowthValueInfo();
  virtual ~GrowthValueInfo();

  GrowthValueInfo(const GrowthValueInfo& from);

  inline GrowthValueInfo& operator=(const GrowthValueInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GrowthValueInfo& default_instance();

  void Swap(GrowthValueInfo* other);

  // implements Message ----------------------------------------------

  GrowthValueInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GrowthValueInfo& from);
  void MergeFrom(const GrowthValueInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 groupid = 1 [default = 0];
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 1;
  inline ::google::protobuf::uint32 groupid() const;
  inline void set_groupid(::google::protobuf::uint32 value);

  // optional uint32 growth = 2 [default = 0];
  inline bool has_growth() const;
  inline void clear_growth();
  static const int kGrowthFieldNumber = 2;
  inline ::google::protobuf::uint32 growth() const;
  inline void set_growth(::google::protobuf::uint32 value);

  // repeated uint32 everreward = 3;
  inline int everreward_size() const;
  inline void clear_everreward();
  static const int kEverrewardFieldNumber = 3;
  inline ::google::protobuf::uint32 everreward(int index) const;
  inline void set_everreward(int index, ::google::protobuf::uint32 value);
  inline void add_everreward(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      everreward() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_everreward();

  // @@protoc_insertion_point(class_scope:Cmd.GrowthValueInfo)
 private:
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_growth();
  inline void clear_has_growth();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 groupid_;
  ::google::protobuf::uint32 growth_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > everreward_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static GrowthValueInfo* default_instance_;
};
// -------------------------------------------------------------------

class GrowthGroupInfo : public ::google::protobuf::Message {
 public:
  GrowthGroupInfo();
  virtual ~GrowthGroupInfo();

  GrowthGroupInfo(const GrowthGroupInfo& from);

  inline GrowthGroupInfo& operator=(const GrowthGroupInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GrowthGroupInfo& default_instance();

  void Swap(GrowthGroupInfo* other);

  // implements Message ----------------------------------------------

  GrowthGroupInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GrowthGroupInfo& from);
  void MergeFrom(const GrowthGroupInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Cmd.GrowthItemInfo items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline const ::Cmd::GrowthItemInfo& items(int index) const;
  inline ::Cmd::GrowthItemInfo* mutable_items(int index);
  inline ::Cmd::GrowthItemInfo* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::GrowthItemInfo >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::GrowthItemInfo >*
      mutable_items();

  // optional .Cmd.GrowthValueInfo valueitems = 2;
  inline bool has_valueitems() const;
  inline void clear_valueitems();
  static const int kValueitemsFieldNumber = 2;
  inline const ::Cmd::GrowthValueInfo& valueitems() const;
  inline ::Cmd::GrowthValueInfo* mutable_valueitems();
  inline ::Cmd::GrowthValueInfo* release_valueitems();
  inline void set_allocated_valueitems(::Cmd::GrowthValueInfo* valueitems);

  // @@protoc_insertion_point(class_scope:Cmd.GrowthGroupInfo)
 private:
  inline void set_has_valueitems();
  inline void clear_has_valueitems();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::GrowthItemInfo > items_;
  ::Cmd::GrowthValueInfo* valueitems_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static GrowthGroupInfo* default_instance_;
};
// -------------------------------------------------------------------

class GrowthServantUserCmd : public ::google::protobuf::Message {
 public:
  GrowthServantUserCmd();
  virtual ~GrowthServantUserCmd();

  GrowthServantUserCmd(const GrowthServantUserCmd& from);

  inline GrowthServantUserCmd& operator=(const GrowthServantUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GrowthServantUserCmd& default_instance();

  void Swap(GrowthServantUserCmd* other);

  // implements Message ----------------------------------------------

  GrowthServantUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GrowthServantUserCmd& from);
  void MergeFrom(const GrowthServantUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SERVANT_GROWTH];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // repeated .Cmd.GrowthGroupInfo datas = 3;
  inline int datas_size() const;
  inline void clear_datas();
  static const int kDatasFieldNumber = 3;
  inline const ::Cmd::GrowthGroupInfo& datas(int index) const;
  inline ::Cmd::GrowthGroupInfo* mutable_datas(int index);
  inline ::Cmd::GrowthGroupInfo* add_datas();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::GrowthGroupInfo >&
      datas() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::GrowthGroupInfo >*
      mutable_datas();

  // repeated uint32 unlockitems = 4;
  inline int unlockitems_size() const;
  inline void clear_unlockitems();
  static const int kUnlockitemsFieldNumber = 4;
  inline ::google::protobuf::uint32 unlockitems(int index) const;
  inline void set_unlockitems(int index, ::google::protobuf::uint32 value);
  inline void add_unlockitems(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      unlockitems() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_unlockitems();

  // @@protoc_insertion_point(class_scope:Cmd.GrowthServantUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::GrowthGroupInfo > datas_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > unlockitems_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static GrowthServantUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class ReceiveGrowthServantUserCmd : public ::google::protobuf::Message {
 public:
  ReceiveGrowthServantUserCmd();
  virtual ~ReceiveGrowthServantUserCmd();

  ReceiveGrowthServantUserCmd(const ReceiveGrowthServantUserCmd& from);

  inline ReceiveGrowthServantUserCmd& operator=(const ReceiveGrowthServantUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReceiveGrowthServantUserCmd& default_instance();

  void Swap(ReceiveGrowthServantUserCmd* other);

  // implements Message ----------------------------------------------

  ReceiveGrowthServantUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReceiveGrowthServantUserCmd& from);
  void MergeFrom(const ReceiveGrowthServantUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SERVANT_RECEIVE_GROWTH];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional uint32 dwid = 3 [default = 0];
  inline bool has_dwid() const;
  inline void clear_dwid();
  static const int kDwidFieldNumber = 3;
  inline ::google::protobuf::uint32 dwid() const;
  inline void set_dwid(::google::protobuf::uint32 value);

  // optional uint32 dwvalue = 4 [default = 0];
  inline bool has_dwvalue() const;
  inline void clear_dwvalue();
  static const int kDwvalueFieldNumber = 4;
  inline ::google::protobuf::uint32 dwvalue() const;
  inline void set_dwvalue(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.ReceiveGrowthServantUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_dwid();
  inline void clear_has_dwid();
  inline void set_has_dwvalue();
  inline void clear_has_dwvalue();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 dwid_;
  ::google::protobuf::uint32 dwvalue_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static ReceiveGrowthServantUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class GrowthOpenServantUserCmd : public ::google::protobuf::Message {
 public:
  GrowthOpenServantUserCmd();
  virtual ~GrowthOpenServantUserCmd();

  GrowthOpenServantUserCmd(const GrowthOpenServantUserCmd& from);

  inline GrowthOpenServantUserCmd& operator=(const GrowthOpenServantUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GrowthOpenServantUserCmd& default_instance();

  void Swap(GrowthOpenServantUserCmd* other);

  // implements Message ----------------------------------------------

  GrowthOpenServantUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GrowthOpenServantUserCmd& from);
  void MergeFrom(const GrowthOpenServantUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SERVANT_GROWTH_OPEN];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional uint32 groupid = 3 [default = 0];
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 3;
  inline ::google::protobuf::uint32 groupid() const;
  inline void set_groupid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.GrowthOpenServantUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_groupid();
  inline void clear_has_groupid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 groupid_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static GrowthOpenServantUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class CheatTagUserCmd : public ::google::protobuf::Message {
 public:
  CheatTagUserCmd();
  virtual ~CheatTagUserCmd();

  CheatTagUserCmd(const CheatTagUserCmd& from);

  inline CheatTagUserCmd& operator=(const CheatTagUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CheatTagUserCmd& default_instance();

  void Swap(CheatTagUserCmd* other);

  // implements Message ----------------------------------------------

  CheatTagUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CheatTagUserCmd& from);
  void MergeFrom(const CheatTagUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_CHEAT_TAG];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional uint32 interval = 3 [default = 0];
  inline bool has_interval() const;
  inline void clear_interval();
  static const int kIntervalFieldNumber = 3;
  inline ::google::protobuf::uint32 interval() const;
  inline void set_interval(::google::protobuf::uint32 value);

  // optional uint32 frame = 4 [default = 0];
  inline bool has_frame() const;
  inline void clear_frame();
  static const int kFrameFieldNumber = 4;
  inline ::google::protobuf::uint32 frame() const;
  inline void set_frame(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.CheatTagUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_interval();
  inline void clear_has_interval();
  inline void set_has_frame();
  inline void clear_has_frame();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 interval_;
  ::google::protobuf::uint32 frame_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static CheatTagUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class CheatTagStatUserCmd : public ::google::protobuf::Message {
 public:
  CheatTagStatUserCmd();
  virtual ~CheatTagStatUserCmd();

  CheatTagStatUserCmd(const CheatTagStatUserCmd& from);

  inline CheatTagStatUserCmd& operator=(const CheatTagStatUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CheatTagStatUserCmd& default_instance();

  void Swap(CheatTagStatUserCmd* other);

  // implements Message ----------------------------------------------

  CheatTagStatUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CheatTagStatUserCmd& from);
  void MergeFrom(const CheatTagStatUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_CHEAT_TAG_STAT];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::User2Param param() const;
  inline void set_param(::Cmd::User2Param value);

  // optional uint32 count = 3 [default = 0];
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 3;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.CheatTagStatUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 count_;
  friend void  protobuf_AddDesc_SceneUser2_2eproto();
  friend void protobuf_AssignDesc_SceneUser2_2eproto();
  friend void protobuf_ShutdownFile_SceneUser2_2eproto();

  void InitAsDefaultInstance();
  static CheatTagStatUserCmd* default_instance_;
};
// ===================================================================


// ===================================================================

// GoCity

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool GoCity::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GoCity::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GoCity::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GoCity::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command GoCity::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.GoCity.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void GoCity::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GoCity.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_GOCITY];
inline bool GoCity::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GoCity::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GoCity::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GoCity::clear_param() {
  param_ = 1;
  clear_has_param();
}
inline ::Cmd::User2Param GoCity::param() const {
  // @@protoc_insertion_point(field_get:Cmd.GoCity.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void GoCity::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GoCity.param)
}

// optional uint32 mapid = 3 [default = 0];
inline bool GoCity::has_mapid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GoCity::set_has_mapid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GoCity::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GoCity::clear_mapid() {
  mapid_ = 0u;
  clear_has_mapid();
}
inline ::google::protobuf::uint32 GoCity::mapid() const {
  // @@protoc_insertion_point(field_get:Cmd.GoCity.mapid)
  return mapid_;
}
inline void GoCity::set_mapid(::google::protobuf::uint32 value) {
  set_has_mapid();
  mapid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GoCity.mapid)
}

// -------------------------------------------------------------------

// MsgLangParam

// optional uint32 language = 1 [default = 0];
inline bool MsgLangParam::has_language() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgLangParam::set_has_language() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgLangParam::clear_has_language() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgLangParam::clear_language() {
  language_ = 0u;
  clear_has_language();
}
inline ::google::protobuf::uint32 MsgLangParam::language() const {
  // @@protoc_insertion_point(field_get:Cmd.MsgLangParam.language)
  return language_;
}
inline void MsgLangParam::set_language(::google::protobuf::uint32 value) {
  set_has_language();
  language_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MsgLangParam.language)
}

// optional string param = 2;
inline bool MsgLangParam::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgLangParam::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgLangParam::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgLangParam::clear_param() {
  if (param_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    param_->clear();
  }
  clear_has_param();
}
inline const ::std::string& MsgLangParam::param() const {
  // @@protoc_insertion_point(field_get:Cmd.MsgLangParam.param)
  return *param_;
}
inline void MsgLangParam::set_param(const ::std::string& value) {
  set_has_param();
  if (param_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    param_ = new ::std::string;
  }
  param_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.MsgLangParam.param)
}
inline void MsgLangParam::set_param(const char* value) {
  set_has_param();
  if (param_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    param_ = new ::std::string;
  }
  param_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.MsgLangParam.param)
}
inline void MsgLangParam::set_param(const char* value, size_t size) {
  set_has_param();
  if (param_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    param_ = new ::std::string;
  }
  param_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.MsgLangParam.param)
}
inline ::std::string* MsgLangParam::mutable_param() {
  set_has_param();
  if (param_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    param_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.MsgLangParam.param)
  return param_;
}
inline ::std::string* MsgLangParam::release_param() {
  clear_has_param();
  if (param_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = param_;
    param_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgLangParam::set_allocated_param(::std::string* param) {
  if (param_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete param_;
  }
  if (param) {
    set_has_param();
    param_ = param;
  } else {
    clear_has_param();
    param_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.MsgLangParam.param)
}

// -------------------------------------------------------------------

// MsgParam

// optional string param = 1;
inline bool MsgParam::has_param() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgParam::set_has_param() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgParam::clear_has_param() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgParam::clear_param() {
  if (param_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    param_->clear();
  }
  clear_has_param();
}
inline const ::std::string& MsgParam::param() const {
  // @@protoc_insertion_point(field_get:Cmd.MsgParam.param)
  return *param_;
}
inline void MsgParam::set_param(const ::std::string& value) {
  set_has_param();
  if (param_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    param_ = new ::std::string;
  }
  param_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.MsgParam.param)
}
inline void MsgParam::set_param(const char* value) {
  set_has_param();
  if (param_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    param_ = new ::std::string;
  }
  param_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.MsgParam.param)
}
inline void MsgParam::set_param(const char* value, size_t size) {
  set_has_param();
  if (param_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    param_ = new ::std::string;
  }
  param_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.MsgParam.param)
}
inline ::std::string* MsgParam::mutable_param() {
  set_has_param();
  if (param_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    param_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.MsgParam.param)
  return param_;
}
inline ::std::string* MsgParam::release_param() {
  clear_has_param();
  if (param_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = param_;
    param_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MsgParam::set_allocated_param(::std::string* param) {
  if (param_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete param_;
  }
  if (param) {
    set_has_param();
    param_ = param;
  } else {
    clear_has_param();
    param_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.MsgParam.param)
}

// repeated string subparams = 2;
inline int MsgParam::subparams_size() const {
  return subparams_.size();
}
inline void MsgParam::clear_subparams() {
  subparams_.Clear();
}
inline const ::std::string& MsgParam::subparams(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.MsgParam.subparams)
  return subparams_.Get(index);
}
inline ::std::string* MsgParam::mutable_subparams(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.MsgParam.subparams)
  return subparams_.Mutable(index);
}
inline void MsgParam::set_subparams(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Cmd.MsgParam.subparams)
  subparams_.Mutable(index)->assign(value);
}
inline void MsgParam::set_subparams(int index, const char* value) {
  subparams_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.MsgParam.subparams)
}
inline void MsgParam::set_subparams(int index, const char* value, size_t size) {
  subparams_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.MsgParam.subparams)
}
inline ::std::string* MsgParam::add_subparams() {
  return subparams_.Add();
}
inline void MsgParam::add_subparams(const ::std::string& value) {
  subparams_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Cmd.MsgParam.subparams)
}
inline void MsgParam::add_subparams(const char* value) {
  subparams_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Cmd.MsgParam.subparams)
}
inline void MsgParam::add_subparams(const char* value, size_t size) {
  subparams_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Cmd.MsgParam.subparams)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MsgParam::subparams() const {
  // @@protoc_insertion_point(field_list:Cmd.MsgParam.subparams)
  return subparams_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MsgParam::mutable_subparams() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.MsgParam.subparams)
  return &subparams_;
}

// repeated .Cmd.MsgLangParam langparams = 3;
inline int MsgParam::langparams_size() const {
  return langparams_.size();
}
inline void MsgParam::clear_langparams() {
  langparams_.Clear();
}
inline const ::Cmd::MsgLangParam& MsgParam::langparams(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.MsgParam.langparams)
  return langparams_.Get(index);
}
inline ::Cmd::MsgLangParam* MsgParam::mutable_langparams(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.MsgParam.langparams)
  return langparams_.Mutable(index);
}
inline ::Cmd::MsgLangParam* MsgParam::add_langparams() {
  // @@protoc_insertion_point(field_add:Cmd.MsgParam.langparams)
  return langparams_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::MsgLangParam >&
MsgParam::langparams() const {
  // @@protoc_insertion_point(field_list:Cmd.MsgParam.langparams)
  return langparams_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::MsgLangParam >*
MsgParam::mutable_langparams() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.MsgParam.langparams)
  return &langparams_;
}

// -------------------------------------------------------------------

// SysMsg

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool SysMsg::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SysMsg::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SysMsg::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SysMsg::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command SysMsg::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.SysMsg.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void SysMsg::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SysMsg.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_SYSMSG];
inline bool SysMsg::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SysMsg::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SysMsg::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SysMsg::clear_param() {
  param_ = 2;
  clear_has_param();
}
inline ::Cmd::User2Param SysMsg::param() const {
  // @@protoc_insertion_point(field_get:Cmd.SysMsg.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void SysMsg::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SysMsg.param)
}

// optional uint32 id = 3 [default = 0];
inline bool SysMsg::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SysMsg::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SysMsg::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SysMsg::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 SysMsg::id() const {
  // @@protoc_insertion_point(field_get:Cmd.SysMsg.id)
  return id_;
}
inline void SysMsg::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SysMsg.id)
}

// optional .Cmd.EMessageType type = 4 [default = EMESSAGETYPE_MIN];
inline bool SysMsg::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SysMsg::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SysMsg::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SysMsg::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Cmd::EMessageType SysMsg::type() const {
  // @@protoc_insertion_point(field_get:Cmd.SysMsg.type)
  return static_cast< ::Cmd::EMessageType >(type_);
}
inline void SysMsg::set_type(::Cmd::EMessageType value) {
  assert(::Cmd::EMessageType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SysMsg.type)
}

// repeated .Cmd.MsgParam params = 5;
inline int SysMsg::params_size() const {
  return params_.size();
}
inline void SysMsg::clear_params() {
  params_.Clear();
}
inline const ::Cmd::MsgParam& SysMsg::params(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.SysMsg.params)
  return params_.Get(index);
}
inline ::Cmd::MsgParam* SysMsg::mutable_params(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.SysMsg.params)
  return params_.Mutable(index);
}
inline ::Cmd::MsgParam* SysMsg::add_params() {
  // @@protoc_insertion_point(field_add:Cmd.SysMsg.params)
  return params_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::MsgParam >&
SysMsg::params() const {
  // @@protoc_insertion_point(field_list:Cmd.SysMsg.params)
  return params_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::MsgParam >*
SysMsg::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.SysMsg.params)
  return &params_;
}

// optional .Cmd.EMessageActOpt act = 6 [default = EMESSAGEACT_ADD];
inline bool SysMsg::has_act() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SysMsg::set_has_act() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SysMsg::clear_has_act() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SysMsg::clear_act() {
  act_ = 1;
  clear_has_act();
}
inline ::Cmd::EMessageActOpt SysMsg::act() const {
  // @@protoc_insertion_point(field_get:Cmd.SysMsg.act)
  return static_cast< ::Cmd::EMessageActOpt >(act_);
}
inline void SysMsg::set_act(::Cmd::EMessageActOpt value) {
  assert(::Cmd::EMessageActOpt_IsValid(value));
  set_has_act();
  act_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SysMsg.act)
}

// optional uint32 delay = 7 [default = 0];
inline bool SysMsg::has_delay() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SysMsg::set_has_delay() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SysMsg::clear_has_delay() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SysMsg::clear_delay() {
  delay_ = 0u;
  clear_has_delay();
}
inline ::google::protobuf::uint32 SysMsg::delay() const {
  // @@protoc_insertion_point(field_get:Cmd.SysMsg.delay)
  return delay_;
}
inline void SysMsg::set_delay(::google::protobuf::uint32 value) {
  set_has_delay();
  delay_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SysMsg.delay)
}

// -------------------------------------------------------------------

// NpcDataSync

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool NpcDataSync::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NpcDataSync::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NpcDataSync::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NpcDataSync::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command NpcDataSync::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.NpcDataSync.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void NpcDataSync::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NpcDataSync.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_NPCDATASYNC];
inline bool NpcDataSync::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NpcDataSync::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NpcDataSync::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NpcDataSync::clear_param() {
  param_ = 3;
  clear_has_param();
}
inline ::Cmd::User2Param NpcDataSync::param() const {
  // @@protoc_insertion_point(field_get:Cmd.NpcDataSync.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void NpcDataSync::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NpcDataSync.param)
}

// optional uint64 guid = 3 [default = 0];
inline bool NpcDataSync::has_guid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NpcDataSync::set_has_guid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NpcDataSync::clear_has_guid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NpcDataSync::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
  clear_has_guid();
}
inline ::google::protobuf::uint64 NpcDataSync::guid() const {
  // @@protoc_insertion_point(field_get:Cmd.NpcDataSync.guid)
  return guid_;
}
inline void NpcDataSync::set_guid(::google::protobuf::uint64 value) {
  set_has_guid();
  guid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NpcDataSync.guid)
}

// repeated .Cmd.UserAttr attrs = 4;
inline int NpcDataSync::attrs_size() const {
  return attrs_.size();
}
inline void NpcDataSync::clear_attrs() {
  attrs_.Clear();
}
inline const ::Cmd::UserAttr& NpcDataSync::attrs(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.NpcDataSync.attrs)
  return attrs_.Get(index);
}
inline ::Cmd::UserAttr* NpcDataSync::mutable_attrs(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.NpcDataSync.attrs)
  return attrs_.Mutable(index);
}
inline ::Cmd::UserAttr* NpcDataSync::add_attrs() {
  // @@protoc_insertion_point(field_add:Cmd.NpcDataSync.attrs)
  return attrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::UserAttr >&
NpcDataSync::attrs() const {
  // @@protoc_insertion_point(field_list:Cmd.NpcDataSync.attrs)
  return attrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::UserAttr >*
NpcDataSync::mutable_attrs() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.NpcDataSync.attrs)
  return &attrs_;
}

// repeated .Cmd.UserData datas = 5;
inline int NpcDataSync::datas_size() const {
  return datas_.size();
}
inline void NpcDataSync::clear_datas() {
  datas_.Clear();
}
inline const ::Cmd::UserData& NpcDataSync::datas(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.NpcDataSync.datas)
  return datas_.Get(index);
}
inline ::Cmd::UserData* NpcDataSync::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.NpcDataSync.datas)
  return datas_.Mutable(index);
}
inline ::Cmd::UserData* NpcDataSync::add_datas() {
  // @@protoc_insertion_point(field_add:Cmd.NpcDataSync.datas)
  return datas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::UserData >&
NpcDataSync::datas() const {
  // @@protoc_insertion_point(field_list:Cmd.NpcDataSync.datas)
  return datas_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::UserData >*
NpcDataSync::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.NpcDataSync.datas)
  return &datas_;
}

// -------------------------------------------------------------------

// UserNineSyncCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool UserNineSyncCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserNineSyncCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserNineSyncCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserNineSyncCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command UserNineSyncCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.UserNineSyncCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void UserNineSyncCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserNineSyncCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_USERNINESYNC];
inline bool UserNineSyncCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserNineSyncCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserNineSyncCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserNineSyncCmd::clear_param() {
  param_ = 4;
  clear_has_param();
}
inline ::Cmd::User2Param UserNineSyncCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.UserNineSyncCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void UserNineSyncCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserNineSyncCmd.param)
}

// optional uint64 guid = 3 [default = 0];
inline bool UserNineSyncCmd::has_guid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserNineSyncCmd::set_has_guid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserNineSyncCmd::clear_has_guid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserNineSyncCmd::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
  clear_has_guid();
}
inline ::google::protobuf::uint64 UserNineSyncCmd::guid() const {
  // @@protoc_insertion_point(field_get:Cmd.UserNineSyncCmd.guid)
  return guid_;
}
inline void UserNineSyncCmd::set_guid(::google::protobuf::uint64 value) {
  set_has_guid();
  guid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserNineSyncCmd.guid)
}

// repeated .Cmd.UserData datas = 4;
inline int UserNineSyncCmd::datas_size() const {
  return datas_.size();
}
inline void UserNineSyncCmd::clear_datas() {
  datas_.Clear();
}
inline const ::Cmd::UserData& UserNineSyncCmd::datas(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.UserNineSyncCmd.datas)
  return datas_.Get(index);
}
inline ::Cmd::UserData* UserNineSyncCmd::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.UserNineSyncCmd.datas)
  return datas_.Mutable(index);
}
inline ::Cmd::UserData* UserNineSyncCmd::add_datas() {
  // @@protoc_insertion_point(field_add:Cmd.UserNineSyncCmd.datas)
  return datas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::UserData >&
UserNineSyncCmd::datas() const {
  // @@protoc_insertion_point(field_list:Cmd.UserNineSyncCmd.datas)
  return datas_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::UserData >*
UserNineSyncCmd::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.UserNineSyncCmd.datas)
  return &datas_;
}

// repeated .Cmd.UserAttr attrs = 5;
inline int UserNineSyncCmd::attrs_size() const {
  return attrs_.size();
}
inline void UserNineSyncCmd::clear_attrs() {
  attrs_.Clear();
}
inline const ::Cmd::UserAttr& UserNineSyncCmd::attrs(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.UserNineSyncCmd.attrs)
  return attrs_.Get(index);
}
inline ::Cmd::UserAttr* UserNineSyncCmd::mutable_attrs(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.UserNineSyncCmd.attrs)
  return attrs_.Mutable(index);
}
inline ::Cmd::UserAttr* UserNineSyncCmd::add_attrs() {
  // @@protoc_insertion_point(field_add:Cmd.UserNineSyncCmd.attrs)
  return attrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::UserAttr >&
UserNineSyncCmd::attrs() const {
  // @@protoc_insertion_point(field_list:Cmd.UserNineSyncCmd.attrs)
  return attrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::UserAttr >*
UserNineSyncCmd::mutable_attrs() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.UserNineSyncCmd.attrs)
  return &attrs_;
}

// -------------------------------------------------------------------

// UserActionNtf

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool UserActionNtf::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserActionNtf::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserActionNtf::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserActionNtf::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command UserActionNtf::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.UserActionNtf.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void UserActionNtf::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserActionNtf.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_ACTION];
inline bool UserActionNtf::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserActionNtf::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserActionNtf::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserActionNtf::clear_param() {
  param_ = 5;
  clear_has_param();
}
inline ::Cmd::User2Param UserActionNtf::param() const {
  // @@protoc_insertion_point(field_get:Cmd.UserActionNtf.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void UserActionNtf::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserActionNtf.param)
}

// optional uint64 charid = 3 [default = 0];
inline bool UserActionNtf::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserActionNtf::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserActionNtf::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserActionNtf::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 UserActionNtf::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.UserActionNtf.charid)
  return charid_;
}
inline void UserActionNtf::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserActionNtf.charid)
}

// optional uint64 value = 5 [default = 0];
inline bool UserActionNtf::has_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserActionNtf::set_has_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserActionNtf::clear_has_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserActionNtf::clear_value() {
  value_ = GOOGLE_ULONGLONG(0);
  clear_has_value();
}
inline ::google::protobuf::uint64 UserActionNtf::value() const {
  // @@protoc_insertion_point(field_get:Cmd.UserActionNtf.value)
  return value_;
}
inline void UserActionNtf::set_value(::google::protobuf::uint64 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserActionNtf.value)
}

// optional .Cmd.EUserActionType type = 4 [default = EUSERACTIONTYPE_MIN];
inline bool UserActionNtf::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserActionNtf::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserActionNtf::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserActionNtf::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Cmd::EUserActionType UserActionNtf::type() const {
  // @@protoc_insertion_point(field_get:Cmd.UserActionNtf.type)
  return static_cast< ::Cmd::EUserActionType >(type_);
}
inline void UserActionNtf::set_type(::Cmd::EUserActionType value) {
  assert(::Cmd::EUserActionType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserActionNtf.type)
}

// optional uint32 delay = 6 [default = 0];
inline bool UserActionNtf::has_delay() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserActionNtf::set_has_delay() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserActionNtf::clear_has_delay() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserActionNtf::clear_delay() {
  delay_ = 0u;
  clear_has_delay();
}
inline ::google::protobuf::uint32 UserActionNtf::delay() const {
  // @@protoc_insertion_point(field_get:Cmd.UserActionNtf.delay)
  return delay_;
}
inline void UserActionNtf::set_delay(::google::protobuf::uint32 value) {
  set_has_delay();
  delay_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserActionNtf.delay)
}

// -------------------------------------------------------------------

// BufferData

// optional uint32 id = 1 [default = 0];
inline bool BufferData::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BufferData::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BufferData::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BufferData::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 BufferData::id() const {
  // @@protoc_insertion_point(field_get:Cmd.BufferData.id)
  return id_;
}
inline void BufferData::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BufferData.id)
}

// optional uint32 layer = 2 [default = 0];
inline bool BufferData::has_layer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BufferData::set_has_layer() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BufferData::clear_has_layer() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BufferData::clear_layer() {
  layer_ = 0u;
  clear_has_layer();
}
inline ::google::protobuf::uint32 BufferData::layer() const {
  // @@protoc_insertion_point(field_get:Cmd.BufferData.layer)
  return layer_;
}
inline void BufferData::set_layer(::google::protobuf::uint32 value) {
  set_has_layer();
  layer_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BufferData.layer)
}

// optional uint64 time = 3 [default = 0];
inline bool BufferData::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BufferData::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BufferData::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BufferData::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 BufferData::time() const {
  // @@protoc_insertion_point(field_get:Cmd.BufferData.time)
  return time_;
}
inline void BufferData::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BufferData.time)
}

// optional bool active = 4 [default = true];
inline bool BufferData::has_active() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BufferData::set_has_active() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BufferData::clear_has_active() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BufferData::clear_active() {
  active_ = true;
  clear_has_active();
}
inline bool BufferData::active() const {
  // @@protoc_insertion_point(field_get:Cmd.BufferData.active)
  return active_;
}
inline void BufferData::set_active(bool value) {
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BufferData.active)
}

// optional string fromname = 5;
inline bool BufferData::has_fromname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BufferData::set_has_fromname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BufferData::clear_has_fromname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BufferData::clear_fromname() {
  if (fromname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fromname_->clear();
  }
  clear_has_fromname();
}
inline const ::std::string& BufferData::fromname() const {
  // @@protoc_insertion_point(field_get:Cmd.BufferData.fromname)
  return *fromname_;
}
inline void BufferData::set_fromname(const ::std::string& value) {
  set_has_fromname();
  if (fromname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fromname_ = new ::std::string;
  }
  fromname_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.BufferData.fromname)
}
inline void BufferData::set_fromname(const char* value) {
  set_has_fromname();
  if (fromname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fromname_ = new ::std::string;
  }
  fromname_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.BufferData.fromname)
}
inline void BufferData::set_fromname(const char* value, size_t size) {
  set_has_fromname();
  if (fromname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fromname_ = new ::std::string;
  }
  fromname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.BufferData.fromname)
}
inline ::std::string* BufferData::mutable_fromname() {
  set_has_fromname();
  if (fromname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fromname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.BufferData.fromname)
  return fromname_;
}
inline ::std::string* BufferData::release_fromname() {
  clear_has_fromname();
  if (fromname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = fromname_;
    fromname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BufferData::set_allocated_fromname(::std::string* fromname) {
  if (fromname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fromname_;
  }
  if (fromname) {
    set_has_fromname();
    fromname_ = fromname;
  } else {
    clear_has_fromname();
    fromname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BufferData.fromname)
}

// optional uint64 fromid = 6 [default = 0];
inline bool BufferData::has_fromid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BufferData::set_has_fromid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BufferData::clear_has_fromid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BufferData::clear_fromid() {
  fromid_ = GOOGLE_ULONGLONG(0);
  clear_has_fromid();
}
inline ::google::protobuf::uint64 BufferData::fromid() const {
  // @@protoc_insertion_point(field_get:Cmd.BufferData.fromid)
  return fromid_;
}
inline void BufferData::set_fromid(::google::protobuf::uint64 value) {
  set_has_fromid();
  fromid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BufferData.fromid)
}

// optional uint32 level = 7 [default = 0];
inline bool BufferData::has_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BufferData::set_has_level() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BufferData::clear_has_level() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BufferData::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 BufferData::level() const {
  // @@protoc_insertion_point(field_get:Cmd.BufferData.level)
  return level_;
}
inline void BufferData::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BufferData.level)
}

// -------------------------------------------------------------------

// UserBuffNineSyncCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool UserBuffNineSyncCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserBuffNineSyncCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserBuffNineSyncCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserBuffNineSyncCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command UserBuffNineSyncCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.UserBuffNineSyncCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void UserBuffNineSyncCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserBuffNineSyncCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_BUFFERSYNC];
inline bool UserBuffNineSyncCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserBuffNineSyncCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserBuffNineSyncCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserBuffNineSyncCmd::clear_param() {
  param_ = 6;
  clear_has_param();
}
inline ::Cmd::User2Param UserBuffNineSyncCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.UserBuffNineSyncCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void UserBuffNineSyncCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserBuffNineSyncCmd.param)
}

// optional uint64 guid = 3 [default = 0];
inline bool UserBuffNineSyncCmd::has_guid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserBuffNineSyncCmd::set_has_guid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserBuffNineSyncCmd::clear_has_guid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserBuffNineSyncCmd::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
  clear_has_guid();
}
inline ::google::protobuf::uint64 UserBuffNineSyncCmd::guid() const {
  // @@protoc_insertion_point(field_get:Cmd.UserBuffNineSyncCmd.guid)
  return guid_;
}
inline void UserBuffNineSyncCmd::set_guid(::google::protobuf::uint64 value) {
  set_has_guid();
  guid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserBuffNineSyncCmd.guid)
}

// repeated .Cmd.BufferData updates = 4;
inline int UserBuffNineSyncCmd::updates_size() const {
  return updates_.size();
}
inline void UserBuffNineSyncCmd::clear_updates() {
  updates_.Clear();
}
inline const ::Cmd::BufferData& UserBuffNineSyncCmd::updates(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.UserBuffNineSyncCmd.updates)
  return updates_.Get(index);
}
inline ::Cmd::BufferData* UserBuffNineSyncCmd::mutable_updates(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.UserBuffNineSyncCmd.updates)
  return updates_.Mutable(index);
}
inline ::Cmd::BufferData* UserBuffNineSyncCmd::add_updates() {
  // @@protoc_insertion_point(field_add:Cmd.UserBuffNineSyncCmd.updates)
  return updates_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::BufferData >&
UserBuffNineSyncCmd::updates() const {
  // @@protoc_insertion_point(field_list:Cmd.UserBuffNineSyncCmd.updates)
  return updates_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::BufferData >*
UserBuffNineSyncCmd::mutable_updates() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.UserBuffNineSyncCmd.updates)
  return &updates_;
}

// repeated uint32 dels = 5;
inline int UserBuffNineSyncCmd::dels_size() const {
  return dels_.size();
}
inline void UserBuffNineSyncCmd::clear_dels() {
  dels_.Clear();
}
inline ::google::protobuf::uint32 UserBuffNineSyncCmd::dels(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.UserBuffNineSyncCmd.dels)
  return dels_.Get(index);
}
inline void UserBuffNineSyncCmd::set_dels(int index, ::google::protobuf::uint32 value) {
  dels_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.UserBuffNineSyncCmd.dels)
}
inline void UserBuffNineSyncCmd::add_dels(::google::protobuf::uint32 value) {
  dels_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.UserBuffNineSyncCmd.dels)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
UserBuffNineSyncCmd::dels() const {
  // @@protoc_insertion_point(field_list:Cmd.UserBuffNineSyncCmd.dels)
  return dels_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
UserBuffNineSyncCmd::mutable_dels() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.UserBuffNineSyncCmd.dels)
  return &dels_;
}

// -------------------------------------------------------------------

// ExitPosUserCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool ExitPosUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExitPosUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExitPosUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExitPosUserCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command ExitPosUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ExitPosUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ExitPosUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ExitPosUserCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_EXIT_POS];
inline bool ExitPosUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExitPosUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExitPosUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExitPosUserCmd::clear_param() {
  param_ = 7;
  clear_has_param();
}
inline ::Cmd::User2Param ExitPosUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ExitPosUserCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void ExitPosUserCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ExitPosUserCmd.param)
}

// optional .Cmd.ScenePos pos = 3;
inline bool ExitPosUserCmd::has_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ExitPosUserCmd::set_has_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ExitPosUserCmd::clear_has_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ExitPosUserCmd::clear_pos() {
  if (pos_ != NULL) pos_->::Cmd::ScenePos::Clear();
  clear_has_pos();
}
inline const ::Cmd::ScenePos& ExitPosUserCmd::pos() const {
  // @@protoc_insertion_point(field_get:Cmd.ExitPosUserCmd.pos)
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::Cmd::ScenePos* ExitPosUserCmd::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::Cmd::ScenePos;
  // @@protoc_insertion_point(field_mutable:Cmd.ExitPosUserCmd.pos)
  return pos_;
}
inline ::Cmd::ScenePos* ExitPosUserCmd::release_pos() {
  clear_has_pos();
  ::Cmd::ScenePos* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void ExitPosUserCmd::set_allocated_pos(::Cmd::ScenePos* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ExitPosUserCmd.pos)
}

// optional uint32 exitid = 4;
inline bool ExitPosUserCmd::has_exitid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ExitPosUserCmd::set_has_exitid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ExitPosUserCmd::clear_has_exitid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ExitPosUserCmd::clear_exitid() {
  exitid_ = 0u;
  clear_has_exitid();
}
inline ::google::protobuf::uint32 ExitPosUserCmd::exitid() const {
  // @@protoc_insertion_point(field_get:Cmd.ExitPosUserCmd.exitid)
  return exitid_;
}
inline void ExitPosUserCmd::set_exitid(::google::protobuf::uint32 value) {
  set_has_exitid();
  exitid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ExitPosUserCmd.exitid)
}

// optional uint32 mapid = 5;
inline bool ExitPosUserCmd::has_mapid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ExitPosUserCmd::set_has_mapid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ExitPosUserCmd::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ExitPosUserCmd::clear_mapid() {
  mapid_ = 0u;
  clear_has_mapid();
}
inline ::google::protobuf::uint32 ExitPosUserCmd::mapid() const {
  // @@protoc_insertion_point(field_get:Cmd.ExitPosUserCmd.mapid)
  return mapid_;
}
inline void ExitPosUserCmd::set_mapid(::google::protobuf::uint32 value) {
  set_has_mapid();
  mapid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ExitPosUserCmd.mapid)
}

// -------------------------------------------------------------------

// Relive

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool Relive::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Relive::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Relive::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Relive::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command Relive::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.Relive.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void Relive::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.Relive.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_RELIVE];
inline bool Relive::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Relive::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Relive::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Relive::clear_param() {
  param_ = 8;
  clear_has_param();
}
inline ::Cmd::User2Param Relive::param() const {
  // @@protoc_insertion_point(field_get:Cmd.Relive.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void Relive::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.Relive.param)
}

// optional .Cmd.EReliveType type = 3 [default = ERELIVETYPE_MIN];
inline bool Relive::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Relive::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Relive::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Relive::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Cmd::EReliveType Relive::type() const {
  // @@protoc_insertion_point(field_get:Cmd.Relive.type)
  return static_cast< ::Cmd::EReliveType >(type_);
}
inline void Relive::set_type(::Cmd::EReliveType value) {
  assert(::Cmd::EReliveType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.Relive.type)
}

// -------------------------------------------------------------------

// VarUpdate

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool VarUpdate::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VarUpdate::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VarUpdate::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VarUpdate::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command VarUpdate::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.VarUpdate.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void VarUpdate::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.VarUpdate.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_VAR];
inline bool VarUpdate::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VarUpdate::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VarUpdate::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VarUpdate::clear_param() {
  param_ = 9;
  clear_has_param();
}
inline ::Cmd::User2Param VarUpdate::param() const {
  // @@protoc_insertion_point(field_get:Cmd.VarUpdate.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void VarUpdate::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.VarUpdate.param)
}

// repeated .Cmd.Var vars = 3;
inline int VarUpdate::vars_size() const {
  return vars_.size();
}
inline void VarUpdate::clear_vars() {
  vars_.Clear();
}
inline const ::Cmd::Var& VarUpdate::vars(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.VarUpdate.vars)
  return vars_.Get(index);
}
inline ::Cmd::Var* VarUpdate::mutable_vars(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.VarUpdate.vars)
  return vars_.Mutable(index);
}
inline ::Cmd::Var* VarUpdate::add_vars() {
  // @@protoc_insertion_point(field_add:Cmd.VarUpdate.vars)
  return vars_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::Var >&
VarUpdate::vars() const {
  // @@protoc_insertion_point(field_list:Cmd.VarUpdate.vars)
  return vars_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::Var >*
VarUpdate::mutable_vars() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.VarUpdate.vars)
  return &vars_;
}

// -------------------------------------------------------------------

// TalkInfo

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool TalkInfo::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TalkInfo::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TalkInfo::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TalkInfo::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command TalkInfo::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.TalkInfo.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void TalkInfo::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TalkInfo.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_TALKINFO];
inline bool TalkInfo::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TalkInfo::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TalkInfo::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TalkInfo::clear_param() {
  param_ = 10;
  clear_has_param();
}
inline ::Cmd::User2Param TalkInfo::param() const {
  // @@protoc_insertion_point(field_get:Cmd.TalkInfo.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void TalkInfo::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TalkInfo.param)
}

// optional uint64 guid = 3 [default = 0];
inline bool TalkInfo::has_guid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TalkInfo::set_has_guid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TalkInfo::clear_has_guid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TalkInfo::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
  clear_has_guid();
}
inline ::google::protobuf::uint64 TalkInfo::guid() const {
  // @@protoc_insertion_point(field_get:Cmd.TalkInfo.guid)
  return guid_;
}
inline void TalkInfo::set_guid(::google::protobuf::uint64 value) {
  set_has_guid();
  guid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TalkInfo.guid)
}

// optional uint32 talkid = 4;
inline bool TalkInfo::has_talkid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TalkInfo::set_has_talkid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TalkInfo::clear_has_talkid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TalkInfo::clear_talkid() {
  talkid_ = 0u;
  clear_has_talkid();
}
inline ::google::protobuf::uint32 TalkInfo::talkid() const {
  // @@protoc_insertion_point(field_get:Cmd.TalkInfo.talkid)
  return talkid_;
}
inline void TalkInfo::set_talkid(::google::protobuf::uint32 value) {
  set_has_talkid();
  talkid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TalkInfo.talkid)
}

// optional string talkmessage = 5;
inline bool TalkInfo::has_talkmessage() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TalkInfo::set_has_talkmessage() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TalkInfo::clear_has_talkmessage() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TalkInfo::clear_talkmessage() {
  if (talkmessage_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    talkmessage_->clear();
  }
  clear_has_talkmessage();
}
inline const ::std::string& TalkInfo::talkmessage() const {
  // @@protoc_insertion_point(field_get:Cmd.TalkInfo.talkmessage)
  return *talkmessage_;
}
inline void TalkInfo::set_talkmessage(const ::std::string& value) {
  set_has_talkmessage();
  if (talkmessage_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    talkmessage_ = new ::std::string;
  }
  talkmessage_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.TalkInfo.talkmessage)
}
inline void TalkInfo::set_talkmessage(const char* value) {
  set_has_talkmessage();
  if (talkmessage_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    talkmessage_ = new ::std::string;
  }
  talkmessage_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.TalkInfo.talkmessage)
}
inline void TalkInfo::set_talkmessage(const char* value, size_t size) {
  set_has_talkmessage();
  if (talkmessage_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    talkmessage_ = new ::std::string;
  }
  talkmessage_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.TalkInfo.talkmessage)
}
inline ::std::string* TalkInfo::mutable_talkmessage() {
  set_has_talkmessage();
  if (talkmessage_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    talkmessage_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.TalkInfo.talkmessage)
  return talkmessage_;
}
inline ::std::string* TalkInfo::release_talkmessage() {
  clear_has_talkmessage();
  if (talkmessage_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = talkmessage_;
    talkmessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TalkInfo::set_allocated_talkmessage(::std::string* talkmessage) {
  if (talkmessage_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete talkmessage_;
  }
  if (talkmessage) {
    set_has_talkmessage();
    talkmessage_ = talkmessage;
  } else {
    clear_has_talkmessage();
    talkmessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.TalkInfo.talkmessage)
}

// repeated .Cmd.MsgParam params = 6;
inline int TalkInfo::params_size() const {
  return params_.size();
}
inline void TalkInfo::clear_params() {
  params_.Clear();
}
inline const ::Cmd::MsgParam& TalkInfo::params(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.TalkInfo.params)
  return params_.Get(index);
}
inline ::Cmd::MsgParam* TalkInfo::mutable_params(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.TalkInfo.params)
  return params_.Mutable(index);
}
inline ::Cmd::MsgParam* TalkInfo::add_params() {
  // @@protoc_insertion_point(field_add:Cmd.TalkInfo.params)
  return params_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::MsgParam >&
TalkInfo::params() const {
  // @@protoc_insertion_point(field_list:Cmd.TalkInfo.params)
  return params_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::MsgParam >*
TalkInfo::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.TalkInfo.params)
  return &params_;
}

// -------------------------------------------------------------------

// ServerTime

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool ServerTime::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerTime::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerTime::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerTime::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command ServerTime::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ServerTime.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ServerTime::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ServerTime.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_SERVERTIME];
inline bool ServerTime::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerTime::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerTime::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerTime::clear_param() {
  param_ = 11;
  clear_has_param();
}
inline ::Cmd::User2Param ServerTime::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ServerTime.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void ServerTime::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ServerTime.param)
}

// optional uint64 time = 3 [default = 0];
inline bool ServerTime::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServerTime::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServerTime::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServerTime::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 ServerTime::time() const {
  // @@protoc_insertion_point(field_get:Cmd.ServerTime.time)
  return time_;
}
inline void ServerTime::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ServerTime.time)
}

// -------------------------------------------------------------------

// EffectUserCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool EffectUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EffectUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EffectUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EffectUserCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command EffectUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.EffectUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void EffectUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EffectUserCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_EFFECT];
inline bool EffectUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EffectUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EffectUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EffectUserCmd::clear_param() {
  param_ = 14;
  clear_has_param();
}
inline ::Cmd::User2Param EffectUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.EffectUserCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void EffectUserCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EffectUserCmd.param)
}

// optional .Cmd.EEffectType effecttype = 3 [default = EEFFECTTYPE_NORMAL];
inline bool EffectUserCmd::has_effecttype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EffectUserCmd::set_has_effecttype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EffectUserCmd::clear_has_effecttype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EffectUserCmd::clear_effecttype() {
  effecttype_ = 1;
  clear_has_effecttype();
}
inline ::Cmd::EEffectType EffectUserCmd::effecttype() const {
  // @@protoc_insertion_point(field_get:Cmd.EffectUserCmd.effecttype)
  return static_cast< ::Cmd::EEffectType >(effecttype_);
}
inline void EffectUserCmd::set_effecttype(::Cmd::EEffectType value) {
  assert(::Cmd::EEffectType_IsValid(value));
  set_has_effecttype();
  effecttype_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EffectUserCmd.effecttype)
}

// optional uint64 charid = 4;
inline bool EffectUserCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EffectUserCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EffectUserCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EffectUserCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 EffectUserCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.EffectUserCmd.charid)
  return charid_;
}
inline void EffectUserCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EffectUserCmd.charid)
}

// optional uint32 effectpos = 5;
inline bool EffectUserCmd::has_effectpos() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EffectUserCmd::set_has_effectpos() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EffectUserCmd::clear_has_effectpos() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EffectUserCmd::clear_effectpos() {
  effectpos_ = 0u;
  clear_has_effectpos();
}
inline ::google::protobuf::uint32 EffectUserCmd::effectpos() const {
  // @@protoc_insertion_point(field_get:Cmd.EffectUserCmd.effectpos)
  return effectpos_;
}
inline void EffectUserCmd::set_effectpos(::google::protobuf::uint32 value) {
  set_has_effectpos();
  effectpos_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EffectUserCmd.effectpos)
}

// optional .Cmd.ScenePos pos = 6;
inline bool EffectUserCmd::has_pos() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void EffectUserCmd::set_has_pos() {
  _has_bits_[0] |= 0x00000020u;
}
inline void EffectUserCmd::clear_has_pos() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void EffectUserCmd::clear_pos() {
  if (pos_ != NULL) pos_->::Cmd::ScenePos::Clear();
  clear_has_pos();
}
inline const ::Cmd::ScenePos& EffectUserCmd::pos() const {
  // @@protoc_insertion_point(field_get:Cmd.EffectUserCmd.pos)
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::Cmd::ScenePos* EffectUserCmd::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::Cmd::ScenePos;
  // @@protoc_insertion_point(field_mutable:Cmd.EffectUserCmd.pos)
  return pos_;
}
inline ::Cmd::ScenePos* EffectUserCmd::release_pos() {
  clear_has_pos();
  ::Cmd::ScenePos* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void EffectUserCmd::set_allocated_pos(::Cmd::ScenePos* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.EffectUserCmd.pos)
}

// optional string effect = 7;
inline bool EffectUserCmd::has_effect() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void EffectUserCmd::set_has_effect() {
  _has_bits_[0] |= 0x00000040u;
}
inline void EffectUserCmd::clear_has_effect() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void EffectUserCmd::clear_effect() {
  if (effect_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    effect_->clear();
  }
  clear_has_effect();
}
inline const ::std::string& EffectUserCmd::effect() const {
  // @@protoc_insertion_point(field_get:Cmd.EffectUserCmd.effect)
  return *effect_;
}
inline void EffectUserCmd::set_effect(const ::std::string& value) {
  set_has_effect();
  if (effect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    effect_ = new ::std::string;
  }
  effect_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.EffectUserCmd.effect)
}
inline void EffectUserCmd::set_effect(const char* value) {
  set_has_effect();
  if (effect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    effect_ = new ::std::string;
  }
  effect_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.EffectUserCmd.effect)
}
inline void EffectUserCmd::set_effect(const char* value, size_t size) {
  set_has_effect();
  if (effect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    effect_ = new ::std::string;
  }
  effect_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.EffectUserCmd.effect)
}
inline ::std::string* EffectUserCmd::mutable_effect() {
  set_has_effect();
  if (effect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    effect_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.EffectUserCmd.effect)
  return effect_;
}
inline ::std::string* EffectUserCmd::release_effect() {
  clear_has_effect();
  if (effect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = effect_;
    effect_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EffectUserCmd::set_allocated_effect(::std::string* effect) {
  if (effect_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete effect_;
  }
  if (effect) {
    set_has_effect();
    effect_ = effect;
  } else {
    clear_has_effect();
    effect_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.EffectUserCmd.effect)
}

// optional uint32 msec = 8 [default = 0];
inline bool EffectUserCmd::has_msec() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void EffectUserCmd::set_has_msec() {
  _has_bits_[0] |= 0x00000080u;
}
inline void EffectUserCmd::clear_has_msec() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void EffectUserCmd::clear_msec() {
  msec_ = 0u;
  clear_has_msec();
}
inline ::google::protobuf::uint32 EffectUserCmd::msec() const {
  // @@protoc_insertion_point(field_get:Cmd.EffectUserCmd.msec)
  return msec_;
}
inline void EffectUserCmd::set_msec(::google::protobuf::uint32 value) {
  set_has_msec();
  msec_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EffectUserCmd.msec)
}

// optional uint32 times = 9 [default = 1];
inline bool EffectUserCmd::has_times() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void EffectUserCmd::set_has_times() {
  _has_bits_[0] |= 0x00000100u;
}
inline void EffectUserCmd::clear_has_times() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void EffectUserCmd::clear_times() {
  times_ = 1u;
  clear_has_times();
}
inline ::google::protobuf::uint32 EffectUserCmd::times() const {
  // @@protoc_insertion_point(field_get:Cmd.EffectUserCmd.times)
  return times_;
}
inline void EffectUserCmd::set_times(::google::protobuf::uint32 value) {
  set_has_times();
  times_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EffectUserCmd.times)
}

// optional uint32 index = 10 [default = 1];
inline bool EffectUserCmd::has_index() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void EffectUserCmd::set_has_index() {
  _has_bits_[0] |= 0x00000200u;
}
inline void EffectUserCmd::clear_has_index() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void EffectUserCmd::clear_index() {
  index_ = 1u;
  clear_has_index();
}
inline ::google::protobuf::uint32 EffectUserCmd::index() const {
  // @@protoc_insertion_point(field_get:Cmd.EffectUserCmd.index)
  return index_;
}
inline void EffectUserCmd::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EffectUserCmd.index)
}

// optional .Cmd.EEffectOpt opt = 11 [default = EEFFECTOPT_PLAY];
inline bool EffectUserCmd::has_opt() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void EffectUserCmd::set_has_opt() {
  _has_bits_[0] |= 0x00000400u;
}
inline void EffectUserCmd::clear_has_opt() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void EffectUserCmd::clear_opt() {
  opt_ = 1;
  clear_has_opt();
}
inline ::Cmd::EEffectOpt EffectUserCmd::opt() const {
  // @@protoc_insertion_point(field_get:Cmd.EffectUserCmd.opt)
  return static_cast< ::Cmd::EEffectOpt >(opt_);
}
inline void EffectUserCmd::set_opt(::Cmd::EEffectOpt value) {
  assert(::Cmd::EEffectOpt_IsValid(value));
  set_has_opt();
  opt_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EffectUserCmd.opt)
}

// optional bool posbind = 12 [default = false];
inline bool EffectUserCmd::has_posbind() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void EffectUserCmd::set_has_posbind() {
  _has_bits_[0] |= 0x00000800u;
}
inline void EffectUserCmd::clear_has_posbind() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void EffectUserCmd::clear_posbind() {
  posbind_ = false;
  clear_has_posbind();
}
inline bool EffectUserCmd::posbind() const {
  // @@protoc_insertion_point(field_get:Cmd.EffectUserCmd.posbind)
  return posbind_;
}
inline void EffectUserCmd::set_posbind(bool value) {
  set_has_posbind();
  posbind_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EffectUserCmd.posbind)
}

// optional bool epbind = 13 [default = false];
inline bool EffectUserCmd::has_epbind() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void EffectUserCmd::set_has_epbind() {
  _has_bits_[0] |= 0x00001000u;
}
inline void EffectUserCmd::clear_has_epbind() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void EffectUserCmd::clear_epbind() {
  epbind_ = false;
  clear_has_epbind();
}
inline bool EffectUserCmd::epbind() const {
  // @@protoc_insertion_point(field_get:Cmd.EffectUserCmd.epbind)
  return epbind_;
}
inline void EffectUserCmd::set_epbind(bool value) {
  set_has_epbind();
  epbind_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EffectUserCmd.epbind)
}

// optional uint32 delay = 14 [default = 0];
inline bool EffectUserCmd::has_delay() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void EffectUserCmd::set_has_delay() {
  _has_bits_[0] |= 0x00002000u;
}
inline void EffectUserCmd::clear_has_delay() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void EffectUserCmd::clear_delay() {
  delay_ = 0u;
  clear_has_delay();
}
inline ::google::protobuf::uint32 EffectUserCmd::delay() const {
  // @@protoc_insertion_point(field_get:Cmd.EffectUserCmd.delay)
  return delay_;
}
inline void EffectUserCmd::set_delay(::google::protobuf::uint32 value) {
  set_has_delay();
  delay_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EffectUserCmd.delay)
}

// optional uint64 id = 15 [default = 0];
inline bool EffectUserCmd::has_id() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void EffectUserCmd::set_has_id() {
  _has_bits_[0] |= 0x00004000u;
}
inline void EffectUserCmd::clear_has_id() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void EffectUserCmd::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 EffectUserCmd::id() const {
  // @@protoc_insertion_point(field_get:Cmd.EffectUserCmd.id)
  return id_;
}
inline void EffectUserCmd::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EffectUserCmd.id)
}

// optional uint32 dir = 16;
inline bool EffectUserCmd::has_dir() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void EffectUserCmd::set_has_dir() {
  _has_bits_[0] |= 0x00008000u;
}
inline void EffectUserCmd::clear_has_dir() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void EffectUserCmd::clear_dir() {
  dir_ = 0u;
  clear_has_dir();
}
inline ::google::protobuf::uint32 EffectUserCmd::dir() const {
  // @@protoc_insertion_point(field_get:Cmd.EffectUserCmd.dir)
  return dir_;
}
inline void EffectUserCmd::set_dir(::google::protobuf::uint32 value) {
  set_has_dir();
  dir_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EffectUserCmd.dir)
}

// optional uint32 skillid = 17 [default = 0];
inline bool EffectUserCmd::has_skillid() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void EffectUserCmd::set_has_skillid() {
  _has_bits_[0] |= 0x00010000u;
}
inline void EffectUserCmd::clear_has_skillid() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void EffectUserCmd::clear_skillid() {
  skillid_ = 0u;
  clear_has_skillid();
}
inline ::google::protobuf::uint32 EffectUserCmd::skillid() const {
  // @@protoc_insertion_point(field_get:Cmd.EffectUserCmd.skillid)
  return skillid_;
}
inline void EffectUserCmd::set_skillid(::google::protobuf::uint32 value) {
  set_has_skillid();
  skillid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EffectUserCmd.skillid)
}

// -------------------------------------------------------------------

// MenuList

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool MenuList::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MenuList::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MenuList::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MenuList::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command MenuList::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.MenuList.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void MenuList::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MenuList.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_MENU];
inline bool MenuList::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MenuList::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MenuList::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MenuList::clear_param() {
  param_ = 15;
  clear_has_param();
}
inline ::Cmd::User2Param MenuList::param() const {
  // @@protoc_insertion_point(field_get:Cmd.MenuList.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void MenuList::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MenuList.param)
}

// repeated uint32 list = 3;
inline int MenuList::list_size() const {
  return list_.size();
}
inline void MenuList::clear_list() {
  list_.Clear();
}
inline ::google::protobuf::uint32 MenuList::list(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.MenuList.list)
  return list_.Get(index);
}
inline void MenuList::set_list(int index, ::google::protobuf::uint32 value) {
  list_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.MenuList.list)
}
inline void MenuList::add_list(::google::protobuf::uint32 value) {
  list_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.MenuList.list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
MenuList::list() const {
  // @@protoc_insertion_point(field_list:Cmd.MenuList.list)
  return list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
MenuList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.MenuList.list)
  return &list_;
}

// repeated uint32 dellist = 4;
inline int MenuList::dellist_size() const {
  return dellist_.size();
}
inline void MenuList::clear_dellist() {
  dellist_.Clear();
}
inline ::google::protobuf::uint32 MenuList::dellist(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.MenuList.dellist)
  return dellist_.Get(index);
}
inline void MenuList::set_dellist(int index, ::google::protobuf::uint32 value) {
  dellist_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.MenuList.dellist)
}
inline void MenuList::add_dellist(::google::protobuf::uint32 value) {
  dellist_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.MenuList.dellist)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
MenuList::dellist() const {
  // @@protoc_insertion_point(field_list:Cmd.MenuList.dellist)
  return dellist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
MenuList::mutable_dellist() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.MenuList.dellist)
  return &dellist_;
}

// -------------------------------------------------------------------

// NewMenu

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool NewMenu::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NewMenu::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NewMenu::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NewMenu::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command NewMenu::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.NewMenu.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void NewMenu::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NewMenu.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_NEWMENU];
inline bool NewMenu::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NewMenu::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NewMenu::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NewMenu::clear_param() {
  param_ = 16;
  clear_has_param();
}
inline ::Cmd::User2Param NewMenu::param() const {
  // @@protoc_insertion_point(field_get:Cmd.NewMenu.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void NewMenu::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NewMenu.param)
}

// optional bool animplay = 3 [default = true];
inline bool NewMenu::has_animplay() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NewMenu::set_has_animplay() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NewMenu::clear_has_animplay() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NewMenu::clear_animplay() {
  animplay_ = true;
  clear_has_animplay();
}
inline bool NewMenu::animplay() const {
  // @@protoc_insertion_point(field_get:Cmd.NewMenu.animplay)
  return animplay_;
}
inline void NewMenu::set_animplay(bool value) {
  set_has_animplay();
  animplay_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NewMenu.animplay)
}

// repeated uint32 list = 4;
inline int NewMenu::list_size() const {
  return list_.size();
}
inline void NewMenu::clear_list() {
  list_.Clear();
}
inline ::google::protobuf::uint32 NewMenu::list(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.NewMenu.list)
  return list_.Get(index);
}
inline void NewMenu::set_list(int index, ::google::protobuf::uint32 value) {
  list_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.NewMenu.list)
}
inline void NewMenu::add_list(::google::protobuf::uint32 value) {
  list_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.NewMenu.list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
NewMenu::list() const {
  // @@protoc_insertion_point(field_list:Cmd.NewMenu.list)
  return list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
NewMenu::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.NewMenu.list)
  return &list_;
}

// -------------------------------------------------------------------

// TeamInfoNine

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool TeamInfoNine::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamInfoNine::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamInfoNine::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamInfoNine::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command TeamInfoNine::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.TeamInfoNine.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void TeamInfoNine::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TeamInfoNine.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_TEAMINFONINE];
inline bool TeamInfoNine::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TeamInfoNine::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TeamInfoNine::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TeamInfoNine::clear_param() {
  param_ = 17;
  clear_has_param();
}
inline ::Cmd::User2Param TeamInfoNine::param() const {
  // @@protoc_insertion_point(field_get:Cmd.TeamInfoNine.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void TeamInfoNine::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TeamInfoNine.param)
}

// optional uint64 userid = 3 [default = 0];
inline bool TeamInfoNine::has_userid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TeamInfoNine::set_has_userid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TeamInfoNine::clear_has_userid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TeamInfoNine::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::uint64 TeamInfoNine::userid() const {
  // @@protoc_insertion_point(field_get:Cmd.TeamInfoNine.userid)
  return userid_;
}
inline void TeamInfoNine::set_userid(::google::protobuf::uint64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TeamInfoNine.userid)
}

// optional uint32 id = 4 [default = 0];
inline bool TeamInfoNine::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TeamInfoNine::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TeamInfoNine::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TeamInfoNine::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TeamInfoNine::id() const {
  // @@protoc_insertion_point(field_get:Cmd.TeamInfoNine.id)
  return id_;
}
inline void TeamInfoNine::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TeamInfoNine.id)
}

// optional string name = 5;
inline bool TeamInfoNine::has_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TeamInfoNine::set_has_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TeamInfoNine::clear_has_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TeamInfoNine::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& TeamInfoNine::name() const {
  // @@protoc_insertion_point(field_get:Cmd.TeamInfoNine.name)
  return *name_;
}
inline void TeamInfoNine::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.TeamInfoNine.name)
}
inline void TeamInfoNine::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.TeamInfoNine.name)
}
inline void TeamInfoNine::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.TeamInfoNine.name)
}
inline ::std::string* TeamInfoNine::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.TeamInfoNine.name)
  return name_;
}
inline ::std::string* TeamInfoNine::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TeamInfoNine::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.TeamInfoNine.name)
}

// -------------------------------------------------------------------

// UsePortrait

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool UsePortrait::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UsePortrait::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UsePortrait::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UsePortrait::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command UsePortrait::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.UsePortrait.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void UsePortrait::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UsePortrait.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_USEPORTRAIT];
inline bool UsePortrait::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UsePortrait::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UsePortrait::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UsePortrait::clear_param() {
  param_ = 18;
  clear_has_param();
}
inline ::Cmd::User2Param UsePortrait::param() const {
  // @@protoc_insertion_point(field_get:Cmd.UsePortrait.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void UsePortrait::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UsePortrait.param)
}

// optional uint32 id = 3 [default = 0];
inline bool UsePortrait::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UsePortrait::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UsePortrait::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UsePortrait::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 UsePortrait::id() const {
  // @@protoc_insertion_point(field_get:Cmd.UsePortrait.id)
  return id_;
}
inline void UsePortrait::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UsePortrait.id)
}

// -------------------------------------------------------------------

// UseFrame

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool UseFrame::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UseFrame::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UseFrame::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UseFrame::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command UseFrame::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.UseFrame.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void UseFrame::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UseFrame.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_USEFRAME];
inline bool UseFrame::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UseFrame::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UseFrame::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UseFrame::clear_param() {
  param_ = 19;
  clear_has_param();
}
inline ::Cmd::User2Param UseFrame::param() const {
  // @@protoc_insertion_point(field_get:Cmd.UseFrame.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void UseFrame::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UseFrame.param)
}

// optional uint32 id = 3 [default = 0];
inline bool UseFrame::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UseFrame::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UseFrame::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UseFrame::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 UseFrame::id() const {
  // @@protoc_insertion_point(field_get:Cmd.UseFrame.id)
  return id_;
}
inline void UseFrame::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UseFrame.id)
}

// -------------------------------------------------------------------

// NewPortraitFrame

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool NewPortraitFrame::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NewPortraitFrame::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NewPortraitFrame::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NewPortraitFrame::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command NewPortraitFrame::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.NewPortraitFrame.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void NewPortraitFrame::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NewPortraitFrame.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_NEWPORTRAITFRAME];
inline bool NewPortraitFrame::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NewPortraitFrame::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NewPortraitFrame::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NewPortraitFrame::clear_param() {
  param_ = 20;
  clear_has_param();
}
inline ::Cmd::User2Param NewPortraitFrame::param() const {
  // @@protoc_insertion_point(field_get:Cmd.NewPortraitFrame.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void NewPortraitFrame::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NewPortraitFrame.param)
}

// repeated uint32 portrait = 3;
inline int NewPortraitFrame::portrait_size() const {
  return portrait_.size();
}
inline void NewPortraitFrame::clear_portrait() {
  portrait_.Clear();
}
inline ::google::protobuf::uint32 NewPortraitFrame::portrait(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.NewPortraitFrame.portrait)
  return portrait_.Get(index);
}
inline void NewPortraitFrame::set_portrait(int index, ::google::protobuf::uint32 value) {
  portrait_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.NewPortraitFrame.portrait)
}
inline void NewPortraitFrame::add_portrait(::google::protobuf::uint32 value) {
  portrait_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.NewPortraitFrame.portrait)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
NewPortraitFrame::portrait() const {
  // @@protoc_insertion_point(field_list:Cmd.NewPortraitFrame.portrait)
  return portrait_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
NewPortraitFrame::mutable_portrait() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.NewPortraitFrame.portrait)
  return &portrait_;
}

// repeated uint32 frame = 4;
inline int NewPortraitFrame::frame_size() const {
  return frame_.size();
}
inline void NewPortraitFrame::clear_frame() {
  frame_.Clear();
}
inline ::google::protobuf::uint32 NewPortraitFrame::frame(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.NewPortraitFrame.frame)
  return frame_.Get(index);
}
inline void NewPortraitFrame::set_frame(int index, ::google::protobuf::uint32 value) {
  frame_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.NewPortraitFrame.frame)
}
inline void NewPortraitFrame::add_frame(::google::protobuf::uint32 value) {
  frame_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.NewPortraitFrame.frame)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
NewPortraitFrame::frame() const {
  // @@protoc_insertion_point(field_list:Cmd.NewPortraitFrame.frame)
  return frame_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
NewPortraitFrame::mutable_frame() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.NewPortraitFrame.frame)
  return &frame_;
}

// -------------------------------------------------------------------

// QueryPortraitListUserCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool QueryPortraitListUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryPortraitListUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryPortraitListUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryPortraitListUserCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command QueryPortraitListUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryPortraitListUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void QueryPortraitListUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryPortraitListUserCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_QUERYPORTRAITLIST];
inline bool QueryPortraitListUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryPortraitListUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryPortraitListUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryPortraitListUserCmd::clear_param() {
  param_ = 24;
  clear_has_param();
}
inline ::Cmd::User2Param QueryPortraitListUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryPortraitListUserCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void QueryPortraitListUserCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryPortraitListUserCmd.param)
}

// repeated uint32 portrait = 3;
inline int QueryPortraitListUserCmd::portrait_size() const {
  return portrait_.size();
}
inline void QueryPortraitListUserCmd::clear_portrait() {
  portrait_.Clear();
}
inline ::google::protobuf::uint32 QueryPortraitListUserCmd::portrait(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.QueryPortraitListUserCmd.portrait)
  return portrait_.Get(index);
}
inline void QueryPortraitListUserCmd::set_portrait(int index, ::google::protobuf::uint32 value) {
  portrait_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.QueryPortraitListUserCmd.portrait)
}
inline void QueryPortraitListUserCmd::add_portrait(::google::protobuf::uint32 value) {
  portrait_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.QueryPortraitListUserCmd.portrait)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
QueryPortraitListUserCmd::portrait() const {
  // @@protoc_insertion_point(field_list:Cmd.QueryPortraitListUserCmd.portrait)
  return portrait_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
QueryPortraitListUserCmd::mutable_portrait() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.QueryPortraitListUserCmd.portrait)
  return &portrait_;
}

// -------------------------------------------------------------------

// UseDressing

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool UseDressing::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UseDressing::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UseDressing::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UseDressing::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command UseDressing::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.UseDressing.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void UseDressing::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UseDressing.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_USEDRESSING];
inline bool UseDressing::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UseDressing::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UseDressing::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UseDressing::clear_param() {
  param_ = 25;
  clear_has_param();
}
inline ::Cmd::User2Param UseDressing::param() const {
  // @@protoc_insertion_point(field_get:Cmd.UseDressing.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void UseDressing::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UseDressing.param)
}

// optional uint32 id = 3 [default = 0];
inline bool UseDressing::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UseDressing::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UseDressing::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UseDressing::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 UseDressing::id() const {
  // @@protoc_insertion_point(field_get:Cmd.UseDressing.id)
  return id_;
}
inline void UseDressing::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UseDressing.id)
}

// optional uint64 charid = 4 [default = 0];
inline bool UseDressing::has_charid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UseDressing::set_has_charid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UseDressing::clear_has_charid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UseDressing::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 UseDressing::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.UseDressing.charid)
  return charid_;
}
inline void UseDressing::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UseDressing.charid)
}

// optional .Cmd.EDressType type = 5 [default = EDRESSTYPE_MIN];
inline bool UseDressing::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UseDressing::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UseDressing::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UseDressing::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Cmd::EDressType UseDressing::type() const {
  // @@protoc_insertion_point(field_get:Cmd.UseDressing.type)
  return static_cast< ::Cmd::EDressType >(type_);
}
inline void UseDressing::set_type(::Cmd::EDressType value) {
  assert(::Cmd::EDressType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UseDressing.type)
}

// -------------------------------------------------------------------

// NewDressing

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool NewDressing::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NewDressing::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NewDressing::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NewDressing::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command NewDressing::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.NewDressing.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void NewDressing::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NewDressing.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_NEWDRESSING];
inline bool NewDressing::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NewDressing::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NewDressing::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NewDressing::clear_param() {
  param_ = 26;
  clear_has_param();
}
inline ::Cmd::User2Param NewDressing::param() const {
  // @@protoc_insertion_point(field_get:Cmd.NewDressing.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void NewDressing::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NewDressing.param)
}

// optional .Cmd.EDressType type = 3 [default = EDRESSTYPE_MIN];
inline bool NewDressing::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NewDressing::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NewDressing::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NewDressing::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Cmd::EDressType NewDressing::type() const {
  // @@protoc_insertion_point(field_get:Cmd.NewDressing.type)
  return static_cast< ::Cmd::EDressType >(type_);
}
inline void NewDressing::set_type(::Cmd::EDressType value) {
  assert(::Cmd::EDressType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NewDressing.type)
}

// repeated uint32 dressids = 4;
inline int NewDressing::dressids_size() const {
  return dressids_.size();
}
inline void NewDressing::clear_dressids() {
  dressids_.Clear();
}
inline ::google::protobuf::uint32 NewDressing::dressids(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.NewDressing.dressids)
  return dressids_.Get(index);
}
inline void NewDressing::set_dressids(int index, ::google::protobuf::uint32 value) {
  dressids_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.NewDressing.dressids)
}
inline void NewDressing::add_dressids(::google::protobuf::uint32 value) {
  dressids_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.NewDressing.dressids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
NewDressing::dressids() const {
  // @@protoc_insertion_point(field_list:Cmd.NewDressing.dressids)
  return dressids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
NewDressing::mutable_dressids() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.NewDressing.dressids)
  return &dressids_;
}

// -------------------------------------------------------------------

// DressingListUserCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool DressingListUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DressingListUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DressingListUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DressingListUserCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command DressingListUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.DressingListUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void DressingListUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DressingListUserCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_DRESSINGLIST];
inline bool DressingListUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DressingListUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DressingListUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DressingListUserCmd::clear_param() {
  param_ = 27;
  clear_has_param();
}
inline ::Cmd::User2Param DressingListUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.DressingListUserCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void DressingListUserCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DressingListUserCmd.param)
}

// optional .Cmd.EDressType type = 3 [default = EDRESSTYPE_MIN];
inline bool DressingListUserCmd::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DressingListUserCmd::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DressingListUserCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DressingListUserCmd::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Cmd::EDressType DressingListUserCmd::type() const {
  // @@protoc_insertion_point(field_get:Cmd.DressingListUserCmd.type)
  return static_cast< ::Cmd::EDressType >(type_);
}
inline void DressingListUserCmd::set_type(::Cmd::EDressType value) {
  assert(::Cmd::EDressType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DressingListUserCmd.type)
}

// repeated uint32 dressids = 4;
inline int DressingListUserCmd::dressids_size() const {
  return dressids_.size();
}
inline void DressingListUserCmd::clear_dressids() {
  dressids_.Clear();
}
inline ::google::protobuf::uint32 DressingListUserCmd::dressids(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.DressingListUserCmd.dressids)
  return dressids_.Get(index);
}
inline void DressingListUserCmd::set_dressids(int index, ::google::protobuf::uint32 value) {
  dressids_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.DressingListUserCmd.dressids)
}
inline void DressingListUserCmd::add_dressids(::google::protobuf::uint32 value) {
  dressids_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.DressingListUserCmd.dressids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DressingListUserCmd::dressids() const {
  // @@protoc_insertion_point(field_list:Cmd.DressingListUserCmd.dressids)
  return dressids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DressingListUserCmd::mutable_dressids() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.DressingListUserCmd.dressids)
  return &dressids_;
}

// -------------------------------------------------------------------

// AddAttrPoint

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool AddAttrPoint::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddAttrPoint::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddAttrPoint::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddAttrPoint::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command AddAttrPoint::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.AddAttrPoint.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void AddAttrPoint::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AddAttrPoint.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_ADDATTRPOINT];
inline bool AddAttrPoint::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AddAttrPoint::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AddAttrPoint::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AddAttrPoint::clear_param() {
  param_ = 21;
  clear_has_param();
}
inline ::Cmd::User2Param AddAttrPoint::param() const {
  // @@protoc_insertion_point(field_get:Cmd.AddAttrPoint.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void AddAttrPoint::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AddAttrPoint.param)
}

// optional .Cmd.PointType type = 3 [default = POINTTYPE_ADD];
inline bool AddAttrPoint::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AddAttrPoint::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AddAttrPoint::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AddAttrPoint::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::Cmd::PointType AddAttrPoint::type() const {
  // @@protoc_insertion_point(field_get:Cmd.AddAttrPoint.type)
  return static_cast< ::Cmd::PointType >(type_);
}
inline void AddAttrPoint::set_type(::Cmd::PointType value) {
  assert(::Cmd::PointType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AddAttrPoint.type)
}

// optional uint32 strpoint = 4 [default = 0];
inline bool AddAttrPoint::has_strpoint() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AddAttrPoint::set_has_strpoint() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AddAttrPoint::clear_has_strpoint() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AddAttrPoint::clear_strpoint() {
  strpoint_ = 0u;
  clear_has_strpoint();
}
inline ::google::protobuf::uint32 AddAttrPoint::strpoint() const {
  // @@protoc_insertion_point(field_get:Cmd.AddAttrPoint.strpoint)
  return strpoint_;
}
inline void AddAttrPoint::set_strpoint(::google::protobuf::uint32 value) {
  set_has_strpoint();
  strpoint_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AddAttrPoint.strpoint)
}

// optional uint32 intpoint = 5 [default = 0];
inline bool AddAttrPoint::has_intpoint() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AddAttrPoint::set_has_intpoint() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AddAttrPoint::clear_has_intpoint() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AddAttrPoint::clear_intpoint() {
  intpoint_ = 0u;
  clear_has_intpoint();
}
inline ::google::protobuf::uint32 AddAttrPoint::intpoint() const {
  // @@protoc_insertion_point(field_get:Cmd.AddAttrPoint.intpoint)
  return intpoint_;
}
inline void AddAttrPoint::set_intpoint(::google::protobuf::uint32 value) {
  set_has_intpoint();
  intpoint_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AddAttrPoint.intpoint)
}

// optional uint32 agipoint = 6 [default = 0];
inline bool AddAttrPoint::has_agipoint() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AddAttrPoint::set_has_agipoint() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AddAttrPoint::clear_has_agipoint() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AddAttrPoint::clear_agipoint() {
  agipoint_ = 0u;
  clear_has_agipoint();
}
inline ::google::protobuf::uint32 AddAttrPoint::agipoint() const {
  // @@protoc_insertion_point(field_get:Cmd.AddAttrPoint.agipoint)
  return agipoint_;
}
inline void AddAttrPoint::set_agipoint(::google::protobuf::uint32 value) {
  set_has_agipoint();
  agipoint_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AddAttrPoint.agipoint)
}

// optional uint32 dexpoint = 7 [default = 0];
inline bool AddAttrPoint::has_dexpoint() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AddAttrPoint::set_has_dexpoint() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AddAttrPoint::clear_has_dexpoint() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AddAttrPoint::clear_dexpoint() {
  dexpoint_ = 0u;
  clear_has_dexpoint();
}
inline ::google::protobuf::uint32 AddAttrPoint::dexpoint() const {
  // @@protoc_insertion_point(field_get:Cmd.AddAttrPoint.dexpoint)
  return dexpoint_;
}
inline void AddAttrPoint::set_dexpoint(::google::protobuf::uint32 value) {
  set_has_dexpoint();
  dexpoint_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AddAttrPoint.dexpoint)
}

// optional uint32 vitpoint = 8 [default = 0];
inline bool AddAttrPoint::has_vitpoint() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AddAttrPoint::set_has_vitpoint() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AddAttrPoint::clear_has_vitpoint() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AddAttrPoint::clear_vitpoint() {
  vitpoint_ = 0u;
  clear_has_vitpoint();
}
inline ::google::protobuf::uint32 AddAttrPoint::vitpoint() const {
  // @@protoc_insertion_point(field_get:Cmd.AddAttrPoint.vitpoint)
  return vitpoint_;
}
inline void AddAttrPoint::set_vitpoint(::google::protobuf::uint32 value) {
  set_has_vitpoint();
  vitpoint_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AddAttrPoint.vitpoint)
}

// optional uint32 lukpoint = 9 [default = 0];
inline bool AddAttrPoint::has_lukpoint() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AddAttrPoint::set_has_lukpoint() {
  _has_bits_[0] |= 0x00000100u;
}
inline void AddAttrPoint::clear_has_lukpoint() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void AddAttrPoint::clear_lukpoint() {
  lukpoint_ = 0u;
  clear_has_lukpoint();
}
inline ::google::protobuf::uint32 AddAttrPoint::lukpoint() const {
  // @@protoc_insertion_point(field_get:Cmd.AddAttrPoint.lukpoint)
  return lukpoint_;
}
inline void AddAttrPoint::set_lukpoint(::google::protobuf::uint32 value) {
  set_has_lukpoint();
  lukpoint_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AddAttrPoint.lukpoint)
}

// -------------------------------------------------------------------

// ShopGotItem

// optional uint32 id = 1 [default = 0];
inline bool ShopGotItem::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShopGotItem::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShopGotItem::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShopGotItem::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 ShopGotItem::id() const {
  // @@protoc_insertion_point(field_get:Cmd.ShopGotItem.id)
  return id_;
}
inline void ShopGotItem::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ShopGotItem.id)
}

// optional uint32 count = 2 [default = 0];
inline bool ShopGotItem::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ShopGotItem::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ShopGotItem::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ShopGotItem::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 ShopGotItem::count() const {
  // @@protoc_insertion_point(field_get:Cmd.ShopGotItem.count)
  return count_;
}
inline void ShopGotItem::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ShopGotItem.count)
}

// -------------------------------------------------------------------

// QueryShopGotItem

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool QueryShopGotItem::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryShopGotItem::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryShopGotItem::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryShopGotItem::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command QueryShopGotItem::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryShopGotItem.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void QueryShopGotItem::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryShopGotItem.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_QUERYSHOPGOTITEM];
inline bool QueryShopGotItem::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryShopGotItem::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryShopGotItem::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryShopGotItem::clear_param() {
  param_ = 22;
  clear_has_param();
}
inline ::Cmd::User2Param QueryShopGotItem::param() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryShopGotItem.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void QueryShopGotItem::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryShopGotItem.param)
}

// repeated .Cmd.ShopGotItem items = 3;
inline int QueryShopGotItem::items_size() const {
  return items_.size();
}
inline void QueryShopGotItem::clear_items() {
  items_.Clear();
}
inline const ::Cmd::ShopGotItem& QueryShopGotItem::items(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.QueryShopGotItem.items)
  return items_.Get(index);
}
inline ::Cmd::ShopGotItem* QueryShopGotItem::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.QueryShopGotItem.items)
  return items_.Mutable(index);
}
inline ::Cmd::ShopGotItem* QueryShopGotItem::add_items() {
  // @@protoc_insertion_point(field_add:Cmd.QueryShopGotItem.items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ShopGotItem >&
QueryShopGotItem::items() const {
  // @@protoc_insertion_point(field_list:Cmd.QueryShopGotItem.items)
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::ShopGotItem >*
QueryShopGotItem::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.QueryShopGotItem.items)
  return &items_;
}

// repeated .Cmd.ShopGotItem discountitems = 4;
inline int QueryShopGotItem::discountitems_size() const {
  return discountitems_.size();
}
inline void QueryShopGotItem::clear_discountitems() {
  discountitems_.Clear();
}
inline const ::Cmd::ShopGotItem& QueryShopGotItem::discountitems(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.QueryShopGotItem.discountitems)
  return discountitems_.Get(index);
}
inline ::Cmd::ShopGotItem* QueryShopGotItem::mutable_discountitems(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.QueryShopGotItem.discountitems)
  return discountitems_.Mutable(index);
}
inline ::Cmd::ShopGotItem* QueryShopGotItem::add_discountitems() {
  // @@protoc_insertion_point(field_add:Cmd.QueryShopGotItem.discountitems)
  return discountitems_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ShopGotItem >&
QueryShopGotItem::discountitems() const {
  // @@protoc_insertion_point(field_list:Cmd.QueryShopGotItem.discountitems)
  return discountitems_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::ShopGotItem >*
QueryShopGotItem::mutable_discountitems() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.QueryShopGotItem.discountitems)
  return &discountitems_;
}

// repeated .Cmd.ShopGotItem limititems = 5;
inline int QueryShopGotItem::limititems_size() const {
  return limititems_.size();
}
inline void QueryShopGotItem::clear_limititems() {
  limititems_.Clear();
}
inline const ::Cmd::ShopGotItem& QueryShopGotItem::limititems(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.QueryShopGotItem.limititems)
  return limititems_.Get(index);
}
inline ::Cmd::ShopGotItem* QueryShopGotItem::mutable_limititems(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.QueryShopGotItem.limititems)
  return limititems_.Mutable(index);
}
inline ::Cmd::ShopGotItem* QueryShopGotItem::add_limititems() {
  // @@protoc_insertion_point(field_add:Cmd.QueryShopGotItem.limititems)
  return limititems_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ShopGotItem >&
QueryShopGotItem::limititems() const {
  // @@protoc_insertion_point(field_list:Cmd.QueryShopGotItem.limititems)
  return limititems_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::ShopGotItem >*
QueryShopGotItem::mutable_limititems() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.QueryShopGotItem.limititems)
  return &limititems_;
}

// -------------------------------------------------------------------

// UpdateShopGotItem

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool UpdateShopGotItem::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateShopGotItem::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateShopGotItem::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateShopGotItem::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command UpdateShopGotItem::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.UpdateShopGotItem.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void UpdateShopGotItem::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UpdateShopGotItem.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_UPDATESHOPGOTITEM];
inline bool UpdateShopGotItem::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdateShopGotItem::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdateShopGotItem::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdateShopGotItem::clear_param() {
  param_ = 23;
  clear_has_param();
}
inline ::Cmd::User2Param UpdateShopGotItem::param() const {
  // @@protoc_insertion_point(field_get:Cmd.UpdateShopGotItem.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void UpdateShopGotItem::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UpdateShopGotItem.param)
}

// optional .Cmd.ShopGotItem item = 3;
inline bool UpdateShopGotItem::has_item() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UpdateShopGotItem::set_has_item() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UpdateShopGotItem::clear_has_item() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UpdateShopGotItem::clear_item() {
  if (item_ != NULL) item_->::Cmd::ShopGotItem::Clear();
  clear_has_item();
}
inline const ::Cmd::ShopGotItem& UpdateShopGotItem::item() const {
  // @@protoc_insertion_point(field_get:Cmd.UpdateShopGotItem.item)
  return item_ != NULL ? *item_ : *default_instance_->item_;
}
inline ::Cmd::ShopGotItem* UpdateShopGotItem::mutable_item() {
  set_has_item();
  if (item_ == NULL) item_ = new ::Cmd::ShopGotItem;
  // @@protoc_insertion_point(field_mutable:Cmd.UpdateShopGotItem.item)
  return item_;
}
inline ::Cmd::ShopGotItem* UpdateShopGotItem::release_item() {
  clear_has_item();
  ::Cmd::ShopGotItem* temp = item_;
  item_ = NULL;
  return temp;
}
inline void UpdateShopGotItem::set_allocated_item(::Cmd::ShopGotItem* item) {
  delete item_;
  item_ = item;
  if (item) {
    set_has_item();
  } else {
    clear_has_item();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.UpdateShopGotItem.item)
}

// optional .Cmd.ShopGotItem discountitem = 4;
inline bool UpdateShopGotItem::has_discountitem() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UpdateShopGotItem::set_has_discountitem() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UpdateShopGotItem::clear_has_discountitem() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UpdateShopGotItem::clear_discountitem() {
  if (discountitem_ != NULL) discountitem_->::Cmd::ShopGotItem::Clear();
  clear_has_discountitem();
}
inline const ::Cmd::ShopGotItem& UpdateShopGotItem::discountitem() const {
  // @@protoc_insertion_point(field_get:Cmd.UpdateShopGotItem.discountitem)
  return discountitem_ != NULL ? *discountitem_ : *default_instance_->discountitem_;
}
inline ::Cmd::ShopGotItem* UpdateShopGotItem::mutable_discountitem() {
  set_has_discountitem();
  if (discountitem_ == NULL) discountitem_ = new ::Cmd::ShopGotItem;
  // @@protoc_insertion_point(field_mutable:Cmd.UpdateShopGotItem.discountitem)
  return discountitem_;
}
inline ::Cmd::ShopGotItem* UpdateShopGotItem::release_discountitem() {
  clear_has_discountitem();
  ::Cmd::ShopGotItem* temp = discountitem_;
  discountitem_ = NULL;
  return temp;
}
inline void UpdateShopGotItem::set_allocated_discountitem(::Cmd::ShopGotItem* discountitem) {
  delete discountitem_;
  discountitem_ = discountitem;
  if (discountitem) {
    set_has_discountitem();
  } else {
    clear_has_discountitem();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.UpdateShopGotItem.discountitem)
}

// optional .Cmd.ShopGotItem limititem = 5;
inline bool UpdateShopGotItem::has_limititem() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UpdateShopGotItem::set_has_limititem() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UpdateShopGotItem::clear_has_limititem() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UpdateShopGotItem::clear_limititem() {
  if (limititem_ != NULL) limititem_->::Cmd::ShopGotItem::Clear();
  clear_has_limititem();
}
inline const ::Cmd::ShopGotItem& UpdateShopGotItem::limititem() const {
  // @@protoc_insertion_point(field_get:Cmd.UpdateShopGotItem.limititem)
  return limititem_ != NULL ? *limititem_ : *default_instance_->limititem_;
}
inline ::Cmd::ShopGotItem* UpdateShopGotItem::mutable_limititem() {
  set_has_limititem();
  if (limititem_ == NULL) limititem_ = new ::Cmd::ShopGotItem;
  // @@protoc_insertion_point(field_mutable:Cmd.UpdateShopGotItem.limititem)
  return limititem_;
}
inline ::Cmd::ShopGotItem* UpdateShopGotItem::release_limititem() {
  clear_has_limititem();
  ::Cmd::ShopGotItem* temp = limititem_;
  limititem_ = NULL;
  return temp;
}
inline void UpdateShopGotItem::set_allocated_limititem(::Cmd::ShopGotItem* limititem) {
  delete limititem_;
  limititem_ = limititem;
  if (limititem) {
    set_has_limititem();
  } else {
    clear_has_limititem();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.UpdateShopGotItem.limititem)
}

// -------------------------------------------------------------------

// OpenUI

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool OpenUI::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OpenUI::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OpenUI::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OpenUI::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command OpenUI::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.OpenUI.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void OpenUI::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.OpenUI.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_OPENUI];
inline bool OpenUI::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OpenUI::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OpenUI::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OpenUI::clear_param() {
  param_ = 29;
  clear_has_param();
}
inline ::Cmd::User2Param OpenUI::param() const {
  // @@protoc_insertion_point(field_get:Cmd.OpenUI.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void OpenUI::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.OpenUI.param)
}

// optional uint32 id = 3 [default = 0];
inline bool OpenUI::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OpenUI::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OpenUI::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OpenUI::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 OpenUI::id() const {
  // @@protoc_insertion_point(field_get:Cmd.OpenUI.id)
  return id_;
}
inline void OpenUI::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.OpenUI.id)
}

// optional uint32 ui = 4 [default = 0];
inline bool OpenUI::has_ui() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OpenUI::set_has_ui() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OpenUI::clear_has_ui() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OpenUI::clear_ui() {
  ui_ = 0u;
  clear_has_ui();
}
inline ::google::protobuf::uint32 OpenUI::ui() const {
  // @@protoc_insertion_point(field_get:Cmd.OpenUI.ui)
  return ui_;
}
inline void OpenUI::set_ui(::google::protobuf::uint32 value) {
  set_has_ui();
  ui_ = value;
  // @@protoc_insertion_point(field_set:Cmd.OpenUI.ui)
}

// -------------------------------------------------------------------

// DbgSysMsg

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool DbgSysMsg::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DbgSysMsg::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DbgSysMsg::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DbgSysMsg::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command DbgSysMsg::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.DbgSysMsg.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void DbgSysMsg::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DbgSysMsg.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_DBGSYSMSG];
inline bool DbgSysMsg::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DbgSysMsg::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DbgSysMsg::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DbgSysMsg::clear_param() {
  param_ = 30;
  clear_has_param();
}
inline ::Cmd::User2Param DbgSysMsg::param() const {
  // @@protoc_insertion_point(field_get:Cmd.DbgSysMsg.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void DbgSysMsg::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DbgSysMsg.param)
}

// required .Cmd.EDbgMsgType type = 3 [default = EDBGMSGTYPE_MIN];
inline bool DbgSysMsg::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DbgSysMsg::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DbgSysMsg::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DbgSysMsg::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Cmd::EDbgMsgType DbgSysMsg::type() const {
  // @@protoc_insertion_point(field_get:Cmd.DbgSysMsg.type)
  return static_cast< ::Cmd::EDbgMsgType >(type_);
}
inline void DbgSysMsg::set_type(::Cmd::EDbgMsgType value) {
  assert(::Cmd::EDbgMsgType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DbgSysMsg.type)
}

// required string content = 4;
inline bool DbgSysMsg::has_content() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DbgSysMsg::set_has_content() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DbgSysMsg::clear_has_content() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DbgSysMsg::clear_content() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& DbgSysMsg::content() const {
  // @@protoc_insertion_point(field_get:Cmd.DbgSysMsg.content)
  return *content_;
}
inline void DbgSysMsg::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.DbgSysMsg.content)
}
inline void DbgSysMsg::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.DbgSysMsg.content)
}
inline void DbgSysMsg::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.DbgSysMsg.content)
}
inline ::std::string* DbgSysMsg::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.DbgSysMsg.content)
  return content_;
}
inline ::std::string* DbgSysMsg::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DbgSysMsg::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.DbgSysMsg.content)
}

// -------------------------------------------------------------------

// FollowTransferCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool FollowTransferCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FollowTransferCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FollowTransferCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FollowTransferCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command FollowTransferCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.FollowTransferCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void FollowTransferCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.FollowTransferCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_FOLLOWTRANSFER];
inline bool FollowTransferCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FollowTransferCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FollowTransferCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FollowTransferCmd::clear_param() {
  param_ = 32;
  clear_has_param();
}
inline ::Cmd::User2Param FollowTransferCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.FollowTransferCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void FollowTransferCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.FollowTransferCmd.param)
}

// optional uint64 targetId = 3;
inline bool FollowTransferCmd::has_targetid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FollowTransferCmd::set_has_targetid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FollowTransferCmd::clear_has_targetid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FollowTransferCmd::clear_targetid() {
  targetid_ = GOOGLE_ULONGLONG(0);
  clear_has_targetid();
}
inline ::google::protobuf::uint64 FollowTransferCmd::targetid() const {
  // @@protoc_insertion_point(field_get:Cmd.FollowTransferCmd.targetId)
  return targetid_;
}
inline void FollowTransferCmd::set_targetid(::google::protobuf::uint64 value) {
  set_has_targetid();
  targetid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.FollowTransferCmd.targetId)
}

// -------------------------------------------------------------------

// CallNpcFuncCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool CallNpcFuncCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CallNpcFuncCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CallNpcFuncCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CallNpcFuncCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command CallNpcFuncCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.CallNpcFuncCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void CallNpcFuncCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CallNpcFuncCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_NPCFUNC];
inline bool CallNpcFuncCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CallNpcFuncCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CallNpcFuncCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CallNpcFuncCmd::clear_param() {
  param_ = 33;
  clear_has_param();
}
inline ::Cmd::User2Param CallNpcFuncCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.CallNpcFuncCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void CallNpcFuncCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CallNpcFuncCmd.param)
}

// optional uint32 type = 3 [default = 0];
inline bool CallNpcFuncCmd::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CallNpcFuncCmd::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CallNpcFuncCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CallNpcFuncCmd::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 CallNpcFuncCmd::type() const {
  // @@protoc_insertion_point(field_get:Cmd.CallNpcFuncCmd.type)
  return type_;
}
inline void CallNpcFuncCmd::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CallNpcFuncCmd.type)
}

// optional string funparam = 4;
inline bool CallNpcFuncCmd::has_funparam() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CallNpcFuncCmd::set_has_funparam() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CallNpcFuncCmd::clear_has_funparam() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CallNpcFuncCmd::clear_funparam() {
  if (funparam_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    funparam_->clear();
  }
  clear_has_funparam();
}
inline const ::std::string& CallNpcFuncCmd::funparam() const {
  // @@protoc_insertion_point(field_get:Cmd.CallNpcFuncCmd.funparam)
  return *funparam_;
}
inline void CallNpcFuncCmd::set_funparam(const ::std::string& value) {
  set_has_funparam();
  if (funparam_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    funparam_ = new ::std::string;
  }
  funparam_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.CallNpcFuncCmd.funparam)
}
inline void CallNpcFuncCmd::set_funparam(const char* value) {
  set_has_funparam();
  if (funparam_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    funparam_ = new ::std::string;
  }
  funparam_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.CallNpcFuncCmd.funparam)
}
inline void CallNpcFuncCmd::set_funparam(const char* value, size_t size) {
  set_has_funparam();
  if (funparam_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    funparam_ = new ::std::string;
  }
  funparam_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.CallNpcFuncCmd.funparam)
}
inline ::std::string* CallNpcFuncCmd::mutable_funparam() {
  set_has_funparam();
  if (funparam_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    funparam_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.CallNpcFuncCmd.funparam)
  return funparam_;
}
inline ::std::string* CallNpcFuncCmd::release_funparam() {
  clear_has_funparam();
  if (funparam_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = funparam_;
    funparam_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CallNpcFuncCmd::set_allocated_funparam(::std::string* funparam) {
  if (funparam_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete funparam_;
  }
  if (funparam) {
    set_has_funparam();
    funparam_ = funparam;
  } else {
    clear_has_funparam();
    funparam_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.CallNpcFuncCmd.funparam)
}

// -------------------------------------------------------------------

// ModelShow

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool ModelShow::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ModelShow::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ModelShow::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ModelShow::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command ModelShow::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ModelShow.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ModelShow::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ModelShow.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_MODELSHOW];
inline bool ModelShow::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ModelShow::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ModelShow::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ModelShow::clear_param() {
  param_ = 34;
  clear_has_param();
}
inline ::Cmd::User2Param ModelShow::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ModelShow.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void ModelShow::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ModelShow.param)
}

// optional uint32 type = 3 [default = 0];
inline bool ModelShow::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ModelShow::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ModelShow::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ModelShow::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 ModelShow::type() const {
  // @@protoc_insertion_point(field_get:Cmd.ModelShow.type)
  return type_;
}
inline void ModelShow::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ModelShow.type)
}

// optional string data = 4;
inline bool ModelShow::has_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ModelShow::set_has_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ModelShow::clear_has_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ModelShow::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& ModelShow::data() const {
  // @@protoc_insertion_point(field_get:Cmd.ModelShow.data)
  return *data_;
}
inline void ModelShow::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ModelShow.data)
}
inline void ModelShow::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ModelShow.data)
}
inline void ModelShow::set_data(const char* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ModelShow.data)
}
inline ::std::string* ModelShow::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ModelShow.data)
  return data_;
}
inline ::std::string* ModelShow::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ModelShow::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ModelShow.data)
}

// -------------------------------------------------------------------

// SoundEffectCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool SoundEffectCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SoundEffectCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SoundEffectCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SoundEffectCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command SoundEffectCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.SoundEffectCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void SoundEffectCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SoundEffectCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_SOUNDEFFECT];
inline bool SoundEffectCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SoundEffectCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SoundEffectCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SoundEffectCmd::clear_param() {
  param_ = 35;
  clear_has_param();
}
inline ::Cmd::User2Param SoundEffectCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.SoundEffectCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void SoundEffectCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SoundEffectCmd.param)
}

// optional string se = 3;
inline bool SoundEffectCmd::has_se() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SoundEffectCmd::set_has_se() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SoundEffectCmd::clear_has_se() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SoundEffectCmd::clear_se() {
  if (se_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    se_->clear();
  }
  clear_has_se();
}
inline const ::std::string& SoundEffectCmd::se() const {
  // @@protoc_insertion_point(field_get:Cmd.SoundEffectCmd.se)
  return *se_;
}
inline void SoundEffectCmd::set_se(const ::std::string& value) {
  set_has_se();
  if (se_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    se_ = new ::std::string;
  }
  se_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.SoundEffectCmd.se)
}
inline void SoundEffectCmd::set_se(const char* value) {
  set_has_se();
  if (se_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    se_ = new ::std::string;
  }
  se_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.SoundEffectCmd.se)
}
inline void SoundEffectCmd::set_se(const char* value, size_t size) {
  set_has_se();
  if (se_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    se_ = new ::std::string;
  }
  se_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.SoundEffectCmd.se)
}
inline ::std::string* SoundEffectCmd::mutable_se() {
  set_has_se();
  if (se_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    se_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.SoundEffectCmd.se)
  return se_;
}
inline ::std::string* SoundEffectCmd::release_se() {
  clear_has_se();
  if (se_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = se_;
    se_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SoundEffectCmd::set_allocated_se(::std::string* se) {
  if (se_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete se_;
  }
  if (se) {
    set_has_se();
    se_ = se;
  } else {
    clear_has_se();
    se_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.SoundEffectCmd.se)
}

// optional .Cmd.ScenePos pos = 4;
inline bool SoundEffectCmd::has_pos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SoundEffectCmd::set_has_pos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SoundEffectCmd::clear_has_pos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SoundEffectCmd::clear_pos() {
  if (pos_ != NULL) pos_->::Cmd::ScenePos::Clear();
  clear_has_pos();
}
inline const ::Cmd::ScenePos& SoundEffectCmd::pos() const {
  // @@protoc_insertion_point(field_get:Cmd.SoundEffectCmd.pos)
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::Cmd::ScenePos* SoundEffectCmd::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::Cmd::ScenePos;
  // @@protoc_insertion_point(field_mutable:Cmd.SoundEffectCmd.pos)
  return pos_;
}
inline ::Cmd::ScenePos* SoundEffectCmd::release_pos() {
  clear_has_pos();
  ::Cmd::ScenePos* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void SoundEffectCmd::set_allocated_pos(::Cmd::ScenePos* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.SoundEffectCmd.pos)
}

// optional uint32 msec = 5 [default = 0];
inline bool SoundEffectCmd::has_msec() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SoundEffectCmd::set_has_msec() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SoundEffectCmd::clear_has_msec() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SoundEffectCmd::clear_msec() {
  msec_ = 0u;
  clear_has_msec();
}
inline ::google::protobuf::uint32 SoundEffectCmd::msec() const {
  // @@protoc_insertion_point(field_get:Cmd.SoundEffectCmd.msec)
  return msec_;
}
inline void SoundEffectCmd::set_msec(::google::protobuf::uint32 value) {
  set_has_msec();
  msec_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SoundEffectCmd.msec)
}

// optional uint32 times = 6 [default = 1];
inline bool SoundEffectCmd::has_times() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SoundEffectCmd::set_has_times() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SoundEffectCmd::clear_has_times() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SoundEffectCmd::clear_times() {
  times_ = 1u;
  clear_has_times();
}
inline ::google::protobuf::uint32 SoundEffectCmd::times() const {
  // @@protoc_insertion_point(field_get:Cmd.SoundEffectCmd.times)
  return times_;
}
inline void SoundEffectCmd::set_times(::google::protobuf::uint32 value) {
  set_has_times();
  times_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SoundEffectCmd.times)
}

// optional uint32 delay = 7 [default = 0];
inline bool SoundEffectCmd::has_delay() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SoundEffectCmd::set_has_delay() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SoundEffectCmd::clear_has_delay() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SoundEffectCmd::clear_delay() {
  delay_ = 0u;
  clear_has_delay();
}
inline ::google::protobuf::uint32 SoundEffectCmd::delay() const {
  // @@protoc_insertion_point(field_get:Cmd.SoundEffectCmd.delay)
  return delay_;
}
inline void SoundEffectCmd::set_delay(::google::protobuf::uint32 value) {
  set_has_delay();
  delay_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SoundEffectCmd.delay)
}

// -------------------------------------------------------------------

// PresetMsg

// optional uint32 msgid = 1 [default = 0];
inline bool PresetMsg::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PresetMsg::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PresetMsg::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PresetMsg::clear_msgid() {
  msgid_ = 0u;
  clear_has_msgid();
}
inline ::google::protobuf::uint32 PresetMsg::msgid() const {
  // @@protoc_insertion_point(field_get:Cmd.PresetMsg.msgid)
  return msgid_;
}
inline void PresetMsg::set_msgid(::google::protobuf::uint32 value) {
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PresetMsg.msgid)
}

// optional string msg = 2;
inline bool PresetMsg::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PresetMsg::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PresetMsg::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PresetMsg::clear_msg() {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& PresetMsg::msg() const {
  // @@protoc_insertion_point(field_get:Cmd.PresetMsg.msg)
  return *msg_;
}
inline void PresetMsg::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.PresetMsg.msg)
}
inline void PresetMsg::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.PresetMsg.msg)
}
inline void PresetMsg::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.PresetMsg.msg)
}
inline ::std::string* PresetMsg::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.PresetMsg.msg)
  return msg_;
}
inline ::std::string* PresetMsg::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PresetMsg::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.PresetMsg.msg)
}

// -------------------------------------------------------------------

// PresetMsgCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool PresetMsgCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PresetMsgCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PresetMsgCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PresetMsgCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command PresetMsgCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.PresetMsgCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void PresetMsgCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PresetMsgCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_PRESETCHATMSG];
inline bool PresetMsgCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PresetMsgCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PresetMsgCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PresetMsgCmd::clear_param() {
  param_ = 36;
  clear_has_param();
}
inline ::Cmd::User2Param PresetMsgCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.PresetMsgCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void PresetMsgCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PresetMsgCmd.param)
}

// repeated string msgs = 3;
inline int PresetMsgCmd::msgs_size() const {
  return msgs_.size();
}
inline void PresetMsgCmd::clear_msgs() {
  msgs_.Clear();
}
inline const ::std::string& PresetMsgCmd::msgs(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.PresetMsgCmd.msgs)
  return msgs_.Get(index);
}
inline ::std::string* PresetMsgCmd::mutable_msgs(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.PresetMsgCmd.msgs)
  return msgs_.Mutable(index);
}
inline void PresetMsgCmd::set_msgs(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Cmd.PresetMsgCmd.msgs)
  msgs_.Mutable(index)->assign(value);
}
inline void PresetMsgCmd::set_msgs(int index, const char* value) {
  msgs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.PresetMsgCmd.msgs)
}
inline void PresetMsgCmd::set_msgs(int index, const char* value, size_t size) {
  msgs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.PresetMsgCmd.msgs)
}
inline ::std::string* PresetMsgCmd::add_msgs() {
  return msgs_.Add();
}
inline void PresetMsgCmd::add_msgs(const ::std::string& value) {
  msgs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Cmd.PresetMsgCmd.msgs)
}
inline void PresetMsgCmd::add_msgs(const char* value) {
  msgs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Cmd.PresetMsgCmd.msgs)
}
inline void PresetMsgCmd::add_msgs(const char* value, size_t size) {
  msgs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Cmd.PresetMsgCmd.msgs)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PresetMsgCmd::msgs() const {
  // @@protoc_insertion_point(field_list:Cmd.PresetMsgCmd.msgs)
  return msgs_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PresetMsgCmd::mutable_msgs() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.PresetMsgCmd.msgs)
  return &msgs_;
}

// -------------------------------------------------------------------

// ChangeBgmCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool ChangeBgmCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChangeBgmCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChangeBgmCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChangeBgmCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command ChangeBgmCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ChangeBgmCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ChangeBgmCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChangeBgmCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_CHANGEBGM];
inline bool ChangeBgmCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChangeBgmCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChangeBgmCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChangeBgmCmd::clear_param() {
  param_ = 37;
  clear_has_param();
}
inline ::Cmd::User2Param ChangeBgmCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ChangeBgmCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void ChangeBgmCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChangeBgmCmd.param)
}

// optional string bgm = 3;
inline bool ChangeBgmCmd::has_bgm() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChangeBgmCmd::set_has_bgm() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChangeBgmCmd::clear_has_bgm() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChangeBgmCmd::clear_bgm() {
  if (bgm_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bgm_->clear();
  }
  clear_has_bgm();
}
inline const ::std::string& ChangeBgmCmd::bgm() const {
  // @@protoc_insertion_point(field_get:Cmd.ChangeBgmCmd.bgm)
  return *bgm_;
}
inline void ChangeBgmCmd::set_bgm(const ::std::string& value) {
  set_has_bgm();
  if (bgm_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bgm_ = new ::std::string;
  }
  bgm_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ChangeBgmCmd.bgm)
}
inline void ChangeBgmCmd::set_bgm(const char* value) {
  set_has_bgm();
  if (bgm_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bgm_ = new ::std::string;
  }
  bgm_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ChangeBgmCmd.bgm)
}
inline void ChangeBgmCmd::set_bgm(const char* value, size_t size) {
  set_has_bgm();
  if (bgm_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bgm_ = new ::std::string;
  }
  bgm_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ChangeBgmCmd.bgm)
}
inline ::std::string* ChangeBgmCmd::mutable_bgm() {
  set_has_bgm();
  if (bgm_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bgm_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ChangeBgmCmd.bgm)
  return bgm_;
}
inline ::std::string* ChangeBgmCmd::release_bgm() {
  clear_has_bgm();
  if (bgm_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = bgm_;
    bgm_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChangeBgmCmd::set_allocated_bgm(::std::string* bgm) {
  if (bgm_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bgm_;
  }
  if (bgm) {
    set_has_bgm();
    bgm_ = bgm;
  } else {
    clear_has_bgm();
    bgm_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ChangeBgmCmd.bgm)
}

// optional bool play = 4 [default = true];
inline bool ChangeBgmCmd::has_play() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChangeBgmCmd::set_has_play() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChangeBgmCmd::clear_has_play() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChangeBgmCmd::clear_play() {
  play_ = true;
  clear_has_play();
}
inline bool ChangeBgmCmd::play() const {
  // @@protoc_insertion_point(field_get:Cmd.ChangeBgmCmd.play)
  return play_;
}
inline void ChangeBgmCmd::set_play(bool value) {
  set_has_play();
  play_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChangeBgmCmd.play)
}

// optional uint32 times = 5 [default = 0];
inline bool ChangeBgmCmd::has_times() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChangeBgmCmd::set_has_times() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ChangeBgmCmd::clear_has_times() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ChangeBgmCmd::clear_times() {
  times_ = 0u;
  clear_has_times();
}
inline ::google::protobuf::uint32 ChangeBgmCmd::times() const {
  // @@protoc_insertion_point(field_get:Cmd.ChangeBgmCmd.times)
  return times_;
}
inline void ChangeBgmCmd::set_times(::google::protobuf::uint32 value) {
  set_has_times();
  times_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChangeBgmCmd.times)
}

// optional .Cmd.EBgmType type = 6;
inline bool ChangeBgmCmd::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ChangeBgmCmd::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ChangeBgmCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ChangeBgmCmd::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Cmd::EBgmType ChangeBgmCmd::type() const {
  // @@protoc_insertion_point(field_get:Cmd.ChangeBgmCmd.type)
  return static_cast< ::Cmd::EBgmType >(type_);
}
inline void ChangeBgmCmd::set_type(::Cmd::EBgmType value) {
  assert(::Cmd::EBgmType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChangeBgmCmd.type)
}

// -------------------------------------------------------------------

// FighterInfo

// repeated .Cmd.UserData datas = 1;
inline int FighterInfo::datas_size() const {
  return datas_.size();
}
inline void FighterInfo::clear_datas() {
  datas_.Clear();
}
inline const ::Cmd::UserData& FighterInfo::datas(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.FighterInfo.datas)
  return datas_.Get(index);
}
inline ::Cmd::UserData* FighterInfo::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.FighterInfo.datas)
  return datas_.Mutable(index);
}
inline ::Cmd::UserData* FighterInfo::add_datas() {
  // @@protoc_insertion_point(field_add:Cmd.FighterInfo.datas)
  return datas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::UserData >&
FighterInfo::datas() const {
  // @@protoc_insertion_point(field_list:Cmd.FighterInfo.datas)
  return datas_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::UserData >*
FighterInfo::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.FighterInfo.datas)
  return &datas_;
}

// repeated .Cmd.UserAttr attrs = 2;
inline int FighterInfo::attrs_size() const {
  return attrs_.size();
}
inline void FighterInfo::clear_attrs() {
  attrs_.Clear();
}
inline const ::Cmd::UserAttr& FighterInfo::attrs(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.FighterInfo.attrs)
  return attrs_.Get(index);
}
inline ::Cmd::UserAttr* FighterInfo::mutable_attrs(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.FighterInfo.attrs)
  return attrs_.Mutable(index);
}
inline ::Cmd::UserAttr* FighterInfo::add_attrs() {
  // @@protoc_insertion_point(field_add:Cmd.FighterInfo.attrs)
  return attrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::UserAttr >&
FighterInfo::attrs() const {
  // @@protoc_insertion_point(field_list:Cmd.FighterInfo.attrs)
  return attrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::UserAttr >*
FighterInfo::mutable_attrs() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.FighterInfo.attrs)
  return &attrs_;
}

// -------------------------------------------------------------------

// QueryFighterInfo

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool QueryFighterInfo::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryFighterInfo::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryFighterInfo::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryFighterInfo::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command QueryFighterInfo::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryFighterInfo.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void QueryFighterInfo::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryFighterInfo.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_QUERYFIGHTERINFO];
inline bool QueryFighterInfo::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryFighterInfo::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryFighterInfo::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryFighterInfo::clear_param() {
  param_ = 38;
  clear_has_param();
}
inline ::Cmd::User2Param QueryFighterInfo::param() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryFighterInfo.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void QueryFighterInfo::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryFighterInfo.param)
}

// repeated .Cmd.FighterInfo fighters = 3;
inline int QueryFighterInfo::fighters_size() const {
  return fighters_.size();
}
inline void QueryFighterInfo::clear_fighters() {
  fighters_.Clear();
}
inline const ::Cmd::FighterInfo& QueryFighterInfo::fighters(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.QueryFighterInfo.fighters)
  return fighters_.Get(index);
}
inline ::Cmd::FighterInfo* QueryFighterInfo::mutable_fighters(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.QueryFighterInfo.fighters)
  return fighters_.Mutable(index);
}
inline ::Cmd::FighterInfo* QueryFighterInfo::add_fighters() {
  // @@protoc_insertion_point(field_add:Cmd.QueryFighterInfo.fighters)
  return fighters_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::FighterInfo >&
QueryFighterInfo::fighters() const {
  // @@protoc_insertion_point(field_list:Cmd.QueryFighterInfo.fighters)
  return fighters_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::FighterInfo >*
QueryFighterInfo::mutable_fighters() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.QueryFighterInfo.fighters)
  return &fighters_;
}

// -------------------------------------------------------------------

// GameTimeCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool GameTimeCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameTimeCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameTimeCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameTimeCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command GameTimeCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.GameTimeCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void GameTimeCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GameTimeCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_GAMETIME];
inline bool GameTimeCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameTimeCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameTimeCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameTimeCmd::clear_param() {
  param_ = 40;
  clear_has_param();
}
inline ::Cmd::User2Param GameTimeCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.GameTimeCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void GameTimeCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GameTimeCmd.param)
}

// optional .Cmd.GameTimeOpt opt = 3 [default = EGAMETIMEOPT_SYNC];
inline bool GameTimeCmd::has_opt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameTimeCmd::set_has_opt() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameTimeCmd::clear_has_opt() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameTimeCmd::clear_opt() {
  opt_ = 1;
  clear_has_opt();
}
inline ::Cmd::GameTimeOpt GameTimeCmd::opt() const {
  // @@protoc_insertion_point(field_get:Cmd.GameTimeCmd.opt)
  return static_cast< ::Cmd::GameTimeOpt >(opt_);
}
inline void GameTimeCmd::set_opt(::Cmd::GameTimeOpt value) {
  assert(::Cmd::GameTimeOpt_IsValid(value));
  set_has_opt();
  opt_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GameTimeCmd.opt)
}

// optional uint32 sec = 4 [default = 1];
inline bool GameTimeCmd::has_sec() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GameTimeCmd::set_has_sec() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GameTimeCmd::clear_has_sec() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GameTimeCmd::clear_sec() {
  sec_ = 1u;
  clear_has_sec();
}
inline ::google::protobuf::uint32 GameTimeCmd::sec() const {
  // @@protoc_insertion_point(field_get:Cmd.GameTimeCmd.sec)
  return sec_;
}
inline void GameTimeCmd::set_sec(::google::protobuf::uint32 value) {
  set_has_sec();
  sec_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GameTimeCmd.sec)
}

// optional uint32 speed = 5 [default = 1];
inline bool GameTimeCmd::has_speed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GameTimeCmd::set_has_speed() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GameTimeCmd::clear_has_speed() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GameTimeCmd::clear_speed() {
  speed_ = 1u;
  clear_has_speed();
}
inline ::google::protobuf::uint32 GameTimeCmd::speed() const {
  // @@protoc_insertion_point(field_get:Cmd.GameTimeCmd.speed)
  return speed_;
}
inline void GameTimeCmd::set_speed(::google::protobuf::uint32 value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GameTimeCmd.speed)
}

// -------------------------------------------------------------------

// CDTimeItem

// optional uint32 id = 1;
inline bool CDTimeItem::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDTimeItem::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDTimeItem::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDTimeItem::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 CDTimeItem::id() const {
  // @@protoc_insertion_point(field_get:Cmd.CDTimeItem.id)
  return id_;
}
inline void CDTimeItem::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CDTimeItem.id)
}

// optional uint64 time = 2;
inline bool CDTimeItem::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDTimeItem::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDTimeItem::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDTimeItem::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 CDTimeItem::time() const {
  // @@protoc_insertion_point(field_get:Cmd.CDTimeItem.time)
  return time_;
}
inline void CDTimeItem::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CDTimeItem.time)
}

// optional .Cmd.CD_TYPE type = 3;
inline bool CDTimeItem::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDTimeItem::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CDTimeItem::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CDTimeItem::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Cmd::CD_TYPE CDTimeItem::type() const {
  // @@protoc_insertion_point(field_get:Cmd.CDTimeItem.type)
  return static_cast< ::Cmd::CD_TYPE >(type_);
}
inline void CDTimeItem::set_type(::Cmd::CD_TYPE value) {
  assert(::Cmd::CD_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CDTimeItem.type)
}

// -------------------------------------------------------------------

// CDTimeUserCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool CDTimeUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDTimeUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDTimeUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDTimeUserCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command CDTimeUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.CDTimeUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void CDTimeUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CDTimeUserCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_CDTIME];
inline bool CDTimeUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDTimeUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDTimeUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDTimeUserCmd::clear_param() {
  param_ = 41;
  clear_has_param();
}
inline ::Cmd::User2Param CDTimeUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.CDTimeUserCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void CDTimeUserCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CDTimeUserCmd.param)
}

// repeated .Cmd.CDTimeItem list = 3;
inline int CDTimeUserCmd::list_size() const {
  return list_.size();
}
inline void CDTimeUserCmd::clear_list() {
  list_.Clear();
}
inline const ::Cmd::CDTimeItem& CDTimeUserCmd::list(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.CDTimeUserCmd.list)
  return list_.Get(index);
}
inline ::Cmd::CDTimeItem* CDTimeUserCmd::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.CDTimeUserCmd.list)
  return list_.Mutable(index);
}
inline ::Cmd::CDTimeItem* CDTimeUserCmd::add_list() {
  // @@protoc_insertion_point(field_add:Cmd.CDTimeUserCmd.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::CDTimeItem >&
CDTimeUserCmd::list() const {
  // @@protoc_insertion_point(field_list:Cmd.CDTimeUserCmd.list)
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::CDTimeItem >*
CDTimeUserCmd::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.CDTimeUserCmd.list)
  return &list_;
}

// -------------------------------------------------------------------

// StateChange

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool StateChange::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StateChange::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StateChange::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StateChange::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command StateChange::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.StateChange.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void StateChange::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.StateChange.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_STATECHANGE];
inline bool StateChange::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StateChange::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StateChange::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StateChange::clear_param() {
  param_ = 42;
  clear_has_param();
}
inline ::Cmd::User2Param StateChange::param() const {
  // @@protoc_insertion_point(field_get:Cmd.StateChange.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void StateChange::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.StateChange.param)
}

// optional .Cmd.ECreatureStatus status = 3 [default = ECREATURESTATUS_MIN];
inline bool StateChange::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StateChange::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StateChange::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StateChange::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::Cmd::ECreatureStatus StateChange::status() const {
  // @@protoc_insertion_point(field_get:Cmd.StateChange.status)
  return static_cast< ::Cmd::ECreatureStatus >(status_);
}
inline void StateChange::set_status(::Cmd::ECreatureStatus value) {
  assert(::Cmd::ECreatureStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:Cmd.StateChange.status)
}

// -------------------------------------------------------------------

// Photo

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool Photo::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Photo::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Photo::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Photo::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command Photo::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.Photo.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void Photo::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.Photo.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_PHOTO];
inline bool Photo::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Photo::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Photo::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Photo::clear_param() {
  param_ = 44;
  clear_has_param();
}
inline ::Cmd::User2Param Photo::param() const {
  // @@protoc_insertion_point(field_get:Cmd.Photo.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void Photo::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.Photo.param)
}

// optional uint64 guid = 3 [default = 0];
inline bool Photo::has_guid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Photo::set_has_guid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Photo::clear_has_guid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Photo::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
  clear_has_guid();
}
inline ::google::protobuf::uint64 Photo::guid() const {
  // @@protoc_insertion_point(field_get:Cmd.Photo.guid)
  return guid_;
}
inline void Photo::set_guid(::google::protobuf::uint64 value) {
  set_has_guid();
  guid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.Photo.guid)
}

// -------------------------------------------------------------------

// ShakeScreen

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool ShakeScreen::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShakeScreen::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShakeScreen::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShakeScreen::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command ShakeScreen::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ShakeScreen.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ShakeScreen::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ShakeScreen.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_SHAKESCREEN];
inline bool ShakeScreen::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ShakeScreen::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ShakeScreen::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ShakeScreen::clear_param() {
  param_ = 45;
  clear_has_param();
}
inline ::Cmd::User2Param ShakeScreen::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ShakeScreen.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void ShakeScreen::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ShakeScreen.param)
}

// optional uint32 maxamplitude = 3 [default = 3];
inline bool ShakeScreen::has_maxamplitude() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ShakeScreen::set_has_maxamplitude() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ShakeScreen::clear_has_maxamplitude() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ShakeScreen::clear_maxamplitude() {
  maxamplitude_ = 3u;
  clear_has_maxamplitude();
}
inline ::google::protobuf::uint32 ShakeScreen::maxamplitude() const {
  // @@protoc_insertion_point(field_get:Cmd.ShakeScreen.maxamplitude)
  return maxamplitude_;
}
inline void ShakeScreen::set_maxamplitude(::google::protobuf::uint32 value) {
  set_has_maxamplitude();
  maxamplitude_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ShakeScreen.maxamplitude)
}

// optional uint32 msec = 4 [default = 0];
inline bool ShakeScreen::has_msec() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ShakeScreen::set_has_msec() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ShakeScreen::clear_has_msec() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ShakeScreen::clear_msec() {
  msec_ = 0u;
  clear_has_msec();
}
inline ::google::protobuf::uint32 ShakeScreen::msec() const {
  // @@protoc_insertion_point(field_get:Cmd.ShakeScreen.msec)
  return msec_;
}
inline void ShakeScreen::set_msec(::google::protobuf::uint32 value) {
  set_has_msec();
  msec_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ShakeScreen.msec)
}

// optional uint32 shaketype = 5 [default = 1];
inline bool ShakeScreen::has_shaketype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ShakeScreen::set_has_shaketype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ShakeScreen::clear_has_shaketype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ShakeScreen::clear_shaketype() {
  shaketype_ = 1u;
  clear_has_shaketype();
}
inline ::google::protobuf::uint32 ShakeScreen::shaketype() const {
  // @@protoc_insertion_point(field_get:Cmd.ShakeScreen.shaketype)
  return shaketype_;
}
inline void ShakeScreen::set_shaketype(::google::protobuf::uint32 value) {
  set_has_shaketype();
  shaketype_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ShakeScreen.shaketype)
}

// -------------------------------------------------------------------

// ShortcutItem

// optional string guid = 1;
inline bool ShortcutItem::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShortcutItem::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShortcutItem::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShortcutItem::clear_guid() {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_->clear();
  }
  clear_has_guid();
}
inline const ::std::string& ShortcutItem::guid() const {
  // @@protoc_insertion_point(field_get:Cmd.ShortcutItem.guid)
  return *guid_;
}
inline void ShortcutItem::set_guid(const ::std::string& value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ShortcutItem.guid)
}
inline void ShortcutItem::set_guid(const char* value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ShortcutItem.guid)
}
inline void ShortcutItem::set_guid(const char* value, size_t size) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ShortcutItem.guid)
}
inline ::std::string* ShortcutItem::mutable_guid() {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ShortcutItem.guid)
  return guid_;
}
inline ::std::string* ShortcutItem::release_guid() {
  clear_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = guid_;
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ShortcutItem::set_allocated_guid(::std::string* guid) {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guid_;
  }
  if (guid) {
    set_has_guid();
    guid_ = guid;
  } else {
    clear_has_guid();
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ShortcutItem.guid)
}

// optional uint32 type = 2 [default = 0];
inline bool ShortcutItem::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ShortcutItem::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ShortcutItem::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ShortcutItem::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 ShortcutItem::type() const {
  // @@protoc_insertion_point(field_get:Cmd.ShortcutItem.type)
  return type_;
}
inline void ShortcutItem::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ShortcutItem.type)
}

// optional uint32 pos = 3 [default = 0];
inline bool ShortcutItem::has_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ShortcutItem::set_has_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ShortcutItem::clear_has_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ShortcutItem::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 ShortcutItem::pos() const {
  // @@protoc_insertion_point(field_get:Cmd.ShortcutItem.pos)
  return pos_;
}
inline void ShortcutItem::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ShortcutItem.pos)
}

// -------------------------------------------------------------------

// QueryShortcut

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool QueryShortcut::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryShortcut::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryShortcut::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryShortcut::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command QueryShortcut::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryShortcut.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void QueryShortcut::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryShortcut.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_QUERYSHORTCUT];
inline bool QueryShortcut::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryShortcut::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryShortcut::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryShortcut::clear_param() {
  param_ = 47;
  clear_has_param();
}
inline ::Cmd::User2Param QueryShortcut::param() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryShortcut.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void QueryShortcut::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryShortcut.param)
}

// repeated .Cmd.ShortcutItem list = 3;
inline int QueryShortcut::list_size() const {
  return list_.size();
}
inline void QueryShortcut::clear_list() {
  list_.Clear();
}
inline const ::Cmd::ShortcutItem& QueryShortcut::list(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.QueryShortcut.list)
  return list_.Get(index);
}
inline ::Cmd::ShortcutItem* QueryShortcut::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.QueryShortcut.list)
  return list_.Mutable(index);
}
inline ::Cmd::ShortcutItem* QueryShortcut::add_list() {
  // @@protoc_insertion_point(field_add:Cmd.QueryShortcut.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ShortcutItem >&
QueryShortcut::list() const {
  // @@protoc_insertion_point(field_list:Cmd.QueryShortcut.list)
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::ShortcutItem >*
QueryShortcut::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.QueryShortcut.list)
  return &list_;
}

// -------------------------------------------------------------------

// PutShortcut

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool PutShortcut::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PutShortcut::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PutShortcut::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PutShortcut::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command PutShortcut::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.PutShortcut.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void PutShortcut::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PutShortcut.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_PUTSHORTCUT];
inline bool PutShortcut::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PutShortcut::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PutShortcut::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PutShortcut::clear_param() {
  param_ = 48;
  clear_has_param();
}
inline ::Cmd::User2Param PutShortcut::param() const {
  // @@protoc_insertion_point(field_get:Cmd.PutShortcut.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void PutShortcut::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PutShortcut.param)
}

// optional .Cmd.ShortcutItem item = 3;
inline bool PutShortcut::has_item() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PutShortcut::set_has_item() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PutShortcut::clear_has_item() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PutShortcut::clear_item() {
  if (item_ != NULL) item_->::Cmd::ShortcutItem::Clear();
  clear_has_item();
}
inline const ::Cmd::ShortcutItem& PutShortcut::item() const {
  // @@protoc_insertion_point(field_get:Cmd.PutShortcut.item)
  return item_ != NULL ? *item_ : *default_instance_->item_;
}
inline ::Cmd::ShortcutItem* PutShortcut::mutable_item() {
  set_has_item();
  if (item_ == NULL) item_ = new ::Cmd::ShortcutItem;
  // @@protoc_insertion_point(field_mutable:Cmd.PutShortcut.item)
  return item_;
}
inline ::Cmd::ShortcutItem* PutShortcut::release_item() {
  clear_has_item();
  ::Cmd::ShortcutItem* temp = item_;
  item_ = NULL;
  return temp;
}
inline void PutShortcut::set_allocated_item(::Cmd::ShortcutItem* item) {
  delete item_;
  item_ = item;
  if (item) {
    set_has_item();
  } else {
    clear_has_item();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.PutShortcut.item)
}

// -------------------------------------------------------------------

// NpcChangeAngle

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool NpcChangeAngle::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NpcChangeAngle::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NpcChangeAngle::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NpcChangeAngle::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command NpcChangeAngle::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.NpcChangeAngle.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void NpcChangeAngle::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NpcChangeAngle.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_NPCANGLE];
inline bool NpcChangeAngle::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NpcChangeAngle::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NpcChangeAngle::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NpcChangeAngle::clear_param() {
  param_ = 49;
  clear_has_param();
}
inline ::Cmd::User2Param NpcChangeAngle::param() const {
  // @@protoc_insertion_point(field_get:Cmd.NpcChangeAngle.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void NpcChangeAngle::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NpcChangeAngle.param)
}

// optional uint64 guid = 3 [default = 0];
inline bool NpcChangeAngle::has_guid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NpcChangeAngle::set_has_guid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NpcChangeAngle::clear_has_guid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NpcChangeAngle::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
  clear_has_guid();
}
inline ::google::protobuf::uint64 NpcChangeAngle::guid() const {
  // @@protoc_insertion_point(field_get:Cmd.NpcChangeAngle.guid)
  return guid_;
}
inline void NpcChangeAngle::set_guid(::google::protobuf::uint64 value) {
  set_has_guid();
  guid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NpcChangeAngle.guid)
}

// optional uint64 targetid = 4 [default = 0];
inline bool NpcChangeAngle::has_targetid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NpcChangeAngle::set_has_targetid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NpcChangeAngle::clear_has_targetid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NpcChangeAngle::clear_targetid() {
  targetid_ = GOOGLE_ULONGLONG(0);
  clear_has_targetid();
}
inline ::google::protobuf::uint64 NpcChangeAngle::targetid() const {
  // @@protoc_insertion_point(field_get:Cmd.NpcChangeAngle.targetid)
  return targetid_;
}
inline void NpcChangeAngle::set_targetid(::google::protobuf::uint64 value) {
  set_has_targetid();
  targetid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NpcChangeAngle.targetid)
}

// optional uint32 angle = 5 [default = 0];
inline bool NpcChangeAngle::has_angle() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NpcChangeAngle::set_has_angle() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NpcChangeAngle::clear_has_angle() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NpcChangeAngle::clear_angle() {
  angle_ = 0u;
  clear_has_angle();
}
inline ::google::protobuf::uint32 NpcChangeAngle::angle() const {
  // @@protoc_insertion_point(field_get:Cmd.NpcChangeAngle.angle)
  return angle_;
}
inline void NpcChangeAngle::set_angle(::google::protobuf::uint32 value) {
  set_has_angle();
  angle_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NpcChangeAngle.angle)
}

// -------------------------------------------------------------------

// CameraFocus

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool CameraFocus::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CameraFocus::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CameraFocus::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CameraFocus::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command CameraFocus::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.CameraFocus.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void CameraFocus::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CameraFocus.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_CAMERAFOCUS];
inline bool CameraFocus::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CameraFocus::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CameraFocus::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CameraFocus::clear_param() {
  param_ = 50;
  clear_has_param();
}
inline ::Cmd::User2Param CameraFocus::param() const {
  // @@protoc_insertion_point(field_get:Cmd.CameraFocus.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void CameraFocus::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CameraFocus.param)
}

// repeated uint64 targets = 3;
inline int CameraFocus::targets_size() const {
  return targets_.size();
}
inline void CameraFocus::clear_targets() {
  targets_.Clear();
}
inline ::google::protobuf::uint64 CameraFocus::targets(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.CameraFocus.targets)
  return targets_.Get(index);
}
inline void CameraFocus::set_targets(int index, ::google::protobuf::uint64 value) {
  targets_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.CameraFocus.targets)
}
inline void CameraFocus::add_targets(::google::protobuf::uint64 value) {
  targets_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.CameraFocus.targets)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CameraFocus::targets() const {
  // @@protoc_insertion_point(field_list:Cmd.CameraFocus.targets)
  return targets_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CameraFocus::mutable_targets() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.CameraFocus.targets)
  return &targets_;
}

// -------------------------------------------------------------------

// GoToListUserCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool GoToListUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GoToListUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GoToListUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GoToListUserCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command GoToListUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.GoToListUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void GoToListUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GoToListUserCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_GOTO_LIST];
inline bool GoToListUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GoToListUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GoToListUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GoToListUserCmd::clear_param() {
  param_ = 51;
  clear_has_param();
}
inline ::Cmd::User2Param GoToListUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.GoToListUserCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void GoToListUserCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GoToListUserCmd.param)
}

// repeated uint32 mapid = 3;
inline int GoToListUserCmd::mapid_size() const {
  return mapid_.size();
}
inline void GoToListUserCmd::clear_mapid() {
  mapid_.Clear();
}
inline ::google::protobuf::uint32 GoToListUserCmd::mapid(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.GoToListUserCmd.mapid)
  return mapid_.Get(index);
}
inline void GoToListUserCmd::set_mapid(int index, ::google::protobuf::uint32 value) {
  mapid_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.GoToListUserCmd.mapid)
}
inline void GoToListUserCmd::add_mapid(::google::protobuf::uint32 value) {
  mapid_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.GoToListUserCmd.mapid)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GoToListUserCmd::mapid() const {
  // @@protoc_insertion_point(field_list:Cmd.GoToListUserCmd.mapid)
  return mapid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GoToListUserCmd::mutable_mapid() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.GoToListUserCmd.mapid)
  return &mapid_;
}

// -------------------------------------------------------------------

// GoToGearUserCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool GoToGearUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GoToGearUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GoToGearUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GoToGearUserCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command GoToGearUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.GoToGearUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void GoToGearUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GoToGearUserCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_GOTO_GEAR];
inline bool GoToGearUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GoToGearUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GoToGearUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GoToGearUserCmd::clear_param() {
  param_ = 52;
  clear_has_param();
}
inline ::Cmd::User2Param GoToGearUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.GoToGearUserCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void GoToGearUserCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GoToGearUserCmd.param)
}

// optional uint32 mapid = 3;
inline bool GoToGearUserCmd::has_mapid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GoToGearUserCmd::set_has_mapid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GoToGearUserCmd::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GoToGearUserCmd::clear_mapid() {
  mapid_ = 0u;
  clear_has_mapid();
}
inline ::google::protobuf::uint32 GoToGearUserCmd::mapid() const {
  // @@protoc_insertion_point(field_get:Cmd.GoToGearUserCmd.mapid)
  return mapid_;
}
inline void GoToGearUserCmd::set_mapid(::google::protobuf::uint32 value) {
  set_has_mapid();
  mapid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GoToGearUserCmd.mapid)
}

// optional .Cmd.EGoToGearType type = 4;
inline bool GoToGearUserCmd::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GoToGearUserCmd::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GoToGearUserCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GoToGearUserCmd::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::Cmd::EGoToGearType GoToGearUserCmd::type() const {
  // @@protoc_insertion_point(field_get:Cmd.GoToGearUserCmd.type)
  return static_cast< ::Cmd::EGoToGearType >(type_);
}
inline void GoToGearUserCmd::set_type(::Cmd::EGoToGearType value) {
  assert(::Cmd::EGoToGearType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GoToGearUserCmd.type)
}

// repeated uint64 otherids = 5;
inline int GoToGearUserCmd::otherids_size() const {
  return otherids_.size();
}
inline void GoToGearUserCmd::clear_otherids() {
  otherids_.Clear();
}
inline ::google::protobuf::uint64 GoToGearUserCmd::otherids(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.GoToGearUserCmd.otherids)
  return otherids_.Get(index);
}
inline void GoToGearUserCmd::set_otherids(int index, ::google::protobuf::uint64 value) {
  otherids_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.GoToGearUserCmd.otherids)
}
inline void GoToGearUserCmd::add_otherids(::google::protobuf::uint64 value) {
  otherids_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.GoToGearUserCmd.otherids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
GoToGearUserCmd::otherids() const {
  // @@protoc_insertion_point(field_list:Cmd.GoToGearUserCmd.otherids)
  return otherids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
GoToGearUserCmd::mutable_otherids() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.GoToGearUserCmd.otherids)
  return &otherids_;
}

// -------------------------------------------------------------------

// NewTransMapCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool NewTransMapCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NewTransMapCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NewTransMapCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NewTransMapCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command NewTransMapCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.NewTransMapCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void NewTransMapCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NewTransMapCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_NEWTRANSMAP];
inline bool NewTransMapCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NewTransMapCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NewTransMapCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NewTransMapCmd::clear_param() {
  param_ = 12;
  clear_has_param();
}
inline ::Cmd::User2Param NewTransMapCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.NewTransMapCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void NewTransMapCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NewTransMapCmd.param)
}

// repeated uint32 mapid = 3;
inline int NewTransMapCmd::mapid_size() const {
  return mapid_.size();
}
inline void NewTransMapCmd::clear_mapid() {
  mapid_.Clear();
}
inline ::google::protobuf::uint32 NewTransMapCmd::mapid(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.NewTransMapCmd.mapid)
  return mapid_.Get(index);
}
inline void NewTransMapCmd::set_mapid(int index, ::google::protobuf::uint32 value) {
  mapid_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.NewTransMapCmd.mapid)
}
inline void NewTransMapCmd::add_mapid(::google::protobuf::uint32 value) {
  mapid_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.NewTransMapCmd.mapid)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
NewTransMapCmd::mapid() const {
  // @@protoc_insertion_point(field_list:Cmd.NewTransMapCmd.mapid)
  return mapid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
NewTransMapCmd::mutable_mapid() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.NewTransMapCmd.mapid)
  return &mapid_;
}

// -------------------------------------------------------------------

// DeathTransferListCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool DeathTransferListCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeathTransferListCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeathTransferListCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeathTransferListCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command DeathTransferListCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.DeathTransferListCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void DeathTransferListCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DeathTransferListCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_DEATH_TRANSFER_LIST];
inline bool DeathTransferListCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeathTransferListCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeathTransferListCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeathTransferListCmd::clear_param() {
  param_ = 151;
  clear_has_param();
}
inline ::Cmd::User2Param DeathTransferListCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.DeathTransferListCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void DeathTransferListCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DeathTransferListCmd.param)
}

// repeated uint32 npcId = 3;
inline int DeathTransferListCmd::npcid_size() const {
  return npcid_.size();
}
inline void DeathTransferListCmd::clear_npcid() {
  npcid_.Clear();
}
inline ::google::protobuf::uint32 DeathTransferListCmd::npcid(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.DeathTransferListCmd.npcId)
  return npcid_.Get(index);
}
inline void DeathTransferListCmd::set_npcid(int index, ::google::protobuf::uint32 value) {
  npcid_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.DeathTransferListCmd.npcId)
}
inline void DeathTransferListCmd::add_npcid(::google::protobuf::uint32 value) {
  npcid_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.DeathTransferListCmd.npcId)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DeathTransferListCmd::npcid() const {
  // @@protoc_insertion_point(field_list:Cmd.DeathTransferListCmd.npcId)
  return npcid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DeathTransferListCmd::mutable_npcid() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.DeathTransferListCmd.npcId)
  return &npcid_;
}

// -------------------------------------------------------------------

// NewDeathTransferCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool NewDeathTransferCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NewDeathTransferCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NewDeathTransferCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NewDeathTransferCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command NewDeathTransferCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.NewDeathTransferCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void NewDeathTransferCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NewDeathTransferCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_NEW_DEATH_TRANSFER];
inline bool NewDeathTransferCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NewDeathTransferCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NewDeathTransferCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NewDeathTransferCmd::clear_param() {
  param_ = 152;
  clear_has_param();
}
inline ::Cmd::User2Param NewDeathTransferCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.NewDeathTransferCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void NewDeathTransferCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NewDeathTransferCmd.param)
}

// optional uint32 npcId = 3;
inline bool NewDeathTransferCmd::has_npcid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NewDeathTransferCmd::set_has_npcid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NewDeathTransferCmd::clear_has_npcid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NewDeathTransferCmd::clear_npcid() {
  npcid_ = 0u;
  clear_has_npcid();
}
inline ::google::protobuf::uint32 NewDeathTransferCmd::npcid() const {
  // @@protoc_insertion_point(field_get:Cmd.NewDeathTransferCmd.npcId)
  return npcid_;
}
inline void NewDeathTransferCmd::set_npcid(::google::protobuf::uint32 value) {
  set_has_npcid();
  npcid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NewDeathTransferCmd.npcId)
}

// -------------------------------------------------------------------

// UseDeathTransferCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool UseDeathTransferCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UseDeathTransferCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UseDeathTransferCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UseDeathTransferCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command UseDeathTransferCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.UseDeathTransferCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void UseDeathTransferCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UseDeathTransferCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_TRANSFER];
inline bool UseDeathTransferCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UseDeathTransferCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UseDeathTransferCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UseDeathTransferCmd::clear_param() {
  param_ = 153;
  clear_has_param();
}
inline ::Cmd::User2Param UseDeathTransferCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.UseDeathTransferCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void UseDeathTransferCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UseDeathTransferCmd.param)
}

// optional uint32 fromNpcId = 3;
inline bool UseDeathTransferCmd::has_fromnpcid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UseDeathTransferCmd::set_has_fromnpcid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UseDeathTransferCmd::clear_has_fromnpcid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UseDeathTransferCmd::clear_fromnpcid() {
  fromnpcid_ = 0u;
  clear_has_fromnpcid();
}
inline ::google::protobuf::uint32 UseDeathTransferCmd::fromnpcid() const {
  // @@protoc_insertion_point(field_get:Cmd.UseDeathTransferCmd.fromNpcId)
  return fromnpcid_;
}
inline void UseDeathTransferCmd::set_fromnpcid(::google::protobuf::uint32 value) {
  set_has_fromnpcid();
  fromnpcid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UseDeathTransferCmd.fromNpcId)
}

// optional uint32 toNpcId = 4;
inline bool UseDeathTransferCmd::has_tonpcid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UseDeathTransferCmd::set_has_tonpcid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UseDeathTransferCmd::clear_has_tonpcid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UseDeathTransferCmd::clear_tonpcid() {
  tonpcid_ = 0u;
  clear_has_tonpcid();
}
inline ::google::protobuf::uint32 UseDeathTransferCmd::tonpcid() const {
  // @@protoc_insertion_point(field_get:Cmd.UseDeathTransferCmd.toNpcId)
  return tonpcid_;
}
inline void UseDeathTransferCmd::set_tonpcid(::google::protobuf::uint32 value) {
  set_has_tonpcid();
  tonpcid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UseDeathTransferCmd.toNpcId)
}

// -------------------------------------------------------------------

// FollowerUser

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool FollowerUser::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FollowerUser::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FollowerUser::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FollowerUser::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command FollowerUser::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.FollowerUser.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void FollowerUser::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.FollowerUser.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_FOLLOWER];
inline bool FollowerUser::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FollowerUser::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FollowerUser::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FollowerUser::clear_param() {
  param_ = 53;
  clear_has_param();
}
inline ::Cmd::User2Param FollowerUser::param() const {
  // @@protoc_insertion_point(field_get:Cmd.FollowerUser.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void FollowerUser::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.FollowerUser.param)
}

// optional uint64 userid = 3 [default = 0];
inline bool FollowerUser::has_userid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FollowerUser::set_has_userid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FollowerUser::clear_has_userid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FollowerUser::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::uint64 FollowerUser::userid() const {
  // @@protoc_insertion_point(field_get:Cmd.FollowerUser.userid)
  return userid_;
}
inline void FollowerUser::set_userid(::google::protobuf::uint64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.FollowerUser.userid)
}

// optional .Cmd.EFollowType eType = 4 [default = EFOLLOWTYPE_MIN];
inline bool FollowerUser::has_etype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FollowerUser::set_has_etype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FollowerUser::clear_has_etype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FollowerUser::clear_etype() {
  etype_ = 0;
  clear_has_etype();
}
inline ::Cmd::EFollowType FollowerUser::etype() const {
  // @@protoc_insertion_point(field_get:Cmd.FollowerUser.eType)
  return static_cast< ::Cmd::EFollowType >(etype_);
}
inline void FollowerUser::set_etype(::Cmd::EFollowType value) {
  assert(::Cmd::EFollowType_IsValid(value));
  set_has_etype();
  etype_ = value;
  // @@protoc_insertion_point(field_set:Cmd.FollowerUser.eType)
}

// -------------------------------------------------------------------

// BeFollowUserCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool BeFollowUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BeFollowUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BeFollowUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BeFollowUserCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command BeFollowUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.BeFollowUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void BeFollowUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BeFollowUserCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_BEFOLLOW];
inline bool BeFollowUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BeFollowUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BeFollowUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BeFollowUserCmd::clear_param() {
  param_ = 96;
  clear_has_param();
}
inline ::Cmd::User2Param BeFollowUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.BeFollowUserCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void BeFollowUserCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BeFollowUserCmd.param)
}

// optional uint64 userid = 3 [default = 0];
inline bool BeFollowUserCmd::has_userid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BeFollowUserCmd::set_has_userid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BeFollowUserCmd::clear_has_userid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BeFollowUserCmd::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::uint64 BeFollowUserCmd::userid() const {
  // @@protoc_insertion_point(field_get:Cmd.BeFollowUserCmd.userid)
  return userid_;
}
inline void BeFollowUserCmd::set_userid(::google::protobuf::uint64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BeFollowUserCmd.userid)
}

// optional .Cmd.EFollowType eType = 4 [default = EFOLLOWTYPE_MIN];
inline bool BeFollowUserCmd::has_etype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BeFollowUserCmd::set_has_etype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BeFollowUserCmd::clear_has_etype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BeFollowUserCmd::clear_etype() {
  etype_ = 0;
  clear_has_etype();
}
inline ::Cmd::EFollowType BeFollowUserCmd::etype() const {
  // @@protoc_insertion_point(field_get:Cmd.BeFollowUserCmd.eType)
  return static_cast< ::Cmd::EFollowType >(etype_);
}
inline void BeFollowUserCmd::set_etype(::Cmd::EFollowType value) {
  assert(::Cmd::EFollowType_IsValid(value));
  set_has_etype();
  etype_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BeFollowUserCmd.eType)
}

// -------------------------------------------------------------------

// LaboratoryUserCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool LaboratoryUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LaboratoryUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LaboratoryUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LaboratoryUserCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command LaboratoryUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.LaboratoryUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void LaboratoryUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LaboratoryUserCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_LABORATORY];
inline bool LaboratoryUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LaboratoryUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LaboratoryUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LaboratoryUserCmd::clear_param() {
  param_ = 54;
  clear_has_param();
}
inline ::Cmd::User2Param LaboratoryUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.LaboratoryUserCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void LaboratoryUserCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LaboratoryUserCmd.param)
}

// optional uint32 round = 3 [default = 0];
inline bool LaboratoryUserCmd::has_round() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LaboratoryUserCmd::set_has_round() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LaboratoryUserCmd::clear_has_round() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LaboratoryUserCmd::clear_round() {
  round_ = 0u;
  clear_has_round();
}
inline ::google::protobuf::uint32 LaboratoryUserCmd::round() const {
  // @@protoc_insertion_point(field_get:Cmd.LaboratoryUserCmd.round)
  return round_;
}
inline void LaboratoryUserCmd::set_round(::google::protobuf::uint32 value) {
  set_has_round();
  round_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LaboratoryUserCmd.round)
}

// optional uint32 curscore = 4 [default = 0];
inline bool LaboratoryUserCmd::has_curscore() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LaboratoryUserCmd::set_has_curscore() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LaboratoryUserCmd::clear_has_curscore() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LaboratoryUserCmd::clear_curscore() {
  curscore_ = 0u;
  clear_has_curscore();
}
inline ::google::protobuf::uint32 LaboratoryUserCmd::curscore() const {
  // @@protoc_insertion_point(field_get:Cmd.LaboratoryUserCmd.curscore)
  return curscore_;
}
inline void LaboratoryUserCmd::set_curscore(::google::protobuf::uint32 value) {
  set_has_curscore();
  curscore_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LaboratoryUserCmd.curscore)
}

// optional uint32 maxscore = 5 [default = 0];
inline bool LaboratoryUserCmd::has_maxscore() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LaboratoryUserCmd::set_has_maxscore() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LaboratoryUserCmd::clear_has_maxscore() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LaboratoryUserCmd::clear_maxscore() {
  maxscore_ = 0u;
  clear_has_maxscore();
}
inline ::google::protobuf::uint32 LaboratoryUserCmd::maxscore() const {
  // @@protoc_insertion_point(field_get:Cmd.LaboratoryUserCmd.maxscore)
  return maxscore_;
}
inline void LaboratoryUserCmd::set_maxscore(::google::protobuf::uint32 value) {
  set_has_maxscore();
  maxscore_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LaboratoryUserCmd.maxscore)
}

// -------------------------------------------------------------------

// GotoLaboratoryUserCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool GotoLaboratoryUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GotoLaboratoryUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GotoLaboratoryUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GotoLaboratoryUserCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command GotoLaboratoryUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.GotoLaboratoryUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void GotoLaboratoryUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GotoLaboratoryUserCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_GOTO_LABORATORY];
inline bool GotoLaboratoryUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GotoLaboratoryUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GotoLaboratoryUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GotoLaboratoryUserCmd::clear_param() {
  param_ = 57;
  clear_has_param();
}
inline ::Cmd::User2Param GotoLaboratoryUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.GotoLaboratoryUserCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void GotoLaboratoryUserCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GotoLaboratoryUserCmd.param)
}

// optional uint32 funid = 3;
inline bool GotoLaboratoryUserCmd::has_funid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GotoLaboratoryUserCmd::set_has_funid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GotoLaboratoryUserCmd::clear_has_funid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GotoLaboratoryUserCmd::clear_funid() {
  funid_ = 0u;
  clear_has_funid();
}
inline ::google::protobuf::uint32 GotoLaboratoryUserCmd::funid() const {
  // @@protoc_insertion_point(field_get:Cmd.GotoLaboratoryUserCmd.funid)
  return funid_;
}
inline void GotoLaboratoryUserCmd::set_funid(::google::protobuf::uint32 value) {
  set_has_funid();
  funid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GotoLaboratoryUserCmd.funid)
}

// -------------------------------------------------------------------

// ExchangeProfession

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool ExchangeProfession::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExchangeProfession::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExchangeProfession::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExchangeProfession::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command ExchangeProfession::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ExchangeProfession.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ExchangeProfession::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ExchangeProfession.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_EXCHANGEPROFESSION];
inline bool ExchangeProfession::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExchangeProfession::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExchangeProfession::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExchangeProfession::clear_param() {
  param_ = 56;
  clear_has_param();
}
inline ::Cmd::User2Param ExchangeProfession::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ExchangeProfession.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void ExchangeProfession::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ExchangeProfession.param)
}

// optional uint64 guid = 3 [default = 0];
inline bool ExchangeProfession::has_guid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ExchangeProfession::set_has_guid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ExchangeProfession::clear_has_guid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ExchangeProfession::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
  clear_has_guid();
}
inline ::google::protobuf::uint64 ExchangeProfession::guid() const {
  // @@protoc_insertion_point(field_get:Cmd.ExchangeProfession.guid)
  return guid_;
}
inline void ExchangeProfession::set_guid(::google::protobuf::uint64 value) {
  set_has_guid();
  guid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ExchangeProfession.guid)
}

// repeated .Cmd.UserData datas = 4;
inline int ExchangeProfession::datas_size() const {
  return datas_.size();
}
inline void ExchangeProfession::clear_datas() {
  datas_.Clear();
}
inline const ::Cmd::UserData& ExchangeProfession::datas(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.ExchangeProfession.datas)
  return datas_.Get(index);
}
inline ::Cmd::UserData* ExchangeProfession::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.ExchangeProfession.datas)
  return datas_.Mutable(index);
}
inline ::Cmd::UserData* ExchangeProfession::add_datas() {
  // @@protoc_insertion_point(field_add:Cmd.ExchangeProfession.datas)
  return datas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::UserData >&
ExchangeProfession::datas() const {
  // @@protoc_insertion_point(field_list:Cmd.ExchangeProfession.datas)
  return datas_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::UserData >*
ExchangeProfession::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.ExchangeProfession.datas)
  return &datas_;
}

// repeated .Cmd.UserAttr attrs = 5;
inline int ExchangeProfession::attrs_size() const {
  return attrs_.size();
}
inline void ExchangeProfession::clear_attrs() {
  attrs_.Clear();
}
inline const ::Cmd::UserAttr& ExchangeProfession::attrs(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.ExchangeProfession.attrs)
  return attrs_.Get(index);
}
inline ::Cmd::UserAttr* ExchangeProfession::mutable_attrs(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.ExchangeProfession.attrs)
  return attrs_.Mutable(index);
}
inline ::Cmd::UserAttr* ExchangeProfession::add_attrs() {
  // @@protoc_insertion_point(field_add:Cmd.ExchangeProfession.attrs)
  return attrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::UserAttr >&
ExchangeProfession::attrs() const {
  // @@protoc_insertion_point(field_list:Cmd.ExchangeProfession.attrs)
  return attrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::UserAttr >*
ExchangeProfession::mutable_attrs() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.ExchangeProfession.attrs)
  return &attrs_;
}

// repeated .Cmd.UserAttr pointattrs = 6;
inline int ExchangeProfession::pointattrs_size() const {
  return pointattrs_.size();
}
inline void ExchangeProfession::clear_pointattrs() {
  pointattrs_.Clear();
}
inline const ::Cmd::UserAttr& ExchangeProfession::pointattrs(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.ExchangeProfession.pointattrs)
  return pointattrs_.Get(index);
}
inline ::Cmd::UserAttr* ExchangeProfession::mutable_pointattrs(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.ExchangeProfession.pointattrs)
  return pointattrs_.Mutable(index);
}
inline ::Cmd::UserAttr* ExchangeProfession::add_pointattrs() {
  // @@protoc_insertion_point(field_add:Cmd.ExchangeProfession.pointattrs)
  return pointattrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::UserAttr >&
ExchangeProfession::pointattrs() const {
  // @@protoc_insertion_point(field_list:Cmd.ExchangeProfession.pointattrs)
  return pointattrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::UserAttr >*
ExchangeProfession::mutable_pointattrs() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.ExchangeProfession.pointattrs)
  return &pointattrs_;
}

// optional .Cmd.EProfressionDataType type = 7 [default = ETypeAdvance];
inline bool ExchangeProfession::has_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ExchangeProfession::set_has_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ExchangeProfession::clear_has_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ExchangeProfession::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Cmd::EProfressionDataType ExchangeProfession::type() const {
  // @@protoc_insertion_point(field_get:Cmd.ExchangeProfession.type)
  return static_cast< ::Cmd::EProfressionDataType >(type_);
}
inline void ExchangeProfession::set_type(::Cmd::EProfressionDataType value) {
  assert(::Cmd::EProfressionDataType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ExchangeProfession.type)
}

// -------------------------------------------------------------------

// Scenery

// optional uint32 sceneryid = 1 [default = 0];
inline bool Scenery::has_sceneryid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Scenery::set_has_sceneryid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Scenery::clear_has_sceneryid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Scenery::clear_sceneryid() {
  sceneryid_ = 0u;
  clear_has_sceneryid();
}
inline ::google::protobuf::uint32 Scenery::sceneryid() const {
  // @@protoc_insertion_point(field_get:Cmd.Scenery.sceneryid)
  return sceneryid_;
}
inline void Scenery::set_sceneryid(::google::protobuf::uint32 value) {
  set_has_sceneryid();
  sceneryid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.Scenery.sceneryid)
}

// optional uint32 anglez = 2 [default = 0];
inline bool Scenery::has_anglez() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Scenery::set_has_anglez() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Scenery::clear_has_anglez() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Scenery::clear_anglez() {
  anglez_ = 0u;
  clear_has_anglez();
}
inline ::google::protobuf::uint32 Scenery::anglez() const {
  // @@protoc_insertion_point(field_get:Cmd.Scenery.anglez)
  return anglez_;
}
inline void Scenery::set_anglez(::google::protobuf::uint32 value) {
  set_has_anglez();
  anglez_ = value;
  // @@protoc_insertion_point(field_set:Cmd.Scenery.anglez)
}

// optional uint64 charid = 3 [default = 0];
inline bool Scenery::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Scenery::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Scenery::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Scenery::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 Scenery::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.Scenery.charid)
  return charid_;
}
inline void Scenery::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.Scenery.charid)
}

// -------------------------------------------------------------------

// SceneryUserCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool SceneryUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SceneryUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SceneryUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SceneryUserCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command SceneryUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.SceneryUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void SceneryUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SceneryUserCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_SCENERY];
inline bool SceneryUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SceneryUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SceneryUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SceneryUserCmd::clear_param() {
  param_ = 58;
  clear_has_param();
}
inline ::Cmd::User2Param SceneryUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.SceneryUserCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void SceneryUserCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SceneryUserCmd.param)
}

// optional uint32 mapid = 3 [default = 0];
inline bool SceneryUserCmd::has_mapid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SceneryUserCmd::set_has_mapid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SceneryUserCmd::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SceneryUserCmd::clear_mapid() {
  mapid_ = 0u;
  clear_has_mapid();
}
inline ::google::protobuf::uint32 SceneryUserCmd::mapid() const {
  // @@protoc_insertion_point(field_get:Cmd.SceneryUserCmd.mapid)
  return mapid_;
}
inline void SceneryUserCmd::set_mapid(::google::protobuf::uint32 value) {
  set_has_mapid();
  mapid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SceneryUserCmd.mapid)
}

// repeated .Cmd.Scenery scenerys = 4;
inline int SceneryUserCmd::scenerys_size() const {
  return scenerys_.size();
}
inline void SceneryUserCmd::clear_scenerys() {
  scenerys_.Clear();
}
inline const ::Cmd::Scenery& SceneryUserCmd::scenerys(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.SceneryUserCmd.scenerys)
  return scenerys_.Get(index);
}
inline ::Cmd::Scenery* SceneryUserCmd::mutable_scenerys(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.SceneryUserCmd.scenerys)
  return scenerys_.Mutable(index);
}
inline ::Cmd::Scenery* SceneryUserCmd::add_scenerys() {
  // @@protoc_insertion_point(field_add:Cmd.SceneryUserCmd.scenerys)
  return scenerys_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::Scenery >&
SceneryUserCmd::scenerys() const {
  // @@protoc_insertion_point(field_list:Cmd.SceneryUserCmd.scenerys)
  return scenerys_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::Scenery >*
SceneryUserCmd::mutable_scenerys() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.SceneryUserCmd.scenerys)
  return &scenerys_;
}

// -------------------------------------------------------------------

// GoMapQuestUserCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool GoMapQuestUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GoMapQuestUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GoMapQuestUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GoMapQuestUserCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command GoMapQuestUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.GoMapQuestUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void GoMapQuestUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GoMapQuestUserCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_GOMAP_QUEST];
inline bool GoMapQuestUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GoMapQuestUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GoMapQuestUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GoMapQuestUserCmd::clear_param() {
  param_ = 59;
  clear_has_param();
}
inline ::Cmd::User2Param GoMapQuestUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.GoMapQuestUserCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void GoMapQuestUserCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GoMapQuestUserCmd.param)
}

// optional uint32 questid = 3 [default = 0];
inline bool GoMapQuestUserCmd::has_questid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GoMapQuestUserCmd::set_has_questid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GoMapQuestUserCmd::clear_has_questid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GoMapQuestUserCmd::clear_questid() {
  questid_ = 0u;
  clear_has_questid();
}
inline ::google::protobuf::uint32 GoMapQuestUserCmd::questid() const {
  // @@protoc_insertion_point(field_get:Cmd.GoMapQuestUserCmd.questid)
  return questid_;
}
inline void GoMapQuestUserCmd::set_questid(::google::protobuf::uint32 value) {
  set_has_questid();
  questid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GoMapQuestUserCmd.questid)
}

// -------------------------------------------------------------------

// GoMapFollowUserCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool GoMapFollowUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GoMapFollowUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GoMapFollowUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GoMapFollowUserCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command GoMapFollowUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.GoMapFollowUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void GoMapFollowUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GoMapFollowUserCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_GOMAP_FOLLOW];
inline bool GoMapFollowUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GoMapFollowUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GoMapFollowUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GoMapFollowUserCmd::clear_param() {
  param_ = 60;
  clear_has_param();
}
inline ::Cmd::User2Param GoMapFollowUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.GoMapFollowUserCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void GoMapFollowUserCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GoMapFollowUserCmd.param)
}

// optional uint32 mapid = 3 [default = 0];
inline bool GoMapFollowUserCmd::has_mapid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GoMapFollowUserCmd::set_has_mapid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GoMapFollowUserCmd::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GoMapFollowUserCmd::clear_mapid() {
  mapid_ = 0u;
  clear_has_mapid();
}
inline ::google::protobuf::uint32 GoMapFollowUserCmd::mapid() const {
  // @@protoc_insertion_point(field_get:Cmd.GoMapFollowUserCmd.mapid)
  return mapid_;
}
inline void GoMapFollowUserCmd::set_mapid(::google::protobuf::uint32 value) {
  set_has_mapid();
  mapid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GoMapFollowUserCmd.mapid)
}

// optional uint64 charid = 4 [default = 0];
inline bool GoMapFollowUserCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GoMapFollowUserCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GoMapFollowUserCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GoMapFollowUserCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 GoMapFollowUserCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.GoMapFollowUserCmd.charid)
  return charid_;
}
inline void GoMapFollowUserCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GoMapFollowUserCmd.charid)
}

// -------------------------------------------------------------------

// UserAutoHitCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool UserAutoHitCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserAutoHitCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserAutoHitCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserAutoHitCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command UserAutoHitCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.UserAutoHitCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void UserAutoHitCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserAutoHitCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_AUTOHIT];
inline bool UserAutoHitCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserAutoHitCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserAutoHitCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserAutoHitCmd::clear_param() {
  param_ = 61;
  clear_has_param();
}
inline ::Cmd::User2Param UserAutoHitCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.UserAutoHitCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void UserAutoHitCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserAutoHitCmd.param)
}

// optional uint64 charid = 3 [default = 0];
inline bool UserAutoHitCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserAutoHitCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserAutoHitCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserAutoHitCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 UserAutoHitCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.UserAutoHitCmd.charid)
  return charid_;
}
inline void UserAutoHitCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserAutoHitCmd.charid)
}

// -------------------------------------------------------------------

// UploadSceneryPhotoUserCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool UploadSceneryPhotoUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UploadSceneryPhotoUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UploadSceneryPhotoUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UploadSceneryPhotoUserCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command UploadSceneryPhotoUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.UploadSceneryPhotoUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void UploadSceneryPhotoUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UploadSceneryPhotoUserCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_UPLOAD_SCENERY_PHOTO];
inline bool UploadSceneryPhotoUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UploadSceneryPhotoUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UploadSceneryPhotoUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UploadSceneryPhotoUserCmd::clear_param() {
  param_ = 62;
  clear_has_param();
}
inline ::Cmd::User2Param UploadSceneryPhotoUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.UploadSceneryPhotoUserCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void UploadSceneryPhotoUserCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UploadSceneryPhotoUserCmd.param)
}

// optional .Cmd.EAlbumType type = 3 [default = EALBUMTYPE_SCENERY];
inline bool UploadSceneryPhotoUserCmd::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UploadSceneryPhotoUserCmd::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UploadSceneryPhotoUserCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UploadSceneryPhotoUserCmd::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::Cmd::EAlbumType UploadSceneryPhotoUserCmd::type() const {
  // @@protoc_insertion_point(field_get:Cmd.UploadSceneryPhotoUserCmd.type)
  return static_cast< ::Cmd::EAlbumType >(type_);
}
inline void UploadSceneryPhotoUserCmd::set_type(::Cmd::EAlbumType value) {
  assert(::Cmd::EAlbumType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UploadSceneryPhotoUserCmd.type)
}

// optional uint32 sceneryid = 4;
inline bool UploadSceneryPhotoUserCmd::has_sceneryid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UploadSceneryPhotoUserCmd::set_has_sceneryid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UploadSceneryPhotoUserCmd::clear_has_sceneryid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UploadSceneryPhotoUserCmd::clear_sceneryid() {
  sceneryid_ = 0u;
  clear_has_sceneryid();
}
inline ::google::protobuf::uint32 UploadSceneryPhotoUserCmd::sceneryid() const {
  // @@protoc_insertion_point(field_get:Cmd.UploadSceneryPhotoUserCmd.sceneryid)
  return sceneryid_;
}
inline void UploadSceneryPhotoUserCmd::set_sceneryid(::google::protobuf::uint32 value) {
  set_has_sceneryid();
  sceneryid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UploadSceneryPhotoUserCmd.sceneryid)
}

// optional string policy = 5;
inline bool UploadSceneryPhotoUserCmd::has_policy() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UploadSceneryPhotoUserCmd::set_has_policy() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UploadSceneryPhotoUserCmd::clear_has_policy() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UploadSceneryPhotoUserCmd::clear_policy() {
  if (policy_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    policy_->clear();
  }
  clear_has_policy();
}
inline const ::std::string& UploadSceneryPhotoUserCmd::policy() const {
  // @@protoc_insertion_point(field_get:Cmd.UploadSceneryPhotoUserCmd.policy)
  return *policy_;
}
inline void UploadSceneryPhotoUserCmd::set_policy(const ::std::string& value) {
  set_has_policy();
  if (policy_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    policy_ = new ::std::string;
  }
  policy_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.UploadSceneryPhotoUserCmd.policy)
}
inline void UploadSceneryPhotoUserCmd::set_policy(const char* value) {
  set_has_policy();
  if (policy_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    policy_ = new ::std::string;
  }
  policy_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.UploadSceneryPhotoUserCmd.policy)
}
inline void UploadSceneryPhotoUserCmd::set_policy(const char* value, size_t size) {
  set_has_policy();
  if (policy_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    policy_ = new ::std::string;
  }
  policy_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.UploadSceneryPhotoUserCmd.policy)
}
inline ::std::string* UploadSceneryPhotoUserCmd::mutable_policy() {
  set_has_policy();
  if (policy_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    policy_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.UploadSceneryPhotoUserCmd.policy)
  return policy_;
}
inline ::std::string* UploadSceneryPhotoUserCmd::release_policy() {
  clear_has_policy();
  if (policy_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = policy_;
    policy_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UploadSceneryPhotoUserCmd::set_allocated_policy(::std::string* policy) {
  if (policy_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete policy_;
  }
  if (policy) {
    set_has_policy();
    policy_ = policy;
  } else {
    clear_has_policy();
    policy_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.UploadSceneryPhotoUserCmd.policy)
}

// optional string signature = 6;
inline bool UploadSceneryPhotoUserCmd::has_signature() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UploadSceneryPhotoUserCmd::set_has_signature() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UploadSceneryPhotoUserCmd::clear_has_signature() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UploadSceneryPhotoUserCmd::clear_signature() {
  if (signature_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signature_->clear();
  }
  clear_has_signature();
}
inline const ::std::string& UploadSceneryPhotoUserCmd::signature() const {
  // @@protoc_insertion_point(field_get:Cmd.UploadSceneryPhotoUserCmd.signature)
  return *signature_;
}
inline void UploadSceneryPhotoUserCmd::set_signature(const ::std::string& value) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.UploadSceneryPhotoUserCmd.signature)
}
inline void UploadSceneryPhotoUserCmd::set_signature(const char* value) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.UploadSceneryPhotoUserCmd.signature)
}
inline void UploadSceneryPhotoUserCmd::set_signature(const char* value, size_t size) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signature_ = new ::std::string;
  }
  signature_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.UploadSceneryPhotoUserCmd.signature)
}
inline ::std::string* UploadSceneryPhotoUserCmd::mutable_signature() {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signature_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.UploadSceneryPhotoUserCmd.signature)
  return signature_;
}
inline ::std::string* UploadSceneryPhotoUserCmd::release_signature() {
  clear_has_signature();
  if (signature_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = signature_;
    signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UploadSceneryPhotoUserCmd::set_allocated_signature(::std::string* signature) {
  if (signature_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete signature_;
  }
  if (signature) {
    set_has_signature();
    signature_ = signature;
  } else {
    clear_has_signature();
    signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.UploadSceneryPhotoUserCmd.signature)
}

// -------------------------------------------------------------------

// UpyunUrl

// optional .Cmd.EAlbumType type = 1 [default = EALBUMTYPE_SCENERY];
inline bool UpyunUrl::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpyunUrl::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpyunUrl::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpyunUrl::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::Cmd::EAlbumType UpyunUrl::type() const {
  // @@protoc_insertion_point(field_get:Cmd.UpyunUrl.type)
  return static_cast< ::Cmd::EAlbumType >(type_);
}
inline void UpyunUrl::set_type(::Cmd::EAlbumType value) {
  assert(::Cmd::EAlbumType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UpyunUrl.type)
}

// optional string char_url = 2;
inline bool UpyunUrl::has_char_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpyunUrl::set_has_char_url() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpyunUrl::clear_has_char_url() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpyunUrl::clear_char_url() {
  if (char_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    char_url_->clear();
  }
  clear_has_char_url();
}
inline const ::std::string& UpyunUrl::char_url() const {
  // @@protoc_insertion_point(field_get:Cmd.UpyunUrl.char_url)
  return *char_url_;
}
inline void UpyunUrl::set_char_url(const ::std::string& value) {
  set_has_char_url();
  if (char_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    char_url_ = new ::std::string;
  }
  char_url_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.UpyunUrl.char_url)
}
inline void UpyunUrl::set_char_url(const char* value) {
  set_has_char_url();
  if (char_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    char_url_ = new ::std::string;
  }
  char_url_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.UpyunUrl.char_url)
}
inline void UpyunUrl::set_char_url(const char* value, size_t size) {
  set_has_char_url();
  if (char_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    char_url_ = new ::std::string;
  }
  char_url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.UpyunUrl.char_url)
}
inline ::std::string* UpyunUrl::mutable_char_url() {
  set_has_char_url();
  if (char_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    char_url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.UpyunUrl.char_url)
  return char_url_;
}
inline ::std::string* UpyunUrl::release_char_url() {
  clear_has_char_url();
  if (char_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = char_url_;
    char_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UpyunUrl::set_allocated_char_url(::std::string* char_url) {
  if (char_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete char_url_;
  }
  if (char_url) {
    set_has_char_url();
    char_url_ = char_url;
  } else {
    clear_has_char_url();
    char_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.UpyunUrl.char_url)
}

// optional string acc_url = 3;
inline bool UpyunUrl::has_acc_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UpyunUrl::set_has_acc_url() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UpyunUrl::clear_has_acc_url() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UpyunUrl::clear_acc_url() {
  if (acc_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    acc_url_->clear();
  }
  clear_has_acc_url();
}
inline const ::std::string& UpyunUrl::acc_url() const {
  // @@protoc_insertion_point(field_get:Cmd.UpyunUrl.acc_url)
  return *acc_url_;
}
inline void UpyunUrl::set_acc_url(const ::std::string& value) {
  set_has_acc_url();
  if (acc_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    acc_url_ = new ::std::string;
  }
  acc_url_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.UpyunUrl.acc_url)
}
inline void UpyunUrl::set_acc_url(const char* value) {
  set_has_acc_url();
  if (acc_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    acc_url_ = new ::std::string;
  }
  acc_url_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.UpyunUrl.acc_url)
}
inline void UpyunUrl::set_acc_url(const char* value, size_t size) {
  set_has_acc_url();
  if (acc_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    acc_url_ = new ::std::string;
  }
  acc_url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.UpyunUrl.acc_url)
}
inline ::std::string* UpyunUrl::mutable_acc_url() {
  set_has_acc_url();
  if (acc_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    acc_url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.UpyunUrl.acc_url)
  return acc_url_;
}
inline ::std::string* UpyunUrl::release_acc_url() {
  clear_has_acc_url();
  if (acc_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = acc_url_;
    acc_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UpyunUrl::set_allocated_acc_url(::std::string* acc_url) {
  if (acc_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete acc_url_;
  }
  if (acc_url) {
    set_has_acc_url();
    acc_url_ = acc_url;
  } else {
    clear_has_acc_url();
    acc_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.UpyunUrl.acc_url)
}

// -------------------------------------------------------------------

// DownloadSceneryPhotoUserCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool DownloadSceneryPhotoUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DownloadSceneryPhotoUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DownloadSceneryPhotoUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DownloadSceneryPhotoUserCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command DownloadSceneryPhotoUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.DownloadSceneryPhotoUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void DownloadSceneryPhotoUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DownloadSceneryPhotoUserCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_DOWNLOAD_SCENERY_PHOTO];
inline bool DownloadSceneryPhotoUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DownloadSceneryPhotoUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DownloadSceneryPhotoUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DownloadSceneryPhotoUserCmd::clear_param() {
  param_ = 80;
  clear_has_param();
}
inline ::Cmd::User2Param DownloadSceneryPhotoUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.DownloadSceneryPhotoUserCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void DownloadSceneryPhotoUserCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DownloadSceneryPhotoUserCmd.param)
}

// repeated .Cmd.UpyunUrl urls = 3;
inline int DownloadSceneryPhotoUserCmd::urls_size() const {
  return urls_.size();
}
inline void DownloadSceneryPhotoUserCmd::clear_urls() {
  urls_.Clear();
}
inline const ::Cmd::UpyunUrl& DownloadSceneryPhotoUserCmd::urls(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.DownloadSceneryPhotoUserCmd.urls)
  return urls_.Get(index);
}
inline ::Cmd::UpyunUrl* DownloadSceneryPhotoUserCmd::mutable_urls(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.DownloadSceneryPhotoUserCmd.urls)
  return urls_.Mutable(index);
}
inline ::Cmd::UpyunUrl* DownloadSceneryPhotoUserCmd::add_urls() {
  // @@protoc_insertion_point(field_add:Cmd.DownloadSceneryPhotoUserCmd.urls)
  return urls_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::UpyunUrl >&
DownloadSceneryPhotoUserCmd::urls() const {
  // @@protoc_insertion_point(field_list:Cmd.DownloadSceneryPhotoUserCmd.urls)
  return urls_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::UpyunUrl >*
DownloadSceneryPhotoUserCmd::mutable_urls() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.DownloadSceneryPhotoUserCmd.urls)
  return &urls_;
}

// -------------------------------------------------------------------

// QueryMapArea

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool QueryMapArea::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryMapArea::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryMapArea::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryMapArea::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command QueryMapArea::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryMapArea.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void QueryMapArea::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryMapArea.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_QUERY_MAPAREA];
inline bool QueryMapArea::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryMapArea::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryMapArea::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryMapArea::clear_param() {
  param_ = 63;
  clear_has_param();
}
inline ::Cmd::User2Param QueryMapArea::param() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryMapArea.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void QueryMapArea::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryMapArea.param)
}

// repeated uint32 areas = 3;
inline int QueryMapArea::areas_size() const {
  return areas_.size();
}
inline void QueryMapArea::clear_areas() {
  areas_.Clear();
}
inline ::google::protobuf::uint32 QueryMapArea::areas(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.QueryMapArea.areas)
  return areas_.Get(index);
}
inline void QueryMapArea::set_areas(int index, ::google::protobuf::uint32 value) {
  areas_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.QueryMapArea.areas)
}
inline void QueryMapArea::add_areas(::google::protobuf::uint32 value) {
  areas_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.QueryMapArea.areas)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
QueryMapArea::areas() const {
  // @@protoc_insertion_point(field_list:Cmd.QueryMapArea.areas)
  return areas_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
QueryMapArea::mutable_areas() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.QueryMapArea.areas)
  return &areas_;
}

// -------------------------------------------------------------------

// NewMapAreaNtf

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool NewMapAreaNtf::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NewMapAreaNtf::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NewMapAreaNtf::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NewMapAreaNtf::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command NewMapAreaNtf::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.NewMapAreaNtf.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void NewMapAreaNtf::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NewMapAreaNtf.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_NEW_MAPAREA];
inline bool NewMapAreaNtf::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NewMapAreaNtf::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NewMapAreaNtf::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NewMapAreaNtf::clear_param() {
  param_ = 64;
  clear_has_param();
}
inline ::Cmd::User2Param NewMapAreaNtf::param() const {
  // @@protoc_insertion_point(field_get:Cmd.NewMapAreaNtf.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void NewMapAreaNtf::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NewMapAreaNtf.param)
}

// optional uint32 area = 3 [default = 0];
inline bool NewMapAreaNtf::has_area() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NewMapAreaNtf::set_has_area() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NewMapAreaNtf::clear_has_area() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NewMapAreaNtf::clear_area() {
  area_ = 0u;
  clear_has_area();
}
inline ::google::protobuf::uint32 NewMapAreaNtf::area() const {
  // @@protoc_insertion_point(field_get:Cmd.NewMapAreaNtf.area)
  return area_;
}
inline void NewMapAreaNtf::set_area(::google::protobuf::uint32 value) {
  set_has_area();
  area_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NewMapAreaNtf.area)
}

// -------------------------------------------------------------------

// BuffForeverCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool BuffForeverCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuffForeverCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuffForeverCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuffForeverCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command BuffForeverCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.BuffForeverCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void BuffForeverCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BuffForeverCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_FOREVER_BUFF];
inline bool BuffForeverCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuffForeverCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuffForeverCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuffForeverCmd::clear_param() {
  param_ = 66;
  clear_has_param();
}
inline ::Cmd::User2Param BuffForeverCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.BuffForeverCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void BuffForeverCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BuffForeverCmd.param)
}

// repeated .Cmd.BufferData buff = 3;
inline int BuffForeverCmd::buff_size() const {
  return buff_.size();
}
inline void BuffForeverCmd::clear_buff() {
  buff_.Clear();
}
inline const ::Cmd::BufferData& BuffForeverCmd::buff(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BuffForeverCmd.buff)
  return buff_.Get(index);
}
inline ::Cmd::BufferData* BuffForeverCmd::mutable_buff(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BuffForeverCmd.buff)
  return buff_.Mutable(index);
}
inline ::Cmd::BufferData* BuffForeverCmd::add_buff() {
  // @@protoc_insertion_point(field_add:Cmd.BuffForeverCmd.buff)
  return buff_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::BufferData >&
BuffForeverCmd::buff() const {
  // @@protoc_insertion_point(field_list:Cmd.BuffForeverCmd.buff)
  return buff_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::BufferData >*
BuffForeverCmd::mutable_buff() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BuffForeverCmd.buff)
  return &buff_;
}

// -------------------------------------------------------------------

// InviteJoinHandsUserCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool InviteJoinHandsUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InviteJoinHandsUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InviteJoinHandsUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InviteJoinHandsUserCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command InviteJoinHandsUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.InviteJoinHandsUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void InviteJoinHandsUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.InviteJoinHandsUserCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_INVITE_JOIN_HANDS];
inline bool InviteJoinHandsUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InviteJoinHandsUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InviteJoinHandsUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InviteJoinHandsUserCmd::clear_param() {
  param_ = 67;
  clear_has_param();
}
inline ::Cmd::User2Param InviteJoinHandsUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.InviteJoinHandsUserCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void InviteJoinHandsUserCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.InviteJoinHandsUserCmd.param)
}

// optional uint64 charid = 3 [default = 0];
inline bool InviteJoinHandsUserCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InviteJoinHandsUserCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InviteJoinHandsUserCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InviteJoinHandsUserCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 InviteJoinHandsUserCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.InviteJoinHandsUserCmd.charid)
  return charid_;
}
inline void InviteJoinHandsUserCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.InviteJoinHandsUserCmd.charid)
}

// optional uint64 masterid = 4 [default = 0];
inline bool InviteJoinHandsUserCmd::has_masterid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void InviteJoinHandsUserCmd::set_has_masterid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void InviteJoinHandsUserCmd::clear_has_masterid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void InviteJoinHandsUserCmd::clear_masterid() {
  masterid_ = GOOGLE_ULONGLONG(0);
  clear_has_masterid();
}
inline ::google::protobuf::uint64 InviteJoinHandsUserCmd::masterid() const {
  // @@protoc_insertion_point(field_get:Cmd.InviteJoinHandsUserCmd.masterid)
  return masterid_;
}
inline void InviteJoinHandsUserCmd::set_masterid(::google::protobuf::uint64 value) {
  set_has_masterid();
  masterid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.InviteJoinHandsUserCmd.masterid)
}

// optional uint32 time = 5 [default = 0];
inline bool InviteJoinHandsUserCmd::has_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void InviteJoinHandsUserCmd::set_has_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void InviteJoinHandsUserCmd::clear_has_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void InviteJoinHandsUserCmd::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 InviteJoinHandsUserCmd::time() const {
  // @@protoc_insertion_point(field_get:Cmd.InviteJoinHandsUserCmd.time)
  return time_;
}
inline void InviteJoinHandsUserCmd::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.InviteJoinHandsUserCmd.time)
}

// optional string mastername = 6;
inline bool InviteJoinHandsUserCmd::has_mastername() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void InviteJoinHandsUserCmd::set_has_mastername() {
  _has_bits_[0] |= 0x00000020u;
}
inline void InviteJoinHandsUserCmd::clear_has_mastername() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void InviteJoinHandsUserCmd::clear_mastername() {
  if (mastername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mastername_->clear();
  }
  clear_has_mastername();
}
inline const ::std::string& InviteJoinHandsUserCmd::mastername() const {
  // @@protoc_insertion_point(field_get:Cmd.InviteJoinHandsUserCmd.mastername)
  return *mastername_;
}
inline void InviteJoinHandsUserCmd::set_mastername(const ::std::string& value) {
  set_has_mastername();
  if (mastername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mastername_ = new ::std::string;
  }
  mastername_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.InviteJoinHandsUserCmd.mastername)
}
inline void InviteJoinHandsUserCmd::set_mastername(const char* value) {
  set_has_mastername();
  if (mastername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mastername_ = new ::std::string;
  }
  mastername_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.InviteJoinHandsUserCmd.mastername)
}
inline void InviteJoinHandsUserCmd::set_mastername(const char* value, size_t size) {
  set_has_mastername();
  if (mastername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mastername_ = new ::std::string;
  }
  mastername_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.InviteJoinHandsUserCmd.mastername)
}
inline ::std::string* InviteJoinHandsUserCmd::mutable_mastername() {
  set_has_mastername();
  if (mastername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mastername_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.InviteJoinHandsUserCmd.mastername)
  return mastername_;
}
inline ::std::string* InviteJoinHandsUserCmd::release_mastername() {
  clear_has_mastername();
  if (mastername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mastername_;
    mastername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void InviteJoinHandsUserCmd::set_allocated_mastername(::std::string* mastername) {
  if (mastername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mastername_;
  }
  if (mastername) {
    set_has_mastername();
    mastername_ = mastername;
  } else {
    clear_has_mastername();
    mastername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.InviteJoinHandsUserCmd.mastername)
}

// optional bytes sign = 7;
inline bool InviteJoinHandsUserCmd::has_sign() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void InviteJoinHandsUserCmd::set_has_sign() {
  _has_bits_[0] |= 0x00000040u;
}
inline void InviteJoinHandsUserCmd::clear_has_sign() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void InviteJoinHandsUserCmd::clear_sign() {
  if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_->clear();
  }
  clear_has_sign();
}
inline const ::std::string& InviteJoinHandsUserCmd::sign() const {
  // @@protoc_insertion_point(field_get:Cmd.InviteJoinHandsUserCmd.sign)
  return *sign_;
}
inline void InviteJoinHandsUserCmd::set_sign(const ::std::string& value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.InviteJoinHandsUserCmd.sign)
}
inline void InviteJoinHandsUserCmd::set_sign(const char* value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.InviteJoinHandsUserCmd.sign)
}
inline void InviteJoinHandsUserCmd::set_sign(const void* value, size_t size) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_ = new ::std::string;
  }
  sign_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.InviteJoinHandsUserCmd.sign)
}
inline ::std::string* InviteJoinHandsUserCmd::mutable_sign() {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.InviteJoinHandsUserCmd.sign)
  return sign_;
}
inline ::std::string* InviteJoinHandsUserCmd::release_sign() {
  clear_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sign_;
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void InviteJoinHandsUserCmd::set_allocated_sign(::std::string* sign) {
  if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sign_;
  }
  if (sign) {
    set_has_sign();
    sign_ = sign;
  } else {
    clear_has_sign();
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.InviteJoinHandsUserCmd.sign)
}

// -------------------------------------------------------------------

// BreakUpHandsUserCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool BreakUpHandsUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BreakUpHandsUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BreakUpHandsUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BreakUpHandsUserCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command BreakUpHandsUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.BreakUpHandsUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void BreakUpHandsUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BreakUpHandsUserCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_BREAK_UP_HANDS];
inline bool BreakUpHandsUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BreakUpHandsUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BreakUpHandsUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BreakUpHandsUserCmd::clear_param() {
  param_ = 68;
  clear_has_param();
}
inline ::Cmd::User2Param BreakUpHandsUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.BreakUpHandsUserCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void BreakUpHandsUserCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BreakUpHandsUserCmd.param)
}

// -------------------------------------------------------------------

// HandStatusUserCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool HandStatusUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HandStatusUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HandStatusUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HandStatusUserCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command HandStatusUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.HandStatusUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void HandStatusUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.HandStatusUserCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_HANDSTATUS];
inline bool HandStatusUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HandStatusUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HandStatusUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HandStatusUserCmd::clear_param() {
  param_ = 95;
  clear_has_param();
}
inline ::Cmd::User2Param HandStatusUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.HandStatusUserCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void HandStatusUserCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.HandStatusUserCmd.param)
}

// optional bool build = 3 [default = true];
inline bool HandStatusUserCmd::has_build() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HandStatusUserCmd::set_has_build() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HandStatusUserCmd::clear_has_build() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HandStatusUserCmd::clear_build() {
  build_ = true;
  clear_has_build();
}
inline bool HandStatusUserCmd::build() const {
  // @@protoc_insertion_point(field_get:Cmd.HandStatusUserCmd.build)
  return build_;
}
inline void HandStatusUserCmd::set_build(bool value) {
  set_has_build();
  build_ = value;
  // @@protoc_insertion_point(field_set:Cmd.HandStatusUserCmd.build)
}

// optional uint64 masterid = 4 [default = 0];
inline bool HandStatusUserCmd::has_masterid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HandStatusUserCmd::set_has_masterid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HandStatusUserCmd::clear_has_masterid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HandStatusUserCmd::clear_masterid() {
  masterid_ = GOOGLE_ULONGLONG(0);
  clear_has_masterid();
}
inline ::google::protobuf::uint64 HandStatusUserCmd::masterid() const {
  // @@protoc_insertion_point(field_get:Cmd.HandStatusUserCmd.masterid)
  return masterid_;
}
inline void HandStatusUserCmd::set_masterid(::google::protobuf::uint64 value) {
  set_has_masterid();
  masterid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.HandStatusUserCmd.masterid)
}

// optional uint64 followid = 5 [default = 0];
inline bool HandStatusUserCmd::has_followid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void HandStatusUserCmd::set_has_followid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void HandStatusUserCmd::clear_has_followid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void HandStatusUserCmd::clear_followid() {
  followid_ = GOOGLE_ULONGLONG(0);
  clear_has_followid();
}
inline ::google::protobuf::uint64 HandStatusUserCmd::followid() const {
  // @@protoc_insertion_point(field_get:Cmd.HandStatusUserCmd.followid)
  return followid_;
}
inline void HandStatusUserCmd::set_followid(::google::protobuf::uint64 value) {
  set_has_followid();
  followid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.HandStatusUserCmd.followid)
}

// optional uint32 type = 6 [default = 0];
inline bool HandStatusUserCmd::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void HandStatusUserCmd::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void HandStatusUserCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void HandStatusUserCmd::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 HandStatusUserCmd::type() const {
  // @@protoc_insertion_point(field_get:Cmd.HandStatusUserCmd.type)
  return type_;
}
inline void HandStatusUserCmd::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.HandStatusUserCmd.type)
}

// -------------------------------------------------------------------

// QueryShow

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool QueryShow::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryShow::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryShow::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryShow::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command QueryShow::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryShow.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void QueryShow::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryShow.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_QUERY_ACTION];
inline bool QueryShow::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryShow::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryShow::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryShow::clear_param() {
  param_ = 69;
  clear_has_param();
}
inline ::Cmd::User2Param QueryShow::param() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryShow.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void QueryShow::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryShow.param)
}

// repeated uint32 actionid = 3;
inline int QueryShow::actionid_size() const {
  return actionid_.size();
}
inline void QueryShow::clear_actionid() {
  actionid_.Clear();
}
inline ::google::protobuf::uint32 QueryShow::actionid(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.QueryShow.actionid)
  return actionid_.Get(index);
}
inline void QueryShow::set_actionid(int index, ::google::protobuf::uint32 value) {
  actionid_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.QueryShow.actionid)
}
inline void QueryShow::add_actionid(::google::protobuf::uint32 value) {
  actionid_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.QueryShow.actionid)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
QueryShow::actionid() const {
  // @@protoc_insertion_point(field_list:Cmd.QueryShow.actionid)
  return actionid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
QueryShow::mutable_actionid() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.QueryShow.actionid)
  return &actionid_;
}

// repeated uint32 expression = 4;
inline int QueryShow::expression_size() const {
  return expression_.size();
}
inline void QueryShow::clear_expression() {
  expression_.Clear();
}
inline ::google::protobuf::uint32 QueryShow::expression(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.QueryShow.expression)
  return expression_.Get(index);
}
inline void QueryShow::set_expression(int index, ::google::protobuf::uint32 value) {
  expression_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.QueryShow.expression)
}
inline void QueryShow::add_expression(::google::protobuf::uint32 value) {
  expression_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.QueryShow.expression)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
QueryShow::expression() const {
  // @@protoc_insertion_point(field_list:Cmd.QueryShow.expression)
  return expression_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
QueryShow::mutable_expression() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.QueryShow.expression)
  return &expression_;
}

// -------------------------------------------------------------------

// MusicItem

// optional uint64 charid = 1 [default = 0];
inline bool MusicItem::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MusicItem::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MusicItem::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MusicItem::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 MusicItem::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.MusicItem.charid)
  return charid_;
}
inline void MusicItem::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MusicItem.charid)
}

// optional uint32 demandtime = 2 [default = 0];
inline bool MusicItem::has_demandtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MusicItem::set_has_demandtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MusicItem::clear_has_demandtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MusicItem::clear_demandtime() {
  demandtime_ = 0u;
  clear_has_demandtime();
}
inline ::google::protobuf::uint32 MusicItem::demandtime() const {
  // @@protoc_insertion_point(field_get:Cmd.MusicItem.demandtime)
  return demandtime_;
}
inline void MusicItem::set_demandtime(::google::protobuf::uint32 value) {
  set_has_demandtime();
  demandtime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MusicItem.demandtime)
}

// optional uint32 mapid = 3 [default = 0];
inline bool MusicItem::has_mapid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MusicItem::set_has_mapid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MusicItem::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MusicItem::clear_mapid() {
  mapid_ = 0u;
  clear_has_mapid();
}
inline ::google::protobuf::uint32 MusicItem::mapid() const {
  // @@protoc_insertion_point(field_get:Cmd.MusicItem.mapid)
  return mapid_;
}
inline void MusicItem::set_mapid(::google::protobuf::uint32 value) {
  set_has_mapid();
  mapid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MusicItem.mapid)
}

// optional uint32 npcid = 4 [default = 0];
inline bool MusicItem::has_npcid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MusicItem::set_has_npcid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MusicItem::clear_has_npcid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MusicItem::clear_npcid() {
  npcid_ = 0u;
  clear_has_npcid();
}
inline ::google::protobuf::uint32 MusicItem::npcid() const {
  // @@protoc_insertion_point(field_get:Cmd.MusicItem.npcid)
  return npcid_;
}
inline void MusicItem::set_npcid(::google::protobuf::uint32 value) {
  set_has_npcid();
  npcid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MusicItem.npcid)
}

// optional uint32 musicid = 5 [default = 0];
inline bool MusicItem::has_musicid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MusicItem::set_has_musicid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MusicItem::clear_has_musicid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MusicItem::clear_musicid() {
  musicid_ = 0u;
  clear_has_musicid();
}
inline ::google::protobuf::uint32 MusicItem::musicid() const {
  // @@protoc_insertion_point(field_get:Cmd.MusicItem.musicid)
  return musicid_;
}
inline void MusicItem::set_musicid(::google::protobuf::uint32 value) {
  set_has_musicid();
  musicid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MusicItem.musicid)
}

// optional uint32 starttime = 6 [default = 0];
inline bool MusicItem::has_starttime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MusicItem::set_has_starttime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MusicItem::clear_has_starttime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MusicItem::clear_starttime() {
  starttime_ = 0u;
  clear_has_starttime();
}
inline ::google::protobuf::uint32 MusicItem::starttime() const {
  // @@protoc_insertion_point(field_get:Cmd.MusicItem.starttime)
  return starttime_;
}
inline void MusicItem::set_starttime(::google::protobuf::uint32 value) {
  set_has_starttime();
  starttime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MusicItem.starttime)
}

// optional uint32 endtime = 7 [default = 0];
inline bool MusicItem::has_endtime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MusicItem::set_has_endtime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MusicItem::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MusicItem::clear_endtime() {
  endtime_ = 0u;
  clear_has_endtime();
}
inline ::google::protobuf::uint32 MusicItem::endtime() const {
  // @@protoc_insertion_point(field_get:Cmd.MusicItem.endtime)
  return endtime_;
}
inline void MusicItem::set_endtime(::google::protobuf::uint32 value) {
  set_has_endtime();
  endtime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MusicItem.endtime)
}

// optional uint32 status = 8 [default = 0];
inline bool MusicItem::has_status() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MusicItem::set_has_status() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MusicItem::clear_has_status() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MusicItem::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 MusicItem::status() const {
  // @@protoc_insertion_point(field_get:Cmd.MusicItem.status)
  return status_;
}
inline void MusicItem::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MusicItem.status)
}

// optional string name = 9;
inline bool MusicItem::has_name() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MusicItem::set_has_name() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MusicItem::clear_has_name() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MusicItem::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& MusicItem::name() const {
  // @@protoc_insertion_point(field_get:Cmd.MusicItem.name)
  return *name_;
}
inline void MusicItem::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.MusicItem.name)
}
inline void MusicItem::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.MusicItem.name)
}
inline void MusicItem::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.MusicItem.name)
}
inline ::std::string* MusicItem::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.MusicItem.name)
  return name_;
}
inline ::std::string* MusicItem::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MusicItem::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.MusicItem.name)
}

// -------------------------------------------------------------------

// QueryMusicList

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool QueryMusicList::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryMusicList::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryMusicList::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryMusicList::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command QueryMusicList::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryMusicList.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void QueryMusicList::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryMusicList.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_MUSIC_LIST];
inline bool QueryMusicList::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryMusicList::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryMusicList::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryMusicList::clear_param() {
  param_ = 70;
  clear_has_param();
}
inline ::Cmd::User2Param QueryMusicList::param() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryMusicList.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void QueryMusicList::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryMusicList.param)
}

// optional uint64 npcid = 3 [default = 0];
inline bool QueryMusicList::has_npcid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QueryMusicList::set_has_npcid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QueryMusicList::clear_has_npcid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QueryMusicList::clear_npcid() {
  npcid_ = GOOGLE_ULONGLONG(0);
  clear_has_npcid();
}
inline ::google::protobuf::uint64 QueryMusicList::npcid() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryMusicList.npcid)
  return npcid_;
}
inline void QueryMusicList::set_npcid(::google::protobuf::uint64 value) {
  set_has_npcid();
  npcid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryMusicList.npcid)
}

// repeated .Cmd.MusicItem items = 4;
inline int QueryMusicList::items_size() const {
  return items_.size();
}
inline void QueryMusicList::clear_items() {
  items_.Clear();
}
inline const ::Cmd::MusicItem& QueryMusicList::items(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.QueryMusicList.items)
  return items_.Get(index);
}
inline ::Cmd::MusicItem* QueryMusicList::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.QueryMusicList.items)
  return items_.Mutable(index);
}
inline ::Cmd::MusicItem* QueryMusicList::add_items() {
  // @@protoc_insertion_point(field_add:Cmd.QueryMusicList.items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::MusicItem >&
QueryMusicList::items() const {
  // @@protoc_insertion_point(field_list:Cmd.QueryMusicList.items)
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::MusicItem >*
QueryMusicList::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.QueryMusicList.items)
  return &items_;
}

// -------------------------------------------------------------------

// DemandMusic

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool DemandMusic::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DemandMusic::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DemandMusic::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DemandMusic::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command DemandMusic::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.DemandMusic.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void DemandMusic::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DemandMusic.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_MUSIC_DEMAND];
inline bool DemandMusic::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DemandMusic::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DemandMusic::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DemandMusic::clear_param() {
  param_ = 71;
  clear_has_param();
}
inline ::Cmd::User2Param DemandMusic::param() const {
  // @@protoc_insertion_point(field_get:Cmd.DemandMusic.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void DemandMusic::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DemandMusic.param)
}

// optional uint64 npcid = 3 [default = 0];
inline bool DemandMusic::has_npcid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DemandMusic::set_has_npcid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DemandMusic::clear_has_npcid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DemandMusic::clear_npcid() {
  npcid_ = GOOGLE_ULONGLONG(0);
  clear_has_npcid();
}
inline ::google::protobuf::uint64 DemandMusic::npcid() const {
  // @@protoc_insertion_point(field_get:Cmd.DemandMusic.npcid)
  return npcid_;
}
inline void DemandMusic::set_npcid(::google::protobuf::uint64 value) {
  set_has_npcid();
  npcid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DemandMusic.npcid)
}

// optional uint32 musicid = 4 [default = 0];
inline bool DemandMusic::has_musicid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DemandMusic::set_has_musicid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DemandMusic::clear_has_musicid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DemandMusic::clear_musicid() {
  musicid_ = 0u;
  clear_has_musicid();
}
inline ::google::protobuf::uint32 DemandMusic::musicid() const {
  // @@protoc_insertion_point(field_get:Cmd.DemandMusic.musicid)
  return musicid_;
}
inline void DemandMusic::set_musicid(::google::protobuf::uint32 value) {
  set_has_musicid();
  musicid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DemandMusic.musicid)
}

// -------------------------------------------------------------------

// CloseMusicFrame

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool CloseMusicFrame::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CloseMusicFrame::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CloseMusicFrame::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CloseMusicFrame::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command CloseMusicFrame::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.CloseMusicFrame.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void CloseMusicFrame::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CloseMusicFrame.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_MUSIC_CLOSE];
inline bool CloseMusicFrame::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CloseMusicFrame::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CloseMusicFrame::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CloseMusicFrame::clear_param() {
  param_ = 72;
  clear_has_param();
}
inline ::Cmd::User2Param CloseMusicFrame::param() const {
  // @@protoc_insertion_point(field_get:Cmd.CloseMusicFrame.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void CloseMusicFrame::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CloseMusicFrame.param)
}

// -------------------------------------------------------------------

// UploadOkSceneryUserCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool UploadOkSceneryUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UploadOkSceneryUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UploadOkSceneryUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UploadOkSceneryUserCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command UploadOkSceneryUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.UploadOkSceneryUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void UploadOkSceneryUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UploadOkSceneryUserCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_UPLOAD_OK_SCENERY];
inline bool UploadOkSceneryUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UploadOkSceneryUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UploadOkSceneryUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UploadOkSceneryUserCmd::clear_param() {
  param_ = 73;
  clear_has_param();
}
inline ::Cmd::User2Param UploadOkSceneryUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.UploadOkSceneryUserCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void UploadOkSceneryUserCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UploadOkSceneryUserCmd.param)
}

// optional uint32 sceneryid = 3 [default = 0];
inline bool UploadOkSceneryUserCmd::has_sceneryid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UploadOkSceneryUserCmd::set_has_sceneryid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UploadOkSceneryUserCmd::clear_has_sceneryid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UploadOkSceneryUserCmd::clear_sceneryid() {
  sceneryid_ = 0u;
  clear_has_sceneryid();
}
inline ::google::protobuf::uint32 UploadOkSceneryUserCmd::sceneryid() const {
  // @@protoc_insertion_point(field_get:Cmd.UploadOkSceneryUserCmd.sceneryid)
  return sceneryid_;
}
inline void UploadOkSceneryUserCmd::set_sceneryid(::google::protobuf::uint32 value) {
  set_has_sceneryid();
  sceneryid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UploadOkSceneryUserCmd.sceneryid)
}

// optional uint32 status = 4 [default = 0];
inline bool UploadOkSceneryUserCmd::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UploadOkSceneryUserCmd::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UploadOkSceneryUserCmd::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UploadOkSceneryUserCmd::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 UploadOkSceneryUserCmd::status() const {
  // @@protoc_insertion_point(field_get:Cmd.UploadOkSceneryUserCmd.status)
  return status_;
}
inline void UploadOkSceneryUserCmd::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UploadOkSceneryUserCmd.status)
}

// optional uint32 anglez = 5 [default = 0];
inline bool UploadOkSceneryUserCmd::has_anglez() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UploadOkSceneryUserCmd::set_has_anglez() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UploadOkSceneryUserCmd::clear_has_anglez() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UploadOkSceneryUserCmd::clear_anglez() {
  anglez_ = 0u;
  clear_has_anglez();
}
inline ::google::protobuf::uint32 UploadOkSceneryUserCmd::anglez() const {
  // @@protoc_insertion_point(field_get:Cmd.UploadOkSceneryUserCmd.anglez)
  return anglez_;
}
inline void UploadOkSceneryUserCmd::set_anglez(::google::protobuf::uint32 value) {
  set_has_anglez();
  anglez_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UploadOkSceneryUserCmd.anglez)
}

// optional uint32 time = 6 [default = 0];
inline bool UploadOkSceneryUserCmd::has_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UploadOkSceneryUserCmd::set_has_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UploadOkSceneryUserCmd::clear_has_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UploadOkSceneryUserCmd::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 UploadOkSceneryUserCmd::time() const {
  // @@protoc_insertion_point(field_get:Cmd.UploadOkSceneryUserCmd.time)
  return time_;
}
inline void UploadOkSceneryUserCmd::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UploadOkSceneryUserCmd.time)
}

// -------------------------------------------------------------------

// JoinHandsUserCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool JoinHandsUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JoinHandsUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JoinHandsUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JoinHandsUserCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command JoinHandsUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.JoinHandsUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void JoinHandsUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.JoinHandsUserCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_JOIN_HANDS];
inline bool JoinHandsUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JoinHandsUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JoinHandsUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JoinHandsUserCmd::clear_param() {
  param_ = 74;
  clear_has_param();
}
inline ::Cmd::User2Param JoinHandsUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.JoinHandsUserCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void JoinHandsUserCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.JoinHandsUserCmd.param)
}

// optional uint64 masterid = 3 [default = 0];
inline bool JoinHandsUserCmd::has_masterid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JoinHandsUserCmd::set_has_masterid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JoinHandsUserCmd::clear_has_masterid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JoinHandsUserCmd::clear_masterid() {
  masterid_ = GOOGLE_ULONGLONG(0);
  clear_has_masterid();
}
inline ::google::protobuf::uint64 JoinHandsUserCmd::masterid() const {
  // @@protoc_insertion_point(field_get:Cmd.JoinHandsUserCmd.masterid)
  return masterid_;
}
inline void JoinHandsUserCmd::set_masterid(::google::protobuf::uint64 value) {
  set_has_masterid();
  masterid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.JoinHandsUserCmd.masterid)
}

// optional string sign = 4;
inline bool JoinHandsUserCmd::has_sign() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JoinHandsUserCmd::set_has_sign() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JoinHandsUserCmd::clear_has_sign() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JoinHandsUserCmd::clear_sign() {
  if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_->clear();
  }
  clear_has_sign();
}
inline const ::std::string& JoinHandsUserCmd::sign() const {
  // @@protoc_insertion_point(field_get:Cmd.JoinHandsUserCmd.sign)
  return *sign_;
}
inline void JoinHandsUserCmd::set_sign(const ::std::string& value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.JoinHandsUserCmd.sign)
}
inline void JoinHandsUserCmd::set_sign(const char* value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.JoinHandsUserCmd.sign)
}
inline void JoinHandsUserCmd::set_sign(const char* value, size_t size) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_ = new ::std::string;
  }
  sign_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.JoinHandsUserCmd.sign)
}
inline ::std::string* JoinHandsUserCmd::mutable_sign() {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.JoinHandsUserCmd.sign)
  return sign_;
}
inline ::std::string* JoinHandsUserCmd::release_sign() {
  clear_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sign_;
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void JoinHandsUserCmd::set_allocated_sign(::std::string* sign) {
  if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sign_;
  }
  if (sign) {
    set_has_sign();
    sign_ = sign;
  } else {
    clear_has_sign();
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.JoinHandsUserCmd.sign)
}

// optional uint32 time = 5 [default = 0];
inline bool JoinHandsUserCmd::has_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JoinHandsUserCmd::set_has_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JoinHandsUserCmd::clear_has_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JoinHandsUserCmd::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 JoinHandsUserCmd::time() const {
  // @@protoc_insertion_point(field_get:Cmd.JoinHandsUserCmd.time)
  return time_;
}
inline void JoinHandsUserCmd::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.JoinHandsUserCmd.time)
}

// -------------------------------------------------------------------

// TraceItem

// optional uint32 itemid = 1 [default = 0];
inline bool TraceItem::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TraceItem::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TraceItem::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TraceItem::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 TraceItem::itemid() const {
  // @@protoc_insertion_point(field_get:Cmd.TraceItem.itemid)
  return itemid_;
}
inline void TraceItem::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TraceItem.itemid)
}

// optional uint32 monsterid = 2 [default = 0];
inline bool TraceItem::has_monsterid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TraceItem::set_has_monsterid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TraceItem::clear_has_monsterid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TraceItem::clear_monsterid() {
  monsterid_ = 0u;
  clear_has_monsterid();
}
inline ::google::protobuf::uint32 TraceItem::monsterid() const {
  // @@protoc_insertion_point(field_get:Cmd.TraceItem.monsterid)
  return monsterid_;
}
inline void TraceItem::set_monsterid(::google::protobuf::uint32 value) {
  set_has_monsterid();
  monsterid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TraceItem.monsterid)
}

// -------------------------------------------------------------------

// QueryTraceList

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool QueryTraceList::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryTraceList::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryTraceList::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryTraceList::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command QueryTraceList::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryTraceList.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void QueryTraceList::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryTraceList.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_QUERY_TRACE_LIST];
inline bool QueryTraceList::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryTraceList::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryTraceList::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryTraceList::clear_param() {
  param_ = 75;
  clear_has_param();
}
inline ::Cmd::User2Param QueryTraceList::param() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryTraceList.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void QueryTraceList::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryTraceList.param)
}

// repeated .Cmd.TraceItem items = 3;
inline int QueryTraceList::items_size() const {
  return items_.size();
}
inline void QueryTraceList::clear_items() {
  items_.Clear();
}
inline const ::Cmd::TraceItem& QueryTraceList::items(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.QueryTraceList.items)
  return items_.Get(index);
}
inline ::Cmd::TraceItem* QueryTraceList::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.QueryTraceList.items)
  return items_.Mutable(index);
}
inline ::Cmd::TraceItem* QueryTraceList::add_items() {
  // @@protoc_insertion_point(field_add:Cmd.QueryTraceList.items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::TraceItem >&
QueryTraceList::items() const {
  // @@protoc_insertion_point(field_list:Cmd.QueryTraceList.items)
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::TraceItem >*
QueryTraceList::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.QueryTraceList.items)
  return &items_;
}

// -------------------------------------------------------------------

// UpdateTraceList

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool UpdateTraceList::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateTraceList::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateTraceList::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateTraceList::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command UpdateTraceList::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.UpdateTraceList.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void UpdateTraceList::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UpdateTraceList.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_UPDATE_TRACE_LIST];
inline bool UpdateTraceList::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdateTraceList::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdateTraceList::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdateTraceList::clear_param() {
  param_ = 76;
  clear_has_param();
}
inline ::Cmd::User2Param UpdateTraceList::param() const {
  // @@protoc_insertion_point(field_get:Cmd.UpdateTraceList.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void UpdateTraceList::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UpdateTraceList.param)
}

// repeated .Cmd.TraceItem updates = 3;
inline int UpdateTraceList::updates_size() const {
  return updates_.size();
}
inline void UpdateTraceList::clear_updates() {
  updates_.Clear();
}
inline const ::Cmd::TraceItem& UpdateTraceList::updates(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.UpdateTraceList.updates)
  return updates_.Get(index);
}
inline ::Cmd::TraceItem* UpdateTraceList::mutable_updates(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.UpdateTraceList.updates)
  return updates_.Mutable(index);
}
inline ::Cmd::TraceItem* UpdateTraceList::add_updates() {
  // @@protoc_insertion_point(field_add:Cmd.UpdateTraceList.updates)
  return updates_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::TraceItem >&
UpdateTraceList::updates() const {
  // @@protoc_insertion_point(field_list:Cmd.UpdateTraceList.updates)
  return updates_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::TraceItem >*
UpdateTraceList::mutable_updates() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.UpdateTraceList.updates)
  return &updates_;
}

// repeated uint32 dels = 4;
inline int UpdateTraceList::dels_size() const {
  return dels_.size();
}
inline void UpdateTraceList::clear_dels() {
  dels_.Clear();
}
inline ::google::protobuf::uint32 UpdateTraceList::dels(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.UpdateTraceList.dels)
  return dels_.Get(index);
}
inline void UpdateTraceList::set_dels(int index, ::google::protobuf::uint32 value) {
  dels_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.UpdateTraceList.dels)
}
inline void UpdateTraceList::add_dels(::google::protobuf::uint32 value) {
  dels_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.UpdateTraceList.dels)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
UpdateTraceList::dels() const {
  // @@protoc_insertion_point(field_list:Cmd.UpdateTraceList.dels)
  return dels_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
UpdateTraceList::mutable_dels() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.UpdateTraceList.dels)
  return &dels_;
}

// -------------------------------------------------------------------

// SetDirection

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool SetDirection::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SetDirection::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SetDirection::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SetDirection::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command SetDirection::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.SetDirection.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void SetDirection::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SetDirection.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_SET_DIRECTION];
inline bool SetDirection::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SetDirection::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SetDirection::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SetDirection::clear_param() {
  param_ = 77;
  clear_has_param();
}
inline ::Cmd::User2Param SetDirection::param() const {
  // @@protoc_insertion_point(field_get:Cmd.SetDirection.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void SetDirection::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SetDirection.param)
}

// optional uint32 dir = 3 [default = 0];
inline bool SetDirection::has_dir() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SetDirection::set_has_dir() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SetDirection::clear_has_dir() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SetDirection::clear_dir() {
  dir_ = 0u;
  clear_has_dir();
}
inline ::google::protobuf::uint32 SetDirection::dir() const {
  // @@protoc_insertion_point(field_get:Cmd.SetDirection.dir)
  return dir_;
}
inline void SetDirection::set_dir(::google::protobuf::uint32 value) {
  set_has_dir();
  dir_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SetDirection.dir)
}

// -------------------------------------------------------------------

// BattleTimelenUserCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool BattleTimelenUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BattleTimelenUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BattleTimelenUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BattleTimelenUserCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command BattleTimelenUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.BattleTimelenUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void BattleTimelenUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BattleTimelenUserCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_BATTLE_TIMELEN_USER_CMD];
inline bool BattleTimelenUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BattleTimelenUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BattleTimelenUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BattleTimelenUserCmd::clear_param() {
  param_ = 82;
  clear_has_param();
}
inline ::Cmd::User2Param BattleTimelenUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.BattleTimelenUserCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void BattleTimelenUserCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BattleTimelenUserCmd.param)
}

// optional uint32 timelen = 3 [default = 0];
inline bool BattleTimelenUserCmd::has_timelen() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BattleTimelenUserCmd::set_has_timelen() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BattleTimelenUserCmd::clear_has_timelen() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BattleTimelenUserCmd::clear_timelen() {
  timelen_ = 0u;
  clear_has_timelen();
}
inline ::google::protobuf::uint32 BattleTimelenUserCmd::timelen() const {
  // @@protoc_insertion_point(field_get:Cmd.BattleTimelenUserCmd.timelen)
  return timelen_;
}
inline void BattleTimelenUserCmd::set_timelen(::google::protobuf::uint32 value) {
  set_has_timelen();
  timelen_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BattleTimelenUserCmd.timelen)
}

// optional uint32 totaltime = 4 [default = 0];
inline bool BattleTimelenUserCmd::has_totaltime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BattleTimelenUserCmd::set_has_totaltime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BattleTimelenUserCmd::clear_has_totaltime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BattleTimelenUserCmd::clear_totaltime() {
  totaltime_ = 0u;
  clear_has_totaltime();
}
inline ::google::protobuf::uint32 BattleTimelenUserCmd::totaltime() const {
  // @@protoc_insertion_point(field_get:Cmd.BattleTimelenUserCmd.totaltime)
  return totaltime_;
}
inline void BattleTimelenUserCmd::set_totaltime(::google::protobuf::uint32 value) {
  set_has_totaltime();
  totaltime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BattleTimelenUserCmd.totaltime)
}

// optional uint32 musictime = 5 [default = 0];
inline bool BattleTimelenUserCmd::has_musictime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BattleTimelenUserCmd::set_has_musictime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BattleTimelenUserCmd::clear_has_musictime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BattleTimelenUserCmd::clear_musictime() {
  musictime_ = 0u;
  clear_has_musictime();
}
inline ::google::protobuf::uint32 BattleTimelenUserCmd::musictime() const {
  // @@protoc_insertion_point(field_get:Cmd.BattleTimelenUserCmd.musictime)
  return musictime_;
}
inline void BattleTimelenUserCmd::set_musictime(::google::protobuf::uint32 value) {
  set_has_musictime();
  musictime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BattleTimelenUserCmd.musictime)
}

// optional uint32 tutortime = 6 [default = 0];
inline bool BattleTimelenUserCmd::has_tutortime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BattleTimelenUserCmd::set_has_tutortime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BattleTimelenUserCmd::clear_has_tutortime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BattleTimelenUserCmd::clear_tutortime() {
  tutortime_ = 0u;
  clear_has_tutortime();
}
inline ::google::protobuf::uint32 BattleTimelenUserCmd::tutortime() const {
  // @@protoc_insertion_point(field_get:Cmd.BattleTimelenUserCmd.tutortime)
  return tutortime_;
}
inline void BattleTimelenUserCmd::set_tutortime(::google::protobuf::uint32 value) {
  set_has_tutortime();
  tutortime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BattleTimelenUserCmd.tutortime)
}

// optional .Cmd.EBattleStatus estatus = 7 [default = EBATTLESTATUS_EASY];
inline bool BattleTimelenUserCmd::has_estatus() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BattleTimelenUserCmd::set_has_estatus() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BattleTimelenUserCmd::clear_has_estatus() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BattleTimelenUserCmd::clear_estatus() {
  estatus_ = 1;
  clear_has_estatus();
}
inline ::Cmd::EBattleStatus BattleTimelenUserCmd::estatus() const {
  // @@protoc_insertion_point(field_get:Cmd.BattleTimelenUserCmd.estatus)
  return static_cast< ::Cmd::EBattleStatus >(estatus_);
}
inline void BattleTimelenUserCmd::set_estatus(::Cmd::EBattleStatus value) {
  assert(::Cmd::EBattleStatus_IsValid(value));
  set_has_estatus();
  estatus_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BattleTimelenUserCmd.estatus)
}

// -------------------------------------------------------------------

// SetOptionUserCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool SetOptionUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SetOptionUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SetOptionUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SetOptionUserCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command SetOptionUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.SetOptionUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void SetOptionUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SetOptionUserCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_SETOPTION];
inline bool SetOptionUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SetOptionUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SetOptionUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SetOptionUserCmd::clear_param() {
  param_ = 83;
  clear_has_param();
}
inline ::Cmd::User2Param SetOptionUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.SetOptionUserCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void SetOptionUserCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SetOptionUserCmd.param)
}

// optional .Cmd.EQueryType type = 3 [default = EQUERYTYPE_MIN];
inline bool SetOptionUserCmd::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SetOptionUserCmd::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SetOptionUserCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SetOptionUserCmd::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Cmd::EQueryType SetOptionUserCmd::type() const {
  // @@protoc_insertion_point(field_get:Cmd.SetOptionUserCmd.type)
  return static_cast< ::Cmd::EQueryType >(type_);
}
inline void SetOptionUserCmd::set_type(::Cmd::EQueryType value) {
  assert(::Cmd::EQueryType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SetOptionUserCmd.type)
}

// optional uint32 fashionhide = 4 [default = 0];
inline bool SetOptionUserCmd::has_fashionhide() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SetOptionUserCmd::set_has_fashionhide() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SetOptionUserCmd::clear_has_fashionhide() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SetOptionUserCmd::clear_fashionhide() {
  fashionhide_ = 0u;
  clear_has_fashionhide();
}
inline ::google::protobuf::uint32 SetOptionUserCmd::fashionhide() const {
  // @@protoc_insertion_point(field_get:Cmd.SetOptionUserCmd.fashionhide)
  return fashionhide_;
}
inline void SetOptionUserCmd::set_fashionhide(::google::protobuf::uint32 value) {
  set_has_fashionhide();
  fashionhide_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SetOptionUserCmd.fashionhide)
}

// optional .Cmd.EQueryType wedding_type = 5 [default = EQUERYTYPE_MIN];
inline bool SetOptionUserCmd::has_wedding_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SetOptionUserCmd::set_has_wedding_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SetOptionUserCmd::clear_has_wedding_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SetOptionUserCmd::clear_wedding_type() {
  wedding_type_ = 0;
  clear_has_wedding_type();
}
inline ::Cmd::EQueryType SetOptionUserCmd::wedding_type() const {
  // @@protoc_insertion_point(field_get:Cmd.SetOptionUserCmd.wedding_type)
  return static_cast< ::Cmd::EQueryType >(wedding_type_);
}
inline void SetOptionUserCmd::set_wedding_type(::Cmd::EQueryType value) {
  assert(::Cmd::EQueryType_IsValid(value));
  set_has_wedding_type();
  wedding_type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SetOptionUserCmd.wedding_type)
}

// -------------------------------------------------------------------

// QueryUserInfoUserCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool QueryUserInfoUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryUserInfoUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryUserInfoUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryUserInfoUserCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command QueryUserInfoUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryUserInfoUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void QueryUserInfoUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryUserInfoUserCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_QUERYUSERINFO];
inline bool QueryUserInfoUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryUserInfoUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryUserInfoUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryUserInfoUserCmd::clear_param() {
  param_ = 84;
  clear_has_param();
}
inline ::Cmd::User2Param QueryUserInfoUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryUserInfoUserCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void QueryUserInfoUserCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryUserInfoUserCmd.param)
}

// optional uint64 charid = 3 [default = 0];
inline bool QueryUserInfoUserCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QueryUserInfoUserCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QueryUserInfoUserCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QueryUserInfoUserCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 QueryUserInfoUserCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryUserInfoUserCmd.charid)
  return charid_;
}
inline void QueryUserInfoUserCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryUserInfoUserCmd.charid)
}

// optional uint64 teamid = 4 [default = 0];
inline bool QueryUserInfoUserCmd::has_teamid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QueryUserInfoUserCmd::set_has_teamid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QueryUserInfoUserCmd::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QueryUserInfoUserCmd::clear_teamid() {
  teamid_ = GOOGLE_ULONGLONG(0);
  clear_has_teamid();
}
inline ::google::protobuf::uint64 QueryUserInfoUserCmd::teamid() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryUserInfoUserCmd.teamid)
  return teamid_;
}
inline void QueryUserInfoUserCmd::set_teamid(::google::protobuf::uint64 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryUserInfoUserCmd.teamid)
}

// optional bool blink = 5 [default = false];
inline bool QueryUserInfoUserCmd::has_blink() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void QueryUserInfoUserCmd::set_has_blink() {
  _has_bits_[0] |= 0x00000010u;
}
inline void QueryUserInfoUserCmd::clear_has_blink() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void QueryUserInfoUserCmd::clear_blink() {
  blink_ = false;
  clear_has_blink();
}
inline bool QueryUserInfoUserCmd::blink() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryUserInfoUserCmd.blink)
  return blink_;
}
inline void QueryUserInfoUserCmd::set_blink(bool value) {
  set_has_blink();
  blink_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryUserInfoUserCmd.blink)
}

// -------------------------------------------------------------------

// CountDownTickUserCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool CountDownTickUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CountDownTickUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CountDownTickUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CountDownTickUserCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command CountDownTickUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.CountDownTickUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void CountDownTickUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CountDownTickUserCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_COUNTDOWN_TICK];
inline bool CountDownTickUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CountDownTickUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CountDownTickUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CountDownTickUserCmd::clear_param() {
  param_ = 85;
  clear_has_param();
}
inline ::Cmd::User2Param CountDownTickUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.CountDownTickUserCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void CountDownTickUserCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CountDownTickUserCmd.param)
}

// optional .Cmd.ECountDownType type = 3;
inline bool CountDownTickUserCmd::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CountDownTickUserCmd::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CountDownTickUserCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CountDownTickUserCmd::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::Cmd::ECountDownType CountDownTickUserCmd::type() const {
  // @@protoc_insertion_point(field_get:Cmd.CountDownTickUserCmd.type)
  return static_cast< ::Cmd::ECountDownType >(type_);
}
inline void CountDownTickUserCmd::set_type(::Cmd::ECountDownType value) {
  assert(::Cmd::ECountDownType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CountDownTickUserCmd.type)
}

// optional uint32 tick = 4;
inline bool CountDownTickUserCmd::has_tick() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CountDownTickUserCmd::set_has_tick() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CountDownTickUserCmd::clear_has_tick() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CountDownTickUserCmd::clear_tick() {
  tick_ = 0u;
  clear_has_tick();
}
inline ::google::protobuf::uint32 CountDownTickUserCmd::tick() const {
  // @@protoc_insertion_point(field_get:Cmd.CountDownTickUserCmd.tick)
  return tick_;
}
inline void CountDownTickUserCmd::set_tick(::google::protobuf::uint32 value) {
  set_has_tick();
  tick_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CountDownTickUserCmd.tick)
}

// optional uint32 time = 5;
inline bool CountDownTickUserCmd::has_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CountDownTickUserCmd::set_has_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CountDownTickUserCmd::clear_has_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CountDownTickUserCmd::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 CountDownTickUserCmd::time() const {
  // @@protoc_insertion_point(field_get:Cmd.CountDownTickUserCmd.time)
  return time_;
}
inline void CountDownTickUserCmd::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CountDownTickUserCmd.time)
}

// optional string sign = 6;
inline bool CountDownTickUserCmd::has_sign() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CountDownTickUserCmd::set_has_sign() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CountDownTickUserCmd::clear_has_sign() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CountDownTickUserCmd::clear_sign() {
  if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_->clear();
  }
  clear_has_sign();
}
inline const ::std::string& CountDownTickUserCmd::sign() const {
  // @@protoc_insertion_point(field_get:Cmd.CountDownTickUserCmd.sign)
  return *sign_;
}
inline void CountDownTickUserCmd::set_sign(const ::std::string& value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.CountDownTickUserCmd.sign)
}
inline void CountDownTickUserCmd::set_sign(const char* value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.CountDownTickUserCmd.sign)
}
inline void CountDownTickUserCmd::set_sign(const char* value, size_t size) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_ = new ::std::string;
  }
  sign_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.CountDownTickUserCmd.sign)
}
inline ::std::string* CountDownTickUserCmd::mutable_sign() {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.CountDownTickUserCmd.sign)
  return sign_;
}
inline ::std::string* CountDownTickUserCmd::release_sign() {
  clear_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sign_;
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CountDownTickUserCmd::set_allocated_sign(::std::string* sign) {
  if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sign_;
  }
  if (sign) {
    set_has_sign();
    sign_ = sign;
  } else {
    clear_has_sign();
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.CountDownTickUserCmd.sign)
}

// optional uint32 extparam = 7;
inline bool CountDownTickUserCmd::has_extparam() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CountDownTickUserCmd::set_has_extparam() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CountDownTickUserCmd::clear_has_extparam() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CountDownTickUserCmd::clear_extparam() {
  extparam_ = 0u;
  clear_has_extparam();
}
inline ::google::protobuf::uint32 CountDownTickUserCmd::extparam() const {
  // @@protoc_insertion_point(field_get:Cmd.CountDownTickUserCmd.extparam)
  return extparam_;
}
inline void CountDownTickUserCmd::set_extparam(::google::protobuf::uint32 value) {
  set_has_extparam();
  extparam_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CountDownTickUserCmd.extparam)
}

// -------------------------------------------------------------------

// ItemMusicNtfUserCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool ItemMusicNtfUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ItemMusicNtfUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ItemMusicNtfUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ItemMusicNtfUserCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command ItemMusicNtfUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemMusicNtfUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ItemMusicNtfUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemMusicNtfUserCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_ITEM_MUSIC_NTF];
inline bool ItemMusicNtfUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ItemMusicNtfUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ItemMusicNtfUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ItemMusicNtfUserCmd::clear_param() {
  param_ = 86;
  clear_has_param();
}
inline ::Cmd::User2Param ItemMusicNtfUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemMusicNtfUserCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void ItemMusicNtfUserCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemMusicNtfUserCmd.param)
}

// optional bool add = 3;
inline bool ItemMusicNtfUserCmd::has_add() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ItemMusicNtfUserCmd::set_has_add() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ItemMusicNtfUserCmd::clear_has_add() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ItemMusicNtfUserCmd::clear_add() {
  add_ = false;
  clear_has_add();
}
inline bool ItemMusicNtfUserCmd::add() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemMusicNtfUserCmd.add)
  return add_;
}
inline void ItemMusicNtfUserCmd::set_add(bool value) {
  set_has_add();
  add_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemMusicNtfUserCmd.add)
}

// optional string uri = 4;
inline bool ItemMusicNtfUserCmd::has_uri() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ItemMusicNtfUserCmd::set_has_uri() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ItemMusicNtfUserCmd::clear_has_uri() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ItemMusicNtfUserCmd::clear_uri() {
  if (uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_->clear();
  }
  clear_has_uri();
}
inline const ::std::string& ItemMusicNtfUserCmd::uri() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemMusicNtfUserCmd.uri)
  return *uri_;
}
inline void ItemMusicNtfUserCmd::set_uri(const ::std::string& value) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  uri_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ItemMusicNtfUserCmd.uri)
}
inline void ItemMusicNtfUserCmd::set_uri(const char* value) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  uri_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ItemMusicNtfUserCmd.uri)
}
inline void ItemMusicNtfUserCmd::set_uri(const char* value, size_t size) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  uri_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ItemMusicNtfUserCmd.uri)
}
inline ::std::string* ItemMusicNtfUserCmd::mutable_uri() {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ItemMusicNtfUserCmd.uri)
  return uri_;
}
inline ::std::string* ItemMusicNtfUserCmd::release_uri() {
  clear_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uri_;
    uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ItemMusicNtfUserCmd::set_allocated_uri(::std::string* uri) {
  if (uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uri_;
  }
  if (uri) {
    set_has_uri();
    uri_ = uri;
  } else {
    clear_has_uri();
    uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ItemMusicNtfUserCmd.uri)
}

// optional uint32 starttime = 5;
inline bool ItemMusicNtfUserCmd::has_starttime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ItemMusicNtfUserCmd::set_has_starttime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ItemMusicNtfUserCmd::clear_has_starttime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ItemMusicNtfUserCmd::clear_starttime() {
  starttime_ = 0u;
  clear_has_starttime();
}
inline ::google::protobuf::uint32 ItemMusicNtfUserCmd::starttime() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemMusicNtfUserCmd.starttime)
  return starttime_;
}
inline void ItemMusicNtfUserCmd::set_starttime(::google::protobuf::uint32 value) {
  set_has_starttime();
  starttime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemMusicNtfUserCmd.starttime)
}

// -------------------------------------------------------------------

// ShakeTreeUserCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool ShakeTreeUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShakeTreeUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShakeTreeUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShakeTreeUserCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command ShakeTreeUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ShakeTreeUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ShakeTreeUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ShakeTreeUserCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_SHAKETREE];
inline bool ShakeTreeUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ShakeTreeUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ShakeTreeUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ShakeTreeUserCmd::clear_param() {
  param_ = 87;
  clear_has_param();
}
inline ::Cmd::User2Param ShakeTreeUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ShakeTreeUserCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void ShakeTreeUserCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ShakeTreeUserCmd.param)
}

// optional uint64 npcid = 3 [default = 0];
inline bool ShakeTreeUserCmd::has_npcid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ShakeTreeUserCmd::set_has_npcid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ShakeTreeUserCmd::clear_has_npcid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ShakeTreeUserCmd::clear_npcid() {
  npcid_ = GOOGLE_ULONGLONG(0);
  clear_has_npcid();
}
inline ::google::protobuf::uint64 ShakeTreeUserCmd::npcid() const {
  // @@protoc_insertion_point(field_get:Cmd.ShakeTreeUserCmd.npcid)
  return npcid_;
}
inline void ShakeTreeUserCmd::set_npcid(::google::protobuf::uint64 value) {
  set_has_npcid();
  npcid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ShakeTreeUserCmd.npcid)
}

// optional .Cmd.ETreeStatus result = 4 [default = ETREESTATUS_MIN];
inline bool ShakeTreeUserCmd::has_result() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ShakeTreeUserCmd::set_has_result() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ShakeTreeUserCmd::clear_has_result() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ShakeTreeUserCmd::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::Cmd::ETreeStatus ShakeTreeUserCmd::result() const {
  // @@protoc_insertion_point(field_get:Cmd.ShakeTreeUserCmd.result)
  return static_cast< ::Cmd::ETreeStatus >(result_);
}
inline void ShakeTreeUserCmd::set_result(::Cmd::ETreeStatus value) {
  assert(::Cmd::ETreeStatus_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ShakeTreeUserCmd.result)
}

// -------------------------------------------------------------------

// Tree

// optional uint64 id = 1 [default = 0];
inline bool Tree::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Tree::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Tree::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Tree::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 Tree::id() const {
  // @@protoc_insertion_point(field_get:Cmd.Tree.id)
  return id_;
}
inline void Tree::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.Tree.id)
}

// optional uint32 typeid = 2 [default = 0];
inline bool Tree::has_typeid_() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Tree::set_has_typeid_() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Tree::clear_has_typeid_() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Tree::clear_typeid_() {
  typeid__ = 0u;
  clear_has_typeid_();
}
inline ::google::protobuf::uint32 Tree::typeid_() const {
  // @@protoc_insertion_point(field_get:Cmd.Tree.typeid)
  return typeid__;
}
inline void Tree::set_typeid_(::google::protobuf::uint32 value) {
  set_has_typeid_();
  typeid__ = value;
  // @@protoc_insertion_point(field_set:Cmd.Tree.typeid)
}

// optional .Cmd.ScenePos pos = 3;
inline bool Tree::has_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Tree::set_has_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Tree::clear_has_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Tree::clear_pos() {
  if (pos_ != NULL) pos_->::Cmd::ScenePos::Clear();
  clear_has_pos();
}
inline const ::Cmd::ScenePos& Tree::pos() const {
  // @@protoc_insertion_point(field_get:Cmd.Tree.pos)
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::Cmd::ScenePos* Tree::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::Cmd::ScenePos;
  // @@protoc_insertion_point(field_mutable:Cmd.Tree.pos)
  return pos_;
}
inline ::Cmd::ScenePos* Tree::release_pos() {
  clear_has_pos();
  ::Cmd::ScenePos* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void Tree::set_allocated_pos(::Cmd::ScenePos* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.Tree.pos)
}

// -------------------------------------------------------------------

// TreeListUserCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool TreeListUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TreeListUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TreeListUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TreeListUserCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command TreeListUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.TreeListUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void TreeListUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TreeListUserCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_TREELIST];
inline bool TreeListUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TreeListUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TreeListUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TreeListUserCmd::clear_param() {
  param_ = 88;
  clear_has_param();
}
inline ::Cmd::User2Param TreeListUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.TreeListUserCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void TreeListUserCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TreeListUserCmd.param)
}

// repeated .Cmd.Tree updates = 3;
inline int TreeListUserCmd::updates_size() const {
  return updates_.size();
}
inline void TreeListUserCmd::clear_updates() {
  updates_.Clear();
}
inline const ::Cmd::Tree& TreeListUserCmd::updates(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.TreeListUserCmd.updates)
  return updates_.Get(index);
}
inline ::Cmd::Tree* TreeListUserCmd::mutable_updates(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.TreeListUserCmd.updates)
  return updates_.Mutable(index);
}
inline ::Cmd::Tree* TreeListUserCmd::add_updates() {
  // @@protoc_insertion_point(field_add:Cmd.TreeListUserCmd.updates)
  return updates_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::Tree >&
TreeListUserCmd::updates() const {
  // @@protoc_insertion_point(field_list:Cmd.TreeListUserCmd.updates)
  return updates_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::Tree >*
TreeListUserCmd::mutable_updates() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.TreeListUserCmd.updates)
  return &updates_;
}

// repeated uint64 dels = 4;
inline int TreeListUserCmd::dels_size() const {
  return dels_.size();
}
inline void TreeListUserCmd::clear_dels() {
  dels_.Clear();
}
inline ::google::protobuf::uint64 TreeListUserCmd::dels(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.TreeListUserCmd.dels)
  return dels_.Get(index);
}
inline void TreeListUserCmd::set_dels(int index, ::google::protobuf::uint64 value) {
  dels_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.TreeListUserCmd.dels)
}
inline void TreeListUserCmd::add_dels(::google::protobuf::uint64 value) {
  dels_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.TreeListUserCmd.dels)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
TreeListUserCmd::dels() const {
  // @@protoc_insertion_point(field_list:Cmd.TreeListUserCmd.dels)
  return dels_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
TreeListUserCmd::mutable_dels() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.TreeListUserCmd.dels)
  return &dels_;
}

// -------------------------------------------------------------------

// ActivityNtfUserCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool ActivityNtfUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActivityNtfUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ActivityNtfUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ActivityNtfUserCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command ActivityNtfUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ActivityNtfUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ActivityNtfUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ActivityNtfUserCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_ACTIVITY_NTF];
inline bool ActivityNtfUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActivityNtfUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ActivityNtfUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ActivityNtfUserCmd::clear_param() {
  param_ = 89;
  clear_has_param();
}
inline ::Cmd::User2Param ActivityNtfUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ActivityNtfUserCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void ActivityNtfUserCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ActivityNtfUserCmd.param)
}

// optional uint32 id = 3;
inline bool ActivityNtfUserCmd::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ActivityNtfUserCmd::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ActivityNtfUserCmd::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ActivityNtfUserCmd::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 ActivityNtfUserCmd::id() const {
  // @@protoc_insertion_point(field_get:Cmd.ActivityNtfUserCmd.id)
  return id_;
}
inline void ActivityNtfUserCmd::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ActivityNtfUserCmd.id)
}

// optional uint32 mapid = 4 [default = 0];
inline bool ActivityNtfUserCmd::has_mapid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ActivityNtfUserCmd::set_has_mapid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ActivityNtfUserCmd::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ActivityNtfUserCmd::clear_mapid() {
  mapid_ = 0u;
  clear_has_mapid();
}
inline ::google::protobuf::uint32 ActivityNtfUserCmd::mapid() const {
  // @@protoc_insertion_point(field_get:Cmd.ActivityNtfUserCmd.mapid)
  return mapid_;
}
inline void ActivityNtfUserCmd::set_mapid(::google::protobuf::uint32 value) {
  set_has_mapid();
  mapid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ActivityNtfUserCmd.mapid)
}

// optional uint32 endtime = 5 [default = 0];
inline bool ActivityNtfUserCmd::has_endtime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ActivityNtfUserCmd::set_has_endtime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ActivityNtfUserCmd::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ActivityNtfUserCmd::clear_endtime() {
  endtime_ = 0u;
  clear_has_endtime();
}
inline ::google::protobuf::uint32 ActivityNtfUserCmd::endtime() const {
  // @@protoc_insertion_point(field_get:Cmd.ActivityNtfUserCmd.endtime)
  return endtime_;
}
inline void ActivityNtfUserCmd::set_endtime(::google::protobuf::uint32 value) {
  set_has_endtime();
  endtime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ActivityNtfUserCmd.endtime)
}

// optional uint32 progress = 6;
inline bool ActivityNtfUserCmd::has_progress() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ActivityNtfUserCmd::set_has_progress() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ActivityNtfUserCmd::clear_has_progress() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ActivityNtfUserCmd::clear_progress() {
  progress_ = 0u;
  clear_has_progress();
}
inline ::google::protobuf::uint32 ActivityNtfUserCmd::progress() const {
  // @@protoc_insertion_point(field_get:Cmd.ActivityNtfUserCmd.progress)
  return progress_;
}
inline void ActivityNtfUserCmd::set_progress(::google::protobuf::uint32 value) {
  set_has_progress();
  progress_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ActivityNtfUserCmd.progress)
}

// -------------------------------------------------------------------

// ZoneInfo

// optional uint32 zoneid = 1 [default = 0];
inline bool ZoneInfo::has_zoneid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ZoneInfo::set_has_zoneid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ZoneInfo::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ZoneInfo::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 ZoneInfo::zoneid() const {
  // @@protoc_insertion_point(field_get:Cmd.ZoneInfo.zoneid)
  return zoneid_;
}
inline void ZoneInfo::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ZoneInfo.zoneid)
}

// optional uint32 maxbaselv = 2 [default = 0];
inline bool ZoneInfo::has_maxbaselv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ZoneInfo::set_has_maxbaselv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ZoneInfo::clear_has_maxbaselv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ZoneInfo::clear_maxbaselv() {
  maxbaselv_ = 0u;
  clear_has_maxbaselv();
}
inline ::google::protobuf::uint32 ZoneInfo::maxbaselv() const {
  // @@protoc_insertion_point(field_get:Cmd.ZoneInfo.maxbaselv)
  return maxbaselv_;
}
inline void ZoneInfo::set_maxbaselv(::google::protobuf::uint32 value) {
  set_has_maxbaselv();
  maxbaselv_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ZoneInfo.maxbaselv)
}

// optional .Cmd.EZoneStatus status = 3 [default = EZONESTATUS_MIN];
inline bool ZoneInfo::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ZoneInfo::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ZoneInfo::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ZoneInfo::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::Cmd::EZoneStatus ZoneInfo::status() const {
  // @@protoc_insertion_point(field_get:Cmd.ZoneInfo.status)
  return static_cast< ::Cmd::EZoneStatus >(status_);
}
inline void ZoneInfo::set_status(::Cmd::EZoneStatus value) {
  assert(::Cmd::EZoneStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ZoneInfo.status)
}

// optional .Cmd.EZoneState state = 4 [default = EZONESTATE_MIN];
inline bool ZoneInfo::has_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ZoneInfo::set_has_state() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ZoneInfo::clear_has_state() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ZoneInfo::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::Cmd::EZoneState ZoneInfo::state() const {
  // @@protoc_insertion_point(field_get:Cmd.ZoneInfo.state)
  return static_cast< ::Cmd::EZoneState >(state_);
}
inline void ZoneInfo::set_state(::Cmd::EZoneState value) {
  assert(::Cmd::EZoneState_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ZoneInfo.state)
}

// -------------------------------------------------------------------

// RecentZoneInfo

// optional .Cmd.EJumpZone type = 1 [default = EJUMPZONE_MIN];
inline bool RecentZoneInfo::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RecentZoneInfo::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RecentZoneInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RecentZoneInfo::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Cmd::EJumpZone RecentZoneInfo::type() const {
  // @@protoc_insertion_point(field_get:Cmd.RecentZoneInfo.type)
  return static_cast< ::Cmd::EJumpZone >(type_);
}
inline void RecentZoneInfo::set_type(::Cmd::EJumpZone value) {
  assert(::Cmd::EJumpZone_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RecentZoneInfo.type)
}

// optional uint32 zoneid = 2 [default = 0];
inline bool RecentZoneInfo::has_zoneid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RecentZoneInfo::set_has_zoneid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RecentZoneInfo::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RecentZoneInfo::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 RecentZoneInfo::zoneid() const {
  // @@protoc_insertion_point(field_get:Cmd.RecentZoneInfo.zoneid)
  return zoneid_;
}
inline void RecentZoneInfo::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RecentZoneInfo.zoneid)
}

// -------------------------------------------------------------------

// QueryZoneStatusUserCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool QueryZoneStatusUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryZoneStatusUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryZoneStatusUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryZoneStatusUserCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command QueryZoneStatusUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryZoneStatusUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void QueryZoneStatusUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryZoneStatusUserCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_QUERY_ZONESTATUS];
inline bool QueryZoneStatusUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryZoneStatusUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryZoneStatusUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryZoneStatusUserCmd::clear_param() {
  param_ = 91;
  clear_has_param();
}
inline ::Cmd::User2Param QueryZoneStatusUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryZoneStatusUserCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void QueryZoneStatusUserCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryZoneStatusUserCmd.param)
}

// repeated .Cmd.ZoneInfo infos = 3;
inline int QueryZoneStatusUserCmd::infos_size() const {
  return infos_.size();
}
inline void QueryZoneStatusUserCmd::clear_infos() {
  infos_.Clear();
}
inline const ::Cmd::ZoneInfo& QueryZoneStatusUserCmd::infos(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.QueryZoneStatusUserCmd.infos)
  return infos_.Get(index);
}
inline ::Cmd::ZoneInfo* QueryZoneStatusUserCmd::mutable_infos(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.QueryZoneStatusUserCmd.infos)
  return infos_.Mutable(index);
}
inline ::Cmd::ZoneInfo* QueryZoneStatusUserCmd::add_infos() {
  // @@protoc_insertion_point(field_add:Cmd.QueryZoneStatusUserCmd.infos)
  return infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ZoneInfo >&
QueryZoneStatusUserCmd::infos() const {
  // @@protoc_insertion_point(field_list:Cmd.QueryZoneStatusUserCmd.infos)
  return infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::ZoneInfo >*
QueryZoneStatusUserCmd::mutable_infos() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.QueryZoneStatusUserCmd.infos)
  return &infos_;
}

// repeated .Cmd.RecentZoneInfo recents = 4;
inline int QueryZoneStatusUserCmd::recents_size() const {
  return recents_.size();
}
inline void QueryZoneStatusUserCmd::clear_recents() {
  recents_.Clear();
}
inline const ::Cmd::RecentZoneInfo& QueryZoneStatusUserCmd::recents(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.QueryZoneStatusUserCmd.recents)
  return recents_.Get(index);
}
inline ::Cmd::RecentZoneInfo* QueryZoneStatusUserCmd::mutable_recents(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.QueryZoneStatusUserCmd.recents)
  return recents_.Mutable(index);
}
inline ::Cmd::RecentZoneInfo* QueryZoneStatusUserCmd::add_recents() {
  // @@protoc_insertion_point(field_add:Cmd.QueryZoneStatusUserCmd.recents)
  return recents_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::RecentZoneInfo >&
QueryZoneStatusUserCmd::recents() const {
  // @@protoc_insertion_point(field_list:Cmd.QueryZoneStatusUserCmd.recents)
  return recents_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::RecentZoneInfo >*
QueryZoneStatusUserCmd::mutable_recents() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.QueryZoneStatusUserCmd.recents)
  return &recents_;
}

// -------------------------------------------------------------------

// JumpZoneUserCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool JumpZoneUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JumpZoneUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JumpZoneUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JumpZoneUserCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command JumpZoneUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.JumpZoneUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void JumpZoneUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.JumpZoneUserCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_JUMP_ZONE];
inline bool JumpZoneUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JumpZoneUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JumpZoneUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JumpZoneUserCmd::clear_param() {
  param_ = 92;
  clear_has_param();
}
inline ::Cmd::User2Param JumpZoneUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.JumpZoneUserCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void JumpZoneUserCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.JumpZoneUserCmd.param)
}

// optional uint64 npcid = 3 [default = 0];
inline bool JumpZoneUserCmd::has_npcid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JumpZoneUserCmd::set_has_npcid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JumpZoneUserCmd::clear_has_npcid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JumpZoneUserCmd::clear_npcid() {
  npcid_ = GOOGLE_ULONGLONG(0);
  clear_has_npcid();
}
inline ::google::protobuf::uint64 JumpZoneUserCmd::npcid() const {
  // @@protoc_insertion_point(field_get:Cmd.JumpZoneUserCmd.npcid)
  return npcid_;
}
inline void JumpZoneUserCmd::set_npcid(::google::protobuf::uint64 value) {
  set_has_npcid();
  npcid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.JumpZoneUserCmd.npcid)
}

// optional uint32 zoneid = 4 [default = 0];
inline bool JumpZoneUserCmd::has_zoneid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JumpZoneUserCmd::set_has_zoneid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JumpZoneUserCmd::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JumpZoneUserCmd::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 JumpZoneUserCmd::zoneid() const {
  // @@protoc_insertion_point(field_get:Cmd.JumpZoneUserCmd.zoneid)
  return zoneid_;
}
inline void JumpZoneUserCmd::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.JumpZoneUserCmd.zoneid)
}

// -------------------------------------------------------------------

// ItemImageUserNtfUserCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool ItemImageUserNtfUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ItemImageUserNtfUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ItemImageUserNtfUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ItemImageUserNtfUserCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command ItemImageUserNtfUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemImageUserNtfUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ItemImageUserNtfUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemImageUserNtfUserCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_ITEMIMAGE_USER_NTF];
inline bool ItemImageUserNtfUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ItemImageUserNtfUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ItemImageUserNtfUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ItemImageUserNtfUserCmd::clear_param() {
  param_ = 93;
  clear_has_param();
}
inline ::Cmd::User2Param ItemImageUserNtfUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemImageUserNtfUserCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void ItemImageUserNtfUserCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemImageUserNtfUserCmd.param)
}

// optional uint64 userid = 3 [default = 0];
inline bool ItemImageUserNtfUserCmd::has_userid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ItemImageUserNtfUserCmd::set_has_userid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ItemImageUserNtfUserCmd::clear_has_userid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ItemImageUserNtfUserCmd::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::uint64 ItemImageUserNtfUserCmd::userid() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemImageUserNtfUserCmd.userid)
  return userid_;
}
inline void ItemImageUserNtfUserCmd::set_userid(::google::protobuf::uint64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemImageUserNtfUserCmd.userid)
}

// -------------------------------------------------------------------

// InviteFollowUserCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool InviteFollowUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InviteFollowUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InviteFollowUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InviteFollowUserCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command InviteFollowUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.InviteFollowUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void InviteFollowUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.InviteFollowUserCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_INVITEFOLLOW];
inline bool InviteFollowUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InviteFollowUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InviteFollowUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InviteFollowUserCmd::clear_param() {
  param_ = 97;
  clear_has_param();
}
inline ::Cmd::User2Param InviteFollowUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.InviteFollowUserCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void InviteFollowUserCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.InviteFollowUserCmd.param)
}

// optional uint64 charid = 3 [default = 0];
inline bool InviteFollowUserCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InviteFollowUserCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InviteFollowUserCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InviteFollowUserCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 InviteFollowUserCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.InviteFollowUserCmd.charid)
  return charid_;
}
inline void InviteFollowUserCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.InviteFollowUserCmd.charid)
}

// optional bool follow = 4 [default = true];
inline bool InviteFollowUserCmd::has_follow() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void InviteFollowUserCmd::set_has_follow() {
  _has_bits_[0] |= 0x00000008u;
}
inline void InviteFollowUserCmd::clear_has_follow() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void InviteFollowUserCmd::clear_follow() {
  follow_ = true;
  clear_has_follow();
}
inline bool InviteFollowUserCmd::follow() const {
  // @@protoc_insertion_point(field_get:Cmd.InviteFollowUserCmd.follow)
  return follow_;
}
inline void InviteFollowUserCmd::set_follow(bool value) {
  set_has_follow();
  follow_ = value;
  // @@protoc_insertion_point(field_set:Cmd.InviteFollowUserCmd.follow)
}

// -------------------------------------------------------------------

// ChangeNameUserCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool ChangeNameUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChangeNameUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChangeNameUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChangeNameUserCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command ChangeNameUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ChangeNameUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ChangeNameUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChangeNameUserCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_CHANGENAME];
inline bool ChangeNameUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChangeNameUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChangeNameUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChangeNameUserCmd::clear_param() {
  param_ = 98;
  clear_has_param();
}
inline ::Cmd::User2Param ChangeNameUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ChangeNameUserCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void ChangeNameUserCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChangeNameUserCmd.param)
}

// optional string name = 3;
inline bool ChangeNameUserCmd::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChangeNameUserCmd::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChangeNameUserCmd::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChangeNameUserCmd::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ChangeNameUserCmd::name() const {
  // @@protoc_insertion_point(field_get:Cmd.ChangeNameUserCmd.name)
  return *name_;
}
inline void ChangeNameUserCmd::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ChangeNameUserCmd.name)
}
inline void ChangeNameUserCmd::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ChangeNameUserCmd.name)
}
inline void ChangeNameUserCmd::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ChangeNameUserCmd.name)
}
inline ::std::string* ChangeNameUserCmd::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ChangeNameUserCmd.name)
  return name_;
}
inline ::std::string* ChangeNameUserCmd::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChangeNameUserCmd::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ChangeNameUserCmd.name)
}

// -------------------------------------------------------------------

// ChargePlayUserCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool ChargePlayUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChargePlayUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChargePlayUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChargePlayUserCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command ChargePlayUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ChargePlayUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ChargePlayUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChargePlayUserCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_CHARGEPLAY];
inline bool ChargePlayUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChargePlayUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChargePlayUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChargePlayUserCmd::clear_param() {
  param_ = 99;
  clear_has_param();
}
inline ::Cmd::User2Param ChargePlayUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ChargePlayUserCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void ChargePlayUserCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChargePlayUserCmd.param)
}

// repeated uint32 chargeids = 3;
inline int ChargePlayUserCmd::chargeids_size() const {
  return chargeids_.size();
}
inline void ChargePlayUserCmd::clear_chargeids() {
  chargeids_.Clear();
}
inline ::google::protobuf::uint32 ChargePlayUserCmd::chargeids(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.ChargePlayUserCmd.chargeids)
  return chargeids_.Get(index);
}
inline void ChargePlayUserCmd::set_chargeids(int index, ::google::protobuf::uint32 value) {
  chargeids_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.ChargePlayUserCmd.chargeids)
}
inline void ChargePlayUserCmd::add_chargeids(::google::protobuf::uint32 value) {
  chargeids_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.ChargePlayUserCmd.chargeids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ChargePlayUserCmd::chargeids() const {
  // @@protoc_insertion_point(field_list:Cmd.ChargePlayUserCmd.chargeids)
  return chargeids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ChargePlayUserCmd::mutable_chargeids() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.ChargePlayUserCmd.chargeids)
  return &chargeids_;
}

// -------------------------------------------------------------------

// RequireNpcFuncUserCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool RequireNpcFuncUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequireNpcFuncUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequireNpcFuncUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequireNpcFuncUserCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command RequireNpcFuncUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.RequireNpcFuncUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void RequireNpcFuncUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RequireNpcFuncUserCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_REQUIRENPCFUNC];
inline bool RequireNpcFuncUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RequireNpcFuncUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RequireNpcFuncUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RequireNpcFuncUserCmd::clear_param() {
  param_ = 100;
  clear_has_param();
}
inline ::Cmd::User2Param RequireNpcFuncUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.RequireNpcFuncUserCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void RequireNpcFuncUserCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RequireNpcFuncUserCmd.param)
}

// optional uint32 npcid = 3 [default = 0];
inline bool RequireNpcFuncUserCmd::has_npcid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RequireNpcFuncUserCmd::set_has_npcid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RequireNpcFuncUserCmd::clear_has_npcid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RequireNpcFuncUserCmd::clear_npcid() {
  npcid_ = 0u;
  clear_has_npcid();
}
inline ::google::protobuf::uint32 RequireNpcFuncUserCmd::npcid() const {
  // @@protoc_insertion_point(field_get:Cmd.RequireNpcFuncUserCmd.npcid)
  return npcid_;
}
inline void RequireNpcFuncUserCmd::set_npcid(::google::protobuf::uint32 value) {
  set_has_npcid();
  npcid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RequireNpcFuncUserCmd.npcid)
}

// repeated string functions = 4;
inline int RequireNpcFuncUserCmd::functions_size() const {
  return functions_.size();
}
inline void RequireNpcFuncUserCmd::clear_functions() {
  functions_.Clear();
}
inline const ::std::string& RequireNpcFuncUserCmd::functions(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.RequireNpcFuncUserCmd.functions)
  return functions_.Get(index);
}
inline ::std::string* RequireNpcFuncUserCmd::mutable_functions(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.RequireNpcFuncUserCmd.functions)
  return functions_.Mutable(index);
}
inline void RequireNpcFuncUserCmd::set_functions(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Cmd.RequireNpcFuncUserCmd.functions)
  functions_.Mutable(index)->assign(value);
}
inline void RequireNpcFuncUserCmd::set_functions(int index, const char* value) {
  functions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.RequireNpcFuncUserCmd.functions)
}
inline void RequireNpcFuncUserCmd::set_functions(int index, const char* value, size_t size) {
  functions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.RequireNpcFuncUserCmd.functions)
}
inline ::std::string* RequireNpcFuncUserCmd::add_functions() {
  return functions_.Add();
}
inline void RequireNpcFuncUserCmd::add_functions(const ::std::string& value) {
  functions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Cmd.RequireNpcFuncUserCmd.functions)
}
inline void RequireNpcFuncUserCmd::add_functions(const char* value) {
  functions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Cmd.RequireNpcFuncUserCmd.functions)
}
inline void RequireNpcFuncUserCmd::add_functions(const char* value, size_t size) {
  functions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Cmd.RequireNpcFuncUserCmd.functions)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
RequireNpcFuncUserCmd::functions() const {
  // @@protoc_insertion_point(field_list:Cmd.RequireNpcFuncUserCmd.functions)
  return functions_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
RequireNpcFuncUserCmd::mutable_functions() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.RequireNpcFuncUserCmd.functions)
  return &functions_;
}

// -------------------------------------------------------------------

// CheckSeatUserCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool CheckSeatUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CheckSeatUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CheckSeatUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CheckSeatUserCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command CheckSeatUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.CheckSeatUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void CheckSeatUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CheckSeatUserCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_CHECK_SEAT];
inline bool CheckSeatUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CheckSeatUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CheckSeatUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CheckSeatUserCmd::clear_param() {
  param_ = 101;
  clear_has_param();
}
inline ::Cmd::User2Param CheckSeatUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.CheckSeatUserCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void CheckSeatUserCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CheckSeatUserCmd.param)
}

// optional uint32 seatid = 3 [default = 0];
inline bool CheckSeatUserCmd::has_seatid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CheckSeatUserCmd::set_has_seatid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CheckSeatUserCmd::clear_has_seatid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CheckSeatUserCmd::clear_seatid() {
  seatid_ = 0u;
  clear_has_seatid();
}
inline ::google::protobuf::uint32 CheckSeatUserCmd::seatid() const {
  // @@protoc_insertion_point(field_get:Cmd.CheckSeatUserCmd.seatid)
  return seatid_;
}
inline void CheckSeatUserCmd::set_seatid(::google::protobuf::uint32 value) {
  set_has_seatid();
  seatid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CheckSeatUserCmd.seatid)
}

// optional bool success = 4;
inline bool CheckSeatUserCmd::has_success() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CheckSeatUserCmd::set_has_success() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CheckSeatUserCmd::clear_has_success() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CheckSeatUserCmd::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool CheckSeatUserCmd::success() const {
  // @@protoc_insertion_point(field_get:Cmd.CheckSeatUserCmd.success)
  return success_;
}
inline void CheckSeatUserCmd::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CheckSeatUserCmd.success)
}

// -------------------------------------------------------------------

// NtfSeatUserCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool NtfSeatUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NtfSeatUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NtfSeatUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NtfSeatUserCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command NtfSeatUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfSeatUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void NtfSeatUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfSeatUserCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_NTF_SEAT];
inline bool NtfSeatUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NtfSeatUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NtfSeatUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NtfSeatUserCmd::clear_param() {
  param_ = 102;
  clear_has_param();
}
inline ::Cmd::User2Param NtfSeatUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfSeatUserCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void NtfSeatUserCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfSeatUserCmd.param)
}

// optional uint64 charid = 3;
inline bool NtfSeatUserCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NtfSeatUserCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NtfSeatUserCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NtfSeatUserCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 NtfSeatUserCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfSeatUserCmd.charid)
  return charid_;
}
inline void NtfSeatUserCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfSeatUserCmd.charid)
}

// optional uint32 seatid = 4;
inline bool NtfSeatUserCmd::has_seatid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NtfSeatUserCmd::set_has_seatid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NtfSeatUserCmd::clear_has_seatid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NtfSeatUserCmd::clear_seatid() {
  seatid_ = 0u;
  clear_has_seatid();
}
inline ::google::protobuf::uint32 NtfSeatUserCmd::seatid() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfSeatUserCmd.seatid)
  return seatid_;
}
inline void NtfSeatUserCmd::set_seatid(::google::protobuf::uint32 value) {
  set_has_seatid();
  seatid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfSeatUserCmd.seatid)
}

// optional bool isseatdown = 5;
inline bool NtfSeatUserCmd::has_isseatdown() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NtfSeatUserCmd::set_has_isseatdown() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NtfSeatUserCmd::clear_has_isseatdown() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NtfSeatUserCmd::clear_isseatdown() {
  isseatdown_ = false;
  clear_has_isseatdown();
}
inline bool NtfSeatUserCmd::isseatdown() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfSeatUserCmd.isseatdown)
  return isseatdown_;
}
inline void NtfSeatUserCmd::set_isseatdown(bool value) {
  set_has_isseatdown();
  isseatdown_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfSeatUserCmd.isseatdown)
}

// -------------------------------------------------------------------

// YoyoSeatUserCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool YoyoSeatUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YoyoSeatUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YoyoSeatUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YoyoSeatUserCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command YoyoSeatUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.YoyoSeatUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void YoyoSeatUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.YoyoSeatUserCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_YOYO_SEAT];
inline bool YoyoSeatUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YoyoSeatUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YoyoSeatUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YoyoSeatUserCmd::clear_param() {
  param_ = 114;
  clear_has_param();
}
inline ::Cmd::User2Param YoyoSeatUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.YoyoSeatUserCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void YoyoSeatUserCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.YoyoSeatUserCmd.param)
}

// optional uint64 guid = 3 [default = 0];
inline bool YoyoSeatUserCmd::has_guid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void YoyoSeatUserCmd::set_has_guid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void YoyoSeatUserCmd::clear_has_guid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void YoyoSeatUserCmd::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
  clear_has_guid();
}
inline ::google::protobuf::uint64 YoyoSeatUserCmd::guid() const {
  // @@protoc_insertion_point(field_get:Cmd.YoyoSeatUserCmd.guid)
  return guid_;
}
inline void YoyoSeatUserCmd::set_guid(::google::protobuf::uint64 value) {
  set_has_guid();
  guid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.YoyoSeatUserCmd.guid)
}

// -------------------------------------------------------------------

// ShowSeatUserCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool ShowSeatUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShowSeatUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShowSeatUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShowSeatUserCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command ShowSeatUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ShowSeatUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ShowSeatUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ShowSeatUserCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_SHOW_SEAT];
inline bool ShowSeatUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ShowSeatUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ShowSeatUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ShowSeatUserCmd::clear_param() {
  param_ = 115;
  clear_has_param();
}
inline ::Cmd::User2Param ShowSeatUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ShowSeatUserCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void ShowSeatUserCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ShowSeatUserCmd.param)
}

// repeated uint32 seatid = 3;
inline int ShowSeatUserCmd::seatid_size() const {
  return seatid_.size();
}
inline void ShowSeatUserCmd::clear_seatid() {
  seatid_.Clear();
}
inline ::google::protobuf::uint32 ShowSeatUserCmd::seatid(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.ShowSeatUserCmd.seatid)
  return seatid_.Get(index);
}
inline void ShowSeatUserCmd::set_seatid(int index, ::google::protobuf::uint32 value) {
  seatid_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.ShowSeatUserCmd.seatid)
}
inline void ShowSeatUserCmd::add_seatid(::google::protobuf::uint32 value) {
  seatid_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.ShowSeatUserCmd.seatid)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ShowSeatUserCmd::seatid() const {
  // @@protoc_insertion_point(field_list:Cmd.ShowSeatUserCmd.seatid)
  return seatid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ShowSeatUserCmd::mutable_seatid() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.ShowSeatUserCmd.seatid)
  return &seatid_;
}

// optional .Cmd.SeatShowType show = 4 [default = SEAT_SHOW_VISIBLE];
inline bool ShowSeatUserCmd::has_show() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ShowSeatUserCmd::set_has_show() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ShowSeatUserCmd::clear_has_show() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ShowSeatUserCmd::clear_show() {
  show_ = 0;
  clear_has_show();
}
inline ::Cmd::SeatShowType ShowSeatUserCmd::show() const {
  // @@protoc_insertion_point(field_get:Cmd.ShowSeatUserCmd.show)
  return static_cast< ::Cmd::SeatShowType >(show_);
}
inline void ShowSeatUserCmd::set_show(::Cmd::SeatShowType value) {
  assert(::Cmd::SeatShowType_IsValid(value));
  set_has_show();
  show_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ShowSeatUserCmd.show)
}

// -------------------------------------------------------------------

// SetNormalSkillOptionUserCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool SetNormalSkillOptionUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SetNormalSkillOptionUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SetNormalSkillOptionUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SetNormalSkillOptionUserCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command SetNormalSkillOptionUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.SetNormalSkillOptionUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void SetNormalSkillOptionUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SetNormalSkillOptionUserCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_SET_NORMALSKILL_OPTION];
inline bool SetNormalSkillOptionUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SetNormalSkillOptionUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SetNormalSkillOptionUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SetNormalSkillOptionUserCmd::clear_param() {
  param_ = 103;
  clear_has_param();
}
inline ::Cmd::User2Param SetNormalSkillOptionUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.SetNormalSkillOptionUserCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void SetNormalSkillOptionUserCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SetNormalSkillOptionUserCmd.param)
}

// optional uint32 flag = 3;
inline bool SetNormalSkillOptionUserCmd::has_flag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SetNormalSkillOptionUserCmd::set_has_flag() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SetNormalSkillOptionUserCmd::clear_has_flag() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SetNormalSkillOptionUserCmd::clear_flag() {
  flag_ = 0u;
  clear_has_flag();
}
inline ::google::protobuf::uint32 SetNormalSkillOptionUserCmd::flag() const {
  // @@protoc_insertion_point(field_get:Cmd.SetNormalSkillOptionUserCmd.flag)
  return flag_;
}
inline void SetNormalSkillOptionUserCmd::set_flag(::google::protobuf::uint32 value) {
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SetNormalSkillOptionUserCmd.flag)
}

// -------------------------------------------------------------------

// NewSetOptionUserCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool NewSetOptionUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NewSetOptionUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NewSetOptionUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NewSetOptionUserCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command NewSetOptionUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.NewSetOptionUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void NewSetOptionUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NewSetOptionUserCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_NEW_SET_OPTION];
inline bool NewSetOptionUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NewSetOptionUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NewSetOptionUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NewSetOptionUserCmd::clear_param() {
  param_ = 106;
  clear_has_param();
}
inline ::Cmd::User2Param NewSetOptionUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.NewSetOptionUserCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void NewSetOptionUserCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NewSetOptionUserCmd.param)
}

// optional .Cmd.EOptionType type = 3;
inline bool NewSetOptionUserCmd::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NewSetOptionUserCmd::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NewSetOptionUserCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NewSetOptionUserCmd::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Cmd::EOptionType NewSetOptionUserCmd::type() const {
  // @@protoc_insertion_point(field_get:Cmd.NewSetOptionUserCmd.type)
  return static_cast< ::Cmd::EOptionType >(type_);
}
inline void NewSetOptionUserCmd::set_type(::Cmd::EOptionType value) {
  assert(::Cmd::EOptionType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NewSetOptionUserCmd.type)
}

// optional uint32 flag = 4;
inline bool NewSetOptionUserCmd::has_flag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NewSetOptionUserCmd::set_has_flag() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NewSetOptionUserCmd::clear_has_flag() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NewSetOptionUserCmd::clear_flag() {
  flag_ = 0u;
  clear_has_flag();
}
inline ::google::protobuf::uint32 NewSetOptionUserCmd::flag() const {
  // @@protoc_insertion_point(field_get:Cmd.NewSetOptionUserCmd.flag)
  return flag_;
}
inline void NewSetOptionUserCmd::set_flag(::google::protobuf::uint32 value) {
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NewSetOptionUserCmd.flag)
}

// -------------------------------------------------------------------

// UnsolvedSceneryNtfUserCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool UnsolvedSceneryNtfUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UnsolvedSceneryNtfUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UnsolvedSceneryNtfUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UnsolvedSceneryNtfUserCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command UnsolvedSceneryNtfUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.UnsolvedSceneryNtfUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void UnsolvedSceneryNtfUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UnsolvedSceneryNtfUserCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_UNSOLVED_SCENERY_NTF];
inline bool UnsolvedSceneryNtfUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UnsolvedSceneryNtfUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UnsolvedSceneryNtfUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UnsolvedSceneryNtfUserCmd::clear_param() {
  param_ = 104;
  clear_has_param();
}
inline ::Cmd::User2Param UnsolvedSceneryNtfUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.UnsolvedSceneryNtfUserCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void UnsolvedSceneryNtfUserCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UnsolvedSceneryNtfUserCmd.param)
}

// repeated uint32 ids = 3;
inline int UnsolvedSceneryNtfUserCmd::ids_size() const {
  return ids_.size();
}
inline void UnsolvedSceneryNtfUserCmd::clear_ids() {
  ids_.Clear();
}
inline ::google::protobuf::uint32 UnsolvedSceneryNtfUserCmd::ids(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.UnsolvedSceneryNtfUserCmd.ids)
  return ids_.Get(index);
}
inline void UnsolvedSceneryNtfUserCmd::set_ids(int index, ::google::protobuf::uint32 value) {
  ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.UnsolvedSceneryNtfUserCmd.ids)
}
inline void UnsolvedSceneryNtfUserCmd::add_ids(::google::protobuf::uint32 value) {
  ids_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.UnsolvedSceneryNtfUserCmd.ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
UnsolvedSceneryNtfUserCmd::ids() const {
  // @@protoc_insertion_point(field_list:Cmd.UnsolvedSceneryNtfUserCmd.ids)
  return ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
UnsolvedSceneryNtfUserCmd::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.UnsolvedSceneryNtfUserCmd.ids)
  return &ids_;
}

// -------------------------------------------------------------------

// VisibleNpc

// optional uint32 npcid = 1 [default = 0];
inline bool VisibleNpc::has_npcid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VisibleNpc::set_has_npcid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VisibleNpc::clear_has_npcid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VisibleNpc::clear_npcid() {
  npcid_ = 0u;
  clear_has_npcid();
}
inline ::google::protobuf::uint32 VisibleNpc::npcid() const {
  // @@protoc_insertion_point(field_get:Cmd.VisibleNpc.npcid)
  return npcid_;
}
inline void VisibleNpc::set_npcid(::google::protobuf::uint32 value) {
  set_has_npcid();
  npcid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.VisibleNpc.npcid)
}

// optional .Cmd.ScenePos pos = 2;
inline bool VisibleNpc::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VisibleNpc::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VisibleNpc::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VisibleNpc::clear_pos() {
  if (pos_ != NULL) pos_->::Cmd::ScenePos::Clear();
  clear_has_pos();
}
inline const ::Cmd::ScenePos& VisibleNpc::pos() const {
  // @@protoc_insertion_point(field_get:Cmd.VisibleNpc.pos)
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::Cmd::ScenePos* VisibleNpc::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::Cmd::ScenePos;
  // @@protoc_insertion_point(field_mutable:Cmd.VisibleNpc.pos)
  return pos_;
}
inline ::Cmd::ScenePos* VisibleNpc::release_pos() {
  clear_has_pos();
  ::Cmd::ScenePos* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void VisibleNpc::set_allocated_pos(::Cmd::ScenePos* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.VisibleNpc.pos)
}

// optional uint64 uniqueid = 3 [default = 0];
inline bool VisibleNpc::has_uniqueid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VisibleNpc::set_has_uniqueid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VisibleNpc::clear_has_uniqueid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VisibleNpc::clear_uniqueid() {
  uniqueid_ = GOOGLE_ULONGLONG(0);
  clear_has_uniqueid();
}
inline ::google::protobuf::uint64 VisibleNpc::uniqueid() const {
  // @@protoc_insertion_point(field_get:Cmd.VisibleNpc.uniqueid)
  return uniqueid_;
}
inline void VisibleNpc::set_uniqueid(::google::protobuf::uint64 value) {
  set_has_uniqueid();
  uniqueid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.VisibleNpc.uniqueid)
}

// -------------------------------------------------------------------

// NtfVisibleNpcUserCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool NtfVisibleNpcUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NtfVisibleNpcUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NtfVisibleNpcUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NtfVisibleNpcUserCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command NtfVisibleNpcUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfVisibleNpcUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void NtfVisibleNpcUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfVisibleNpcUserCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_NTF_VISIBLENPC];
inline bool NtfVisibleNpcUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NtfVisibleNpcUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NtfVisibleNpcUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NtfVisibleNpcUserCmd::clear_param() {
  param_ = 105;
  clear_has_param();
}
inline ::Cmd::User2Param NtfVisibleNpcUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfVisibleNpcUserCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void NtfVisibleNpcUserCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfVisibleNpcUserCmd.param)
}

// repeated .Cmd.VisibleNpc npcs = 3;
inline int NtfVisibleNpcUserCmd::npcs_size() const {
  return npcs_.size();
}
inline void NtfVisibleNpcUserCmd::clear_npcs() {
  npcs_.Clear();
}
inline const ::Cmd::VisibleNpc& NtfVisibleNpcUserCmd::npcs(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.NtfVisibleNpcUserCmd.npcs)
  return npcs_.Get(index);
}
inline ::Cmd::VisibleNpc* NtfVisibleNpcUserCmd::mutable_npcs(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.NtfVisibleNpcUserCmd.npcs)
  return npcs_.Mutable(index);
}
inline ::Cmd::VisibleNpc* NtfVisibleNpcUserCmd::add_npcs() {
  // @@protoc_insertion_point(field_add:Cmd.NtfVisibleNpcUserCmd.npcs)
  return npcs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::VisibleNpc >&
NtfVisibleNpcUserCmd::npcs() const {
  // @@protoc_insertion_point(field_list:Cmd.NtfVisibleNpcUserCmd.npcs)
  return npcs_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::VisibleNpc >*
NtfVisibleNpcUserCmd::mutable_npcs() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.NtfVisibleNpcUserCmd.npcs)
  return &npcs_;
}

// optional uint32 type = 4 [default = 0];
inline bool NtfVisibleNpcUserCmd::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NtfVisibleNpcUserCmd::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NtfVisibleNpcUserCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NtfVisibleNpcUserCmd::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 NtfVisibleNpcUserCmd::type() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfVisibleNpcUserCmd.type)
  return type_;
}
inline void NtfVisibleNpcUserCmd::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfVisibleNpcUserCmd.type)
}

// -------------------------------------------------------------------

// UpyunAuthorizationCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool UpyunAuthorizationCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpyunAuthorizationCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpyunAuthorizationCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpyunAuthorizationCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command UpyunAuthorizationCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.UpyunAuthorizationCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void UpyunAuthorizationCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UpyunAuthorizationCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_UPYUN_AUTHORIZATION];
inline bool UpyunAuthorizationCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpyunAuthorizationCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpyunAuthorizationCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpyunAuthorizationCmd::clear_param() {
  param_ = 107;
  clear_has_param();
}
inline ::Cmd::User2Param UpyunAuthorizationCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.UpyunAuthorizationCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void UpyunAuthorizationCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UpyunAuthorizationCmd.param)
}

// optional string authvalue = 3;
inline bool UpyunAuthorizationCmd::has_authvalue() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UpyunAuthorizationCmd::set_has_authvalue() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UpyunAuthorizationCmd::clear_has_authvalue() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UpyunAuthorizationCmd::clear_authvalue() {
  if (authvalue_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    authvalue_->clear();
  }
  clear_has_authvalue();
}
inline const ::std::string& UpyunAuthorizationCmd::authvalue() const {
  // @@protoc_insertion_point(field_get:Cmd.UpyunAuthorizationCmd.authvalue)
  return *authvalue_;
}
inline void UpyunAuthorizationCmd::set_authvalue(const ::std::string& value) {
  set_has_authvalue();
  if (authvalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    authvalue_ = new ::std::string;
  }
  authvalue_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.UpyunAuthorizationCmd.authvalue)
}
inline void UpyunAuthorizationCmd::set_authvalue(const char* value) {
  set_has_authvalue();
  if (authvalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    authvalue_ = new ::std::string;
  }
  authvalue_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.UpyunAuthorizationCmd.authvalue)
}
inline void UpyunAuthorizationCmd::set_authvalue(const char* value, size_t size) {
  set_has_authvalue();
  if (authvalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    authvalue_ = new ::std::string;
  }
  authvalue_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.UpyunAuthorizationCmd.authvalue)
}
inline ::std::string* UpyunAuthorizationCmd::mutable_authvalue() {
  set_has_authvalue();
  if (authvalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    authvalue_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.UpyunAuthorizationCmd.authvalue)
  return authvalue_;
}
inline ::std::string* UpyunAuthorizationCmd::release_authvalue() {
  clear_has_authvalue();
  if (authvalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = authvalue_;
    authvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UpyunAuthorizationCmd::set_allocated_authvalue(::std::string* authvalue) {
  if (authvalue_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete authvalue_;
  }
  if (authvalue) {
    set_has_authvalue();
    authvalue_ = authvalue;
  } else {
    clear_has_authvalue();
    authvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.UpyunAuthorizationCmd.authvalue)
}

// -------------------------------------------------------------------

// TransformPreDataCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool TransformPreDataCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TransformPreDataCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TransformPreDataCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TransformPreDataCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command TransformPreDataCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.TransformPreDataCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void TransformPreDataCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TransformPreDataCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_TRANSFORM_PREDATA];
inline bool TransformPreDataCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TransformPreDataCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TransformPreDataCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TransformPreDataCmd::clear_param() {
  param_ = 108;
  clear_has_param();
}
inline ::Cmd::User2Param TransformPreDataCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.TransformPreDataCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void TransformPreDataCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TransformPreDataCmd.param)
}

// repeated .Cmd.UserData datas = 3;
inline int TransformPreDataCmd::datas_size() const {
  return datas_.size();
}
inline void TransformPreDataCmd::clear_datas() {
  datas_.Clear();
}
inline const ::Cmd::UserData& TransformPreDataCmd::datas(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.TransformPreDataCmd.datas)
  return datas_.Get(index);
}
inline ::Cmd::UserData* TransformPreDataCmd::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.TransformPreDataCmd.datas)
  return datas_.Mutable(index);
}
inline ::Cmd::UserData* TransformPreDataCmd::add_datas() {
  // @@protoc_insertion_point(field_add:Cmd.TransformPreDataCmd.datas)
  return datas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::UserData >&
TransformPreDataCmd::datas() const {
  // @@protoc_insertion_point(field_list:Cmd.TransformPreDataCmd.datas)
  return datas_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::UserData >*
TransformPreDataCmd::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.TransformPreDataCmd.datas)
  return &datas_;
}

// -------------------------------------------------------------------

// UserRenameCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool UserRenameCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserRenameCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserRenameCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserRenameCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command UserRenameCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.UserRenameCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void UserRenameCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserRenameCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_USER_RENAME];
inline bool UserRenameCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserRenameCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserRenameCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserRenameCmd::clear_param() {
  param_ = 109;
  clear_has_param();
}
inline ::Cmd::User2Param UserRenameCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.UserRenameCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void UserRenameCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserRenameCmd.param)
}

// optional string name = 3;
inline bool UserRenameCmd::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserRenameCmd::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserRenameCmd::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserRenameCmd::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& UserRenameCmd::name() const {
  // @@protoc_insertion_point(field_get:Cmd.UserRenameCmd.name)
  return *name_;
}
inline void UserRenameCmd::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.UserRenameCmd.name)
}
inline void UserRenameCmd::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.UserRenameCmd.name)
}
inline void UserRenameCmd::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.UserRenameCmd.name)
}
inline ::std::string* UserRenameCmd::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.UserRenameCmd.name)
  return name_;
}
inline ::std::string* UserRenameCmd::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserRenameCmd::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.UserRenameCmd.name)
}

// optional .Cmd.ERenameErrCode code = 4 [default = ERENAME_SUCCESS];
inline bool UserRenameCmd::has_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserRenameCmd::set_has_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserRenameCmd::clear_has_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserRenameCmd::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::Cmd::ERenameErrCode UserRenameCmd::code() const {
  // @@protoc_insertion_point(field_get:Cmd.UserRenameCmd.code)
  return static_cast< ::Cmd::ERenameErrCode >(code_);
}
inline void UserRenameCmd::set_code(::Cmd::ERenameErrCode value) {
  assert(::Cmd::ERenameErrCode_IsValid(value));
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserRenameCmd.code)
}

// -------------------------------------------------------------------

// BuyZenyCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool BuyZenyCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuyZenyCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuyZenyCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuyZenyCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command BuyZenyCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.BuyZenyCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void BuyZenyCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BuyZenyCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_BUY_ZENY];
inline bool BuyZenyCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuyZenyCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuyZenyCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuyZenyCmd::clear_param() {
  param_ = 111;
  clear_has_param();
}
inline ::Cmd::User2Param BuyZenyCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.BuyZenyCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void BuyZenyCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BuyZenyCmd.param)
}

// optional uint32 bcoin = 3;
inline bool BuyZenyCmd::has_bcoin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BuyZenyCmd::set_has_bcoin() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BuyZenyCmd::clear_has_bcoin() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BuyZenyCmd::clear_bcoin() {
  bcoin_ = 0u;
  clear_has_bcoin();
}
inline ::google::protobuf::uint32 BuyZenyCmd::bcoin() const {
  // @@protoc_insertion_point(field_get:Cmd.BuyZenyCmd.bcoin)
  return bcoin_;
}
inline void BuyZenyCmd::set_bcoin(::google::protobuf::uint32 value) {
  set_has_bcoin();
  bcoin_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BuyZenyCmd.bcoin)
}

// optional uint64 zeny = 4;
inline bool BuyZenyCmd::has_zeny() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BuyZenyCmd::set_has_zeny() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BuyZenyCmd::clear_has_zeny() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BuyZenyCmd::clear_zeny() {
  zeny_ = GOOGLE_ULONGLONG(0);
  clear_has_zeny();
}
inline ::google::protobuf::uint64 BuyZenyCmd::zeny() const {
  // @@protoc_insertion_point(field_get:Cmd.BuyZenyCmd.zeny)
  return zeny_;
}
inline void BuyZenyCmd::set_zeny(::google::protobuf::uint64 value) {
  set_has_zeny();
  zeny_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BuyZenyCmd.zeny)
}

// optional bool ret = 5;
inline bool BuyZenyCmd::has_ret() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BuyZenyCmd::set_has_ret() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BuyZenyCmd::clear_has_ret() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BuyZenyCmd::clear_ret() {
  ret_ = false;
  clear_has_ret();
}
inline bool BuyZenyCmd::ret() const {
  // @@protoc_insertion_point(field_get:Cmd.BuyZenyCmd.ret)
  return ret_;
}
inline void BuyZenyCmd::set_ret(bool value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BuyZenyCmd.ret)
}

// -------------------------------------------------------------------

// CallTeamerUserCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool CallTeamerUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CallTeamerUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CallTeamerUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CallTeamerUserCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command CallTeamerUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.CallTeamerUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void CallTeamerUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CallTeamerUserCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_CALL_TEAMER];
inline bool CallTeamerUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CallTeamerUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CallTeamerUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CallTeamerUserCmd::clear_param() {
  param_ = 112;
  clear_has_param();
}
inline ::Cmd::User2Param CallTeamerUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.CallTeamerUserCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void CallTeamerUserCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CallTeamerUserCmd.param)
}

// optional uint64 masterid = 3 [default = 0];
inline bool CallTeamerUserCmd::has_masterid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CallTeamerUserCmd::set_has_masterid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CallTeamerUserCmd::clear_has_masterid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CallTeamerUserCmd::clear_masterid() {
  masterid_ = GOOGLE_ULONGLONG(0);
  clear_has_masterid();
}
inline ::google::protobuf::uint64 CallTeamerUserCmd::masterid() const {
  // @@protoc_insertion_point(field_get:Cmd.CallTeamerUserCmd.masterid)
  return masterid_;
}
inline void CallTeamerUserCmd::set_masterid(::google::protobuf::uint64 value) {
  set_has_masterid();
  masterid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CallTeamerUserCmd.masterid)
}

// optional string sign = 4;
inline bool CallTeamerUserCmd::has_sign() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CallTeamerUserCmd::set_has_sign() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CallTeamerUserCmd::clear_has_sign() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CallTeamerUserCmd::clear_sign() {
  if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_->clear();
  }
  clear_has_sign();
}
inline const ::std::string& CallTeamerUserCmd::sign() const {
  // @@protoc_insertion_point(field_get:Cmd.CallTeamerUserCmd.sign)
  return *sign_;
}
inline void CallTeamerUserCmd::set_sign(const ::std::string& value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.CallTeamerUserCmd.sign)
}
inline void CallTeamerUserCmd::set_sign(const char* value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.CallTeamerUserCmd.sign)
}
inline void CallTeamerUserCmd::set_sign(const char* value, size_t size) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_ = new ::std::string;
  }
  sign_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.CallTeamerUserCmd.sign)
}
inline ::std::string* CallTeamerUserCmd::mutable_sign() {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.CallTeamerUserCmd.sign)
  return sign_;
}
inline ::std::string* CallTeamerUserCmd::release_sign() {
  clear_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sign_;
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CallTeamerUserCmd::set_allocated_sign(::std::string* sign) {
  if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sign_;
  }
  if (sign) {
    set_has_sign();
    sign_ = sign;
  } else {
    clear_has_sign();
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.CallTeamerUserCmd.sign)
}

// optional uint32 time = 5 [default = 0];
inline bool CallTeamerUserCmd::has_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CallTeamerUserCmd::set_has_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CallTeamerUserCmd::clear_has_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CallTeamerUserCmd::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 CallTeamerUserCmd::time() const {
  // @@protoc_insertion_point(field_get:Cmd.CallTeamerUserCmd.time)
  return time_;
}
inline void CallTeamerUserCmd::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CallTeamerUserCmd.time)
}

// optional string username = 6;
inline bool CallTeamerUserCmd::has_username() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CallTeamerUserCmd::set_has_username() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CallTeamerUserCmd::clear_has_username() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CallTeamerUserCmd::clear_username() {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& CallTeamerUserCmd::username() const {
  // @@protoc_insertion_point(field_get:Cmd.CallTeamerUserCmd.username)
  return *username_;
}
inline void CallTeamerUserCmd::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.CallTeamerUserCmd.username)
}
inline void CallTeamerUserCmd::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.CallTeamerUserCmd.username)
}
inline void CallTeamerUserCmd::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.CallTeamerUserCmd.username)
}
inline ::std::string* CallTeamerUserCmd::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.CallTeamerUserCmd.username)
  return username_;
}
inline ::std::string* CallTeamerUserCmd::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CallTeamerUserCmd::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.CallTeamerUserCmd.username)
}

// optional uint32 mapid = 7 [default = 0];
inline bool CallTeamerUserCmd::has_mapid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CallTeamerUserCmd::set_has_mapid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CallTeamerUserCmd::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CallTeamerUserCmd::clear_mapid() {
  mapid_ = 0u;
  clear_has_mapid();
}
inline ::google::protobuf::uint32 CallTeamerUserCmd::mapid() const {
  // @@protoc_insertion_point(field_get:Cmd.CallTeamerUserCmd.mapid)
  return mapid_;
}
inline void CallTeamerUserCmd::set_mapid(::google::protobuf::uint32 value) {
  set_has_mapid();
  mapid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CallTeamerUserCmd.mapid)
}

// optional .Cmd.ScenePos pos = 8;
inline bool CallTeamerUserCmd::has_pos() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CallTeamerUserCmd::set_has_pos() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CallTeamerUserCmd::clear_has_pos() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CallTeamerUserCmd::clear_pos() {
  if (pos_ != NULL) pos_->::Cmd::ScenePos::Clear();
  clear_has_pos();
}
inline const ::Cmd::ScenePos& CallTeamerUserCmd::pos() const {
  // @@protoc_insertion_point(field_get:Cmd.CallTeamerUserCmd.pos)
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::Cmd::ScenePos* CallTeamerUserCmd::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::Cmd::ScenePos;
  // @@protoc_insertion_point(field_mutable:Cmd.CallTeamerUserCmd.pos)
  return pos_;
}
inline ::Cmd::ScenePos* CallTeamerUserCmd::release_pos() {
  clear_has_pos();
  ::Cmd::ScenePos* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void CallTeamerUserCmd::set_allocated_pos(::Cmd::ScenePos* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.CallTeamerUserCmd.pos)
}

// -------------------------------------------------------------------

// CallTeamerReplyUserCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool CallTeamerReplyUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CallTeamerReplyUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CallTeamerReplyUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CallTeamerReplyUserCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command CallTeamerReplyUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.CallTeamerReplyUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void CallTeamerReplyUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CallTeamerReplyUserCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_CALL_TEAMER_JOIN];
inline bool CallTeamerReplyUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CallTeamerReplyUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CallTeamerReplyUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CallTeamerReplyUserCmd::clear_param() {
  param_ = 113;
  clear_has_param();
}
inline ::Cmd::User2Param CallTeamerReplyUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.CallTeamerReplyUserCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void CallTeamerReplyUserCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CallTeamerReplyUserCmd.param)
}

// optional uint64 masterid = 3 [default = 0];
inline bool CallTeamerReplyUserCmd::has_masterid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CallTeamerReplyUserCmd::set_has_masterid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CallTeamerReplyUserCmd::clear_has_masterid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CallTeamerReplyUserCmd::clear_masterid() {
  masterid_ = GOOGLE_ULONGLONG(0);
  clear_has_masterid();
}
inline ::google::protobuf::uint64 CallTeamerReplyUserCmd::masterid() const {
  // @@protoc_insertion_point(field_get:Cmd.CallTeamerReplyUserCmd.masterid)
  return masterid_;
}
inline void CallTeamerReplyUserCmd::set_masterid(::google::protobuf::uint64 value) {
  set_has_masterid();
  masterid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CallTeamerReplyUserCmd.masterid)
}

// optional string sign = 4;
inline bool CallTeamerReplyUserCmd::has_sign() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CallTeamerReplyUserCmd::set_has_sign() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CallTeamerReplyUserCmd::clear_has_sign() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CallTeamerReplyUserCmd::clear_sign() {
  if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_->clear();
  }
  clear_has_sign();
}
inline const ::std::string& CallTeamerReplyUserCmd::sign() const {
  // @@protoc_insertion_point(field_get:Cmd.CallTeamerReplyUserCmd.sign)
  return *sign_;
}
inline void CallTeamerReplyUserCmd::set_sign(const ::std::string& value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.CallTeamerReplyUserCmd.sign)
}
inline void CallTeamerReplyUserCmd::set_sign(const char* value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.CallTeamerReplyUserCmd.sign)
}
inline void CallTeamerReplyUserCmd::set_sign(const char* value, size_t size) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_ = new ::std::string;
  }
  sign_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.CallTeamerReplyUserCmd.sign)
}
inline ::std::string* CallTeamerReplyUserCmd::mutable_sign() {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.CallTeamerReplyUserCmd.sign)
  return sign_;
}
inline ::std::string* CallTeamerReplyUserCmd::release_sign() {
  clear_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sign_;
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CallTeamerReplyUserCmd::set_allocated_sign(::std::string* sign) {
  if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sign_;
  }
  if (sign) {
    set_has_sign();
    sign_ = sign;
  } else {
    clear_has_sign();
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.CallTeamerReplyUserCmd.sign)
}

// optional uint32 time = 5 [default = 0];
inline bool CallTeamerReplyUserCmd::has_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CallTeamerReplyUserCmd::set_has_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CallTeamerReplyUserCmd::clear_has_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CallTeamerReplyUserCmd::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 CallTeamerReplyUserCmd::time() const {
  // @@protoc_insertion_point(field_get:Cmd.CallTeamerReplyUserCmd.time)
  return time_;
}
inline void CallTeamerReplyUserCmd::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CallTeamerReplyUserCmd.time)
}

// optional uint32 mapid = 6 [default = 0];
inline bool CallTeamerReplyUserCmd::has_mapid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CallTeamerReplyUserCmd::set_has_mapid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CallTeamerReplyUserCmd::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CallTeamerReplyUserCmd::clear_mapid() {
  mapid_ = 0u;
  clear_has_mapid();
}
inline ::google::protobuf::uint32 CallTeamerReplyUserCmd::mapid() const {
  // @@protoc_insertion_point(field_get:Cmd.CallTeamerReplyUserCmd.mapid)
  return mapid_;
}
inline void CallTeamerReplyUserCmd::set_mapid(::google::protobuf::uint32 value) {
  set_has_mapid();
  mapid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CallTeamerReplyUserCmd.mapid)
}

// optional .Cmd.ScenePos pos = 7;
inline bool CallTeamerReplyUserCmd::has_pos() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CallTeamerReplyUserCmd::set_has_pos() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CallTeamerReplyUserCmd::clear_has_pos() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CallTeamerReplyUserCmd::clear_pos() {
  if (pos_ != NULL) pos_->::Cmd::ScenePos::Clear();
  clear_has_pos();
}
inline const ::Cmd::ScenePos& CallTeamerReplyUserCmd::pos() const {
  // @@protoc_insertion_point(field_get:Cmd.CallTeamerReplyUserCmd.pos)
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::Cmd::ScenePos* CallTeamerReplyUserCmd::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::Cmd::ScenePos;
  // @@protoc_insertion_point(field_mutable:Cmd.CallTeamerReplyUserCmd.pos)
  return pos_;
}
inline ::Cmd::ScenePos* CallTeamerReplyUserCmd::release_pos() {
  clear_has_pos();
  ::Cmd::ScenePos* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void CallTeamerReplyUserCmd::set_allocated_pos(::Cmd::ScenePos* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.CallTeamerReplyUserCmd.pos)
}

// -------------------------------------------------------------------

// SpecialEffectCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool SpecialEffectCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SpecialEffectCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SpecialEffectCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SpecialEffectCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command SpecialEffectCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.SpecialEffectCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void SpecialEffectCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SpecialEffectCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_SPECIAL_EFFECT];
inline bool SpecialEffectCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SpecialEffectCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SpecialEffectCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SpecialEffectCmd::clear_param() {
  param_ = 116;
  clear_has_param();
}
inline ::Cmd::User2Param SpecialEffectCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.SpecialEffectCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void SpecialEffectCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SpecialEffectCmd.param)
}

// optional uint32 dramaid = 3;
inline bool SpecialEffectCmd::has_dramaid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SpecialEffectCmd::set_has_dramaid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SpecialEffectCmd::clear_has_dramaid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SpecialEffectCmd::clear_dramaid() {
  dramaid_ = 0u;
  clear_has_dramaid();
}
inline ::google::protobuf::uint32 SpecialEffectCmd::dramaid() const {
  // @@protoc_insertion_point(field_get:Cmd.SpecialEffectCmd.dramaid)
  return dramaid_;
}
inline void SpecialEffectCmd::set_dramaid(::google::protobuf::uint32 value) {
  set_has_dramaid();
  dramaid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SpecialEffectCmd.dramaid)
}

// optional uint32 starttime = 4;
inline bool SpecialEffectCmd::has_starttime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SpecialEffectCmd::set_has_starttime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SpecialEffectCmd::clear_has_starttime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SpecialEffectCmd::clear_starttime() {
  starttime_ = 0u;
  clear_has_starttime();
}
inline ::google::protobuf::uint32 SpecialEffectCmd::starttime() const {
  // @@protoc_insertion_point(field_get:Cmd.SpecialEffectCmd.starttime)
  return starttime_;
}
inline void SpecialEffectCmd::set_starttime(::google::protobuf::uint32 value) {
  set_has_starttime();
  starttime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SpecialEffectCmd.starttime)
}

// optional uint32 times = 5 [default = 0];
inline bool SpecialEffectCmd::has_times() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SpecialEffectCmd::set_has_times() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SpecialEffectCmd::clear_has_times() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SpecialEffectCmd::clear_times() {
  times_ = 0u;
  clear_has_times();
}
inline ::google::protobuf::uint32 SpecialEffectCmd::times() const {
  // @@protoc_insertion_point(field_get:Cmd.SpecialEffectCmd.times)
  return times_;
}
inline void SpecialEffectCmd::set_times(::google::protobuf::uint32 value) {
  set_has_times();
  times_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SpecialEffectCmd.times)
}

// -------------------------------------------------------------------

// MarriageProposalCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool MarriageProposalCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MarriageProposalCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MarriageProposalCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MarriageProposalCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command MarriageProposalCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.MarriageProposalCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void MarriageProposalCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MarriageProposalCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_MARRIAGE_PROPOSAL];
inline bool MarriageProposalCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MarriageProposalCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MarriageProposalCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MarriageProposalCmd::clear_param() {
  param_ = 117;
  clear_has_param();
}
inline ::Cmd::User2Param MarriageProposalCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.MarriageProposalCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void MarriageProposalCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MarriageProposalCmd.param)
}

// optional uint64 masterid = 3 [default = 0];
inline bool MarriageProposalCmd::has_masterid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MarriageProposalCmd::set_has_masterid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MarriageProposalCmd::clear_has_masterid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MarriageProposalCmd::clear_masterid() {
  masterid_ = GOOGLE_ULONGLONG(0);
  clear_has_masterid();
}
inline ::google::protobuf::uint64 MarriageProposalCmd::masterid() const {
  // @@protoc_insertion_point(field_get:Cmd.MarriageProposalCmd.masterid)
  return masterid_;
}
inline void MarriageProposalCmd::set_masterid(::google::protobuf::uint64 value) {
  set_has_masterid();
  masterid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MarriageProposalCmd.masterid)
}

// optional uint32 itemid = 4 [default = 0];
inline bool MarriageProposalCmd::has_itemid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MarriageProposalCmd::set_has_itemid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MarriageProposalCmd::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MarriageProposalCmd::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 MarriageProposalCmd::itemid() const {
  // @@protoc_insertion_point(field_get:Cmd.MarriageProposalCmd.itemid)
  return itemid_;
}
inline void MarriageProposalCmd::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MarriageProposalCmd.itemid)
}

// optional uint32 time = 5 [default = 0];
inline bool MarriageProposalCmd::has_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MarriageProposalCmd::set_has_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MarriageProposalCmd::clear_has_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MarriageProposalCmd::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 MarriageProposalCmd::time() const {
  // @@protoc_insertion_point(field_get:Cmd.MarriageProposalCmd.time)
  return time_;
}
inline void MarriageProposalCmd::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MarriageProposalCmd.time)
}

// optional string mastername = 6;
inline bool MarriageProposalCmd::has_mastername() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MarriageProposalCmd::set_has_mastername() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MarriageProposalCmd::clear_has_mastername() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MarriageProposalCmd::clear_mastername() {
  if (mastername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mastername_->clear();
  }
  clear_has_mastername();
}
inline const ::std::string& MarriageProposalCmd::mastername() const {
  // @@protoc_insertion_point(field_get:Cmd.MarriageProposalCmd.mastername)
  return *mastername_;
}
inline void MarriageProposalCmd::set_mastername(const ::std::string& value) {
  set_has_mastername();
  if (mastername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mastername_ = new ::std::string;
  }
  mastername_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.MarriageProposalCmd.mastername)
}
inline void MarriageProposalCmd::set_mastername(const char* value) {
  set_has_mastername();
  if (mastername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mastername_ = new ::std::string;
  }
  mastername_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.MarriageProposalCmd.mastername)
}
inline void MarriageProposalCmd::set_mastername(const char* value, size_t size) {
  set_has_mastername();
  if (mastername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mastername_ = new ::std::string;
  }
  mastername_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.MarriageProposalCmd.mastername)
}
inline ::std::string* MarriageProposalCmd::mutable_mastername() {
  set_has_mastername();
  if (mastername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mastername_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.MarriageProposalCmd.mastername)
  return mastername_;
}
inline ::std::string* MarriageProposalCmd::release_mastername() {
  clear_has_mastername();
  if (mastername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mastername_;
    mastername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MarriageProposalCmd::set_allocated_mastername(::std::string* mastername) {
  if (mastername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mastername_;
  }
  if (mastername) {
    set_has_mastername();
    mastername_ = mastername;
  } else {
    clear_has_mastername();
    mastername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.MarriageProposalCmd.mastername)
}

// optional bytes sign = 7;
inline bool MarriageProposalCmd::has_sign() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MarriageProposalCmd::set_has_sign() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MarriageProposalCmd::clear_has_sign() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MarriageProposalCmd::clear_sign() {
  if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_->clear();
  }
  clear_has_sign();
}
inline const ::std::string& MarriageProposalCmd::sign() const {
  // @@protoc_insertion_point(field_get:Cmd.MarriageProposalCmd.sign)
  return *sign_;
}
inline void MarriageProposalCmd::set_sign(const ::std::string& value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.MarriageProposalCmd.sign)
}
inline void MarriageProposalCmd::set_sign(const char* value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.MarriageProposalCmd.sign)
}
inline void MarriageProposalCmd::set_sign(const void* value, size_t size) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_ = new ::std::string;
  }
  sign_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.MarriageProposalCmd.sign)
}
inline ::std::string* MarriageProposalCmd::mutable_sign() {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.MarriageProposalCmd.sign)
  return sign_;
}
inline ::std::string* MarriageProposalCmd::release_sign() {
  clear_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sign_;
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MarriageProposalCmd::set_allocated_sign(::std::string* sign) {
  if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sign_;
  }
  if (sign) {
    set_has_sign();
    sign_ = sign;
  } else {
    clear_has_sign();
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.MarriageProposalCmd.sign)
}

// -------------------------------------------------------------------

// MarriageProposalReplyCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool MarriageProposalReplyCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MarriageProposalReplyCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MarriageProposalReplyCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MarriageProposalReplyCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command MarriageProposalReplyCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.MarriageProposalReplyCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void MarriageProposalReplyCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MarriageProposalReplyCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_MARRIAGE_PROPOSAL_REPLY];
inline bool MarriageProposalReplyCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MarriageProposalReplyCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MarriageProposalReplyCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MarriageProposalReplyCmd::clear_param() {
  param_ = 118;
  clear_has_param();
}
inline ::Cmd::User2Param MarriageProposalReplyCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.MarriageProposalReplyCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void MarriageProposalReplyCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MarriageProposalReplyCmd.param)
}

// optional uint64 masterid = 3 [default = 0];
inline bool MarriageProposalReplyCmd::has_masterid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MarriageProposalReplyCmd::set_has_masterid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MarriageProposalReplyCmd::clear_has_masterid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MarriageProposalReplyCmd::clear_masterid() {
  masterid_ = GOOGLE_ULONGLONG(0);
  clear_has_masterid();
}
inline ::google::protobuf::uint64 MarriageProposalReplyCmd::masterid() const {
  // @@protoc_insertion_point(field_get:Cmd.MarriageProposalReplyCmd.masterid)
  return masterid_;
}
inline void MarriageProposalReplyCmd::set_masterid(::google::protobuf::uint64 value) {
  set_has_masterid();
  masterid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MarriageProposalReplyCmd.masterid)
}

// optional .Cmd.EProposalReply reply = 4 [default = EPROPOSALREPLY_YES];
inline bool MarriageProposalReplyCmd::has_reply() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MarriageProposalReplyCmd::set_has_reply() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MarriageProposalReplyCmd::clear_has_reply() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MarriageProposalReplyCmd::clear_reply() {
  reply_ = 0;
  clear_has_reply();
}
inline ::Cmd::EProposalReply MarriageProposalReplyCmd::reply() const {
  // @@protoc_insertion_point(field_get:Cmd.MarriageProposalReplyCmd.reply)
  return static_cast< ::Cmd::EProposalReply >(reply_);
}
inline void MarriageProposalReplyCmd::set_reply(::Cmd::EProposalReply value) {
  assert(::Cmd::EProposalReply_IsValid(value));
  set_has_reply();
  reply_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MarriageProposalReplyCmd.reply)
}

// optional uint32 time = 5 [default = 0];
inline bool MarriageProposalReplyCmd::has_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MarriageProposalReplyCmd::set_has_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MarriageProposalReplyCmd::clear_has_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MarriageProposalReplyCmd::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 MarriageProposalReplyCmd::time() const {
  // @@protoc_insertion_point(field_get:Cmd.MarriageProposalReplyCmd.time)
  return time_;
}
inline void MarriageProposalReplyCmd::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MarriageProposalReplyCmd.time)
}

// optional string sign = 6;
inline bool MarriageProposalReplyCmd::has_sign() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MarriageProposalReplyCmd::set_has_sign() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MarriageProposalReplyCmd::clear_has_sign() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MarriageProposalReplyCmd::clear_sign() {
  if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_->clear();
  }
  clear_has_sign();
}
inline const ::std::string& MarriageProposalReplyCmd::sign() const {
  // @@protoc_insertion_point(field_get:Cmd.MarriageProposalReplyCmd.sign)
  return *sign_;
}
inline void MarriageProposalReplyCmd::set_sign(const ::std::string& value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.MarriageProposalReplyCmd.sign)
}
inline void MarriageProposalReplyCmd::set_sign(const char* value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.MarriageProposalReplyCmd.sign)
}
inline void MarriageProposalReplyCmd::set_sign(const char* value, size_t size) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_ = new ::std::string;
  }
  sign_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.MarriageProposalReplyCmd.sign)
}
inline ::std::string* MarriageProposalReplyCmd::mutable_sign() {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.MarriageProposalReplyCmd.sign)
  return sign_;
}
inline ::std::string* MarriageProposalReplyCmd::release_sign() {
  clear_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sign_;
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MarriageProposalReplyCmd::set_allocated_sign(::std::string* sign) {
  if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sign_;
  }
  if (sign) {
    set_has_sign();
    sign_ = sign;
  } else {
    clear_has_sign();
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.MarriageProposalReplyCmd.sign)
}

// -------------------------------------------------------------------

// UploadWeddingPhotoUserCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool UploadWeddingPhotoUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UploadWeddingPhotoUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UploadWeddingPhotoUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UploadWeddingPhotoUserCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command UploadWeddingPhotoUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.UploadWeddingPhotoUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void UploadWeddingPhotoUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UploadWeddingPhotoUserCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_UPLOAD_WEDDING_PHOTO];
inline bool UploadWeddingPhotoUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UploadWeddingPhotoUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UploadWeddingPhotoUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UploadWeddingPhotoUserCmd::clear_param() {
  param_ = 119;
  clear_has_param();
}
inline ::Cmd::User2Param UploadWeddingPhotoUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.UploadWeddingPhotoUserCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void UploadWeddingPhotoUserCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UploadWeddingPhotoUserCmd.param)
}

// optional string itemguid = 3;
inline bool UploadWeddingPhotoUserCmd::has_itemguid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UploadWeddingPhotoUserCmd::set_has_itemguid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UploadWeddingPhotoUserCmd::clear_has_itemguid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UploadWeddingPhotoUserCmd::clear_itemguid() {
  if (itemguid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemguid_->clear();
  }
  clear_has_itemguid();
}
inline const ::std::string& UploadWeddingPhotoUserCmd::itemguid() const {
  // @@protoc_insertion_point(field_get:Cmd.UploadWeddingPhotoUserCmd.itemguid)
  return *itemguid_;
}
inline void UploadWeddingPhotoUserCmd::set_itemguid(const ::std::string& value) {
  set_has_itemguid();
  if (itemguid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemguid_ = new ::std::string;
  }
  itemguid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.UploadWeddingPhotoUserCmd.itemguid)
}
inline void UploadWeddingPhotoUserCmd::set_itemguid(const char* value) {
  set_has_itemguid();
  if (itemguid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemguid_ = new ::std::string;
  }
  itemguid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.UploadWeddingPhotoUserCmd.itemguid)
}
inline void UploadWeddingPhotoUserCmd::set_itemguid(const char* value, size_t size) {
  set_has_itemguid();
  if (itemguid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemguid_ = new ::std::string;
  }
  itemguid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.UploadWeddingPhotoUserCmd.itemguid)
}
inline ::std::string* UploadWeddingPhotoUserCmd::mutable_itemguid() {
  set_has_itemguid();
  if (itemguid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemguid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.UploadWeddingPhotoUserCmd.itemguid)
  return itemguid_;
}
inline ::std::string* UploadWeddingPhotoUserCmd::release_itemguid() {
  clear_has_itemguid();
  if (itemguid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = itemguid_;
    itemguid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UploadWeddingPhotoUserCmd::set_allocated_itemguid(::std::string* itemguid) {
  if (itemguid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete itemguid_;
  }
  if (itemguid) {
    set_has_itemguid();
    itemguid_ = itemguid;
  } else {
    clear_has_itemguid();
    itemguid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.UploadWeddingPhotoUserCmd.itemguid)
}

// optional uint32 index = 4 [default = 0];
inline bool UploadWeddingPhotoUserCmd::has_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UploadWeddingPhotoUserCmd::set_has_index() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UploadWeddingPhotoUserCmd::clear_has_index() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UploadWeddingPhotoUserCmd::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 UploadWeddingPhotoUserCmd::index() const {
  // @@protoc_insertion_point(field_get:Cmd.UploadWeddingPhotoUserCmd.index)
  return index_;
}
inline void UploadWeddingPhotoUserCmd::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UploadWeddingPhotoUserCmd.index)
}

// optional uint32 time = 5 [default = 0];
inline bool UploadWeddingPhotoUserCmd::has_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UploadWeddingPhotoUserCmd::set_has_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UploadWeddingPhotoUserCmd::clear_has_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UploadWeddingPhotoUserCmd::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 UploadWeddingPhotoUserCmd::time() const {
  // @@protoc_insertion_point(field_get:Cmd.UploadWeddingPhotoUserCmd.time)
  return time_;
}
inline void UploadWeddingPhotoUserCmd::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UploadWeddingPhotoUserCmd.time)
}

// -------------------------------------------------------------------

// MarriageProposalSuccessCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool MarriageProposalSuccessCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MarriageProposalSuccessCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MarriageProposalSuccessCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MarriageProposalSuccessCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command MarriageProposalSuccessCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.MarriageProposalSuccessCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void MarriageProposalSuccessCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MarriageProposalSuccessCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_MARRIAGE_PROPOSAL_SUCCESS];
inline bool MarriageProposalSuccessCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MarriageProposalSuccessCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MarriageProposalSuccessCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MarriageProposalSuccessCmd::clear_param() {
  param_ = 120;
  clear_has_param();
}
inline ::Cmd::User2Param MarriageProposalSuccessCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.MarriageProposalSuccessCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void MarriageProposalSuccessCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MarriageProposalSuccessCmd.param)
}

// optional uint64 charid = 3 [default = 0];
inline bool MarriageProposalSuccessCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MarriageProposalSuccessCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MarriageProposalSuccessCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MarriageProposalSuccessCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 MarriageProposalSuccessCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.MarriageProposalSuccessCmd.charid)
  return charid_;
}
inline void MarriageProposalSuccessCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MarriageProposalSuccessCmd.charid)
}

// optional bool ismaster = 4 [default = true];
inline bool MarriageProposalSuccessCmd::has_ismaster() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MarriageProposalSuccessCmd::set_has_ismaster() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MarriageProposalSuccessCmd::clear_has_ismaster() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MarriageProposalSuccessCmd::clear_ismaster() {
  ismaster_ = true;
  clear_has_ismaster();
}
inline bool MarriageProposalSuccessCmd::ismaster() const {
  // @@protoc_insertion_point(field_get:Cmd.MarriageProposalSuccessCmd.ismaster)
  return ismaster_;
}
inline void MarriageProposalSuccessCmd::set_ismaster(bool value) {
  set_has_ismaster();
  ismaster_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MarriageProposalSuccessCmd.ismaster)
}

// -------------------------------------------------------------------

// InviteeWeddingStartNtfUserCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool InviteeWeddingStartNtfUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InviteeWeddingStartNtfUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InviteeWeddingStartNtfUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InviteeWeddingStartNtfUserCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command InviteeWeddingStartNtfUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.InviteeWeddingStartNtfUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void InviteeWeddingStartNtfUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.InviteeWeddingStartNtfUserCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_INVITEE_WEDDING_START_NTF];
inline bool InviteeWeddingStartNtfUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InviteeWeddingStartNtfUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InviteeWeddingStartNtfUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InviteeWeddingStartNtfUserCmd::clear_param() {
  param_ = 121;
  clear_has_param();
}
inline ::Cmd::User2Param InviteeWeddingStartNtfUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.InviteeWeddingStartNtfUserCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void InviteeWeddingStartNtfUserCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.InviteeWeddingStartNtfUserCmd.param)
}

// optional string itemguid = 3;
inline bool InviteeWeddingStartNtfUserCmd::has_itemguid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InviteeWeddingStartNtfUserCmd::set_has_itemguid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InviteeWeddingStartNtfUserCmd::clear_has_itemguid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InviteeWeddingStartNtfUserCmd::clear_itemguid() {
  if (itemguid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemguid_->clear();
  }
  clear_has_itemguid();
}
inline const ::std::string& InviteeWeddingStartNtfUserCmd::itemguid() const {
  // @@protoc_insertion_point(field_get:Cmd.InviteeWeddingStartNtfUserCmd.itemguid)
  return *itemguid_;
}
inline void InviteeWeddingStartNtfUserCmd::set_itemguid(const ::std::string& value) {
  set_has_itemguid();
  if (itemguid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemguid_ = new ::std::string;
  }
  itemguid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.InviteeWeddingStartNtfUserCmd.itemguid)
}
inline void InviteeWeddingStartNtfUserCmd::set_itemguid(const char* value) {
  set_has_itemguid();
  if (itemguid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemguid_ = new ::std::string;
  }
  itemguid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.InviteeWeddingStartNtfUserCmd.itemguid)
}
inline void InviteeWeddingStartNtfUserCmd::set_itemguid(const char* value, size_t size) {
  set_has_itemguid();
  if (itemguid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemguid_ = new ::std::string;
  }
  itemguid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.InviteeWeddingStartNtfUserCmd.itemguid)
}
inline ::std::string* InviteeWeddingStartNtfUserCmd::mutable_itemguid() {
  set_has_itemguid();
  if (itemguid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemguid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.InviteeWeddingStartNtfUserCmd.itemguid)
  return itemguid_;
}
inline ::std::string* InviteeWeddingStartNtfUserCmd::release_itemguid() {
  clear_has_itemguid();
  if (itemguid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = itemguid_;
    itemguid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void InviteeWeddingStartNtfUserCmd::set_allocated_itemguid(::std::string* itemguid) {
  if (itemguid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete itemguid_;
  }
  if (itemguid) {
    set_has_itemguid();
    itemguid_ = itemguid;
  } else {
    clear_has_itemguid();
    itemguid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.InviteeWeddingStartNtfUserCmd.itemguid)
}

// -------------------------------------------------------------------

// KFCShareUserCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool KFCShareUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KFCShareUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KFCShareUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KFCShareUserCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command KFCShareUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.KFCShareUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void KFCShareUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.KFCShareUserCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_KFC_SHARE];
inline bool KFCShareUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KFCShareUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void KFCShareUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void KFCShareUserCmd::clear_param() {
  param_ = 128;
  clear_has_param();
}
inline ::Cmd::User2Param KFCShareUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.KFCShareUserCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void KFCShareUserCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.KFCShareUserCmd.param)
}

// -------------------------------------------------------------------

// CheckRelationUserCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool CheckRelationUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CheckRelationUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CheckRelationUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CheckRelationUserCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command CheckRelationUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.CheckRelationUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void CheckRelationUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CheckRelationUserCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_CHECK_RELATION];
inline bool CheckRelationUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CheckRelationUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CheckRelationUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CheckRelationUserCmd::clear_param() {
  param_ = 130;
  clear_has_param();
}
inline ::Cmd::User2Param CheckRelationUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.CheckRelationUserCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void CheckRelationUserCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CheckRelationUserCmd.param)
}

// optional uint64 charid = 3 [default = 0];
inline bool CheckRelationUserCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CheckRelationUserCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CheckRelationUserCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CheckRelationUserCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 CheckRelationUserCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.CheckRelationUserCmd.charid)
  return charid_;
}
inline void CheckRelationUserCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CheckRelationUserCmd.charid)
}

// optional .Cmd.ESocialRelation etype = 4 [default = ESOCIALRELATION_MIN];
inline bool CheckRelationUserCmd::has_etype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CheckRelationUserCmd::set_has_etype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CheckRelationUserCmd::clear_has_etype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CheckRelationUserCmd::clear_etype() {
  etype_ = 1;
  clear_has_etype();
}
inline ::Cmd::ESocialRelation CheckRelationUserCmd::etype() const {
  // @@protoc_insertion_point(field_get:Cmd.CheckRelationUserCmd.etype)
  return static_cast< ::Cmd::ESocialRelation >(etype_);
}
inline void CheckRelationUserCmd::set_etype(::Cmd::ESocialRelation value) {
  assert(::Cmd::ESocialRelation_IsValid(value));
  set_has_etype();
  etype_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CheckRelationUserCmd.etype)
}

// optional bool ret = 5 [default = false];
inline bool CheckRelationUserCmd::has_ret() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CheckRelationUserCmd::set_has_ret() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CheckRelationUserCmd::clear_has_ret() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CheckRelationUserCmd::clear_ret() {
  ret_ = false;
  clear_has_ret();
}
inline bool CheckRelationUserCmd::ret() const {
  // @@protoc_insertion_point(field_get:Cmd.CheckRelationUserCmd.ret)
  return ret_;
}
inline void CheckRelationUserCmd::set_ret(bool value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CheckRelationUserCmd.ret)
}

// -------------------------------------------------------------------

// TwinsActionUserCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool TwinsActionUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TwinsActionUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TwinsActionUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TwinsActionUserCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command TwinsActionUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.TwinsActionUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void TwinsActionUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TwinsActionUserCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_TWINS_ACTION];
inline bool TwinsActionUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TwinsActionUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TwinsActionUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TwinsActionUserCmd::clear_param() {
  param_ = 129;
  clear_has_param();
}
inline ::Cmd::User2Param TwinsActionUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.TwinsActionUserCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void TwinsActionUserCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TwinsActionUserCmd.param)
}

// optional uint64 userid = 3 [default = 0];
inline bool TwinsActionUserCmd::has_userid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TwinsActionUserCmd::set_has_userid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TwinsActionUserCmd::clear_has_userid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TwinsActionUserCmd::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::uint64 TwinsActionUserCmd::userid() const {
  // @@protoc_insertion_point(field_get:Cmd.TwinsActionUserCmd.userid)
  return userid_;
}
inline void TwinsActionUserCmd::set_userid(::google::protobuf::uint64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TwinsActionUserCmd.userid)
}

// optional uint32 actionid = 4 [default = 0];
inline bool TwinsActionUserCmd::has_actionid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TwinsActionUserCmd::set_has_actionid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TwinsActionUserCmd::clear_has_actionid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TwinsActionUserCmd::clear_actionid() {
  actionid_ = 0u;
  clear_has_actionid();
}
inline ::google::protobuf::uint32 TwinsActionUserCmd::actionid() const {
  // @@protoc_insertion_point(field_get:Cmd.TwinsActionUserCmd.actionid)
  return actionid_;
}
inline void TwinsActionUserCmd::set_actionid(::google::protobuf::uint32 value) {
  set_has_actionid();
  actionid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TwinsActionUserCmd.actionid)
}

// optional .Cmd.ETwinsOperation etype = 5 [default = ETWINS_OPERATION_MIN];
inline bool TwinsActionUserCmd::has_etype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TwinsActionUserCmd::set_has_etype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TwinsActionUserCmd::clear_has_etype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TwinsActionUserCmd::clear_etype() {
  etype_ = 0;
  clear_has_etype();
}
inline ::Cmd::ETwinsOperation TwinsActionUserCmd::etype() const {
  // @@protoc_insertion_point(field_get:Cmd.TwinsActionUserCmd.etype)
  return static_cast< ::Cmd::ETwinsOperation >(etype_);
}
inline void TwinsActionUserCmd::set_etype(::Cmd::ETwinsOperation value) {
  assert(::Cmd::ETwinsOperation_IsValid(value));
  set_has_etype();
  etype_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TwinsActionUserCmd.etype)
}

// optional bool sponsor = 6 [default = true];
inline bool TwinsActionUserCmd::has_sponsor() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TwinsActionUserCmd::set_has_sponsor() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TwinsActionUserCmd::clear_has_sponsor() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TwinsActionUserCmd::clear_sponsor() {
  sponsor_ = true;
  clear_has_sponsor();
}
inline bool TwinsActionUserCmd::sponsor() const {
  // @@protoc_insertion_point(field_get:Cmd.TwinsActionUserCmd.sponsor)
  return sponsor_;
}
inline void TwinsActionUserCmd::set_sponsor(bool value) {
  set_has_sponsor();
  sponsor_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TwinsActionUserCmd.sponsor)
}

// -------------------------------------------------------------------

// ShowServantUserCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool ShowServantUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShowServantUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShowServantUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShowServantUserCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command ShowServantUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ShowServantUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ShowServantUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ShowServantUserCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_SERVANT_SHOW];
inline bool ShowServantUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ShowServantUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ShowServantUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ShowServantUserCmd::clear_param() {
  param_ = 122;
  clear_has_param();
}
inline ::Cmd::User2Param ShowServantUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ShowServantUserCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void ShowServantUserCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ShowServantUserCmd.param)
}

// optional bool show = 3;
inline bool ShowServantUserCmd::has_show() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ShowServantUserCmd::set_has_show() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ShowServantUserCmd::clear_has_show() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ShowServantUserCmd::clear_show() {
  show_ = false;
  clear_has_show();
}
inline bool ShowServantUserCmd::show() const {
  // @@protoc_insertion_point(field_get:Cmd.ShowServantUserCmd.show)
  return show_;
}
inline void ShowServantUserCmd::set_show(bool value) {
  set_has_show();
  show_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ShowServantUserCmd.show)
}

// -------------------------------------------------------------------

// ReplaceServantUserCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool ReplaceServantUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReplaceServantUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReplaceServantUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReplaceServantUserCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command ReplaceServantUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ReplaceServantUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ReplaceServantUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReplaceServantUserCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_SERVANT_REPLACE];
inline bool ReplaceServantUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReplaceServantUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReplaceServantUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReplaceServantUserCmd::clear_param() {
  param_ = 123;
  clear_has_param();
}
inline ::Cmd::User2Param ReplaceServantUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ReplaceServantUserCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void ReplaceServantUserCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReplaceServantUserCmd.param)
}

// optional bool replace = 3;
inline bool ReplaceServantUserCmd::has_replace() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReplaceServantUserCmd::set_has_replace() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReplaceServantUserCmd::clear_has_replace() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReplaceServantUserCmd::clear_replace() {
  replace_ = false;
  clear_has_replace();
}
inline bool ReplaceServantUserCmd::replace() const {
  // @@protoc_insertion_point(field_get:Cmd.ReplaceServantUserCmd.replace)
  return replace_;
}
inline void ReplaceServantUserCmd::set_replace(bool value) {
  set_has_replace();
  replace_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReplaceServantUserCmd.replace)
}

// optional uint32 servant = 4 [default = 0];
inline bool ReplaceServantUserCmd::has_servant() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReplaceServantUserCmd::set_has_servant() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReplaceServantUserCmd::clear_has_servant() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReplaceServantUserCmd::clear_servant() {
  servant_ = 0u;
  clear_has_servant();
}
inline ::google::protobuf::uint32 ReplaceServantUserCmd::servant() const {
  // @@protoc_insertion_point(field_get:Cmd.ReplaceServantUserCmd.servant)
  return servant_;
}
inline void ReplaceServantUserCmd::set_servant(::google::protobuf::uint32 value) {
  set_has_servant();
  servant_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReplaceServantUserCmd.servant)
}

// -------------------------------------------------------------------

// ServantService

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool ServantService::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServantService::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServantService::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServantService::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command ServantService::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ServantService.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ServantService::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ServantService.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_SERVANT_SERVICE];
inline bool ServantService::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServantService::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServantService::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServantService::clear_param() {
  param_ = 124;
  clear_has_param();
}
inline ::Cmd::User2Param ServantService::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ServantService.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void ServantService::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ServantService.param)
}

// optional .Cmd.EServantService type = 3 [default = ESERVANT_SERVICE_RECOMMEND];
inline bool ServantService::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServantService::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServantService::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServantService::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::Cmd::EServantService ServantService::type() const {
  // @@protoc_insertion_point(field_get:Cmd.ServantService.type)
  return static_cast< ::Cmd::EServantService >(type_);
}
inline void ServantService::set_type(::Cmd::EServantService value) {
  assert(::Cmd::EServantService_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ServantService.type)
}

// -------------------------------------------------------------------

// RecommendItemInfo

// optional uint32 dwid = 1 [default = 0];
inline bool RecommendItemInfo::has_dwid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RecommendItemInfo::set_has_dwid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RecommendItemInfo::clear_has_dwid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RecommendItemInfo::clear_dwid() {
  dwid_ = 0u;
  clear_has_dwid();
}
inline ::google::protobuf::uint32 RecommendItemInfo::dwid() const {
  // @@protoc_insertion_point(field_get:Cmd.RecommendItemInfo.dwid)
  return dwid_;
}
inline void RecommendItemInfo::set_dwid(::google::protobuf::uint32 value) {
  set_has_dwid();
  dwid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RecommendItemInfo.dwid)
}

// optional uint32 finishtimes = 2 [default = 0];
inline bool RecommendItemInfo::has_finishtimes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RecommendItemInfo::set_has_finishtimes() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RecommendItemInfo::clear_has_finishtimes() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RecommendItemInfo::clear_finishtimes() {
  finishtimes_ = 0u;
  clear_has_finishtimes();
}
inline ::google::protobuf::uint32 RecommendItemInfo::finishtimes() const {
  // @@protoc_insertion_point(field_get:Cmd.RecommendItemInfo.finishtimes)
  return finishtimes_;
}
inline void RecommendItemInfo::set_finishtimes(::google::protobuf::uint32 value) {
  set_has_finishtimes();
  finishtimes_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RecommendItemInfo.finishtimes)
}

// optional .Cmd.ERecommendStatus status = 3 [default = ERECOMMEND_STATUS_MIN];
inline bool RecommendItemInfo::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RecommendItemInfo::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RecommendItemInfo::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RecommendItemInfo::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::Cmd::ERecommendStatus RecommendItemInfo::status() const {
  // @@protoc_insertion_point(field_get:Cmd.RecommendItemInfo.status)
  return static_cast< ::Cmd::ERecommendStatus >(status_);
}
inline void RecommendItemInfo::set_status(::Cmd::ERecommendStatus value) {
  assert(::Cmd::ERecommendStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RecommendItemInfo.status)
}

// optional bool realopen = 4 [default = false];
inline bool RecommendItemInfo::has_realopen() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RecommendItemInfo::set_has_realopen() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RecommendItemInfo::clear_has_realopen() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RecommendItemInfo::clear_realopen() {
  realopen_ = false;
  clear_has_realopen();
}
inline bool RecommendItemInfo::realopen() const {
  // @@protoc_insertion_point(field_get:Cmd.RecommendItemInfo.realopen)
  return realopen_;
}
inline void RecommendItemInfo::set_realopen(bool value) {
  set_has_realopen();
  realopen_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RecommendItemInfo.realopen)
}

// -------------------------------------------------------------------

// RecommendServantUserCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool RecommendServantUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RecommendServantUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RecommendServantUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RecommendServantUserCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command RecommendServantUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.RecommendServantUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void RecommendServantUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RecommendServantUserCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_SERVANT_RECOMMEND];
inline bool RecommendServantUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RecommendServantUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RecommendServantUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RecommendServantUserCmd::clear_param() {
  param_ = 125;
  clear_has_param();
}
inline ::Cmd::User2Param RecommendServantUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.RecommendServantUserCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void RecommendServantUserCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RecommendServantUserCmd.param)
}

// repeated .Cmd.RecommendItemInfo items = 3;
inline int RecommendServantUserCmd::items_size() const {
  return items_.size();
}
inline void RecommendServantUserCmd::clear_items() {
  items_.Clear();
}
inline const ::Cmd::RecommendItemInfo& RecommendServantUserCmd::items(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.RecommendServantUserCmd.items)
  return items_.Get(index);
}
inline ::Cmd::RecommendItemInfo* RecommendServantUserCmd::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.RecommendServantUserCmd.items)
  return items_.Mutable(index);
}
inline ::Cmd::RecommendItemInfo* RecommendServantUserCmd::add_items() {
  // @@protoc_insertion_point(field_add:Cmd.RecommendServantUserCmd.items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::RecommendItemInfo >&
RecommendServantUserCmd::items() const {
  // @@protoc_insertion_point(field_list:Cmd.RecommendServantUserCmd.items)
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::RecommendItemInfo >*
RecommendServantUserCmd::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.RecommendServantUserCmd.items)
  return &items_;
}

// -------------------------------------------------------------------

// ReceiveServantUserCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool ReceiveServantUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReceiveServantUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReceiveServantUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReceiveServantUserCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command ReceiveServantUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ReceiveServantUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ReceiveServantUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReceiveServantUserCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_SERVANT_RECEIVE];
inline bool ReceiveServantUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReceiveServantUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReceiveServantUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReceiveServantUserCmd::clear_param() {
  param_ = 126;
  clear_has_param();
}
inline ::Cmd::User2Param ReceiveServantUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ReceiveServantUserCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void ReceiveServantUserCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReceiveServantUserCmd.param)
}

// optional bool favorability = 3 [default = false];
inline bool ReceiveServantUserCmd::has_favorability() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReceiveServantUserCmd::set_has_favorability() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReceiveServantUserCmd::clear_has_favorability() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReceiveServantUserCmd::clear_favorability() {
  favorability_ = false;
  clear_has_favorability();
}
inline bool ReceiveServantUserCmd::favorability() const {
  // @@protoc_insertion_point(field_get:Cmd.ReceiveServantUserCmd.favorability)
  return favorability_;
}
inline void ReceiveServantUserCmd::set_favorability(bool value) {
  set_has_favorability();
  favorability_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReceiveServantUserCmd.favorability)
}

// optional uint32 dwid = 4;
inline bool ReceiveServantUserCmd::has_dwid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReceiveServantUserCmd::set_has_dwid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReceiveServantUserCmd::clear_has_dwid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReceiveServantUserCmd::clear_dwid() {
  dwid_ = 0u;
  clear_has_dwid();
}
inline ::google::protobuf::uint32 ReceiveServantUserCmd::dwid() const {
  // @@protoc_insertion_point(field_get:Cmd.ReceiveServantUserCmd.dwid)
  return dwid_;
}
inline void ReceiveServantUserCmd::set_dwid(::google::protobuf::uint32 value) {
  set_has_dwid();
  dwid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReceiveServantUserCmd.dwid)
}

// -------------------------------------------------------------------

// FavorabilityStatus

// optional uint32 favorability = 1 [default = 0];
inline bool FavorabilityStatus::has_favorability() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FavorabilityStatus::set_has_favorability() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FavorabilityStatus::clear_has_favorability() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FavorabilityStatus::clear_favorability() {
  favorability_ = 0u;
  clear_has_favorability();
}
inline ::google::protobuf::uint32 FavorabilityStatus::favorability() const {
  // @@protoc_insertion_point(field_get:Cmd.FavorabilityStatus.favorability)
  return favorability_;
}
inline void FavorabilityStatus::set_favorability(::google::protobuf::uint32 value) {
  set_has_favorability();
  favorability_ = value;
  // @@protoc_insertion_point(field_set:Cmd.FavorabilityStatus.favorability)
}

// optional uint32 status = 2 [default = 0];
inline bool FavorabilityStatus::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FavorabilityStatus::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FavorabilityStatus::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FavorabilityStatus::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 FavorabilityStatus::status() const {
  // @@protoc_insertion_point(field_get:Cmd.FavorabilityStatus.status)
  return status_;
}
inline void FavorabilityStatus::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:Cmd.FavorabilityStatus.status)
}

// -------------------------------------------------------------------

// ServantRewardStatusUserCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool ServantRewardStatusUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServantRewardStatusUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServantRewardStatusUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServantRewardStatusUserCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command ServantRewardStatusUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ServantRewardStatusUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ServantRewardStatusUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ServantRewardStatusUserCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_SERVANT_REWARD_STATUS];
inline bool ServantRewardStatusUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServantRewardStatusUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServantRewardStatusUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServantRewardStatusUserCmd::clear_param() {
  param_ = 127;
  clear_has_param();
}
inline ::Cmd::User2Param ServantRewardStatusUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ServantRewardStatusUserCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void ServantRewardStatusUserCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ServantRewardStatusUserCmd.param)
}

// repeated .Cmd.FavorabilityStatus items = 3;
inline int ServantRewardStatusUserCmd::items_size() const {
  return items_.size();
}
inline void ServantRewardStatusUserCmd::clear_items() {
  items_.Clear();
}
inline const ::Cmd::FavorabilityStatus& ServantRewardStatusUserCmd::items(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.ServantRewardStatusUserCmd.items)
  return items_.Get(index);
}
inline ::Cmd::FavorabilityStatus* ServantRewardStatusUserCmd::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.ServantRewardStatusUserCmd.items)
  return items_.Mutable(index);
}
inline ::Cmd::FavorabilityStatus* ServantRewardStatusUserCmd::add_items() {
  // @@protoc_insertion_point(field_add:Cmd.ServantRewardStatusUserCmd.items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::FavorabilityStatus >&
ServantRewardStatusUserCmd::items() const {
  // @@protoc_insertion_point(field_list:Cmd.ServantRewardStatusUserCmd.items)
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::FavorabilityStatus >*
ServantRewardStatusUserCmd::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.ServantRewardStatusUserCmd.items)
  return &items_;
}

// optional uint32 stayfavo = 4 [default = 0];
inline bool ServantRewardStatusUserCmd::has_stayfavo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ServantRewardStatusUserCmd::set_has_stayfavo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ServantRewardStatusUserCmd::clear_has_stayfavo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ServantRewardStatusUserCmd::clear_stayfavo() {
  stayfavo_ = 0u;
  clear_has_stayfavo();
}
inline ::google::protobuf::uint32 ServantRewardStatusUserCmd::stayfavo() const {
  // @@protoc_insertion_point(field_get:Cmd.ServantRewardStatusUserCmd.stayfavo)
  return stayfavo_;
}
inline void ServantRewardStatusUserCmd::set_stayfavo(::google::protobuf::uint32 value) {
  set_has_stayfavo();
  stayfavo_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ServantRewardStatusUserCmd.stayfavo)
}

// -------------------------------------------------------------------

// ProfessionInfo

// optional uint32 branch = 1;
inline bool ProfessionInfo::has_branch() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProfessionInfo::set_has_branch() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProfessionInfo::clear_has_branch() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProfessionInfo::clear_branch() {
  branch_ = 0u;
  clear_has_branch();
}
inline ::google::protobuf::uint32 ProfessionInfo::branch() const {
  // @@protoc_insertion_point(field_get:Cmd.ProfessionInfo.branch)
  return branch_;
}
inline void ProfessionInfo::set_branch(::google::protobuf::uint32 value) {
  set_has_branch();
  branch_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ProfessionInfo.branch)
}

// optional uint32 profession = 2;
inline bool ProfessionInfo::has_profession() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProfessionInfo::set_has_profession() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProfessionInfo::clear_has_profession() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProfessionInfo::clear_profession() {
  profession_ = 0u;
  clear_has_profession();
}
inline ::google::protobuf::uint32 ProfessionInfo::profession() const {
  // @@protoc_insertion_point(field_get:Cmd.ProfessionInfo.profession)
  return profession_;
}
inline void ProfessionInfo::set_profession(::google::protobuf::uint32 value) {
  set_has_profession();
  profession_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ProfessionInfo.profession)
}

// optional uint32 joblv = 3;
inline bool ProfessionInfo::has_joblv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProfessionInfo::set_has_joblv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProfessionInfo::clear_has_joblv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProfessionInfo::clear_joblv() {
  joblv_ = 0u;
  clear_has_joblv();
}
inline ::google::protobuf::uint32 ProfessionInfo::joblv() const {
  // @@protoc_insertion_point(field_get:Cmd.ProfessionInfo.joblv)
  return joblv_;
}
inline void ProfessionInfo::set_joblv(::google::protobuf::uint32 value) {
  set_has_joblv();
  joblv_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ProfessionInfo.joblv)
}

// optional bool iscurrent = 4 [default = false];
inline bool ProfessionInfo::has_iscurrent() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProfessionInfo::set_has_iscurrent() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProfessionInfo::clear_has_iscurrent() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProfessionInfo::clear_iscurrent() {
  iscurrent_ = false;
  clear_has_iscurrent();
}
inline bool ProfessionInfo::iscurrent() const {
  // @@protoc_insertion_point(field_get:Cmd.ProfessionInfo.iscurrent)
  return iscurrent_;
}
inline void ProfessionInfo::set_iscurrent(bool value) {
  set_has_iscurrent();
  iscurrent_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ProfessionInfo.iscurrent)
}

// optional bool isbuy = 5 [default = false];
inline bool ProfessionInfo::has_isbuy() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProfessionInfo::set_has_isbuy() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProfessionInfo::clear_has_isbuy() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProfessionInfo::clear_isbuy() {
  isbuy_ = false;
  clear_has_isbuy();
}
inline bool ProfessionInfo::isbuy() const {
  // @@protoc_insertion_point(field_get:Cmd.ProfessionInfo.isbuy)
  return isbuy_;
}
inline void ProfessionInfo::set_isbuy(bool value) {
  set_has_isbuy();
  isbuy_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ProfessionInfo.isbuy)
}

// -------------------------------------------------------------------

// ProfessionQueryUserCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool ProfessionQueryUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProfessionQueryUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProfessionQueryUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProfessionQueryUserCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command ProfessionQueryUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ProfessionQueryUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ProfessionQueryUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ProfessionQueryUserCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_PROFESSION_QUERY];
inline bool ProfessionQueryUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProfessionQueryUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProfessionQueryUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProfessionQueryUserCmd::clear_param() {
  param_ = 131;
  clear_has_param();
}
inline ::Cmd::User2Param ProfessionQueryUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ProfessionQueryUserCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void ProfessionQueryUserCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ProfessionQueryUserCmd.param)
}

// repeated .Cmd.ProfessionInfo items = 3;
inline int ProfessionQueryUserCmd::items_size() const {
  return items_.size();
}
inline void ProfessionQueryUserCmd::clear_items() {
  items_.Clear();
}
inline const ::Cmd::ProfessionInfo& ProfessionQueryUserCmd::items(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.ProfessionQueryUserCmd.items)
  return items_.Get(index);
}
inline ::Cmd::ProfessionInfo* ProfessionQueryUserCmd::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.ProfessionQueryUserCmd.items)
  return items_.Mutable(index);
}
inline ::Cmd::ProfessionInfo* ProfessionQueryUserCmd::add_items() {
  // @@protoc_insertion_point(field_add:Cmd.ProfessionQueryUserCmd.items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ProfessionInfo >&
ProfessionQueryUserCmd::items() const {
  // @@protoc_insertion_point(field_list:Cmd.ProfessionQueryUserCmd.items)
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::ProfessionInfo >*
ProfessionQueryUserCmd::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.ProfessionQueryUserCmd.items)
  return &items_;
}

// -------------------------------------------------------------------

// ProfessionBuyUserCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool ProfessionBuyUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProfessionBuyUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProfessionBuyUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProfessionBuyUserCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command ProfessionBuyUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ProfessionBuyUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ProfessionBuyUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ProfessionBuyUserCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_PROFESSION_BUY];
inline bool ProfessionBuyUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProfessionBuyUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProfessionBuyUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProfessionBuyUserCmd::clear_param() {
  param_ = 132;
  clear_has_param();
}
inline ::Cmd::User2Param ProfessionBuyUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ProfessionBuyUserCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void ProfessionBuyUserCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ProfessionBuyUserCmd.param)
}

// optional uint32 branch = 3;
inline bool ProfessionBuyUserCmd::has_branch() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProfessionBuyUserCmd::set_has_branch() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProfessionBuyUserCmd::clear_has_branch() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProfessionBuyUserCmd::clear_branch() {
  branch_ = 0u;
  clear_has_branch();
}
inline ::google::protobuf::uint32 ProfessionBuyUserCmd::branch() const {
  // @@protoc_insertion_point(field_get:Cmd.ProfessionBuyUserCmd.branch)
  return branch_;
}
inline void ProfessionBuyUserCmd::set_branch(::google::protobuf::uint32 value) {
  set_has_branch();
  branch_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ProfessionBuyUserCmd.branch)
}

// optional bool success = 4 [default = true];
inline bool ProfessionBuyUserCmd::has_success() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProfessionBuyUserCmd::set_has_success() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProfessionBuyUserCmd::clear_has_success() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProfessionBuyUserCmd::clear_success() {
  success_ = true;
  clear_has_success();
}
inline bool ProfessionBuyUserCmd::success() const {
  // @@protoc_insertion_point(field_get:Cmd.ProfessionBuyUserCmd.success)
  return success_;
}
inline void ProfessionBuyUserCmd::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ProfessionBuyUserCmd.success)
}

// -------------------------------------------------------------------

// ProfessionChangeUserCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool ProfessionChangeUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProfessionChangeUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProfessionChangeUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProfessionChangeUserCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command ProfessionChangeUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ProfessionChangeUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ProfessionChangeUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ProfessionChangeUserCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_PROFESSION_CHANGE];
inline bool ProfessionChangeUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProfessionChangeUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProfessionChangeUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProfessionChangeUserCmd::clear_param() {
  param_ = 133;
  clear_has_param();
}
inline ::Cmd::User2Param ProfessionChangeUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ProfessionChangeUserCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void ProfessionChangeUserCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ProfessionChangeUserCmd.param)
}

// optional uint32 branch = 3;
inline bool ProfessionChangeUserCmd::has_branch() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProfessionChangeUserCmd::set_has_branch() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProfessionChangeUserCmd::clear_has_branch() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProfessionChangeUserCmd::clear_branch() {
  branch_ = 0u;
  clear_has_branch();
}
inline ::google::protobuf::uint32 ProfessionChangeUserCmd::branch() const {
  // @@protoc_insertion_point(field_get:Cmd.ProfessionChangeUserCmd.branch)
  return branch_;
}
inline void ProfessionChangeUserCmd::set_branch(::google::protobuf::uint32 value) {
  set_has_branch();
  branch_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ProfessionChangeUserCmd.branch)
}

// optional bool success = 4 [default = true];
inline bool ProfessionChangeUserCmd::has_success() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProfessionChangeUserCmd::set_has_success() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProfessionChangeUserCmd::clear_has_success() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProfessionChangeUserCmd::clear_success() {
  success_ = true;
  clear_has_success();
}
inline bool ProfessionChangeUserCmd::success() const {
  // @@protoc_insertion_point(field_get:Cmd.ProfessionChangeUserCmd.success)
  return success_;
}
inline void ProfessionChangeUserCmd::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ProfessionChangeUserCmd.success)
}

// -------------------------------------------------------------------

// AstrolabeProfessionData

// repeated uint32 stars = 2;
inline int AstrolabeProfessionData::stars_size() const {
  return stars_.size();
}
inline void AstrolabeProfessionData::clear_stars() {
  stars_.Clear();
}
inline ::google::protobuf::uint32 AstrolabeProfessionData::stars(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.AstrolabeProfessionData.stars)
  return stars_.Get(index);
}
inline void AstrolabeProfessionData::set_stars(int index, ::google::protobuf::uint32 value) {
  stars_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.AstrolabeProfessionData.stars)
}
inline void AstrolabeProfessionData::add_stars(::google::protobuf::uint32 value) {
  stars_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.AstrolabeProfessionData.stars)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
AstrolabeProfessionData::stars() const {
  // @@protoc_insertion_point(field_list:Cmd.AstrolabeProfessionData.stars)
  return stars_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
AstrolabeProfessionData::mutable_stars() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.AstrolabeProfessionData.stars)
  return &stars_;
}

// -------------------------------------------------------------------

// AttrProfessionData

// repeated .Cmd.UserAttr attrs = 1;
inline int AttrProfessionData::attrs_size() const {
  return attrs_.size();
}
inline void AttrProfessionData::clear_attrs() {
  attrs_.Clear();
}
inline const ::Cmd::UserAttr& AttrProfessionData::attrs(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.AttrProfessionData.attrs)
  return attrs_.Get(index);
}
inline ::Cmd::UserAttr* AttrProfessionData::mutable_attrs(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.AttrProfessionData.attrs)
  return attrs_.Mutable(index);
}
inline ::Cmd::UserAttr* AttrProfessionData::add_attrs() {
  // @@protoc_insertion_point(field_add:Cmd.AttrProfessionData.attrs)
  return attrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::UserAttr >&
AttrProfessionData::attrs() const {
  // @@protoc_insertion_point(field_list:Cmd.AttrProfessionData.attrs)
  return attrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::UserAttr >*
AttrProfessionData::mutable_attrs() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.AttrProfessionData.attrs)
  return &attrs_;
}

// repeated .Cmd.UserData datas = 2;
inline int AttrProfessionData::datas_size() const {
  return datas_.size();
}
inline void AttrProfessionData::clear_datas() {
  datas_.Clear();
}
inline const ::Cmd::UserData& AttrProfessionData::datas(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.AttrProfessionData.datas)
  return datas_.Get(index);
}
inline ::Cmd::UserData* AttrProfessionData::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.AttrProfessionData.datas)
  return datas_.Mutable(index);
}
inline ::Cmd::UserData* AttrProfessionData::add_datas() {
  // @@protoc_insertion_point(field_add:Cmd.AttrProfessionData.datas)
  return datas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::UserData >&
AttrProfessionData::datas() const {
  // @@protoc_insertion_point(field_list:Cmd.AttrProfessionData.datas)
  return datas_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::UserData >*
AttrProfessionData::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.AttrProfessionData.datas)
  return &datas_;
}

// -------------------------------------------------------------------

// EquipInfo

// optional uint32 pos = 1;
inline bool EquipInfo::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipInfo::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipInfo::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipInfo::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 EquipInfo::pos() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipInfo.pos)
  return pos_;
}
inline void EquipInfo::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipInfo.pos)
}

// optional uint32 type_id = 2;
inline bool EquipInfo::has_type_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EquipInfo::set_has_type_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EquipInfo::clear_has_type_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EquipInfo::clear_type_id() {
  type_id_ = 0u;
  clear_has_type_id();
}
inline ::google::protobuf::uint32 EquipInfo::type_id() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipInfo.type_id)
  return type_id_;
}
inline void EquipInfo::set_type_id(::google::protobuf::uint32 value) {
  set_has_type_id();
  type_id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipInfo.type_id)
}

// optional string guid = 3;
inline bool EquipInfo::has_guid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EquipInfo::set_has_guid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EquipInfo::clear_has_guid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EquipInfo::clear_guid() {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_->clear();
  }
  clear_has_guid();
}
inline const ::std::string& EquipInfo::guid() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipInfo.guid)
  return *guid_;
}
inline void EquipInfo::set_guid(const ::std::string& value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.EquipInfo.guid)
}
inline void EquipInfo::set_guid(const char* value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.EquipInfo.guid)
}
inline void EquipInfo::set_guid(const char* value, size_t size) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.EquipInfo.guid)
}
inline ::std::string* EquipInfo::mutable_guid() {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.EquipInfo.guid)
  return guid_;
}
inline ::std::string* EquipInfo::release_guid() {
  clear_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = guid_;
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EquipInfo::set_allocated_guid(::std::string* guid) {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guid_;
  }
  if (guid) {
    set_has_guid();
    guid_ = guid;
  } else {
    clear_has_guid();
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.EquipInfo.guid)
}

// -------------------------------------------------------------------

// EquipPackData

// optional uint32 type = 1;
inline bool EquipPackData::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipPackData::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipPackData::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipPackData::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 EquipPackData::type() const {
  // @@protoc_insertion_point(field_get:Cmd.EquipPackData.type)
  return type_;
}
inline void EquipPackData::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EquipPackData.type)
}

// repeated .Cmd.EquipInfo datas = 2;
inline int EquipPackData::datas_size() const {
  return datas_.size();
}
inline void EquipPackData::clear_datas() {
  datas_.Clear();
}
inline const ::Cmd::EquipInfo& EquipPackData::datas(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.EquipPackData.datas)
  return datas_.Get(index);
}
inline ::Cmd::EquipInfo* EquipPackData::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.EquipPackData.datas)
  return datas_.Mutable(index);
}
inline ::Cmd::EquipInfo* EquipPackData::add_datas() {
  // @@protoc_insertion_point(field_add:Cmd.EquipPackData.datas)
  return datas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::EquipInfo >&
EquipPackData::datas() const {
  // @@protoc_insertion_point(field_list:Cmd.EquipPackData.datas)
  return datas_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::EquipInfo >*
EquipPackData::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.EquipPackData.datas)
  return &datas_;
}

// -------------------------------------------------------------------

// SkillValidPosData

// repeated uint32 pos = 1;
inline int SkillValidPosData::pos_size() const {
  return pos_.size();
}
inline void SkillValidPosData::clear_pos() {
  pos_.Clear();
}
inline ::google::protobuf::uint32 SkillValidPosData::pos(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.SkillValidPosData.pos)
  return pos_.Get(index);
}
inline void SkillValidPosData::set_pos(int index, ::google::protobuf::uint32 value) {
  pos_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.SkillValidPosData.pos)
}
inline void SkillValidPosData::add_pos(::google::protobuf::uint32 value) {
  pos_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.SkillValidPosData.pos)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SkillValidPosData::pos() const {
  // @@protoc_insertion_point(field_list:Cmd.SkillValidPosData.pos)
  return pos_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SkillValidPosData::mutable_pos() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.SkillValidPosData.pos)
  return &pos_;
}

// repeated uint32 autopos = 2;
inline int SkillValidPosData::autopos_size() const {
  return autopos_.size();
}
inline void SkillValidPosData::clear_autopos() {
  autopos_.Clear();
}
inline ::google::protobuf::uint32 SkillValidPosData::autopos(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.SkillValidPosData.autopos)
  return autopos_.Get(index);
}
inline void SkillValidPosData::set_autopos(int index, ::google::protobuf::uint32 value) {
  autopos_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.SkillValidPosData.autopos)
}
inline void SkillValidPosData::add_autopos(::google::protobuf::uint32 value) {
  autopos_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.SkillValidPosData.autopos)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SkillValidPosData::autopos() const {
  // @@protoc_insertion_point(field_list:Cmd.SkillValidPosData.autopos)
  return autopos_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SkillValidPosData::mutable_autopos() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.SkillValidPosData.autopos)
  return &autopos_;
}

// repeated uint32 extendpos = 3;
inline int SkillValidPosData::extendpos_size() const {
  return extendpos_.size();
}
inline void SkillValidPosData::clear_extendpos() {
  extendpos_.Clear();
}
inline ::google::protobuf::uint32 SkillValidPosData::extendpos(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.SkillValidPosData.extendpos)
  return extendpos_.Get(index);
}
inline void SkillValidPosData::set_extendpos(int index, ::google::protobuf::uint32 value) {
  extendpos_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.SkillValidPosData.extendpos)
}
inline void SkillValidPosData::add_extendpos(::google::protobuf::uint32 value) {
  extendpos_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.SkillValidPosData.extendpos)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SkillValidPosData::extendpos() const {
  // @@protoc_insertion_point(field_list:Cmd.SkillValidPosData.extendpos)
  return extendpos_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SkillValidPosData::mutable_extendpos() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.SkillValidPosData.extendpos)
  return &extendpos_;
}

// -------------------------------------------------------------------

// SkillProfessionData

// optional uint32 left_point = 1;
inline bool SkillProfessionData::has_left_point() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SkillProfessionData::set_has_left_point() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SkillProfessionData::clear_has_left_point() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SkillProfessionData::clear_left_point() {
  left_point_ = 0u;
  clear_has_left_point();
}
inline ::google::protobuf::uint32 SkillProfessionData::left_point() const {
  // @@protoc_insertion_point(field_get:Cmd.SkillProfessionData.left_point)
  return left_point_;
}
inline void SkillProfessionData::set_left_point(::google::protobuf::uint32 value) {
  set_has_left_point();
  left_point_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SkillProfessionData.left_point)
}

// repeated .Cmd.SkillData datas = 2;
inline int SkillProfessionData::datas_size() const {
  return datas_.size();
}
inline void SkillProfessionData::clear_datas() {
  datas_.Clear();
}
inline const ::Cmd::SkillData& SkillProfessionData::datas(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.SkillProfessionData.datas)
  return datas_.Get(index);
}
inline ::Cmd::SkillData* SkillProfessionData::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.SkillProfessionData.datas)
  return datas_.Mutable(index);
}
inline ::Cmd::SkillData* SkillProfessionData::add_datas() {
  // @@protoc_insertion_point(field_add:Cmd.SkillProfessionData.datas)
  return datas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::SkillData >&
SkillProfessionData::datas() const {
  // @@protoc_insertion_point(field_list:Cmd.SkillProfessionData.datas)
  return datas_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::SkillData >*
SkillProfessionData::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.SkillProfessionData.datas)
  return &datas_;
}

// optional .Cmd.SkillData novice_data = 3;
inline bool SkillProfessionData::has_novice_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SkillProfessionData::set_has_novice_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SkillProfessionData::clear_has_novice_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SkillProfessionData::clear_novice_data() {
  if (novice_data_ != NULL) novice_data_->::Cmd::SkillData::Clear();
  clear_has_novice_data();
}
inline const ::Cmd::SkillData& SkillProfessionData::novice_data() const {
  // @@protoc_insertion_point(field_get:Cmd.SkillProfessionData.novice_data)
  return novice_data_ != NULL ? *novice_data_ : *default_instance_->novice_data_;
}
inline ::Cmd::SkillData* SkillProfessionData::mutable_novice_data() {
  set_has_novice_data();
  if (novice_data_ == NULL) novice_data_ = new ::Cmd::SkillData;
  // @@protoc_insertion_point(field_mutable:Cmd.SkillProfessionData.novice_data)
  return novice_data_;
}
inline ::Cmd::SkillData* SkillProfessionData::release_novice_data() {
  clear_has_novice_data();
  ::Cmd::SkillData* temp = novice_data_;
  novice_data_ = NULL;
  return temp;
}
inline void SkillProfessionData::set_allocated_novice_data(::Cmd::SkillData* novice_data) {
  delete novice_data_;
  novice_data_ = novice_data;
  if (novice_data) {
    set_has_novice_data();
  } else {
    clear_has_novice_data();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.SkillProfessionData.novice_data)
}

// repeated .Cmd.BeingSkillData beings = 4;
inline int SkillProfessionData::beings_size() const {
  return beings_.size();
}
inline void SkillProfessionData::clear_beings() {
  beings_.Clear();
}
inline const ::Cmd::BeingSkillData& SkillProfessionData::beings(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.SkillProfessionData.beings)
  return beings_.Get(index);
}
inline ::Cmd::BeingSkillData* SkillProfessionData::mutable_beings(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.SkillProfessionData.beings)
  return beings_.Mutable(index);
}
inline ::Cmd::BeingSkillData* SkillProfessionData::add_beings() {
  // @@protoc_insertion_point(field_add:Cmd.SkillProfessionData.beings)
  return beings_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::BeingSkillData >&
SkillProfessionData::beings() const {
  // @@protoc_insertion_point(field_list:Cmd.SkillProfessionData.beings)
  return beings_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::BeingSkillData >*
SkillProfessionData::mutable_beings() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.SkillProfessionData.beings)
  return &beings_;
}

// optional uint32 curbeingid = 5;
inline bool SkillProfessionData::has_curbeingid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SkillProfessionData::set_has_curbeingid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SkillProfessionData::clear_has_curbeingid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SkillProfessionData::clear_curbeingid() {
  curbeingid_ = 0u;
  clear_has_curbeingid();
}
inline ::google::protobuf::uint32 SkillProfessionData::curbeingid() const {
  // @@protoc_insertion_point(field_get:Cmd.SkillProfessionData.curbeingid)
  return curbeingid_;
}
inline void SkillProfessionData::set_curbeingid(::google::protobuf::uint32 value) {
  set_has_curbeingid();
  curbeingid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SkillProfessionData.curbeingid)
}

// repeated .Cmd.BeingInfo beinginfos = 6;
inline int SkillProfessionData::beinginfos_size() const {
  return beinginfos_.size();
}
inline void SkillProfessionData::clear_beinginfos() {
  beinginfos_.Clear();
}
inline const ::Cmd::BeingInfo& SkillProfessionData::beinginfos(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.SkillProfessionData.beinginfos)
  return beinginfos_.Get(index);
}
inline ::Cmd::BeingInfo* SkillProfessionData::mutable_beinginfos(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.SkillProfessionData.beinginfos)
  return beinginfos_.Mutable(index);
}
inline ::Cmd::BeingInfo* SkillProfessionData::add_beinginfos() {
  // @@protoc_insertion_point(field_add:Cmd.SkillProfessionData.beinginfos)
  return beinginfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::BeingInfo >&
SkillProfessionData::beinginfos() const {
  // @@protoc_insertion_point(field_list:Cmd.SkillProfessionData.beinginfos)
  return beinginfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::BeingInfo >*
SkillProfessionData::mutable_beinginfos() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.SkillProfessionData.beinginfos)
  return &beinginfos_;
}

// optional .Cmd.SkillValidPosData skillpos = 7;
inline bool SkillProfessionData::has_skillpos() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SkillProfessionData::set_has_skillpos() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SkillProfessionData::clear_has_skillpos() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SkillProfessionData::clear_skillpos() {
  if (skillpos_ != NULL) skillpos_->::Cmd::SkillValidPosData::Clear();
  clear_has_skillpos();
}
inline const ::Cmd::SkillValidPosData& SkillProfessionData::skillpos() const {
  // @@protoc_insertion_point(field_get:Cmd.SkillProfessionData.skillpos)
  return skillpos_ != NULL ? *skillpos_ : *default_instance_->skillpos_;
}
inline ::Cmd::SkillValidPosData* SkillProfessionData::mutable_skillpos() {
  set_has_skillpos();
  if (skillpos_ == NULL) skillpos_ = new ::Cmd::SkillValidPosData;
  // @@protoc_insertion_point(field_mutable:Cmd.SkillProfessionData.skillpos)
  return skillpos_;
}
inline ::Cmd::SkillValidPosData* SkillProfessionData::release_skillpos() {
  clear_has_skillpos();
  ::Cmd::SkillValidPosData* temp = skillpos_;
  skillpos_ = NULL;
  return temp;
}
inline void SkillProfessionData::set_allocated_skillpos(::Cmd::SkillValidPosData* skillpos) {
  delete skillpos_;
  skillpos_ = skillpos;
  if (skillpos) {
    set_has_skillpos();
  } else {
    clear_has_skillpos();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.SkillProfessionData.skillpos)
}

// optional .Cmd.SkillValidPos shortcut = 8;
inline bool SkillProfessionData::has_shortcut() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SkillProfessionData::set_has_shortcut() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SkillProfessionData::clear_has_shortcut() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SkillProfessionData::clear_shortcut() {
  if (shortcut_ != NULL) shortcut_->::Cmd::SkillValidPos::Clear();
  clear_has_shortcut();
}
inline const ::Cmd::SkillValidPos& SkillProfessionData::shortcut() const {
  // @@protoc_insertion_point(field_get:Cmd.SkillProfessionData.shortcut)
  return shortcut_ != NULL ? *shortcut_ : *default_instance_->shortcut_;
}
inline ::Cmd::SkillValidPos* SkillProfessionData::mutable_shortcut() {
  set_has_shortcut();
  if (shortcut_ == NULL) shortcut_ = new ::Cmd::SkillValidPos;
  // @@protoc_insertion_point(field_mutable:Cmd.SkillProfessionData.shortcut)
  return shortcut_;
}
inline ::Cmd::SkillValidPos* SkillProfessionData::release_shortcut() {
  clear_has_shortcut();
  ::Cmd::SkillValidPos* temp = shortcut_;
  shortcut_ = NULL;
  return temp;
}
inline void SkillProfessionData::set_allocated_shortcut(::Cmd::SkillValidPos* shortcut) {
  delete shortcut_;
  shortcut_ = shortcut;
  if (shortcut) {
    set_has_shortcut();
  } else {
    clear_has_shortcut();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.SkillProfessionData.shortcut)
}

// -------------------------------------------------------------------

// ProfessionUserInfo

// optional uint32 id = 1;
inline bool ProfessionUserInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProfessionUserInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProfessionUserInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProfessionUserInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 ProfessionUserInfo::id() const {
  // @@protoc_insertion_point(field_get:Cmd.ProfessionUserInfo.id)
  return id_;
}
inline void ProfessionUserInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ProfessionUserInfo.id)
}

// optional uint32 profession = 2;
inline bool ProfessionUserInfo::has_profession() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProfessionUserInfo::set_has_profession() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProfessionUserInfo::clear_has_profession() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProfessionUserInfo::clear_profession() {
  profession_ = 0u;
  clear_has_profession();
}
inline ::google::protobuf::uint32 ProfessionUserInfo::profession() const {
  // @@protoc_insertion_point(field_get:Cmd.ProfessionUserInfo.profession)
  return profession_;
}
inline void ProfessionUserInfo::set_profession(::google::protobuf::uint32 value) {
  set_has_profession();
  profession_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ProfessionUserInfo.profession)
}

// optional uint32 joblv = 3 [default = 0];
inline bool ProfessionUserInfo::has_joblv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProfessionUserInfo::set_has_joblv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProfessionUserInfo::clear_has_joblv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProfessionUserInfo::clear_joblv() {
  joblv_ = 0u;
  clear_has_joblv();
}
inline ::google::protobuf::uint32 ProfessionUserInfo::joblv() const {
  // @@protoc_insertion_point(field_get:Cmd.ProfessionUserInfo.joblv)
  return joblv_;
}
inline void ProfessionUserInfo::set_joblv(::google::protobuf::uint32 value) {
  set_has_joblv();
  joblv_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ProfessionUserInfo.joblv)
}

// optional uint32 jobexp = 4 [default = 0];
inline bool ProfessionUserInfo::has_jobexp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProfessionUserInfo::set_has_jobexp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProfessionUserInfo::clear_has_jobexp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProfessionUserInfo::clear_jobexp() {
  jobexp_ = 0u;
  clear_has_jobexp();
}
inline ::google::protobuf::uint32 ProfessionUserInfo::jobexp() const {
  // @@protoc_insertion_point(field_get:Cmd.ProfessionUserInfo.jobexp)
  return jobexp_;
}
inline void ProfessionUserInfo::set_jobexp(::google::protobuf::uint32 value) {
  set_has_jobexp();
  jobexp_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ProfessionUserInfo.jobexp)
}

// optional .Cmd.EProfressionDataType type = 5 [default = ETypeBranch];
inline bool ProfessionUserInfo::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProfessionUserInfo::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProfessionUserInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProfessionUserInfo::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::Cmd::EProfressionDataType ProfessionUserInfo::type() const {
  // @@protoc_insertion_point(field_get:Cmd.ProfessionUserInfo.type)
  return static_cast< ::Cmd::EProfressionDataType >(type_);
}
inline void ProfessionUserInfo::set_type(::Cmd::EProfressionDataType value) {
  assert(::Cmd::EProfressionDataType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ProfessionUserInfo.type)
}

// optional string recordname = 6;
inline bool ProfessionUserInfo::has_recordname() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProfessionUserInfo::set_has_recordname() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProfessionUserInfo::clear_has_recordname() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProfessionUserInfo::clear_recordname() {
  if (recordname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    recordname_->clear();
  }
  clear_has_recordname();
}
inline const ::std::string& ProfessionUserInfo::recordname() const {
  // @@protoc_insertion_point(field_get:Cmd.ProfessionUserInfo.recordname)
  return *recordname_;
}
inline void ProfessionUserInfo::set_recordname(const ::std::string& value) {
  set_has_recordname();
  if (recordname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    recordname_ = new ::std::string;
  }
  recordname_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ProfessionUserInfo.recordname)
}
inline void ProfessionUserInfo::set_recordname(const char* value) {
  set_has_recordname();
  if (recordname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    recordname_ = new ::std::string;
  }
  recordname_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ProfessionUserInfo.recordname)
}
inline void ProfessionUserInfo::set_recordname(const char* value, size_t size) {
  set_has_recordname();
  if (recordname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    recordname_ = new ::std::string;
  }
  recordname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ProfessionUserInfo.recordname)
}
inline ::std::string* ProfessionUserInfo::mutable_recordname() {
  set_has_recordname();
  if (recordname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    recordname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ProfessionUserInfo.recordname)
  return recordname_;
}
inline ::std::string* ProfessionUserInfo::release_recordname() {
  clear_has_recordname();
  if (recordname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = recordname_;
    recordname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ProfessionUserInfo::set_allocated_recordname(::std::string* recordname) {
  if (recordname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete recordname_;
  }
  if (recordname) {
    set_has_recordname();
    recordname_ = recordname;
  } else {
    clear_has_recordname();
    recordname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ProfessionUserInfo.recordname)
}

// optional uint32 recordtime = 7;
inline bool ProfessionUserInfo::has_recordtime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProfessionUserInfo::set_has_recordtime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProfessionUserInfo::clear_has_recordtime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProfessionUserInfo::clear_recordtime() {
  recordtime_ = 0u;
  clear_has_recordtime();
}
inline ::google::protobuf::uint32 ProfessionUserInfo::recordtime() const {
  // @@protoc_insertion_point(field_get:Cmd.ProfessionUserInfo.recordtime)
  return recordtime_;
}
inline void ProfessionUserInfo::set_recordtime(::google::protobuf::uint32 value) {
  set_has_recordtime();
  recordtime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ProfessionUserInfo.recordtime)
}

// optional uint64 charid = 8;
inline bool ProfessionUserInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ProfessionUserInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ProfessionUserInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ProfessionUserInfo::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 ProfessionUserInfo::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.ProfessionUserInfo.charid)
  return charid_;
}
inline void ProfessionUserInfo::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ProfessionUserInfo.charid)
}

// optional string charname = 9;
inline bool ProfessionUserInfo::has_charname() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ProfessionUserInfo::set_has_charname() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ProfessionUserInfo::clear_has_charname() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ProfessionUserInfo::clear_charname() {
  if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    charname_->clear();
  }
  clear_has_charname();
}
inline const ::std::string& ProfessionUserInfo::charname() const {
  // @@protoc_insertion_point(field_get:Cmd.ProfessionUserInfo.charname)
  return *charname_;
}
inline void ProfessionUserInfo::set_charname(const ::std::string& value) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    charname_ = new ::std::string;
  }
  charname_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ProfessionUserInfo.charname)
}
inline void ProfessionUserInfo::set_charname(const char* value) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    charname_ = new ::std::string;
  }
  charname_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ProfessionUserInfo.charname)
}
inline void ProfessionUserInfo::set_charname(const char* value, size_t size) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    charname_ = new ::std::string;
  }
  charname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ProfessionUserInfo.charname)
}
inline ::std::string* ProfessionUserInfo::mutable_charname() {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    charname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ProfessionUserInfo.charname)
  return charname_;
}
inline ::std::string* ProfessionUserInfo::release_charname() {
  clear_has_charname();
  if (charname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = charname_;
    charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ProfessionUserInfo::set_allocated_charname(::std::string* charname) {
  if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete charname_;
  }
  if (charname) {
    set_has_charname();
    charname_ = charname;
  } else {
    clear_has_charname();
    charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ProfessionUserInfo.charname)
}

// optional .Cmd.AttrProfessionData attr_data = 10;
inline bool ProfessionUserInfo::has_attr_data() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ProfessionUserInfo::set_has_attr_data() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ProfessionUserInfo::clear_has_attr_data() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ProfessionUserInfo::clear_attr_data() {
  if (attr_data_ != NULL) attr_data_->::Cmd::AttrProfessionData::Clear();
  clear_has_attr_data();
}
inline const ::Cmd::AttrProfessionData& ProfessionUserInfo::attr_data() const {
  // @@protoc_insertion_point(field_get:Cmd.ProfessionUserInfo.attr_data)
  return attr_data_ != NULL ? *attr_data_ : *default_instance_->attr_data_;
}
inline ::Cmd::AttrProfessionData* ProfessionUserInfo::mutable_attr_data() {
  set_has_attr_data();
  if (attr_data_ == NULL) attr_data_ = new ::Cmd::AttrProfessionData;
  // @@protoc_insertion_point(field_mutable:Cmd.ProfessionUserInfo.attr_data)
  return attr_data_;
}
inline ::Cmd::AttrProfessionData* ProfessionUserInfo::release_attr_data() {
  clear_has_attr_data();
  ::Cmd::AttrProfessionData* temp = attr_data_;
  attr_data_ = NULL;
  return temp;
}
inline void ProfessionUserInfo::set_allocated_attr_data(::Cmd::AttrProfessionData* attr_data) {
  delete attr_data_;
  attr_data_ = attr_data;
  if (attr_data) {
    set_has_attr_data();
  } else {
    clear_has_attr_data();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ProfessionUserInfo.attr_data)
}

// repeated .Cmd.EquipPackData equip_data = 11;
inline int ProfessionUserInfo::equip_data_size() const {
  return equip_data_.size();
}
inline void ProfessionUserInfo::clear_equip_data() {
  equip_data_.Clear();
}
inline const ::Cmd::EquipPackData& ProfessionUserInfo::equip_data(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.ProfessionUserInfo.equip_data)
  return equip_data_.Get(index);
}
inline ::Cmd::EquipPackData* ProfessionUserInfo::mutable_equip_data(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.ProfessionUserInfo.equip_data)
  return equip_data_.Mutable(index);
}
inline ::Cmd::EquipPackData* ProfessionUserInfo::add_equip_data() {
  // @@protoc_insertion_point(field_add:Cmd.ProfessionUserInfo.equip_data)
  return equip_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::EquipPackData >&
ProfessionUserInfo::equip_data() const {
  // @@protoc_insertion_point(field_list:Cmd.ProfessionUserInfo.equip_data)
  return equip_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::EquipPackData >*
ProfessionUserInfo::mutable_equip_data() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.ProfessionUserInfo.equip_data)
  return &equip_data_;
}

// optional .Cmd.AstrolabeProfessionData astrolabe_data = 12;
inline bool ProfessionUserInfo::has_astrolabe_data() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ProfessionUserInfo::set_has_astrolabe_data() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ProfessionUserInfo::clear_has_astrolabe_data() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ProfessionUserInfo::clear_astrolabe_data() {
  if (astrolabe_data_ != NULL) astrolabe_data_->::Cmd::AstrolabeProfessionData::Clear();
  clear_has_astrolabe_data();
}
inline const ::Cmd::AstrolabeProfessionData& ProfessionUserInfo::astrolabe_data() const {
  // @@protoc_insertion_point(field_get:Cmd.ProfessionUserInfo.astrolabe_data)
  return astrolabe_data_ != NULL ? *astrolabe_data_ : *default_instance_->astrolabe_data_;
}
inline ::Cmd::AstrolabeProfessionData* ProfessionUserInfo::mutable_astrolabe_data() {
  set_has_astrolabe_data();
  if (astrolabe_data_ == NULL) astrolabe_data_ = new ::Cmd::AstrolabeProfessionData;
  // @@protoc_insertion_point(field_mutable:Cmd.ProfessionUserInfo.astrolabe_data)
  return astrolabe_data_;
}
inline ::Cmd::AstrolabeProfessionData* ProfessionUserInfo::release_astrolabe_data() {
  clear_has_astrolabe_data();
  ::Cmd::AstrolabeProfessionData* temp = astrolabe_data_;
  astrolabe_data_ = NULL;
  return temp;
}
inline void ProfessionUserInfo::set_allocated_astrolabe_data(::Cmd::AstrolabeProfessionData* astrolabe_data) {
  delete astrolabe_data_;
  astrolabe_data_ = astrolabe_data;
  if (astrolabe_data) {
    set_has_astrolabe_data();
  } else {
    clear_has_astrolabe_data();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ProfessionUserInfo.astrolabe_data)
}

// optional .Cmd.SkillProfessionData skill_data = 13;
inline bool ProfessionUserInfo::has_skill_data() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ProfessionUserInfo::set_has_skill_data() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ProfessionUserInfo::clear_has_skill_data() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ProfessionUserInfo::clear_skill_data() {
  if (skill_data_ != NULL) skill_data_->::Cmd::SkillProfessionData::Clear();
  clear_has_skill_data();
}
inline const ::Cmd::SkillProfessionData& ProfessionUserInfo::skill_data() const {
  // @@protoc_insertion_point(field_get:Cmd.ProfessionUserInfo.skill_data)
  return skill_data_ != NULL ? *skill_data_ : *default_instance_->skill_data_;
}
inline ::Cmd::SkillProfessionData* ProfessionUserInfo::mutable_skill_data() {
  set_has_skill_data();
  if (skill_data_ == NULL) skill_data_ = new ::Cmd::SkillProfessionData;
  // @@protoc_insertion_point(field_mutable:Cmd.ProfessionUserInfo.skill_data)
  return skill_data_;
}
inline ::Cmd::SkillProfessionData* ProfessionUserInfo::release_skill_data() {
  clear_has_skill_data();
  ::Cmd::SkillProfessionData* temp = skill_data_;
  skill_data_ = NULL;
  return temp;
}
inline void ProfessionUserInfo::set_allocated_skill_data(::Cmd::SkillProfessionData* skill_data) {
  delete skill_data_;
  skill_data_ = skill_data;
  if (skill_data) {
    set_has_skill_data();
  } else {
    clear_has_skill_data();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ProfessionUserInfo.skill_data)
}

// optional bool isfirst = 14 [default = true];
inline bool ProfessionUserInfo::has_isfirst() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ProfessionUserInfo::set_has_isfirst() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ProfessionUserInfo::clear_has_isfirst() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ProfessionUserInfo::clear_isfirst() {
  isfirst_ = true;
  clear_has_isfirst();
}
inline bool ProfessionUserInfo::isfirst() const {
  // @@protoc_insertion_point(field_get:Cmd.ProfessionUserInfo.isfirst)
  return isfirst_;
}
inline void ProfessionUserInfo::set_isfirst(bool value) {
  set_has_isfirst();
  isfirst_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ProfessionUserInfo.isfirst)
}

// optional bool isbuy = 15 [default = false];
inline bool ProfessionUserInfo::has_isbuy() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ProfessionUserInfo::set_has_isbuy() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ProfessionUserInfo::clear_has_isbuy() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ProfessionUserInfo::clear_isbuy() {
  isbuy_ = false;
  clear_has_isbuy();
}
inline bool ProfessionUserInfo::isbuy() const {
  // @@protoc_insertion_point(field_get:Cmd.ProfessionUserInfo.isbuy)
  return isbuy_;
}
inline void ProfessionUserInfo::set_isbuy(bool value) {
  set_has_isbuy();
  isbuy_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ProfessionUserInfo.isbuy)
}

// -------------------------------------------------------------------

// SlotInfo

// optional uint32 id = 1;
inline bool SlotInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SlotInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SlotInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SlotInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 SlotInfo::id() const {
  // @@protoc_insertion_point(field_get:Cmd.SlotInfo.id)
  return id_;
}
inline void SlotInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SlotInfo.id)
}

// optional .Cmd.ESlotType type = 2 [default = ESLOT_DEFAULT];
inline bool SlotInfo::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SlotInfo::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SlotInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SlotInfo::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::Cmd::ESlotType SlotInfo::type() const {
  // @@protoc_insertion_point(field_get:Cmd.SlotInfo.type)
  return static_cast< ::Cmd::ESlotType >(type_);
}
inline void SlotInfo::set_type(::Cmd::ESlotType value) {
  assert(::Cmd::ESlotType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SlotInfo.type)
}

// optional bool active = 3 [default = false];
inline bool SlotInfo::has_active() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SlotInfo::set_has_active() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SlotInfo::clear_has_active() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SlotInfo::clear_active() {
  active_ = false;
  clear_has_active();
}
inline bool SlotInfo::active() const {
  // @@protoc_insertion_point(field_get:Cmd.SlotInfo.active)
  return active_;
}
inline void SlotInfo::set_active(bool value) {
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SlotInfo.active)
}

// optional uint32 costid = 4;
inline bool SlotInfo::has_costid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SlotInfo::set_has_costid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SlotInfo::clear_has_costid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SlotInfo::clear_costid() {
  costid_ = 0u;
  clear_has_costid();
}
inline ::google::protobuf::uint32 SlotInfo::costid() const {
  // @@protoc_insertion_point(field_get:Cmd.SlotInfo.costid)
  return costid_;
}
inline void SlotInfo::set_costid(::google::protobuf::uint32 value) {
  set_has_costid();
  costid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SlotInfo.costid)
}

// optional uint32 costnum = 5;
inline bool SlotInfo::has_costnum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SlotInfo::set_has_costnum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SlotInfo::clear_has_costnum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SlotInfo::clear_costnum() {
  costnum_ = 0u;
  clear_has_costnum();
}
inline ::google::protobuf::uint32 SlotInfo::costnum() const {
  // @@protoc_insertion_point(field_get:Cmd.SlotInfo.costnum)
  return costnum_;
}
inline void SlotInfo::set_costnum(::google::protobuf::uint32 value) {
  set_has_costnum();
  costnum_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SlotInfo.costnum)
}

// -------------------------------------------------------------------

// UserAstrolMaterialData

// optional uint64 charid = 1;
inline bool UserAstrolMaterialData::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserAstrolMaterialData::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserAstrolMaterialData::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserAstrolMaterialData::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 UserAstrolMaterialData::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.UserAstrolMaterialData.charid)
  return charid_;
}
inline void UserAstrolMaterialData::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UserAstrolMaterialData.charid)
}

// repeated .Cmd.AstrolabeCostData materials = 2;
inline int UserAstrolMaterialData::materials_size() const {
  return materials_.size();
}
inline void UserAstrolMaterialData::clear_materials() {
  materials_.Clear();
}
inline const ::Cmd::AstrolabeCostData& UserAstrolMaterialData::materials(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.UserAstrolMaterialData.materials)
  return materials_.Get(index);
}
inline ::Cmd::AstrolabeCostData* UserAstrolMaterialData::mutable_materials(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.UserAstrolMaterialData.materials)
  return materials_.Mutable(index);
}
inline ::Cmd::AstrolabeCostData* UserAstrolMaterialData::add_materials() {
  // @@protoc_insertion_point(field_add:Cmd.UserAstrolMaterialData.materials)
  return materials_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::AstrolabeCostData >&
UserAstrolMaterialData::materials() const {
  // @@protoc_insertion_point(field_list:Cmd.UserAstrolMaterialData.materials)
  return materials_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::AstrolabeCostData >*
UserAstrolMaterialData::mutable_materials() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.UserAstrolMaterialData.materials)
  return &materials_;
}

// -------------------------------------------------------------------

// UpdateRecordInfoUserCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool UpdateRecordInfoUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateRecordInfoUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateRecordInfoUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateRecordInfoUserCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command UpdateRecordInfoUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.UpdateRecordInfoUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void UpdateRecordInfoUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UpdateRecordInfoUserCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_UPDATE_RECORD_INFO];
inline bool UpdateRecordInfoUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdateRecordInfoUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdateRecordInfoUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdateRecordInfoUserCmd::clear_param() {
  param_ = 134;
  clear_has_param();
}
inline ::Cmd::User2Param UpdateRecordInfoUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.UpdateRecordInfoUserCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void UpdateRecordInfoUserCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UpdateRecordInfoUserCmd.param)
}

// repeated .Cmd.SlotInfo slots = 3;
inline int UpdateRecordInfoUserCmd::slots_size() const {
  return slots_.size();
}
inline void UpdateRecordInfoUserCmd::clear_slots() {
  slots_.Clear();
}
inline const ::Cmd::SlotInfo& UpdateRecordInfoUserCmd::slots(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.UpdateRecordInfoUserCmd.slots)
  return slots_.Get(index);
}
inline ::Cmd::SlotInfo* UpdateRecordInfoUserCmd::mutable_slots(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.UpdateRecordInfoUserCmd.slots)
  return slots_.Mutable(index);
}
inline ::Cmd::SlotInfo* UpdateRecordInfoUserCmd::add_slots() {
  // @@protoc_insertion_point(field_add:Cmd.UpdateRecordInfoUserCmd.slots)
  return slots_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::SlotInfo >&
UpdateRecordInfoUserCmd::slots() const {
  // @@protoc_insertion_point(field_list:Cmd.UpdateRecordInfoUserCmd.slots)
  return slots_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::SlotInfo >*
UpdateRecordInfoUserCmd::mutable_slots() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.UpdateRecordInfoUserCmd.slots)
  return &slots_;
}

// repeated .Cmd.ProfessionUserInfo records = 4;
inline int UpdateRecordInfoUserCmd::records_size() const {
  return records_.size();
}
inline void UpdateRecordInfoUserCmd::clear_records() {
  records_.Clear();
}
inline const ::Cmd::ProfessionUserInfo& UpdateRecordInfoUserCmd::records(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.UpdateRecordInfoUserCmd.records)
  return records_.Get(index);
}
inline ::Cmd::ProfessionUserInfo* UpdateRecordInfoUserCmd::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.UpdateRecordInfoUserCmd.records)
  return records_.Mutable(index);
}
inline ::Cmd::ProfessionUserInfo* UpdateRecordInfoUserCmd::add_records() {
  // @@protoc_insertion_point(field_add:Cmd.UpdateRecordInfoUserCmd.records)
  return records_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ProfessionUserInfo >&
UpdateRecordInfoUserCmd::records() const {
  // @@protoc_insertion_point(field_list:Cmd.UpdateRecordInfoUserCmd.records)
  return records_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::ProfessionUserInfo >*
UpdateRecordInfoUserCmd::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.UpdateRecordInfoUserCmd.records)
  return &records_;
}

// repeated uint32 delete_ids = 5;
inline int UpdateRecordInfoUserCmd::delete_ids_size() const {
  return delete_ids_.size();
}
inline void UpdateRecordInfoUserCmd::clear_delete_ids() {
  delete_ids_.Clear();
}
inline ::google::protobuf::uint32 UpdateRecordInfoUserCmd::delete_ids(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.UpdateRecordInfoUserCmd.delete_ids)
  return delete_ids_.Get(index);
}
inline void UpdateRecordInfoUserCmd::set_delete_ids(int index, ::google::protobuf::uint32 value) {
  delete_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.UpdateRecordInfoUserCmd.delete_ids)
}
inline void UpdateRecordInfoUserCmd::add_delete_ids(::google::protobuf::uint32 value) {
  delete_ids_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.UpdateRecordInfoUserCmd.delete_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
UpdateRecordInfoUserCmd::delete_ids() const {
  // @@protoc_insertion_point(field_list:Cmd.UpdateRecordInfoUserCmd.delete_ids)
  return delete_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
UpdateRecordInfoUserCmd::mutable_delete_ids() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.UpdateRecordInfoUserCmd.delete_ids)
  return &delete_ids_;
}

// optional uint32 card_expiretime = 6;
inline bool UpdateRecordInfoUserCmd::has_card_expiretime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UpdateRecordInfoUserCmd::set_has_card_expiretime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UpdateRecordInfoUserCmd::clear_has_card_expiretime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UpdateRecordInfoUserCmd::clear_card_expiretime() {
  card_expiretime_ = 0u;
  clear_has_card_expiretime();
}
inline ::google::protobuf::uint32 UpdateRecordInfoUserCmd::card_expiretime() const {
  // @@protoc_insertion_point(field_get:Cmd.UpdateRecordInfoUserCmd.card_expiretime)
  return card_expiretime_;
}
inline void UpdateRecordInfoUserCmd::set_card_expiretime(::google::protobuf::uint32 value) {
  set_has_card_expiretime();
  card_expiretime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UpdateRecordInfoUserCmd.card_expiretime)
}

// repeated .Cmd.UserAstrolMaterialData astrol_data = 7;
inline int UpdateRecordInfoUserCmd::astrol_data_size() const {
  return astrol_data_.size();
}
inline void UpdateRecordInfoUserCmd::clear_astrol_data() {
  astrol_data_.Clear();
}
inline const ::Cmd::UserAstrolMaterialData& UpdateRecordInfoUserCmd::astrol_data(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.UpdateRecordInfoUserCmd.astrol_data)
  return astrol_data_.Get(index);
}
inline ::Cmd::UserAstrolMaterialData* UpdateRecordInfoUserCmd::mutable_astrol_data(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.UpdateRecordInfoUserCmd.astrol_data)
  return astrol_data_.Mutable(index);
}
inline ::Cmd::UserAstrolMaterialData* UpdateRecordInfoUserCmd::add_astrol_data() {
  // @@protoc_insertion_point(field_add:Cmd.UpdateRecordInfoUserCmd.astrol_data)
  return astrol_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::UserAstrolMaterialData >&
UpdateRecordInfoUserCmd::astrol_data() const {
  // @@protoc_insertion_point(field_list:Cmd.UpdateRecordInfoUserCmd.astrol_data)
  return astrol_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::UserAstrolMaterialData >*
UpdateRecordInfoUserCmd::mutable_astrol_data() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.UpdateRecordInfoUserCmd.astrol_data)
  return &astrol_data_;
}

// -------------------------------------------------------------------

// SaveRecordUserCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool SaveRecordUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SaveRecordUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SaveRecordUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SaveRecordUserCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command SaveRecordUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.SaveRecordUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void SaveRecordUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SaveRecordUserCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_SAVE_RECORD];
inline bool SaveRecordUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SaveRecordUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SaveRecordUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SaveRecordUserCmd::clear_param() {
  param_ = 135;
  clear_has_param();
}
inline ::Cmd::User2Param SaveRecordUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.SaveRecordUserCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void SaveRecordUserCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SaveRecordUserCmd.param)
}

// optional uint32 slotid = 3;
inline bool SaveRecordUserCmd::has_slotid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SaveRecordUserCmd::set_has_slotid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SaveRecordUserCmd::clear_has_slotid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SaveRecordUserCmd::clear_slotid() {
  slotid_ = 0u;
  clear_has_slotid();
}
inline ::google::protobuf::uint32 SaveRecordUserCmd::slotid() const {
  // @@protoc_insertion_point(field_get:Cmd.SaveRecordUserCmd.slotid)
  return slotid_;
}
inline void SaveRecordUserCmd::set_slotid(::google::protobuf::uint32 value) {
  set_has_slotid();
  slotid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SaveRecordUserCmd.slotid)
}

// optional string record_name = 4;
inline bool SaveRecordUserCmd::has_record_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SaveRecordUserCmd::set_has_record_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SaveRecordUserCmd::clear_has_record_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SaveRecordUserCmd::clear_record_name() {
  if (record_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    record_name_->clear();
  }
  clear_has_record_name();
}
inline const ::std::string& SaveRecordUserCmd::record_name() const {
  // @@protoc_insertion_point(field_get:Cmd.SaveRecordUserCmd.record_name)
  return *record_name_;
}
inline void SaveRecordUserCmd::set_record_name(const ::std::string& value) {
  set_has_record_name();
  if (record_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    record_name_ = new ::std::string;
  }
  record_name_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.SaveRecordUserCmd.record_name)
}
inline void SaveRecordUserCmd::set_record_name(const char* value) {
  set_has_record_name();
  if (record_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    record_name_ = new ::std::string;
  }
  record_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.SaveRecordUserCmd.record_name)
}
inline void SaveRecordUserCmd::set_record_name(const char* value, size_t size) {
  set_has_record_name();
  if (record_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    record_name_ = new ::std::string;
  }
  record_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.SaveRecordUserCmd.record_name)
}
inline ::std::string* SaveRecordUserCmd::mutable_record_name() {
  set_has_record_name();
  if (record_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    record_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.SaveRecordUserCmd.record_name)
  return record_name_;
}
inline ::std::string* SaveRecordUserCmd::release_record_name() {
  clear_has_record_name();
  if (record_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = record_name_;
    record_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SaveRecordUserCmd::set_allocated_record_name(::std::string* record_name) {
  if (record_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete record_name_;
  }
  if (record_name) {
    set_has_record_name();
    record_name_ = record_name;
  } else {
    clear_has_record_name();
    record_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.SaveRecordUserCmd.record_name)
}

// -------------------------------------------------------------------

// LoadRecordUserCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool LoadRecordUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoadRecordUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoadRecordUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoadRecordUserCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command LoadRecordUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.LoadRecordUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void LoadRecordUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LoadRecordUserCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_LOAD_RECORD];
inline bool LoadRecordUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoadRecordUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoadRecordUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoadRecordUserCmd::clear_param() {
  param_ = 136;
  clear_has_param();
}
inline ::Cmd::User2Param LoadRecordUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.LoadRecordUserCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void LoadRecordUserCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LoadRecordUserCmd.param)
}

// optional uint32 slotid = 3;
inline bool LoadRecordUserCmd::has_slotid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LoadRecordUserCmd::set_has_slotid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LoadRecordUserCmd::clear_has_slotid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LoadRecordUserCmd::clear_slotid() {
  slotid_ = 0u;
  clear_has_slotid();
}
inline ::google::protobuf::uint32 LoadRecordUserCmd::slotid() const {
  // @@protoc_insertion_point(field_get:Cmd.LoadRecordUserCmd.slotid)
  return slotid_;
}
inline void LoadRecordUserCmd::set_slotid(::google::protobuf::uint32 value) {
  set_has_slotid();
  slotid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LoadRecordUserCmd.slotid)
}

// -------------------------------------------------------------------

// ChangeRecordNameUserCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool ChangeRecordNameUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChangeRecordNameUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChangeRecordNameUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChangeRecordNameUserCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command ChangeRecordNameUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ChangeRecordNameUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ChangeRecordNameUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChangeRecordNameUserCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_CHANGE_RECORD_NAME];
inline bool ChangeRecordNameUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChangeRecordNameUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChangeRecordNameUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChangeRecordNameUserCmd::clear_param() {
  param_ = 137;
  clear_has_param();
}
inline ::Cmd::User2Param ChangeRecordNameUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ChangeRecordNameUserCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void ChangeRecordNameUserCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChangeRecordNameUserCmd.param)
}

// optional uint32 slotid = 3;
inline bool ChangeRecordNameUserCmd::has_slotid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChangeRecordNameUserCmd::set_has_slotid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChangeRecordNameUserCmd::clear_has_slotid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChangeRecordNameUserCmd::clear_slotid() {
  slotid_ = 0u;
  clear_has_slotid();
}
inline ::google::protobuf::uint32 ChangeRecordNameUserCmd::slotid() const {
  // @@protoc_insertion_point(field_get:Cmd.ChangeRecordNameUserCmd.slotid)
  return slotid_;
}
inline void ChangeRecordNameUserCmd::set_slotid(::google::protobuf::uint32 value) {
  set_has_slotid();
  slotid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChangeRecordNameUserCmd.slotid)
}

// optional string record_name = 4;
inline bool ChangeRecordNameUserCmd::has_record_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChangeRecordNameUserCmd::set_has_record_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChangeRecordNameUserCmd::clear_has_record_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChangeRecordNameUserCmd::clear_record_name() {
  if (record_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    record_name_->clear();
  }
  clear_has_record_name();
}
inline const ::std::string& ChangeRecordNameUserCmd::record_name() const {
  // @@protoc_insertion_point(field_get:Cmd.ChangeRecordNameUserCmd.record_name)
  return *record_name_;
}
inline void ChangeRecordNameUserCmd::set_record_name(const ::std::string& value) {
  set_has_record_name();
  if (record_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    record_name_ = new ::std::string;
  }
  record_name_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ChangeRecordNameUserCmd.record_name)
}
inline void ChangeRecordNameUserCmd::set_record_name(const char* value) {
  set_has_record_name();
  if (record_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    record_name_ = new ::std::string;
  }
  record_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ChangeRecordNameUserCmd.record_name)
}
inline void ChangeRecordNameUserCmd::set_record_name(const char* value, size_t size) {
  set_has_record_name();
  if (record_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    record_name_ = new ::std::string;
  }
  record_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ChangeRecordNameUserCmd.record_name)
}
inline ::std::string* ChangeRecordNameUserCmd::mutable_record_name() {
  set_has_record_name();
  if (record_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    record_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ChangeRecordNameUserCmd.record_name)
  return record_name_;
}
inline ::std::string* ChangeRecordNameUserCmd::release_record_name() {
  clear_has_record_name();
  if (record_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = record_name_;
    record_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChangeRecordNameUserCmd::set_allocated_record_name(::std::string* record_name) {
  if (record_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete record_name_;
  }
  if (record_name) {
    set_has_record_name();
    record_name_ = record_name;
  } else {
    clear_has_record_name();
    record_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ChangeRecordNameUserCmd.record_name)
}

// -------------------------------------------------------------------

// BuyRecordSlotUserCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool BuyRecordSlotUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuyRecordSlotUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuyRecordSlotUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuyRecordSlotUserCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command BuyRecordSlotUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.BuyRecordSlotUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void BuyRecordSlotUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BuyRecordSlotUserCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_BUY_RECORD_SLOT];
inline bool BuyRecordSlotUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuyRecordSlotUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuyRecordSlotUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuyRecordSlotUserCmd::clear_param() {
  param_ = 138;
  clear_has_param();
}
inline ::Cmd::User2Param BuyRecordSlotUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.BuyRecordSlotUserCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void BuyRecordSlotUserCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BuyRecordSlotUserCmd.param)
}

// optional uint32 slotid = 3;
inline bool BuyRecordSlotUserCmd::has_slotid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BuyRecordSlotUserCmd::set_has_slotid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BuyRecordSlotUserCmd::clear_has_slotid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BuyRecordSlotUserCmd::clear_slotid() {
  slotid_ = 0u;
  clear_has_slotid();
}
inline ::google::protobuf::uint32 BuyRecordSlotUserCmd::slotid() const {
  // @@protoc_insertion_point(field_get:Cmd.BuyRecordSlotUserCmd.slotid)
  return slotid_;
}
inline void BuyRecordSlotUserCmd::set_slotid(::google::protobuf::uint32 value) {
  set_has_slotid();
  slotid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BuyRecordSlotUserCmd.slotid)
}

// -------------------------------------------------------------------

// DeleteRecordUserCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool DeleteRecordUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeleteRecordUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeleteRecordUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeleteRecordUserCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command DeleteRecordUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.DeleteRecordUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void DeleteRecordUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DeleteRecordUserCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_DELETE_RECORD];
inline bool DeleteRecordUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeleteRecordUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeleteRecordUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeleteRecordUserCmd::clear_param() {
  param_ = 139;
  clear_has_param();
}
inline ::Cmd::User2Param DeleteRecordUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.DeleteRecordUserCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void DeleteRecordUserCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DeleteRecordUserCmd.param)
}

// optional uint32 slotid = 3;
inline bool DeleteRecordUserCmd::has_slotid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DeleteRecordUserCmd::set_has_slotid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DeleteRecordUserCmd::clear_has_slotid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DeleteRecordUserCmd::clear_slotid() {
  slotid_ = 0u;
  clear_has_slotid();
}
inline ::google::protobuf::uint32 DeleteRecordUserCmd::slotid() const {
  // @@protoc_insertion_point(field_get:Cmd.DeleteRecordUserCmd.slotid)
  return slotid_;
}
inline void DeleteRecordUserCmd::set_slotid(::google::protobuf::uint32 value) {
  set_has_slotid();
  slotid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DeleteRecordUserCmd.slotid)
}

// -------------------------------------------------------------------

// UpdateBranchInfoUserCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool UpdateBranchInfoUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateBranchInfoUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateBranchInfoUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateBranchInfoUserCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command UpdateBranchInfoUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.UpdateBranchInfoUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void UpdateBranchInfoUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UpdateBranchInfoUserCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_UPDATE_BRANCH_INFO];
inline bool UpdateBranchInfoUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdateBranchInfoUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdateBranchInfoUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdateBranchInfoUserCmd::clear_param() {
  param_ = 140;
  clear_has_param();
}
inline ::Cmd::User2Param UpdateBranchInfoUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.UpdateBranchInfoUserCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void UpdateBranchInfoUserCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UpdateBranchInfoUserCmd.param)
}

// repeated .Cmd.ProfessionUserInfo datas = 3;
inline int UpdateBranchInfoUserCmd::datas_size() const {
  return datas_.size();
}
inline void UpdateBranchInfoUserCmd::clear_datas() {
  datas_.Clear();
}
inline const ::Cmd::ProfessionUserInfo& UpdateBranchInfoUserCmd::datas(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.UpdateBranchInfoUserCmd.datas)
  return datas_.Get(index);
}
inline ::Cmd::ProfessionUserInfo* UpdateBranchInfoUserCmd::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.UpdateBranchInfoUserCmd.datas)
  return datas_.Mutable(index);
}
inline ::Cmd::ProfessionUserInfo* UpdateBranchInfoUserCmd::add_datas() {
  // @@protoc_insertion_point(field_add:Cmd.UpdateBranchInfoUserCmd.datas)
  return datas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ProfessionUserInfo >&
UpdateBranchInfoUserCmd::datas() const {
  // @@protoc_insertion_point(field_list:Cmd.UpdateBranchInfoUserCmd.datas)
  return datas_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::ProfessionUserInfo >*
UpdateBranchInfoUserCmd::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.UpdateBranchInfoUserCmd.datas)
  return &datas_;
}

// optional uint32 sync_type = 4 [default = 0];
inline bool UpdateBranchInfoUserCmd::has_sync_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UpdateBranchInfoUserCmd::set_has_sync_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UpdateBranchInfoUserCmd::clear_has_sync_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UpdateBranchInfoUserCmd::clear_sync_type() {
  sync_type_ = 0u;
  clear_has_sync_type();
}
inline ::google::protobuf::uint32 UpdateBranchInfoUserCmd::sync_type() const {
  // @@protoc_insertion_point(field_get:Cmd.UpdateBranchInfoUserCmd.sync_type)
  return sync_type_;
}
inline void UpdateBranchInfoUserCmd::set_sync_type(::google::protobuf::uint32 value) {
  set_has_sync_type();
  sync_type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UpdateBranchInfoUserCmd.sync_type)
}

// -------------------------------------------------------------------

// EnterCapraActivityCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool EnterCapraActivityCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EnterCapraActivityCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EnterCapraActivityCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EnterCapraActivityCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command EnterCapraActivityCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.EnterCapraActivityCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void EnterCapraActivityCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EnterCapraActivityCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_ENTER_CAPRA_ACTIVITY];
inline bool EnterCapraActivityCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EnterCapraActivityCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EnterCapraActivityCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EnterCapraActivityCmd::clear_param() {
  param_ = 110;
  clear_has_param();
}
inline ::Cmd::User2Param EnterCapraActivityCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.EnterCapraActivityCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void EnterCapraActivityCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EnterCapraActivityCmd.param)
}

// -------------------------------------------------------------------

// InviteWithMeUserCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool InviteWithMeUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InviteWithMeUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InviteWithMeUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InviteWithMeUserCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command InviteWithMeUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.InviteWithMeUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void InviteWithMeUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.InviteWithMeUserCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_INVITE_WITH_ME];
inline bool InviteWithMeUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InviteWithMeUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InviteWithMeUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InviteWithMeUserCmd::clear_param() {
  param_ = 142;
  clear_has_param();
}
inline ::Cmd::User2Param InviteWithMeUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.InviteWithMeUserCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void InviteWithMeUserCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.InviteWithMeUserCmd.param)
}

// optional uint64 sendid = 3 [default = 0];
inline bool InviteWithMeUserCmd::has_sendid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InviteWithMeUserCmd::set_has_sendid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InviteWithMeUserCmd::clear_has_sendid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InviteWithMeUserCmd::clear_sendid() {
  sendid_ = GOOGLE_ULONGLONG(0);
  clear_has_sendid();
}
inline ::google::protobuf::uint64 InviteWithMeUserCmd::sendid() const {
  // @@protoc_insertion_point(field_get:Cmd.InviteWithMeUserCmd.sendid)
  return sendid_;
}
inline void InviteWithMeUserCmd::set_sendid(::google::protobuf::uint64 value) {
  set_has_sendid();
  sendid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.InviteWithMeUserCmd.sendid)
}

// optional uint32 time = 4 [default = 0];
inline bool InviteWithMeUserCmd::has_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void InviteWithMeUserCmd::set_has_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void InviteWithMeUserCmd::clear_has_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void InviteWithMeUserCmd::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 InviteWithMeUserCmd::time() const {
  // @@protoc_insertion_point(field_get:Cmd.InviteWithMeUserCmd.time)
  return time_;
}
inline void InviteWithMeUserCmd::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.InviteWithMeUserCmd.time)
}

// optional bool reply = 5 [default = false];
inline bool InviteWithMeUserCmd::has_reply() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void InviteWithMeUserCmd::set_has_reply() {
  _has_bits_[0] |= 0x00000010u;
}
inline void InviteWithMeUserCmd::clear_has_reply() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void InviteWithMeUserCmd::clear_reply() {
  reply_ = false;
  clear_has_reply();
}
inline bool InviteWithMeUserCmd::reply() const {
  // @@protoc_insertion_point(field_get:Cmd.InviteWithMeUserCmd.reply)
  return reply_;
}
inline void InviteWithMeUserCmd::set_reply(bool value) {
  set_has_reply();
  reply_ = value;
  // @@protoc_insertion_point(field_set:Cmd.InviteWithMeUserCmd.reply)
}

// optional bytes sign = 6;
inline bool InviteWithMeUserCmd::has_sign() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void InviteWithMeUserCmd::set_has_sign() {
  _has_bits_[0] |= 0x00000020u;
}
inline void InviteWithMeUserCmd::clear_has_sign() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void InviteWithMeUserCmd::clear_sign() {
  if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_->clear();
  }
  clear_has_sign();
}
inline const ::std::string& InviteWithMeUserCmd::sign() const {
  // @@protoc_insertion_point(field_get:Cmd.InviteWithMeUserCmd.sign)
  return *sign_;
}
inline void InviteWithMeUserCmd::set_sign(const ::std::string& value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.InviteWithMeUserCmd.sign)
}
inline void InviteWithMeUserCmd::set_sign(const char* value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.InviteWithMeUserCmd.sign)
}
inline void InviteWithMeUserCmd::set_sign(const void* value, size_t size) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_ = new ::std::string;
  }
  sign_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.InviteWithMeUserCmd.sign)
}
inline ::std::string* InviteWithMeUserCmd::mutable_sign() {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.InviteWithMeUserCmd.sign)
  return sign_;
}
inline ::std::string* InviteWithMeUserCmd::release_sign() {
  clear_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sign_;
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void InviteWithMeUserCmd::set_allocated_sign(::std::string* sign) {
  if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sign_;
  }
  if (sign) {
    set_has_sign();
    sign_ = sign;
  } else {
    clear_has_sign();
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.InviteWithMeUserCmd.sign)
}

// -------------------------------------------------------------------

// QueryAltmanKillUserCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool QueryAltmanKillUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryAltmanKillUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryAltmanKillUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryAltmanKillUserCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command QueryAltmanKillUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryAltmanKillUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void QueryAltmanKillUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryAltmanKillUserCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_QUERY_ALTMAN_KILL];
inline bool QueryAltmanKillUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryAltmanKillUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryAltmanKillUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryAltmanKillUserCmd::clear_param() {
  param_ = 143;
  clear_has_param();
}
inline ::Cmd::User2Param QueryAltmanKillUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryAltmanKillUserCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void QueryAltmanKillUserCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryAltmanKillUserCmd.param)
}

// -------------------------------------------------------------------

// BoothInfo

// optional string name = 1;
inline bool BoothInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BoothInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BoothInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BoothInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& BoothInfo::name() const {
  // @@protoc_insertion_point(field_get:Cmd.BoothInfo.name)
  return *name_;
}
inline void BoothInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.BoothInfo.name)
}
inline void BoothInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.BoothInfo.name)
}
inline void BoothInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.BoothInfo.name)
}
inline ::std::string* BoothInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.BoothInfo.name)
  return name_;
}
inline ::std::string* BoothInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BoothInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BoothInfo.name)
}

// optional .Cmd.EBoothSign sign = 2;
inline bool BoothInfo::has_sign() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BoothInfo::set_has_sign() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BoothInfo::clear_has_sign() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BoothInfo::clear_sign() {
  sign_ = 0;
  clear_has_sign();
}
inline ::Cmd::EBoothSign BoothInfo::sign() const {
  // @@protoc_insertion_point(field_get:Cmd.BoothInfo.sign)
  return static_cast< ::Cmd::EBoothSign >(sign_);
}
inline void BoothInfo::set_sign(::Cmd::EBoothSign value) {
  assert(::Cmd::EBoothSign_IsValid(value));
  set_has_sign();
  sign_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BoothInfo.sign)
}

// -------------------------------------------------------------------

// BoothReqUserCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool BoothReqUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BoothReqUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BoothReqUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BoothReqUserCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command BoothReqUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.BoothReqUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void BoothReqUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BoothReqUserCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_USER_BOOTH_REQ];
inline bool BoothReqUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BoothReqUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BoothReqUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BoothReqUserCmd::clear_param() {
  param_ = 144;
  clear_has_param();
}
inline ::Cmd::User2Param BoothReqUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.BoothReqUserCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void BoothReqUserCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BoothReqUserCmd.param)
}

// optional string name = 3;
inline bool BoothReqUserCmd::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BoothReqUserCmd::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BoothReqUserCmd::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BoothReqUserCmd::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& BoothReqUserCmd::name() const {
  // @@protoc_insertion_point(field_get:Cmd.BoothReqUserCmd.name)
  return *name_;
}
inline void BoothReqUserCmd::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.BoothReqUserCmd.name)
}
inline void BoothReqUserCmd::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.BoothReqUserCmd.name)
}
inline void BoothReqUserCmd::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.BoothReqUserCmd.name)
}
inline ::std::string* BoothReqUserCmd::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.BoothReqUserCmd.name)
  return name_;
}
inline ::std::string* BoothReqUserCmd::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BoothReqUserCmd::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BoothReqUserCmd.name)
}

// optional .Cmd.EBoothOper oper = 4 [default = EBOOTHOPER_OPEN];
inline bool BoothReqUserCmd::has_oper() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BoothReqUserCmd::set_has_oper() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BoothReqUserCmd::clear_has_oper() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BoothReqUserCmd::clear_oper() {
  oper_ = 0;
  clear_has_oper();
}
inline ::Cmd::EBoothOper BoothReqUserCmd::oper() const {
  // @@protoc_insertion_point(field_get:Cmd.BoothReqUserCmd.oper)
  return static_cast< ::Cmd::EBoothOper >(oper_);
}
inline void BoothReqUserCmd::set_oper(::Cmd::EBoothOper value) {
  assert(::Cmd::EBoothOper_IsValid(value));
  set_has_oper();
  oper_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BoothReqUserCmd.oper)
}

// optional bool success = 5 [default = true];
inline bool BoothReqUserCmd::has_success() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BoothReqUserCmd::set_has_success() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BoothReqUserCmd::clear_has_success() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BoothReqUserCmd::clear_success() {
  success_ = true;
  clear_has_success();
}
inline bool BoothReqUserCmd::success() const {
  // @@protoc_insertion_point(field_get:Cmd.BoothReqUserCmd.success)
  return success_;
}
inline void BoothReqUserCmd::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BoothReqUserCmd.success)
}

// -------------------------------------------------------------------

// BoothInfoSyncUserCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool BoothInfoSyncUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BoothInfoSyncUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BoothInfoSyncUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BoothInfoSyncUserCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command BoothInfoSyncUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.BoothInfoSyncUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void BoothInfoSyncUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BoothInfoSyncUserCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_BOOTH_INFO_SYNC];
inline bool BoothInfoSyncUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BoothInfoSyncUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BoothInfoSyncUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BoothInfoSyncUserCmd::clear_param() {
  param_ = 145;
  clear_has_param();
}
inline ::Cmd::User2Param BoothInfoSyncUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.BoothInfoSyncUserCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void BoothInfoSyncUserCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BoothInfoSyncUserCmd.param)
}

// optional uint64 charid = 3;
inline bool BoothInfoSyncUserCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BoothInfoSyncUserCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BoothInfoSyncUserCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BoothInfoSyncUserCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 BoothInfoSyncUserCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.BoothInfoSyncUserCmd.charid)
  return charid_;
}
inline void BoothInfoSyncUserCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BoothInfoSyncUserCmd.charid)
}

// optional .Cmd.EBoothOper oper = 4 [default = EBOOTHOPER_OPEN];
inline bool BoothInfoSyncUserCmd::has_oper() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BoothInfoSyncUserCmd::set_has_oper() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BoothInfoSyncUserCmd::clear_has_oper() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BoothInfoSyncUserCmd::clear_oper() {
  oper_ = 0;
  clear_has_oper();
}
inline ::Cmd::EBoothOper BoothInfoSyncUserCmd::oper() const {
  // @@protoc_insertion_point(field_get:Cmd.BoothInfoSyncUserCmd.oper)
  return static_cast< ::Cmd::EBoothOper >(oper_);
}
inline void BoothInfoSyncUserCmd::set_oper(::Cmd::EBoothOper value) {
  assert(::Cmd::EBoothOper_IsValid(value));
  set_has_oper();
  oper_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BoothInfoSyncUserCmd.oper)
}

// optional .Cmd.BoothInfo info = 5;
inline bool BoothInfoSyncUserCmd::has_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BoothInfoSyncUserCmd::set_has_info() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BoothInfoSyncUserCmd::clear_has_info() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BoothInfoSyncUserCmd::clear_info() {
  if (info_ != NULL) info_->::Cmd::BoothInfo::Clear();
  clear_has_info();
}
inline const ::Cmd::BoothInfo& BoothInfoSyncUserCmd::info() const {
  // @@protoc_insertion_point(field_get:Cmd.BoothInfoSyncUserCmd.info)
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::Cmd::BoothInfo* BoothInfoSyncUserCmd::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::Cmd::BoothInfo;
  // @@protoc_insertion_point(field_mutable:Cmd.BoothInfoSyncUserCmd.info)
  return info_;
}
inline ::Cmd::BoothInfo* BoothInfoSyncUserCmd::release_info() {
  clear_has_info();
  ::Cmd::BoothInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void BoothInfoSyncUserCmd::set_allocated_info(::Cmd::BoothInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BoothInfoSyncUserCmd.info)
}

// -------------------------------------------------------------------

// DressUpModelUserCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool DressUpModelUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DressUpModelUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DressUpModelUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DressUpModelUserCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command DressUpModelUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.DressUpModelUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void DressUpModelUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DressUpModelUserCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_DRESSUP_MODEL];
inline bool DressUpModelUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DressUpModelUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DressUpModelUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DressUpModelUserCmd::clear_param() {
  param_ = 146;
  clear_has_param();
}
inline ::Cmd::User2Param DressUpModelUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.DressUpModelUserCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void DressUpModelUserCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DressUpModelUserCmd.param)
}

// optional uint32 stageid = 3 [default = 0];
inline bool DressUpModelUserCmd::has_stageid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DressUpModelUserCmd::set_has_stageid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DressUpModelUserCmd::clear_has_stageid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DressUpModelUserCmd::clear_stageid() {
  stageid_ = 0u;
  clear_has_stageid();
}
inline ::google::protobuf::uint32 DressUpModelUserCmd::stageid() const {
  // @@protoc_insertion_point(field_get:Cmd.DressUpModelUserCmd.stageid)
  return stageid_;
}
inline void DressUpModelUserCmd::set_stageid(::google::protobuf::uint32 value) {
  set_has_stageid();
  stageid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DressUpModelUserCmd.stageid)
}

// optional .Cmd.EUserDataType type = 4 [default = EUSERDATATYPE_MIN];
inline bool DressUpModelUserCmd::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DressUpModelUserCmd::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DressUpModelUserCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DressUpModelUserCmd::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Cmd::EUserDataType DressUpModelUserCmd::type() const {
  // @@protoc_insertion_point(field_get:Cmd.DressUpModelUserCmd.type)
  return static_cast< ::Cmd::EUserDataType >(type_);
}
inline void DressUpModelUserCmd::set_type(::Cmd::EUserDataType value) {
  assert(::Cmd::EUserDataType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DressUpModelUserCmd.type)
}

// optional uint32 value = 5 [default = 0];
inline bool DressUpModelUserCmd::has_value() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DressUpModelUserCmd::set_has_value() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DressUpModelUserCmd::clear_has_value() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DressUpModelUserCmd::clear_value() {
  value_ = 0u;
  clear_has_value();
}
inline ::google::protobuf::uint32 DressUpModelUserCmd::value() const {
  // @@protoc_insertion_point(field_get:Cmd.DressUpModelUserCmd.value)
  return value_;
}
inline void DressUpModelUserCmd::set_value(::google::protobuf::uint32 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DressUpModelUserCmd.value)
}

// -------------------------------------------------------------------

// DressUpHeadUserCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool DressUpHeadUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DressUpHeadUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DressUpHeadUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DressUpHeadUserCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command DressUpHeadUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.DressUpHeadUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void DressUpHeadUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DressUpHeadUserCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_DRESSUP_HEAD];
inline bool DressUpHeadUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DressUpHeadUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DressUpHeadUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DressUpHeadUserCmd::clear_param() {
  param_ = 147;
  clear_has_param();
}
inline ::Cmd::User2Param DressUpHeadUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.DressUpHeadUserCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void DressUpHeadUserCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DressUpHeadUserCmd.param)
}

// optional .Cmd.EUserDataType type = 3 [default = EUSERDATATYPE_MIN];
inline bool DressUpHeadUserCmd::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DressUpHeadUserCmd::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DressUpHeadUserCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DressUpHeadUserCmd::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Cmd::EUserDataType DressUpHeadUserCmd::type() const {
  // @@protoc_insertion_point(field_get:Cmd.DressUpHeadUserCmd.type)
  return static_cast< ::Cmd::EUserDataType >(type_);
}
inline void DressUpHeadUserCmd::set_type(::Cmd::EUserDataType value) {
  assert(::Cmd::EUserDataType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DressUpHeadUserCmd.type)
}

// optional uint32 value = 4 [default = 0];
inline bool DressUpHeadUserCmd::has_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DressUpHeadUserCmd::set_has_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DressUpHeadUserCmd::clear_has_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DressUpHeadUserCmd::clear_value() {
  value_ = 0u;
  clear_has_value();
}
inline ::google::protobuf::uint32 DressUpHeadUserCmd::value() const {
  // @@protoc_insertion_point(field_get:Cmd.DressUpHeadUserCmd.value)
  return value_;
}
inline void DressUpHeadUserCmd::set_value(::google::protobuf::uint32 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DressUpHeadUserCmd.value)
}

// optional bool puton = 5 [default = true];
inline bool DressUpHeadUserCmd::has_puton() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DressUpHeadUserCmd::set_has_puton() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DressUpHeadUserCmd::clear_has_puton() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DressUpHeadUserCmd::clear_puton() {
  puton_ = true;
  clear_has_puton();
}
inline bool DressUpHeadUserCmd::puton() const {
  // @@protoc_insertion_point(field_get:Cmd.DressUpHeadUserCmd.puton)
  return puton_;
}
inline void DressUpHeadUserCmd::set_puton(bool value) {
  set_has_puton();
  puton_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DressUpHeadUserCmd.puton)
}

// -------------------------------------------------------------------

// StageInfo

// optional uint32 stageid = 1 [default = 0];
inline bool StageInfo::has_stageid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StageInfo::set_has_stageid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StageInfo::clear_has_stageid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StageInfo::clear_stageid() {
  stageid_ = 0u;
  clear_has_stageid();
}
inline ::google::protobuf::uint32 StageInfo::stageid() const {
  // @@protoc_insertion_point(field_get:Cmd.StageInfo.stageid)
  return stageid_;
}
inline void StageInfo::set_stageid(::google::protobuf::uint32 value) {
  set_has_stageid();
  stageid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.StageInfo.stageid)
}

// optional uint32 usernum = 2 [default = 0];
inline bool StageInfo::has_usernum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StageInfo::set_has_usernum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StageInfo::clear_has_usernum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StageInfo::clear_usernum() {
  usernum_ = 0u;
  clear_has_usernum();
}
inline ::google::protobuf::uint32 StageInfo::usernum() const {
  // @@protoc_insertion_point(field_get:Cmd.StageInfo.usernum)
  return usernum_;
}
inline void StageInfo::set_usernum(::google::protobuf::uint32 value) {
  set_has_usernum();
  usernum_ = value;
  // @@protoc_insertion_point(field_set:Cmd.StageInfo.usernum)
}

// optional uint32 waittime = 3 [default = 0];
inline bool StageInfo::has_waittime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StageInfo::set_has_waittime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StageInfo::clear_has_waittime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StageInfo::clear_waittime() {
  waittime_ = 0u;
  clear_has_waittime();
}
inline ::google::protobuf::uint32 StageInfo::waittime() const {
  // @@protoc_insertion_point(field_get:Cmd.StageInfo.waittime)
  return waittime_;
}
inline void StageInfo::set_waittime(::google::protobuf::uint32 value) {
  set_has_waittime();
  waittime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.StageInfo.waittime)
}

// optional uint32 status = 4 [default = 0];
inline bool StageInfo::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StageInfo::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StageInfo::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StageInfo::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 StageInfo::status() const {
  // @@protoc_insertion_point(field_get:Cmd.StageInfo.status)
  return status_;
}
inline void StageInfo::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:Cmd.StageInfo.status)
}

// -------------------------------------------------------------------

// QueryStageUserCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool QueryStageUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryStageUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryStageUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryStageUserCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command QueryStageUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryStageUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void QueryStageUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryStageUserCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_QUERY_STAGE];
inline bool QueryStageUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryStageUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryStageUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryStageUserCmd::clear_param() {
  param_ = 148;
  clear_has_param();
}
inline ::Cmd::User2Param QueryStageUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryStageUserCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void QueryStageUserCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryStageUserCmd.param)
}

// optional uint32 stageid = 3 [default = 0];
inline bool QueryStageUserCmd::has_stageid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QueryStageUserCmd::set_has_stageid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QueryStageUserCmd::clear_has_stageid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QueryStageUserCmd::clear_stageid() {
  stageid_ = 0u;
  clear_has_stageid();
}
inline ::google::protobuf::uint32 QueryStageUserCmd::stageid() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryStageUserCmd.stageid)
  return stageid_;
}
inline void QueryStageUserCmd::set_stageid(::google::protobuf::uint32 value) {
  set_has_stageid();
  stageid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryStageUserCmd.stageid)
}

// repeated .Cmd.StageInfo info = 4;
inline int QueryStageUserCmd::info_size() const {
  return info_.size();
}
inline void QueryStageUserCmd::clear_info() {
  info_.Clear();
}
inline const ::Cmd::StageInfo& QueryStageUserCmd::info(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.QueryStageUserCmd.info)
  return info_.Get(index);
}
inline ::Cmd::StageInfo* QueryStageUserCmd::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.QueryStageUserCmd.info)
  return info_.Mutable(index);
}
inline ::Cmd::StageInfo* QueryStageUserCmd::add_info() {
  // @@protoc_insertion_point(field_add:Cmd.QueryStageUserCmd.info)
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::StageInfo >&
QueryStageUserCmd::info() const {
  // @@protoc_insertion_point(field_list:Cmd.QueryStageUserCmd.info)
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::StageInfo >*
QueryStageUserCmd::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.QueryStageUserCmd.info)
  return &info_;
}

// -------------------------------------------------------------------

// DressUpLineUpUserCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool DressUpLineUpUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DressUpLineUpUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DressUpLineUpUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DressUpLineUpUserCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command DressUpLineUpUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.DressUpLineUpUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void DressUpLineUpUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DressUpLineUpUserCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_DRESSUP_LINEUP];
inline bool DressUpLineUpUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DressUpLineUpUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DressUpLineUpUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DressUpLineUpUserCmd::clear_param() {
  param_ = 149;
  clear_has_param();
}
inline ::Cmd::User2Param DressUpLineUpUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.DressUpLineUpUserCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void DressUpLineUpUserCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DressUpLineUpUserCmd.param)
}

// optional uint32 stageid = 3 [default = 0];
inline bool DressUpLineUpUserCmd::has_stageid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DressUpLineUpUserCmd::set_has_stageid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DressUpLineUpUserCmd::clear_has_stageid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DressUpLineUpUserCmd::clear_stageid() {
  stageid_ = 0u;
  clear_has_stageid();
}
inline ::google::protobuf::uint32 DressUpLineUpUserCmd::stageid() const {
  // @@protoc_insertion_point(field_get:Cmd.DressUpLineUpUserCmd.stageid)
  return stageid_;
}
inline void DressUpLineUpUserCmd::set_stageid(::google::protobuf::uint32 value) {
  set_has_stageid();
  stageid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DressUpLineUpUserCmd.stageid)
}

// optional uint32 mode = 4 [default = 0];
inline bool DressUpLineUpUserCmd::has_mode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DressUpLineUpUserCmd::set_has_mode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DressUpLineUpUserCmd::clear_has_mode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DressUpLineUpUserCmd::clear_mode() {
  mode_ = 0u;
  clear_has_mode();
}
inline ::google::protobuf::uint32 DressUpLineUpUserCmd::mode() const {
  // @@protoc_insertion_point(field_get:Cmd.DressUpLineUpUserCmd.mode)
  return mode_;
}
inline void DressUpLineUpUserCmd::set_mode(::google::protobuf::uint32 value) {
  set_has_mode();
  mode_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DressUpLineUpUserCmd.mode)
}

// optional bool enter = 5 [default = false];
inline bool DressUpLineUpUserCmd::has_enter() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DressUpLineUpUserCmd::set_has_enter() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DressUpLineUpUserCmd::clear_has_enter() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DressUpLineUpUserCmd::clear_enter() {
  enter_ = false;
  clear_has_enter();
}
inline bool DressUpLineUpUserCmd::enter() const {
  // @@protoc_insertion_point(field_get:Cmd.DressUpLineUpUserCmd.enter)
  return enter_;
}
inline void DressUpLineUpUserCmd::set_enter(bool value) {
  set_has_enter();
  enter_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DressUpLineUpUserCmd.enter)
}

// -------------------------------------------------------------------

// StageUserDataType

// optional .Cmd.EUserDataType type = 1 [default = EUSERDATATYPE_MIN];
inline bool StageUserDataType::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StageUserDataType::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StageUserDataType::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StageUserDataType::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Cmd::EUserDataType StageUserDataType::type() const {
  // @@protoc_insertion_point(field_get:Cmd.StageUserDataType.type)
  return static_cast< ::Cmd::EUserDataType >(type_);
}
inline void StageUserDataType::set_type(::Cmd::EUserDataType value) {
  assert(::Cmd::EUserDataType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.StageUserDataType.type)
}

// optional uint32 value = 2 [default = 0];
inline bool StageUserDataType::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StageUserDataType::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StageUserDataType::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StageUserDataType::clear_value() {
  value_ = 0u;
  clear_has_value();
}
inline ::google::protobuf::uint32 StageUserDataType::value() const {
  // @@protoc_insertion_point(field_get:Cmd.StageUserDataType.value)
  return value_;
}
inline void StageUserDataType::set_value(::google::protobuf::uint32 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:Cmd.StageUserDataType.value)
}

// -------------------------------------------------------------------

// DressUpStageUserCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool DressUpStageUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DressUpStageUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DressUpStageUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DressUpStageUserCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command DressUpStageUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.DressUpStageUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void DressUpStageUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DressUpStageUserCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_DRESSUP_STAGE];
inline bool DressUpStageUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DressUpStageUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DressUpStageUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DressUpStageUserCmd::clear_param() {
  param_ = 150;
  clear_has_param();
}
inline ::Cmd::User2Param DressUpStageUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.DressUpStageUserCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void DressUpStageUserCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DressUpStageUserCmd.param)
}

// repeated uint64 userid = 3;
inline int DressUpStageUserCmd::userid_size() const {
  return userid_.size();
}
inline void DressUpStageUserCmd::clear_userid() {
  userid_.Clear();
}
inline ::google::protobuf::uint64 DressUpStageUserCmd::userid(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.DressUpStageUserCmd.userid)
  return userid_.Get(index);
}
inline void DressUpStageUserCmd::set_userid(int index, ::google::protobuf::uint64 value) {
  userid_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.DressUpStageUserCmd.userid)
}
inline void DressUpStageUserCmd::add_userid(::google::protobuf::uint64 value) {
  userid_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.DressUpStageUserCmd.userid)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
DressUpStageUserCmd::userid() const {
  // @@protoc_insertion_point(field_list:Cmd.DressUpStageUserCmd.userid)
  return userid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
DressUpStageUserCmd::mutable_userid() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.DressUpStageUserCmd.userid)
  return &userid_;
}

// optional uint32 stageid = 4 [default = 0];
inline bool DressUpStageUserCmd::has_stageid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DressUpStageUserCmd::set_has_stageid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DressUpStageUserCmd::clear_has_stageid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DressUpStageUserCmd::clear_stageid() {
  stageid_ = 0u;
  clear_has_stageid();
}
inline ::google::protobuf::uint32 DressUpStageUserCmd::stageid() const {
  // @@protoc_insertion_point(field_get:Cmd.DressUpStageUserCmd.stageid)
  return stageid_;
}
inline void DressUpStageUserCmd::set_stageid(::google::protobuf::uint32 value) {
  set_has_stageid();
  stageid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DressUpStageUserCmd.stageid)
}

// repeated .Cmd.StageUserDataType datas = 5;
inline int DressUpStageUserCmd::datas_size() const {
  return datas_.size();
}
inline void DressUpStageUserCmd::clear_datas() {
  datas_.Clear();
}
inline const ::Cmd::StageUserDataType& DressUpStageUserCmd::datas(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.DressUpStageUserCmd.datas)
  return datas_.Get(index);
}
inline ::Cmd::StageUserDataType* DressUpStageUserCmd::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.DressUpStageUserCmd.datas)
  return datas_.Mutable(index);
}
inline ::Cmd::StageUserDataType* DressUpStageUserCmd::add_datas() {
  // @@protoc_insertion_point(field_add:Cmd.DressUpStageUserCmd.datas)
  return datas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::StageUserDataType >&
DressUpStageUserCmd::datas() const {
  // @@protoc_insertion_point(field_list:Cmd.DressUpStageUserCmd.datas)
  return datas_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::StageUserDataType >*
DressUpStageUserCmd::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.DressUpStageUserCmd.datas)
  return &datas_;
}

// -------------------------------------------------------------------

// GoToFunctionMapUserCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool GoToFunctionMapUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GoToFunctionMapUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GoToFunctionMapUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GoToFunctionMapUserCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command GoToFunctionMapUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.GoToFunctionMapUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void GoToFunctionMapUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GoToFunctionMapUserCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_GOTO_FUNCMAP];
inline bool GoToFunctionMapUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GoToFunctionMapUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GoToFunctionMapUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GoToFunctionMapUserCmd::clear_param() {
  param_ = 141;
  clear_has_param();
}
inline ::Cmd::User2Param GoToFunctionMapUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.GoToFunctionMapUserCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void GoToFunctionMapUserCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GoToFunctionMapUserCmd.param)
}

// required .Cmd.EFuncMapType etype = 3;
inline bool GoToFunctionMapUserCmd::has_etype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GoToFunctionMapUserCmd::set_has_etype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GoToFunctionMapUserCmd::clear_has_etype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GoToFunctionMapUserCmd::clear_etype() {
  etype_ = 1;
  clear_has_etype();
}
inline ::Cmd::EFuncMapType GoToFunctionMapUserCmd::etype() const {
  // @@protoc_insertion_point(field_get:Cmd.GoToFunctionMapUserCmd.etype)
  return static_cast< ::Cmd::EFuncMapType >(etype_);
}
inline void GoToFunctionMapUserCmd::set_etype(::Cmd::EFuncMapType value) {
  assert(::Cmd::EFuncMapType_IsValid(value));
  set_has_etype();
  etype_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GoToFunctionMapUserCmd.etype)
}

// -------------------------------------------------------------------

// GrowthCurInfo

// optional .Cmd.EGrowthType type = 1 [default = EGROWTH_TYPE_STEP];
inline bool GrowthCurInfo::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GrowthCurInfo::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GrowthCurInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GrowthCurInfo::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::Cmd::EGrowthType GrowthCurInfo::type() const {
  // @@protoc_insertion_point(field_get:Cmd.GrowthCurInfo.type)
  return static_cast< ::Cmd::EGrowthType >(type_);
}
inline void GrowthCurInfo::set_type(::Cmd::EGrowthType value) {
  assert(::Cmd::EGrowthType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GrowthCurInfo.type)
}

// optional uint32 groupid = 2 [default = 0];
inline bool GrowthCurInfo::has_groupid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GrowthCurInfo::set_has_groupid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GrowthCurInfo::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GrowthCurInfo::clear_groupid() {
  groupid_ = 0u;
  clear_has_groupid();
}
inline ::google::protobuf::uint32 GrowthCurInfo::groupid() const {
  // @@protoc_insertion_point(field_get:Cmd.GrowthCurInfo.groupid)
  return groupid_;
}
inline void GrowthCurInfo::set_groupid(::google::protobuf::uint32 value) {
  set_has_groupid();
  groupid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GrowthCurInfo.groupid)
}

// -------------------------------------------------------------------

// GrowthItemInfo

// optional uint32 dwid = 1 [default = 0];
inline bool GrowthItemInfo::has_dwid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GrowthItemInfo::set_has_dwid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GrowthItemInfo::clear_has_dwid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GrowthItemInfo::clear_dwid() {
  dwid_ = 0u;
  clear_has_dwid();
}
inline ::google::protobuf::uint32 GrowthItemInfo::dwid() const {
  // @@protoc_insertion_point(field_get:Cmd.GrowthItemInfo.dwid)
  return dwid_;
}
inline void GrowthItemInfo::set_dwid(::google::protobuf::uint32 value) {
  set_has_dwid();
  dwid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GrowthItemInfo.dwid)
}

// optional uint32 finishtimes = 2 [default = 0];
inline bool GrowthItemInfo::has_finishtimes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GrowthItemInfo::set_has_finishtimes() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GrowthItemInfo::clear_has_finishtimes() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GrowthItemInfo::clear_finishtimes() {
  finishtimes_ = 0u;
  clear_has_finishtimes();
}
inline ::google::protobuf::uint32 GrowthItemInfo::finishtimes() const {
  // @@protoc_insertion_point(field_get:Cmd.GrowthItemInfo.finishtimes)
  return finishtimes_;
}
inline void GrowthItemInfo::set_finishtimes(::google::protobuf::uint32 value) {
  set_has_finishtimes();
  finishtimes_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GrowthItemInfo.finishtimes)
}

// optional .Cmd.EGrowthStatus status = 3 [default = EGROWTH_STATUS_MIN];
inline bool GrowthItemInfo::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GrowthItemInfo::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GrowthItemInfo::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GrowthItemInfo::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::Cmd::EGrowthStatus GrowthItemInfo::status() const {
  // @@protoc_insertion_point(field_get:Cmd.GrowthItemInfo.status)
  return static_cast< ::Cmd::EGrowthStatus >(status_);
}
inline void GrowthItemInfo::set_status(::Cmd::EGrowthStatus value) {
  assert(::Cmd::EGrowthStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GrowthItemInfo.status)
}

// -------------------------------------------------------------------

// GrowthValueInfo

// optional uint32 groupid = 1 [default = 0];
inline bool GrowthValueInfo::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GrowthValueInfo::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GrowthValueInfo::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GrowthValueInfo::clear_groupid() {
  groupid_ = 0u;
  clear_has_groupid();
}
inline ::google::protobuf::uint32 GrowthValueInfo::groupid() const {
  // @@protoc_insertion_point(field_get:Cmd.GrowthValueInfo.groupid)
  return groupid_;
}
inline void GrowthValueInfo::set_groupid(::google::protobuf::uint32 value) {
  set_has_groupid();
  groupid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GrowthValueInfo.groupid)
}

// optional uint32 growth = 2 [default = 0];
inline bool GrowthValueInfo::has_growth() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GrowthValueInfo::set_has_growth() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GrowthValueInfo::clear_has_growth() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GrowthValueInfo::clear_growth() {
  growth_ = 0u;
  clear_has_growth();
}
inline ::google::protobuf::uint32 GrowthValueInfo::growth() const {
  // @@protoc_insertion_point(field_get:Cmd.GrowthValueInfo.growth)
  return growth_;
}
inline void GrowthValueInfo::set_growth(::google::protobuf::uint32 value) {
  set_has_growth();
  growth_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GrowthValueInfo.growth)
}

// repeated uint32 everreward = 3;
inline int GrowthValueInfo::everreward_size() const {
  return everreward_.size();
}
inline void GrowthValueInfo::clear_everreward() {
  everreward_.Clear();
}
inline ::google::protobuf::uint32 GrowthValueInfo::everreward(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.GrowthValueInfo.everreward)
  return everreward_.Get(index);
}
inline void GrowthValueInfo::set_everreward(int index, ::google::protobuf::uint32 value) {
  everreward_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.GrowthValueInfo.everreward)
}
inline void GrowthValueInfo::add_everreward(::google::protobuf::uint32 value) {
  everreward_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.GrowthValueInfo.everreward)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GrowthValueInfo::everreward() const {
  // @@protoc_insertion_point(field_list:Cmd.GrowthValueInfo.everreward)
  return everreward_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GrowthValueInfo::mutable_everreward() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.GrowthValueInfo.everreward)
  return &everreward_;
}

// -------------------------------------------------------------------

// GrowthGroupInfo

// repeated .Cmd.GrowthItemInfo items = 1;
inline int GrowthGroupInfo::items_size() const {
  return items_.size();
}
inline void GrowthGroupInfo::clear_items() {
  items_.Clear();
}
inline const ::Cmd::GrowthItemInfo& GrowthGroupInfo::items(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.GrowthGroupInfo.items)
  return items_.Get(index);
}
inline ::Cmd::GrowthItemInfo* GrowthGroupInfo::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.GrowthGroupInfo.items)
  return items_.Mutable(index);
}
inline ::Cmd::GrowthItemInfo* GrowthGroupInfo::add_items() {
  // @@protoc_insertion_point(field_add:Cmd.GrowthGroupInfo.items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::GrowthItemInfo >&
GrowthGroupInfo::items() const {
  // @@protoc_insertion_point(field_list:Cmd.GrowthGroupInfo.items)
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::GrowthItemInfo >*
GrowthGroupInfo::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.GrowthGroupInfo.items)
  return &items_;
}

// optional .Cmd.GrowthValueInfo valueitems = 2;
inline bool GrowthGroupInfo::has_valueitems() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GrowthGroupInfo::set_has_valueitems() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GrowthGroupInfo::clear_has_valueitems() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GrowthGroupInfo::clear_valueitems() {
  if (valueitems_ != NULL) valueitems_->::Cmd::GrowthValueInfo::Clear();
  clear_has_valueitems();
}
inline const ::Cmd::GrowthValueInfo& GrowthGroupInfo::valueitems() const {
  // @@protoc_insertion_point(field_get:Cmd.GrowthGroupInfo.valueitems)
  return valueitems_ != NULL ? *valueitems_ : *default_instance_->valueitems_;
}
inline ::Cmd::GrowthValueInfo* GrowthGroupInfo::mutable_valueitems() {
  set_has_valueitems();
  if (valueitems_ == NULL) valueitems_ = new ::Cmd::GrowthValueInfo;
  // @@protoc_insertion_point(field_mutable:Cmd.GrowthGroupInfo.valueitems)
  return valueitems_;
}
inline ::Cmd::GrowthValueInfo* GrowthGroupInfo::release_valueitems() {
  clear_has_valueitems();
  ::Cmd::GrowthValueInfo* temp = valueitems_;
  valueitems_ = NULL;
  return temp;
}
inline void GrowthGroupInfo::set_allocated_valueitems(::Cmd::GrowthValueInfo* valueitems) {
  delete valueitems_;
  valueitems_ = valueitems;
  if (valueitems) {
    set_has_valueitems();
  } else {
    clear_has_valueitems();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.GrowthGroupInfo.valueitems)
}

// -------------------------------------------------------------------

// GrowthServantUserCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool GrowthServantUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GrowthServantUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GrowthServantUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GrowthServantUserCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command GrowthServantUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.GrowthServantUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void GrowthServantUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GrowthServantUserCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_SERVANT_GROWTH];
inline bool GrowthServantUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GrowthServantUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GrowthServantUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GrowthServantUserCmd::clear_param() {
  param_ = 154;
  clear_has_param();
}
inline ::Cmd::User2Param GrowthServantUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.GrowthServantUserCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void GrowthServantUserCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GrowthServantUserCmd.param)
}

// repeated .Cmd.GrowthGroupInfo datas = 3;
inline int GrowthServantUserCmd::datas_size() const {
  return datas_.size();
}
inline void GrowthServantUserCmd::clear_datas() {
  datas_.Clear();
}
inline const ::Cmd::GrowthGroupInfo& GrowthServantUserCmd::datas(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.GrowthServantUserCmd.datas)
  return datas_.Get(index);
}
inline ::Cmd::GrowthGroupInfo* GrowthServantUserCmd::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.GrowthServantUserCmd.datas)
  return datas_.Mutable(index);
}
inline ::Cmd::GrowthGroupInfo* GrowthServantUserCmd::add_datas() {
  // @@protoc_insertion_point(field_add:Cmd.GrowthServantUserCmd.datas)
  return datas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::GrowthGroupInfo >&
GrowthServantUserCmd::datas() const {
  // @@protoc_insertion_point(field_list:Cmd.GrowthServantUserCmd.datas)
  return datas_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::GrowthGroupInfo >*
GrowthServantUserCmd::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.GrowthServantUserCmd.datas)
  return &datas_;
}

// repeated uint32 unlockitems = 4;
inline int GrowthServantUserCmd::unlockitems_size() const {
  return unlockitems_.size();
}
inline void GrowthServantUserCmd::clear_unlockitems() {
  unlockitems_.Clear();
}
inline ::google::protobuf::uint32 GrowthServantUserCmd::unlockitems(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.GrowthServantUserCmd.unlockitems)
  return unlockitems_.Get(index);
}
inline void GrowthServantUserCmd::set_unlockitems(int index, ::google::protobuf::uint32 value) {
  unlockitems_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.GrowthServantUserCmd.unlockitems)
}
inline void GrowthServantUserCmd::add_unlockitems(::google::protobuf::uint32 value) {
  unlockitems_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.GrowthServantUserCmd.unlockitems)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GrowthServantUserCmd::unlockitems() const {
  // @@protoc_insertion_point(field_list:Cmd.GrowthServantUserCmd.unlockitems)
  return unlockitems_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GrowthServantUserCmd::mutable_unlockitems() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.GrowthServantUserCmd.unlockitems)
  return &unlockitems_;
}

// -------------------------------------------------------------------

// ReceiveGrowthServantUserCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool ReceiveGrowthServantUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReceiveGrowthServantUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReceiveGrowthServantUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReceiveGrowthServantUserCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command ReceiveGrowthServantUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ReceiveGrowthServantUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ReceiveGrowthServantUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReceiveGrowthServantUserCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_SERVANT_RECEIVE_GROWTH];
inline bool ReceiveGrowthServantUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReceiveGrowthServantUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReceiveGrowthServantUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReceiveGrowthServantUserCmd::clear_param() {
  param_ = 155;
  clear_has_param();
}
inline ::Cmd::User2Param ReceiveGrowthServantUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ReceiveGrowthServantUserCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void ReceiveGrowthServantUserCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReceiveGrowthServantUserCmd.param)
}

// optional uint32 dwid = 3 [default = 0];
inline bool ReceiveGrowthServantUserCmd::has_dwid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReceiveGrowthServantUserCmd::set_has_dwid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReceiveGrowthServantUserCmd::clear_has_dwid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReceiveGrowthServantUserCmd::clear_dwid() {
  dwid_ = 0u;
  clear_has_dwid();
}
inline ::google::protobuf::uint32 ReceiveGrowthServantUserCmd::dwid() const {
  // @@protoc_insertion_point(field_get:Cmd.ReceiveGrowthServantUserCmd.dwid)
  return dwid_;
}
inline void ReceiveGrowthServantUserCmd::set_dwid(::google::protobuf::uint32 value) {
  set_has_dwid();
  dwid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReceiveGrowthServantUserCmd.dwid)
}

// optional uint32 dwvalue = 4 [default = 0];
inline bool ReceiveGrowthServantUserCmd::has_dwvalue() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReceiveGrowthServantUserCmd::set_has_dwvalue() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReceiveGrowthServantUserCmd::clear_has_dwvalue() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReceiveGrowthServantUserCmd::clear_dwvalue() {
  dwvalue_ = 0u;
  clear_has_dwvalue();
}
inline ::google::protobuf::uint32 ReceiveGrowthServantUserCmd::dwvalue() const {
  // @@protoc_insertion_point(field_get:Cmd.ReceiveGrowthServantUserCmd.dwvalue)
  return dwvalue_;
}
inline void ReceiveGrowthServantUserCmd::set_dwvalue(::google::protobuf::uint32 value) {
  set_has_dwvalue();
  dwvalue_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReceiveGrowthServantUserCmd.dwvalue)
}

// -------------------------------------------------------------------

// GrowthOpenServantUserCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool GrowthOpenServantUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GrowthOpenServantUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GrowthOpenServantUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GrowthOpenServantUserCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command GrowthOpenServantUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.GrowthOpenServantUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void GrowthOpenServantUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GrowthOpenServantUserCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_SERVANT_GROWTH_OPEN];
inline bool GrowthOpenServantUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GrowthOpenServantUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GrowthOpenServantUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GrowthOpenServantUserCmd::clear_param() {
  param_ = 156;
  clear_has_param();
}
inline ::Cmd::User2Param GrowthOpenServantUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.GrowthOpenServantUserCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void GrowthOpenServantUserCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GrowthOpenServantUserCmd.param)
}

// optional uint32 groupid = 3 [default = 0];
inline bool GrowthOpenServantUserCmd::has_groupid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GrowthOpenServantUserCmd::set_has_groupid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GrowthOpenServantUserCmd::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GrowthOpenServantUserCmd::clear_groupid() {
  groupid_ = 0u;
  clear_has_groupid();
}
inline ::google::protobuf::uint32 GrowthOpenServantUserCmd::groupid() const {
  // @@protoc_insertion_point(field_get:Cmd.GrowthOpenServantUserCmd.groupid)
  return groupid_;
}
inline void GrowthOpenServantUserCmd::set_groupid(::google::protobuf::uint32 value) {
  set_has_groupid();
  groupid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GrowthOpenServantUserCmd.groupid)
}

// -------------------------------------------------------------------

// CheatTagUserCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool CheatTagUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CheatTagUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CheatTagUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CheatTagUserCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command CheatTagUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.CheatTagUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void CheatTagUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CheatTagUserCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_CHEAT_TAG];
inline bool CheatTagUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CheatTagUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CheatTagUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CheatTagUserCmd::clear_param() {
  param_ = 157;
  clear_has_param();
}
inline ::Cmd::User2Param CheatTagUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.CheatTagUserCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void CheatTagUserCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CheatTagUserCmd.param)
}

// optional uint32 interval = 3 [default = 0];
inline bool CheatTagUserCmd::has_interval() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CheatTagUserCmd::set_has_interval() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CheatTagUserCmd::clear_has_interval() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CheatTagUserCmd::clear_interval() {
  interval_ = 0u;
  clear_has_interval();
}
inline ::google::protobuf::uint32 CheatTagUserCmd::interval() const {
  // @@protoc_insertion_point(field_get:Cmd.CheatTagUserCmd.interval)
  return interval_;
}
inline void CheatTagUserCmd::set_interval(::google::protobuf::uint32 value) {
  set_has_interval();
  interval_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CheatTagUserCmd.interval)
}

// optional uint32 frame = 4 [default = 0];
inline bool CheatTagUserCmd::has_frame() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CheatTagUserCmd::set_has_frame() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CheatTagUserCmd::clear_has_frame() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CheatTagUserCmd::clear_frame() {
  frame_ = 0u;
  clear_has_frame();
}
inline ::google::protobuf::uint32 CheatTagUserCmd::frame() const {
  // @@protoc_insertion_point(field_get:Cmd.CheatTagUserCmd.frame)
  return frame_;
}
inline void CheatTagUserCmd::set_frame(::google::protobuf::uint32 value) {
  set_has_frame();
  frame_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CheatTagUserCmd.frame)
}

// -------------------------------------------------------------------

// CheatTagStatUserCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
inline bool CheatTagStatUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CheatTagStatUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CheatTagStatUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CheatTagStatUserCmd::clear_cmd() {
  cmd_ = 9;
  clear_has_cmd();
}
inline ::Cmd::Command CheatTagStatUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.CheatTagStatUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void CheatTagStatUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CheatTagStatUserCmd.cmd)
}

// optional .Cmd.User2Param param = 2 [default = USER2PARAM_CHEAT_TAG_STAT];
inline bool CheatTagStatUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CheatTagStatUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CheatTagStatUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CheatTagStatUserCmd::clear_param() {
  param_ = 158;
  clear_has_param();
}
inline ::Cmd::User2Param CheatTagStatUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.CheatTagStatUserCmd.param)
  return static_cast< ::Cmd::User2Param >(param_);
}
inline void CheatTagStatUserCmd::set_param(::Cmd::User2Param value) {
  assert(::Cmd::User2Param_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CheatTagStatUserCmd.param)
}

// optional uint32 count = 3 [default = 0];
inline bool CheatTagStatUserCmd::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CheatTagStatUserCmd::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CheatTagStatUserCmd::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CheatTagStatUserCmd::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 CheatTagStatUserCmd::count() const {
  // @@protoc_insertion_point(field_get:Cmd.CheatTagStatUserCmd.count)
  return count_;
}
inline void CheatTagStatUserCmd::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CheatTagStatUserCmd.count)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Cmd::User2Param> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::User2Param>() {
  return ::Cmd::User2Param_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EMessageType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EMessageType>() {
  return ::Cmd::EMessageType_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EMessageActOpt> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EMessageActOpt>() {
  return ::Cmd::EMessageActOpt_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EUserActionType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EUserActionType>() {
  return ::Cmd::EUserActionType_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EReliveType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EReliveType>() {
  return ::Cmd::EReliveType_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EEffectOpt> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EEffectOpt>() {
  return ::Cmd::EEffectOpt_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EEffectType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EEffectType>() {
  return ::Cmd::EEffectType_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EDressType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EDressType>() {
  return ::Cmd::EDressType_descriptor();
}
template <> struct is_proto_enum< ::Cmd::PointType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::PointType>() {
  return ::Cmd::PointType_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EDbgMsgType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EDbgMsgType>() {
  return ::Cmd::EDbgMsgType_descriptor();
}
template <> struct is_proto_enum< ::Cmd::GameTimeOpt> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::GameTimeOpt>() {
  return ::Cmd::GameTimeOpt_descriptor();
}
template <> struct is_proto_enum< ::Cmd::CD_TYPE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::CD_TYPE>() {
  return ::Cmd::CD_TYPE_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EGoToGearType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EGoToGearType>() {
  return ::Cmd::EGoToGearType_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EFollowType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EFollowType>() {
  return ::Cmd::EFollowType_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EAlbumType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EAlbumType>() {
  return ::Cmd::EAlbumType_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EBattleStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EBattleStatus>() {
  return ::Cmd::EBattleStatus_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EQueryType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EQueryType>() {
  return ::Cmd::EQueryType_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EFashionHideType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EFashionHideType>() {
  return ::Cmd::EFashionHideType_descriptor();
}
template <> struct is_proto_enum< ::Cmd::ECountDownType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::ECountDownType>() {
  return ::Cmd::ECountDownType_descriptor();
}
template <> struct is_proto_enum< ::Cmd::ETreeStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::ETreeStatus>() {
  return ::Cmd::ETreeStatus_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EZoneStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EZoneStatus>() {
  return ::Cmd::EZoneStatus_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EZoneState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EZoneState>() {
  return ::Cmd::EZoneState_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EJumpZone> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EJumpZone>() {
  return ::Cmd::EJumpZone_descriptor();
}
template <> struct is_proto_enum< ::Cmd::SeatShowType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::SeatShowType>() {
  return ::Cmd::SeatShowType_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EOptionType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EOptionType>() {
  return ::Cmd::EOptionType_descriptor();
}
template <> struct is_proto_enum< ::Cmd::ERenameErrCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::ERenameErrCode>() {
  return ::Cmd::ERenameErrCode_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EProposalReply> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EProposalReply>() {
  return ::Cmd::EProposalReply_descriptor();
}
template <> struct is_proto_enum< ::Cmd::ETwinsOperation> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::ETwinsOperation>() {
  return ::Cmd::ETwinsOperation_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EServantService> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EServantService>() {
  return ::Cmd::EServantService_descriptor();
}
template <> struct is_proto_enum< ::Cmd::ERecommendStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::ERecommendStatus>() {
  return ::Cmd::ERecommendStatus_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EProfressionDataType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EProfressionDataType>() {
  return ::Cmd::EProfressionDataType_descriptor();
}
template <> struct is_proto_enum< ::Cmd::ESlotType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::ESlotType>() {
  return ::Cmd::ESlotType_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EBoothOper> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EBoothOper>() {
  return ::Cmd::EBoothOper_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EBoothSign> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EBoothSign>() {
  return ::Cmd::EBoothSign_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EDressUpStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EDressUpStatus>() {
  return ::Cmd::EDressUpStatus_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EFuncMapType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EFuncMapType>() {
  return ::Cmd::EFuncMapType_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EGrowthStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EGrowthStatus>() {
  return ::Cmd::EGrowthStatus_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EGrowthType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EGrowthType>() {
  return ::Cmd::EGrowthType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_SceneUser2_2eproto__INCLUDED
