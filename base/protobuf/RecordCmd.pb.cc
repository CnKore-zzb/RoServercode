// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RecordCmd.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RecordCmd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Cmd {

namespace {

const ::google::protobuf::Descriptor* NotifyLoginRecordCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyLoginRecordCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecordUserData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecordUserData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RedisUserData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RedisUserData_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserDataRecordCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserDataRecordCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ErrUserCharBaseRecordCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ErrUserCharBaseRecordCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* MusicUpdateCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MusicUpdateCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoadLuaSceneRecordCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoadLuaSceneRecordCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemModifyRecordCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemModifyRecordCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeAuthorizeRecordCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeAuthorizeRecordCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMusicQueryRecordCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMusicQueryRecordCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMusicUpdateCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMusicUpdateCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMusicDeleteRecordCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMusicDeleteRecordCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserBaseData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserBaseData_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobData_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserAccData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserAccData_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobAccData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobAccData_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobAccUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobAccUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobUnsolvedPhoto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobUnsolvedPhoto_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobBoss_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobBoss_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillReplaceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillReplaceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillShortcutDB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillShortcutDB_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserSkillData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserSkillData_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobShareSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobShareSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserRoleData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserRoleData_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobFighter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobFighter_reflection_ = NULL;
const ::google::protobuf::Descriptor* StageStepNormalBlob_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StageStepNormalBlob_reflection_ = NULL;
const ::google::protobuf::Descriptor* StageStepHardBlob_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StageStepHardBlob_reflection_ = NULL;
const ::google::protobuf::Descriptor* StageBlobItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StageBlobItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobStage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobStage_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestNpcData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestNpcData_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobQuestNpc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobQuestNpc_reflection_ = NULL;
const ::google::protobuf::Descriptor* BufferStateBlob_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BufferStateBlob_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobBuffer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobBuffer_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobPortrait_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobPortrait_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobHair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobHair_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobGearItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobGearItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobGears_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobGears_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobTipItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobTipItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobTips_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobTips_reflection_ = NULL;
const ::google::protobuf::Descriptor* FollowerItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FollowerItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobFollower_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobFollower_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobCDTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobCDTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobShortcut_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobShortcut_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobGMEffectItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobGMEffectItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobGMEffects_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobGMEffects_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobFreyja_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobFreyja_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobTransfer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobTransfer_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobLaboratory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobLaboratory_reflection_ = NULL;
const ::google::protobuf::Descriptor* SceneryItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SceneryItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* SceneryMapItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SceneryMapItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobScenery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobScenery_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobCarrier_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobCarrier_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobMenu_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobMenu_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobShopGotItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobShopGotItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobExchangeShop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobExchangeShop_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobKnownMaps_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobKnownMaps_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobInter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobInter_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobHands_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobHands_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobShow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobShow_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobTrace_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobTrace_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobOption_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobOption_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobDojo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobDojo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FoodItemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FoodItemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FoodLimitInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FoodLimitInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobFood_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobFood_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobHighRefine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobHighRefine_reflection_ = NULL;
const ::google::protobuf::Descriptor* PackageData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PackageData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemUseCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemUseCount_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemGetCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemGetCount_reflection_ = NULL;
const ::google::protobuf::Descriptor* RewardSafetyItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RewardSafetyItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobPack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobPack_reflection_ = NULL;
const ::google::protobuf::Descriptor* MapQuest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapQuest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobQuestPuzzle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobQuestPuzzle_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobQuest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobQuest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobTitle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobTitle_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobLineData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobLineData_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobLine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobLine_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobSpEffect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobSpEffect_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobHandNpc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobHandNpc_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobPet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobPet_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobWeaponPet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobWeaponPet_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobVar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobVar_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobAccVar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobAccVar_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillDamage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillDamage_reflection_ = NULL;
const ::google::protobuf::Descriptor* StatKillMonster_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatKillMonster_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobStatVar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobStatVar_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobChatMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobChatMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobUserTower_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobUserTower_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobSeal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobSeal_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobManual_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobManual_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobFirstActionDone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobFirstActionDone_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobAttr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobAttr_reflection_ = NULL;
const ::google::protobuf::Descriptor* MonsterNum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MonsterNum_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobCamera_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobCamera_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaidZone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaidZone_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobZone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobZone_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobGuild_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobGuild_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobTeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobUserZone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobUserZone_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobAccQuest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobAccQuest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobGlobalTower_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobGlobalTower_reflection_ = NULL;
const ::google::protobuf::Descriptor* GlobalSocialFocus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GlobalSocialFocus_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobGlobalSociality_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobGlobalSociality_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChargeData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChargeData_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobDeposit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobDeposit_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobTicketData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobTicketData_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobTicketCacheCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobTicketCacheCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobTicket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobTicket_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobCredit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobCredit_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobNewCredit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobNewCredit_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatCount_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobChat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobChat_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityCommonData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityCommonData_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobActivity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobActivity_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobRelation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobRelation_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShareNormal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShareNormal_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShareCalcItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShareCalcItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShareCalc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShareCalc_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShareFirstMvp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShareFirstMvp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShareFirstHand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShareFirstHand_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShareFirstCarrier_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShareFirstCarrier_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShareTrade_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShareTrade_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShareDamage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShareDamage_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobShare_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobShare_reflection_ = NULL;
const ::google::protobuf::Descriptor* AchieveDBItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AchieveDBItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobAchieve_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobAchieve_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobAuthorize_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobAuthorize_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildRaid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildRaid_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobGuildRaid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobGuildRaid_reflection_ = NULL;
const ::google::protobuf::Descriptor* AstrolabeStarData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AstrolabeStarData_reflection_ = NULL;
const ::google::protobuf::Descriptor* AstrolabeData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AstrolabeData_reflection_ = NULL;
const ::google::protobuf::Descriptor* AstrolabeMainData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AstrolabeMainData_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobAstrolabe_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobAstrolabe_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetAdventureDBItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetAdventureDBItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobPetAdventure_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobPetAdventure_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobPetWork_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobPetWork_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobEye_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobEye_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobTutorTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobTutorTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobActivityEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobActivityEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobGuildChallenge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobGuildChallenge_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobGvgData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobGvgData_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobUserData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobUserData_reflection_ = NULL;
const ::google::protobuf::Descriptor* DelPatchCharRecordCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DelPatchCharRecordCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobChatItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobChatItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatSaveRecordCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatSaveRecordCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryChatRecordCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryChatRecordCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserRenameQueryRecordCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserRenameQueryRecordCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserRenameResultRecordCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserRenameResultRecordCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* LotteryResultRecordCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LotteryResultRecordCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobBattle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobBattle_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobSeeNpc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobSeeNpc_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobSettings_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobSettings_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobPhoto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobPhoto_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobUserPet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobUserPet_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobUserBeing_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobUserBeing_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobJoyData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobJoyData_reflection_ = NULL;
const ::google::protobuf::Descriptor* LotteryPoolData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LotteryPoolData_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobLottery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobLottery_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobServant_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobServant_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProfessionData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProfessionData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProfessionSvrData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProfessionSvrData_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobProfession_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobProfession_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobRecordInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobRecordInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserProfessionData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserProfessionData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqUserProfessionCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqUserProfessionCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProfessionSaveRecordCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProfessionSaveRecordCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProfessionQueryRecordCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProfessionQueryRecordCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityQuestItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityQuestItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobActivityQuest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobActivityQuest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobBooth_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobBooth_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobElementElfData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobElementElfData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CheatTagRecordCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CheatTagRecordCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CheatTagQueryRecordCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CheatTagQueryRecordCmd_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RecordParam_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ETicketType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ETicketRet_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ETicketCmdType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EShareDataType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EPatchType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_RecordCmd_2eproto() {
  protobuf_AddDesc_RecordCmd_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "RecordCmd.proto");
  GOOGLE_CHECK(file != NULL);
  NotifyLoginRecordCmd_descriptor_ = file->message_type(0);
  static const int NotifyLoginRecordCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLoginRecordCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLoginRecordCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLoginRecordCmd, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLoginRecordCmd, accid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLoginRecordCmd, scenename_),
  };
  NotifyLoginRecordCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyLoginRecordCmd_descriptor_,
      NotifyLoginRecordCmd::default_instance_,
      NotifyLoginRecordCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLoginRecordCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLoginRecordCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyLoginRecordCmd));
  RecordUserData_descriptor_ = file->message_type(1);
  static const int RecordUserData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordUserData, acc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordUserData, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordUserData, redis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordUserData, acc_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordUserData, char_data_),
  };
  RecordUserData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecordUserData_descriptor_,
      RecordUserData::default_instance_,
      RecordUserData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordUserData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordUserData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecordUserData));
  RedisUserData_descriptor_ = file->message_type(2);
  static const int RedisUserData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedisUserData, portrait_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedisUserData, clothcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedisUserData, manuallv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedisUserData, manualexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedisUserData, querytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedisUserData, profic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedisUserData, blink_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedisUserData, canbetutor_),
  };
  RedisUserData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RedisUserData_descriptor_,
      RedisUserData::default_instance_,
      RedisUserData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedisUserData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedisUserData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RedisUserData));
  UserDataRecordCmd_descriptor_ = file->message_type(3);
  static const int UserDataRecordCmd_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDataRecordCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDataRecordCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDataRecordCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDataRecordCmd, accid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDataRecordCmd, unregtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDataRecordCmd, first_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDataRecordCmd, over_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDataRecordCmd, data_),
  };
  UserDataRecordCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserDataRecordCmd_descriptor_,
      UserDataRecordCmd::default_instance_,
      UserDataRecordCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDataRecordCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDataRecordCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserDataRecordCmd));
  ErrUserCharBaseRecordCmd_descriptor_ = file->message_type(4);
  static const int ErrUserCharBaseRecordCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrUserCharBaseRecordCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrUserCharBaseRecordCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrUserCharBaseRecordCmd, id_),
  };
  ErrUserCharBaseRecordCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ErrUserCharBaseRecordCmd_descriptor_,
      ErrUserCharBaseRecordCmd::default_instance_,
      ErrUserCharBaseRecordCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrUserCharBaseRecordCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrUserCharBaseRecordCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ErrUserCharBaseRecordCmd));
  MusicUpdateCmd_descriptor_ = file->message_type(5);
  static const int MusicUpdateCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MusicUpdateCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MusicUpdateCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MusicUpdateCmd, item_),
  };
  MusicUpdateCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MusicUpdateCmd_descriptor_,
      MusicUpdateCmd::default_instance_,
      MusicUpdateCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MusicUpdateCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MusicUpdateCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MusicUpdateCmd));
  LoadLuaSceneRecordCmd_descriptor_ = file->message_type(6);
  static const int LoadLuaSceneRecordCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadLuaSceneRecordCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadLuaSceneRecordCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadLuaSceneRecordCmd, table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadLuaSceneRecordCmd, lua_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadLuaSceneRecordCmd, log_),
  };
  LoadLuaSceneRecordCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoadLuaSceneRecordCmd_descriptor_,
      LoadLuaSceneRecordCmd::default_instance_,
      LoadLuaSceneRecordCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadLuaSceneRecordCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadLuaSceneRecordCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoadLuaSceneRecordCmd));
  ItemModifyRecordCmd_descriptor_ = file->message_type(7);
  static const int ItemModifyRecordCmd_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemModifyRecordCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemModifyRecordCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemModifyRecordCmd, accid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemModifyRecordCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemModifyRecordCmd, newid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemModifyRecordCmd, scenename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemModifyRecordCmd, guid_),
  };
  ItemModifyRecordCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemModifyRecordCmd_descriptor_,
      ItemModifyRecordCmd::default_instance_,
      ItemModifyRecordCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemModifyRecordCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemModifyRecordCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemModifyRecordCmd));
  ChangeAuthorizeRecordCmd_descriptor_ = file->message_type(8);
  static const int ChangeAuthorizeRecordCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeAuthorizeRecordCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeAuthorizeRecordCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeAuthorizeRecordCmd, accid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeAuthorizeRecordCmd, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeAuthorizeRecordCmd, resettime_),
  };
  ChangeAuthorizeRecordCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeAuthorizeRecordCmd_descriptor_,
      ChangeAuthorizeRecordCmd::default_instance_,
      ChangeAuthorizeRecordCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeAuthorizeRecordCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeAuthorizeRecordCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeAuthorizeRecordCmd));
  GuildMusicQueryRecordCmd_descriptor_ = file->message_type(9);
  static const int GuildMusicQueryRecordCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMusicQueryRecordCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMusicQueryRecordCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMusicQueryRecordCmd, scenename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMusicQueryRecordCmd, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMusicQueryRecordCmd, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMusicQueryRecordCmd, items_),
  };
  GuildMusicQueryRecordCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMusicQueryRecordCmd_descriptor_,
      GuildMusicQueryRecordCmd::default_instance_,
      GuildMusicQueryRecordCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMusicQueryRecordCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMusicQueryRecordCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMusicQueryRecordCmd));
  GuildMusicUpdateCmd_descriptor_ = file->message_type(10);
  static const int GuildMusicUpdateCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMusicUpdateCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMusicUpdateCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMusicUpdateCmd, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMusicUpdateCmd, item_),
  };
  GuildMusicUpdateCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMusicUpdateCmd_descriptor_,
      GuildMusicUpdateCmd::default_instance_,
      GuildMusicUpdateCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMusicUpdateCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMusicUpdateCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMusicUpdateCmd));
  GuildMusicDeleteRecordCmd_descriptor_ = file->message_type(11);
  static const int GuildMusicDeleteRecordCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMusicDeleteRecordCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMusicDeleteRecordCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMusicDeleteRecordCmd, guildid_),
  };
  GuildMusicDeleteRecordCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMusicDeleteRecordCmd_descriptor_,
      GuildMusicDeleteRecordCmd::default_instance_,
      GuildMusicDeleteRecordCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMusicDeleteRecordCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMusicDeleteRecordCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMusicDeleteRecordCmd));
  UserBaseData_descriptor_ = file->message_type(12);
  static const int UserBaseData_offsets_[52] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseData, platformid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseData, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseData, accid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseData, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseData, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseData, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseData, rolelv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseData, roleexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseData, charge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseData, diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseData, silver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseData, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseData, garden_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseData, friendship_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseData, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseData, onlinetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseData, offlinetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseData, addict_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseData, battletime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseData, body_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseData, addicttipstime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseData, gagtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseData, nologintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseData, rebattletime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseData, usedbattletime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseData, hair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseData, haircolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseData, lefthand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseData, righthand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseData, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseData, back_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseData, face_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseData, tail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseData, mount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseData, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseData, eye_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseData, partnerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseData, portrait_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseData, mouth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseData, clothcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseData, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseData, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseData, destprofession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseData, destzoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseData, originalzoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseData, maxbaselv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseData, lock_reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseData, gag_reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseData, questmapntf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseData, maincharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseData, maxpro_),
  };
  UserBaseData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserBaseData_descriptor_,
      UserBaseData::default_instance_,
      UserBaseData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserBaseData));
  BlobData_descriptor_ = file->message_type(13);
  static const int BlobData_offsets_[80] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobData, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobData, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobData, fighter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobData, stage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobData, questnpc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobData, buffer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobData, portrait_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobData, hair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobData, gear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobData, tip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobData, follower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobData, cd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobData, shortcut_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobData, effect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobData, freyja_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobData, lab_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobData, scenery_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobData, carrier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobData, menu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobData, shop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobData, knownmap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobData, iter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobData, hand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobData, show_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobData, trace_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobData, dojo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobData, pack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobData, quest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobData, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobData, line_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobData, pet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobData, var_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobData, chatmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobData, tower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobData, seal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobData, manual_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobData, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobData, attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobData, opt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobData, handnpc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobData, camera_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobData, zone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobData, guild_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobData, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobData, userzone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobData, speffect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobData, deposit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobData, activity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobData, chat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobData, battle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobData, statvar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobData, seenpc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobData, weaponpet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobData, ticket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobData, share_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobData, achieve_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobData, authorize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobData, guildraid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobData, astrolabe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobData, settings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobData, photo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobData, food_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobData, userpet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobData, petadventure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobData, tutortask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobData, eye_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobData, highrefine_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobData, acevent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobData, being_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobData, gchallenge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobData, gvgdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobData, lottery_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobData, servant_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobData, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobData, activityquest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobData, booth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobData, exchangeshop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobData, transfer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobData, element_elf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobData, boss_),
  };
  BlobData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobData_descriptor_,
      BlobData::default_instance_,
      BlobData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobData));
  UserAccData_descriptor_ = file->message_type(14);
  static const int UserAccData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAccData, nologintime_),
  };
  UserAccData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserAccData_descriptor_,
      UserAccData::default_instance_,
      UserAccData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAccData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAccData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserAccData));
  BlobAccData_descriptor_ = file->message_type(15);
  static const int BlobAccData_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobAccData, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobAccData, credit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobAccData, shop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobAccData, var_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobAccData, manual_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobAccData, food_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobAccData, quest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobAccData, achieve_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobAccData, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobAccData, scenery_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobAccData, menu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobAccData, acevent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobAccData, photo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobAccData, portrait_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobAccData, questnpc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobAccData, petwork_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobAccData, skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobAccData, servant_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobAccData, record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobAccData, pack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobAccData, lottery_),
  };
  BlobAccData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobAccData_descriptor_,
      BlobAccData::default_instance_,
      BlobAccData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobAccData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobAccData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobAccData));
  BlobAccUser_descriptor_ = file->message_type(16);
  static const int BlobAccUser_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobAccUser, auguryreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobAccUser, maxbaselv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobAccUser, maxbaselv_resettime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobAccUser, md5s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobAccUser, accjoy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobAccUser, shownpcs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobAccUser, char_primary_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobAccUser, patchversion_),
  };
  BlobAccUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobAccUser_descriptor_,
      BlobAccUser::default_instance_,
      BlobAccUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobAccUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobAccUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobAccUser));
  BlobUnsolvedPhoto_descriptor_ = file->message_type(17);
  static const int BlobUnsolvedPhoto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUnsolvedPhoto, photos_),
  };
  BlobUnsolvedPhoto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobUnsolvedPhoto_descriptor_,
      BlobUnsolvedPhoto::default_instance_,
      BlobUnsolvedPhoto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUnsolvedPhoto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUnsolvedPhoto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobUnsolvedPhoto));
  BlobBoss_descriptor_ = file->message_type(18);
  static const int BlobBoss_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobBoss, open_ntf_),
  };
  BlobBoss_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobBoss_descriptor_,
      BlobBoss::default_instance_,
      BlobBoss_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobBoss, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobBoss, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobBoss));
  BlobUser_descriptor_ = file->message_type(19);
  static const int BlobUser_offsets_[41] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUser, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUser, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUser, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUser, clothcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUser, purify_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUser, savemap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUser, lastmapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUser, lastrealmapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUser, shownpcs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUser, mapareas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUser, patchversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUser, teamtimelen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUser, followerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUser, leveluptime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUser, lastsmapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUser, sx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUser, sy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUser, sz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUser, healcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUser, zeny_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUser, zeny_debt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUser, pvp_coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUser, con_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUser, coninit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUser, charge_zeny_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUser, charge_lottery_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUser, lottery_coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUser, rename_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUser, guild_honor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUser, save_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUser, divorce_roller_coaster_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUser, daily_normal_zeny_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUser, daily_charge_zeny_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUser, tutorbattletime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUser, usedtutorbattletime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUser, last_offlinetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUser, last_baselv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUser, last_joblv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUser, dead_coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUser, dead_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUser, dead_exp_),
  };
  BlobUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobUser_descriptor_,
      BlobUser::default_instance_,
      BlobUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobUser));
  SkillReplaceInfo_descriptor_ = file->message_type(20);
  static const int SkillReplaceInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillReplaceInfo, oldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillReplaceInfo, newid_),
  };
  SkillReplaceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillReplaceInfo_descriptor_,
      SkillReplaceInfo::default_instance_,
      SkillReplaceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillReplaceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillReplaceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillReplaceInfo));
  SkillShortcutDB_descriptor_ = file->message_type(21);
  static const int SkillShortcutDB_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillShortcutDB, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillShortcutDB, cuts_),
  };
  SkillShortcutDB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillShortcutDB_descriptor_,
      SkillShortcutDB::default_instance_,
      SkillShortcutDB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillShortcutDB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillShortcutDB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillShortcutDB));
  UserSkillData_descriptor_ = file->message_type(22);
  static const int UserSkillData_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSkillData, totalpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSkillData, maxpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSkillData, datas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSkillData, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSkillData, automaxpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSkillData, autopos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSkillData, extendpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSkillData, maxextendpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSkillData, reseted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSkillData, replace_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSkillData, shortcuts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSkillData, last_concert_skillid_),
  };
  UserSkillData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserSkillData_descriptor_,
      UserSkillData::default_instance_,
      UserSkillData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSkillData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSkillData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserSkillData));
  BlobShareSkill_descriptor_ = file->message_type(23);
  static const int BlobShareSkill_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobShareSkill, items_),
  };
  BlobShareSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobShareSkill_descriptor_,
      BlobShareSkill::default_instance_,
      BlobShareSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobShareSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobShareSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobShareSkill));
  UserRoleData_descriptor_ = file->message_type(24);
  static const int UserRoleData_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRoleData, jobexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRoleData, joblv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRoleData, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRoleData, strpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRoleData, intpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRoleData, agipoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRoleData, dexpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRoleData, vitpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRoleData, lukpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRoleData, totalpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRoleData, usedpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRoleData, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRoleData, sp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRoleData, skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRoleData, unlocklv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRoleData, maxjoblv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRoleData, branch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRoleData, isbuy_),
  };
  UserRoleData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserRoleData_descriptor_,
      UserRoleData::default_instance_,
      UserRoleData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRoleData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRoleData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserRoleData));
  BlobFighter_descriptor_ = file->message_type(25);
  static const int BlobFighter_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobFighter, datas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobFighter, totalpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobFighter, maxskillpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobFighter, maxautopos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobFighter, maxextendpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobFighter, maxjoblv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobFighter, maxcurjoblv_),
  };
  BlobFighter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobFighter_descriptor_,
      BlobFighter::default_instance_,
      BlobFighter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobFighter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobFighter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobFighter));
  StageStepNormalBlob_descriptor_ = file->message_type(26);
  static const int StageStepNormalBlob_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageStepNormalBlob, stepid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageStepNormalBlob, star_),
  };
  StageStepNormalBlob_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StageStepNormalBlob_descriptor_,
      StageStepNormalBlob::default_instance_,
      StageStepNormalBlob_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageStepNormalBlob, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageStepNormalBlob, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StageStepNormalBlob));
  StageStepHardBlob_descriptor_ = file->message_type(27);
  static const int StageStepHardBlob_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageStepHardBlob, stepid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageStepHardBlob, finish_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageStepHardBlob, time_),
  };
  StageStepHardBlob_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StageStepHardBlob_descriptor_,
      StageStepHardBlob::default_instance_,
      StageStepHardBlob_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageStepHardBlob, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageStepHardBlob, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StageStepHardBlob));
  StageBlobItem_descriptor_ = file->message_type(28);
  static const int StageBlobItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageBlobItem, stageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageBlobItem, normalist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageBlobItem, hardlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageBlobItem, gets_),
  };
  StageBlobItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StageBlobItem_descriptor_,
      StageBlobItem::default_instance_,
      StageBlobItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageBlobItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageBlobItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StageBlobItem));
  BlobStage_descriptor_ = file->message_type(29);
  static const int BlobStage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobStage, list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobStage, resettime_),
  };
  BlobStage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobStage_descriptor_,
      BlobStage::default_instance_,
      BlobStage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobStage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobStage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobStage));
  QuestNpcData_descriptor_ = file->message_type(30);
  static const int QuestNpcData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestNpcData, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestNpcData, questid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestNpcData, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestNpcData, acc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestNpcData, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestNpcData, data_),
  };
  QuestNpcData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestNpcData_descriptor_,
      QuestNpcData::default_instance_,
      QuestNpcData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestNpcData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestNpcData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestNpcData));
  BlobQuestNpc_descriptor_ = file->message_type(31);
  static const int BlobQuestNpc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobQuestNpc, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobQuestNpc, list_),
  };
  BlobQuestNpc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobQuestNpc_descriptor_,
      BlobQuestNpc::default_instance_,
      BlobQuestNpc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobQuestNpc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobQuestNpc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobQuestNpc));
  BufferStateBlob_descriptor_ = file->message_type(32);
  static const int BufferStateBlob_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferStateBlob, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferStateBlob, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferStateBlob, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferStateBlob, fromid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferStateBlob, hponadd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferStateBlob, addtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferStateBlob, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferStateBlob, commmondata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferStateBlob, actflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferStateBlob, layers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferStateBlob, totaldamage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferStateBlob, attackcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferStateBlob, beatkcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferStateBlob, attrs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferStateBlob, vecdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferStateBlob, fromname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferStateBlob, sparetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferStateBlob, setendtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferStateBlob, timetick_),
  };
  BufferStateBlob_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BufferStateBlob_descriptor_,
      BufferStateBlob::default_instance_,
      BufferStateBlob_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferStateBlob, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferStateBlob, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BufferStateBlob));
  BlobBuffer_descriptor_ = file->message_type(33);
  static const int BlobBuffer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobBuffer, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobBuffer, list_),
  };
  BlobBuffer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobBuffer_descriptor_,
      BlobBuffer::default_instance_,
      BlobBuffer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobBuffer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobBuffer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobBuffer));
  BlobPortrait_descriptor_ = file->message_type(34);
  static const int BlobPortrait_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobPortrait, curportrait_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobPortrait, curframe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobPortrait, unlockportrait_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobPortrait, unlockframe_),
  };
  BlobPortrait_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobPortrait_descriptor_,
      BlobPortrait::default_instance_,
      BlobPortrait_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobPortrait, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobPortrait, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobPortrait));
  BlobHair_descriptor_ = file->message_type(35);
  static const int BlobHair_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobHair, curhair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobHair, curcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobHair, unlockhair_),
  };
  BlobHair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobHair_descriptor_,
      BlobHair::default_instance_,
      BlobHair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobHair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobHair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobHair));
  BlobGearItem_descriptor_ = file->message_type(36);
  static const int BlobGearItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGearItem, gearid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGearItem, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGearItem, sceneid_),
  };
  BlobGearItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobGearItem_descriptor_,
      BlobGearItem::default_instance_,
      BlobGearItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGearItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGearItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobGearItem));
  BlobGears_descriptor_ = file->message_type(37);
  static const int BlobGears_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGears, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGears, list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGears, exitlist_),
  };
  BlobGears_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobGears_descriptor_,
      BlobGears::default_instance_,
      BlobGears_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGears, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGears, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobGears));
  BlobTipItem_descriptor_ = file->message_type(38);
  static const int BlobTipItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobTipItem, red_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobTipItem, tipid_),
  };
  BlobTipItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobTipItem_descriptor_,
      BlobTipItem::default_instance_,
      BlobTipItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobTipItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobTipItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobTipItem));
  BlobTips_descriptor_ = file->message_type(39);
  static const int BlobTips_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobTips, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobTips, list_),
  };
  BlobTips_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobTips_descriptor_,
      BlobTips::default_instance_,
      BlobTips_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobTips, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobTips, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobTips));
  FollowerItem_descriptor_ = file->message_type(40);
  static const int FollowerItem_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FollowerItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FollowerItem, spdratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FollowerItem, behaviours_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FollowerItem, questid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FollowerItem, cleartime_),
  };
  FollowerItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FollowerItem_descriptor_,
      FollowerItem::default_instance_,
      FollowerItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FollowerItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FollowerItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FollowerItem));
  BlobFollower_descriptor_ = file->message_type(41);
  static const int BlobFollower_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobFollower, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobFollower, list_),
  };
  BlobFollower_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobFollower_descriptor_,
      BlobFollower::default_instance_,
      BlobFollower_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobFollower, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobFollower, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobFollower));
  BlobCDTime_descriptor_ = file->message_type(42);
  static const int BlobCDTime_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobCDTime, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobCDTime, list_),
  };
  BlobCDTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobCDTime_descriptor_,
      BlobCDTime::default_instance_,
      BlobCDTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobCDTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobCDTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobCDTime));
  BlobShortcut_descriptor_ = file->message_type(43);
  static const int BlobShortcut_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobShortcut, cut_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobShortcut, firstauto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobShortcut, version_),
  };
  BlobShortcut_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobShortcut_descriptor_,
      BlobShortcut::default_instance_,
      BlobShortcut_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobShortcut, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobShortcut, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobShortcut));
  BlobGMEffectItem_descriptor_ = file->message_type(44);
  static const int BlobGMEffectItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGMEffectItem, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGMEffectItem, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGMEffectItem, gmcommand_),
  };
  BlobGMEffectItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobGMEffectItem_descriptor_,
      BlobGMEffectItem::default_instance_,
      BlobGMEffectItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGMEffectItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGMEffectItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobGMEffectItem));
  BlobGMEffects_descriptor_ = file->message_type(45);
  static const int BlobGMEffects_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGMEffects, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGMEffects, list_),
  };
  BlobGMEffects_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobGMEffects_descriptor_,
      BlobGMEffects::default_instance_,
      BlobGMEffects_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGMEffects, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGMEffects, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobGMEffects));
  BlobFreyja_descriptor_ = file->message_type(46);
  static const int BlobFreyja_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobFreyja, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobFreyja, mapid_),
  };
  BlobFreyja_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobFreyja_descriptor_,
      BlobFreyja::default_instance_,
      BlobFreyja_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobFreyja, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobFreyja, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobFreyja));
  BlobTransfer_descriptor_ = file->message_type(47);
  static const int BlobTransfer_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobTransfer, npcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobTransfer, map1allactivated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobTransfer, map2allactivated_),
  };
  BlobTransfer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobTransfer_descriptor_,
      BlobTransfer::default_instance_,
      BlobTransfer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobTransfer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobTransfer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobTransfer));
  BlobLaboratory_descriptor_ = file->message_type(48);
  static const int BlobLaboratory_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobLaboratory, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobLaboratory, point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobLaboratory, days_),
  };
  BlobLaboratory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobLaboratory_descriptor_,
      BlobLaboratory::default_instance_,
      BlobLaboratory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobLaboratory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobLaboratory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobLaboratory));
  SceneryItem_descriptor_ = file->message_type(49);
  static const int SceneryItem_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneryItem, sceneryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneryItem, visited_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneryItem, upload_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneryItem, anglez_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneryItem, time_),
  };
  SceneryItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SceneryItem_descriptor_,
      SceneryItem::default_instance_,
      SceneryItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneryItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneryItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SceneryItem));
  SceneryMapItem_descriptor_ = file->message_type(50);
  static const int SceneryMapItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneryMapItem, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneryMapItem, scenerys_),
  };
  SceneryMapItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SceneryMapItem_descriptor_,
      SceneryMapItem::default_instance_,
      SceneryMapItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneryMapItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneryMapItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SceneryMapItem));
  BlobScenery_descriptor_ = file->message_type(51);
  static const int BlobScenery_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobScenery, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobScenery, list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobScenery, items_),
  };
  BlobScenery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobScenery_descriptor_,
      BlobScenery::default_instance_,
      BlobScenery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobScenery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobScenery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobScenery));
  BlobCarrier_descriptor_ = file->message_type(52);
  static const int BlobCarrier_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobCarrier, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobCarrier, assemble_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobCarrier, joinmaster_),
  };
  BlobCarrier_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobCarrier_descriptor_,
      BlobCarrier::default_instance_,
      BlobCarrier_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobCarrier, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobCarrier, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobCarrier));
  BlobMenu_descriptor_ = file->message_type(53);
  static const int BlobMenu_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobMenu, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobMenu, list_),
  };
  BlobMenu_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobMenu_descriptor_,
      BlobMenu::default_instance_,
      BlobMenu_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobMenu, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobMenu, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobMenu));
  BlobShopGotItem_descriptor_ = file->message_type(54);
  static const int BlobShopGotItem_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobShopGotItem, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobShopGotItem, list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobShopGotItem, random_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobShopGotItem, refreshlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobShopGotItem, refreshlv_resettime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobShopGotItem, month_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobShopGotItem, randombylv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobShopGotItem, discountact_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobShopGotItem, randomacc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobShopGotItem, listweek_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobShopGotItem, limitmonth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobShopGotItem, addcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobShopGotItem, limititem_),
  };
  BlobShopGotItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobShopGotItem_descriptor_,
      BlobShopGotItem::default_instance_,
      BlobShopGotItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobShopGotItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobShopGotItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobShopGotItem));
  BlobExchangeShop_descriptor_ = file->message_type(55);
  static const int BlobExchangeShop_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobExchangeShop, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobExchangeShop, menuopen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobExchangeShop, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobExchangeShop, itemget_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobExchangeShop, exchanged_goods_),
  };
  BlobExchangeShop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobExchangeShop_descriptor_,
      BlobExchangeShop::default_instance_,
      BlobExchangeShop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobExchangeShop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobExchangeShop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobExchangeShop));
  BlobKnownMaps_descriptor_ = file->message_type(56);
  static const int BlobKnownMaps_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobKnownMaps, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobKnownMaps, list_),
  };
  BlobKnownMaps_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobKnownMaps_descriptor_,
      BlobKnownMaps::default_instance_,
      BlobKnownMaps_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobKnownMaps, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobKnownMaps, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobKnownMaps));
  BlobInter_descriptor_ = file->message_type(57);
  static const int BlobInter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobInter, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobInter, list_),
  };
  BlobInter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobInter_descriptor_,
      BlobInter::default_instance_,
      BlobInter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobInter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobInter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobInter));
  BlobHands_descriptor_ = file->message_type(58);
  static const int BlobHands_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobHands, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobHands, ismaster_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobHands, otherid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobHands, forcejoinid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobHands, last_handname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobHands, handtimelen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobHands, nextrewardtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobHands, nexttiptime_),
  };
  BlobHands_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobHands_descriptor_,
      BlobHands::default_instance_,
      BlobHands_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobHands, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobHands, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobHands));
  BlobShow_descriptor_ = file->message_type(59);
  static const int BlobShow_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobShow, actions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobShow, expressions_),
  };
  BlobShow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobShow_descriptor_,
      BlobShow::default_instance_,
      BlobShow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobShow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobShow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobShow));
  BlobTrace_descriptor_ = file->message_type(60);
  static const int BlobTrace_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobTrace, items_),
  };
  BlobTrace_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobTrace_descriptor_,
      BlobTrace::default_instance_,
      BlobTrace_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobTrace, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobTrace, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobTrace));
  BlobOption_descriptor_ = file->message_type(61);
  static const int BlobOption_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobOption, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobOption, normalskill_option_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobOption, fashionhide_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobOption, bitopt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobOption, skillopts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobOption, wedding_type_),
  };
  BlobOption_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobOption_descriptor_,
      BlobOption::default_instance_,
      BlobOption_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobOption, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobOption, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobOption));
  BlobDojo_descriptor_ = file->message_type(62);
  static const int BlobDojo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobDojo, completedid_),
  };
  BlobDojo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobDojo_descriptor_,
      BlobDojo::default_instance_,
      BlobDojo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobDojo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobDojo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobDojo));
  FoodItemInfo_descriptor_ = file->message_type(63);
  static const int FoodItemInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FoodItemInfo, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FoodItemInfo, invalid_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FoodItemInfo, attrs_),
  };
  FoodItemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FoodItemInfo_descriptor_,
      FoodItemInfo::default_instance_,
      FoodItemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FoodItemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FoodItemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FoodItemInfo));
  FoodLimitInfo_descriptor_ = file->message_type(64);
  static const int FoodLimitInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FoodLimitInfo, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FoodLimitInfo, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FoodLimitInfo, time_),
  };
  FoodLimitInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FoodLimitInfo_descriptor_,
      FoodLimitInfo::default_instance_,
      FoodLimitInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FoodLimitInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FoodLimitInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FoodLimitInfo));
  BlobFood_descriptor_ = file->message_type(65);
  static const int BlobFood_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobFood, cookerexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobFood, cookerlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobFood, tasterexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobFood, tasterlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobFood, savehp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobFood, savesp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobFood, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobFood, weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobFood, recipes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobFood, manualdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobFood, iteminfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobFood, satiety_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobFood, last_cooked_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobFood, limitinfo_),
  };
  BlobFood_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobFood_descriptor_,
      BlobFood::default_instance_,
      BlobFood_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobFood, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobFood, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobFood));
  BlobHighRefine_descriptor_ = file->message_type(66);
  static const int BlobHighRefine_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobHighRefine, datas_),
  };
  BlobHighRefine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobHighRefine_descriptor_,
      BlobHighRefine::default_instance_,
      BlobHighRefine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobHighRefine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobHighRefine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobHighRefine));
  PackageData_descriptor_ = file->message_type(67);
  static const int PackageData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageData, items_),
  };
  PackageData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PackageData_descriptor_,
      PackageData::default_instance_,
      PackageData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PackageData));
  ItemUseCount_descriptor_ = file->message_type(68);
  static const int ItemUseCount_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemUseCount, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemUseCount, usecount_),
  };
  ItemUseCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemUseCount_descriptor_,
      ItemUseCount::default_instance_,
      ItemUseCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemUseCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemUseCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemUseCount));
  ItemGetCount_descriptor_ = file->message_type(69);
  static const int ItemGetCount_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemGetCount, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemGetCount, getcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemGetCount, source_),
  };
  ItemGetCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemGetCount_descriptor_,
      ItemGetCount::default_instance_,
      ItemGetCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemGetCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemGetCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemGetCount));
  RewardSafetyItem_descriptor_ = file->message_type(70);
  static const int RewardSafetyItem_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardSafetyItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardSafetyItem, expiretime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardSafetyItem, rollcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardSafetyItem, rewardcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardSafetyItem, nextsafetycount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardSafetyItem, version_),
  };
  RewardSafetyItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RewardSafetyItem_descriptor_,
      RewardSafetyItem::default_instance_,
      RewardSafetyItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardSafetyItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardSafetyItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RewardSafetyItem));
  BlobPack_descriptor_ = file->message_type(71);
  static const int BlobPack_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobPack, datas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobPack, hintitems_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobPack, frost_item_infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobPack, itemuse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobPack, onceitems_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobPack, itemget_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobPack, arrowid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobPack, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobPack, equipposdatas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobPack, rewardsafetyitems_),
  };
  BlobPack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobPack_descriptor_,
      BlobPack::default_instance_,
      BlobPack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobPack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobPack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobPack));
  MapQuest_descriptor_ = file->message_type(72);
  static const int MapQuest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapQuest, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapQuest, questids_),
  };
  MapQuest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MapQuest_descriptor_,
      MapQuest::default_instance_,
      MapQuest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapQuest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapQuest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MapQuest));
  BlobQuestPuzzle_descriptor_ = file->message_type(73);
  static const int BlobQuestPuzzle_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobQuestPuzzle, puzzles_),
  };
  BlobQuestPuzzle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobQuestPuzzle_descriptor_,
      BlobQuestPuzzle::default_instance_,
      BlobQuestPuzzle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobQuestPuzzle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobQuestPuzzle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobQuestPuzzle));
  BlobQuest_descriptor_ = file->message_type(74);
  static const int BlobQuest_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobQuest, accept_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobQuest, submit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobQuest, detail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobQuest, dailycount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobQuest, dailytcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobQuest, dailyexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobQuest, dailylevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobQuest, dailygift_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobQuest, lastcalcdailycounttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobQuest, mapquest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobQuest, maprandquest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobQuest, varreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobQuest, forbidquest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobQuest, process_acc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobQuest, puzzle_),
  };
  BlobQuest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobQuest_descriptor_,
      BlobQuest::default_instance_,
      BlobQuest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobQuest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobQuest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobQuest));
  BlobTitle_descriptor_ = file->message_type(75);
  static const int BlobTitle_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobTitle, curtitle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobTitle, datas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobTitle, curachievetitle_),
  };
  BlobTitle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobTitle_descriptor_,
      BlobTitle::default_instance_,
      BlobTitle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobTitle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobTitle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobTitle));
  BlobLineData_descriptor_ = file->message_type(76);
  static const int BlobLineData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobLineData, otherid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobLineData, expiretime_),
  };
  BlobLineData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobLineData_descriptor_,
      BlobLineData::default_instance_,
      BlobLineData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobLineData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobLineData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobLineData));
  BlobLine_descriptor_ = file->message_type(77);
  static const int BlobLine_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobLine, ilinewho_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobLine, wholineme_),
  };
  BlobLine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobLine_descriptor_,
      BlobLine::default_instance_,
      BlobLine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobLine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobLine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobLine));
  BlobSpEffect_descriptor_ = file->message_type(78);
  static const int BlobSpEffect_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobSpEffect, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobSpEffect, wholineme_),
  };
  BlobSpEffect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobSpEffect_descriptor_,
      BlobSpEffect::default_instance_,
      BlobSpEffect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobSpEffect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobSpEffect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobSpEffect));
  BlobHandNpc_descriptor_ = file->message_type(79);
  static const int BlobHandNpc_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobHandNpc, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobHandNpc, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobHandNpc, endtime_),
  };
  BlobHandNpc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobHandNpc_descriptor_,
      BlobHandNpc::default_instance_,
      BlobHandNpc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobHandNpc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobHandNpc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobHandNpc));
  BlobPet_descriptor_ = file->message_type(80);
  static const int BlobPet_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobPet, activepet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobPet, activepartner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobPet, datas_),
  };
  BlobPet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobPet_descriptor_,
      BlobPet::default_instance_,
      BlobPet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobPet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobPet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobPet));
  BlobWeaponPet_descriptor_ = file->message_type(81);
  static const int BlobWeaponPet_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobWeaponPet, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobWeaponPet, datas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobWeaponPet, maxpetsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobWeaponPet, unlockids_),
  };
  BlobWeaponPet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobWeaponPet_descriptor_,
      BlobWeaponPet::default_instance_,
      BlobWeaponPet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobWeaponPet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobWeaponPet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobWeaponPet));
  BlobVar_descriptor_ = file->message_type(82);
  static const int BlobVar_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobVar, datas_),
  };
  BlobVar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobVar_descriptor_,
      BlobVar::default_instance_,
      BlobVar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobVar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobVar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobVar));
  BlobAccVar_descriptor_ = file->message_type(83);
  static const int BlobAccVar_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobAccVar, datas_),
  };
  BlobAccVar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobAccVar_descriptor_,
      BlobAccVar::default_instance_,
      BlobAccVar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobAccVar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobAccVar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobAccVar));
  SkillDamage_descriptor_ = file->message_type(84);
  static const int SkillDamage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDamage, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDamage, damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDamage, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDamage, targetid_),
  };
  SkillDamage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillDamage_descriptor_,
      SkillDamage::default_instance_,
      SkillDamage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDamage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDamage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillDamage));
  StatKillMonster_descriptor_ = file->message_type(85);
  static const int StatKillMonster_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatKillMonster, monsterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatKillMonster, killnum_),
  };
  StatKillMonster_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StatKillMonster_descriptor_,
      StatKillMonster::default_instance_,
      StatKillMonster_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatKillMonster, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatKillMonster, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StatKillMonster));
  BlobStatVar_descriptor_ = file->message_type(86);
  static const int BlobStatVar_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobStatVar, datas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobStatVar, skilldamage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobStatVar, killmonster_),
  };
  BlobStatVar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobStatVar_descriptor_,
      BlobStatVar::default_instance_,
      BlobStatVar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobStatVar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobStatVar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobStatVar));
  BlobChatMsg_descriptor_ = file->message_type(87);
  static const int BlobChatMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobChatMsg, preset_),
  };
  BlobChatMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobChatMsg_descriptor_,
      BlobChatMsg::default_instance_,
      BlobChatMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobChatMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobChatMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobChatMsg));
  BlobUserTower_descriptor_ = file->message_type(88);
  static const int BlobUserTower_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUserTower, towerinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUserTower, cleartime_),
  };
  BlobUserTower_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobUserTower_descriptor_,
      BlobUserTower::default_instance_,
      BlobUserTower_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUserTower, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUserTower, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobUserTower));
  BlobSeal_descriptor_ = file->message_type(89);
  static const int BlobSeal_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobSeal, datas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobSeal, questseals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobSeal, nexttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobSeal, openseals_),
  };
  BlobSeal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobSeal_descriptor_,
      BlobSeal::default_instance_,
      BlobSeal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobSeal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobSeal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobSeal));
  BlobManual_descriptor_ = file->message_type(90);
  static const int BlobManual_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobManual, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobManual, isadd_),
  };
  BlobManual_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobManual_descriptor_,
      BlobManual::default_instance_,
      BlobManual_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobManual, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobManual, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobManual));
  BlobFirstActionDone_descriptor_ = file->message_type(91);
  static const int BlobFirstActionDone_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobFirstActionDone, action_),
  };
  BlobFirstActionDone_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobFirstActionDone_descriptor_,
      BlobFirstActionDone::default_instance_,
      BlobFirstActionDone_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobFirstActionDone, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobFirstActionDone, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobFirstActionDone));
  BlobAttr_descriptor_ = file->message_type(92);
  static const int BlobAttr_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobAttr, datas_),
  };
  BlobAttr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobAttr_descriptor_,
      BlobAttr::default_instance_,
      BlobAttr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobAttr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobAttr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobAttr));
  MonsterNum_descriptor_ = file->message_type(93);
  static const int MonsterNum_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterNum, monsterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterNum, count_),
  };
  MonsterNum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MonsterNum_descriptor_,
      MonsterNum::default_instance_,
      MonsterNum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterNum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterNum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MonsterNum));
  BlobCamera_descriptor_ = file->message_type(94);
  static const int BlobCamera_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobCamera, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobCamera, monsters_),
  };
  BlobCamera_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobCamera_descriptor_,
      BlobCamera::default_instance_,
      BlobCamera_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobCamera, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobCamera, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobCamera));
  RaidZone_descriptor_ = file->message_type(95);
  static const int RaidZone_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaidZone, raidid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaidZone, zoneid_),
  };
  RaidZone_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RaidZone_descriptor_,
      RaidZone::default_instance_,
      RaidZone_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaidZone, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaidZone, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RaidZone));
  BlobZone_descriptor_ = file->message_type(96);
  static const int BlobZone_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobZone, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobZone, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobZone, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobZone, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobZone, pastzoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobZone, raidzonelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobZone, effectivetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobZone, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobZone, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobZone, colorindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobZone, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobZone, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobZone, z_),
  };
  BlobZone_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobZone_descriptor_,
      BlobZone::default_instance_,
      BlobZone_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobZone, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobZone, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobZone));
  BlobGuild_descriptor_ = file->message_type(97);
  static const int BlobGuild_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGuild, info_),
  };
  BlobGuild_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobGuild_descriptor_,
      BlobGuild::default_instance_,
      BlobGuild_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGuild, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGuild, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobGuild));
  BlobTeam_descriptor_ = file->message_type(98);
  static const int BlobTeam_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobTeam, info_),
  };
  BlobTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobTeam_descriptor_,
      BlobTeam::default_instance_,
      BlobTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobTeam));
  BlobUserZone_descriptor_ = file->message_type(99);
  static const int BlobUserZone_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUserZone, infos_),
  };
  BlobUserZone_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobUserZone_descriptor_,
      BlobUserZone::default_instance_,
      BlobUserZone_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUserZone, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUserZone, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobUserZone));
  BlobAccQuest_descriptor_ = file->message_type(100);
  static const int BlobAccQuest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobAccQuest, accept_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobAccQuest, choice_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobAccQuest, version_),
  };
  BlobAccQuest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobAccQuest_descriptor_,
      BlobAccQuest::default_instance_,
      BlobAccQuest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobAccQuest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobAccQuest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobAccQuest));
  BlobGlobalTower_descriptor_ = file->message_type(101);
  static const int BlobGlobalTower_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGlobalTower, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGlobalTower, var_),
  };
  BlobGlobalTower_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobGlobalTower_descriptor_,
      BlobGlobalTower::default_instance_,
      BlobGlobalTower_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGlobalTower, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGlobalTower, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobGlobalTower));
  GlobalSocialFocus_descriptor_ = file->message_type(102);
  static const int GlobalSocialFocus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalSocialFocus, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalSocialFocus, guids_),
  };
  GlobalSocialFocus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GlobalSocialFocus_descriptor_,
      GlobalSocialFocus::default_instance_,
      GlobalSocialFocus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalSocialFocus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalSocialFocus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GlobalSocialFocus));
  BlobGlobalSociality_descriptor_ = file->message_type(103);
  static const int BlobGlobalSociality_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGlobalSociality, applys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGlobalSociality, focuss_),
  };
  BlobGlobalSociality_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobGlobalSociality_descriptor_,
      BlobGlobalSociality::default_instance_,
      BlobGlobalSociality_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGlobalSociality, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGlobalSociality, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobGlobalSociality));
  ChargeData_descriptor_ = file->message_type(104);
  static const int ChargeData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeData, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeData, money_),
  };
  ChargeData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChargeData_descriptor_,
      ChargeData::default_instance_,
      ChargeData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChargeData));
  BlobDeposit_descriptor_ = file->message_type(105);
  static const int BlobDeposit_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobDeposit, typedatas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobDeposit, carddatas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobDeposit, chargedatas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobDeposit, usedcards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobDeposit, hasquota_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobDeposit, quota_detail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobDeposit, quota_log_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobDeposit, getitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobDeposit, quota_lock_),
  };
  BlobDeposit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobDeposit_descriptor_,
      BlobDeposit::default_instance_,
      BlobDeposit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobDeposit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobDeposit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobDeposit));
  BlobTicketData_descriptor_ = file->message_type(106);
  static const int BlobTicketData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobTicketData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobTicketData, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobTicketData, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobTicketData, time_),
  };
  BlobTicketData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobTicketData_descriptor_,
      BlobTicketData::default_instance_,
      BlobTicketData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobTicketData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobTicketData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobTicketData));
  BlobTicketCacheCmd_descriptor_ = file->message_type(107);
  static const int BlobTicketCacheCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobTicketCacheCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobTicketCacheCmd, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobTicketCacheCmd, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobTicketCacheCmd, len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobTicketCacheCmd, time_),
  };
  BlobTicketCacheCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobTicketCacheCmd_descriptor_,
      BlobTicketCacheCmd::default_instance_,
      BlobTicketCacheCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobTicketCacheCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobTicketCacheCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobTicketCacheCmd));
  BlobTicket_descriptor_ = file->message_type(108);
  static const int BlobTicket_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobTicket, tickdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobTicket, cache_cmds_),
  };
  BlobTicket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobTicket_descriptor_,
      BlobTicket::default_instance_,
      BlobTicket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobTicket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobTicket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobTicket));
  BlobCredit_descriptor_ = file->message_type(109);
  static const int BlobCredit_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobCredit, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobCredit, credit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobCredit, monster_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobCredit, savedtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobCredit, forbidtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobCredit, auguryreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobCredit, shop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobCredit, var_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobCredit, maxbaselv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobCredit, maxbaselv_resettime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobCredit, acevent_),
  };
  BlobCredit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobCredit_descriptor_,
      BlobCredit::default_instance_,
      BlobCredit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobCredit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobCredit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobCredit));
  BlobNewCredit_descriptor_ = file->message_type(110);
  static const int BlobNewCredit_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobNewCredit, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobNewCredit, credit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobNewCredit, monster_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobNewCredit, savedtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobNewCredit, forbidtime_),
  };
  BlobNewCredit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobNewCredit_descriptor_,
      BlobNewCredit::default_instance_,
      BlobNewCredit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobNewCredit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobNewCredit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobNewCredit));
  ChatCount_descriptor_ = file->message_type(111);
  static const int ChatCount_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatCount, targetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatCount, to_chat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatCount, from_chat_),
  };
  ChatCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatCount_descriptor_,
      ChatCount::default_instance_,
      ChatCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatCount));
  ChatItem_descriptor_ = file->message_type(112);
  static const int ChatItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatItem, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatItem, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatItem, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatItem, msg_),
  };
  ChatItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatItem_descriptor_,
      ChatItem::default_instance_,
      ChatItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatItem));
  BlobChat_descriptor_ = file->message_type(113);
  static const int BlobChat_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobChat, counts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobChat, savelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobChat, items_),
  };
  BlobChat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobChat_descriptor_,
      BlobChat::default_instance_,
      BlobChat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobChat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobChat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobChat));
  ActivityCommonData_descriptor_ = file->message_type(114);
  static const int ActivityCommonData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityCommonData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityCommonData, params_),
  };
  ActivityCommonData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityCommonData_descriptor_,
      ActivityCommonData::default_instance_,
      ActivityCommonData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityCommonData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityCommonData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityCommonData));
  BlobActivity_descriptor_ = file->message_type(115);
  static const int BlobActivity_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobActivity, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobActivity, activitydatas_),
  };
  BlobActivity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobActivity_descriptor_,
      BlobActivity::default_instance_,
      BlobActivity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobActivity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobActivity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobActivity));
  BlobRelation_descriptor_ = file->message_type(116);
  static const int BlobRelation_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobRelation, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobRelation, black_),
  };
  BlobRelation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobRelation_descriptor_,
      BlobRelation::default_instance_,
      BlobRelation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobRelation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobRelation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobRelation));
  ShareNormal_descriptor_ = file->message_type(117);
  static const int ShareNormal_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShareNormal, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShareNormal, value_),
  };
  ShareNormal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShareNormal_descriptor_,
      ShareNormal::default_instance_,
      ShareNormal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShareNormal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShareNormal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShareNormal));
  ShareCalcItem_descriptor_ = file->message_type(118);
  static const int ShareCalcItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShareCalcItem, high_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShareCalcItem, low_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShareCalcItem, high_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShareCalcItem, low_value_),
  };
  ShareCalcItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShareCalcItem_descriptor_,
      ShareCalcItem::default_instance_,
      ShareCalcItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShareCalcItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShareCalcItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShareCalcItem));
  ShareCalc_descriptor_ = file->message_type(119);
  static const int ShareCalc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShareCalc, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShareCalc, items_),
  };
  ShareCalc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShareCalc_descriptor_,
      ShareCalc::default_instance_,
      ShareCalc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShareCalc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShareCalc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShareCalc));
  ShareFirstMvp_descriptor_ = file->message_type(120);
  static const int ShareFirstMvp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShareFirstMvp, mvpid_),
  };
  ShareFirstMvp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShareFirstMvp_descriptor_,
      ShareFirstMvp::default_instance_,
      ShareFirstMvp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShareFirstMvp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShareFirstMvp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShareFirstMvp));
  ShareFirstHand_descriptor_ = file->message_type(121);
  static const int ShareFirstHand_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShareFirstHand, otherid_),
  };
  ShareFirstHand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShareFirstHand_descriptor_,
      ShareFirstHand::default_instance_,
      ShareFirstHand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShareFirstHand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShareFirstHand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShareFirstHand));
  ShareFirstCarrier_descriptor_ = file->message_type(122);
  static const int ShareFirstCarrier_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShareFirstCarrier, otherid_),
  };
  ShareFirstCarrier_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShareFirstCarrier_descriptor_,
      ShareFirstCarrier::default_instance_,
      ShareFirstCarrier_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShareFirstCarrier, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShareFirstCarrier, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShareFirstCarrier));
  ShareTrade_descriptor_ = file->message_type(123);
  static const int ShareTrade_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShareTrade, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShareTrade, total_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShareTrade, refine_lv_),
  };
  ShareTrade_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShareTrade_descriptor_,
      ShareTrade::default_instance_,
      ShareTrade_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShareTrade, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShareTrade, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShareTrade));
  ShareDamage_descriptor_ = file->message_type(124);
  static const int ShareDamage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShareDamage, damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShareDamage, target_),
  };
  ShareDamage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShareDamage_descriptor_,
      ShareDamage::default_instance_,
      ShareDamage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShareDamage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShareDamage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShareDamage));
  BlobShare_descriptor_ = file->message_type(125);
  static const int BlobShare_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobShare, normaldata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobShare, calcdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobShare, firstmvp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobShare, firstphoto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobShare, firsthand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobShare, firstcarrier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobShare, tradebuy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobShare, tradesell_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobShare, maxdamage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobShare, mystery_box_),
  };
  BlobShare_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobShare_descriptor_,
      BlobShare::default_instance_,
      BlobShare_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobShare, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobShare, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobShare));
  AchieveDBItem_descriptor_ = file->message_type(126);
  static const int AchieveDBItem_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchieveDBItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchieveDBItem, process_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchieveDBItem, finishtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchieveDBItem, reward_get_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchieveDBItem, params_),
  };
  AchieveDBItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AchieveDBItem_descriptor_,
      AchieveDBItem::default_instance_,
      AchieveDBItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchieveDBItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchieveDBItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AchieveDBItem));
  BlobAchieve_descriptor_ = file->message_type(127);
  static const int BlobAchieve_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobAchieve, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobAchieve, max_cache_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobAchieve, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobAchieve, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobAchieve, char_version_),
  };
  BlobAchieve_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobAchieve_descriptor_,
      BlobAchieve::default_instance_,
      BlobAchieve_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobAchieve, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobAchieve, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobAchieve));
  BlobAuthorize_descriptor_ = file->message_type(128);
  static const int BlobAuthorize_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobAuthorize, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobAuthorize, resettime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobAuthorize, inputtime_),
  };
  BlobAuthorize_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobAuthorize_descriptor_,
      BlobAuthorize::default_instance_,
      BlobAuthorize_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobAuthorize, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobAuthorize, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobAuthorize));
  GuildRaid_descriptor_ = file->message_type(129);
  static const int GuildRaid_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRaid, npcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRaid, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRaid, killedboss_),
  };
  GuildRaid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildRaid_descriptor_,
      GuildRaid::default_instance_,
      GuildRaid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRaid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRaid, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildRaid));
  BlobGuildRaid_descriptor_ = file->message_type(130);
  static const int BlobGuildRaid_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGuildRaid, raid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGuildRaid, raidversion_),
  };
  BlobGuildRaid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobGuildRaid_descriptor_,
      BlobGuildRaid::default_instance_,
      BlobGuildRaid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGuildRaid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGuildRaid, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobGuildRaid));
  AstrolabeStarData_descriptor_ = file->message_type(131);
  static const int AstrolabeStarData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AstrolabeStarData, id_),
  };
  AstrolabeStarData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AstrolabeStarData_descriptor_,
      AstrolabeStarData::default_instance_,
      AstrolabeStarData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AstrolabeStarData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AstrolabeStarData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AstrolabeStarData));
  AstrolabeData_descriptor_ = file->message_type(132);
  static const int AstrolabeData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AstrolabeData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AstrolabeData, stars_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AstrolabeData, costs_),
  };
  AstrolabeData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AstrolabeData_descriptor_,
      AstrolabeData::default_instance_,
      AstrolabeData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AstrolabeData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AstrolabeData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AstrolabeData));
  AstrolabeMainData_descriptor_ = file->message_type(133);
  static const int AstrolabeMainData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AstrolabeMainData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AstrolabeMainData, astrolabes_),
  };
  AstrolabeMainData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AstrolabeMainData_descriptor_,
      AstrolabeMainData::default_instance_,
      AstrolabeMainData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AstrolabeMainData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AstrolabeMainData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AstrolabeMainData));
  BlobAstrolabe_descriptor_ = file->message_type(134);
  static const int BlobAstrolabe_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobAstrolabe, datas_),
  };
  BlobAstrolabe_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobAstrolabe_descriptor_,
      BlobAstrolabe::default_instance_,
      BlobAstrolabe_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobAstrolabe, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobAstrolabe, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobAstrolabe));
  PetAdventureDBItem_descriptor_ = file->message_type(135);
  static const int PetAdventureDBItem_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetAdventureDBItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetAdventureDBItem, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetAdventureDBItem, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetAdventureDBItem, eggs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetAdventureDBItem, steps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetAdventureDBItem, raresreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetAdventureDBItem, specid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetAdventureDBItem, eff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetAdventureDBItem, rewardinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetAdventureDBItem, extrarewardinfo_),
  };
  PetAdventureDBItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetAdventureDBItem_descriptor_,
      PetAdventureDBItem::default_instance_,
      PetAdventureDBItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetAdventureDBItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetAdventureDBItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetAdventureDBItem));
  BlobPetAdventure_descriptor_ = file->message_type(136);
  static const int BlobPetAdventure_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobPetAdventure, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobPetAdventure, unlockarea_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobPetAdventure, version_),
  };
  BlobPetAdventure_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobPetAdventure_descriptor_,
      BlobPetAdventure::default_instance_,
      BlobPetAdventure_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobPetAdventure, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobPetAdventure, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobPetAdventure));
  BlobPetWork_descriptor_ = file->message_type(137);
  static const int BlobPetWork_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobPetWork, manual_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobPetWork, datas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobPetWork, pets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobPetWork, rewards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobPetWork, card_expiretime_),
  };
  BlobPetWork_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobPetWork_descriptor_,
      BlobPetWork::default_instance_,
      BlobPetWork_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobPetWork, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobPetWork, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobPetWork));
  BlobEye_descriptor_ = file->message_type(138);
  static const int BlobEye_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobEye, curid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobEye, unlockids_),
  };
  BlobEye_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobEye_descriptor_,
      BlobEye::default_instance_,
      BlobEye_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobEye, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobEye, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobEye));
  BlobTutorTask_descriptor_ = file->message_type(139);
  static const int BlobTutorTask_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobTutorTask, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobTutorTask, proficiency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobTutorTask, tutorrewards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobTutorTask, growreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobTutorTask, tutorgrowreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobTutorTask, growrewardlv_),
  };
  BlobTutorTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobTutorTask_descriptor_,
      BlobTutorTask::default_instance_,
      BlobTutorTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobTutorTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobTutorTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobTutorTask));
  BlobActivityEvent_descriptor_ = file->message_type(140);
  static const int BlobActivityEvent_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobActivityEvent, rewarditems_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobActivityEvent, eventcnt_),
  };
  BlobActivityEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobActivityEvent_descriptor_,
      BlobActivityEvent::default_instance_,
      BlobActivityEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobActivityEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobActivityEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobActivityEvent));
  BlobGuildChallenge_descriptor_ = file->message_type(141);
  static const int BlobGuildChallenge_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGuildChallenge, items_),
  };
  BlobGuildChallenge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobGuildChallenge_descriptor_,
      BlobGuildChallenge::default_instance_,
      BlobGuildChallenge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGuildChallenge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGuildChallenge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobGuildChallenge));
  BlobGvgData_descriptor_ = file->message_type(142);
  static const int BlobGvgData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGvgData, datas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGvgData, expiretime_),
  };
  BlobGvgData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobGvgData_descriptor_,
      BlobGvgData::default_instance_,
      BlobGvgData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGvgData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobGvgData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobGvgData));
  BlobUserData_descriptor_ = file->message_type(143);
  static const int BlobUserData_offsets_[40] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUserData, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUserData, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUserData, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUserData, cdtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUserData, shortcuts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUserData, follower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUserData, stage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUserData, questnpc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUserData, buffer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUserData, menu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUserData, clothcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUserData, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUserData, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUserData, hair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUserData, maps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUserData, gear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUserData, garden_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUserData, purify_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUserData, tips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUserData, savemap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUserData, gms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUserData, freyja_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUserData, inters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUserData, laboratory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUserData, scenery_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUserData, carrier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUserData, lastmapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUserData, shownpcs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUserData, mapareas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUserData, hands_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUserData, usershow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUserData, lastrealmapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUserData, trace_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUserData, option_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUserData, firstaction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUserData, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUserData, lines_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUserData, dojo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUserData, patchversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUserData, food_),
  };
  BlobUserData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobUserData_descriptor_,
      BlobUserData::default_instance_,
      BlobUserData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUserData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUserData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobUserData));
  DelPatchCharRecordCmd_descriptor_ = file->message_type(144);
  static const int DelPatchCharRecordCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelPatchCharRecordCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelPatchCharRecordCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelPatchCharRecordCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelPatchCharRecordCmd, type_),
  };
  DelPatchCharRecordCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DelPatchCharRecordCmd_descriptor_,
      DelPatchCharRecordCmd::default_instance_,
      DelPatchCharRecordCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelPatchCharRecordCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelPatchCharRecordCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DelPatchCharRecordCmd));
  BlobChatItem_descriptor_ = file->message_type(145);
  static const int BlobChatItem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobChatItem, items_),
  };
  BlobChatItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobChatItem_descriptor_,
      BlobChatItem::default_instance_,
      BlobChatItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobChatItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobChatItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobChatItem));
  ChatSaveRecordCmd_descriptor_ = file->message_type(146);
  static const int ChatSaveRecordCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatSaveRecordCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatSaveRecordCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatSaveRecordCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatSaveRecordCmd, portrait_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatSaveRecordCmd, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatSaveRecordCmd, data_),
  };
  ChatSaveRecordCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatSaveRecordCmd_descriptor_,
      ChatSaveRecordCmd::default_instance_,
      ChatSaveRecordCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatSaveRecordCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatSaveRecordCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatSaveRecordCmd));
  QueryChatRecordCmd_descriptor_ = file->message_type(147);
  static const int QueryChatRecordCmd_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryChatRecordCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryChatRecordCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryChatRecordCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryChatRecordCmd, targetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryChatRecordCmd, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryChatRecordCmd, end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryChatRecordCmd, selfport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryChatRecordCmd, targetport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryChatRecordCmd, scenename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryChatRecordCmd, datas_),
  };
  QueryChatRecordCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryChatRecordCmd_descriptor_,
      QueryChatRecordCmd::default_instance_,
      QueryChatRecordCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryChatRecordCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryChatRecordCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryChatRecordCmd));
  UserRenameQueryRecordCmd_descriptor_ = file->message_type(148);
  static const int UserRenameQueryRecordCmd_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRenameQueryRecordCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRenameQueryRecordCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRenameQueryRecordCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRenameQueryRecordCmd, accid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRenameQueryRecordCmd, oldname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRenameQueryRecordCmd, newname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRenameQueryRecordCmd, scenename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRenameQueryRecordCmd, code_),
  };
  UserRenameQueryRecordCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserRenameQueryRecordCmd_descriptor_,
      UserRenameQueryRecordCmd::default_instance_,
      UserRenameQueryRecordCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRenameQueryRecordCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRenameQueryRecordCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserRenameQueryRecordCmd));
  UserRenameResultRecordCmd_descriptor_ = file->message_type(149);
  static const int UserRenameResultRecordCmd_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRenameResultRecordCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRenameResultRecordCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRenameResultRecordCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRenameResultRecordCmd, accid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRenameResultRecordCmd, newname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRenameResultRecordCmd, oldname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRenameResultRecordCmd, success_),
  };
  UserRenameResultRecordCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserRenameResultRecordCmd_descriptor_,
      UserRenameResultRecordCmd::default_instance_,
      UserRenameResultRecordCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRenameResultRecordCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRenameResultRecordCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserRenameResultRecordCmd));
  LotteryResultRecordCmd_descriptor_ = file->message_type(150);
  static const int LotteryResultRecordCmd_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryResultRecordCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryResultRecordCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryResultRecordCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryResultRecordCmd, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryResultRecordCmd, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryResultRecordCmd, itemname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryResultRecordCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryResultRecordCmd, rate_),
  };
  LotteryResultRecordCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LotteryResultRecordCmd_descriptor_,
      LotteryResultRecordCmd::default_instance_,
      LotteryResultRecordCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryResultRecordCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryResultRecordCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LotteryResultRecordCmd));
  BlobBattle_descriptor_ = file->message_type(151);
  static const int BlobBattle_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobBattle, totalbattletime_),
  };
  BlobBattle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobBattle_descriptor_,
      BlobBattle::default_instance_,
      BlobBattle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobBattle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobBattle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobBattle));
  BlobSeeNpc_descriptor_ = file->message_type(152);
  static const int BlobSeeNpc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobSeeNpc, see_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobSeeNpc, hide_),
  };
  BlobSeeNpc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobSeeNpc_descriptor_,
      BlobSeeNpc::default_instance_,
      BlobSeeNpc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobSeeNpc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobSeeNpc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobSeeNpc));
  BlobSettings_descriptor_ = file->message_type(153);
  static const int BlobSettings_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobSettings, transmap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobSettings, trans_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobSettings, trans_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobSettings, trans_z_),
  };
  BlobSettings_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobSettings_descriptor_,
      BlobSettings::default_instance_,
      BlobSettings_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobSettings, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobSettings, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobSettings));
  BlobPhoto_descriptor_ = file->message_type(154);
  static const int BlobPhoto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobPhoto, items_),
  };
  BlobPhoto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobPhoto_descriptor_,
      BlobPhoto::default_instance_,
      BlobPhoto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobPhoto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobPhoto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobPhoto));
  BlobUserPet_descriptor_ = file->message_type(155);
  static const int BlobUserPet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUserPet, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUserPet, unlockinfo_),
  };
  BlobUserPet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobUserPet_descriptor_,
      BlobUserPet::default_instance_,
      BlobUserPet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUserPet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUserPet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobUserPet));
  BlobUserBeing_descriptor_ = file->message_type(156);
  static const int BlobUserBeing_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUserBeing, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUserBeing, curbeingid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUserBeing, skillpoint_),
  };
  BlobUserBeing_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobUserBeing_descriptor_,
      BlobUserBeing::default_instance_,
      BlobUserBeing_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUserBeing, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobUserBeing, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobUserBeing));
  BlobJoyData_descriptor_ = file->message_type(157);
  static const int BlobJoyData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobJoyData, etype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobJoyData, joyvalue_),
  };
  BlobJoyData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobJoyData_descriptor_,
      BlobJoyData::default_instance_,
      BlobJoyData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobJoyData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobJoyData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobJoyData));
  LotteryPoolData_descriptor_ = file->message_type(158);
  static const int LotteryPoolData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryPoolData, poolid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryPoolData, coin_),
  };
  LotteryPoolData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LotteryPoolData_descriptor_,
      LotteryPoolData::default_instance_,
      LotteryPoolData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryPoolData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryPoolData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LotteryPoolData));
  BlobLottery_descriptor_ = file->message_type(159);
  static const int BlobLottery_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobLottery, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobLottery, pools_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobLottery, pooltime_),
  };
  BlobLottery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobLottery_descriptor_,
      BlobLottery::default_instance_,
      BlobLottery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobLottery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobLottery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobLottery));
  BlobServant_descriptor_ = file->message_type(160);
  static const int BlobServant_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobServant, servantid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobServant, recitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobServant, ownservant_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobServant, growthitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobServant, growthvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobServant, growthcurinfo_),
  };
  BlobServant_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobServant_descriptor_,
      BlobServant::default_instance_,
      BlobServant_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobServant, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobServant, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobServant));
  ProfessionData_descriptor_ = file->message_type(161);
  static const int ProfessionData_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionData, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionData, joblv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionData, jobexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionData, recordname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionData, recordtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionData, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionData, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionData, pro_branch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionData, astrolabe_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionData, pack_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionData, role_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionData, being_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionData, attr_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionData, novice_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionData, partner_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionData, isfirst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionData, appearance_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionData, skillpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionData, opertime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionData, shortcut_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionData, exchange_items_),
  };
  ProfessionData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProfessionData_descriptor_,
      ProfessionData::default_instance_,
      ProfessionData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProfessionData));
  ProfessionSvrData_descriptor_ = file->message_type(162);
  static const int ProfessionSvrData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionSvrData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionSvrData, bepro_1_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionSvrData, bepro_2_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionSvrData, bepro_3_time_),
  };
  ProfessionSvrData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProfessionSvrData_descriptor_,
      ProfessionSvrData::default_instance_,
      ProfessionSvrData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionSvrData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionSvrData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProfessionSvrData));
  BlobProfession_descriptor_ = file->message_type(163);
  static const int BlobProfession_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProfession, datas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProfession, svr_datas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProfession, last_load_time_),
  };
  BlobProfession_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobProfession_descriptor_,
      BlobProfession::default_instance_,
      BlobProfession_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProfession, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProfession, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobProfession));
  BlobRecordInfo_descriptor_ = file->message_type(164);
  static const int BlobRecordInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobRecordInfo, buytimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobRecordInfo, last_load_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobRecordInfo, records_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobRecordInfo, dest_charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobRecordInfo, dest_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobRecordInfo, dest_slotid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobRecordInfo, card_expiretime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobRecordInfo, astrol_data_),
  };
  BlobRecordInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobRecordInfo_descriptor_,
      BlobRecordInfo::default_instance_,
      BlobRecordInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobRecordInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobRecordInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobRecordInfo));
  UserProfessionData_descriptor_ = file->message_type(165);
  static const int UserProfessionData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserProfessionData, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserProfessionData, joblv_),
  };
  UserProfessionData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserProfessionData_descriptor_,
      UserProfessionData::default_instance_,
      UserProfessionData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserProfessionData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserProfessionData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserProfessionData));
  ReqUserProfessionCmd_descriptor_ = file->message_type(166);
  static const int ReqUserProfessionCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqUserProfessionCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqUserProfessionCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqUserProfessionCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqUserProfessionCmd, accid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqUserProfessionCmd, scenename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqUserProfessionCmd, datas_),
  };
  ReqUserProfessionCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqUserProfessionCmd_descriptor_,
      ReqUserProfessionCmd::default_instance_,
      ReqUserProfessionCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqUserProfessionCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqUserProfessionCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqUserProfessionCmd));
  ProfessionSaveRecordCmd_descriptor_ = file->message_type(167);
  static const int ProfessionSaveRecordCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionSaveRecordCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionSaveRecordCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionSaveRecordCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionSaveRecordCmd, branch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionSaveRecordCmd, data_),
  };
  ProfessionSaveRecordCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProfessionSaveRecordCmd_descriptor_,
      ProfessionSaveRecordCmd::default_instance_,
      ProfessionSaveRecordCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionSaveRecordCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionSaveRecordCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProfessionSaveRecordCmd));
  ProfessionQueryRecordCmd_descriptor_ = file->message_type(168);
  static const int ProfessionQueryRecordCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionQueryRecordCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionQueryRecordCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionQueryRecordCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionQueryRecordCmd, scenename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionQueryRecordCmd, datas_),
  };
  ProfessionQueryRecordCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProfessionQueryRecordCmd_descriptor_,
      ProfessionQueryRecordCmd::default_instance_,
      ProfessionQueryRecordCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionQueryRecordCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionQueryRecordCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProfessionQueryRecordCmd));
  ActivityQuestItem_descriptor_ = file->message_type(169);
  static const int ActivityQuestItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityQuestItem, questid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityQuestItem, finishcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityQuestItem, lastquesttime_),
  };
  ActivityQuestItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityQuestItem_descriptor_,
      ActivityQuestItem::default_instance_,
      ActivityQuestItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityQuestItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityQuestItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityQuestItem));
  BlobActivityQuest_descriptor_ = file->message_type(170);
  static const int BlobActivityQuest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobActivityQuest, activityitems_),
  };
  BlobActivityQuest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobActivityQuest_descriptor_,
      BlobActivityQuest::default_instance_,
      BlobActivityQuest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobActivityQuest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobActivityQuest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobActivityQuest));
  BlobBooth_descriptor_ = file->message_type(171);
  static const int BlobBooth_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobBooth, score_),
  };
  BlobBooth_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobBooth_descriptor_,
      BlobBooth::default_instance_,
      BlobBooth_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobBooth, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobBooth, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobBooth));
  BlobElementElfData_descriptor_ = file->message_type(172);
  static const int BlobElementElfData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobElementElfData, cur_element_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobElementElfData, clear_time_),
  };
  BlobElementElfData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobElementElfData_descriptor_,
      BlobElementElfData::default_instance_,
      BlobElementElfData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobElementElfData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobElementElfData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobElementElfData));
  CheatTagRecordCmd_descriptor_ = file->message_type(173);
  static const int CheatTagRecordCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheatTagRecordCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheatTagRecordCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheatTagRecordCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheatTagRecordCmd, mininterval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheatTagRecordCmd, frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheatTagRecordCmd, count_),
  };
  CheatTagRecordCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CheatTagRecordCmd_descriptor_,
      CheatTagRecordCmd::default_instance_,
      CheatTagRecordCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheatTagRecordCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheatTagRecordCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CheatTagRecordCmd));
  CheatTagQueryRecordCmd_descriptor_ = file->message_type(174);
  static const int CheatTagQueryRecordCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheatTagQueryRecordCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheatTagQueryRecordCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheatTagQueryRecordCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheatTagQueryRecordCmd, scenename_),
  };
  CheatTagQueryRecordCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CheatTagQueryRecordCmd_descriptor_,
      CheatTagQueryRecordCmd::default_instance_,
      CheatTagQueryRecordCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheatTagQueryRecordCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheatTagQueryRecordCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CheatTagQueryRecordCmd));
  RecordParam_descriptor_ = file->enum_type(0);
  ETicketType_descriptor_ = file->enum_type(1);
  ETicketRet_descriptor_ = file->enum_type(2);
  ETicketCmdType_descriptor_ = file->enum_type(3);
  EShareDataType_descriptor_ = file->enum_type(4);
  EPatchType_descriptor_ = file->enum_type(5);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_RecordCmd_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyLoginRecordCmd_descriptor_, &NotifyLoginRecordCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecordUserData_descriptor_, &RecordUserData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RedisUserData_descriptor_, &RedisUserData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserDataRecordCmd_descriptor_, &UserDataRecordCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ErrUserCharBaseRecordCmd_descriptor_, &ErrUserCharBaseRecordCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MusicUpdateCmd_descriptor_, &MusicUpdateCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoadLuaSceneRecordCmd_descriptor_, &LoadLuaSceneRecordCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemModifyRecordCmd_descriptor_, &ItemModifyRecordCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeAuthorizeRecordCmd_descriptor_, &ChangeAuthorizeRecordCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMusicQueryRecordCmd_descriptor_, &GuildMusicQueryRecordCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMusicUpdateCmd_descriptor_, &GuildMusicUpdateCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMusicDeleteRecordCmd_descriptor_, &GuildMusicDeleteRecordCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserBaseData_descriptor_, &UserBaseData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobData_descriptor_, &BlobData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserAccData_descriptor_, &UserAccData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobAccData_descriptor_, &BlobAccData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobAccUser_descriptor_, &BlobAccUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobUnsolvedPhoto_descriptor_, &BlobUnsolvedPhoto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobBoss_descriptor_, &BlobBoss::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobUser_descriptor_, &BlobUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillReplaceInfo_descriptor_, &SkillReplaceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillShortcutDB_descriptor_, &SkillShortcutDB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserSkillData_descriptor_, &UserSkillData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobShareSkill_descriptor_, &BlobShareSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserRoleData_descriptor_, &UserRoleData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobFighter_descriptor_, &BlobFighter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StageStepNormalBlob_descriptor_, &StageStepNormalBlob::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StageStepHardBlob_descriptor_, &StageStepHardBlob::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StageBlobItem_descriptor_, &StageBlobItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobStage_descriptor_, &BlobStage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestNpcData_descriptor_, &QuestNpcData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobQuestNpc_descriptor_, &BlobQuestNpc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BufferStateBlob_descriptor_, &BufferStateBlob::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobBuffer_descriptor_, &BlobBuffer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobPortrait_descriptor_, &BlobPortrait::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobHair_descriptor_, &BlobHair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobGearItem_descriptor_, &BlobGearItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobGears_descriptor_, &BlobGears::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobTipItem_descriptor_, &BlobTipItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobTips_descriptor_, &BlobTips::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FollowerItem_descriptor_, &FollowerItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobFollower_descriptor_, &BlobFollower::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobCDTime_descriptor_, &BlobCDTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobShortcut_descriptor_, &BlobShortcut::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobGMEffectItem_descriptor_, &BlobGMEffectItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobGMEffects_descriptor_, &BlobGMEffects::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobFreyja_descriptor_, &BlobFreyja::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobTransfer_descriptor_, &BlobTransfer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobLaboratory_descriptor_, &BlobLaboratory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SceneryItem_descriptor_, &SceneryItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SceneryMapItem_descriptor_, &SceneryMapItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobScenery_descriptor_, &BlobScenery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobCarrier_descriptor_, &BlobCarrier::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobMenu_descriptor_, &BlobMenu::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobShopGotItem_descriptor_, &BlobShopGotItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobExchangeShop_descriptor_, &BlobExchangeShop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobKnownMaps_descriptor_, &BlobKnownMaps::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobInter_descriptor_, &BlobInter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobHands_descriptor_, &BlobHands::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobShow_descriptor_, &BlobShow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobTrace_descriptor_, &BlobTrace::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobOption_descriptor_, &BlobOption::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobDojo_descriptor_, &BlobDojo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FoodItemInfo_descriptor_, &FoodItemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FoodLimitInfo_descriptor_, &FoodLimitInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobFood_descriptor_, &BlobFood::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobHighRefine_descriptor_, &BlobHighRefine::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PackageData_descriptor_, &PackageData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemUseCount_descriptor_, &ItemUseCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemGetCount_descriptor_, &ItemGetCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RewardSafetyItem_descriptor_, &RewardSafetyItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobPack_descriptor_, &BlobPack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapQuest_descriptor_, &MapQuest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobQuestPuzzle_descriptor_, &BlobQuestPuzzle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobQuest_descriptor_, &BlobQuest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobTitle_descriptor_, &BlobTitle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobLineData_descriptor_, &BlobLineData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobLine_descriptor_, &BlobLine::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobSpEffect_descriptor_, &BlobSpEffect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobHandNpc_descriptor_, &BlobHandNpc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobPet_descriptor_, &BlobPet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobWeaponPet_descriptor_, &BlobWeaponPet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobVar_descriptor_, &BlobVar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobAccVar_descriptor_, &BlobAccVar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillDamage_descriptor_, &SkillDamage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StatKillMonster_descriptor_, &StatKillMonster::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobStatVar_descriptor_, &BlobStatVar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobChatMsg_descriptor_, &BlobChatMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobUserTower_descriptor_, &BlobUserTower::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobSeal_descriptor_, &BlobSeal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobManual_descriptor_, &BlobManual::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobFirstActionDone_descriptor_, &BlobFirstActionDone::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobAttr_descriptor_, &BlobAttr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MonsterNum_descriptor_, &MonsterNum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobCamera_descriptor_, &BlobCamera::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RaidZone_descriptor_, &RaidZone::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobZone_descriptor_, &BlobZone::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobGuild_descriptor_, &BlobGuild::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobTeam_descriptor_, &BlobTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobUserZone_descriptor_, &BlobUserZone::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobAccQuest_descriptor_, &BlobAccQuest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobGlobalTower_descriptor_, &BlobGlobalTower::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GlobalSocialFocus_descriptor_, &GlobalSocialFocus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobGlobalSociality_descriptor_, &BlobGlobalSociality::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChargeData_descriptor_, &ChargeData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobDeposit_descriptor_, &BlobDeposit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobTicketData_descriptor_, &BlobTicketData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobTicketCacheCmd_descriptor_, &BlobTicketCacheCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobTicket_descriptor_, &BlobTicket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobCredit_descriptor_, &BlobCredit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobNewCredit_descriptor_, &BlobNewCredit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatCount_descriptor_, &ChatCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatItem_descriptor_, &ChatItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobChat_descriptor_, &BlobChat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityCommonData_descriptor_, &ActivityCommonData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobActivity_descriptor_, &BlobActivity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobRelation_descriptor_, &BlobRelation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShareNormal_descriptor_, &ShareNormal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShareCalcItem_descriptor_, &ShareCalcItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShareCalc_descriptor_, &ShareCalc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShareFirstMvp_descriptor_, &ShareFirstMvp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShareFirstHand_descriptor_, &ShareFirstHand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShareFirstCarrier_descriptor_, &ShareFirstCarrier::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShareTrade_descriptor_, &ShareTrade::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShareDamage_descriptor_, &ShareDamage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobShare_descriptor_, &BlobShare::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AchieveDBItem_descriptor_, &AchieveDBItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobAchieve_descriptor_, &BlobAchieve::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobAuthorize_descriptor_, &BlobAuthorize::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildRaid_descriptor_, &GuildRaid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobGuildRaid_descriptor_, &BlobGuildRaid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AstrolabeStarData_descriptor_, &AstrolabeStarData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AstrolabeData_descriptor_, &AstrolabeData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AstrolabeMainData_descriptor_, &AstrolabeMainData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobAstrolabe_descriptor_, &BlobAstrolabe::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetAdventureDBItem_descriptor_, &PetAdventureDBItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobPetAdventure_descriptor_, &BlobPetAdventure::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobPetWork_descriptor_, &BlobPetWork::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobEye_descriptor_, &BlobEye::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobTutorTask_descriptor_, &BlobTutorTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobActivityEvent_descriptor_, &BlobActivityEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobGuildChallenge_descriptor_, &BlobGuildChallenge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobGvgData_descriptor_, &BlobGvgData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobUserData_descriptor_, &BlobUserData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DelPatchCharRecordCmd_descriptor_, &DelPatchCharRecordCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobChatItem_descriptor_, &BlobChatItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatSaveRecordCmd_descriptor_, &ChatSaveRecordCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryChatRecordCmd_descriptor_, &QueryChatRecordCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserRenameQueryRecordCmd_descriptor_, &UserRenameQueryRecordCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserRenameResultRecordCmd_descriptor_, &UserRenameResultRecordCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LotteryResultRecordCmd_descriptor_, &LotteryResultRecordCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobBattle_descriptor_, &BlobBattle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobSeeNpc_descriptor_, &BlobSeeNpc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobSettings_descriptor_, &BlobSettings::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobPhoto_descriptor_, &BlobPhoto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobUserPet_descriptor_, &BlobUserPet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobUserBeing_descriptor_, &BlobUserBeing::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobJoyData_descriptor_, &BlobJoyData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LotteryPoolData_descriptor_, &LotteryPoolData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobLottery_descriptor_, &BlobLottery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobServant_descriptor_, &BlobServant::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProfessionData_descriptor_, &ProfessionData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProfessionSvrData_descriptor_, &ProfessionSvrData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobProfession_descriptor_, &BlobProfession::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobRecordInfo_descriptor_, &BlobRecordInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserProfessionData_descriptor_, &UserProfessionData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqUserProfessionCmd_descriptor_, &ReqUserProfessionCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProfessionSaveRecordCmd_descriptor_, &ProfessionSaveRecordCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProfessionQueryRecordCmd_descriptor_, &ProfessionQueryRecordCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityQuestItem_descriptor_, &ActivityQuestItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobActivityQuest_descriptor_, &BlobActivityQuest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobBooth_descriptor_, &BlobBooth::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobElementElfData_descriptor_, &BlobElementElfData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CheatTagRecordCmd_descriptor_, &CheatTagRecordCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CheatTagQueryRecordCmd_descriptor_, &CheatTagQueryRecordCmd::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_RecordCmd_2eproto() {
  delete NotifyLoginRecordCmd::default_instance_;
  delete NotifyLoginRecordCmd_reflection_;
  delete RecordUserData::default_instance_;
  delete RecordUserData_reflection_;
  delete RedisUserData::default_instance_;
  delete RedisUserData_reflection_;
  delete UserDataRecordCmd::default_instance_;
  delete UserDataRecordCmd_reflection_;
  delete ErrUserCharBaseRecordCmd::default_instance_;
  delete ErrUserCharBaseRecordCmd_reflection_;
  delete MusicUpdateCmd::default_instance_;
  delete MusicUpdateCmd_reflection_;
  delete LoadLuaSceneRecordCmd::default_instance_;
  delete LoadLuaSceneRecordCmd_reflection_;
  delete ItemModifyRecordCmd::default_instance_;
  delete ItemModifyRecordCmd_reflection_;
  delete ChangeAuthorizeRecordCmd::default_instance_;
  delete ChangeAuthorizeRecordCmd_reflection_;
  delete GuildMusicQueryRecordCmd::default_instance_;
  delete GuildMusicQueryRecordCmd_reflection_;
  delete GuildMusicUpdateCmd::default_instance_;
  delete GuildMusicUpdateCmd_reflection_;
  delete GuildMusicDeleteRecordCmd::default_instance_;
  delete GuildMusicDeleteRecordCmd_reflection_;
  delete UserBaseData::default_instance_;
  delete UserBaseData_reflection_;
  delete BlobData::default_instance_;
  delete BlobData_reflection_;
  delete UserAccData::default_instance_;
  delete UserAccData_reflection_;
  delete BlobAccData::default_instance_;
  delete BlobAccData_reflection_;
  delete BlobAccUser::default_instance_;
  delete BlobAccUser_reflection_;
  delete BlobUnsolvedPhoto::default_instance_;
  delete BlobUnsolvedPhoto_reflection_;
  delete BlobBoss::default_instance_;
  delete BlobBoss_reflection_;
  delete BlobUser::default_instance_;
  delete BlobUser_reflection_;
  delete SkillReplaceInfo::default_instance_;
  delete SkillReplaceInfo_reflection_;
  delete SkillShortcutDB::default_instance_;
  delete SkillShortcutDB_reflection_;
  delete UserSkillData::default_instance_;
  delete UserSkillData_reflection_;
  delete BlobShareSkill::default_instance_;
  delete BlobShareSkill_reflection_;
  delete UserRoleData::default_instance_;
  delete UserRoleData_reflection_;
  delete BlobFighter::default_instance_;
  delete BlobFighter_reflection_;
  delete StageStepNormalBlob::default_instance_;
  delete StageStepNormalBlob_reflection_;
  delete StageStepHardBlob::default_instance_;
  delete StageStepHardBlob_reflection_;
  delete StageBlobItem::default_instance_;
  delete StageBlobItem_reflection_;
  delete BlobStage::default_instance_;
  delete BlobStage_reflection_;
  delete QuestNpcData::default_instance_;
  delete QuestNpcData_reflection_;
  delete BlobQuestNpc::default_instance_;
  delete BlobQuestNpc_reflection_;
  delete BufferStateBlob::default_instance_;
  delete BufferStateBlob_reflection_;
  delete BlobBuffer::default_instance_;
  delete BlobBuffer_reflection_;
  delete BlobPortrait::default_instance_;
  delete BlobPortrait_reflection_;
  delete BlobHair::default_instance_;
  delete BlobHair_reflection_;
  delete BlobGearItem::default_instance_;
  delete BlobGearItem_reflection_;
  delete BlobGears::default_instance_;
  delete BlobGears_reflection_;
  delete BlobTipItem::default_instance_;
  delete BlobTipItem_reflection_;
  delete BlobTips::default_instance_;
  delete BlobTips_reflection_;
  delete FollowerItem::default_instance_;
  delete FollowerItem_reflection_;
  delete BlobFollower::default_instance_;
  delete BlobFollower_reflection_;
  delete BlobCDTime::default_instance_;
  delete BlobCDTime_reflection_;
  delete BlobShortcut::default_instance_;
  delete BlobShortcut_reflection_;
  delete BlobGMEffectItem::default_instance_;
  delete BlobGMEffectItem_reflection_;
  delete BlobGMEffects::default_instance_;
  delete BlobGMEffects_reflection_;
  delete BlobFreyja::default_instance_;
  delete BlobFreyja_reflection_;
  delete BlobTransfer::default_instance_;
  delete BlobTransfer_reflection_;
  delete BlobLaboratory::default_instance_;
  delete BlobLaboratory_reflection_;
  delete SceneryItem::default_instance_;
  delete SceneryItem_reflection_;
  delete SceneryMapItem::default_instance_;
  delete SceneryMapItem_reflection_;
  delete BlobScenery::default_instance_;
  delete BlobScenery_reflection_;
  delete BlobCarrier::default_instance_;
  delete BlobCarrier_reflection_;
  delete BlobMenu::default_instance_;
  delete BlobMenu_reflection_;
  delete BlobShopGotItem::default_instance_;
  delete BlobShopGotItem_reflection_;
  delete BlobExchangeShop::default_instance_;
  delete BlobExchangeShop_reflection_;
  delete BlobKnownMaps::default_instance_;
  delete BlobKnownMaps_reflection_;
  delete BlobInter::default_instance_;
  delete BlobInter_reflection_;
  delete BlobHands::default_instance_;
  delete BlobHands_reflection_;
  delete BlobShow::default_instance_;
  delete BlobShow_reflection_;
  delete BlobTrace::default_instance_;
  delete BlobTrace_reflection_;
  delete BlobOption::default_instance_;
  delete BlobOption_reflection_;
  delete BlobDojo::default_instance_;
  delete BlobDojo_reflection_;
  delete FoodItemInfo::default_instance_;
  delete FoodItemInfo_reflection_;
  delete FoodLimitInfo::default_instance_;
  delete FoodLimitInfo_reflection_;
  delete BlobFood::default_instance_;
  delete BlobFood_reflection_;
  delete BlobHighRefine::default_instance_;
  delete BlobHighRefine_reflection_;
  delete PackageData::default_instance_;
  delete PackageData_reflection_;
  delete ItemUseCount::default_instance_;
  delete ItemUseCount_reflection_;
  delete ItemGetCount::default_instance_;
  delete ItemGetCount_reflection_;
  delete RewardSafetyItem::default_instance_;
  delete RewardSafetyItem_reflection_;
  delete BlobPack::default_instance_;
  delete BlobPack_reflection_;
  delete MapQuest::default_instance_;
  delete MapQuest_reflection_;
  delete BlobQuestPuzzle::default_instance_;
  delete BlobQuestPuzzle_reflection_;
  delete BlobQuest::default_instance_;
  delete BlobQuest_reflection_;
  delete BlobTitle::default_instance_;
  delete BlobTitle_reflection_;
  delete BlobLineData::default_instance_;
  delete BlobLineData_reflection_;
  delete BlobLine::default_instance_;
  delete BlobLine_reflection_;
  delete BlobSpEffect::default_instance_;
  delete BlobSpEffect_reflection_;
  delete BlobHandNpc::default_instance_;
  delete BlobHandNpc_reflection_;
  delete BlobPet::default_instance_;
  delete BlobPet_reflection_;
  delete BlobWeaponPet::default_instance_;
  delete BlobWeaponPet_reflection_;
  delete BlobVar::default_instance_;
  delete BlobVar_reflection_;
  delete BlobAccVar::default_instance_;
  delete BlobAccVar_reflection_;
  delete SkillDamage::default_instance_;
  delete SkillDamage_reflection_;
  delete StatKillMonster::default_instance_;
  delete StatKillMonster_reflection_;
  delete BlobStatVar::default_instance_;
  delete BlobStatVar_reflection_;
  delete BlobChatMsg::default_instance_;
  delete BlobChatMsg_reflection_;
  delete BlobUserTower::default_instance_;
  delete BlobUserTower_reflection_;
  delete BlobSeal::default_instance_;
  delete BlobSeal_reflection_;
  delete BlobManual::default_instance_;
  delete BlobManual_reflection_;
  delete BlobFirstActionDone::default_instance_;
  delete BlobFirstActionDone_reflection_;
  delete BlobAttr::default_instance_;
  delete BlobAttr_reflection_;
  delete MonsterNum::default_instance_;
  delete MonsterNum_reflection_;
  delete BlobCamera::default_instance_;
  delete BlobCamera_reflection_;
  delete RaidZone::default_instance_;
  delete RaidZone_reflection_;
  delete BlobZone::default_instance_;
  delete BlobZone_reflection_;
  delete BlobGuild::default_instance_;
  delete BlobGuild_reflection_;
  delete BlobTeam::default_instance_;
  delete BlobTeam_reflection_;
  delete BlobUserZone::default_instance_;
  delete BlobUserZone_reflection_;
  delete BlobAccQuest::default_instance_;
  delete BlobAccQuest_reflection_;
  delete BlobGlobalTower::default_instance_;
  delete BlobGlobalTower_reflection_;
  delete GlobalSocialFocus::default_instance_;
  delete GlobalSocialFocus_reflection_;
  delete BlobGlobalSociality::default_instance_;
  delete BlobGlobalSociality_reflection_;
  delete ChargeData::default_instance_;
  delete ChargeData_reflection_;
  delete BlobDeposit::default_instance_;
  delete BlobDeposit_reflection_;
  delete BlobTicketData::default_instance_;
  delete BlobTicketData_reflection_;
  delete BlobTicketCacheCmd::default_instance_;
  delete BlobTicketCacheCmd_reflection_;
  delete BlobTicket::default_instance_;
  delete BlobTicket_reflection_;
  delete BlobCredit::default_instance_;
  delete BlobCredit_reflection_;
  delete BlobNewCredit::default_instance_;
  delete BlobNewCredit_reflection_;
  delete ChatCount::default_instance_;
  delete ChatCount_reflection_;
  delete ChatItem::default_instance_;
  delete ChatItem_reflection_;
  delete BlobChat::default_instance_;
  delete BlobChat_reflection_;
  delete ActivityCommonData::default_instance_;
  delete ActivityCommonData_reflection_;
  delete BlobActivity::default_instance_;
  delete BlobActivity_reflection_;
  delete BlobRelation::default_instance_;
  delete BlobRelation_reflection_;
  delete ShareNormal::default_instance_;
  delete ShareNormal_reflection_;
  delete ShareCalcItem::default_instance_;
  delete ShareCalcItem_reflection_;
  delete ShareCalc::default_instance_;
  delete ShareCalc_reflection_;
  delete ShareFirstMvp::default_instance_;
  delete ShareFirstMvp_reflection_;
  delete ShareFirstHand::default_instance_;
  delete ShareFirstHand_reflection_;
  delete ShareFirstCarrier::default_instance_;
  delete ShareFirstCarrier_reflection_;
  delete ShareTrade::default_instance_;
  delete ShareTrade_reflection_;
  delete ShareDamage::default_instance_;
  delete ShareDamage_reflection_;
  delete BlobShare::default_instance_;
  delete BlobShare_reflection_;
  delete AchieveDBItem::default_instance_;
  delete AchieveDBItem_reflection_;
  delete BlobAchieve::default_instance_;
  delete BlobAchieve_reflection_;
  delete BlobAuthorize::default_instance_;
  delete BlobAuthorize_reflection_;
  delete GuildRaid::default_instance_;
  delete GuildRaid_reflection_;
  delete BlobGuildRaid::default_instance_;
  delete BlobGuildRaid_reflection_;
  delete AstrolabeStarData::default_instance_;
  delete AstrolabeStarData_reflection_;
  delete AstrolabeData::default_instance_;
  delete AstrolabeData_reflection_;
  delete AstrolabeMainData::default_instance_;
  delete AstrolabeMainData_reflection_;
  delete BlobAstrolabe::default_instance_;
  delete BlobAstrolabe_reflection_;
  delete PetAdventureDBItem::default_instance_;
  delete PetAdventureDBItem_reflection_;
  delete BlobPetAdventure::default_instance_;
  delete BlobPetAdventure_reflection_;
  delete BlobPetWork::default_instance_;
  delete BlobPetWork_reflection_;
  delete BlobEye::default_instance_;
  delete BlobEye_reflection_;
  delete BlobTutorTask::default_instance_;
  delete BlobTutorTask_reflection_;
  delete BlobActivityEvent::default_instance_;
  delete BlobActivityEvent_reflection_;
  delete BlobGuildChallenge::default_instance_;
  delete BlobGuildChallenge_reflection_;
  delete BlobGvgData::default_instance_;
  delete BlobGvgData_reflection_;
  delete BlobUserData::default_instance_;
  delete BlobUserData_reflection_;
  delete DelPatchCharRecordCmd::default_instance_;
  delete DelPatchCharRecordCmd_reflection_;
  delete BlobChatItem::default_instance_;
  delete BlobChatItem_reflection_;
  delete ChatSaveRecordCmd::default_instance_;
  delete ChatSaveRecordCmd_reflection_;
  delete QueryChatRecordCmd::default_instance_;
  delete QueryChatRecordCmd_reflection_;
  delete UserRenameQueryRecordCmd::default_instance_;
  delete UserRenameQueryRecordCmd_reflection_;
  delete UserRenameResultRecordCmd::default_instance_;
  delete UserRenameResultRecordCmd_reflection_;
  delete LotteryResultRecordCmd::default_instance_;
  delete LotteryResultRecordCmd_reflection_;
  delete BlobBattle::default_instance_;
  delete BlobBattle_reflection_;
  delete BlobSeeNpc::default_instance_;
  delete BlobSeeNpc_reflection_;
  delete BlobSettings::default_instance_;
  delete BlobSettings_reflection_;
  delete BlobPhoto::default_instance_;
  delete BlobPhoto_reflection_;
  delete BlobUserPet::default_instance_;
  delete BlobUserPet_reflection_;
  delete BlobUserBeing::default_instance_;
  delete BlobUserBeing_reflection_;
  delete BlobJoyData::default_instance_;
  delete BlobJoyData_reflection_;
  delete LotteryPoolData::default_instance_;
  delete LotteryPoolData_reflection_;
  delete BlobLottery::default_instance_;
  delete BlobLottery_reflection_;
  delete BlobServant::default_instance_;
  delete BlobServant_reflection_;
  delete ProfessionData::default_instance_;
  delete ProfessionData_reflection_;
  delete ProfessionSvrData::default_instance_;
  delete ProfessionSvrData_reflection_;
  delete BlobProfession::default_instance_;
  delete BlobProfession_reflection_;
  delete BlobRecordInfo::default_instance_;
  delete BlobRecordInfo_reflection_;
  delete UserProfessionData::default_instance_;
  delete UserProfessionData_reflection_;
  delete ReqUserProfessionCmd::default_instance_;
  delete ReqUserProfessionCmd_reflection_;
  delete ProfessionSaveRecordCmd::default_instance_;
  delete ProfessionSaveRecordCmd_reflection_;
  delete ProfessionQueryRecordCmd::default_instance_;
  delete ProfessionQueryRecordCmd_reflection_;
  delete ActivityQuestItem::default_instance_;
  delete ActivityQuestItem_reflection_;
  delete BlobActivityQuest::default_instance_;
  delete BlobActivityQuest_reflection_;
  delete BlobBooth::default_instance_;
  delete BlobBooth_reflection_;
  delete BlobElementElfData::default_instance_;
  delete BlobElementElfData_reflection_;
  delete CheatTagRecordCmd::default_instance_;
  delete CheatTagRecordCmd_reflection_;
  delete CheatTagQueryRecordCmd::default_instance_;
  delete CheatTagQueryRecordCmd_reflection_;
}

void protobuf_AddDesc_RecordCmd_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Cmd::protobuf_AddDesc_xCmd_2eproto();
  ::Cmd::protobuf_AddDesc_ProtoCommon_2eproto();
  ::Cmd::protobuf_AddDesc_Var_2eproto();
  ::Cmd::protobuf_AddDesc_SceneUser2_2eproto();
  ::Cmd::protobuf_AddDesc_SceneSkill_2eproto();
  ::Cmd::protobuf_AddDesc_SceneQuest_2eproto();
  ::Cmd::protobuf_AddDesc_SceneItem_2eproto();
  ::Cmd::protobuf_AddDesc_ScenePet_2eproto();
  ::Cmd::protobuf_AddDesc_SceneTip_2eproto();
  ::Cmd::protobuf_AddDesc_SceneSeal_2eproto();
  ::Cmd::protobuf_AddDesc_SessionCmd_2eproto();
  ::Cmd::protobuf_AddDesc_InfiniteTower_2eproto();
  ::Cmd::protobuf_AddDesc_SceneManual_2eproto();
  ::Cmd::protobuf_AddDesc_SceneInterlocution_2eproto();
  ::Cmd::protobuf_AddDesc_UserEvent_2eproto();
  ::Cmd::protobuf_AddDesc_SceneUser_2eproto();
  ::Cmd::protobuf_AddDesc_SceneMap_2eproto();
  ::Cmd::protobuf_AddDesc_GuildSCmd_2eproto();
  ::Cmd::protobuf_AddDesc_TeamCmd_2eproto();
  ::Cmd::protobuf_AddDesc_AchieveCmd_2eproto();
  ::Cmd::protobuf_AddDesc_FuBenCmd_2eproto();
  ::Cmd::protobuf_AddDesc_AstrolabeCmd_2eproto();
  ::Cmd::protobuf_AddDesc_PhotoCmd_2eproto();
  ::Cmd::protobuf_AddDesc_SceneFood_2eproto();
  ::Cmd::protobuf_AddDesc_Tutor_2eproto();
  ::Cmd::protobuf_AddDesc_ActivityEvent_2eproto();
  ::Cmd::protobuf_AddDesc_SceneBeing_2eproto();
  ::Cmd::protobuf_AddDesc_SessionShop_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017RecordCmd.proto\022\003Cmd\032\nxCmd.proto\032\021Prot"
    "oCommon.proto\032\tVar.proto\032\020SceneUser2.pro"
    "to\032\020SceneSkill.proto\032\020SceneQuest.proto\032\017"
    "SceneItem.proto\032\016ScenePet.proto\032\016SceneTi"
    "p.proto\032\017SceneSeal.proto\032\020SessionCmd.pro"
    "to\032\023InfiniteTower.proto\032\021SceneManual.pro"
    "to\032\030SceneInterlocution.proto\032\017UserEvent."
    "proto\032\017SceneUser.proto\032\016SceneMap.proto\032\017"
    "GuildSCmd.proto\032\rTeamCmd.proto\032\020AchieveC"
    "md.proto\032\016FuBenCmd.proto\032\022AstrolabeCmd.p"
    "roto\032\016PhotoCmd.proto\032\017SceneFood.proto\032\013T"
    "utor.proto\032\023ActivityEvent.proto\032\020SceneBe"
    "ing.proto\032\021SessionShop.proto\"\265\001\n\024NotifyL"
    "oginRecordCmd\022/\n\003cmd\030\001 \001(\0162\014.Cmd.Command"
    ":\024RECORD_DATA_PROTOCMD\0228\n\005param\030\002 \001(\0162\020."
    "Cmd.RecordParam:\027RECORDPARAM_NOTIFYLOGIN"
    "\022\r\n\002id\030\003 \001(\004:\0010\022\020\n\005accid\030\004 \001(\004:\0010\022\021\n\tsce"
    "neName\030\005 \001(\t\"\230\001\n\016RecordUserData\022\035\n\003acc\030\001"
    " \001(\0132\020.Cmd.UserAccData\022\037\n\004base\030\002 \001(\0132\021.C"
    "md.UserBaseData\022!\n\005redis\030\003 \001(\0132\022.Cmd.Red"
    "isUserData\022\020\n\010acc_data\030\004 \001(\014\022\021\n\tchar_dat"
    "a\030\005 \001(\014\"\300\001\n\rRedisUserData\022\023\n\010portrait\030\005 "
    "\001(\r:\0010\022\025\n\nclothcolor\030\r \001(\r:\0010\022\023\n\010manuall"
    "v\030\024 \001(\r:\0010\022\024\n\tmanualexp\030\025 \001(\r:\0010\022\024\n\tquer"
    "ytype\030\027 \001(\r:\0010\022\021\n\006profic\030\030 \001(\r:\0010\022\024\n\005bli"
    "nk\030\032 \001(\010:\005false\022\031\n\ncanbetutor\030\033 \001(\010:\005fal"
    "se\"\346\001\n\021UserDataRecordCmd\022/\n\003cmd\030\001 \001(\0162\014."
    "Cmd.Command:\024RECORD_DATA_PROTOCMD\0225\n\005par"
    "am\030\002 \001(\0162\020.Cmd.RecordParam:\024RECORDPARAM_"
    "USERDATA\022\016\n\006charid\030\003 \001(\004\022\r\n\005accid\030\004 \001(\004\022"
    "\021\n\tunregType\030\005 \001(\r\022\024\n\005first\030\006 \001(\010:\005false"
    "\022\023\n\004over\030\007 \001(\010:\005false\022\014\n\004data\030\010 \001(\014\"\227\001\n\030"
    "ErrUserCharBaseRecordCmd\022/\n\003cmd\030\001 \001(\0162\014."
    "Cmd.Command:\024RECORD_DATA_PROTOCMD\022;\n\005par"
    "am\030\002 \001(\0162\020.Cmd.RecordParam:\032RECORDPARAM_"
    "ERROR_USERDATA\022\r\n\002id\030\003 \001(\004:\0010\"\230\001\n\016MusicU"
    "pdateCmd\022/\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\024REC"
    "ORD_DATA_PROTOCMD\0227\n\005param\030\002 \001(\0162\020.Cmd.R"
    "ecordParam:\026RECORDPARAM_MUSIC_DATA\022\034\n\004it"
    "em\030\003 \001(\0132\016.Cmd.MusicItem\"\247\001\n\025LoadLuaScen"
    "eRecordCmd\022/\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\024R"
    "ECORD_DATA_PROTOCMD\0224\n\005param\030\002 \001(\0162\020.Cmd"
    ".RecordParam:\023RECORDPARAM_LOADLUA\022\r\n\005tab"
    "le\030\003 \001(\t\022\013\n\003lua\030\004 \001(\t\022\013\n\003log\030\005 \001(\t\"\335\001\n\023I"
    "temModifyRecordCmd\022/\n\003cmd\030\001 \001(\0162\014.Cmd.Co"
    "mmand:\024RECORD_DATA_PROTOCMD\022=\n\005param\030\002 \001"
    "(\0162\020.Cmd.RecordParam:\034RECORDPARAM_STORE_"
    "ITEMMODIFY\022\020\n\005accid\030\003 \001(\004:\0010\022\021\n\006charid\030\004"
    " \001(\004:\0010\022\020\n\005newid\030\007 \001(\r:\0010\022\021\n\tscenename\030\005"
    " \001(\t\022\014\n\004guid\030\006 \001(\t\"\301\001\n\030ChangeAuthorizeRe"
    "cordCmd\022/\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\024RECO"
    "RD_DATA_PROTOCMD\022=\n\005param\030\002 \001(\0162\020.Cmd.Re"
    "cordParam:\034RECORDPARAM_AUTHORIZE_CHANGE\022"
    "\020\n\005accid\030\003 \001(\004:\0010\022\020\n\010password\030\004 \001(\t\022\021\n\tr"
    "esettime\030\005 \001(\r\"\345\001\n\030GuildMusicQueryRecord"
    "Cmd\022/\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\024RECORD_D"
    "ATA_PROTOCMD\022>\n\005param\030\002 \001(\0162\020.Cmd.Record"
    "Param:\035RECORDPARAM_GUILD_MUSIC_QUERY\022\021\n\t"
    "scenename\030\003 \001(\t\022\022\n\007sceneid\030\004 \001(\r:\0010\022\022\n\007g"
    "uildid\030\005 \001(\004:\0010\022\035\n\005items\030\006 \003(\0132\016.Cmd.Mus"
    "icItem\"\271\001\n\023GuildMusicUpdateCmd\022/\n\003cmd\030\001 "
    "\001(\0162\014.Cmd.Command:\024RECORD_DATA_PROTOCMD\022"
    "\?\n\005param\030\002 \001(\0162\020.Cmd.RecordParam:\036RECORD"
    "PARAM_GUILD_MUSIC_UPDATE\022\022\n\007guildid\030\003 \001("
    "\004:\0010\022\034\n\004item\030\004 \001(\0132\016.Cmd.MusicItem\"\241\001\n\031G"
    "uildMusicDeleteRecordCmd\022/\n\003cmd\030\001 \001(\0162\014."
    "Cmd.Command:\024RECORD_DATA_PROTOCMD\022\?\n\005par"
    "am\030\002 \001(\0162\020.Cmd.RecordParam:\036RECORDPARAM_"
    "GUILD_MUSIC_DELETE\022\022\n\007guildid\030\003 \001(\004:\0010\"\216"
    "\t\n\014UserBaseData\022\025\n\nplatformid\030\001 \001(\r:\0010\022\021"
    "\n\006zoneid\030\002 \001(\r:\0010\022\020\n\005accid\030\003 \001(\004:\0010\022\021\n\006c"
    "harid\030\004 \001(\004:\0010\022\022\n\007guildid\030\005 \001(\004:\0010\022\014\n\004na"
    "me\030\006 \001(\t\022\020\n\005mapid\030\007 \001(\r:\0010\022\021\n\006rolelv\030\010 \001"
    "(\r:\0010\022\022\n\007roleexp\030\t \001(\004:\0010\022\021\n\006charge\030\n \001("
    "\r:\0010\022\022\n\007diamond\030\013 \001(\r:\0010\022\021\n\006silver\030\014 \001(\004"
    ":\0010\022\017\n\004gold\030\r \001(\r:\0010\022\021\n\006garden\030\016 \001(\r:\0010\022"
    "\025\n\nfriendship\030\017 \001(\r:\0010\022\025\n\ncreateTime\030\020 \001"
    "(\r:\0010\022\025\n\nonlinetime\030\021 \001(\r:\0010\022\026\n\013offlinet"
    "ime\030\022 \001(\r:\0010\022\021\n\006addict\030\023 \001(\r:\0010\022\025\n\nbattl"
    "etime\030\024 \001(\r:\0010\022\017\n\004body\030\025 \001(\r:\0010\022\031\n\016addic"
    "tTipsTime\030\026 \001(\r:\0010\022\022\n\007gagtime\030\027 \001(\r:\0010\022\026"
    "\n\013nologintime\030\030 \001(\r:\0010\022\027\n\014rebattletime\030\031"
    " \001(\r:\0010\022\031\n\016usedbattletime\030\032 \001(\r:\0010\022\017\n\004ha"
    "ir\030\033 \001(\r:\0010\022\024\n\thaircolor\030\034 \001(\r:\0010\022\023\n\010lef"
    "thand\030\035 \001(\r:\0010\022\024\n\trighthand\030\036 \001(\r:\0010\022\017\n\004"
    "head\030\037 \001(\r:\0010\022\017\n\004back\030  \001(\r:\0010\022\017\n\004face\030!"
    " \001(\r:\0010\022\017\n\004tail\030\" \001(\r:\0010\022\020\n\005mount\030# \001(\r:"
    "\0010\022\020\n\005title\030$ \001(\r:\0010\022\016\n\003eye\030% \001(\r:\0010\022\024\n\t"
    "partnerid\030& \001(\r:\0010\022\023\n\010portrait\030\' \001(\r:\0010\022"
    "\020\n\005mouth\030( \001(\r:\0010\022\025\n\nclothcolor\030) \001(\r:\0010"
    "\022)\n\006gender\030* \001(\0162\014.Cmd.EGender:\013EGENDER_"
    "MIN\0225\n\nprofession\030+ \001(\0162\020.Cmd.EProfessio"
    "n:\017EPROFESSION_MIN\0229\n\016destprofession\030, \001"
    "(\0162\020.Cmd.EProfession:\017EPROFESSION_MIN\022\025\n"
    "\ndestzoneid\030- \001(\r:\0010\022\031\n\016originalzoneid\030."
    " \001(\r:\0010\022\024\n\tmaxbaselv\030/ \001(\r:\0010\022\023\n\013lock_re"
    "ason\0300 \001(\t\022\022\n\ngag_reason\0301 \001(\t\022\023\n\013questm"
    "apntf\0302 \003(\r\022\022\n\nmaincharid\0303 \001(\004\022\016\n\006maxpr"
    "o\0304 \001(\r\"\250\025\n\010BlobData\022\022\n\007version\030\001 \001(\r:\0010"
    "\022\033\n\004user\030\002 \001(\0132\r.Cmd.BlobUser\022!\n\007fighter"
    "\030\003 \001(\0132\020.Cmd.BlobFighter\022\035\n\005stage\030\004 \001(\0132"
    "\016.Cmd.BlobStage\022#\n\010questnpc\030\005 \001(\0132\021.Cmd."
    "BlobQuestNpc\022\037\n\006buffer\030\006 \001(\0132\017.Cmd.BlobB"
    "uffer\022#\n\010portrait\030\007 \001(\0132\021.Cmd.BlobPortra"
    "it\022\033\n\004hair\030\010 \001(\0132\r.Cmd.BlobHair\022\034\n\004gear\030"
    "\t \001(\0132\016.Cmd.BlobGears\022\032\n\003tip\030\n \001(\0132\r.Cmd"
    ".BlobTips\022#\n\010follower\030\013 \001(\0132\021.Cmd.BlobFo"
    "llower\022\033\n\002cd\030\014 \001(\0132\017.Cmd.BlobCDTime\022#\n\010s"
    "hortcut\030\r \001(\0132\021.Cmd.BlobShortcut\022\"\n\006effe"
    "ct\030\016 \001(\0132\022.Cmd.BlobGMEffects\022\037\n\006freyja\030\017"
    " \001(\0132\017.Cmd.BlobFreyja\022 \n\003lab\030\020 \001(\0132\023.Cmd"
    ".BlobLaboratory\022!\n\007scenery\030\021 \001(\0132\020.Cmd.B"
    "lobScenery\022!\n\007carrier\030\022 \001(\0132\020.Cmd.BlobCa"
    "rrier\022\033\n\004menu\030\023 \001(\0132\r.Cmd.BlobMenu\022\"\n\004sh"
    "op\030\024 \001(\0132\024.Cmd.BlobShopGotItem\022$\n\010knownm"
    "ap\030\025 \001(\0132\022.Cmd.BlobKnownMaps\022\034\n\004iter\030\026 \001"
    "(\0132\016.Cmd.BlobInter\022\034\n\004hand\030\027 \001(\0132\016.Cmd.B"
    "lobHands\022\033\n\004show\030\030 \001(\0132\r.Cmd.BlobShow\022\035\n"
    "\005trace\030\031 \001(\0132\016.Cmd.BlobTrace\022\033\n\004dojo\030\032 \001"
    "(\0132\r.Cmd.BlobDojo\022\033\n\004pack\030\033 \001(\0132\r.Cmd.Bl"
    "obPack\022\035\n\005quest\030\034 \001(\0132\016.Cmd.BlobQuest\022\035\n"
    "\005title\030\035 \001(\0132\016.Cmd.BlobTitle\022\033\n\004line\030\036 \001"
    "(\0132\r.Cmd.BlobLine\022\031\n\003pet\030\037 \001(\0132\014.Cmd.Blo"
    "bPet\022\031\n\003var\030  \001(\0132\014.Cmd.BlobVar\022!\n\007chatm"
    "sg\030! \001(\0132\020.Cmd.BlobChatMsg\022!\n\005tower\030\" \001("
    "\0132\022.Cmd.BlobUserTower\022\033\n\004seal\030# \001(\0132\r.Cm"
    "d.BlobSeal\022\037\n\006manual\030$ \001(\0132\017.Cmd.BlobMan"
    "ual\022(\n\006action\030% \001(\0132\030.Cmd.BlobFirstActio"
    "nDone\022\033\n\004attr\030& \001(\0132\r.Cmd.BlobAttr\022\034\n\003op"
    "t\030\' \001(\0132\017.Cmd.BlobOption\022!\n\007handnpc\030( \001("
    "\0132\020.Cmd.BlobHandNpc\022\037\n\006camera\030) \001(\0132\017.Cm"
    "d.BlobCamera\022\033\n\004zone\030* \001(\0132\r.Cmd.BlobZon"
    "e\022\035\n\005guild\030+ \001(\0132\016.Cmd.BlobGuild\022\033\n\004team"
    "\030, \001(\0132\r.Cmd.BlobTeam\022#\n\010userzone\030- \001(\0132"
    "\021.Cmd.BlobUserZone\022#\n\010speffect\030. \001(\0132\021.C"
    "md.BlobSpEffect\022!\n\007deposit\030/ \001(\0132\020.Cmd.B"
    "lobDeposit\022#\n\010activity\0300 \001(\0132\021.Cmd.BlobA"
    "ctivity\022\033\n\004chat\0303 \001(\0132\r.Cmd.BlobChat\022\037\n\006"
    "battle\0304 \001(\0132\017.Cmd.BlobBattle\022!\n\007statvar"
    "\0305 \001(\0132\020.Cmd.BlobStatVar\022\037\n\006seenpc\0306 \001(\013"
    "2\017.Cmd.BlobSeeNpc\022%\n\tweaponpet\0307 \001(\0132\022.C"
    "md.BlobWeaponPet\022\037\n\006ticket\0308 \001(\0132\017.Cmd.B"
    "lobTicket\022\035\n\005share\0309 \001(\0132\016.Cmd.BlobShare"
    "\022!\n\007achieve\030: \001(\0132\020.Cmd.BlobAchieve\022%\n\ta"
    "uthorize\030; \001(\0132\022.Cmd.BlobAuthorize\022%\n\tgu"
    "ildraid\030< \001(\0132\022.Cmd.BlobGuildRaid\022%\n\tast"
    "rolabe\030= \001(\0132\022.Cmd.BlobAstrolabe\022#\n\010sett"
    "ings\030> \001(\0132\021.Cmd.BlobSettings\022\035\n\005photo\030\?"
    " \001(\0132\016.Cmd.BlobPhoto\022\033\n\004food\030@ \001(\0132\r.Cmd"
    ".BlobFood\022!\n\007userpet\030A \001(\0132\020.Cmd.BlobUse"
    "rPet\022+\n\014petadventure\030B \001(\0132\025.Cmd.BlobPet"
    "Adventure\022%\n\ttutortask\030C \001(\0132\022.Cmd.BlobT"
    "utorTask\022\031\n\003eye\030D \001(\0132\014.Cmd.BlobEye\022\'\n\nh"
    "ighrefine\030E \001(\0132\023.Cmd.BlobHighRefine\022\'\n\007"
    "acevent\030F \001(\0132\026.Cmd.BlobActivityEvent\022!\n"
    "\005being\030G \001(\0132\022.Cmd.BlobUserBeing\022+\n\ngcha"
    "llenge\030H \001(\0132\027.Cmd.BlobGuildChallenge\022!\n"
    "\007gvgdata\030I \001(\0132\020.Cmd.BlobGvgData\022!\n\007lott"
    "ery\030J \001(\0132\020.Cmd.BlobLottery\022!\n\007servant\030K"
    " \001(\0132\020.Cmd.BlobServant\022\'\n\nprofession\030L \001"
    "(\0132\023.Cmd.BlobProfession\022-\n\ractivityquest"
    "\030M \001(\0132\026.Cmd.BlobActivityQuest\022\035\n\005booth\030"
    "O \001(\0132\016.Cmd.BlobBooth\022+\n\014exchangeshop\030P "
    "\001(\0132\025.Cmd.BlobExchangeShop\022#\n\010transfer\030Q"
    " \001(\0132\021.Cmd.BlobTransfer\022,\n\013element_elf\030R"
    " \001(\0132\027.Cmd.BlobElementElfData\022\033\n\004boss\030S "
    "\001(\0132\r.Cmd.BlobBoss\"%\n\013UserAccData\022\026\n\013nol"
    "ogintime\030\001 \001(\r:\0010\"\333\005\n\013BlobAccData\022\036\n\004use"
    "r\030\001 \001(\0132\020.Cmd.BlobAccUser\022\"\n\006credit\030\002 \001("
    "\0132\022.Cmd.BlobNewCredit\022\"\n\004shop\030\003 \001(\0132\024.Cm"
    "d.BlobShopGotItem\022\034\n\003var\030\004 \001(\0132\017.Cmd.Blo"
    "bAccVar\022\037\n\006manual\030\005 \001(\0132\017.Cmd.BlobManual"
    "\022\033\n\004food\030\006 \001(\0132\r.Cmd.BlobFood\022\035\n\005quest\030\007"
    " \001(\0132\016.Cmd.BlobQuest\022!\n\007achieve\030\010 \001(\0132\020."
    "Cmd.BlobAchieve\022\035\n\005title\030\t \001(\0132\016.Cmd.Blo"
    "bTitle\022!\n\007scenery\030\n \001(\0132\020.Cmd.BlobScener"
    "y\022\033\n\004menu\030\013 \001(\0132\r.Cmd.BlobMenu\022\'\n\007aceven"
    "t\030\014 \001(\0132\026.Cmd.BlobActivityEvent\022%\n\005photo"
    "\030\r \001(\0132\026.Cmd.BlobUnsolvedPhoto\022#\n\010portra"
    "it\030\016 \001(\0132\021.Cmd.BlobPortrait\022#\n\010questnpc\030"
    "\017 \001(\0132\021.Cmd.BlobQuestNpc\022!\n\007petwork\030\020 \001("
    "\0132\020.Cmd.BlobPetWork\022\"\n\005skill\030\021 \001(\0132\023.Cmd"
    ".BlobShareSkill\022!\n\007servant\030\022 \001(\0132\020.Cmd.B"
    "lobServant\022#\n\006record\030\023 \001(\0132\023.Cmd.BlobRec"
    "ordInfo\022\033\n\004pack\030\024 \001(\0132\r.Cmd.BlobPack\022!\n\007"
    "lottery\030\025 \001(\0132\020.Cmd.BlobLottery\"\334\001\n\013Blob"
    "AccUser\022\027\n\014auguryreward\030\001 \001(\r:\0010\022\024\n\tmaxb"
    "aselv\030\002 \001(\r:\0010\022\036\n\023maxbaselv_resettime\030\003 "
    "\001(\r:\0010\022\033\n\004md5s\030\004 \003(\0132\r.Cmd.PhotoMd5\022 \n\006a"
    "ccjoy\030\005 \003(\0132\020.Cmd.BlobJoyData\022\020\n\010shownpc"
    "s\030\006 \003(\r\022\027\n\017char_primary_id\030\007 \001(\004\022\024\n\014patc"
    "hversion\030\010 \003(\004\";\n\021BlobUnsolvedPhoto\022&\n\006p"
    "hotos\030\001 \003(\0132\026.Cmd.UnsolvedUserPhoto\"#\n\010B"
    "lobBoss\022\027\n\010open_ntf\030\001 \001(\010:\005false\"\207\007\n\010Blo"
    "bUser\022\014\n\001x\030\001 \001(\002:\0010\022\014\n\001y\030\002 \001(\002:\0010\022\014\n\001z\030\003"
    " \001(\002:\0010\022\025\n\nclothcolor\030\004 \001(\r:\0010\022\021\n\006purify"
    "\030\006 \001(\r:\0010\022\022\n\007savemap\030\007 \001(\r:\0010\022\021\n\tlastmap"
    "id\030\010 \001(\r\022\025\n\rlastrealmapid\030\013 \001(\r\022\020\n\010shown"
    "pcs\030\t \003(\r\022\020\n\010mapareas\030\n \003(\r\022\024\n\014patchvers"
    "ion\030\014 \003(\r\022\026\n\013teamtimelen\030\r \001(\r:\0010\022\025\n\nfol"
    "lowerid\030\016 \001(\004:\0010\022\026\n\013leveluptime\030\017 \001(\r:\0010"
    "\022\025\n\nlastsmapid\030\020 \001(\r:\0010\022\r\n\002sx\030\021 \001(\002:\0010\022\r"
    "\n\002sy\030\022 \001(\002:\0010\022\r\n\002sz\030\023 \001(\002:\0010\022\024\n\thealcoun"
    "t\030\024 \001(\r:\0010\022\023\n\010zeny_max\030\025 \001(\r:\0010\022\024\n\tzeny_"
    "debt\030\026 \001(\r:\0010\022\023\n\010pvp_coin\030\027 \001(\r:\0010\022\016\n\003co"
    "n\030\030 \001(\r:\0010\022\026\n\007coninit\030\031 \001(\010:\005false\022\023\n\013ch"
    "arge_zeny\030\032 \001(\004\022\026\n\016charge_lottery\030\033 \001(\r\022"
    "\027\n\014lottery_coin\030\034 \001(\r:\0010\022\026\n\013rename_time\030"
    "\035 \001(\r:\0010\022\026\n\013guild_honor\030\036 \001(\r:\0010\022\025\n\nsave"
    "_index\030\037 \001(\004:\0010\022%\n\026divorce_roller_coaste"
    "r\030  \001(\010:\005false\022\031\n\021daily_normal_zeny\030! \001("
    "\004\022\031\n\021daily_charge_zeny\030\" \001(\004\022\032\n\017tutorbat"
    "tletime\030# \001(\004:\0010\022\036\n\023usedtutorbattletime\030"
    "$ \001(\004:\0010\022\030\n\020last_offlinetime\030% \001(\r\022\023\n\013la"
    "st_baselv\030& \001(\r\022\022\n\nlast_joblv\030\' \001(\r\022\024\n\td"
    "ead_coin\030( \001(\r:\0010\022\022\n\007dead_lv\030) \001(\r:\0010\022\023\n"
    "\010dead_exp\030* \001(\r:\0010\"6\n\020SkillReplaceInfo\022\020"
    "\n\005oldid\030\001 \001(\r:\0010\022\020\n\005newid\030\002 \001(\r:\0010\"e\n\017Sk"
    "illShortcutDB\0225\n\004type\030\001 \001(\0162\023.Cmd.ESkill"
    "Shortcut:\022ESKILLSHORTCUT_MIN\022\033\n\004cuts\030\002 \003"
    "(\0132\r.Cmd.SkillPos\"\344\002\n\rUserSkillData\022\022\n\nt"
    "otalpoint\030\001 \001(\r\022\016\n\006maxpos\030\002 \001(\r\022\035\n\005datas"
    "\030\003 \003(\0132\016.Cmd.SkillData\022\032\n\003pos\030\004 \003(\0132\r.Cm"
    "d.SkillPos\022\022\n\nautomaxpos\030\005 \001(\r\022\036\n\007autopo"
    "s\030\006 \003(\0132\r.Cmd.SkillPos\022 \n\textendpos\030\007 \003("
    "\0132\r.Cmd.SkillPos\022\024\n\014maxextendpos\030\010 \001(\r\022\026"
    "\n\007reseted\030\n \001(\010:\005false\022&\n\007replace\030\013 \003(\0132"
    "\025.Cmd.SkillReplaceInfo\022\'\n\tshortcuts\030\014 \003("
    "\0132\024.Cmd.SkillShortcutDB\022\037\n\024last_concert_"
    "skillid\030\r \001(\r:\0010\"/\n\016BlobShareSkill\022\035\n\005it"
    "ems\030\001 \003(\0132\016.Cmd.SkillItem\"\246\003\n\014UserRoleDa"
    "ta\022\021\n\006jobExp\030\001 \001(\004:\0010\022\020\n\005jobLv\030\002 \001(\r:\0010\022"
    "5\n\nprofession\030\003 \001(\0162\020.Cmd.EProfession:\017E"
    "PROFESSION_MIN\022\023\n\010strPoint\030\004 \001(\r:\0010\022\023\n\010i"
    "ntPoint\030\005 \001(\r:\0010\022\023\n\010agiPoint\030\006 \001(\r:\0010\022\023\n"
    "\010dexPoint\030\007 \001(\r:\0010\022\023\n\010vitPoint\030\010 \001(\r:\0010\022"
    "\023\n\010lukPoint\030\t \001(\r:\0010\022\025\n\ntotalPoint\030\n \001(\r"
    ":\0010\022\024\n\tusedPoint\030\013 \001(\r:\0010\022\r\n\002hp\030\014 \001(\r:\0010"
    "\022\r\n\002sp\030\r \001(\r:\0010\022!\n\005skill\030\016 \001(\0132\022.Cmd.Use"
    "rSkillData\022\020\n\010unlocklv\030\017 \003(\r\022\023\n\010maxjoblv"
    "\030\020 \001(\r:\0010\022\021\n\006branch\030\021 \001(\r:\0010\022\024\n\005isbuy\030\022 "
    "\001(\010:\005false\"\273\001\n\013BlobFighter\022 \n\005datas\030\001 \003("
    "\0132\021.Cmd.UserRoleData\022\025\n\ntotalpoint\030\002 \001(\r"
    ":\0010\022\026\n\013maxskillpos\030\003 \001(\r:\0010\022\025\n\nmaxautopo"
    "s\030\004 \001(\r:\0010\022\027\n\014maxextendpos\030\005 \001(\r:\0010\022\023\n\010m"
    "axjoblv\030\006 \001(\r:\0010\022\026\n\013maxcurjoblv\030\007 \001(\r:\0010"
    "\"3\n\023StageStepNormalBlob\022\016\n\006stepid\030\001 \001(\r\022"
    "\014\n\004star\030\002 \001(\r\"A\n\021StageStepHardBlob\022\016\n\006st"
    "epid\030\001 \001(\r\022\016\n\006finish\030\002 \001(\r\022\014\n\004time\030\003 \001(\r"
    "\"\205\001\n\rStageBlobItem\022\017\n\007stageID\030\001 \001(\r\022+\n\tn"
    "ormalist\030\002 \003(\0132\030.Cmd.StageStepNormalBlob"
    "\022(\n\010hardlist\030\003 \003(\0132\026.Cmd.StageStepHardBl"
    "ob\022\014\n\004gets\030\004 \003(\r\"@\n\tBlobStage\022 \n\004list\030\001 "
    "\003(\0132\022.Cmd.StageBlobItem\022\021\n\tresetTime\030\002 \001"
    "(\r\"\211\001\n\014QuestNpcData\022\020\n\005mapid\030\001 \001(\r:\0010\022\022\n"
    "\007questid\030\002 \001(\r:\0010\022\022\n\007groupid\030\020 \001(\r:\0010\022\016\n"
    "\003acc\030\017 \001(\r:\0010\022\r\n\002hp\030\014 \001(\r:\0010\022 \n\004data\030\016 \001"
    "(\0132\022.Cmd.NpcDefineData\"C\n\014BlobQuestNpc\022\022"
    "\n\007version\030\001 \001(\r:\0010\022\037\n\004list\030\002 \003(\0132\021.Cmd.Q"
    "uestNpcData\"\226\003\n\017BufferStateBlob\022\r\n\002id\030\001 "
    "\001(\r:\0010\022\022\n\007endtime\030\002 \001(\004:\0010\022\r\n\002lv\030\003 \001(\r:\001"
    "0\022\021\n\006fromid\030\004 \001(\004:\0010\022\022\n\007hponadd\030\005 \001(\r:\0010"
    "\022\022\n\007addtime\030\006 \001(\r:\0010\022\020\n\005count\030\007 \001(\r:\0010\022\026"
    "\n\013commmondata\030\010 \001(\r:\0010\022\017\n\007actflag\030\t \001(\010\022"
    "\021\n\006layers\030\n \001(\r:\0010\022\026\n\013totaldamage\030\013 \001(\r:"
    "\0010\022\026\n\013attackcount\030\014 \001(\r:\0010\022\025\n\nbeatkcount"
    "\030\r \001(\r:\0010\022\037\n\005attrs\030\016 \003(\0132\020.Cmd.UserAttrS"
    "vr\022\017\n\007vecdata\030\017 \003(\r\022\020\n\010fromname\030\020 \001(\t\022\024\n"
    "\tsparetime\030\021 \001(\004:\0010\022\022\n\nsetendtime\030\022 \003(\004\022"
    "\023\n\010timetick\030\023 \001(\004:\0010\"D\n\nBlobBuffer\022\022\n\007ve"
    "rsion\030\001 \001(\r:\0010\022\"\n\004list\030\002 \003(\0132\024.Cmd.Buffe"
    "rStateBlob\"h\n\014BlobPortrait\022\026\n\013curportrai"
    "t\030\001 \001(\r:\0010\022\023\n\010curframe\030\002 \001(\r:\0010\022\026\n\016unloc"
    "kportrait\030\003 \003(\r\022\023\n\013unlockframe\030\004 \003(\r\"G\n\010"
    "BlobHair\022\022\n\007curhair\030\001 \001(\r:\0010\022\023\n\010curcolor"
    "\030\002 \001(\r:\0010\022\022\n\nunlockhair\030\003 \003(\r\">\n\014BlobGea"
    "rItem\022\016\n\006gearid\030\001 \001(\r\022\r\n\005state\030\002 \001(\r\022\017\n\007"
    "sceneid\030\003 \001(\r\"b\n\tBlobGears\022\017\n\007version\030\001 "
    "\001(\r\022\037\n\004list\030\002 \003(\0132\021.Cmd.BlobGearItem\022#\n\010"
    "exitlist\030\003 \003(\0132\021.Cmd.BlobGearItem\"D\n\013Blo"
    "bTipItem\022&\n\003red\030\001 \001(\0162\014.Cmd.ERedSys:\013ERE"
    "DSYS_MIN\022\r\n\005tipid\030\002 \003(\r\";\n\010BlobTips\022\017\n\007v"
    "ersion\030\001 \001(\r\022\036\n\004list\030\002 \003(\0132\020.Cmd.BlobTip"
    "Item\"s\n\014FollowerItem\022\r\n\002id\030\001 \001(\r:\0010\022\023\n\010s"
    "pdRatio\030\002 \001(\002:\0010\022\025\n\nbehaviours\030\003 \001(\r:\0010\022"
    "\022\n\007questid\030\004 \001(\r:\0010\022\024\n\tcleartime\030\005 \001(\r:\001"
    "0\"@\n\014BlobFollower\022\017\n\007version\030\001 \001(\r\022\037\n\004li"
    "st\030\002 \003(\0132\021.Cmd.FollowerItem\"<\n\nBlobCDTim"
    "e\022\017\n\007version\030\001 \001(\r\022\035\n\004list\030\002 \003(\0132\017.Cmd.C"
    "DTimeItem\"U\n\014BlobShortcut\022\036\n\003cut\030\001 \003(\0132\021"
    ".Cmd.ShortcutItem\022\021\n\tfirstauto\030\002 \003(\r\022\022\n\007"
    "version\030\003 \001(\r:\0010\"I\n\020BlobGMEffectItem\022\020\n\005"
    "mapid\030\001 \001(\r:\0010\022\020\n\005index\030\002 \001(\r:\0010\022\021\n\tgmco"
    "mmand\030\003 \001(\t\"H\n\rBlobGMEffects\022\022\n\007version\030"
    "\001 \001(\r:\0010\022#\n\004list\030\002 \003(\0132\025.Cmd.BlobGMEffec"
    "tItem\"/\n\nBlobFreyja\022\022\n\007version\030\001 \001(\r:\0010\022"
    "\r\n\005mapid\030\002 \003(\r\"_\n\014BlobTransfer\022\r\n\005npcid\030"
    "\001 \003(\r\022\037\n\020map1AllActivated\030\002 \001(\010:\005false\022\037"
    "\n\020map2AllActivated\030\003 \001(\010:\005false\"G\n\016BlobL"
    "aboratory\022\022\n\007version\030\001 \001(\r:\0010\022\020\n\005point\030\002"
    " \001(\r:\0010\022\017\n\004days\030\003 \001(\r:\0010\"n\n\013SceneryItem\022"
    "\024\n\tsceneryid\030\001 \001(\r:\0010\022\022\n\007visited\030\002 \001(\r:\001"
    "0\022\021\n\006upload\030\003 \001(\r:\0010\022\021\n\006anglez\030\004 \001(\r:\0010\022"
    "\017\n\004time\030\005 \001(\r:\0010\"F\n\016SceneryMapItem\022\020\n\005ma"
    "pid\030\001 \001(\r:\0010\022\"\n\010scenerys\030\002 \003(\0132\020.Cmd.Sce"
    "neryItem\"e\n\013BlobScenery\022\022\n\007version\030\001 \001(\r"
    ":\0010\022!\n\004list\030\002 \003(\0132\023.Cmd.SceneryMapItem\022\037"
    "\n\005items\030\003 \003(\0132\020.Cmd.SceneryItem\"M\n\013BlobC"
    "arrier\022\022\n\007version\030\001 \001(\r:\0010\022\023\n\010assemble\030\002"
    " \001(\r:\0010\022\025\n\njoinmaster\030\003 \001(\004:\0010\",\n\010BlobMe"
    "nu\022\022\n\007version\030\001 \001(\r:\0010\022\014\n\004list\030\002 \003(\r\"\303\003\n"
    "\017BlobShopGotItem\022\022\n\007version\030\001 \001(\r:\0010\022\036\n\004"
    "list\030\002 \003(\0132\020.Cmd.ShopGotItem\022 \n\006random\030\003"
    " \003(\0132\020.Cmd.ShopGotItem\022\024\n\trefreshlv\030\004 \001("
    "\r:\0010\022\036\n\023refreshlv_resettime\030\005 \001(\r:\0010\022\037\n\005"
    "month\030\006 \003(\0132\020.Cmd.ShopGotItem\022$\n\nrandomb"
    "ylv\030\007 \003(\0132\020.Cmd.ShopGotItem\022%\n\013discounta"
    "ct\030\010 \003(\0132\020.Cmd.ShopGotItem\022#\n\trandomacc\030"
    "\t \003(\0132\020.Cmd.ShopGotItem\022\"\n\010listweek\030\n \003("
    "\0132\020.Cmd.ShopGotItem\022$\n\nlimitmonth\030\013 \003(\0132"
    "\020.Cmd.ShopGotItem\022\"\n\010addcount\030\014 \003(\0132\020.Cm"
    "d.ShopGotItem\022#\n\tlimititem\030\r \003(\0132\020.Cmd.S"
    "hopGotItem\"\242\001\n\020BlobExchangeShop\022\022\n\007versi"
    "on\030\001 \001(\r:\0010\022\027\n\010menuopen\030\002 \001(\010:\005false\022$\n\005"
    "items\030\003 \003(\0132\025.Cmd.ExchangeShopItem\022\"\n\007it"
    "emget\030\004 \003(\0132\021.Cmd.ItemGetCount\022\027\n\017exchan"
    "ged_goods\030\005 \003(\r\"1\n\rBlobKnownMaps\022\022\n\007vers"
    "ion\030\001 \001(\r:\0010\022\014\n\004list\030\002 \003(\r\"=\n\tBlobInter\022"
    "\022\n\007version\030\001 \001(\r:\0010\022\034\n\004list\030\002 \003(\0132\016.Cmd."
    "InterData\"\302\001\n\tBlobHands\022\022\n\007version\030\001 \001(\r"
    ":\0010\022\023\n\010ismaster\030\002 \001(\r:\0010\022\022\n\007otherid\030\003 \001("
    "\004:\0010\022\026\n\013forcejoinid\030\004 \001(\004:\0010\022\025\n\rlast_han"
    "dname\030\005 \001(\t\022\026\n\013handtimelen\030\006 \001(\r:\0010\022\031\n\016n"
    "extrewardtime\030\007 \001(\r:\0010\022\026\n\013nexttiptime\030\010 "
    "\001(\r:\0010\"0\n\010BlobShow\022\017\n\007actions\030\001 \003(\r\022\023\n\013e"
    "xpressions\030\002 \003(\r\"*\n\tBlobTrace\022\035\n\005items\030\001"
    " \003(\0132\016.Cmd.TraceItem\"\344\001\n\nBlobOption\022-\n\004t"
    "ype\030\001 \001(\0162\017.Cmd.EQueryType:\016EQUERYTYPE_M"
    "IN\022\035\n\022normalskill_option\030\002 \001(\r:\0011\022\026\n\013fas"
    "hionhide\030\003 \001(\r:\0010\022$\n\006bitopt\030\004 \001(\004:\02418446"
    "744073709551615\022#\n\tskillopts\030\005 \003(\0132\020.Cmd"
    ".SkillOption\022%\n\014wedding_type\030\006 \001(\0162\017.Cmd"
    ".EQueryType\"\037\n\010BlobDojo\022\023\n\013completedid\030\001"
    " \003(\r\"U\n\014FoodItemInfo\022\016\n\006itemid\030\001 \001(\r\022\024\n\014"
    "invalid_time\030\002 \001(\r\022\037\n\005attrs\030\003 \003(\0132\020.Cmd."
    "UserAttrSvr\":\n\rFoodLimitInfo\022\016\n\006itemid\030\001"
    " \001(\r\022\013\n\003num\030\002 \001(\r\022\014\n\004time\030\003 \001(\r\"\304\002\n\010Blob"
    "Food\022\021\n\tcookerexp\030\001 \001(\r\022\020\n\010cookerlv\030\002 \001("
    "\r\022\021\n\ttasterexp\030\003 \001(\r\022\020\n\010tasterlv\030\004 \001(\r\022\016"
    "\n\006savehp\030\005 \001(\004\022\016\n\006savesp\030\006 \001(\004\022\016\n\006height"
    "\030\007 \001(\r\022\016\n\006weight\030\010 \001(\r\022\017\n\007recipes\030\t \003(\r\022"
    "\'\n\nmanualdata\030\n \003(\0132\023.Cmd.FoodManualData"
    "\022#\n\010iteminfo\030\013 \003(\0132\021.Cmd.FoodItemInfo\022\017\n"
    "\007satiety\030\014 \001(\r\022\027\n\017last_cooked_ids\030\r \003(\r\022"
    "%\n\tlimitinfo\030\016 \003(\0132\022.Cmd.FoodLimitInfo\"4"
    "\n\016BlobHighRefine\022\"\n\005datas\030\001 \003(\0132\023.Cmd.Hi"
    "ghRefineData\"X\n\013PackageData\022+\n\004type\030\001 \001("
    "\0162\016.Cmd.EPackType:\rEPACKTYPE_MIN\022\034\n\005item"
    "s\030\002 \003(\0132\r.Cmd.ItemData\"6\n\014ItemUseCount\022\021"
    "\n\006itemid\030\001 \001(\r:\0010\022\023\n\010usecount\030\002 \001(\r:\0010\"a"
    "\n\014ItemGetCount\022\021\n\006itemid\030\001 \001(\r:\0010\022\023\n\010get"
    "count\030\002 \001(\r:\0010\022)\n\006source\030\003 \001(\0162\014.Cmd.ESo"
    "urce:\013ESOURCE_MIN\"\226\001\n\020RewardSafetyItem\022\r"
    "\n\002id\030\001 \001(\r:\0010\022\025\n\nexpiretime\030\002 \001(\r:\0010\022\024\n\t"
    "rollcount\030\003 \001(\r:\0010\022\026\n\013rewardcount\030\004 \001(\r:"
    "\0010\022\032\n\017nextsafetycount\030\005 \001(\r:\0010\022\022\n\007versio"
    "n\030\006 \001(\r:\0010\"\310\002\n\010BlobPack\022\037\n\005datas\030\001 \003(\0132\020"
    ".Cmd.PackageData\022\021\n\thintitems\030\002 \003(\r\022,\n\020f"
    "rost_item_infos\030\003 \003(\0132\022.Cmd.FrostItemInf"
    "o\022\"\n\007itemuse\030\004 \003(\0132\021.Cmd.ItemUseCount\022\021\n"
    "\tonceitems\030\005 \003(\r\022\"\n\007itemget\030\006 \003(\0132\021.Cmd."
    "ItemGetCount\022\017\n\007arrowid\030\010 \001(\r\022\022\n\007version"
    "\030\t \001(\r:\0010\022(\n\requipposdatas\030\n \003(\0132\021.Cmd.E"
    "quipPosData\0220\n\021rewardsafetyitems\030\013 \003(\0132\025"
    ".Cmd.RewardSafetyItem\".\n\010MapQuest\022\020\n\005map"
    "id\030\001 \001(\r:\0010\022\020\n\010questids\030\002 \003(\r\"4\n\017BlobQue"
    "stPuzzle\022!\n\007puzzles\030\001 \003(\0132\020.Cmd.QuestPuz"
    "zle\"\247\003\n\tBlobQuest\022\036\n\006accept\030\001 \003(\0132\016.Cmd."
    "QuestData\022\036\n\006submit\030\002 \003(\0132\016.Cmd.QuestDat"
    "a\022 \n\006detail\030\003 \003(\0132\020.Cmd.QuestDetail\022\025\n\nd"
    "ailycount\030\004 \001(\r:\0010\022\026\n\013dailytcount\030\005 \001(\r:"
    "\0010\022\023\n\010dailyexp\030\006 \001(\r:\0010\022\025\n\ndailylevel\030\007 "
    "\001(\r:\0010\022\021\n\tdailygift\030\010 \003(\r\022!\n\026lastcalcdai"
    "lycounttime\030\t \001(\r:\0010\022\037\n\010mapquest\030\n \003(\0132\r"
    ".Cmd.MapQuest\022#\n\014maprandquest\030\016 \003(\0132\r.Cm"
    "d.MapQuest\022\021\n\tvarreward\030\013 \003(\r\022\023\n\013forbidq"
    "uest\030\014 \003(\r\022\023\n\013process_acc\030\r \003(\r\022$\n\006puzzl"
    "e\030\017 \001(\0132\024.Cmd.BlobQuestPuzzle\"[\n\tBlobTit"
    "le\022\023\n\010curTitle\030\001 \001(\r:\0010\022\035\n\005datas\030\002 \003(\0132\016"
    ".Cmd.TitleData\022\032\n\017curAchieveTitle\030\003 \001(\r:"
    "\0010\"3\n\014BlobLineData\022\017\n\007otherid\030\001 \001(\004\022\022\n\ne"
    "xpireTime\030\002 \001(\r\"U\n\010BlobLine\022#\n\010ilinewho\030"
    "\001 \003(\0132\021.Cmd.BlobLineData\022$\n\twholineme\030\002 "
    "\003(\0132\021.Cmd.BlobLineData\"U\n\014BlobSpEffect\022\037"
    "\n\004data\030\001 \003(\0132\021.Cmd.SpEffectData\022$\n\twholi"
    "neme\030\002 \003(\0132\021.Cmd.BlobLineData\"R\n\013BlobHan"
    "dNpc\022\022\n\007version\030\001 \001(\r:\0010\022\036\n\004data\030\002 \001(\0132\020"
    ".Cmd.HandNpcData\022\017\n\007endtime\030\003 \001(\r\"V\n\007Blo"
    "bPet\022\024\n\tactivePet\030\001 \001(\r:\0010\022\030\n\ractivePart"
    "ner\030\002 \001(\r:\0010\022\033\n\005datas\030\003 \003(\0132\014.Cmd.PetDat"
    "a\"p\n\rBlobWeaponPet\022\022\n\007version\030\001 \001(\r:\0010\022!"
    "\n\005datas\030\002 \003(\0132\022.Cmd.WeaponPetData\022\025\n\nmax"
    "petsize\030\003 \001(\r:\0010\022\021\n\tunlockids\030\004 \003(\r\"\"\n\007B"
    "lobVar\022\027\n\005datas\030\001 \003(\0132\010.Cmd.Var\"(\n\nBlobA"
    "ccVar\022\032\n\005datas\030\001 \003(\0132\013.Cmd.AccVar\"N\n\013Ski"
    "llDamage\022\017\n\007skillid\030\001 \001(\r\022\016\n\006damage\030\002 \001("
    "\r\022\014\n\004type\030\003 \001(\r\022\020\n\010targetid\030\004 \001(\004\"5\n\017Sta"
    "tKillMonster\022\021\n\tmonsterid\030\001 \002(\r\022\017\n\007killn"
    "um\030\002 \002(\r\"|\n\013BlobStatVar\022\033\n\005datas\030\001 \003(\0132\014"
    ".Cmd.StatVar\022%\n\013skilldamage\030\002 \003(\0132\020.Cmd."
    "SkillDamage\022)\n\013killmonster\030\003 \003(\0132\024.Cmd.S"
    "tatKillMonster\"-\n\013BlobChatMsg\022\036\n\006preset\030"
    "\001 \003(\0132\016.Cmd.PresetMsg\"L\n\rBlobUserTower\022%"
    "\n\ttowerinfo\030\001 \001(\0132\022.Cmd.UserTowerInfo\022\024\n"
    "\tcleartime\030\002 \001(\r:\0010\"s\n\010BlobSeal\022\034\n\005datas"
    "\030\001 \003(\0132\r.Cmd.SealData\022!\n\nquestseals\030\002 \003("
    "\0132\r.Cmd.SealData\022\023\n\010nexttime\030\003 \001(\r:\0010\022\021\n"
    "\topenseals\030\004 \003(\r\":\n\nBlobManual\022\035\n\004data\030\001"
    " \001(\0132\017.Cmd.ManualData\022\r\n\005isadd\030\002 \001(\010\"%\n\023"
    "BlobFirstActionDone\022\016\n\006action\030\001 \001(\r\"+\n\010B"
    "lobAttr\022\037\n\005datas\030\001 \003(\0132\020.Cmd.UserAttrSvr"
    "\".\n\nMonsterNum\022\021\n\tmonsterid\030\001 \001(\r\022\r\n\005cou"
    "nt\030\002 \001(\r\"@\n\nBlobCamera\022\017\n\007version\030\001 \001(\r\022"
    "!\n\010monsters\030\002 \003(\0132\017.Cmd.MonsterNum\"0\n\010Ra"
    "idZone\022\021\n\006raidid\030\001 \001(\r:\0010\022\021\n\006zoneid\030\002 \001("
    "\r:\0010\"\366\001\n\010BlobZone\022\017\n\007version\030\001 \001(\r\022\016\n\006zo"
    "neid\030\002 \001(\r\022\r\n\005mapid\030\003 \001(\r\022\013\n\003cmd\030\004 \001(\014\022\022"
    "\n\npastzoneid\030\005 \001(\r\022#\n\014raidzonelist\030\006 \003(\013"
    "2\r.Cmd.RaidZone\022\025\n\reffectivetime\030\007 \001(\r\022\017"
    "\n\004type\030\010 \001(\r:\0010\022\016\n\006roomid\030\t \001(\004\022\022\n\ncolor"
    "index\030\n \001(\r\022\014\n\001x\030\013 \001(\002:\0010\022\014\n\001y\030\014 \001(\002:\0010\022"
    "\014\n\001z\030\r \001(\002:\0010\")\n\tBlobGuild\022\034\n\004info\030\001 \001(\013"
    "2\016.Cmd.GuildInfo\"\'\n\010BlobTeam\022\033\n\004info\030\002 \001"
    "(\0132\r.Cmd.TeamInfo\"2\n\014BlobUserZone\022\"\n\005inf"
    "os\030\003 \003(\0132\023.Cmd.RecentZoneInfo\"J\n\014BlobAcc"
    "Quest\022\022\n\naccept_ids\030\001 \003(\r\022\022\n\nchoice_ids\030"
    "\002 \003(\r\022\022\n\007version\030\003 \001(\r:\0010\"J\n\017BlobGlobalT"
    "ower\022\034\n\004info\030\001 \001(\0132\016.Cmd.TowerInfo\022\031\n\003va"
    "r\030\002 \001(\0132\014.Cmd.BlobVar\"3\n\021GlobalSocialFoc"
    "us\022\017\n\004guid\030\001 \001(\004:\0010\022\r\n\005guids\030\002 \003(\004\"M\n\023Bl"
    "obGlobalSociality\022\016\n\006applys\030\001 \003(\004\022&\n\006foc"
    "uss\030\002 \003(\0132\026.Cmd.GlobalSocialFocus\")\n\nCha"
    "rgeData\022\014\n\004time\030\001 \001(\r\022\r\n\005money\030\002 \001(\004\"\252\002\n"
    "\013BlobDeposit\022\'\n\ttypeDatas\030\001 \003(\0132\024.Cmd.De"
    "positTypeData\022\'\n\tcardDatas\030\002 \003(\0132\024.Cmd.D"
    "epositCardData\022$\n\013chargeDatas\030\003 \003(\0132\017.Cm"
    "d.ChargeData\022\021\n\tusedcards\030\004 \003(\r\022\027\n\010hasqu"
    "ota\030\005 \001(\010:\005false\022&\n\014quota_detail\030\006 \003(\0132\020"
    ".Cmd.QuotaDetail\022 \n\tquota_log\030\007 \003(\0132\r.Cm"
    "d.QuotaLog\022\026\n\007getitem\030\010 \001(\010:\005false\022\025\n\nqu"
    "ota_lock\030\t \001(\004:\0010\"j\n\016BlobTicketData\022\036\n\004t"
    "ype\030\001 \001(\0162\020.Cmd.ETicketType\022\014\n\004guid\030\002 \001("
    "\t\022\034\n\003ret\030\003 \001(\0162\017.Cmd.ETicketRet\022\014\n\004time\030"
    "\004 \001(\r\"n\n\022BlobTicketCacheCmd\022!\n\004type\030\001 \001("
    "\0162\023.Cmd.ETicketCmdType\022\014\n\004guid\030\002 \001(\t\022\014\n\004"
    "data\030\003 \001(\014\022\013\n\003len\030\004 \001(\r\022\014\n\004time\030\005 \001(\r\"`\n"
    "\nBlobTicket\022%\n\010tickdata\030\001 \003(\0132\023.Cmd.Blob"
    "TicketData\022+\n\ncache_cmds\030\002 \003(\0132\027.Cmd.Blo"
    "bTicketCacheCmd\"\264\002\n\nBlobCredit\022\022\n\007versio"
    "n\030\001 \001(\r:\0010\022\021\n\006credit\030\002 \001(\005:\0010\022\030\n\rmonster"
    "_value\030\003 \001(\r:\0010\022\024\n\tsavedtime\030\004 \001(\r:\0010\022\025\n"
    "\nforbidtime\030\005 \001(\r:\0010\022\027\n\014auguryreward\030\006 \001"
    "(\r:\0010\022\"\n\004shop\030\007 \001(\0132\024.Cmd.BlobShopGotIte"
    "m\022\034\n\003var\030\010 \001(\0132\017.Cmd.BlobAccVar\022\024\n\tmaxba"
    "selv\030\t \001(\r:\0010\022\036\n\023maxbaselv_resettime\030\n \001"
    "(\r:\0010\022\'\n\007acevent\030\013 \001(\0132\026.Cmd.BlobActivit"
    "yEvent\"}\n\rBlobNewCredit\022\022\n\007version\030\001 \001(\r"
    ":\0010\022\021\n\006credit\030\002 \001(\005:\0010\022\030\n\rmonster_value\030"
    "\003 \001(\r:\0010\022\024\n\tsavedtime\030\004 \001(\r:\0010\022\025\n\nforbid"
    "time\030\005 \001(\r:\0010\"J\n\tChatCount\022\023\n\010targetid\030\002"
    " \001(\004:\0010\022\022\n\007to_chat\030\003 \001(\r:\0010\022\024\n\tfrom_chat"
    "\030\004 \001(\r:\0010\"I\n\010ChatItem\022\021\n\006charid\030\001 \001(\004:\0010"
    "\022\017\n\004time\030\002 \001(\r:\0010\022\014\n\004name\030\003 \001(\t\022\013\n\003msg\030\004"
    " \001(\t\"Z\n\010BlobChat\022\036\n\006counts\030\001 \003(\0132\016.Cmd.C"
    "hatCount\022\020\n\010savelist\030\002 \003(\004\022\034\n\005items\030\003 \003("
    "\0132\r.Cmd.ChatItem\"2\n\022ActivityCommonData\022\014"
    "\n\004name\030\001 \001(\t\022\016\n\006params\030\002 \003(\r\"R\n\014BlobActi"
    "vity\022\022\n\007version\030\001 \001(\r:\0010\022.\n\ractivitydata"
    "s\030\002 \003(\0132\027.Cmd.ActivityCommonData\"1\n\014Blob"
    "Relation\022\022\n\007version\030\001 \001(\r:\0010\022\r\n\005black\030\002 "
    "\003(\004\"\?\n\013ShareNormal\022!\n\004type\030\001 \001(\0162\023.Cmd.E"
    "ShareDataType\022\r\n\005value\030\002 \001(\004\"e\n\rShareCal"
    "cItem\022\023\n\010high_key\030\001 \001(\r:\0010\022\022\n\007low_key\030\002 "
    "\001(\r:\0010\022\025\n\nhigh_value\030\003 \001(\r:\0010\022\024\n\tlow_val"
    "ue\030\004 \001(\r:\0010\"Q\n\tShareCalc\022!\n\004type\030\001 \001(\0162\023"
    ".Cmd.EShareDataType\022!\n\005items\030\003 \003(\0132\022.Cmd"
    ".ShareCalcItem\"\036\n\rShareFirstMvp\022\r\n\005mvpid"
    "\030\002 \001(\r\"!\n\016ShareFirstHand\022\017\n\007otherid\030\001 \001("
    "\004\"$\n\021ShareFirstCarrier\022\017\n\007otherid\030\001 \001(\004\""
    "D\n\nShareTrade\022\016\n\006itemid\030\001 \001(\r\022\023\n\013total_p"
    "rice\030\002 \001(\004\022\021\n\trefine_lv\030\003 \001(\r\"-\n\013ShareDa"
    "mage\022\016\n\006damage\030\001 \001(\004\022\016\n\006target\030\002 \001(\t\"\344\002\n"
    "\tBlobShare\022$\n\nnormaldata\030\001 \003(\0132\020.Cmd.Sha"
    "reNormal\022 \n\010calcdata\030\002 \003(\0132\016.Cmd.ShareCa"
    "lc\022$\n\010firstmvp\030\003 \001(\0132\022.Cmd.ShareFirstMvp"
    "\022\022\n\nfirstphoto\030\004 \001(\t\022&\n\tfirsthand\030\005 \001(\0132"
    "\023.Cmd.ShareFirstHand\022,\n\014firstcarrier\030\006 \001"
    "(\0132\026.Cmd.ShareFirstCarrier\022!\n\010tradebuy\030\007"
    " \001(\0132\017.Cmd.ShareTrade\022\"\n\ttradesell\030\010 \001(\013"
    "2\017.Cmd.ShareTrade\022#\n\tmaxdamage\030\t \001(\0132\020.C"
    "md.ShareDamage\022\023\n\013mystery_box\030\n \003(\r\"t\n\rA"
    "chieveDBItem\022\r\n\002id\030\001 \001(\r:\0010\022\022\n\007process\030\002"
    " \001(\r:\0010\022\025\n\nfinishtime\030\003 \001(\r:\0010\022\031\n\nreward"
    "_get\030\004 \001(\010:\005false\022\016\n\006params\030\005 \003(\004\"\236\001\n\013Bl"
    "obAchieve\022\036\n\004data\030\001 \003(\0132\020.Cmd.AchieveDat"
    "a\022\037\n\tmax_cache\030\002 \003(\0132\014.Cmd.MaxInfo\022\022\n\007ve"
    "rsion\030\003 \001(\r:\0010\022!\n\005items\030\004 \003(\0132\022.Cmd.Achi"
    "eveDBItem\022\027\n\014char_version\030\005 \001(\r:\0010\"G\n\rBl"
    "obAuthorize\022\020\n\010password\030\001 \001(\t\022\021\n\tresetti"
    "me\030\002 \001(\r\022\021\n\tinputtime\030\003 \001(\r\"S\n\tGuildRaid"
    "\022\r\n\005npcid\030\001 \001(\004\022#\n\005state\030\002 \001(\0162\024.Cmd.EGu"
    "ildGateState\022\022\n\nkilledboss\030\003 \003(\r\"B\n\rBlob"
    "GuildRaid\022\034\n\004raid\030\001 \003(\0132\016.Cmd.GuildRaid\022"
    "\023\n\013raidversion\030\002 \001(\r\"\"\n\021AstrolabeStarDat"
    "a\022\r\n\002id\030\001 \001(\r:\0010\"i\n\rAstrolabeData\022\n\n\002id\030"
    "\001 \001(\r\022%\n\005stars\030\002 \003(\0132\026.Cmd.AstrolabeStar"
    "Data\022%\n\005costs\030\003 \003(\0132\026.Cmd.AstrolabeCostD"
    "ata\"^\n\021AstrolabeMainData\022!\n\004type\030\001 \001(\0162\023"
    ".Cmd.EAstrolabeType\022&\n\nastrolabes\030\002 \003(\0132"
    "\022.Cmd.AstrolabeData\"6\n\rBlobAstrolabe\022%\n\005"
    "datas\030\001 \003(\0132\026.Cmd.AstrolabeMainData\"\362\002\n\022"
    "PetAdventureDBItem\022\r\n\002id\030\001 \001(\r:\0010\022\024\n\tsta"
    "rttime\030\002 \001(\r:\0010\022A\n\006status\030\003 \001(\0162\030.Cmd.EP"
    "etAdventureStatus:\027EPETADVENTURESTATUS_M"
    "IN\022\033\n\004eggs\030\004 \003(\0132\r.Cmd.ItemData\022$\n\005steps"
    "\030\005 \003(\0132\025.Cmd.PetAdventureStep\022\"\n\013raresre"
    "ward\030\006 \003(\0132\r.Cmd.ItemData\022\021\n\006specid\030\007 \001("
    "\r:\0010\022#\n\003eff\030\010 \003(\0132\026.Cmd.PetEfficiencyInf"
    "o\022-\n\nrewardinfo\030\t \003(\0132\031.Cmd.PetMonsterRe"
    "wardInfo\022&\n\017extrarewardinfo\030\n \003(\0132\r.Cmd."
    "ItemData\"_\n\020BlobPetAdventure\022&\n\005items\030\001 "
    "\003(\0132\027.Cmd.PetAdventureDBItem\022\022\n\nunlockar"
    "ea\030\002 \003(\r\022\017\n\007version\030\003 \001(\r\"\257\001\n\013BlobPetWor"
    "k\022\037\n\006manual\030\001 \001(\0132\017.Cmd.WorkManual\022\035\n\005da"
    "tas\030\002 \003(\0132\016.Cmd.WorkSpace\022\037\n\004pets\030\003 \003(\0132"
    "\021.Cmd.WorkPetExtra\022#\n\007rewards\030\005 \003(\0132\022.Cm"
    "d.WorkDayReward\022\032\n\017card_expiretime\030\004 \001(\r"
    ":\0010\".\n\007BlobEye\022\020\n\005curid\030\001 \001(\r:\0010\022\021\n\tunlo"
    "ckids\030\002 \003(\r\"\270\001\n\rBlobTutorTask\022!\n\005items\030\001"
    " \003(\0132\022.Cmd.TutorTaskItem\022\026\n\013proficiency\030"
    "\002 \001(\r:\0010\022&\n\014tutorrewards\030\003 \003(\0132\020.Cmd.Tut"
    "orReward\022\022\n\ngrowreward\030\004 \003(\004\022\027\n\017tutorgro"
    "wreward\030\005 \003(\004\022\027\n\014growrewardlv\030\006 \001(\r:\0010\"d"
    "\n\021BlobActivityEvent\022&\n\013rewarditems\030\001 \003(\013"
    "2\021.Cmd.AERewardItem\022\'\n\010eventcnt\030\002 \003(\0132\025."
    "Cmd.ActivityEventCnt\"<\n\022BlobGuildChallen"
    "ge\022&\n\005items\030\001 \003(\0132\027.Cmd.GuildChallengeIt"
    "em\"A\n\013BlobGvgData\022\033\n\005datas\030\001 \003(\0132\014.Cmd.G"
    "vgData\022\025\n\nexpiretime\030\002 \001(\r:\0010\"\222\t\n\014BlobUs"
    "erData\022\014\n\001x\030\001 \001(\002:\0010\022\014\n\001y\030\002 \001(\002:\0010\022\014\n\001z\030"
    "\003 \001(\002:\0010\022\037\n\006cdtime\030\004 \001(\0132\017.Cmd.BlobCDTim"
    "e\022$\n\tshortcuts\030\005 \001(\0132\021.Cmd.BlobShortcut\022"
    "#\n\010follower\030\006 \001(\0132\021.Cmd.BlobFollower\022\035\n\005"
    "stage\030\007 \001(\0132\016.Cmd.BlobStage\022#\n\010questnpc\030"
    "\010 \001(\0132\021.Cmd.BlobQuestNpc\022\037\n\006buffer\030\t \001(\013"
    "2\017.Cmd.BlobBuffer\022\033\n\004menu\030\n \001(\0132\r.Cmd.Bl"
    "obMenu\022\025\n\nclothcolor\030\013 \001(\r:\0010\022\037\n\004port\030\014 "
    "\001(\0132\021.Cmd.BlobPortrait\022#\n\005items\030\r \001(\0132\024."
    "Cmd.BlobShopGotItem\022\033\n\004hair\030\016 \001(\0132\r.Cmd."
    "BlobHair\022 \n\004maps\030\017 \001(\0132\022.Cmd.BlobKnownMa"
    "ps\022\034\n\004gear\030\020 \001(\0132\016.Cmd.BlobGears\022\021\n\006gard"
    "en\030\021 \001(\r:\0010\022\021\n\006purify\030\022 \001(\r:\0010\022\033\n\004tips\030\023"
    " \001(\0132\r.Cmd.BlobTips\022\022\n\007savemap\030\024 \001(\r:\0010\022"
    "\037\n\003gms\030\025 \001(\0132\022.Cmd.BlobGMEffects\022\037\n\006frey"
    "ja\030\026 \001(\0132\017.Cmd.BlobFreyja\022\036\n\006inters\030\027 \001("
    "\0132\016.Cmd.BlobInter\022\'\n\nlaboratory\030\030 \001(\0132\023."
    "Cmd.BlobLaboratory\022!\n\007scenery\030\031 \001(\0132\020.Cm"
    "d.BlobScenery\022!\n\007carrier\030\033 \001(\0132\020.Cmd.Blo"
    "bCarrier\022\021\n\tlastmapid\030\034 \001(\r\022\020\n\010shownpcs\030"
    "\035 \003(\r\022\020\n\010mapareas\030\036 \003(\r\022\035\n\005hands\030\037 \001(\0132\016"
    ".Cmd.BlobHands\022\037\n\010usershow\030  \001(\0132\r.Cmd.B"
    "lobShow\022\025\n\rlastrealmapid\030! \001(\r\022\035\n\005trace\030"
    "\" \001(\0132\016.Cmd.BlobTrace\022\037\n\006option\030# \001(\0132\017."
    "Cmd.BlobOption\022-\n\013firstaction\030$ \001(\0132\030.Cm"
    "d.BlobFirstActionDone\022\035\n\005title\030% \001(\0132\016.C"
    "md.BlobTitle\022\034\n\005lines\030& \001(\0132\r.Cmd.BlobLi"
    "ne\022\033\n\004dojo\030\' \001(\0132\r.Cmd.BlobDojo\022\024\n\014patch"
    "version\030( \003(\r\022\033\n\004food\030) \001(\0132\r.Cmd.BlobFo"
    "od\"\311\001\n\025DelPatchCharRecordCmd\022/\n\003cmd\030\001 \001("
    "\0162\014.Cmd.Command:\024RECORD_DATA_PROTOCMD\022;\n"
    "\005param\030\002 \001(\0162\020.Cmd.RecordParam:\032RECORDPA"
    "RAM_DEL_PATCH_CHAR\022\021\n\006charid\030\003 \001(\004:\0010\022/\n"
    "\004type\030\004 \001(\0162\017.Cmd.EPatchType:\020EPATCHTYPE"
    "_QUEST\",\n\014BlobChatItem\022\034\n\005items\030\001 \003(\0132\r."
    "Cmd.ChatItem\"\303\001\n\021ChatSaveRecordCmd\022/\n\003cm"
    "d\030\001 \001(\0162\014.Cmd.Command:\024RECORD_DATA_PROTO"
    "CMD\0226\n\005param\030\002 \001(\0162\020.Cmd.RecordParam:\025RE"
    "CORDPARAM_CHAT_SAVE\022\021\n\006charid\030\003 \001(\004:\0010\022\023"
    "\n\010portrait\030\004 \001(\r:\0010\022\017\n\004time\030\005 \001(\r:\0010\022\014\n\004"
    "data\030\006 \001(\014\"\226\002\n\022QueryChatRecordCmd\022/\n\003cmd"
    "\030\001 \001(\0162\014.Cmd.Command:\024RECORD_DATA_PROTOC"
    "MD\0227\n\005param\030\002 \001(\0162\020.Cmd.RecordParam:\026REC"
    "ORDPARAM_CHAT_QUERY\022\021\n\006charid\030\003 \001(\004:\0010\022\023"
    "\n\010targetid\030\004 \001(\004:\0010\022\020\n\005start\030\005 \001(\r:\0010\022\016\n"
    "\003end\030\006 \001(\r:\0010\022\023\n\010selfport\030\007 \001(\r:\0010\022\025\n\nta"
    "rgetport\030\010 \001(\r:\0010\022\021\n\tscenename\030\t \001(\t\022\r\n\005"
    "datas\030\n \003(\014\"\223\002\n\030UserRenameQueryRecordCmd"
    "\022/\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\024RECORD_DATA"
    "_PROTOCMD\022>\n\005param\030\002 \001(\0162\020.Cmd.RecordPar"
    "am:\035RECORDPARAM_USER_RENAME_QUERY\022\016\n\006cha"
    "rid\030\003 \001(\004\022\r\n\005accid\030\004 \001(\004\022\017\n\007oldname\030\005 \001("
    "\t\022\017\n\007newname\030\006 \001(\t\022\021\n\tscenename\030\007 \001(\t\0222\n"
    "\004code\030\010 \001(\0162\023.Cmd.ERenameErrCode:\017ERENAM"
    "E_SUCCESS\"\346\001\n\031UserRenameResultRecordCmd\022"
    "/\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\024RECORD_DATA_"
    "PROTOCMD\022\?\n\005param\030\002 \001(\0162\020.Cmd.RecordPara"
    "m:\036RECORDPARAM_USER_RENAME_RESULT\022\016\n\006cha"
    "rid\030\003 \001(\004\022\r\n\005accid\030\004 \001(\004\022\017\n\007newname\030\005 \001("
    "\t\022\017\n\007oldname\030\006 \001(\t\022\026\n\007success\030\007 \001(\010:\005fal"
    "se\"\342\001\n\026LotteryResultRecordCmd\022/\n\003cmd\030\001 \001"
    "(\0162\014.Cmd.Command:\024RECORD_DATA_PROTOCMD\022;"
    "\n\005param\030\002 \001(\0162\020.Cmd.RecordParam:\032RECORDP"
    "ARAM_LOTTERY_RESULT\022\016\n\006charid\030\003 \001(\004\022\016\n\006i"
    "temid\030\004 \001(\004\022\014\n\004name\030\005 \001(\t\022\020\n\010itemname\030\006 "
    "\001(\t\022\014\n\004type\030\007 \001(\r\022\014\n\004rate\030\010 \001(\r\"(\n\nBlobB"
    "attle\022\032\n\017totalbattletime\030\001 \001(\r:\0010\"\'\n\nBlo"
    "bSeeNpc\022\013\n\003see\030\001 \003(\r\022\014\n\004hide\030\002 \003(\r\"_\n\014Bl"
    "obSettings\022\023\n\010transmap\030\001 \001(\r:\0010\022\022\n\007trans"
    "_x\030\002 \001(\002:\0010\022\022\n\007trans_y\030\003 \001(\002:\0010\022\022\n\007trans"
    "_z\030\004 \001(\002:\0010\"*\n\tBlobPhoto\022\035\n\005items\030\001 \003(\0132"
    "\016.Cmd.PhotoItem\"Z\n\013BlobUserPet\022\036\n\004data\030\001"
    " \003(\0132\020.Cmd.UserPetData\022+\n\nunlockinfo\030\002 \001"
    "(\0132\027.Cmd.PetEquipUnlockInfo\"Y\n\rBlobUserB"
    "eing\022 \n\004data\030\001 \003(\0132\022.Cmd.UserBeingData\022\022"
    "\n\ncurbeingid\030\002 \001(\r\022\022\n\nskillpoint\030\003 \001(\r\"Z"
    "\n\013BlobJoyData\0226\n\005etype\030\001 \001(\0162\025.Cmd.EJoyA"
    "ctivityType:\020JOY_ACTIVITY_MIN\022\023\n\010joyvalu"
    "e\030\002 \001(\r:\0010\"/\n\017LotteryPoolData\022\016\n\006poolid\030"
    "\001 \001(\r\022\014\n\004coin\030\002 \001(\r\"S\n\013BlobLottery\022\r\n\005it"
    "ems\030\001 \003(\r\022#\n\005pools\030\002 \003(\0132\024.Cmd.LotteryPo"
    "olData\022\020\n\010pooltime\030\003 \001(\r\"\337\001\n\013BlobServant"
    "\022\024\n\tservantid\030\001 \001(\r:\0010\022\'\n\007recitem\030\002 \003(\0132"
    "\026.Cmd.RecommendItemInfo\022\022\n\nownservant\030\003 "
    "\003(\r\022\'\n\ngrowthitem\030\004 \003(\0132\023.Cmd.GrowthItem"
    "Info\022)\n\013growthvalue\030\005 \003(\0132\024.Cmd.GrowthVa"
    "lueInfo\022)\n\rgrowthcurinfo\030\006 \003(\0132\022.Cmd.Gro"
    "wthCurInfo\"\277\005\n\016ProfessionData\022\n\n\002id\030\001 \001("
    "\r\022\022\n\nprofession\030\002 \001(\r\022\r\n\005joblv\030\003 \001(\r\022\016\n\006"
    "jobexp\030\004 \001(\r\0224\n\004type\030\005 \001(\0162\031.Cmd.EProfre"
    "ssionDataType:\013ETypeBranch\022\022\n\nrecordname"
    "\030\006 \001(\t\022\022\n\nrecordtime\030\007 \001(\r\022\016\n\006charid\030\010 \001"
    "(\004\022\020\n\010charname\030\t \001(\t\022\022\n\npro_branch\030\n \001(\r"
    "\022*\n\016astrolabe_data\030\013 \001(\0132\022.Cmd.BlobAstro"
    "labe\022%\n\tpack_data\030\014 \003(\0132\022.Cmd.EquipPackD"
    "ata\022$\n\trole_data\030\r \001(\0132\021.Cmd.UserRoleDat"
    "a\022&\n\nbeing_data\030\016 \001(\0132\022.Cmd.BlobUserBein"
    "g\022 \n\tattr_data\030\017 \001(\0132\r.Cmd.BlobAttr\022#\n\013n"
    "ovice_data\030\020 \001(\0132\016.Cmd.SkillData\022\"\n\014part"
    "ner_data\030\021 \001(\0132\014.Cmd.BlobPet\022\025\n\007isfirst\030"
    "\022 \001(\010:\004true\022&\n\017appearance_data\030\023 \003(\0132\r.C"
    "md.UserData\022(\n\010skillpos\030\024 \001(\0132\026.Cmd.Skil"
    "lValidPosData\022\020\n\010opertime\030\025 \001(\r\022$\n\010short"
    "cut\030\026 \001(\0132\022.Cmd.SkillValidPos\022-\n\016exchang"
    "e_items\030\027 \003(\0132\025.Cmd.ExchangeShopItem\"m\n\021"
    "ProfessionSvrData\022\r\n\002id\030\001 \001(\r:\0010\022\027\n\014bepr"
    "o_1_time\030\002 \001(\r:\0010\022\027\n\014bepro_2_time\030\003 \001(\r:"
    "\0010\022\027\n\014bepro_3_time\030\004 \001(\r:\0010\"z\n\016BlobProfe"
    "ssion\022\"\n\005datas\030\001 \003(\0132\023.Cmd.ProfessionDat"
    "a\022)\n\tsvr_datas\030\003 \003(\0132\026.Cmd.ProfessionSvr"
    "Data\022\031\n\016last_load_time\030\002 \001(\r:\0010\"\347\001\n\016Blob"
    "RecordInfo\022\020\n\010buytimes\030\001 \001(\r\022\026\n\016last_loa"
    "d_time\030\002 \001(\r\022$\n\007records\030\003 \003(\0132\023.Cmd.Prof"
    "essionData\022\023\n\013dest_charid\030\004 \001(\r\022\020\n\010dest_"
    "map\030\005 \001(\r\022\023\n\013dest_slotid\030\006 \001(\r\022\027\n\017card_e"
    "xpiretime\030\007 \001(\r\0220\n\013astrol_data\030\010 \003(\0132\033.C"
    "md.UserAstrolMaterialData\"7\n\022UserProfess"
    "ionData\022\022\n\nprofession\030\001 \001(\r\022\r\n\005joblv\030\002 \001"
    "(\r\"\337\001\n\024ReqUserProfessionCmd\022/\n\003cmd\030\001 \001(\016"
    "2\014.Cmd.Command:\024RECORD_DATA_PROTOCMD\022<\n\005"
    "param\030\002 \001(\0162\020.Cmd.RecordParam:\033RECORDPAR"
    "AM_USER_PROFESSION\022\016\n\006charid\030\003 \001(\004\022\r\n\005ac"
    "cid\030\004 \001(\004\022\021\n\tscenename\030\005 \001(\t\022&\n\005datas\030\006 "
    "\003(\0132\027.Cmd.UserProfessionData\"\274\001\n\027Profess"
    "ionSaveRecordCmd\022/\n\003cmd\030\001 \001(\0162\014.Cmd.Comm"
    "and:\024RECORD_DATA_PROTOCMD\022<\n\005param\030\002 \001(\016"
    "2\020.Cmd.RecordParam:\033RECORDPARAM_PROFESSI"
    "ON_SAVE\022\021\n\006charid\030\003 \001(\004:\0010\022\021\n\006branch\030\004 \001"
    "(\r:\0010\022\014\n\004data\030\005 \001(\014\"\277\001\n\030ProfessionQueryR"
    "ecordCmd\022/\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\024REC"
    "ORD_DATA_PROTOCMD\022=\n\005param\030\002 \001(\0162\020.Cmd.R"
    "ecordParam:\034RECORDPARAM_PROFESSION_QUERY"
    "\022\021\n\006charid\030\003 \001(\004:\0010\022\021\n\tscenename\030\004 \001(\t\022\r"
    "\n\005datas\030\005 \003(\014\"Y\n\021ActivityQuestItem\022\022\n\007qu"
    "estid\030\001 \001(\r:\0010\022\026\n\013finishcount\030\002 \001(\r:\0010\022\030"
    "\n\rlastquesttime\030\003 \001(\r:\0010\"B\n\021BlobActivity"
    "Quest\022-\n\ractivityitems\030\001 \003(\0132\026.Cmd.Activ"
    "ityQuestItem\"\032\n\tBlobBooth\022\r\n\005score\030\001 \001(\r"
    "\"@\n\022BlobElementElfData\022\026\n\016cur_element_id"
    "\030\001 \001(\r\022\022\n\nclear_time\030\002 \001(\r\"\313\001\n\021CheatTagR"
    "ecordCmd\022/\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\024REC"
    "ORD_DATA_PROTOCMD\0226\n\005param\030\002 \001(\0162\020.Cmd.R"
    "ecordParam:\025RECORDPARAM_CHEAT_TAG\022\021\n\006cha"
    "rid\030\003 \001(\004:\0010\022\026\n\013mininterval\030\004 \001(\r:\0010\022\020\n\005"
    "frame\030\005 \001(\r:\0010\022\020\n\005count\030\006 \001(\r:\0010\"\255\001\n\026Che"
    "atTagQueryRecordCmd\022/\n\003cmd\030\001 \001(\0162\014.Cmd.C"
    "ommand:\024RECORD_DATA_PROTOCMD\022<\n\005param\030\002 "
    "\001(\0162\020.Cmd.RecordParam:\033RECORDPARAM_CHEAT"
    "_TAG_QUERY\022\021\n\006charid\030\003 \001(\004:\0010\022\021\n\tscenena"
    "me\030\004 \001(\t*\334\005\n\013RecordParam\022\033\n\027RECORDPARAM_"
    "NOTIFYLOGIN\020\001\022\030\n\024RECORDPARAM_USERDATA\020\002\022"
    "\036\n\032RECORDPARAM_ERROR_USERDATA\020\003\022\032\n\026RECOR"
    "DPARAM_MUSIC_DATA\020\006\022\027\n\023RECORDPARAM_LOADL"
    "UA\020\007\022\031\n\025RECORDPARAM_STORE_PUT\020\010\022\031\n\025RECOR"
    "DPARAM_STORE_OFF\020\t\022 \n\034RECORDPARAM_STORE_"
    "ITEMMODIFY\020\n\022\036\n\032RECORDPARAM_DEL_PATCH_CH"
    "AR\020\013\022\031\n\025RECORDPARAM_CHAT_SAVE\020\014\022\032\n\026RECOR"
    "DPARAM_CHAT_QUERY\020\r\022 \n\034RECORDPARAM_AUTHO"
    "RIZE_CHANGE\020\016\022!\n\035RECORDPARAM_GUILD_MUSIC"
    "_QUERY\020\017\022\"\n\036RECORDPARAM_GUILD_MUSIC_UPDA"
    "TE\020\020\022\"\n\036RECORDPARAM_GUILD_MUSIC_DELETE\020\021"
    "\022!\n\035RECORDPARAM_USER_RENAME_QUERY\020\022\022\"\n\036R"
    "ECORDPARAM_USER_RENAME_RESULT\020\023\022\036\n\032RECOR"
    "DPARAM_LOTTERY_RESULT\020\024\022\037\n\033RECORDPARAM_U"
    "SER_PROFESSION\020\025\022\037\n\033RECORDPARAM_PROFESSI"
    "ON_SAVE\020\026\022 \n\034RECORDPARAM_PROFESSION_QUER"
    "Y\020\027\022\031\n\025RECORDPARAM_CHEAT_TAG\020\030\022\037\n\033RECORD"
    "PARAM_CHEAT_TAG_QUERY\020\031*G\n\013ETicketType\022\033"
    "\n\027ETicketType_AddGiveItem\020\001\022\033\n\027ETicketTy"
    "pe_AuctionTake\020\002*B\n\nETicketRet\022\017\n\013ETickR"
    "et_No\020\000\022\017\n\013ETickRet_Ok\020\001\022\022\n\016ETickRet_Err"
    "or\020\002*,\n\016ETicketCmdType\022\032\n\026ETicketCmdType"
    "_Auction\020\001*\220\n\n\016EShareDataType\022\026\n\022ESHARED"
    "ATATYPE_MIN\020\000\022\037\n\033ESHAREDATATYPE_S_BATTLE"
    "TIME\020\001\022 \n\034ESHAREDATATYPE_S_KILLMONSTER\020\002"
    "\022\035\n\031ESHAREDATATYPE_S_MVPCOUNT\020\003\022\036\n\032ESHAR"
    "EDATATYPE_S_MINICOUNT\020\004\022\034\n\030ESHAREDATATYP"
    "E_S_MOVEDIS\020\005\022\037\n\033ESHAREDATATYPE_S_PHOTOC"
    "OUNT\020\006\022 \n\034ESHAREDATATYPE_N_FRIENDCOUNT\020\007"
    "\022\036\n\032ESHAREDATATYPE_S_TRADECOST\020\010\022\036\n\032ESHA"
    "REDATATYPE_S_TRADEGAIN\020\t\022 \n\034ESHAREDATATY"
    "PE_S_REFINECOUNT\020\n\022\"\n\036ESHAREDATATYPE_S_R"
    "EFINESUCCESS\020\013\022!\n\035ESHAREDATATYPE_S_REFIN"
    "EDAMAGE\020\014\022!\n\035ESHAREDATATYPE_S_ENCHANTCOU"
    "NT\020\r\022 \n\034ESHAREDATATYPE_S_ENCHANTCOST\020\016\022\033"
    "\n\027ESHAREDATATYPE_S_HUEDIE\020\017\022\035\n\031ESHAREDAT"
    "ATYPE_S_CANGYING\020\020\022\034\n\030ESHAREDATATYPE_MAX"
    "_TOWER\020\021\022#\n\037ESHAREDATATYPE_MOST_KILLMONS"
    "TER\020\022\022 \n\034ESHAREDATATYPE_MOST_DROPITEM\020\023\022"
    "\034\n\030ESHAREDATATYPE_MOST_TEAM\020\024\022\034\n\030ESHARED"
    "ATATYPE_MOST_HAND\020\025\022\034\n\030ESHAREDATATYPE_MO"
    "ST_SAVE\020\026\022\037\n\033ESHAREDATATYPE_MOST_BESAVED"
    "\020\027\022\035\n\031ESHAREDATATYPE_MOST_WHELL\020\030\022\034\n\030ESH"
    "AREDATATYPE_MOST_CHAT\020\031\022 \n\034ESHAREDATATYP"
    "E_MOST_TEAMTIME\020\032\022 \n\034ESHAREDATATYPE_MOST"
    "_HANDTIME\020\033\022\037\n\033ESHAREDATATYPE_S_LOGINCOU"
    "NT\020\034\022\"\n\036ESHAREDATATYPE_S_BE_PRO_1_TIME\020\035"
    "\022\"\n\036ESHAREDATATYPE_S_BE_PRO_2_TIME\020\036\022\"\n\036"
    "ESHAREDATATYPE_S_BE_PRO_3_TIME\020\037\022\037\n\033ESHA"
    "REDATATYPE_MOST_MUSICCD\020 \022&\n\"ESHAREDATAT"
    "YPE_MOST_HAND_TIMECOUNT\020!\022\"\n\036ESHAREDATAT"
    "YPE_MOST_EXPRESSION\020\"\022\"\n\036ESHAREDATATYPE_"
    "MOST_BARRAGEMSG\020#\022\037\n\033ESHAREDATATYPE_MOST"
    "_CARRIER\020$\022!\n\035ESHAREDATATYPE_MOST_HANDMU"
    "SIC\020%\022\026\n\022ESHAREDATATYPE_MAX\020&*\"\n\nEPatchT"
    "ype\022\024\n\020EPATCHTYPE_QUEST\020\001", 30185);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RecordCmd.proto", &protobuf_RegisterTypes);
  NotifyLoginRecordCmd::default_instance_ = new NotifyLoginRecordCmd();
  RecordUserData::default_instance_ = new RecordUserData();
  RedisUserData::default_instance_ = new RedisUserData();
  UserDataRecordCmd::default_instance_ = new UserDataRecordCmd();
  ErrUserCharBaseRecordCmd::default_instance_ = new ErrUserCharBaseRecordCmd();
  MusicUpdateCmd::default_instance_ = new MusicUpdateCmd();
  LoadLuaSceneRecordCmd::default_instance_ = new LoadLuaSceneRecordCmd();
  ItemModifyRecordCmd::default_instance_ = new ItemModifyRecordCmd();
  ChangeAuthorizeRecordCmd::default_instance_ = new ChangeAuthorizeRecordCmd();
  GuildMusicQueryRecordCmd::default_instance_ = new GuildMusicQueryRecordCmd();
  GuildMusicUpdateCmd::default_instance_ = new GuildMusicUpdateCmd();
  GuildMusicDeleteRecordCmd::default_instance_ = new GuildMusicDeleteRecordCmd();
  UserBaseData::default_instance_ = new UserBaseData();
  BlobData::default_instance_ = new BlobData();
  UserAccData::default_instance_ = new UserAccData();
  BlobAccData::default_instance_ = new BlobAccData();
  BlobAccUser::default_instance_ = new BlobAccUser();
  BlobUnsolvedPhoto::default_instance_ = new BlobUnsolvedPhoto();
  BlobBoss::default_instance_ = new BlobBoss();
  BlobUser::default_instance_ = new BlobUser();
  SkillReplaceInfo::default_instance_ = new SkillReplaceInfo();
  SkillShortcutDB::default_instance_ = new SkillShortcutDB();
  UserSkillData::default_instance_ = new UserSkillData();
  BlobShareSkill::default_instance_ = new BlobShareSkill();
  UserRoleData::default_instance_ = new UserRoleData();
  BlobFighter::default_instance_ = new BlobFighter();
  StageStepNormalBlob::default_instance_ = new StageStepNormalBlob();
  StageStepHardBlob::default_instance_ = new StageStepHardBlob();
  StageBlobItem::default_instance_ = new StageBlobItem();
  BlobStage::default_instance_ = new BlobStage();
  QuestNpcData::default_instance_ = new QuestNpcData();
  BlobQuestNpc::default_instance_ = new BlobQuestNpc();
  BufferStateBlob::default_instance_ = new BufferStateBlob();
  BlobBuffer::default_instance_ = new BlobBuffer();
  BlobPortrait::default_instance_ = new BlobPortrait();
  BlobHair::default_instance_ = new BlobHair();
  BlobGearItem::default_instance_ = new BlobGearItem();
  BlobGears::default_instance_ = new BlobGears();
  BlobTipItem::default_instance_ = new BlobTipItem();
  BlobTips::default_instance_ = new BlobTips();
  FollowerItem::default_instance_ = new FollowerItem();
  BlobFollower::default_instance_ = new BlobFollower();
  BlobCDTime::default_instance_ = new BlobCDTime();
  BlobShortcut::default_instance_ = new BlobShortcut();
  BlobGMEffectItem::default_instance_ = new BlobGMEffectItem();
  BlobGMEffects::default_instance_ = new BlobGMEffects();
  BlobFreyja::default_instance_ = new BlobFreyja();
  BlobTransfer::default_instance_ = new BlobTransfer();
  BlobLaboratory::default_instance_ = new BlobLaboratory();
  SceneryItem::default_instance_ = new SceneryItem();
  SceneryMapItem::default_instance_ = new SceneryMapItem();
  BlobScenery::default_instance_ = new BlobScenery();
  BlobCarrier::default_instance_ = new BlobCarrier();
  BlobMenu::default_instance_ = new BlobMenu();
  BlobShopGotItem::default_instance_ = new BlobShopGotItem();
  BlobExchangeShop::default_instance_ = new BlobExchangeShop();
  BlobKnownMaps::default_instance_ = new BlobKnownMaps();
  BlobInter::default_instance_ = new BlobInter();
  BlobHands::default_instance_ = new BlobHands();
  BlobShow::default_instance_ = new BlobShow();
  BlobTrace::default_instance_ = new BlobTrace();
  BlobOption::default_instance_ = new BlobOption();
  BlobDojo::default_instance_ = new BlobDojo();
  FoodItemInfo::default_instance_ = new FoodItemInfo();
  FoodLimitInfo::default_instance_ = new FoodLimitInfo();
  BlobFood::default_instance_ = new BlobFood();
  BlobHighRefine::default_instance_ = new BlobHighRefine();
  PackageData::default_instance_ = new PackageData();
  ItemUseCount::default_instance_ = new ItemUseCount();
  ItemGetCount::default_instance_ = new ItemGetCount();
  RewardSafetyItem::default_instance_ = new RewardSafetyItem();
  BlobPack::default_instance_ = new BlobPack();
  MapQuest::default_instance_ = new MapQuest();
  BlobQuestPuzzle::default_instance_ = new BlobQuestPuzzle();
  BlobQuest::default_instance_ = new BlobQuest();
  BlobTitle::default_instance_ = new BlobTitle();
  BlobLineData::default_instance_ = new BlobLineData();
  BlobLine::default_instance_ = new BlobLine();
  BlobSpEffect::default_instance_ = new BlobSpEffect();
  BlobHandNpc::default_instance_ = new BlobHandNpc();
  BlobPet::default_instance_ = new BlobPet();
  BlobWeaponPet::default_instance_ = new BlobWeaponPet();
  BlobVar::default_instance_ = new BlobVar();
  BlobAccVar::default_instance_ = new BlobAccVar();
  SkillDamage::default_instance_ = new SkillDamage();
  StatKillMonster::default_instance_ = new StatKillMonster();
  BlobStatVar::default_instance_ = new BlobStatVar();
  BlobChatMsg::default_instance_ = new BlobChatMsg();
  BlobUserTower::default_instance_ = new BlobUserTower();
  BlobSeal::default_instance_ = new BlobSeal();
  BlobManual::default_instance_ = new BlobManual();
  BlobFirstActionDone::default_instance_ = new BlobFirstActionDone();
  BlobAttr::default_instance_ = new BlobAttr();
  MonsterNum::default_instance_ = new MonsterNum();
  BlobCamera::default_instance_ = new BlobCamera();
  RaidZone::default_instance_ = new RaidZone();
  BlobZone::default_instance_ = new BlobZone();
  BlobGuild::default_instance_ = new BlobGuild();
  BlobTeam::default_instance_ = new BlobTeam();
  BlobUserZone::default_instance_ = new BlobUserZone();
  BlobAccQuest::default_instance_ = new BlobAccQuest();
  BlobGlobalTower::default_instance_ = new BlobGlobalTower();
  GlobalSocialFocus::default_instance_ = new GlobalSocialFocus();
  BlobGlobalSociality::default_instance_ = new BlobGlobalSociality();
  ChargeData::default_instance_ = new ChargeData();
  BlobDeposit::default_instance_ = new BlobDeposit();
  BlobTicketData::default_instance_ = new BlobTicketData();
  BlobTicketCacheCmd::default_instance_ = new BlobTicketCacheCmd();
  BlobTicket::default_instance_ = new BlobTicket();
  BlobCredit::default_instance_ = new BlobCredit();
  BlobNewCredit::default_instance_ = new BlobNewCredit();
  ChatCount::default_instance_ = new ChatCount();
  ChatItem::default_instance_ = new ChatItem();
  BlobChat::default_instance_ = new BlobChat();
  ActivityCommonData::default_instance_ = new ActivityCommonData();
  BlobActivity::default_instance_ = new BlobActivity();
  BlobRelation::default_instance_ = new BlobRelation();
  ShareNormal::default_instance_ = new ShareNormal();
  ShareCalcItem::default_instance_ = new ShareCalcItem();
  ShareCalc::default_instance_ = new ShareCalc();
  ShareFirstMvp::default_instance_ = new ShareFirstMvp();
  ShareFirstHand::default_instance_ = new ShareFirstHand();
  ShareFirstCarrier::default_instance_ = new ShareFirstCarrier();
  ShareTrade::default_instance_ = new ShareTrade();
  ShareDamage::default_instance_ = new ShareDamage();
  BlobShare::default_instance_ = new BlobShare();
  AchieveDBItem::default_instance_ = new AchieveDBItem();
  BlobAchieve::default_instance_ = new BlobAchieve();
  BlobAuthorize::default_instance_ = new BlobAuthorize();
  GuildRaid::default_instance_ = new GuildRaid();
  BlobGuildRaid::default_instance_ = new BlobGuildRaid();
  AstrolabeStarData::default_instance_ = new AstrolabeStarData();
  AstrolabeData::default_instance_ = new AstrolabeData();
  AstrolabeMainData::default_instance_ = new AstrolabeMainData();
  BlobAstrolabe::default_instance_ = new BlobAstrolabe();
  PetAdventureDBItem::default_instance_ = new PetAdventureDBItem();
  BlobPetAdventure::default_instance_ = new BlobPetAdventure();
  BlobPetWork::default_instance_ = new BlobPetWork();
  BlobEye::default_instance_ = new BlobEye();
  BlobTutorTask::default_instance_ = new BlobTutorTask();
  BlobActivityEvent::default_instance_ = new BlobActivityEvent();
  BlobGuildChallenge::default_instance_ = new BlobGuildChallenge();
  BlobGvgData::default_instance_ = new BlobGvgData();
  BlobUserData::default_instance_ = new BlobUserData();
  DelPatchCharRecordCmd::default_instance_ = new DelPatchCharRecordCmd();
  BlobChatItem::default_instance_ = new BlobChatItem();
  ChatSaveRecordCmd::default_instance_ = new ChatSaveRecordCmd();
  QueryChatRecordCmd::default_instance_ = new QueryChatRecordCmd();
  UserRenameQueryRecordCmd::default_instance_ = new UserRenameQueryRecordCmd();
  UserRenameResultRecordCmd::default_instance_ = new UserRenameResultRecordCmd();
  LotteryResultRecordCmd::default_instance_ = new LotteryResultRecordCmd();
  BlobBattle::default_instance_ = new BlobBattle();
  BlobSeeNpc::default_instance_ = new BlobSeeNpc();
  BlobSettings::default_instance_ = new BlobSettings();
  BlobPhoto::default_instance_ = new BlobPhoto();
  BlobUserPet::default_instance_ = new BlobUserPet();
  BlobUserBeing::default_instance_ = new BlobUserBeing();
  BlobJoyData::default_instance_ = new BlobJoyData();
  LotteryPoolData::default_instance_ = new LotteryPoolData();
  BlobLottery::default_instance_ = new BlobLottery();
  BlobServant::default_instance_ = new BlobServant();
  ProfessionData::default_instance_ = new ProfessionData();
  ProfessionSvrData::default_instance_ = new ProfessionSvrData();
  BlobProfession::default_instance_ = new BlobProfession();
  BlobRecordInfo::default_instance_ = new BlobRecordInfo();
  UserProfessionData::default_instance_ = new UserProfessionData();
  ReqUserProfessionCmd::default_instance_ = new ReqUserProfessionCmd();
  ProfessionSaveRecordCmd::default_instance_ = new ProfessionSaveRecordCmd();
  ProfessionQueryRecordCmd::default_instance_ = new ProfessionQueryRecordCmd();
  ActivityQuestItem::default_instance_ = new ActivityQuestItem();
  BlobActivityQuest::default_instance_ = new BlobActivityQuest();
  BlobBooth::default_instance_ = new BlobBooth();
  BlobElementElfData::default_instance_ = new BlobElementElfData();
  CheatTagRecordCmd::default_instance_ = new CheatTagRecordCmd();
  CheatTagQueryRecordCmd::default_instance_ = new CheatTagQueryRecordCmd();
  NotifyLoginRecordCmd::default_instance_->InitAsDefaultInstance();
  RecordUserData::default_instance_->InitAsDefaultInstance();
  RedisUserData::default_instance_->InitAsDefaultInstance();
  UserDataRecordCmd::default_instance_->InitAsDefaultInstance();
  ErrUserCharBaseRecordCmd::default_instance_->InitAsDefaultInstance();
  MusicUpdateCmd::default_instance_->InitAsDefaultInstance();
  LoadLuaSceneRecordCmd::default_instance_->InitAsDefaultInstance();
  ItemModifyRecordCmd::default_instance_->InitAsDefaultInstance();
  ChangeAuthorizeRecordCmd::default_instance_->InitAsDefaultInstance();
  GuildMusicQueryRecordCmd::default_instance_->InitAsDefaultInstance();
  GuildMusicUpdateCmd::default_instance_->InitAsDefaultInstance();
  GuildMusicDeleteRecordCmd::default_instance_->InitAsDefaultInstance();
  UserBaseData::default_instance_->InitAsDefaultInstance();
  BlobData::default_instance_->InitAsDefaultInstance();
  UserAccData::default_instance_->InitAsDefaultInstance();
  BlobAccData::default_instance_->InitAsDefaultInstance();
  BlobAccUser::default_instance_->InitAsDefaultInstance();
  BlobUnsolvedPhoto::default_instance_->InitAsDefaultInstance();
  BlobBoss::default_instance_->InitAsDefaultInstance();
  BlobUser::default_instance_->InitAsDefaultInstance();
  SkillReplaceInfo::default_instance_->InitAsDefaultInstance();
  SkillShortcutDB::default_instance_->InitAsDefaultInstance();
  UserSkillData::default_instance_->InitAsDefaultInstance();
  BlobShareSkill::default_instance_->InitAsDefaultInstance();
  UserRoleData::default_instance_->InitAsDefaultInstance();
  BlobFighter::default_instance_->InitAsDefaultInstance();
  StageStepNormalBlob::default_instance_->InitAsDefaultInstance();
  StageStepHardBlob::default_instance_->InitAsDefaultInstance();
  StageBlobItem::default_instance_->InitAsDefaultInstance();
  BlobStage::default_instance_->InitAsDefaultInstance();
  QuestNpcData::default_instance_->InitAsDefaultInstance();
  BlobQuestNpc::default_instance_->InitAsDefaultInstance();
  BufferStateBlob::default_instance_->InitAsDefaultInstance();
  BlobBuffer::default_instance_->InitAsDefaultInstance();
  BlobPortrait::default_instance_->InitAsDefaultInstance();
  BlobHair::default_instance_->InitAsDefaultInstance();
  BlobGearItem::default_instance_->InitAsDefaultInstance();
  BlobGears::default_instance_->InitAsDefaultInstance();
  BlobTipItem::default_instance_->InitAsDefaultInstance();
  BlobTips::default_instance_->InitAsDefaultInstance();
  FollowerItem::default_instance_->InitAsDefaultInstance();
  BlobFollower::default_instance_->InitAsDefaultInstance();
  BlobCDTime::default_instance_->InitAsDefaultInstance();
  BlobShortcut::default_instance_->InitAsDefaultInstance();
  BlobGMEffectItem::default_instance_->InitAsDefaultInstance();
  BlobGMEffects::default_instance_->InitAsDefaultInstance();
  BlobFreyja::default_instance_->InitAsDefaultInstance();
  BlobTransfer::default_instance_->InitAsDefaultInstance();
  BlobLaboratory::default_instance_->InitAsDefaultInstance();
  SceneryItem::default_instance_->InitAsDefaultInstance();
  SceneryMapItem::default_instance_->InitAsDefaultInstance();
  BlobScenery::default_instance_->InitAsDefaultInstance();
  BlobCarrier::default_instance_->InitAsDefaultInstance();
  BlobMenu::default_instance_->InitAsDefaultInstance();
  BlobShopGotItem::default_instance_->InitAsDefaultInstance();
  BlobExchangeShop::default_instance_->InitAsDefaultInstance();
  BlobKnownMaps::default_instance_->InitAsDefaultInstance();
  BlobInter::default_instance_->InitAsDefaultInstance();
  BlobHands::default_instance_->InitAsDefaultInstance();
  BlobShow::default_instance_->InitAsDefaultInstance();
  BlobTrace::default_instance_->InitAsDefaultInstance();
  BlobOption::default_instance_->InitAsDefaultInstance();
  BlobDojo::default_instance_->InitAsDefaultInstance();
  FoodItemInfo::default_instance_->InitAsDefaultInstance();
  FoodLimitInfo::default_instance_->InitAsDefaultInstance();
  BlobFood::default_instance_->InitAsDefaultInstance();
  BlobHighRefine::default_instance_->InitAsDefaultInstance();
  PackageData::default_instance_->InitAsDefaultInstance();
  ItemUseCount::default_instance_->InitAsDefaultInstance();
  ItemGetCount::default_instance_->InitAsDefaultInstance();
  RewardSafetyItem::default_instance_->InitAsDefaultInstance();
  BlobPack::default_instance_->InitAsDefaultInstance();
  MapQuest::default_instance_->InitAsDefaultInstance();
  BlobQuestPuzzle::default_instance_->InitAsDefaultInstance();
  BlobQuest::default_instance_->InitAsDefaultInstance();
  BlobTitle::default_instance_->InitAsDefaultInstance();
  BlobLineData::default_instance_->InitAsDefaultInstance();
  BlobLine::default_instance_->InitAsDefaultInstance();
  BlobSpEffect::default_instance_->InitAsDefaultInstance();
  BlobHandNpc::default_instance_->InitAsDefaultInstance();
  BlobPet::default_instance_->InitAsDefaultInstance();
  BlobWeaponPet::default_instance_->InitAsDefaultInstance();
  BlobVar::default_instance_->InitAsDefaultInstance();
  BlobAccVar::default_instance_->InitAsDefaultInstance();
  SkillDamage::default_instance_->InitAsDefaultInstance();
  StatKillMonster::default_instance_->InitAsDefaultInstance();
  BlobStatVar::default_instance_->InitAsDefaultInstance();
  BlobChatMsg::default_instance_->InitAsDefaultInstance();
  BlobUserTower::default_instance_->InitAsDefaultInstance();
  BlobSeal::default_instance_->InitAsDefaultInstance();
  BlobManual::default_instance_->InitAsDefaultInstance();
  BlobFirstActionDone::default_instance_->InitAsDefaultInstance();
  BlobAttr::default_instance_->InitAsDefaultInstance();
  MonsterNum::default_instance_->InitAsDefaultInstance();
  BlobCamera::default_instance_->InitAsDefaultInstance();
  RaidZone::default_instance_->InitAsDefaultInstance();
  BlobZone::default_instance_->InitAsDefaultInstance();
  BlobGuild::default_instance_->InitAsDefaultInstance();
  BlobTeam::default_instance_->InitAsDefaultInstance();
  BlobUserZone::default_instance_->InitAsDefaultInstance();
  BlobAccQuest::default_instance_->InitAsDefaultInstance();
  BlobGlobalTower::default_instance_->InitAsDefaultInstance();
  GlobalSocialFocus::default_instance_->InitAsDefaultInstance();
  BlobGlobalSociality::default_instance_->InitAsDefaultInstance();
  ChargeData::default_instance_->InitAsDefaultInstance();
  BlobDeposit::default_instance_->InitAsDefaultInstance();
  BlobTicketData::default_instance_->InitAsDefaultInstance();
  BlobTicketCacheCmd::default_instance_->InitAsDefaultInstance();
  BlobTicket::default_instance_->InitAsDefaultInstance();
  BlobCredit::default_instance_->InitAsDefaultInstance();
  BlobNewCredit::default_instance_->InitAsDefaultInstance();
  ChatCount::default_instance_->InitAsDefaultInstance();
  ChatItem::default_instance_->InitAsDefaultInstance();
  BlobChat::default_instance_->InitAsDefaultInstance();
  ActivityCommonData::default_instance_->InitAsDefaultInstance();
  BlobActivity::default_instance_->InitAsDefaultInstance();
  BlobRelation::default_instance_->InitAsDefaultInstance();
  ShareNormal::default_instance_->InitAsDefaultInstance();
  ShareCalcItem::default_instance_->InitAsDefaultInstance();
  ShareCalc::default_instance_->InitAsDefaultInstance();
  ShareFirstMvp::default_instance_->InitAsDefaultInstance();
  ShareFirstHand::default_instance_->InitAsDefaultInstance();
  ShareFirstCarrier::default_instance_->InitAsDefaultInstance();
  ShareTrade::default_instance_->InitAsDefaultInstance();
  ShareDamage::default_instance_->InitAsDefaultInstance();
  BlobShare::default_instance_->InitAsDefaultInstance();
  AchieveDBItem::default_instance_->InitAsDefaultInstance();
  BlobAchieve::default_instance_->InitAsDefaultInstance();
  BlobAuthorize::default_instance_->InitAsDefaultInstance();
  GuildRaid::default_instance_->InitAsDefaultInstance();
  BlobGuildRaid::default_instance_->InitAsDefaultInstance();
  AstrolabeStarData::default_instance_->InitAsDefaultInstance();
  AstrolabeData::default_instance_->InitAsDefaultInstance();
  AstrolabeMainData::default_instance_->InitAsDefaultInstance();
  BlobAstrolabe::default_instance_->InitAsDefaultInstance();
  PetAdventureDBItem::default_instance_->InitAsDefaultInstance();
  BlobPetAdventure::default_instance_->InitAsDefaultInstance();
  BlobPetWork::default_instance_->InitAsDefaultInstance();
  BlobEye::default_instance_->InitAsDefaultInstance();
  BlobTutorTask::default_instance_->InitAsDefaultInstance();
  BlobActivityEvent::default_instance_->InitAsDefaultInstance();
  BlobGuildChallenge::default_instance_->InitAsDefaultInstance();
  BlobGvgData::default_instance_->InitAsDefaultInstance();
  BlobUserData::default_instance_->InitAsDefaultInstance();
  DelPatchCharRecordCmd::default_instance_->InitAsDefaultInstance();
  BlobChatItem::default_instance_->InitAsDefaultInstance();
  ChatSaveRecordCmd::default_instance_->InitAsDefaultInstance();
  QueryChatRecordCmd::default_instance_->InitAsDefaultInstance();
  UserRenameQueryRecordCmd::default_instance_->InitAsDefaultInstance();
  UserRenameResultRecordCmd::default_instance_->InitAsDefaultInstance();
  LotteryResultRecordCmd::default_instance_->InitAsDefaultInstance();
  BlobBattle::default_instance_->InitAsDefaultInstance();
  BlobSeeNpc::default_instance_->InitAsDefaultInstance();
  BlobSettings::default_instance_->InitAsDefaultInstance();
  BlobPhoto::default_instance_->InitAsDefaultInstance();
  BlobUserPet::default_instance_->InitAsDefaultInstance();
  BlobUserBeing::default_instance_->InitAsDefaultInstance();
  BlobJoyData::default_instance_->InitAsDefaultInstance();
  LotteryPoolData::default_instance_->InitAsDefaultInstance();
  BlobLottery::default_instance_->InitAsDefaultInstance();
  BlobServant::default_instance_->InitAsDefaultInstance();
  ProfessionData::default_instance_->InitAsDefaultInstance();
  ProfessionSvrData::default_instance_->InitAsDefaultInstance();
  BlobProfession::default_instance_->InitAsDefaultInstance();
  BlobRecordInfo::default_instance_->InitAsDefaultInstance();
  UserProfessionData::default_instance_->InitAsDefaultInstance();
  ReqUserProfessionCmd::default_instance_->InitAsDefaultInstance();
  ProfessionSaveRecordCmd::default_instance_->InitAsDefaultInstance();
  ProfessionQueryRecordCmd::default_instance_->InitAsDefaultInstance();
  ActivityQuestItem::default_instance_->InitAsDefaultInstance();
  BlobActivityQuest::default_instance_->InitAsDefaultInstance();
  BlobBooth::default_instance_->InitAsDefaultInstance();
  BlobElementElfData::default_instance_->InitAsDefaultInstance();
  CheatTagRecordCmd::default_instance_->InitAsDefaultInstance();
  CheatTagQueryRecordCmd::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RecordCmd_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RecordCmd_2eproto {
  StaticDescriptorInitializer_RecordCmd_2eproto() {
    protobuf_AddDesc_RecordCmd_2eproto();
  }
} static_descriptor_initializer_RecordCmd_2eproto_;
const ::google::protobuf::EnumDescriptor* RecordParam_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecordParam_descriptor_;
}
bool RecordParam_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ETicketType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ETicketType_descriptor_;
}
bool ETicketType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ETicketRet_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ETicketRet_descriptor_;
}
bool ETicketRet_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ETicketCmdType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ETicketCmdType_descriptor_;
}
bool ETicketCmdType_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EShareDataType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EShareDataType_descriptor_;
}
bool EShareDataType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EPatchType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EPatchType_descriptor_;
}
bool EPatchType_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyLoginRecordCmd::kCmdFieldNumber;
const int NotifyLoginRecordCmd::kParamFieldNumber;
const int NotifyLoginRecordCmd::kIdFieldNumber;
const int NotifyLoginRecordCmd::kAccidFieldNumber;
const int NotifyLoginRecordCmd::kSceneNameFieldNumber;
#endif  // !_MSC_VER

NotifyLoginRecordCmd::NotifyLoginRecordCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.NotifyLoginRecordCmd)
}

void NotifyLoginRecordCmd::InitAsDefaultInstance() {
}

NotifyLoginRecordCmd::NotifyLoginRecordCmd(const NotifyLoginRecordCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.NotifyLoginRecordCmd)
}

void NotifyLoginRecordCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 200;
  param_ = 1;
  id_ = GOOGLE_ULONGLONG(0);
  accid_ = GOOGLE_ULONGLONG(0);
  scenename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyLoginRecordCmd::~NotifyLoginRecordCmd() {
  // @@protoc_insertion_point(destructor:Cmd.NotifyLoginRecordCmd)
  SharedDtor();
}

void NotifyLoginRecordCmd::SharedDtor() {
  if (scenename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete scenename_;
  }
  if (this != default_instance_) {
  }
}

void NotifyLoginRecordCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyLoginRecordCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyLoginRecordCmd_descriptor_;
}

const NotifyLoginRecordCmd& NotifyLoginRecordCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

NotifyLoginRecordCmd* NotifyLoginRecordCmd::default_instance_ = NULL;

NotifyLoginRecordCmd* NotifyLoginRecordCmd::New() const {
  return new NotifyLoginRecordCmd;
}

void NotifyLoginRecordCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NotifyLoginRecordCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(id_, accid_);
    cmd_ = 200;
    param_ = 1;
    if (has_scenename()) {
      if (scenename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        scenename_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyLoginRecordCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.NotifyLoginRecordCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_NOTIFYLOGIN];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::RecordParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::RecordParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional uint64 id = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_accid;
        break;
      }

      // optional uint64 accid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_accid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &accid_)));
          set_has_accid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_sceneName;
        break;
      }

      // optional string sceneName = 5;
      case 5: {
        if (tag == 42) {
         parse_sceneName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scenename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->scenename().data(), this->scenename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "scenename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.NotifyLoginRecordCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.NotifyLoginRecordCmd)
  return false;
#undef DO_
}

void NotifyLoginRecordCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.NotifyLoginRecordCmd)
  // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_NOTIFYLOGIN];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 id = 3 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->id(), output);
  }

  // optional uint64 accid = 4 [default = 0];
  if (has_accid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->accid(), output);
  }

  // optional string sceneName = 5;
  if (has_scenename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scenename().data(), this->scenename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "scenename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->scenename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.NotifyLoginRecordCmd)
}

::google::protobuf::uint8* NotifyLoginRecordCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.NotifyLoginRecordCmd)
  // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_NOTIFYLOGIN];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 id = 3 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->id(), target);
  }

  // optional uint64 accid = 4 [default = 0];
  if (has_accid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->accid(), target);
  }

  // optional string sceneName = 5;
  if (has_scenename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scenename().data(), this->scenename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "scenename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->scenename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.NotifyLoginRecordCmd)
  return target;
}

int NotifyLoginRecordCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_NOTIFYLOGIN];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 id = 3 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint64 accid = 4 [default = 0];
    if (has_accid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->accid());
    }

    // optional string sceneName = 5;
    if (has_scenename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scenename());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyLoginRecordCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyLoginRecordCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyLoginRecordCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyLoginRecordCmd::MergeFrom(const NotifyLoginRecordCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_accid()) {
      set_accid(from.accid());
    }
    if (from.has_scenename()) {
      set_scenename(from.scenename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyLoginRecordCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyLoginRecordCmd::CopyFrom(const NotifyLoginRecordCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyLoginRecordCmd::IsInitialized() const {

  return true;
}

void NotifyLoginRecordCmd::Swap(NotifyLoginRecordCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(id_, other->id_);
    std::swap(accid_, other->accid_);
    std::swap(scenename_, other->scenename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyLoginRecordCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyLoginRecordCmd_descriptor_;
  metadata.reflection = NotifyLoginRecordCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecordUserData::kAccFieldNumber;
const int RecordUserData::kBaseFieldNumber;
const int RecordUserData::kRedisFieldNumber;
const int RecordUserData::kAccDataFieldNumber;
const int RecordUserData::kCharDataFieldNumber;
#endif  // !_MSC_VER

RecordUserData::RecordUserData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.RecordUserData)
}

void RecordUserData::InitAsDefaultInstance() {
  acc_ = const_cast< ::Cmd::UserAccData*>(&::Cmd::UserAccData::default_instance());
  base_ = const_cast< ::Cmd::UserBaseData*>(&::Cmd::UserBaseData::default_instance());
  redis_ = const_cast< ::Cmd::RedisUserData*>(&::Cmd::RedisUserData::default_instance());
}

RecordUserData::RecordUserData(const RecordUserData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.RecordUserData)
}

void RecordUserData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  acc_ = NULL;
  base_ = NULL;
  redis_ = NULL;
  acc_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  char_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecordUserData::~RecordUserData() {
  // @@protoc_insertion_point(destructor:Cmd.RecordUserData)
  SharedDtor();
}

void RecordUserData::SharedDtor() {
  if (acc_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete acc_data_;
  }
  if (char_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete char_data_;
  }
  if (this != default_instance_) {
    delete acc_;
    delete base_;
    delete redis_;
  }
}

void RecordUserData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecordUserData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecordUserData_descriptor_;
}

const RecordUserData& RecordUserData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

RecordUserData* RecordUserData::default_instance_ = NULL;

RecordUserData* RecordUserData::New() const {
  return new RecordUserData;
}

void RecordUserData::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_acc()) {
      if (acc_ != NULL) acc_->::Cmd::UserAccData::Clear();
    }
    if (has_base()) {
      if (base_ != NULL) base_->::Cmd::UserBaseData::Clear();
    }
    if (has_redis()) {
      if (redis_ != NULL) redis_->::Cmd::RedisUserData::Clear();
    }
    if (has_acc_data()) {
      if (acc_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        acc_data_->clear();
      }
    }
    if (has_char_data()) {
      if (char_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        char_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecordUserData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.RecordUserData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.UserAccData acc = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_acc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_base;
        break;
      }

      // optional .Cmd.UserBaseData base = 2;
      case 2: {
        if (tag == 18) {
         parse_base:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_redis;
        break;
      }

      // optional .Cmd.RedisUserData redis = 3;
      case 3: {
        if (tag == 26) {
         parse_redis:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_redis()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_acc_data;
        break;
      }

      // optional bytes acc_data = 4;
      case 4: {
        if (tag == 34) {
         parse_acc_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_acc_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_char_data;
        break;
      }

      // optional bytes char_data = 5;
      case 5: {
        if (tag == 42) {
         parse_char_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_char_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.RecordUserData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.RecordUserData)
  return false;
#undef DO_
}

void RecordUserData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.RecordUserData)
  // optional .Cmd.UserAccData acc = 1;
  if (has_acc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->acc(), output);
  }

  // optional .Cmd.UserBaseData base = 2;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->base(), output);
  }

  // optional .Cmd.RedisUserData redis = 3;
  if (has_redis()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->redis(), output);
  }

  // optional bytes acc_data = 4;
  if (has_acc_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->acc_data(), output);
  }

  // optional bytes char_data = 5;
  if (has_char_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->char_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.RecordUserData)
}

::google::protobuf::uint8* RecordUserData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.RecordUserData)
  // optional .Cmd.UserAccData acc = 1;
  if (has_acc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->acc(), target);
  }

  // optional .Cmd.UserBaseData base = 2;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->base(), target);
  }

  // optional .Cmd.RedisUserData redis = 3;
  if (has_redis()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->redis(), target);
  }

  // optional bytes acc_data = 4;
  if (has_acc_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->acc_data(), target);
  }

  // optional bytes char_data = 5;
  if (has_char_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->char_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.RecordUserData)
  return target;
}

int RecordUserData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.UserAccData acc = 1;
    if (has_acc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->acc());
    }

    // optional .Cmd.UserBaseData base = 2;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }

    // optional .Cmd.RedisUserData redis = 3;
    if (has_redis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->redis());
    }

    // optional bytes acc_data = 4;
    if (has_acc_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->acc_data());
    }

    // optional bytes char_data = 5;
    if (has_char_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->char_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecordUserData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecordUserData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecordUserData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecordUserData::MergeFrom(const RecordUserData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_acc()) {
      mutable_acc()->::Cmd::UserAccData::MergeFrom(from.acc());
    }
    if (from.has_base()) {
      mutable_base()->::Cmd::UserBaseData::MergeFrom(from.base());
    }
    if (from.has_redis()) {
      mutable_redis()->::Cmd::RedisUserData::MergeFrom(from.redis());
    }
    if (from.has_acc_data()) {
      set_acc_data(from.acc_data());
    }
    if (from.has_char_data()) {
      set_char_data(from.char_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecordUserData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordUserData::CopyFrom(const RecordUserData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordUserData::IsInitialized() const {

  return true;
}

void RecordUserData::Swap(RecordUserData* other) {
  if (other != this) {
    std::swap(acc_, other->acc_);
    std::swap(base_, other->base_);
    std::swap(redis_, other->redis_);
    std::swap(acc_data_, other->acc_data_);
    std::swap(char_data_, other->char_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecordUserData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecordUserData_descriptor_;
  metadata.reflection = RecordUserData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RedisUserData::kPortraitFieldNumber;
const int RedisUserData::kClothcolorFieldNumber;
const int RedisUserData::kManuallvFieldNumber;
const int RedisUserData::kManualexpFieldNumber;
const int RedisUserData::kQuerytypeFieldNumber;
const int RedisUserData::kProficFieldNumber;
const int RedisUserData::kBlinkFieldNumber;
const int RedisUserData::kCanbetutorFieldNumber;
#endif  // !_MSC_VER

RedisUserData::RedisUserData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.RedisUserData)
}

void RedisUserData::InitAsDefaultInstance() {
}

RedisUserData::RedisUserData(const RedisUserData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.RedisUserData)
}

void RedisUserData::SharedCtor() {
  _cached_size_ = 0;
  portrait_ = 0u;
  clothcolor_ = 0u;
  manuallv_ = 0u;
  manualexp_ = 0u;
  querytype_ = 0u;
  profic_ = 0u;
  blink_ = false;
  canbetutor_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RedisUserData::~RedisUserData() {
  // @@protoc_insertion_point(destructor:Cmd.RedisUserData)
  SharedDtor();
}

void RedisUserData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RedisUserData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RedisUserData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RedisUserData_descriptor_;
}

const RedisUserData& RedisUserData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

RedisUserData* RedisUserData::default_instance_ = NULL;

RedisUserData* RedisUserData::New() const {
  return new RedisUserData;
}

void RedisUserData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RedisUserData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(portrait_, canbetutor_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RedisUserData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.RedisUserData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 portrait = 5 [default = 0];
      case 5: {
        if (tag == 40) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &portrait_)));
          set_has_portrait();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_clothcolor;
        break;
      }

      // optional uint32 clothcolor = 13 [default = 0];
      case 13: {
        if (tag == 104) {
         parse_clothcolor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clothcolor_)));
          set_has_clothcolor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_manuallv;
        break;
      }

      // optional uint32 manuallv = 20 [default = 0];
      case 20: {
        if (tag == 160) {
         parse_manuallv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &manuallv_)));
          set_has_manuallv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_manualexp;
        break;
      }

      // optional uint32 manualexp = 21 [default = 0];
      case 21: {
        if (tag == 168) {
         parse_manualexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &manualexp_)));
          set_has_manualexp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_querytype;
        break;
      }

      // optional uint32 querytype = 23 [default = 0];
      case 23: {
        if (tag == 184) {
         parse_querytype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &querytype_)));
          set_has_querytype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_profic;
        break;
      }

      // optional uint32 profic = 24 [default = 0];
      case 24: {
        if (tag == 192) {
         parse_profic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &profic_)));
          set_has_profic();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_blink;
        break;
      }

      // optional bool blink = 26 [default = false];
      case 26: {
        if (tag == 208) {
         parse_blink:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &blink_)));
          set_has_blink();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_canbetutor;
        break;
      }

      // optional bool canbetutor = 27 [default = false];
      case 27: {
        if (tag == 216) {
         parse_canbetutor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &canbetutor_)));
          set_has_canbetutor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.RedisUserData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.RedisUserData)
  return false;
#undef DO_
}

void RedisUserData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.RedisUserData)
  // optional uint32 portrait = 5 [default = 0];
  if (has_portrait()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->portrait(), output);
  }

  // optional uint32 clothcolor = 13 [default = 0];
  if (has_clothcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->clothcolor(), output);
  }

  // optional uint32 manuallv = 20 [default = 0];
  if (has_manuallv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->manuallv(), output);
  }

  // optional uint32 manualexp = 21 [default = 0];
  if (has_manualexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->manualexp(), output);
  }

  // optional uint32 querytype = 23 [default = 0];
  if (has_querytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->querytype(), output);
  }

  // optional uint32 profic = 24 [default = 0];
  if (has_profic()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->profic(), output);
  }

  // optional bool blink = 26 [default = false];
  if (has_blink()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(26, this->blink(), output);
  }

  // optional bool canbetutor = 27 [default = false];
  if (has_canbetutor()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(27, this->canbetutor(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.RedisUserData)
}

::google::protobuf::uint8* RedisUserData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.RedisUserData)
  // optional uint32 portrait = 5 [default = 0];
  if (has_portrait()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->portrait(), target);
  }

  // optional uint32 clothcolor = 13 [default = 0];
  if (has_clothcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->clothcolor(), target);
  }

  // optional uint32 manuallv = 20 [default = 0];
  if (has_manuallv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->manuallv(), target);
  }

  // optional uint32 manualexp = 21 [default = 0];
  if (has_manualexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->manualexp(), target);
  }

  // optional uint32 querytype = 23 [default = 0];
  if (has_querytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->querytype(), target);
  }

  // optional uint32 profic = 24 [default = 0];
  if (has_profic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->profic(), target);
  }

  // optional bool blink = 26 [default = false];
  if (has_blink()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(26, this->blink(), target);
  }

  // optional bool canbetutor = 27 [default = false];
  if (has_canbetutor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(27, this->canbetutor(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.RedisUserData)
  return target;
}

int RedisUserData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 portrait = 5 [default = 0];
    if (has_portrait()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->portrait());
    }

    // optional uint32 clothcolor = 13 [default = 0];
    if (has_clothcolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clothcolor());
    }

    // optional uint32 manuallv = 20 [default = 0];
    if (has_manuallv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->manuallv());
    }

    // optional uint32 manualexp = 21 [default = 0];
    if (has_manualexp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->manualexp());
    }

    // optional uint32 querytype = 23 [default = 0];
    if (has_querytype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->querytype());
    }

    // optional uint32 profic = 24 [default = 0];
    if (has_profic()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->profic());
    }

    // optional bool blink = 26 [default = false];
    if (has_blink()) {
      total_size += 2 + 1;
    }

    // optional bool canbetutor = 27 [default = false];
    if (has_canbetutor()) {
      total_size += 2 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RedisUserData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RedisUserData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RedisUserData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RedisUserData::MergeFrom(const RedisUserData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_portrait()) {
      set_portrait(from.portrait());
    }
    if (from.has_clothcolor()) {
      set_clothcolor(from.clothcolor());
    }
    if (from.has_manuallv()) {
      set_manuallv(from.manuallv());
    }
    if (from.has_manualexp()) {
      set_manualexp(from.manualexp());
    }
    if (from.has_querytype()) {
      set_querytype(from.querytype());
    }
    if (from.has_profic()) {
      set_profic(from.profic());
    }
    if (from.has_blink()) {
      set_blink(from.blink());
    }
    if (from.has_canbetutor()) {
      set_canbetutor(from.canbetutor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RedisUserData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedisUserData::CopyFrom(const RedisUserData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedisUserData::IsInitialized() const {

  return true;
}

void RedisUserData::Swap(RedisUserData* other) {
  if (other != this) {
    std::swap(portrait_, other->portrait_);
    std::swap(clothcolor_, other->clothcolor_);
    std::swap(manuallv_, other->manuallv_);
    std::swap(manualexp_, other->manualexp_);
    std::swap(querytype_, other->querytype_);
    std::swap(profic_, other->profic_);
    std::swap(blink_, other->blink_);
    std::swap(canbetutor_, other->canbetutor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RedisUserData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RedisUserData_descriptor_;
  metadata.reflection = RedisUserData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserDataRecordCmd::kCmdFieldNumber;
const int UserDataRecordCmd::kParamFieldNumber;
const int UserDataRecordCmd::kCharidFieldNumber;
const int UserDataRecordCmd::kAccidFieldNumber;
const int UserDataRecordCmd::kUnregTypeFieldNumber;
const int UserDataRecordCmd::kFirstFieldNumber;
const int UserDataRecordCmd::kOverFieldNumber;
const int UserDataRecordCmd::kDataFieldNumber;
#endif  // !_MSC_VER

UserDataRecordCmd::UserDataRecordCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UserDataRecordCmd)
}

void UserDataRecordCmd::InitAsDefaultInstance() {
}

UserDataRecordCmd::UserDataRecordCmd(const UserDataRecordCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UserDataRecordCmd)
}

void UserDataRecordCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 200;
  param_ = 2;
  charid_ = GOOGLE_ULONGLONG(0);
  accid_ = GOOGLE_ULONGLONG(0);
  unregtype_ = 0u;
  first_ = false;
  over_ = false;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserDataRecordCmd::~UserDataRecordCmd() {
  // @@protoc_insertion_point(destructor:Cmd.UserDataRecordCmd)
  SharedDtor();
}

void UserDataRecordCmd::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void UserDataRecordCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserDataRecordCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserDataRecordCmd_descriptor_;
}

const UserDataRecordCmd& UserDataRecordCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

UserDataRecordCmd* UserDataRecordCmd::default_instance_ = NULL;

UserDataRecordCmd* UserDataRecordCmd::New() const {
  return new UserDataRecordCmd;
}

void UserDataRecordCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserDataRecordCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(charid_, over_);
    cmd_ = 200;
    param_ = 2;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserDataRecordCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UserDataRecordCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_USERDATA];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::RecordParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::RecordParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_accid;
        break;
      }

      // optional uint64 accid = 4;
      case 4: {
        if (tag == 32) {
         parse_accid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &accid_)));
          set_has_accid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_unregType;
        break;
      }

      // optional uint32 unregType = 5;
      case 5: {
        if (tag == 40) {
         parse_unregType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unregtype_)));
          set_has_unregtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_first;
        break;
      }

      // optional bool first = 6 [default = false];
      case 6: {
        if (tag == 48) {
         parse_first:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &first_)));
          set_has_first();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_over;
        break;
      }

      // optional bool over = 7 [default = false];
      case 7: {
        if (tag == 56) {
         parse_over:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &over_)));
          set_has_over();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_data;
        break;
      }

      // optional bytes data = 8;
      case 8: {
        if (tag == 66) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UserDataRecordCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UserDataRecordCmd)
  return false;
#undef DO_
}

void UserDataRecordCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UserDataRecordCmd)
  // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_USERDATA];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional uint64 accid = 4;
  if (has_accid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->accid(), output);
  }

  // optional uint32 unregType = 5;
  if (has_unregtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->unregtype(), output);
  }

  // optional bool first = 6 [default = false];
  if (has_first()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->first(), output);
  }

  // optional bool over = 7 [default = false];
  if (has_over()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->over(), output);
  }

  // optional bytes data = 8;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UserDataRecordCmd)
}

::google::protobuf::uint8* UserDataRecordCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UserDataRecordCmd)
  // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_USERDATA];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional uint64 accid = 4;
  if (has_accid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->accid(), target);
  }

  // optional uint32 unregType = 5;
  if (has_unregtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->unregtype(), target);
  }

  // optional bool first = 6 [default = false];
  if (has_first()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->first(), target);
  }

  // optional bool over = 7 [default = false];
  if (has_over()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->over(), target);
  }

  // optional bytes data = 8;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UserDataRecordCmd)
  return target;
}

int UserDataRecordCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_USERDATA];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint64 accid = 4;
    if (has_accid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->accid());
    }

    // optional uint32 unregType = 5;
    if (has_unregtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unregtype());
    }

    // optional bool first = 6 [default = false];
    if (has_first()) {
      total_size += 1 + 1;
    }

    // optional bool over = 7 [default = false];
    if (has_over()) {
      total_size += 1 + 1;
    }

    // optional bytes data = 8;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserDataRecordCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserDataRecordCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserDataRecordCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserDataRecordCmd::MergeFrom(const UserDataRecordCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_accid()) {
      set_accid(from.accid());
    }
    if (from.has_unregtype()) {
      set_unregtype(from.unregtype());
    }
    if (from.has_first()) {
      set_first(from.first());
    }
    if (from.has_over()) {
      set_over(from.over());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserDataRecordCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserDataRecordCmd::CopyFrom(const UserDataRecordCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserDataRecordCmd::IsInitialized() const {

  return true;
}

void UserDataRecordCmd::Swap(UserDataRecordCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(accid_, other->accid_);
    std::swap(unregtype_, other->unregtype_);
    std::swap(first_, other->first_);
    std::swap(over_, other->over_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserDataRecordCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserDataRecordCmd_descriptor_;
  metadata.reflection = UserDataRecordCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ErrUserCharBaseRecordCmd::kCmdFieldNumber;
const int ErrUserCharBaseRecordCmd::kParamFieldNumber;
const int ErrUserCharBaseRecordCmd::kIdFieldNumber;
#endif  // !_MSC_VER

ErrUserCharBaseRecordCmd::ErrUserCharBaseRecordCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ErrUserCharBaseRecordCmd)
}

void ErrUserCharBaseRecordCmd::InitAsDefaultInstance() {
}

ErrUserCharBaseRecordCmd::ErrUserCharBaseRecordCmd(const ErrUserCharBaseRecordCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ErrUserCharBaseRecordCmd)
}

void ErrUserCharBaseRecordCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 200;
  param_ = 3;
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ErrUserCharBaseRecordCmd::~ErrUserCharBaseRecordCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ErrUserCharBaseRecordCmd)
  SharedDtor();
}

void ErrUserCharBaseRecordCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ErrUserCharBaseRecordCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ErrUserCharBaseRecordCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ErrUserCharBaseRecordCmd_descriptor_;
}

const ErrUserCharBaseRecordCmd& ErrUserCharBaseRecordCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

ErrUserCharBaseRecordCmd* ErrUserCharBaseRecordCmd::default_instance_ = NULL;

ErrUserCharBaseRecordCmd* ErrUserCharBaseRecordCmd::New() const {
  return new ErrUserCharBaseRecordCmd;
}

void ErrUserCharBaseRecordCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 200;
    param_ = 3;
    id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ErrUserCharBaseRecordCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ErrUserCharBaseRecordCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_ERROR_USERDATA];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::RecordParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::RecordParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional uint64 id = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ErrUserCharBaseRecordCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ErrUserCharBaseRecordCmd)
  return false;
#undef DO_
}

void ErrUserCharBaseRecordCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ErrUserCharBaseRecordCmd)
  // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_ERROR_USERDATA];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 id = 3 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ErrUserCharBaseRecordCmd)
}

::google::protobuf::uint8* ErrUserCharBaseRecordCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ErrUserCharBaseRecordCmd)
  // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_ERROR_USERDATA];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 id = 3 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ErrUserCharBaseRecordCmd)
  return target;
}

int ErrUserCharBaseRecordCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_ERROR_USERDATA];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 id = 3 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ErrUserCharBaseRecordCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ErrUserCharBaseRecordCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ErrUserCharBaseRecordCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ErrUserCharBaseRecordCmd::MergeFrom(const ErrUserCharBaseRecordCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ErrUserCharBaseRecordCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ErrUserCharBaseRecordCmd::CopyFrom(const ErrUserCharBaseRecordCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ErrUserCharBaseRecordCmd::IsInitialized() const {

  return true;
}

void ErrUserCharBaseRecordCmd::Swap(ErrUserCharBaseRecordCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ErrUserCharBaseRecordCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ErrUserCharBaseRecordCmd_descriptor_;
  metadata.reflection = ErrUserCharBaseRecordCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MusicUpdateCmd::kCmdFieldNumber;
const int MusicUpdateCmd::kParamFieldNumber;
const int MusicUpdateCmd::kItemFieldNumber;
#endif  // !_MSC_VER

MusicUpdateCmd::MusicUpdateCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.MusicUpdateCmd)
}

void MusicUpdateCmd::InitAsDefaultInstance() {
  item_ = const_cast< ::Cmd::MusicItem*>(&::Cmd::MusicItem::default_instance());
}

MusicUpdateCmd::MusicUpdateCmd(const MusicUpdateCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.MusicUpdateCmd)
}

void MusicUpdateCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 200;
  param_ = 6;
  item_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MusicUpdateCmd::~MusicUpdateCmd() {
  // @@protoc_insertion_point(destructor:Cmd.MusicUpdateCmd)
  SharedDtor();
}

void MusicUpdateCmd::SharedDtor() {
  if (this != default_instance_) {
    delete item_;
  }
}

void MusicUpdateCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MusicUpdateCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MusicUpdateCmd_descriptor_;
}

const MusicUpdateCmd& MusicUpdateCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

MusicUpdateCmd* MusicUpdateCmd::default_instance_ = NULL;

MusicUpdateCmd* MusicUpdateCmd::New() const {
  return new MusicUpdateCmd;
}

void MusicUpdateCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 200;
    param_ = 6;
    if (has_item()) {
      if (item_ != NULL) item_->::Cmd::MusicItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MusicUpdateCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.MusicUpdateCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_MUSIC_DATA];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::RecordParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::RecordParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_item;
        break;
      }

      // optional .Cmd.MusicItem item = 3;
      case 3: {
        if (tag == 26) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.MusicUpdateCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.MusicUpdateCmd)
  return false;
#undef DO_
}

void MusicUpdateCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.MusicUpdateCmd)
  // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_MUSIC_DATA];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.MusicItem item = 3;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->item(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.MusicUpdateCmd)
}

::google::protobuf::uint8* MusicUpdateCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.MusicUpdateCmd)
  // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_MUSIC_DATA];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.MusicItem item = 3;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->item(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.MusicUpdateCmd)
  return target;
}

int MusicUpdateCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_MUSIC_DATA];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.MusicItem item = 3;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MusicUpdateCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MusicUpdateCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MusicUpdateCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MusicUpdateCmd::MergeFrom(const MusicUpdateCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_item()) {
      mutable_item()->::Cmd::MusicItem::MergeFrom(from.item());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MusicUpdateCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MusicUpdateCmd::CopyFrom(const MusicUpdateCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MusicUpdateCmd::IsInitialized() const {

  return true;
}

void MusicUpdateCmd::Swap(MusicUpdateCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(item_, other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MusicUpdateCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MusicUpdateCmd_descriptor_;
  metadata.reflection = MusicUpdateCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoadLuaSceneRecordCmd::kCmdFieldNumber;
const int LoadLuaSceneRecordCmd::kParamFieldNumber;
const int LoadLuaSceneRecordCmd::kTableFieldNumber;
const int LoadLuaSceneRecordCmd::kLuaFieldNumber;
const int LoadLuaSceneRecordCmd::kLogFieldNumber;
#endif  // !_MSC_VER

LoadLuaSceneRecordCmd::LoadLuaSceneRecordCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.LoadLuaSceneRecordCmd)
}

void LoadLuaSceneRecordCmd::InitAsDefaultInstance() {
}

LoadLuaSceneRecordCmd::LoadLuaSceneRecordCmd(const LoadLuaSceneRecordCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.LoadLuaSceneRecordCmd)
}

void LoadLuaSceneRecordCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 200;
  param_ = 7;
  table_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lua_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  log_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoadLuaSceneRecordCmd::~LoadLuaSceneRecordCmd() {
  // @@protoc_insertion_point(destructor:Cmd.LoadLuaSceneRecordCmd)
  SharedDtor();
}

void LoadLuaSceneRecordCmd::SharedDtor() {
  if (table_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete table_;
  }
  if (lua_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lua_;
  }
  if (log_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete log_;
  }
  if (this != default_instance_) {
  }
}

void LoadLuaSceneRecordCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoadLuaSceneRecordCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoadLuaSceneRecordCmd_descriptor_;
}

const LoadLuaSceneRecordCmd& LoadLuaSceneRecordCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

LoadLuaSceneRecordCmd* LoadLuaSceneRecordCmd::default_instance_ = NULL;

LoadLuaSceneRecordCmd* LoadLuaSceneRecordCmd::New() const {
  return new LoadLuaSceneRecordCmd;
}

void LoadLuaSceneRecordCmd::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    cmd_ = 200;
    param_ = 7;
    if (has_table()) {
      if (table_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        table_->clear();
      }
    }
    if (has_lua()) {
      if (lua_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        lua_->clear();
      }
    }
    if (has_log()) {
      if (log_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        log_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoadLuaSceneRecordCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.LoadLuaSceneRecordCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_LOADLUA];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::RecordParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::RecordParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_table;
        break;
      }

      // optional string table = 3;
      case 3: {
        if (tag == 26) {
         parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->table().data(), this->table().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "table");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_lua;
        break;
      }

      // optional string lua = 4;
      case 4: {
        if (tag == 34) {
         parse_lua:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lua()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lua().data(), this->lua().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "lua");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_log;
        break;
      }

      // optional string log = 5;
      case 5: {
        if (tag == 42) {
         parse_log:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_log()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->log().data(), this->log().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "log");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.LoadLuaSceneRecordCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.LoadLuaSceneRecordCmd)
  return false;
#undef DO_
}

void LoadLuaSceneRecordCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.LoadLuaSceneRecordCmd)
  // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_LOADLUA];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional string table = 3;
  if (has_table()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->table().data(), this->table().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "table");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->table(), output);
  }

  // optional string lua = 4;
  if (has_lua()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lua().data(), this->lua().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lua");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->lua(), output);
  }

  // optional string log = 5;
  if (has_log()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->log().data(), this->log().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "log");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->log(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.LoadLuaSceneRecordCmd)
}

::google::protobuf::uint8* LoadLuaSceneRecordCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.LoadLuaSceneRecordCmd)
  // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_LOADLUA];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional string table = 3;
  if (has_table()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->table().data(), this->table().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "table");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->table(), target);
  }

  // optional string lua = 4;
  if (has_lua()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lua().data(), this->lua().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lua");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->lua(), target);
  }

  // optional string log = 5;
  if (has_log()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->log().data(), this->log().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "log");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->log(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.LoadLuaSceneRecordCmd)
  return target;
}

int LoadLuaSceneRecordCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_LOADLUA];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional string table = 3;
    if (has_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->table());
    }

    // optional string lua = 4;
    if (has_lua()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lua());
    }

    // optional string log = 5;
    if (has_log()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->log());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoadLuaSceneRecordCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoadLuaSceneRecordCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoadLuaSceneRecordCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoadLuaSceneRecordCmd::MergeFrom(const LoadLuaSceneRecordCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_lua()) {
      set_lua(from.lua());
    }
    if (from.has_log()) {
      set_log(from.log());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoadLuaSceneRecordCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadLuaSceneRecordCmd::CopyFrom(const LoadLuaSceneRecordCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadLuaSceneRecordCmd::IsInitialized() const {

  return true;
}

void LoadLuaSceneRecordCmd::Swap(LoadLuaSceneRecordCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(table_, other->table_);
    std::swap(lua_, other->lua_);
    std::swap(log_, other->log_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoadLuaSceneRecordCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoadLuaSceneRecordCmd_descriptor_;
  metadata.reflection = LoadLuaSceneRecordCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemModifyRecordCmd::kCmdFieldNumber;
const int ItemModifyRecordCmd::kParamFieldNumber;
const int ItemModifyRecordCmd::kAccidFieldNumber;
const int ItemModifyRecordCmd::kCharidFieldNumber;
const int ItemModifyRecordCmd::kNewidFieldNumber;
const int ItemModifyRecordCmd::kScenenameFieldNumber;
const int ItemModifyRecordCmd::kGuidFieldNumber;
#endif  // !_MSC_VER

ItemModifyRecordCmd::ItemModifyRecordCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ItemModifyRecordCmd)
}

void ItemModifyRecordCmd::InitAsDefaultInstance() {
}

ItemModifyRecordCmd::ItemModifyRecordCmd(const ItemModifyRecordCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ItemModifyRecordCmd)
}

void ItemModifyRecordCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 200;
  param_ = 10;
  accid_ = GOOGLE_ULONGLONG(0);
  charid_ = GOOGLE_ULONGLONG(0);
  newid_ = 0u;
  scenename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemModifyRecordCmd::~ItemModifyRecordCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ItemModifyRecordCmd)
  SharedDtor();
}

void ItemModifyRecordCmd::SharedDtor() {
  if (scenename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete scenename_;
  }
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guid_;
  }
  if (this != default_instance_) {
  }
}

void ItemModifyRecordCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemModifyRecordCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemModifyRecordCmd_descriptor_;
}

const ItemModifyRecordCmd& ItemModifyRecordCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

ItemModifyRecordCmd* ItemModifyRecordCmd::default_instance_ = NULL;

ItemModifyRecordCmd* ItemModifyRecordCmd::New() const {
  return new ItemModifyRecordCmd;
}

void ItemModifyRecordCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ItemModifyRecordCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(accid_, charid_);
    cmd_ = 200;
    param_ = 10;
    newid_ = 0u;
    if (has_scenename()) {
      if (scenename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        scenename_->clear();
      }
    }
    if (has_guid()) {
      if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemModifyRecordCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ItemModifyRecordCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_STORE_ITEMMODIFY];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::RecordParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::RecordParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_accid;
        break;
      }

      // optional uint64 accid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_accid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &accid_)));
          set_has_accid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_scenename;
        break;
      }

      // optional string scenename = 5;
      case 5: {
        if (tag == 42) {
         parse_scenename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scenename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->scenename().data(), this->scenename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "scenename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_guid;
        break;
      }

      // optional string guid = 6;
      case 6: {
        if (tag == 50) {
         parse_guid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guid().data(), this->guid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_newid;
        break;
      }

      // optional uint32 newid = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_newid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newid_)));
          set_has_newid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ItemModifyRecordCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ItemModifyRecordCmd)
  return false;
#undef DO_
}

void ItemModifyRecordCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ItemModifyRecordCmd)
  // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_STORE_ITEMMODIFY];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 accid = 3 [default = 0];
  if (has_accid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->accid(), output);
  }

  // optional uint64 charid = 4 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->charid(), output);
  }

  // optional string scenename = 5;
  if (has_scenename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scenename().data(), this->scenename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "scenename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->scenename(), output);
  }

  // optional string guid = 6;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->guid(), output);
  }

  // optional uint32 newid = 7 [default = 0];
  if (has_newid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->newid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ItemModifyRecordCmd)
}

::google::protobuf::uint8* ItemModifyRecordCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ItemModifyRecordCmd)
  // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_STORE_ITEMMODIFY];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 accid = 3 [default = 0];
  if (has_accid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->accid(), target);
  }

  // optional uint64 charid = 4 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->charid(), target);
  }

  // optional string scenename = 5;
  if (has_scenename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scenename().data(), this->scenename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "scenename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->scenename(), target);
  }

  // optional string guid = 6;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->guid(), target);
  }

  // optional uint32 newid = 7 [default = 0];
  if (has_newid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->newid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ItemModifyRecordCmd)
  return target;
}

int ItemModifyRecordCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_STORE_ITEMMODIFY];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 accid = 3 [default = 0];
    if (has_accid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->accid());
    }

    // optional uint64 charid = 4 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 newid = 7 [default = 0];
    if (has_newid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->newid());
    }

    // optional string scenename = 5;
    if (has_scenename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scenename());
    }

    // optional string guid = 6;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemModifyRecordCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemModifyRecordCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemModifyRecordCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemModifyRecordCmd::MergeFrom(const ItemModifyRecordCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_accid()) {
      set_accid(from.accid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_newid()) {
      set_newid(from.newid());
    }
    if (from.has_scenename()) {
      set_scenename(from.scenename());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemModifyRecordCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemModifyRecordCmd::CopyFrom(const ItemModifyRecordCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemModifyRecordCmd::IsInitialized() const {

  return true;
}

void ItemModifyRecordCmd::Swap(ItemModifyRecordCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(accid_, other->accid_);
    std::swap(charid_, other->charid_);
    std::swap(newid_, other->newid_);
    std::swap(scenename_, other->scenename_);
    std::swap(guid_, other->guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemModifyRecordCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemModifyRecordCmd_descriptor_;
  metadata.reflection = ItemModifyRecordCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeAuthorizeRecordCmd::kCmdFieldNumber;
const int ChangeAuthorizeRecordCmd::kParamFieldNumber;
const int ChangeAuthorizeRecordCmd::kAccidFieldNumber;
const int ChangeAuthorizeRecordCmd::kPasswordFieldNumber;
const int ChangeAuthorizeRecordCmd::kResettimeFieldNumber;
#endif  // !_MSC_VER

ChangeAuthorizeRecordCmd::ChangeAuthorizeRecordCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ChangeAuthorizeRecordCmd)
}

void ChangeAuthorizeRecordCmd::InitAsDefaultInstance() {
}

ChangeAuthorizeRecordCmd::ChangeAuthorizeRecordCmd(const ChangeAuthorizeRecordCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ChangeAuthorizeRecordCmd)
}

void ChangeAuthorizeRecordCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 200;
  param_ = 14;
  accid_ = GOOGLE_ULONGLONG(0);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resettime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeAuthorizeRecordCmd::~ChangeAuthorizeRecordCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ChangeAuthorizeRecordCmd)
  SharedDtor();
}

void ChangeAuthorizeRecordCmd::SharedDtor() {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void ChangeAuthorizeRecordCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeAuthorizeRecordCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeAuthorizeRecordCmd_descriptor_;
}

const ChangeAuthorizeRecordCmd& ChangeAuthorizeRecordCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

ChangeAuthorizeRecordCmd* ChangeAuthorizeRecordCmd::default_instance_ = NULL;

ChangeAuthorizeRecordCmd* ChangeAuthorizeRecordCmd::New() const {
  return new ChangeAuthorizeRecordCmd;
}

void ChangeAuthorizeRecordCmd::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    cmd_ = 200;
    param_ = 14;
    accid_ = GOOGLE_ULONGLONG(0);
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        password_->clear();
      }
    }
    resettime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeAuthorizeRecordCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ChangeAuthorizeRecordCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_AUTHORIZE_CHANGE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::RecordParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::RecordParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_accid;
        break;
      }

      // optional uint64 accid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_accid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &accid_)));
          set_has_accid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_password;
        break;
      }

      // optional string password = 4;
      case 4: {
        if (tag == 34) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "password");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_resettime;
        break;
      }

      // optional uint32 resettime = 5;
      case 5: {
        if (tag == 40) {
         parse_resettime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resettime_)));
          set_has_resettime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ChangeAuthorizeRecordCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ChangeAuthorizeRecordCmd)
  return false;
#undef DO_
}

void ChangeAuthorizeRecordCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ChangeAuthorizeRecordCmd)
  // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_AUTHORIZE_CHANGE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 accid = 3 [default = 0];
  if (has_accid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->accid(), output);
  }

  // optional string password = 4;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->password(), output);
  }

  // optional uint32 resettime = 5;
  if (has_resettime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->resettime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ChangeAuthorizeRecordCmd)
}

::google::protobuf::uint8* ChangeAuthorizeRecordCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ChangeAuthorizeRecordCmd)
  // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_AUTHORIZE_CHANGE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 accid = 3 [default = 0];
  if (has_accid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->accid(), target);
  }

  // optional string password = 4;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->password(), target);
  }

  // optional uint32 resettime = 5;
  if (has_resettime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->resettime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ChangeAuthorizeRecordCmd)
  return target;
}

int ChangeAuthorizeRecordCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_AUTHORIZE_CHANGE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 accid = 3 [default = 0];
    if (has_accid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->accid());
    }

    // optional string password = 4;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional uint32 resettime = 5;
    if (has_resettime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resettime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeAuthorizeRecordCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeAuthorizeRecordCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeAuthorizeRecordCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeAuthorizeRecordCmd::MergeFrom(const ChangeAuthorizeRecordCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_accid()) {
      set_accid(from.accid());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_resettime()) {
      set_resettime(from.resettime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeAuthorizeRecordCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeAuthorizeRecordCmd::CopyFrom(const ChangeAuthorizeRecordCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeAuthorizeRecordCmd::IsInitialized() const {

  return true;
}

void ChangeAuthorizeRecordCmd::Swap(ChangeAuthorizeRecordCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(accid_, other->accid_);
    std::swap(password_, other->password_);
    std::swap(resettime_, other->resettime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeAuthorizeRecordCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeAuthorizeRecordCmd_descriptor_;
  metadata.reflection = ChangeAuthorizeRecordCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMusicQueryRecordCmd::kCmdFieldNumber;
const int GuildMusicQueryRecordCmd::kParamFieldNumber;
const int GuildMusicQueryRecordCmd::kScenenameFieldNumber;
const int GuildMusicQueryRecordCmd::kSceneidFieldNumber;
const int GuildMusicQueryRecordCmd::kGuildidFieldNumber;
const int GuildMusicQueryRecordCmd::kItemsFieldNumber;
#endif  // !_MSC_VER

GuildMusicQueryRecordCmd::GuildMusicQueryRecordCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GuildMusicQueryRecordCmd)
}

void GuildMusicQueryRecordCmd::InitAsDefaultInstance() {
}

GuildMusicQueryRecordCmd::GuildMusicQueryRecordCmd(const GuildMusicQueryRecordCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GuildMusicQueryRecordCmd)
}

void GuildMusicQueryRecordCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 200;
  param_ = 15;
  scenename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sceneid_ = 0u;
  guildid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMusicQueryRecordCmd::~GuildMusicQueryRecordCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GuildMusicQueryRecordCmd)
  SharedDtor();
}

void GuildMusicQueryRecordCmd::SharedDtor() {
  if (scenename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete scenename_;
  }
  if (this != default_instance_) {
  }
}

void GuildMusicQueryRecordCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMusicQueryRecordCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMusicQueryRecordCmd_descriptor_;
}

const GuildMusicQueryRecordCmd& GuildMusicQueryRecordCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

GuildMusicQueryRecordCmd* GuildMusicQueryRecordCmd::default_instance_ = NULL;

GuildMusicQueryRecordCmd* GuildMusicQueryRecordCmd::New() const {
  return new GuildMusicQueryRecordCmd;
}

void GuildMusicQueryRecordCmd::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    cmd_ = 200;
    param_ = 15;
    if (has_scenename()) {
      if (scenename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        scenename_->clear();
      }
    }
    sceneid_ = 0u;
    guildid_ = GOOGLE_ULONGLONG(0);
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMusicQueryRecordCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GuildMusicQueryRecordCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_GUILD_MUSIC_QUERY];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::RecordParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::RecordParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_scenename;
        break;
      }

      // optional string scenename = 3;
      case 3: {
        if (tag == 26) {
         parse_scenename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scenename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->scenename().data(), this->scenename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "scenename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sceneid;
        break;
      }

      // optional uint32 sceneid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_sceneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_guildid;
        break;
      }

      // optional uint64 guildid = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_guildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_items;
        break;
      }

      // repeated .Cmd.MusicItem items = 6;
      case 6: {
        if (tag == 50) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GuildMusicQueryRecordCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GuildMusicQueryRecordCmd)
  return false;
#undef DO_
}

void GuildMusicQueryRecordCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GuildMusicQueryRecordCmd)
  // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_GUILD_MUSIC_QUERY];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional string scenename = 3;
  if (has_scenename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scenename().data(), this->scenename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "scenename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->scenename(), output);
  }

  // optional uint32 sceneid = 4 [default = 0];
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sceneid(), output);
  }

  // optional uint64 guildid = 5 [default = 0];
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->guildid(), output);
  }

  // repeated .Cmd.MusicItem items = 6;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GuildMusicQueryRecordCmd)
}

::google::protobuf::uint8* GuildMusicQueryRecordCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GuildMusicQueryRecordCmd)
  // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_GUILD_MUSIC_QUERY];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional string scenename = 3;
  if (has_scenename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scenename().data(), this->scenename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "scenename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->scenename(), target);
  }

  // optional uint32 sceneid = 4 [default = 0];
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sceneid(), target);
  }

  // optional uint64 guildid = 5 [default = 0];
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->guildid(), target);
  }

  // repeated .Cmd.MusicItem items = 6;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GuildMusicQueryRecordCmd)
  return target;
}

int GuildMusicQueryRecordCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_GUILD_MUSIC_QUERY];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional string scenename = 3;
    if (has_scenename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scenename());
    }

    // optional uint32 sceneid = 4 [default = 0];
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sceneid());
    }

    // optional uint64 guildid = 5 [default = 0];
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

  }
  // repeated .Cmd.MusicItem items = 6;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMusicQueryRecordCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMusicQueryRecordCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMusicQueryRecordCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMusicQueryRecordCmd::MergeFrom(const GuildMusicQueryRecordCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_scenename()) {
      set_scenename(from.scenename());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMusicQueryRecordCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMusicQueryRecordCmd::CopyFrom(const GuildMusicQueryRecordCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMusicQueryRecordCmd::IsInitialized() const {

  return true;
}

void GuildMusicQueryRecordCmd::Swap(GuildMusicQueryRecordCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(scenename_, other->scenename_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(guildid_, other->guildid_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMusicQueryRecordCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMusicQueryRecordCmd_descriptor_;
  metadata.reflection = GuildMusicQueryRecordCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMusicUpdateCmd::kCmdFieldNumber;
const int GuildMusicUpdateCmd::kParamFieldNumber;
const int GuildMusicUpdateCmd::kGuildidFieldNumber;
const int GuildMusicUpdateCmd::kItemFieldNumber;
#endif  // !_MSC_VER

GuildMusicUpdateCmd::GuildMusicUpdateCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GuildMusicUpdateCmd)
}

void GuildMusicUpdateCmd::InitAsDefaultInstance() {
  item_ = const_cast< ::Cmd::MusicItem*>(&::Cmd::MusicItem::default_instance());
}

GuildMusicUpdateCmd::GuildMusicUpdateCmd(const GuildMusicUpdateCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GuildMusicUpdateCmd)
}

void GuildMusicUpdateCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 200;
  param_ = 16;
  guildid_ = GOOGLE_ULONGLONG(0);
  item_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMusicUpdateCmd::~GuildMusicUpdateCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GuildMusicUpdateCmd)
  SharedDtor();
}

void GuildMusicUpdateCmd::SharedDtor() {
  if (this != default_instance_) {
    delete item_;
  }
}

void GuildMusicUpdateCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMusicUpdateCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMusicUpdateCmd_descriptor_;
}

const GuildMusicUpdateCmd& GuildMusicUpdateCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

GuildMusicUpdateCmd* GuildMusicUpdateCmd::default_instance_ = NULL;

GuildMusicUpdateCmd* GuildMusicUpdateCmd::New() const {
  return new GuildMusicUpdateCmd;
}

void GuildMusicUpdateCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 200;
    param_ = 16;
    guildid_ = GOOGLE_ULONGLONG(0);
    if (has_item()) {
      if (item_ != NULL) item_->::Cmd::MusicItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMusicUpdateCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GuildMusicUpdateCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_GUILD_MUSIC_UPDATE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::RecordParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::RecordParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_guildid;
        break;
      }

      // optional uint64 guildid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_guildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_item;
        break;
      }

      // optional .Cmd.MusicItem item = 4;
      case 4: {
        if (tag == 34) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GuildMusicUpdateCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GuildMusicUpdateCmd)
  return false;
#undef DO_
}

void GuildMusicUpdateCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GuildMusicUpdateCmd)
  // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_GUILD_MUSIC_UPDATE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 guildid = 3 [default = 0];
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->guildid(), output);
  }

  // optional .Cmd.MusicItem item = 4;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->item(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GuildMusicUpdateCmd)
}

::google::protobuf::uint8* GuildMusicUpdateCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GuildMusicUpdateCmd)
  // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_GUILD_MUSIC_UPDATE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 guildid = 3 [default = 0];
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->guildid(), target);
  }

  // optional .Cmd.MusicItem item = 4;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->item(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GuildMusicUpdateCmd)
  return target;
}

int GuildMusicUpdateCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_GUILD_MUSIC_UPDATE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 guildid = 3 [default = 0];
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // optional .Cmd.MusicItem item = 4;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMusicUpdateCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMusicUpdateCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMusicUpdateCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMusicUpdateCmd::MergeFrom(const GuildMusicUpdateCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_item()) {
      mutable_item()->::Cmd::MusicItem::MergeFrom(from.item());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMusicUpdateCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMusicUpdateCmd::CopyFrom(const GuildMusicUpdateCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMusicUpdateCmd::IsInitialized() const {

  return true;
}

void GuildMusicUpdateCmd::Swap(GuildMusicUpdateCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(guildid_, other->guildid_);
    std::swap(item_, other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMusicUpdateCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMusicUpdateCmd_descriptor_;
  metadata.reflection = GuildMusicUpdateCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMusicDeleteRecordCmd::kCmdFieldNumber;
const int GuildMusicDeleteRecordCmd::kParamFieldNumber;
const int GuildMusicDeleteRecordCmd::kGuildidFieldNumber;
#endif  // !_MSC_VER

GuildMusicDeleteRecordCmd::GuildMusicDeleteRecordCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GuildMusicDeleteRecordCmd)
}

void GuildMusicDeleteRecordCmd::InitAsDefaultInstance() {
}

GuildMusicDeleteRecordCmd::GuildMusicDeleteRecordCmd(const GuildMusicDeleteRecordCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GuildMusicDeleteRecordCmd)
}

void GuildMusicDeleteRecordCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 200;
  param_ = 17;
  guildid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMusicDeleteRecordCmd::~GuildMusicDeleteRecordCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GuildMusicDeleteRecordCmd)
  SharedDtor();
}

void GuildMusicDeleteRecordCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMusicDeleteRecordCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMusicDeleteRecordCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMusicDeleteRecordCmd_descriptor_;
}

const GuildMusicDeleteRecordCmd& GuildMusicDeleteRecordCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

GuildMusicDeleteRecordCmd* GuildMusicDeleteRecordCmd::default_instance_ = NULL;

GuildMusicDeleteRecordCmd* GuildMusicDeleteRecordCmd::New() const {
  return new GuildMusicDeleteRecordCmd;
}

void GuildMusicDeleteRecordCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 200;
    param_ = 17;
    guildid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMusicDeleteRecordCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GuildMusicDeleteRecordCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_GUILD_MUSIC_DELETE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::RecordParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::RecordParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_guildid;
        break;
      }

      // optional uint64 guildid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_guildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GuildMusicDeleteRecordCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GuildMusicDeleteRecordCmd)
  return false;
#undef DO_
}

void GuildMusicDeleteRecordCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GuildMusicDeleteRecordCmd)
  // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_GUILD_MUSIC_DELETE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 guildid = 3 [default = 0];
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->guildid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GuildMusicDeleteRecordCmd)
}

::google::protobuf::uint8* GuildMusicDeleteRecordCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GuildMusicDeleteRecordCmd)
  // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_GUILD_MUSIC_DELETE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 guildid = 3 [default = 0];
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->guildid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GuildMusicDeleteRecordCmd)
  return target;
}

int GuildMusicDeleteRecordCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_GUILD_MUSIC_DELETE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 guildid = 3 [default = 0];
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMusicDeleteRecordCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMusicDeleteRecordCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMusicDeleteRecordCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMusicDeleteRecordCmd::MergeFrom(const GuildMusicDeleteRecordCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMusicDeleteRecordCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMusicDeleteRecordCmd::CopyFrom(const GuildMusicDeleteRecordCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMusicDeleteRecordCmd::IsInitialized() const {

  return true;
}

void GuildMusicDeleteRecordCmd::Swap(GuildMusicDeleteRecordCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(guildid_, other->guildid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMusicDeleteRecordCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMusicDeleteRecordCmd_descriptor_;
  metadata.reflection = GuildMusicDeleteRecordCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserBaseData::kPlatformidFieldNumber;
const int UserBaseData::kZoneidFieldNumber;
const int UserBaseData::kAccidFieldNumber;
const int UserBaseData::kCharidFieldNumber;
const int UserBaseData::kGuildidFieldNumber;
const int UserBaseData::kNameFieldNumber;
const int UserBaseData::kMapidFieldNumber;
const int UserBaseData::kRolelvFieldNumber;
const int UserBaseData::kRoleexpFieldNumber;
const int UserBaseData::kChargeFieldNumber;
const int UserBaseData::kDiamondFieldNumber;
const int UserBaseData::kSilverFieldNumber;
const int UserBaseData::kGoldFieldNumber;
const int UserBaseData::kGardenFieldNumber;
const int UserBaseData::kFriendshipFieldNumber;
const int UserBaseData::kCreateTimeFieldNumber;
const int UserBaseData::kOnlinetimeFieldNumber;
const int UserBaseData::kOfflinetimeFieldNumber;
const int UserBaseData::kAddictFieldNumber;
const int UserBaseData::kBattletimeFieldNumber;
const int UserBaseData::kBodyFieldNumber;
const int UserBaseData::kAddictTipsTimeFieldNumber;
const int UserBaseData::kGagtimeFieldNumber;
const int UserBaseData::kNologintimeFieldNumber;
const int UserBaseData::kRebattletimeFieldNumber;
const int UserBaseData::kUsedbattletimeFieldNumber;
const int UserBaseData::kHairFieldNumber;
const int UserBaseData::kHaircolorFieldNumber;
const int UserBaseData::kLefthandFieldNumber;
const int UserBaseData::kRighthandFieldNumber;
const int UserBaseData::kHeadFieldNumber;
const int UserBaseData::kBackFieldNumber;
const int UserBaseData::kFaceFieldNumber;
const int UserBaseData::kTailFieldNumber;
const int UserBaseData::kMountFieldNumber;
const int UserBaseData::kTitleFieldNumber;
const int UserBaseData::kEyeFieldNumber;
const int UserBaseData::kPartneridFieldNumber;
const int UserBaseData::kPortraitFieldNumber;
const int UserBaseData::kMouthFieldNumber;
const int UserBaseData::kClothcolorFieldNumber;
const int UserBaseData::kGenderFieldNumber;
const int UserBaseData::kProfessionFieldNumber;
const int UserBaseData::kDestprofessionFieldNumber;
const int UserBaseData::kDestzoneidFieldNumber;
const int UserBaseData::kOriginalzoneidFieldNumber;
const int UserBaseData::kMaxbaselvFieldNumber;
const int UserBaseData::kLockReasonFieldNumber;
const int UserBaseData::kGagReasonFieldNumber;
const int UserBaseData::kQuestmapntfFieldNumber;
const int UserBaseData::kMaincharidFieldNumber;
const int UserBaseData::kMaxproFieldNumber;
#endif  // !_MSC_VER

UserBaseData::UserBaseData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UserBaseData)
}

void UserBaseData::InitAsDefaultInstance() {
}

UserBaseData::UserBaseData(const UserBaseData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UserBaseData)
}

void UserBaseData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  platformid_ = 0u;
  zoneid_ = 0u;
  accid_ = GOOGLE_ULONGLONG(0);
  charid_ = GOOGLE_ULONGLONG(0);
  guildid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mapid_ = 0u;
  rolelv_ = 0u;
  roleexp_ = GOOGLE_ULONGLONG(0);
  charge_ = 0u;
  diamond_ = 0u;
  silver_ = GOOGLE_ULONGLONG(0);
  gold_ = 0u;
  garden_ = 0u;
  friendship_ = 0u;
  createtime_ = 0u;
  onlinetime_ = 0u;
  offlinetime_ = 0u;
  addict_ = 0u;
  battletime_ = 0u;
  body_ = 0u;
  addicttipstime_ = 0u;
  gagtime_ = 0u;
  nologintime_ = 0u;
  rebattletime_ = 0u;
  usedbattletime_ = 0u;
  hair_ = 0u;
  haircolor_ = 0u;
  lefthand_ = 0u;
  righthand_ = 0u;
  head_ = 0u;
  back_ = 0u;
  face_ = 0u;
  tail_ = 0u;
  mount_ = 0u;
  title_ = 0u;
  eye_ = 0u;
  partnerid_ = 0u;
  portrait_ = 0u;
  mouth_ = 0u;
  clothcolor_ = 0u;
  gender_ = 0;
  profession_ = 0;
  destprofession_ = 0;
  destzoneid_ = 0u;
  originalzoneid_ = 0u;
  maxbaselv_ = 0u;
  lock_reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gag_reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  maincharid_ = GOOGLE_ULONGLONG(0);
  maxpro_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserBaseData::~UserBaseData() {
  // @@protoc_insertion_point(destructor:Cmd.UserBaseData)
  SharedDtor();
}

void UserBaseData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (lock_reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lock_reason_;
  }
  if (gag_reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gag_reason_;
  }
  if (this != default_instance_) {
  }
}

void UserBaseData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserBaseData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserBaseData_descriptor_;
}

const UserBaseData& UserBaseData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

UserBaseData* UserBaseData::default_instance_ = NULL;

UserBaseData* UserBaseData::New() const {
  return new UserBaseData;
}

void UserBaseData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserBaseData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(platformid_, guildid_);
    ZR_(mapid_, rolelv_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(roleexp_, createtime_);
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(onlinetime_, nologintime_);
  }
  if (_has_bits_[24 / 32] & 4278190080) {
    ZR_(rebattletime_, back_);
  }
  if (_has_bits_[32 / 32] & 255) {
    ZR_(face_, mouth_);
  }
  if (_has_bits_[40 / 32] & 65280) {
    ZR_(clothcolor_, originalzoneid_);
    maxbaselv_ = 0u;
    if (has_lock_reason()) {
      if (lock_reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        lock_reason_->clear();
      }
    }
  }
  if (_has_bits_[48 / 32] & 851968) {
    if (has_gag_reason()) {
      if (gag_reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gag_reason_->clear();
      }
    }
    maincharid_ = GOOGLE_ULONGLONG(0);
    maxpro_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  questmapntf_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserBaseData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UserBaseData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 platformid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &platformid_)));
          set_has_platformid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_accid;
        break;
      }

      // optional uint64 accid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_accid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &accid_)));
          set_has_accid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_guildid;
        break;
      }

      // optional uint64 guildid = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_guildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_name;
        break;
      }

      // optional string name = 6;
      case 6: {
        if (tag == 50) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_mapid;
        break;
      }

      // optional uint32 mapid = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_rolelv;
        break;
      }

      // optional uint32 rolelv = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_rolelv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rolelv_)));
          set_has_rolelv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_roleexp;
        break;
      }

      // optional uint64 roleexp = 9 [default = 0];
      case 9: {
        if (tag == 72) {
         parse_roleexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleexp_)));
          set_has_roleexp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_charge;
        break;
      }

      // optional uint32 charge = 10 [default = 0];
      case 10: {
        if (tag == 80) {
         parse_charge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charge_)));
          set_has_charge();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_diamond;
        break;
      }

      // optional uint32 diamond = 11 [default = 0];
      case 11: {
        if (tag == 88) {
         parse_diamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &diamond_)));
          set_has_diamond();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_silver;
        break;
      }

      // optional uint64 silver = 12 [default = 0];
      case 12: {
        if (tag == 96) {
         parse_silver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &silver_)));
          set_has_silver();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_gold;
        break;
      }

      // optional uint32 gold = 13 [default = 0];
      case 13: {
        if (tag == 104) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_garden;
        break;
      }

      // optional uint32 garden = 14 [default = 0];
      case 14: {
        if (tag == 112) {
         parse_garden:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &garden_)));
          set_has_garden();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_friendship;
        break;
      }

      // optional uint32 friendship = 15 [default = 0];
      case 15: {
        if (tag == 120) {
         parse_friendship:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &friendship_)));
          set_has_friendship();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_createTime;
        break;
      }

      // optional uint32 createTime = 16 [default = 0];
      case 16: {
        if (tag == 128) {
         parse_createTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_onlinetime;
        break;
      }

      // optional uint32 onlinetime = 17 [default = 0];
      case 17: {
        if (tag == 136) {
         parse_onlinetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &onlinetime_)));
          set_has_onlinetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_offlinetime;
        break;
      }

      // optional uint32 offlinetime = 18 [default = 0];
      case 18: {
        if (tag == 144) {
         parse_offlinetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offlinetime_)));
          set_has_offlinetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_addict;
        break;
      }

      // optional uint32 addict = 19 [default = 0];
      case 19: {
        if (tag == 152) {
         parse_addict:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &addict_)));
          set_has_addict();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_battletime;
        break;
      }

      // optional uint32 battletime = 20 [default = 0];
      case 20: {
        if (tag == 160) {
         parse_battletime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battletime_)));
          set_has_battletime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_body;
        break;
      }

      // optional uint32 body = 21 [default = 0];
      case 21: {
        if (tag == 168) {
         parse_body:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &body_)));
          set_has_body();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_addictTipsTime;
        break;
      }

      // optional uint32 addictTipsTime = 22 [default = 0];
      case 22: {
        if (tag == 176) {
         parse_addictTipsTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &addicttipstime_)));
          set_has_addicttipstime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_gagtime;
        break;
      }

      // optional uint32 gagtime = 23 [default = 0];
      case 23: {
        if (tag == 184) {
         parse_gagtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gagtime_)));
          set_has_gagtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_nologintime;
        break;
      }

      // optional uint32 nologintime = 24 [default = 0];
      case 24: {
        if (tag == 192) {
         parse_nologintime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nologintime_)));
          set_has_nologintime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_rebattletime;
        break;
      }

      // optional uint32 rebattletime = 25 [default = 0];
      case 25: {
        if (tag == 200) {
         parse_rebattletime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rebattletime_)));
          set_has_rebattletime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_usedbattletime;
        break;
      }

      // optional uint32 usedbattletime = 26 [default = 0];
      case 26: {
        if (tag == 208) {
         parse_usedbattletime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usedbattletime_)));
          set_has_usedbattletime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_hair;
        break;
      }

      // optional uint32 hair = 27 [default = 0];
      case 27: {
        if (tag == 216) {
         parse_hair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hair_)));
          set_has_hair();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_haircolor;
        break;
      }

      // optional uint32 haircolor = 28 [default = 0];
      case 28: {
        if (tag == 224) {
         parse_haircolor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &haircolor_)));
          set_has_haircolor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_lefthand;
        break;
      }

      // optional uint32 lefthand = 29 [default = 0];
      case 29: {
        if (tag == 232) {
         parse_lefthand:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lefthand_)));
          set_has_lefthand();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_righthand;
        break;
      }

      // optional uint32 righthand = 30 [default = 0];
      case 30: {
        if (tag == 240) {
         parse_righthand:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &righthand_)));
          set_has_righthand();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_head;
        break;
      }

      // optional uint32 head = 31 [default = 0];
      case 31: {
        if (tag == 248) {
         parse_head:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &head_)));
          set_has_head();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_back;
        break;
      }

      // optional uint32 back = 32 [default = 0];
      case 32: {
        if (tag == 256) {
         parse_back:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &back_)));
          set_has_back();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_face;
        break;
      }

      // optional uint32 face = 33 [default = 0];
      case 33: {
        if (tag == 264) {
         parse_face:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &face_)));
          set_has_face();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(272)) goto parse_tail;
        break;
      }

      // optional uint32 tail = 34 [default = 0];
      case 34: {
        if (tag == 272) {
         parse_tail:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tail_)));
          set_has_tail();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(280)) goto parse_mount;
        break;
      }

      // optional uint32 mount = 35 [default = 0];
      case 35: {
        if (tag == 280) {
         parse_mount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mount_)));
          set_has_mount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(288)) goto parse_title;
        break;
      }

      // optional uint32 title = 36 [default = 0];
      case 36: {
        if (tag == 288) {
         parse_title:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &title_)));
          set_has_title();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(296)) goto parse_eye;
        break;
      }

      // optional uint32 eye = 37 [default = 0];
      case 37: {
        if (tag == 296) {
         parse_eye:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eye_)));
          set_has_eye();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(304)) goto parse_partnerid;
        break;
      }

      // optional uint32 partnerid = 38 [default = 0];
      case 38: {
        if (tag == 304) {
         parse_partnerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &partnerid_)));
          set_has_partnerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(312)) goto parse_portrait;
        break;
      }

      // optional uint32 portrait = 39 [default = 0];
      case 39: {
        if (tag == 312) {
         parse_portrait:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &portrait_)));
          set_has_portrait();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(320)) goto parse_mouth;
        break;
      }

      // optional uint32 mouth = 40 [default = 0];
      case 40: {
        if (tag == 320) {
         parse_mouth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mouth_)));
          set_has_mouth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(328)) goto parse_clothcolor;
        break;
      }

      // optional uint32 clothcolor = 41 [default = 0];
      case 41: {
        if (tag == 328) {
         parse_clothcolor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clothcolor_)));
          set_has_clothcolor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(336)) goto parse_gender;
        break;
      }

      // optional .Cmd.EGender gender = 42 [default = EGENDER_MIN];
      case 42: {
        if (tag == 336) {
         parse_gender:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EGender_IsValid(value)) {
            set_gender(static_cast< ::Cmd::EGender >(value));
          } else {
            mutable_unknown_fields()->AddVarint(42, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(344)) goto parse_profession;
        break;
      }

      // optional .Cmd.EProfession profession = 43 [default = EPROFESSION_MIN];
      case 43: {
        if (tag == 344) {
         parse_profession:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EProfession_IsValid(value)) {
            set_profession(static_cast< ::Cmd::EProfession >(value));
          } else {
            mutable_unknown_fields()->AddVarint(43, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(352)) goto parse_destprofession;
        break;
      }

      // optional .Cmd.EProfession destprofession = 44 [default = EPROFESSION_MIN];
      case 44: {
        if (tag == 352) {
         parse_destprofession:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EProfession_IsValid(value)) {
            set_destprofession(static_cast< ::Cmd::EProfession >(value));
          } else {
            mutable_unknown_fields()->AddVarint(44, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(360)) goto parse_destzoneid;
        break;
      }

      // optional uint32 destzoneid = 45 [default = 0];
      case 45: {
        if (tag == 360) {
         parse_destzoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &destzoneid_)));
          set_has_destzoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(368)) goto parse_originalzoneid;
        break;
      }

      // optional uint32 originalzoneid = 46 [default = 0];
      case 46: {
        if (tag == 368) {
         parse_originalzoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &originalzoneid_)));
          set_has_originalzoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(376)) goto parse_maxbaselv;
        break;
      }

      // optional uint32 maxbaselv = 47 [default = 0];
      case 47: {
        if (tag == 376) {
         parse_maxbaselv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxbaselv_)));
          set_has_maxbaselv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(386)) goto parse_lock_reason;
        break;
      }

      // optional string lock_reason = 48;
      case 48: {
        if (tag == 386) {
         parse_lock_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lock_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lock_reason().data(), this->lock_reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "lock_reason");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(394)) goto parse_gag_reason;
        break;
      }

      // optional string gag_reason = 49;
      case 49: {
        if (tag == 394) {
         parse_gag_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gag_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gag_reason().data(), this->gag_reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gag_reason");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(400)) goto parse_questmapntf;
        break;
      }

      // repeated uint32 questmapntf = 50;
      case 50: {
        if (tag == 400) {
         parse_questmapntf:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 400, input, this->mutable_questmapntf())));
        } else if (tag == 402) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_questmapntf())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(400)) goto parse_questmapntf;
        if (input->ExpectTag(408)) goto parse_maincharid;
        break;
      }

      // optional uint64 maincharid = 51;
      case 51: {
        if (tag == 408) {
         parse_maincharid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &maincharid_)));
          set_has_maincharid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(416)) goto parse_maxpro;
        break;
      }

      // optional uint32 maxpro = 52;
      case 52: {
        if (tag == 416) {
         parse_maxpro:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxpro_)));
          set_has_maxpro();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UserBaseData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UserBaseData)
  return false;
#undef DO_
}

void UserBaseData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UserBaseData)
  // optional uint32 platformid = 1 [default = 0];
  if (has_platformid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->platformid(), output);
  }

  // optional uint32 zoneid = 2 [default = 0];
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zoneid(), output);
  }

  // optional uint64 accid = 3 [default = 0];
  if (has_accid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->accid(), output);
  }

  // optional uint64 charid = 4 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->charid(), output);
  }

  // optional uint64 guildid = 5 [default = 0];
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->guildid(), output);
  }

  // optional string name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->name(), output);
  }

  // optional uint32 mapid = 7 [default = 0];
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->mapid(), output);
  }

  // optional uint32 rolelv = 8 [default = 0];
  if (has_rolelv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->rolelv(), output);
  }

  // optional uint64 roleexp = 9 [default = 0];
  if (has_roleexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->roleexp(), output);
  }

  // optional uint32 charge = 10 [default = 0];
  if (has_charge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->charge(), output);
  }

  // optional uint32 diamond = 11 [default = 0];
  if (has_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->diamond(), output);
  }

  // optional uint64 silver = 12 [default = 0];
  if (has_silver()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->silver(), output);
  }

  // optional uint32 gold = 13 [default = 0];
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->gold(), output);
  }

  // optional uint32 garden = 14 [default = 0];
  if (has_garden()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->garden(), output);
  }

  // optional uint32 friendship = 15 [default = 0];
  if (has_friendship()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->friendship(), output);
  }

  // optional uint32 createTime = 16 [default = 0];
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->createtime(), output);
  }

  // optional uint32 onlinetime = 17 [default = 0];
  if (has_onlinetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->onlinetime(), output);
  }

  // optional uint32 offlinetime = 18 [default = 0];
  if (has_offlinetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->offlinetime(), output);
  }

  // optional uint32 addict = 19 [default = 0];
  if (has_addict()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->addict(), output);
  }

  // optional uint32 battletime = 20 [default = 0];
  if (has_battletime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->battletime(), output);
  }

  // optional uint32 body = 21 [default = 0];
  if (has_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->body(), output);
  }

  // optional uint32 addictTipsTime = 22 [default = 0];
  if (has_addicttipstime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->addicttipstime(), output);
  }

  // optional uint32 gagtime = 23 [default = 0];
  if (has_gagtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->gagtime(), output);
  }

  // optional uint32 nologintime = 24 [default = 0];
  if (has_nologintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->nologintime(), output);
  }

  // optional uint32 rebattletime = 25 [default = 0];
  if (has_rebattletime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->rebattletime(), output);
  }

  // optional uint32 usedbattletime = 26 [default = 0];
  if (has_usedbattletime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->usedbattletime(), output);
  }

  // optional uint32 hair = 27 [default = 0];
  if (has_hair()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->hair(), output);
  }

  // optional uint32 haircolor = 28 [default = 0];
  if (has_haircolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->haircolor(), output);
  }

  // optional uint32 lefthand = 29 [default = 0];
  if (has_lefthand()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->lefthand(), output);
  }

  // optional uint32 righthand = 30 [default = 0];
  if (has_righthand()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->righthand(), output);
  }

  // optional uint32 head = 31 [default = 0];
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->head(), output);
  }

  // optional uint32 back = 32 [default = 0];
  if (has_back()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->back(), output);
  }

  // optional uint32 face = 33 [default = 0];
  if (has_face()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->face(), output);
  }

  // optional uint32 tail = 34 [default = 0];
  if (has_tail()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->tail(), output);
  }

  // optional uint32 mount = 35 [default = 0];
  if (has_mount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(35, this->mount(), output);
  }

  // optional uint32 title = 36 [default = 0];
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(36, this->title(), output);
  }

  // optional uint32 eye = 37 [default = 0];
  if (has_eye()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(37, this->eye(), output);
  }

  // optional uint32 partnerid = 38 [default = 0];
  if (has_partnerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(38, this->partnerid(), output);
  }

  // optional uint32 portrait = 39 [default = 0];
  if (has_portrait()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(39, this->portrait(), output);
  }

  // optional uint32 mouth = 40 [default = 0];
  if (has_mouth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(40, this->mouth(), output);
  }

  // optional uint32 clothcolor = 41 [default = 0];
  if (has_clothcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(41, this->clothcolor(), output);
  }

  // optional .Cmd.EGender gender = 42 [default = EGENDER_MIN];
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      42, this->gender(), output);
  }

  // optional .Cmd.EProfession profession = 43 [default = EPROFESSION_MIN];
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      43, this->profession(), output);
  }

  // optional .Cmd.EProfession destprofession = 44 [default = EPROFESSION_MIN];
  if (has_destprofession()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      44, this->destprofession(), output);
  }

  // optional uint32 destzoneid = 45 [default = 0];
  if (has_destzoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(45, this->destzoneid(), output);
  }

  // optional uint32 originalzoneid = 46 [default = 0];
  if (has_originalzoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(46, this->originalzoneid(), output);
  }

  // optional uint32 maxbaselv = 47 [default = 0];
  if (has_maxbaselv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(47, this->maxbaselv(), output);
  }

  // optional string lock_reason = 48;
  if (has_lock_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lock_reason().data(), this->lock_reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lock_reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      48, this->lock_reason(), output);
  }

  // optional string gag_reason = 49;
  if (has_gag_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gag_reason().data(), this->gag_reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gag_reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      49, this->gag_reason(), output);
  }

  // repeated uint32 questmapntf = 50;
  for (int i = 0; i < this->questmapntf_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      50, this->questmapntf(i), output);
  }

  // optional uint64 maincharid = 51;
  if (has_maincharid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(51, this->maincharid(), output);
  }

  // optional uint32 maxpro = 52;
  if (has_maxpro()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(52, this->maxpro(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UserBaseData)
}

::google::protobuf::uint8* UserBaseData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UserBaseData)
  // optional uint32 platformid = 1 [default = 0];
  if (has_platformid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->platformid(), target);
  }

  // optional uint32 zoneid = 2 [default = 0];
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zoneid(), target);
  }

  // optional uint64 accid = 3 [default = 0];
  if (has_accid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->accid(), target);
  }

  // optional uint64 charid = 4 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->charid(), target);
  }

  // optional uint64 guildid = 5 [default = 0];
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->guildid(), target);
  }

  // optional string name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->name(), target);
  }

  // optional uint32 mapid = 7 [default = 0];
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->mapid(), target);
  }

  // optional uint32 rolelv = 8 [default = 0];
  if (has_rolelv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->rolelv(), target);
  }

  // optional uint64 roleexp = 9 [default = 0];
  if (has_roleexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->roleexp(), target);
  }

  // optional uint32 charge = 10 [default = 0];
  if (has_charge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->charge(), target);
  }

  // optional uint32 diamond = 11 [default = 0];
  if (has_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->diamond(), target);
  }

  // optional uint64 silver = 12 [default = 0];
  if (has_silver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->silver(), target);
  }

  // optional uint32 gold = 13 [default = 0];
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->gold(), target);
  }

  // optional uint32 garden = 14 [default = 0];
  if (has_garden()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->garden(), target);
  }

  // optional uint32 friendship = 15 [default = 0];
  if (has_friendship()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->friendship(), target);
  }

  // optional uint32 createTime = 16 [default = 0];
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->createtime(), target);
  }

  // optional uint32 onlinetime = 17 [default = 0];
  if (has_onlinetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->onlinetime(), target);
  }

  // optional uint32 offlinetime = 18 [default = 0];
  if (has_offlinetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->offlinetime(), target);
  }

  // optional uint32 addict = 19 [default = 0];
  if (has_addict()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->addict(), target);
  }

  // optional uint32 battletime = 20 [default = 0];
  if (has_battletime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->battletime(), target);
  }

  // optional uint32 body = 21 [default = 0];
  if (has_body()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->body(), target);
  }

  // optional uint32 addictTipsTime = 22 [default = 0];
  if (has_addicttipstime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->addicttipstime(), target);
  }

  // optional uint32 gagtime = 23 [default = 0];
  if (has_gagtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->gagtime(), target);
  }

  // optional uint32 nologintime = 24 [default = 0];
  if (has_nologintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->nologintime(), target);
  }

  // optional uint32 rebattletime = 25 [default = 0];
  if (has_rebattletime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->rebattletime(), target);
  }

  // optional uint32 usedbattletime = 26 [default = 0];
  if (has_usedbattletime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->usedbattletime(), target);
  }

  // optional uint32 hair = 27 [default = 0];
  if (has_hair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->hair(), target);
  }

  // optional uint32 haircolor = 28 [default = 0];
  if (has_haircolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->haircolor(), target);
  }

  // optional uint32 lefthand = 29 [default = 0];
  if (has_lefthand()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->lefthand(), target);
  }

  // optional uint32 righthand = 30 [default = 0];
  if (has_righthand()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->righthand(), target);
  }

  // optional uint32 head = 31 [default = 0];
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->head(), target);
  }

  // optional uint32 back = 32 [default = 0];
  if (has_back()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->back(), target);
  }

  // optional uint32 face = 33 [default = 0];
  if (has_face()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(33, this->face(), target);
  }

  // optional uint32 tail = 34 [default = 0];
  if (has_tail()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(34, this->tail(), target);
  }

  // optional uint32 mount = 35 [default = 0];
  if (has_mount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(35, this->mount(), target);
  }

  // optional uint32 title = 36 [default = 0];
  if (has_title()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(36, this->title(), target);
  }

  // optional uint32 eye = 37 [default = 0];
  if (has_eye()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(37, this->eye(), target);
  }

  // optional uint32 partnerid = 38 [default = 0];
  if (has_partnerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(38, this->partnerid(), target);
  }

  // optional uint32 portrait = 39 [default = 0];
  if (has_portrait()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(39, this->portrait(), target);
  }

  // optional uint32 mouth = 40 [default = 0];
  if (has_mouth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(40, this->mouth(), target);
  }

  // optional uint32 clothcolor = 41 [default = 0];
  if (has_clothcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(41, this->clothcolor(), target);
  }

  // optional .Cmd.EGender gender = 42 [default = EGENDER_MIN];
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      42, this->gender(), target);
  }

  // optional .Cmd.EProfession profession = 43 [default = EPROFESSION_MIN];
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      43, this->profession(), target);
  }

  // optional .Cmd.EProfession destprofession = 44 [default = EPROFESSION_MIN];
  if (has_destprofession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      44, this->destprofession(), target);
  }

  // optional uint32 destzoneid = 45 [default = 0];
  if (has_destzoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(45, this->destzoneid(), target);
  }

  // optional uint32 originalzoneid = 46 [default = 0];
  if (has_originalzoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(46, this->originalzoneid(), target);
  }

  // optional uint32 maxbaselv = 47 [default = 0];
  if (has_maxbaselv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(47, this->maxbaselv(), target);
  }

  // optional string lock_reason = 48;
  if (has_lock_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lock_reason().data(), this->lock_reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lock_reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        48, this->lock_reason(), target);
  }

  // optional string gag_reason = 49;
  if (has_gag_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gag_reason().data(), this->gag_reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gag_reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        49, this->gag_reason(), target);
  }

  // repeated uint32 questmapntf = 50;
  for (int i = 0; i < this->questmapntf_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(50, this->questmapntf(i), target);
  }

  // optional uint64 maincharid = 51;
  if (has_maincharid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(51, this->maincharid(), target);
  }

  // optional uint32 maxpro = 52;
  if (has_maxpro()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(52, this->maxpro(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UserBaseData)
  return target;
}

int UserBaseData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 platformid = 1 [default = 0];
    if (has_platformid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->platformid());
    }

    // optional uint32 zoneid = 2 [default = 0];
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint64 accid = 3 [default = 0];
    if (has_accid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->accid());
    }

    // optional uint64 charid = 4 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint64 guildid = 5 [default = 0];
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // optional string name = 6;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 mapid = 7 [default = 0];
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

    // optional uint32 rolelv = 8 [default = 0];
    if (has_rolelv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rolelv());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 roleexp = 9 [default = 0];
    if (has_roleexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleexp());
    }

    // optional uint32 charge = 10 [default = 0];
    if (has_charge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charge());
    }

    // optional uint32 diamond = 11 [default = 0];
    if (has_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->diamond());
    }

    // optional uint64 silver = 12 [default = 0];
    if (has_silver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->silver());
    }

    // optional uint32 gold = 13 [default = 0];
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold());
    }

    // optional uint32 garden = 14 [default = 0];
    if (has_garden()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->garden());
    }

    // optional uint32 friendship = 15 [default = 0];
    if (has_friendship()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->friendship());
    }

    // optional uint32 createTime = 16 [default = 0];
    if (has_createtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->createtime());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 onlinetime = 17 [default = 0];
    if (has_onlinetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->onlinetime());
    }

    // optional uint32 offlinetime = 18 [default = 0];
    if (has_offlinetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offlinetime());
    }

    // optional uint32 addict = 19 [default = 0];
    if (has_addict()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->addict());
    }

    // optional uint32 battletime = 20 [default = 0];
    if (has_battletime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battletime());
    }

    // optional uint32 body = 21 [default = 0];
    if (has_body()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->body());
    }

    // optional uint32 addictTipsTime = 22 [default = 0];
    if (has_addicttipstime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->addicttipstime());
    }

    // optional uint32 gagtime = 23 [default = 0];
    if (has_gagtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gagtime());
    }

    // optional uint32 nologintime = 24 [default = 0];
    if (has_nologintime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nologintime());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 rebattletime = 25 [default = 0];
    if (has_rebattletime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rebattletime());
    }

    // optional uint32 usedbattletime = 26 [default = 0];
    if (has_usedbattletime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usedbattletime());
    }

    // optional uint32 hair = 27 [default = 0];
    if (has_hair()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hair());
    }

    // optional uint32 haircolor = 28 [default = 0];
    if (has_haircolor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->haircolor());
    }

    // optional uint32 lefthand = 29 [default = 0];
    if (has_lefthand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lefthand());
    }

    // optional uint32 righthand = 30 [default = 0];
    if (has_righthand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->righthand());
    }

    // optional uint32 head = 31 [default = 0];
    if (has_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->head());
    }

    // optional uint32 back = 32 [default = 0];
    if (has_back()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->back());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional uint32 face = 33 [default = 0];
    if (has_face()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->face());
    }

    // optional uint32 tail = 34 [default = 0];
    if (has_tail()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tail());
    }

    // optional uint32 mount = 35 [default = 0];
    if (has_mount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mount());
    }

    // optional uint32 title = 36 [default = 0];
    if (has_title()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->title());
    }

    // optional uint32 eye = 37 [default = 0];
    if (has_eye()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eye());
    }

    // optional uint32 partnerid = 38 [default = 0];
    if (has_partnerid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->partnerid());
    }

    // optional uint32 portrait = 39 [default = 0];
    if (has_portrait()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->portrait());
    }

    // optional uint32 mouth = 40 [default = 0];
    if (has_mouth()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mouth());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional uint32 clothcolor = 41 [default = 0];
    if (has_clothcolor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clothcolor());
    }

    // optional .Cmd.EGender gender = 42 [default = EGENDER_MIN];
    if (has_gender()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gender());
    }

    // optional .Cmd.EProfession profession = 43 [default = EPROFESSION_MIN];
    if (has_profession()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->profession());
    }

    // optional .Cmd.EProfession destprofession = 44 [default = EPROFESSION_MIN];
    if (has_destprofession()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->destprofession());
    }

    // optional uint32 destzoneid = 45 [default = 0];
    if (has_destzoneid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->destzoneid());
    }

    // optional uint32 originalzoneid = 46 [default = 0];
    if (has_originalzoneid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->originalzoneid());
    }

    // optional uint32 maxbaselv = 47 [default = 0];
    if (has_maxbaselv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxbaselv());
    }

    // optional string lock_reason = 48;
    if (has_lock_reason()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lock_reason());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional string gag_reason = 49;
    if (has_gag_reason()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gag_reason());
    }

    // optional uint64 maincharid = 51;
    if (has_maincharid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->maincharid());
    }

    // optional uint32 maxpro = 52;
    if (has_maxpro()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxpro());
    }

  }
  // repeated uint32 questmapntf = 50;
  {
    int data_size = 0;
    for (int i = 0; i < this->questmapntf_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->questmapntf(i));
    }
    total_size += 2 * this->questmapntf_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserBaseData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserBaseData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserBaseData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserBaseData::MergeFrom(const UserBaseData& from) {
  GOOGLE_CHECK_NE(&from, this);
  questmapntf_.MergeFrom(from.questmapntf_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_platformid()) {
      set_platformid(from.platformid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_accid()) {
      set_accid(from.accid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_rolelv()) {
      set_rolelv(from.rolelv());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_roleexp()) {
      set_roleexp(from.roleexp());
    }
    if (from.has_charge()) {
      set_charge(from.charge());
    }
    if (from.has_diamond()) {
      set_diamond(from.diamond());
    }
    if (from.has_silver()) {
      set_silver(from.silver());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_garden()) {
      set_garden(from.garden());
    }
    if (from.has_friendship()) {
      set_friendship(from.friendship());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_onlinetime()) {
      set_onlinetime(from.onlinetime());
    }
    if (from.has_offlinetime()) {
      set_offlinetime(from.offlinetime());
    }
    if (from.has_addict()) {
      set_addict(from.addict());
    }
    if (from.has_battletime()) {
      set_battletime(from.battletime());
    }
    if (from.has_body()) {
      set_body(from.body());
    }
    if (from.has_addicttipstime()) {
      set_addicttipstime(from.addicttipstime());
    }
    if (from.has_gagtime()) {
      set_gagtime(from.gagtime());
    }
    if (from.has_nologintime()) {
      set_nologintime(from.nologintime());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_rebattletime()) {
      set_rebattletime(from.rebattletime());
    }
    if (from.has_usedbattletime()) {
      set_usedbattletime(from.usedbattletime());
    }
    if (from.has_hair()) {
      set_hair(from.hair());
    }
    if (from.has_haircolor()) {
      set_haircolor(from.haircolor());
    }
    if (from.has_lefthand()) {
      set_lefthand(from.lefthand());
    }
    if (from.has_righthand()) {
      set_righthand(from.righthand());
    }
    if (from.has_head()) {
      set_head(from.head());
    }
    if (from.has_back()) {
      set_back(from.back());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_face()) {
      set_face(from.face());
    }
    if (from.has_tail()) {
      set_tail(from.tail());
    }
    if (from.has_mount()) {
      set_mount(from.mount());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_eye()) {
      set_eye(from.eye());
    }
    if (from.has_partnerid()) {
      set_partnerid(from.partnerid());
    }
    if (from.has_portrait()) {
      set_portrait(from.portrait());
    }
    if (from.has_mouth()) {
      set_mouth(from.mouth());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_clothcolor()) {
      set_clothcolor(from.clothcolor());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
    if (from.has_destprofession()) {
      set_destprofession(from.destprofession());
    }
    if (from.has_destzoneid()) {
      set_destzoneid(from.destzoneid());
    }
    if (from.has_originalzoneid()) {
      set_originalzoneid(from.originalzoneid());
    }
    if (from.has_maxbaselv()) {
      set_maxbaselv(from.maxbaselv());
    }
    if (from.has_lock_reason()) {
      set_lock_reason(from.lock_reason());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_gag_reason()) {
      set_gag_reason(from.gag_reason());
    }
    if (from.has_maincharid()) {
      set_maincharid(from.maincharid());
    }
    if (from.has_maxpro()) {
      set_maxpro(from.maxpro());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserBaseData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserBaseData::CopyFrom(const UserBaseData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserBaseData::IsInitialized() const {

  return true;
}

void UserBaseData::Swap(UserBaseData* other) {
  if (other != this) {
    std::swap(platformid_, other->platformid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(accid_, other->accid_);
    std::swap(charid_, other->charid_);
    std::swap(guildid_, other->guildid_);
    std::swap(name_, other->name_);
    std::swap(mapid_, other->mapid_);
    std::swap(rolelv_, other->rolelv_);
    std::swap(roleexp_, other->roleexp_);
    std::swap(charge_, other->charge_);
    std::swap(diamond_, other->diamond_);
    std::swap(silver_, other->silver_);
    std::swap(gold_, other->gold_);
    std::swap(garden_, other->garden_);
    std::swap(friendship_, other->friendship_);
    std::swap(createtime_, other->createtime_);
    std::swap(onlinetime_, other->onlinetime_);
    std::swap(offlinetime_, other->offlinetime_);
    std::swap(addict_, other->addict_);
    std::swap(battletime_, other->battletime_);
    std::swap(body_, other->body_);
    std::swap(addicttipstime_, other->addicttipstime_);
    std::swap(gagtime_, other->gagtime_);
    std::swap(nologintime_, other->nologintime_);
    std::swap(rebattletime_, other->rebattletime_);
    std::swap(usedbattletime_, other->usedbattletime_);
    std::swap(hair_, other->hair_);
    std::swap(haircolor_, other->haircolor_);
    std::swap(lefthand_, other->lefthand_);
    std::swap(righthand_, other->righthand_);
    std::swap(head_, other->head_);
    std::swap(back_, other->back_);
    std::swap(face_, other->face_);
    std::swap(tail_, other->tail_);
    std::swap(mount_, other->mount_);
    std::swap(title_, other->title_);
    std::swap(eye_, other->eye_);
    std::swap(partnerid_, other->partnerid_);
    std::swap(portrait_, other->portrait_);
    std::swap(mouth_, other->mouth_);
    std::swap(clothcolor_, other->clothcolor_);
    std::swap(gender_, other->gender_);
    std::swap(profession_, other->profession_);
    std::swap(destprofession_, other->destprofession_);
    std::swap(destzoneid_, other->destzoneid_);
    std::swap(originalzoneid_, other->originalzoneid_);
    std::swap(maxbaselv_, other->maxbaselv_);
    std::swap(lock_reason_, other->lock_reason_);
    std::swap(gag_reason_, other->gag_reason_);
    questmapntf_.Swap(&other->questmapntf_);
    std::swap(maincharid_, other->maincharid_);
    std::swap(maxpro_, other->maxpro_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserBaseData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserBaseData_descriptor_;
  metadata.reflection = UserBaseData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobData::kVersionFieldNumber;
const int BlobData::kUserFieldNumber;
const int BlobData::kFighterFieldNumber;
const int BlobData::kStageFieldNumber;
const int BlobData::kQuestnpcFieldNumber;
const int BlobData::kBufferFieldNumber;
const int BlobData::kPortraitFieldNumber;
const int BlobData::kHairFieldNumber;
const int BlobData::kGearFieldNumber;
const int BlobData::kTipFieldNumber;
const int BlobData::kFollowerFieldNumber;
const int BlobData::kCdFieldNumber;
const int BlobData::kShortcutFieldNumber;
const int BlobData::kEffectFieldNumber;
const int BlobData::kFreyjaFieldNumber;
const int BlobData::kLabFieldNumber;
const int BlobData::kSceneryFieldNumber;
const int BlobData::kCarrierFieldNumber;
const int BlobData::kMenuFieldNumber;
const int BlobData::kShopFieldNumber;
const int BlobData::kKnownmapFieldNumber;
const int BlobData::kIterFieldNumber;
const int BlobData::kHandFieldNumber;
const int BlobData::kShowFieldNumber;
const int BlobData::kTraceFieldNumber;
const int BlobData::kDojoFieldNumber;
const int BlobData::kPackFieldNumber;
const int BlobData::kQuestFieldNumber;
const int BlobData::kTitleFieldNumber;
const int BlobData::kLineFieldNumber;
const int BlobData::kPetFieldNumber;
const int BlobData::kVarFieldNumber;
const int BlobData::kChatmsgFieldNumber;
const int BlobData::kTowerFieldNumber;
const int BlobData::kSealFieldNumber;
const int BlobData::kManualFieldNumber;
const int BlobData::kActionFieldNumber;
const int BlobData::kAttrFieldNumber;
const int BlobData::kOptFieldNumber;
const int BlobData::kHandnpcFieldNumber;
const int BlobData::kCameraFieldNumber;
const int BlobData::kZoneFieldNumber;
const int BlobData::kGuildFieldNumber;
const int BlobData::kTeamFieldNumber;
const int BlobData::kUserzoneFieldNumber;
const int BlobData::kSpeffectFieldNumber;
const int BlobData::kDepositFieldNumber;
const int BlobData::kActivityFieldNumber;
const int BlobData::kChatFieldNumber;
const int BlobData::kBattleFieldNumber;
const int BlobData::kStatvarFieldNumber;
const int BlobData::kSeenpcFieldNumber;
const int BlobData::kWeaponpetFieldNumber;
const int BlobData::kTicketFieldNumber;
const int BlobData::kShareFieldNumber;
const int BlobData::kAchieveFieldNumber;
const int BlobData::kAuthorizeFieldNumber;
const int BlobData::kGuildraidFieldNumber;
const int BlobData::kAstrolabeFieldNumber;
const int BlobData::kSettingsFieldNumber;
const int BlobData::kPhotoFieldNumber;
const int BlobData::kFoodFieldNumber;
const int BlobData::kUserpetFieldNumber;
const int BlobData::kPetadventureFieldNumber;
const int BlobData::kTutortaskFieldNumber;
const int BlobData::kEyeFieldNumber;
const int BlobData::kHighrefineFieldNumber;
const int BlobData::kAceventFieldNumber;
const int BlobData::kBeingFieldNumber;
const int BlobData::kGchallengeFieldNumber;
const int BlobData::kGvgdataFieldNumber;
const int BlobData::kLotteryFieldNumber;
const int BlobData::kServantFieldNumber;
const int BlobData::kProfessionFieldNumber;
const int BlobData::kActivityquestFieldNumber;
const int BlobData::kBoothFieldNumber;
const int BlobData::kExchangeshopFieldNumber;
const int BlobData::kTransferFieldNumber;
const int BlobData::kElementElfFieldNumber;
const int BlobData::kBossFieldNumber;
#endif  // !_MSC_VER

BlobData::BlobData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobData)
}

void BlobData::InitAsDefaultInstance() {
  user_ = const_cast< ::Cmd::BlobUser*>(&::Cmd::BlobUser::default_instance());
  fighter_ = const_cast< ::Cmd::BlobFighter*>(&::Cmd::BlobFighter::default_instance());
  stage_ = const_cast< ::Cmd::BlobStage*>(&::Cmd::BlobStage::default_instance());
  questnpc_ = const_cast< ::Cmd::BlobQuestNpc*>(&::Cmd::BlobQuestNpc::default_instance());
  buffer_ = const_cast< ::Cmd::BlobBuffer*>(&::Cmd::BlobBuffer::default_instance());
  portrait_ = const_cast< ::Cmd::BlobPortrait*>(&::Cmd::BlobPortrait::default_instance());
  hair_ = const_cast< ::Cmd::BlobHair*>(&::Cmd::BlobHair::default_instance());
  gear_ = const_cast< ::Cmd::BlobGears*>(&::Cmd::BlobGears::default_instance());
  tip_ = const_cast< ::Cmd::BlobTips*>(&::Cmd::BlobTips::default_instance());
  follower_ = const_cast< ::Cmd::BlobFollower*>(&::Cmd::BlobFollower::default_instance());
  cd_ = const_cast< ::Cmd::BlobCDTime*>(&::Cmd::BlobCDTime::default_instance());
  shortcut_ = const_cast< ::Cmd::BlobShortcut*>(&::Cmd::BlobShortcut::default_instance());
  effect_ = const_cast< ::Cmd::BlobGMEffects*>(&::Cmd::BlobGMEffects::default_instance());
  freyja_ = const_cast< ::Cmd::BlobFreyja*>(&::Cmd::BlobFreyja::default_instance());
  lab_ = const_cast< ::Cmd::BlobLaboratory*>(&::Cmd::BlobLaboratory::default_instance());
  scenery_ = const_cast< ::Cmd::BlobScenery*>(&::Cmd::BlobScenery::default_instance());
  carrier_ = const_cast< ::Cmd::BlobCarrier*>(&::Cmd::BlobCarrier::default_instance());
  menu_ = const_cast< ::Cmd::BlobMenu*>(&::Cmd::BlobMenu::default_instance());
  shop_ = const_cast< ::Cmd::BlobShopGotItem*>(&::Cmd::BlobShopGotItem::default_instance());
  knownmap_ = const_cast< ::Cmd::BlobKnownMaps*>(&::Cmd::BlobKnownMaps::default_instance());
  iter_ = const_cast< ::Cmd::BlobInter*>(&::Cmd::BlobInter::default_instance());
  hand_ = const_cast< ::Cmd::BlobHands*>(&::Cmd::BlobHands::default_instance());
  show_ = const_cast< ::Cmd::BlobShow*>(&::Cmd::BlobShow::default_instance());
  trace_ = const_cast< ::Cmd::BlobTrace*>(&::Cmd::BlobTrace::default_instance());
  dojo_ = const_cast< ::Cmd::BlobDojo*>(&::Cmd::BlobDojo::default_instance());
  pack_ = const_cast< ::Cmd::BlobPack*>(&::Cmd::BlobPack::default_instance());
  quest_ = const_cast< ::Cmd::BlobQuest*>(&::Cmd::BlobQuest::default_instance());
  title_ = const_cast< ::Cmd::BlobTitle*>(&::Cmd::BlobTitle::default_instance());
  line_ = const_cast< ::Cmd::BlobLine*>(&::Cmd::BlobLine::default_instance());
  pet_ = const_cast< ::Cmd::BlobPet*>(&::Cmd::BlobPet::default_instance());
  var_ = const_cast< ::Cmd::BlobVar*>(&::Cmd::BlobVar::default_instance());
  chatmsg_ = const_cast< ::Cmd::BlobChatMsg*>(&::Cmd::BlobChatMsg::default_instance());
  tower_ = const_cast< ::Cmd::BlobUserTower*>(&::Cmd::BlobUserTower::default_instance());
  seal_ = const_cast< ::Cmd::BlobSeal*>(&::Cmd::BlobSeal::default_instance());
  manual_ = const_cast< ::Cmd::BlobManual*>(&::Cmd::BlobManual::default_instance());
  action_ = const_cast< ::Cmd::BlobFirstActionDone*>(&::Cmd::BlobFirstActionDone::default_instance());
  attr_ = const_cast< ::Cmd::BlobAttr*>(&::Cmd::BlobAttr::default_instance());
  opt_ = const_cast< ::Cmd::BlobOption*>(&::Cmd::BlobOption::default_instance());
  handnpc_ = const_cast< ::Cmd::BlobHandNpc*>(&::Cmd::BlobHandNpc::default_instance());
  camera_ = const_cast< ::Cmd::BlobCamera*>(&::Cmd::BlobCamera::default_instance());
  zone_ = const_cast< ::Cmd::BlobZone*>(&::Cmd::BlobZone::default_instance());
  guild_ = const_cast< ::Cmd::BlobGuild*>(&::Cmd::BlobGuild::default_instance());
  team_ = const_cast< ::Cmd::BlobTeam*>(&::Cmd::BlobTeam::default_instance());
  userzone_ = const_cast< ::Cmd::BlobUserZone*>(&::Cmd::BlobUserZone::default_instance());
  speffect_ = const_cast< ::Cmd::BlobSpEffect*>(&::Cmd::BlobSpEffect::default_instance());
  deposit_ = const_cast< ::Cmd::BlobDeposit*>(&::Cmd::BlobDeposit::default_instance());
  activity_ = const_cast< ::Cmd::BlobActivity*>(&::Cmd::BlobActivity::default_instance());
  chat_ = const_cast< ::Cmd::BlobChat*>(&::Cmd::BlobChat::default_instance());
  battle_ = const_cast< ::Cmd::BlobBattle*>(&::Cmd::BlobBattle::default_instance());
  statvar_ = const_cast< ::Cmd::BlobStatVar*>(&::Cmd::BlobStatVar::default_instance());
  seenpc_ = const_cast< ::Cmd::BlobSeeNpc*>(&::Cmd::BlobSeeNpc::default_instance());
  weaponpet_ = const_cast< ::Cmd::BlobWeaponPet*>(&::Cmd::BlobWeaponPet::default_instance());
  ticket_ = const_cast< ::Cmd::BlobTicket*>(&::Cmd::BlobTicket::default_instance());
  share_ = const_cast< ::Cmd::BlobShare*>(&::Cmd::BlobShare::default_instance());
  achieve_ = const_cast< ::Cmd::BlobAchieve*>(&::Cmd::BlobAchieve::default_instance());
  authorize_ = const_cast< ::Cmd::BlobAuthorize*>(&::Cmd::BlobAuthorize::default_instance());
  guildraid_ = const_cast< ::Cmd::BlobGuildRaid*>(&::Cmd::BlobGuildRaid::default_instance());
  astrolabe_ = const_cast< ::Cmd::BlobAstrolabe*>(&::Cmd::BlobAstrolabe::default_instance());
  settings_ = const_cast< ::Cmd::BlobSettings*>(&::Cmd::BlobSettings::default_instance());
  photo_ = const_cast< ::Cmd::BlobPhoto*>(&::Cmd::BlobPhoto::default_instance());
  food_ = const_cast< ::Cmd::BlobFood*>(&::Cmd::BlobFood::default_instance());
  userpet_ = const_cast< ::Cmd::BlobUserPet*>(&::Cmd::BlobUserPet::default_instance());
  petadventure_ = const_cast< ::Cmd::BlobPetAdventure*>(&::Cmd::BlobPetAdventure::default_instance());
  tutortask_ = const_cast< ::Cmd::BlobTutorTask*>(&::Cmd::BlobTutorTask::default_instance());
  eye_ = const_cast< ::Cmd::BlobEye*>(&::Cmd::BlobEye::default_instance());
  highrefine_ = const_cast< ::Cmd::BlobHighRefine*>(&::Cmd::BlobHighRefine::default_instance());
  acevent_ = const_cast< ::Cmd::BlobActivityEvent*>(&::Cmd::BlobActivityEvent::default_instance());
  being_ = const_cast< ::Cmd::BlobUserBeing*>(&::Cmd::BlobUserBeing::default_instance());
  gchallenge_ = const_cast< ::Cmd::BlobGuildChallenge*>(&::Cmd::BlobGuildChallenge::default_instance());
  gvgdata_ = const_cast< ::Cmd::BlobGvgData*>(&::Cmd::BlobGvgData::default_instance());
  lottery_ = const_cast< ::Cmd::BlobLottery*>(&::Cmd::BlobLottery::default_instance());
  servant_ = const_cast< ::Cmd::BlobServant*>(&::Cmd::BlobServant::default_instance());
  profession_ = const_cast< ::Cmd::BlobProfession*>(&::Cmd::BlobProfession::default_instance());
  activityquest_ = const_cast< ::Cmd::BlobActivityQuest*>(&::Cmd::BlobActivityQuest::default_instance());
  booth_ = const_cast< ::Cmd::BlobBooth*>(&::Cmd::BlobBooth::default_instance());
  exchangeshop_ = const_cast< ::Cmd::BlobExchangeShop*>(&::Cmd::BlobExchangeShop::default_instance());
  transfer_ = const_cast< ::Cmd::BlobTransfer*>(&::Cmd::BlobTransfer::default_instance());
  element_elf_ = const_cast< ::Cmd::BlobElementElfData*>(&::Cmd::BlobElementElfData::default_instance());
  boss_ = const_cast< ::Cmd::BlobBoss*>(&::Cmd::BlobBoss::default_instance());
}

BlobData::BlobData(const BlobData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobData)
}

void BlobData::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  user_ = NULL;
  fighter_ = NULL;
  stage_ = NULL;
  questnpc_ = NULL;
  buffer_ = NULL;
  portrait_ = NULL;
  hair_ = NULL;
  gear_ = NULL;
  tip_ = NULL;
  follower_ = NULL;
  cd_ = NULL;
  shortcut_ = NULL;
  effect_ = NULL;
  freyja_ = NULL;
  lab_ = NULL;
  scenery_ = NULL;
  carrier_ = NULL;
  menu_ = NULL;
  shop_ = NULL;
  knownmap_ = NULL;
  iter_ = NULL;
  hand_ = NULL;
  show_ = NULL;
  trace_ = NULL;
  dojo_ = NULL;
  pack_ = NULL;
  quest_ = NULL;
  title_ = NULL;
  line_ = NULL;
  pet_ = NULL;
  var_ = NULL;
  chatmsg_ = NULL;
  tower_ = NULL;
  seal_ = NULL;
  manual_ = NULL;
  action_ = NULL;
  attr_ = NULL;
  opt_ = NULL;
  handnpc_ = NULL;
  camera_ = NULL;
  zone_ = NULL;
  guild_ = NULL;
  team_ = NULL;
  userzone_ = NULL;
  speffect_ = NULL;
  deposit_ = NULL;
  activity_ = NULL;
  chat_ = NULL;
  battle_ = NULL;
  statvar_ = NULL;
  seenpc_ = NULL;
  weaponpet_ = NULL;
  ticket_ = NULL;
  share_ = NULL;
  achieve_ = NULL;
  authorize_ = NULL;
  guildraid_ = NULL;
  astrolabe_ = NULL;
  settings_ = NULL;
  photo_ = NULL;
  food_ = NULL;
  userpet_ = NULL;
  petadventure_ = NULL;
  tutortask_ = NULL;
  eye_ = NULL;
  highrefine_ = NULL;
  acevent_ = NULL;
  being_ = NULL;
  gchallenge_ = NULL;
  gvgdata_ = NULL;
  lottery_ = NULL;
  servant_ = NULL;
  profession_ = NULL;
  activityquest_ = NULL;
  booth_ = NULL;
  exchangeshop_ = NULL;
  transfer_ = NULL;
  element_elf_ = NULL;
  boss_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobData::~BlobData() {
  // @@protoc_insertion_point(destructor:Cmd.BlobData)
  SharedDtor();
}

void BlobData::SharedDtor() {
  if (this != default_instance_) {
    delete user_;
    delete fighter_;
    delete stage_;
    delete questnpc_;
    delete buffer_;
    delete portrait_;
    delete hair_;
    delete gear_;
    delete tip_;
    delete follower_;
    delete cd_;
    delete shortcut_;
    delete effect_;
    delete freyja_;
    delete lab_;
    delete scenery_;
    delete carrier_;
    delete menu_;
    delete shop_;
    delete knownmap_;
    delete iter_;
    delete hand_;
    delete show_;
    delete trace_;
    delete dojo_;
    delete pack_;
    delete quest_;
    delete title_;
    delete line_;
    delete pet_;
    delete var_;
    delete chatmsg_;
    delete tower_;
    delete seal_;
    delete manual_;
    delete action_;
    delete attr_;
    delete opt_;
    delete handnpc_;
    delete camera_;
    delete zone_;
    delete guild_;
    delete team_;
    delete userzone_;
    delete speffect_;
    delete deposit_;
    delete activity_;
    delete chat_;
    delete battle_;
    delete statvar_;
    delete seenpc_;
    delete weaponpet_;
    delete ticket_;
    delete share_;
    delete achieve_;
    delete authorize_;
    delete guildraid_;
    delete astrolabe_;
    delete settings_;
    delete photo_;
    delete food_;
    delete userpet_;
    delete petadventure_;
    delete tutortask_;
    delete eye_;
    delete highrefine_;
    delete acevent_;
    delete being_;
    delete gchallenge_;
    delete gvgdata_;
    delete lottery_;
    delete servant_;
    delete profession_;
    delete activityquest_;
    delete booth_;
    delete exchangeshop_;
    delete transfer_;
    delete element_elf_;
    delete boss_;
  }
}

void BlobData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobData_descriptor_;
}

const BlobData& BlobData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobData* BlobData::default_instance_ = NULL;

BlobData* BlobData::New() const {
  return new BlobData;
}

void BlobData::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    version_ = 0u;
    if (has_user()) {
      if (user_ != NULL) user_->::Cmd::BlobUser::Clear();
    }
    if (has_fighter()) {
      if (fighter_ != NULL) fighter_->::Cmd::BlobFighter::Clear();
    }
    if (has_stage()) {
      if (stage_ != NULL) stage_->::Cmd::BlobStage::Clear();
    }
    if (has_questnpc()) {
      if (questnpc_ != NULL) questnpc_->::Cmd::BlobQuestNpc::Clear();
    }
    if (has_buffer()) {
      if (buffer_ != NULL) buffer_->::Cmd::BlobBuffer::Clear();
    }
    if (has_portrait()) {
      if (portrait_ != NULL) portrait_->::Cmd::BlobPortrait::Clear();
    }
    if (has_hair()) {
      if (hair_ != NULL) hair_->::Cmd::BlobHair::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    if (has_gear()) {
      if (gear_ != NULL) gear_->::Cmd::BlobGears::Clear();
    }
    if (has_tip()) {
      if (tip_ != NULL) tip_->::Cmd::BlobTips::Clear();
    }
    if (has_follower()) {
      if (follower_ != NULL) follower_->::Cmd::BlobFollower::Clear();
    }
    if (has_cd()) {
      if (cd_ != NULL) cd_->::Cmd::BlobCDTime::Clear();
    }
    if (has_shortcut()) {
      if (shortcut_ != NULL) shortcut_->::Cmd::BlobShortcut::Clear();
    }
    if (has_effect()) {
      if (effect_ != NULL) effect_->::Cmd::BlobGMEffects::Clear();
    }
    if (has_freyja()) {
      if (freyja_ != NULL) freyja_->::Cmd::BlobFreyja::Clear();
    }
    if (has_lab()) {
      if (lab_ != NULL) lab_->::Cmd::BlobLaboratory::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 16711680) {
    if (has_scenery()) {
      if (scenery_ != NULL) scenery_->::Cmd::BlobScenery::Clear();
    }
    if (has_carrier()) {
      if (carrier_ != NULL) carrier_->::Cmd::BlobCarrier::Clear();
    }
    if (has_menu()) {
      if (menu_ != NULL) menu_->::Cmd::BlobMenu::Clear();
    }
    if (has_shop()) {
      if (shop_ != NULL) shop_->::Cmd::BlobShopGotItem::Clear();
    }
    if (has_knownmap()) {
      if (knownmap_ != NULL) knownmap_->::Cmd::BlobKnownMaps::Clear();
    }
    if (has_iter()) {
      if (iter_ != NULL) iter_->::Cmd::BlobInter::Clear();
    }
    if (has_hand()) {
      if (hand_ != NULL) hand_->::Cmd::BlobHands::Clear();
    }
    if (has_show()) {
      if (show_ != NULL) show_->::Cmd::BlobShow::Clear();
    }
  }
  if (_has_bits_[24 / 32] & 4278190080) {
    if (has_trace()) {
      if (trace_ != NULL) trace_->::Cmd::BlobTrace::Clear();
    }
    if (has_dojo()) {
      if (dojo_ != NULL) dojo_->::Cmd::BlobDojo::Clear();
    }
    if (has_pack()) {
      if (pack_ != NULL) pack_->::Cmd::BlobPack::Clear();
    }
    if (has_quest()) {
      if (quest_ != NULL) quest_->::Cmd::BlobQuest::Clear();
    }
    if (has_title()) {
      if (title_ != NULL) title_->::Cmd::BlobTitle::Clear();
    }
    if (has_line()) {
      if (line_ != NULL) line_->::Cmd::BlobLine::Clear();
    }
    if (has_pet()) {
      if (pet_ != NULL) pet_->::Cmd::BlobPet::Clear();
    }
    if (has_var()) {
      if (var_ != NULL) var_->::Cmd::BlobVar::Clear();
    }
  }
  if (_has_bits_[32 / 32] & 255) {
    if (has_chatmsg()) {
      if (chatmsg_ != NULL) chatmsg_->::Cmd::BlobChatMsg::Clear();
    }
    if (has_tower()) {
      if (tower_ != NULL) tower_->::Cmd::BlobUserTower::Clear();
    }
    if (has_seal()) {
      if (seal_ != NULL) seal_->::Cmd::BlobSeal::Clear();
    }
    if (has_manual()) {
      if (manual_ != NULL) manual_->::Cmd::BlobManual::Clear();
    }
    if (has_action()) {
      if (action_ != NULL) action_->::Cmd::BlobFirstActionDone::Clear();
    }
    if (has_attr()) {
      if (attr_ != NULL) attr_->::Cmd::BlobAttr::Clear();
    }
    if (has_opt()) {
      if (opt_ != NULL) opt_->::Cmd::BlobOption::Clear();
    }
    if (has_handnpc()) {
      if (handnpc_ != NULL) handnpc_->::Cmd::BlobHandNpc::Clear();
    }
  }
  if (_has_bits_[40 / 32] & 65280) {
    if (has_camera()) {
      if (camera_ != NULL) camera_->::Cmd::BlobCamera::Clear();
    }
    if (has_zone()) {
      if (zone_ != NULL) zone_->::Cmd::BlobZone::Clear();
    }
    if (has_guild()) {
      if (guild_ != NULL) guild_->::Cmd::BlobGuild::Clear();
    }
    if (has_team()) {
      if (team_ != NULL) team_->::Cmd::BlobTeam::Clear();
    }
    if (has_userzone()) {
      if (userzone_ != NULL) userzone_->::Cmd::BlobUserZone::Clear();
    }
    if (has_speffect()) {
      if (speffect_ != NULL) speffect_->::Cmd::BlobSpEffect::Clear();
    }
    if (has_deposit()) {
      if (deposit_ != NULL) deposit_->::Cmd::BlobDeposit::Clear();
    }
    if (has_activity()) {
      if (activity_ != NULL) activity_->::Cmd::BlobActivity::Clear();
    }
  }
  if (_has_bits_[48 / 32] & 16711680) {
    if (has_chat()) {
      if (chat_ != NULL) chat_->::Cmd::BlobChat::Clear();
    }
    if (has_battle()) {
      if (battle_ != NULL) battle_->::Cmd::BlobBattle::Clear();
    }
    if (has_statvar()) {
      if (statvar_ != NULL) statvar_->::Cmd::BlobStatVar::Clear();
    }
    if (has_seenpc()) {
      if (seenpc_ != NULL) seenpc_->::Cmd::BlobSeeNpc::Clear();
    }
    if (has_weaponpet()) {
      if (weaponpet_ != NULL) weaponpet_->::Cmd::BlobWeaponPet::Clear();
    }
    if (has_ticket()) {
      if (ticket_ != NULL) ticket_->::Cmd::BlobTicket::Clear();
    }
    if (has_share()) {
      if (share_ != NULL) share_->::Cmd::BlobShare::Clear();
    }
    if (has_achieve()) {
      if (achieve_ != NULL) achieve_->::Cmd::BlobAchieve::Clear();
    }
  }
  if (_has_bits_[56 / 32] & 4278190080) {
    if (has_authorize()) {
      if (authorize_ != NULL) authorize_->::Cmd::BlobAuthorize::Clear();
    }
    if (has_guildraid()) {
      if (guildraid_ != NULL) guildraid_->::Cmd::BlobGuildRaid::Clear();
    }
    if (has_astrolabe()) {
      if (astrolabe_ != NULL) astrolabe_->::Cmd::BlobAstrolabe::Clear();
    }
    if (has_settings()) {
      if (settings_ != NULL) settings_->::Cmd::BlobSettings::Clear();
    }
    if (has_photo()) {
      if (photo_ != NULL) photo_->::Cmd::BlobPhoto::Clear();
    }
    if (has_food()) {
      if (food_ != NULL) food_->::Cmd::BlobFood::Clear();
    }
    if (has_userpet()) {
      if (userpet_ != NULL) userpet_->::Cmd::BlobUserPet::Clear();
    }
    if (has_petadventure()) {
      if (petadventure_ != NULL) petadventure_->::Cmd::BlobPetAdventure::Clear();
    }
  }
  if (_has_bits_[64 / 32] & 255) {
    if (has_tutortask()) {
      if (tutortask_ != NULL) tutortask_->::Cmd::BlobTutorTask::Clear();
    }
    if (has_eye()) {
      if (eye_ != NULL) eye_->::Cmd::BlobEye::Clear();
    }
    if (has_highrefine()) {
      if (highrefine_ != NULL) highrefine_->::Cmd::BlobHighRefine::Clear();
    }
    if (has_acevent()) {
      if (acevent_ != NULL) acevent_->::Cmd::BlobActivityEvent::Clear();
    }
    if (has_being()) {
      if (being_ != NULL) being_->::Cmd::BlobUserBeing::Clear();
    }
    if (has_gchallenge()) {
      if (gchallenge_ != NULL) gchallenge_->::Cmd::BlobGuildChallenge::Clear();
    }
    if (has_gvgdata()) {
      if (gvgdata_ != NULL) gvgdata_->::Cmd::BlobGvgData::Clear();
    }
    if (has_lottery()) {
      if (lottery_ != NULL) lottery_->::Cmd::BlobLottery::Clear();
    }
  }
  if (_has_bits_[72 / 32] & 65280) {
    if (has_servant()) {
      if (servant_ != NULL) servant_->::Cmd::BlobServant::Clear();
    }
    if (has_profession()) {
      if (profession_ != NULL) profession_->::Cmd::BlobProfession::Clear();
    }
    if (has_activityquest()) {
      if (activityquest_ != NULL) activityquest_->::Cmd::BlobActivityQuest::Clear();
    }
    if (has_booth()) {
      if (booth_ != NULL) booth_->::Cmd::BlobBooth::Clear();
    }
    if (has_exchangeshop()) {
      if (exchangeshop_ != NULL) exchangeshop_->::Cmd::BlobExchangeShop::Clear();
    }
    if (has_transfer()) {
      if (transfer_ != NULL) transfer_->::Cmd::BlobTransfer::Clear();
    }
    if (has_element_elf()) {
      if (element_elf_ != NULL) element_elf_->::Cmd::BlobElementElfData::Clear();
    }
    if (has_boss()) {
      if (boss_ != NULL) boss_->::Cmd::BlobBoss::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user;
        break;
      }

      // optional .Cmd.BlobUser user = 2;
      case 2: {
        if (tag == 18) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_fighter;
        break;
      }

      // optional .Cmd.BlobFighter fighter = 3;
      case 3: {
        if (tag == 26) {
         parse_fighter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fighter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_stage;
        break;
      }

      // optional .Cmd.BlobStage stage = 4;
      case 4: {
        if (tag == 34) {
         parse_stage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_questnpc;
        break;
      }

      // optional .Cmd.BlobQuestNpc questnpc = 5;
      case 5: {
        if (tag == 42) {
         parse_questnpc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_questnpc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_buffer;
        break;
      }

      // optional .Cmd.BlobBuffer buffer = 6;
      case 6: {
        if (tag == 50) {
         parse_buffer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_portrait;
        break;
      }

      // optional .Cmd.BlobPortrait portrait = 7;
      case 7: {
        if (tag == 58) {
         parse_portrait:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_portrait()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_hair;
        break;
      }

      // optional .Cmd.BlobHair hair = 8;
      case 8: {
        if (tag == 66) {
         parse_hair:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hair()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_gear;
        break;
      }

      // optional .Cmd.BlobGears gear = 9;
      case 9: {
        if (tag == 74) {
         parse_gear:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gear()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_tip;
        break;
      }

      // optional .Cmd.BlobTips tip = 10;
      case 10: {
        if (tag == 82) {
         parse_tip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tip()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_follower;
        break;
      }

      // optional .Cmd.BlobFollower follower = 11;
      case 11: {
        if (tag == 90) {
         parse_follower:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_follower()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_cd;
        break;
      }

      // optional .Cmd.BlobCDTime cd = 12;
      case 12: {
        if (tag == 98) {
         parse_cd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cd()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_shortcut;
        break;
      }

      // optional .Cmd.BlobShortcut shortcut = 13;
      case 13: {
        if (tag == 106) {
         parse_shortcut:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shortcut()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_effect;
        break;
      }

      // optional .Cmd.BlobGMEffects effect = 14;
      case 14: {
        if (tag == 114) {
         parse_effect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_effect()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_freyja;
        break;
      }

      // optional .Cmd.BlobFreyja freyja = 15;
      case 15: {
        if (tag == 122) {
         parse_freyja:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_freyja()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_lab;
        break;
      }

      // optional .Cmd.BlobLaboratory lab = 16;
      case 16: {
        if (tag == 130) {
         parse_lab:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lab()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_scenery;
        break;
      }

      // optional .Cmd.BlobScenery scenery = 17;
      case 17: {
        if (tag == 138) {
         parse_scenery:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scenery()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_carrier;
        break;
      }

      // optional .Cmd.BlobCarrier carrier = 18;
      case 18: {
        if (tag == 146) {
         parse_carrier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_carrier()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_menu;
        break;
      }

      // optional .Cmd.BlobMenu menu = 19;
      case 19: {
        if (tag == 154) {
         parse_menu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_menu()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_shop;
        break;
      }

      // optional .Cmd.BlobShopGotItem shop = 20;
      case 20: {
        if (tag == 162) {
         parse_shop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shop()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_knownmap;
        break;
      }

      // optional .Cmd.BlobKnownMaps knownmap = 21;
      case 21: {
        if (tag == 170) {
         parse_knownmap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_knownmap()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_iter;
        break;
      }

      // optional .Cmd.BlobInter iter = 22;
      case 22: {
        if (tag == 178) {
         parse_iter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_iter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_hand;
        break;
      }

      // optional .Cmd.BlobHands hand = 23;
      case 23: {
        if (tag == 186) {
         parse_hand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hand()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_show;
        break;
      }

      // optional .Cmd.BlobShow show = 24;
      case 24: {
        if (tag == 194) {
         parse_show:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_show()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_trace;
        break;
      }

      // optional .Cmd.BlobTrace trace = 25;
      case 25: {
        if (tag == 202) {
         parse_trace:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trace()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_dojo;
        break;
      }

      // optional .Cmd.BlobDojo dojo = 26;
      case 26: {
        if (tag == 210) {
         parse_dojo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dojo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_pack;
        break;
      }

      // optional .Cmd.BlobPack pack = 27;
      case 27: {
        if (tag == 218) {
         parse_pack:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pack()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(226)) goto parse_quest;
        break;
      }

      // optional .Cmd.BlobQuest quest = 28;
      case 28: {
        if (tag == 226) {
         parse_quest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quest()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(234)) goto parse_title;
        break;
      }

      // optional .Cmd.BlobTitle title = 29;
      case 29: {
        if (tag == 234) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_title()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_line;
        break;
      }

      // optional .Cmd.BlobLine line = 30;
      case 30: {
        if (tag == 242) {
         parse_line:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_line()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(250)) goto parse_pet;
        break;
      }

      // optional .Cmd.BlobPet pet = 31;
      case 31: {
        if (tag == 250) {
         parse_pet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pet()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(258)) goto parse_var;
        break;
      }

      // optional .Cmd.BlobVar var = 32;
      case 32: {
        if (tag == 258) {
         parse_var:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_var()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(266)) goto parse_chatmsg;
        break;
      }

      // optional .Cmd.BlobChatMsg chatmsg = 33;
      case 33: {
        if (tag == 266) {
         parse_chatmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chatmsg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(274)) goto parse_tower;
        break;
      }

      // optional .Cmd.BlobUserTower tower = 34;
      case 34: {
        if (tag == 274) {
         parse_tower:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tower()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(282)) goto parse_seal;
        break;
      }

      // optional .Cmd.BlobSeal seal = 35;
      case 35: {
        if (tag == 282) {
         parse_seal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_seal()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(290)) goto parse_manual;
        break;
      }

      // optional .Cmd.BlobManual manual = 36;
      case 36: {
        if (tag == 290) {
         parse_manual:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_manual()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(298)) goto parse_action;
        break;
      }

      // optional .Cmd.BlobFirstActionDone action = 37;
      case 37: {
        if (tag == 298) {
         parse_action:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_action()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(306)) goto parse_attr;
        break;
      }

      // optional .Cmd.BlobAttr attr = 38;
      case 38: {
        if (tag == 306) {
         parse_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(314)) goto parse_opt;
        break;
      }

      // optional .Cmd.BlobOption opt = 39;
      case 39: {
        if (tag == 314) {
         parse_opt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_opt()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(322)) goto parse_handnpc;
        break;
      }

      // optional .Cmd.BlobHandNpc handnpc = 40;
      case 40: {
        if (tag == 322) {
         parse_handnpc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_handnpc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(330)) goto parse_camera;
        break;
      }

      // optional .Cmd.BlobCamera camera = 41;
      case 41: {
        if (tag == 330) {
         parse_camera:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_camera()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(338)) goto parse_zone;
        break;
      }

      // optional .Cmd.BlobZone zone = 42;
      case 42: {
        if (tag == 338) {
         parse_zone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_zone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(346)) goto parse_guild;
        break;
      }

      // optional .Cmd.BlobGuild guild = 43;
      case 43: {
        if (tag == 346) {
         parse_guild:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guild()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(354)) goto parse_team;
        break;
      }

      // optional .Cmd.BlobTeam team = 44;
      case 44: {
        if (tag == 354) {
         parse_team:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(362)) goto parse_userzone;
        break;
      }

      // optional .Cmd.BlobUserZone userzone = 45;
      case 45: {
        if (tag == 362) {
         parse_userzone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userzone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(370)) goto parse_speffect;
        break;
      }

      // optional .Cmd.BlobSpEffect speffect = 46;
      case 46: {
        if (tag == 370) {
         parse_speffect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_speffect()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(378)) goto parse_deposit;
        break;
      }

      // optional .Cmd.BlobDeposit deposit = 47;
      case 47: {
        if (tag == 378) {
         parse_deposit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deposit()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(386)) goto parse_activity;
        break;
      }

      // optional .Cmd.BlobActivity activity = 48;
      case 48: {
        if (tag == 386) {
         parse_activity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_activity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(410)) goto parse_chat;
        break;
      }

      // optional .Cmd.BlobChat chat = 51;
      case 51: {
        if (tag == 410) {
         parse_chat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(418)) goto parse_battle;
        break;
      }

      // optional .Cmd.BlobBattle battle = 52;
      case 52: {
        if (tag == 418) {
         parse_battle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battle()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(426)) goto parse_statvar;
        break;
      }

      // optional .Cmd.BlobStatVar statvar = 53;
      case 53: {
        if (tag == 426) {
         parse_statvar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_statvar()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(434)) goto parse_seenpc;
        break;
      }

      // optional .Cmd.BlobSeeNpc seenpc = 54;
      case 54: {
        if (tag == 434) {
         parse_seenpc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_seenpc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(442)) goto parse_weaponpet;
        break;
      }

      // optional .Cmd.BlobWeaponPet weaponpet = 55;
      case 55: {
        if (tag == 442) {
         parse_weaponpet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weaponpet()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(450)) goto parse_ticket;
        break;
      }

      // optional .Cmd.BlobTicket ticket = 56;
      case 56: {
        if (tag == 450) {
         parse_ticket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ticket()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(458)) goto parse_share;
        break;
      }

      // optional .Cmd.BlobShare share = 57;
      case 57: {
        if (tag == 458) {
         parse_share:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_share()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(466)) goto parse_achieve;
        break;
      }

      // optional .Cmd.BlobAchieve achieve = 58;
      case 58: {
        if (tag == 466) {
         parse_achieve:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_achieve()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(474)) goto parse_authorize;
        break;
      }

      // optional .Cmd.BlobAuthorize authorize = 59;
      case 59: {
        if (tag == 474) {
         parse_authorize:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_authorize()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(482)) goto parse_guildraid;
        break;
      }

      // optional .Cmd.BlobGuildRaid guildraid = 60;
      case 60: {
        if (tag == 482) {
         parse_guildraid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guildraid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(490)) goto parse_astrolabe;
        break;
      }

      // optional .Cmd.BlobAstrolabe astrolabe = 61;
      case 61: {
        if (tag == 490) {
         parse_astrolabe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_astrolabe()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(498)) goto parse_settings;
        break;
      }

      // optional .Cmd.BlobSettings settings = 62;
      case 62: {
        if (tag == 498) {
         parse_settings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_settings()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(506)) goto parse_photo;
        break;
      }

      // optional .Cmd.BlobPhoto photo = 63;
      case 63: {
        if (tag == 506) {
         parse_photo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_photo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(514)) goto parse_food;
        break;
      }

      // optional .Cmd.BlobFood food = 64;
      case 64: {
        if (tag == 514) {
         parse_food:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_food()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(522)) goto parse_userpet;
        break;
      }

      // optional .Cmd.BlobUserPet userpet = 65;
      case 65: {
        if (tag == 522) {
         parse_userpet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userpet()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(530)) goto parse_petadventure;
        break;
      }

      // optional .Cmd.BlobPetAdventure petadventure = 66;
      case 66: {
        if (tag == 530) {
         parse_petadventure:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_petadventure()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(538)) goto parse_tutortask;
        break;
      }

      // optional .Cmd.BlobTutorTask tutortask = 67;
      case 67: {
        if (tag == 538) {
         parse_tutortask:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tutortask()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(546)) goto parse_eye;
        break;
      }

      // optional .Cmd.BlobEye eye = 68;
      case 68: {
        if (tag == 546) {
         parse_eye:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_eye()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(554)) goto parse_highrefine;
        break;
      }

      // optional .Cmd.BlobHighRefine highrefine = 69;
      case 69: {
        if (tag == 554) {
         parse_highrefine:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_highrefine()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(562)) goto parse_acevent;
        break;
      }

      // optional .Cmd.BlobActivityEvent acevent = 70;
      case 70: {
        if (tag == 562) {
         parse_acevent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_acevent()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(570)) goto parse_being;
        break;
      }

      // optional .Cmd.BlobUserBeing being = 71;
      case 71: {
        if (tag == 570) {
         parse_being:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_being()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(578)) goto parse_gchallenge;
        break;
      }

      // optional .Cmd.BlobGuildChallenge gchallenge = 72;
      case 72: {
        if (tag == 578) {
         parse_gchallenge:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gchallenge()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(586)) goto parse_gvgdata;
        break;
      }

      // optional .Cmd.BlobGvgData gvgdata = 73;
      case 73: {
        if (tag == 586) {
         parse_gvgdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gvgdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(594)) goto parse_lottery;
        break;
      }

      // optional .Cmd.BlobLottery lottery = 74;
      case 74: {
        if (tag == 594) {
         parse_lottery:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lottery()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(602)) goto parse_servant;
        break;
      }

      // optional .Cmd.BlobServant servant = 75;
      case 75: {
        if (tag == 602) {
         parse_servant:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_servant()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(610)) goto parse_profession;
        break;
      }

      // optional .Cmd.BlobProfession profession = 76;
      case 76: {
        if (tag == 610) {
         parse_profession:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_profession()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(618)) goto parse_activityquest;
        break;
      }

      // optional .Cmd.BlobActivityQuest activityquest = 77;
      case 77: {
        if (tag == 618) {
         parse_activityquest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_activityquest()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(634)) goto parse_booth;
        break;
      }

      // optional .Cmd.BlobBooth booth = 79;
      case 79: {
        if (tag == 634) {
         parse_booth:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_booth()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(642)) goto parse_exchangeshop;
        break;
      }

      // optional .Cmd.BlobExchangeShop exchangeshop = 80;
      case 80: {
        if (tag == 642) {
         parse_exchangeshop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exchangeshop()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(650)) goto parse_transfer;
        break;
      }

      // optional .Cmd.BlobTransfer transfer = 81;
      case 81: {
        if (tag == 650) {
         parse_transfer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transfer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(658)) goto parse_element_elf;
        break;
      }

      // optional .Cmd.BlobElementElfData element_elf = 82;
      case 82: {
        if (tag == 658) {
         parse_element_elf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_element_elf()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(666)) goto parse_boss;
        break;
      }

      // optional .Cmd.BlobBoss boss = 83;
      case 83: {
        if (tag == 666) {
         parse_boss:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_boss()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobData)
  return false;
#undef DO_
}

void BlobData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobData)
  // optional uint32 version = 1 [default = 0];
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // optional .Cmd.BlobUser user = 2;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user(), output);
  }

  // optional .Cmd.BlobFighter fighter = 3;
  if (has_fighter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->fighter(), output);
  }

  // optional .Cmd.BlobStage stage = 4;
  if (has_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->stage(), output);
  }

  // optional .Cmd.BlobQuestNpc questnpc = 5;
  if (has_questnpc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->questnpc(), output);
  }

  // optional .Cmd.BlobBuffer buffer = 6;
  if (has_buffer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->buffer(), output);
  }

  // optional .Cmd.BlobPortrait portrait = 7;
  if (has_portrait()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->portrait(), output);
  }

  // optional .Cmd.BlobHair hair = 8;
  if (has_hair()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->hair(), output);
  }

  // optional .Cmd.BlobGears gear = 9;
  if (has_gear()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->gear(), output);
  }

  // optional .Cmd.BlobTips tip = 10;
  if (has_tip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->tip(), output);
  }

  // optional .Cmd.BlobFollower follower = 11;
  if (has_follower()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->follower(), output);
  }

  // optional .Cmd.BlobCDTime cd = 12;
  if (has_cd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->cd(), output);
  }

  // optional .Cmd.BlobShortcut shortcut = 13;
  if (has_shortcut()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->shortcut(), output);
  }

  // optional .Cmd.BlobGMEffects effect = 14;
  if (has_effect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->effect(), output);
  }

  // optional .Cmd.BlobFreyja freyja = 15;
  if (has_freyja()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->freyja(), output);
  }

  // optional .Cmd.BlobLaboratory lab = 16;
  if (has_lab()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->lab(), output);
  }

  // optional .Cmd.BlobScenery scenery = 17;
  if (has_scenery()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->scenery(), output);
  }

  // optional .Cmd.BlobCarrier carrier = 18;
  if (has_carrier()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->carrier(), output);
  }

  // optional .Cmd.BlobMenu menu = 19;
  if (has_menu()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->menu(), output);
  }

  // optional .Cmd.BlobShopGotItem shop = 20;
  if (has_shop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->shop(), output);
  }

  // optional .Cmd.BlobKnownMaps knownmap = 21;
  if (has_knownmap()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->knownmap(), output);
  }

  // optional .Cmd.BlobInter iter = 22;
  if (has_iter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->iter(), output);
  }

  // optional .Cmd.BlobHands hand = 23;
  if (has_hand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->hand(), output);
  }

  // optional .Cmd.BlobShow show = 24;
  if (has_show()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->show(), output);
  }

  // optional .Cmd.BlobTrace trace = 25;
  if (has_trace()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->trace(), output);
  }

  // optional .Cmd.BlobDojo dojo = 26;
  if (has_dojo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->dojo(), output);
  }

  // optional .Cmd.BlobPack pack = 27;
  if (has_pack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->pack(), output);
  }

  // optional .Cmd.BlobQuest quest = 28;
  if (has_quest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, this->quest(), output);
  }

  // optional .Cmd.BlobTitle title = 29;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, this->title(), output);
  }

  // optional .Cmd.BlobLine line = 30;
  if (has_line()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->line(), output);
  }

  // optional .Cmd.BlobPet pet = 31;
  if (has_pet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->pet(), output);
  }

  // optional .Cmd.BlobVar var = 32;
  if (has_var()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->var(), output);
  }

  // optional .Cmd.BlobChatMsg chatmsg = 33;
  if (has_chatmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, this->chatmsg(), output);
  }

  // optional .Cmd.BlobUserTower tower = 34;
  if (has_tower()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, this->tower(), output);
  }

  // optional .Cmd.BlobSeal seal = 35;
  if (has_seal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      35, this->seal(), output);
  }

  // optional .Cmd.BlobManual manual = 36;
  if (has_manual()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      36, this->manual(), output);
  }

  // optional .Cmd.BlobFirstActionDone action = 37;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      37, this->action(), output);
  }

  // optional .Cmd.BlobAttr attr = 38;
  if (has_attr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      38, this->attr(), output);
  }

  // optional .Cmd.BlobOption opt = 39;
  if (has_opt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      39, this->opt(), output);
  }

  // optional .Cmd.BlobHandNpc handnpc = 40;
  if (has_handnpc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, this->handnpc(), output);
  }

  // optional .Cmd.BlobCamera camera = 41;
  if (has_camera()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      41, this->camera(), output);
  }

  // optional .Cmd.BlobZone zone = 42;
  if (has_zone()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      42, this->zone(), output);
  }

  // optional .Cmd.BlobGuild guild = 43;
  if (has_guild()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      43, this->guild(), output);
  }

  // optional .Cmd.BlobTeam team = 44;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      44, this->team(), output);
  }

  // optional .Cmd.BlobUserZone userzone = 45;
  if (has_userzone()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      45, this->userzone(), output);
  }

  // optional .Cmd.BlobSpEffect speffect = 46;
  if (has_speffect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      46, this->speffect(), output);
  }

  // optional .Cmd.BlobDeposit deposit = 47;
  if (has_deposit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      47, this->deposit(), output);
  }

  // optional .Cmd.BlobActivity activity = 48;
  if (has_activity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      48, this->activity(), output);
  }

  // optional .Cmd.BlobChat chat = 51;
  if (has_chat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      51, this->chat(), output);
  }

  // optional .Cmd.BlobBattle battle = 52;
  if (has_battle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      52, this->battle(), output);
  }

  // optional .Cmd.BlobStatVar statvar = 53;
  if (has_statvar()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      53, this->statvar(), output);
  }

  // optional .Cmd.BlobSeeNpc seenpc = 54;
  if (has_seenpc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      54, this->seenpc(), output);
  }

  // optional .Cmd.BlobWeaponPet weaponpet = 55;
  if (has_weaponpet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      55, this->weaponpet(), output);
  }

  // optional .Cmd.BlobTicket ticket = 56;
  if (has_ticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      56, this->ticket(), output);
  }

  // optional .Cmd.BlobShare share = 57;
  if (has_share()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      57, this->share(), output);
  }

  // optional .Cmd.BlobAchieve achieve = 58;
  if (has_achieve()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      58, this->achieve(), output);
  }

  // optional .Cmd.BlobAuthorize authorize = 59;
  if (has_authorize()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      59, this->authorize(), output);
  }

  // optional .Cmd.BlobGuildRaid guildraid = 60;
  if (has_guildraid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      60, this->guildraid(), output);
  }

  // optional .Cmd.BlobAstrolabe astrolabe = 61;
  if (has_astrolabe()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      61, this->astrolabe(), output);
  }

  // optional .Cmd.BlobSettings settings = 62;
  if (has_settings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      62, this->settings(), output);
  }

  // optional .Cmd.BlobPhoto photo = 63;
  if (has_photo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      63, this->photo(), output);
  }

  // optional .Cmd.BlobFood food = 64;
  if (has_food()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      64, this->food(), output);
  }

  // optional .Cmd.BlobUserPet userpet = 65;
  if (has_userpet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      65, this->userpet(), output);
  }

  // optional .Cmd.BlobPetAdventure petadventure = 66;
  if (has_petadventure()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      66, this->petadventure(), output);
  }

  // optional .Cmd.BlobTutorTask tutortask = 67;
  if (has_tutortask()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      67, this->tutortask(), output);
  }

  // optional .Cmd.BlobEye eye = 68;
  if (has_eye()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      68, this->eye(), output);
  }

  // optional .Cmd.BlobHighRefine highrefine = 69;
  if (has_highrefine()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      69, this->highrefine(), output);
  }

  // optional .Cmd.BlobActivityEvent acevent = 70;
  if (has_acevent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      70, this->acevent(), output);
  }

  // optional .Cmd.BlobUserBeing being = 71;
  if (has_being()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      71, this->being(), output);
  }

  // optional .Cmd.BlobGuildChallenge gchallenge = 72;
  if (has_gchallenge()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      72, this->gchallenge(), output);
  }

  // optional .Cmd.BlobGvgData gvgdata = 73;
  if (has_gvgdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      73, this->gvgdata(), output);
  }

  // optional .Cmd.BlobLottery lottery = 74;
  if (has_lottery()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      74, this->lottery(), output);
  }

  // optional .Cmd.BlobServant servant = 75;
  if (has_servant()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      75, this->servant(), output);
  }

  // optional .Cmd.BlobProfession profession = 76;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      76, this->profession(), output);
  }

  // optional .Cmd.BlobActivityQuest activityquest = 77;
  if (has_activityquest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      77, this->activityquest(), output);
  }

  // optional .Cmd.BlobBooth booth = 79;
  if (has_booth()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      79, this->booth(), output);
  }

  // optional .Cmd.BlobExchangeShop exchangeshop = 80;
  if (has_exchangeshop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      80, this->exchangeshop(), output);
  }

  // optional .Cmd.BlobTransfer transfer = 81;
  if (has_transfer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      81, this->transfer(), output);
  }

  // optional .Cmd.BlobElementElfData element_elf = 82;
  if (has_element_elf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      82, this->element_elf(), output);
  }

  // optional .Cmd.BlobBoss boss = 83;
  if (has_boss()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      83, this->boss(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobData)
}

::google::protobuf::uint8* BlobData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobData)
  // optional uint32 version = 1 [default = 0];
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // optional .Cmd.BlobUser user = 2;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user(), target);
  }

  // optional .Cmd.BlobFighter fighter = 3;
  if (has_fighter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->fighter(), target);
  }

  // optional .Cmd.BlobStage stage = 4;
  if (has_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->stage(), target);
  }

  // optional .Cmd.BlobQuestNpc questnpc = 5;
  if (has_questnpc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->questnpc(), target);
  }

  // optional .Cmd.BlobBuffer buffer = 6;
  if (has_buffer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->buffer(), target);
  }

  // optional .Cmd.BlobPortrait portrait = 7;
  if (has_portrait()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->portrait(), target);
  }

  // optional .Cmd.BlobHair hair = 8;
  if (has_hair()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->hair(), target);
  }

  // optional .Cmd.BlobGears gear = 9;
  if (has_gear()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->gear(), target);
  }

  // optional .Cmd.BlobTips tip = 10;
  if (has_tip()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->tip(), target);
  }

  // optional .Cmd.BlobFollower follower = 11;
  if (has_follower()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->follower(), target);
  }

  // optional .Cmd.BlobCDTime cd = 12;
  if (has_cd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->cd(), target);
  }

  // optional .Cmd.BlobShortcut shortcut = 13;
  if (has_shortcut()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->shortcut(), target);
  }

  // optional .Cmd.BlobGMEffects effect = 14;
  if (has_effect()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->effect(), target);
  }

  // optional .Cmd.BlobFreyja freyja = 15;
  if (has_freyja()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->freyja(), target);
  }

  // optional .Cmd.BlobLaboratory lab = 16;
  if (has_lab()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->lab(), target);
  }

  // optional .Cmd.BlobScenery scenery = 17;
  if (has_scenery()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->scenery(), target);
  }

  // optional .Cmd.BlobCarrier carrier = 18;
  if (has_carrier()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->carrier(), target);
  }

  // optional .Cmd.BlobMenu menu = 19;
  if (has_menu()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->menu(), target);
  }

  // optional .Cmd.BlobShopGotItem shop = 20;
  if (has_shop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->shop(), target);
  }

  // optional .Cmd.BlobKnownMaps knownmap = 21;
  if (has_knownmap()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->knownmap(), target);
  }

  // optional .Cmd.BlobInter iter = 22;
  if (has_iter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->iter(), target);
  }

  // optional .Cmd.BlobHands hand = 23;
  if (has_hand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->hand(), target);
  }

  // optional .Cmd.BlobShow show = 24;
  if (has_show()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->show(), target);
  }

  // optional .Cmd.BlobTrace trace = 25;
  if (has_trace()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->trace(), target);
  }

  // optional .Cmd.BlobDojo dojo = 26;
  if (has_dojo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->dojo(), target);
  }

  // optional .Cmd.BlobPack pack = 27;
  if (has_pack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        27, this->pack(), target);
  }

  // optional .Cmd.BlobQuest quest = 28;
  if (has_quest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        28, this->quest(), target);
  }

  // optional .Cmd.BlobTitle title = 29;
  if (has_title()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        29, this->title(), target);
  }

  // optional .Cmd.BlobLine line = 30;
  if (has_line()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->line(), target);
  }

  // optional .Cmd.BlobPet pet = 31;
  if (has_pet()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        31, this->pet(), target);
  }

  // optional .Cmd.BlobVar var = 32;
  if (has_var()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        32, this->var(), target);
  }

  // optional .Cmd.BlobChatMsg chatmsg = 33;
  if (has_chatmsg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        33, this->chatmsg(), target);
  }

  // optional .Cmd.BlobUserTower tower = 34;
  if (has_tower()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        34, this->tower(), target);
  }

  // optional .Cmd.BlobSeal seal = 35;
  if (has_seal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        35, this->seal(), target);
  }

  // optional .Cmd.BlobManual manual = 36;
  if (has_manual()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        36, this->manual(), target);
  }

  // optional .Cmd.BlobFirstActionDone action = 37;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        37, this->action(), target);
  }

  // optional .Cmd.BlobAttr attr = 38;
  if (has_attr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        38, this->attr(), target);
  }

  // optional .Cmd.BlobOption opt = 39;
  if (has_opt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        39, this->opt(), target);
  }

  // optional .Cmd.BlobHandNpc handnpc = 40;
  if (has_handnpc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        40, this->handnpc(), target);
  }

  // optional .Cmd.BlobCamera camera = 41;
  if (has_camera()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        41, this->camera(), target);
  }

  // optional .Cmd.BlobZone zone = 42;
  if (has_zone()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        42, this->zone(), target);
  }

  // optional .Cmd.BlobGuild guild = 43;
  if (has_guild()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        43, this->guild(), target);
  }

  // optional .Cmd.BlobTeam team = 44;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        44, this->team(), target);
  }

  // optional .Cmd.BlobUserZone userzone = 45;
  if (has_userzone()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        45, this->userzone(), target);
  }

  // optional .Cmd.BlobSpEffect speffect = 46;
  if (has_speffect()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        46, this->speffect(), target);
  }

  // optional .Cmd.BlobDeposit deposit = 47;
  if (has_deposit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        47, this->deposit(), target);
  }

  // optional .Cmd.BlobActivity activity = 48;
  if (has_activity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        48, this->activity(), target);
  }

  // optional .Cmd.BlobChat chat = 51;
  if (has_chat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        51, this->chat(), target);
  }

  // optional .Cmd.BlobBattle battle = 52;
  if (has_battle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        52, this->battle(), target);
  }

  // optional .Cmd.BlobStatVar statvar = 53;
  if (has_statvar()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        53, this->statvar(), target);
  }

  // optional .Cmd.BlobSeeNpc seenpc = 54;
  if (has_seenpc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        54, this->seenpc(), target);
  }

  // optional .Cmd.BlobWeaponPet weaponpet = 55;
  if (has_weaponpet()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        55, this->weaponpet(), target);
  }

  // optional .Cmd.BlobTicket ticket = 56;
  if (has_ticket()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        56, this->ticket(), target);
  }

  // optional .Cmd.BlobShare share = 57;
  if (has_share()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        57, this->share(), target);
  }

  // optional .Cmd.BlobAchieve achieve = 58;
  if (has_achieve()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        58, this->achieve(), target);
  }

  // optional .Cmd.BlobAuthorize authorize = 59;
  if (has_authorize()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        59, this->authorize(), target);
  }

  // optional .Cmd.BlobGuildRaid guildraid = 60;
  if (has_guildraid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        60, this->guildraid(), target);
  }

  // optional .Cmd.BlobAstrolabe astrolabe = 61;
  if (has_astrolabe()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        61, this->astrolabe(), target);
  }

  // optional .Cmd.BlobSettings settings = 62;
  if (has_settings()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        62, this->settings(), target);
  }

  // optional .Cmd.BlobPhoto photo = 63;
  if (has_photo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        63, this->photo(), target);
  }

  // optional .Cmd.BlobFood food = 64;
  if (has_food()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        64, this->food(), target);
  }

  // optional .Cmd.BlobUserPet userpet = 65;
  if (has_userpet()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        65, this->userpet(), target);
  }

  // optional .Cmd.BlobPetAdventure petadventure = 66;
  if (has_petadventure()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        66, this->petadventure(), target);
  }

  // optional .Cmd.BlobTutorTask tutortask = 67;
  if (has_tutortask()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        67, this->tutortask(), target);
  }

  // optional .Cmd.BlobEye eye = 68;
  if (has_eye()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        68, this->eye(), target);
  }

  // optional .Cmd.BlobHighRefine highrefine = 69;
  if (has_highrefine()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        69, this->highrefine(), target);
  }

  // optional .Cmd.BlobActivityEvent acevent = 70;
  if (has_acevent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        70, this->acevent(), target);
  }

  // optional .Cmd.BlobUserBeing being = 71;
  if (has_being()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        71, this->being(), target);
  }

  // optional .Cmd.BlobGuildChallenge gchallenge = 72;
  if (has_gchallenge()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        72, this->gchallenge(), target);
  }

  // optional .Cmd.BlobGvgData gvgdata = 73;
  if (has_gvgdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        73, this->gvgdata(), target);
  }

  // optional .Cmd.BlobLottery lottery = 74;
  if (has_lottery()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        74, this->lottery(), target);
  }

  // optional .Cmd.BlobServant servant = 75;
  if (has_servant()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        75, this->servant(), target);
  }

  // optional .Cmd.BlobProfession profession = 76;
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        76, this->profession(), target);
  }

  // optional .Cmd.BlobActivityQuest activityquest = 77;
  if (has_activityquest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        77, this->activityquest(), target);
  }

  // optional .Cmd.BlobBooth booth = 79;
  if (has_booth()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        79, this->booth(), target);
  }

  // optional .Cmd.BlobExchangeShop exchangeshop = 80;
  if (has_exchangeshop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        80, this->exchangeshop(), target);
  }

  // optional .Cmd.BlobTransfer transfer = 81;
  if (has_transfer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        81, this->transfer(), target);
  }

  // optional .Cmd.BlobElementElfData element_elf = 82;
  if (has_element_elf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        82, this->element_elf(), target);
  }

  // optional .Cmd.BlobBoss boss = 83;
  if (has_boss()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        83, this->boss(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobData)
  return target;
}

int BlobData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 version = 1 [default = 0];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional .Cmd.BlobUser user = 2;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }

    // optional .Cmd.BlobFighter fighter = 3;
    if (has_fighter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fighter());
    }

    // optional .Cmd.BlobStage stage = 4;
    if (has_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stage());
    }

    // optional .Cmd.BlobQuestNpc questnpc = 5;
    if (has_questnpc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->questnpc());
    }

    // optional .Cmd.BlobBuffer buffer = 6;
    if (has_buffer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffer());
    }

    // optional .Cmd.BlobPortrait portrait = 7;
    if (has_portrait()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->portrait());
    }

    // optional .Cmd.BlobHair hair = 8;
    if (has_hair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hair());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .Cmd.BlobGears gear = 9;
    if (has_gear()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gear());
    }

    // optional .Cmd.BlobTips tip = 10;
    if (has_tip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tip());
    }

    // optional .Cmd.BlobFollower follower = 11;
    if (has_follower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->follower());
    }

    // optional .Cmd.BlobCDTime cd = 12;
    if (has_cd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cd());
    }

    // optional .Cmd.BlobShortcut shortcut = 13;
    if (has_shortcut()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shortcut());
    }

    // optional .Cmd.BlobGMEffects effect = 14;
    if (has_effect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->effect());
    }

    // optional .Cmd.BlobFreyja freyja = 15;
    if (has_freyja()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->freyja());
    }

    // optional .Cmd.BlobLaboratory lab = 16;
    if (has_lab()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lab());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .Cmd.BlobScenery scenery = 17;
    if (has_scenery()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scenery());
    }

    // optional .Cmd.BlobCarrier carrier = 18;
    if (has_carrier()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->carrier());
    }

    // optional .Cmd.BlobMenu menu = 19;
    if (has_menu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->menu());
    }

    // optional .Cmd.BlobShopGotItem shop = 20;
    if (has_shop()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shop());
    }

    // optional .Cmd.BlobKnownMaps knownmap = 21;
    if (has_knownmap()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->knownmap());
    }

    // optional .Cmd.BlobInter iter = 22;
    if (has_iter()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->iter());
    }

    // optional .Cmd.BlobHands hand = 23;
    if (has_hand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hand());
    }

    // optional .Cmd.BlobShow show = 24;
    if (has_show()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->show());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .Cmd.BlobTrace trace = 25;
    if (has_trace()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trace());
    }

    // optional .Cmd.BlobDojo dojo = 26;
    if (has_dojo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dojo());
    }

    // optional .Cmd.BlobPack pack = 27;
    if (has_pack()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pack());
    }

    // optional .Cmd.BlobQuest quest = 28;
    if (has_quest()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->quest());
    }

    // optional .Cmd.BlobTitle title = 29;
    if (has_title()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->title());
    }

    // optional .Cmd.BlobLine line = 30;
    if (has_line()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->line());
    }

    // optional .Cmd.BlobPet pet = 31;
    if (has_pet()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pet());
    }

    // optional .Cmd.BlobVar var = 32;
    if (has_var()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->var());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional .Cmd.BlobChatMsg chatmsg = 33;
    if (has_chatmsg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chatmsg());
    }

    // optional .Cmd.BlobUserTower tower = 34;
    if (has_tower()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tower());
    }

    // optional .Cmd.BlobSeal seal = 35;
    if (has_seal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->seal());
    }

    // optional .Cmd.BlobManual manual = 36;
    if (has_manual()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->manual());
    }

    // optional .Cmd.BlobFirstActionDone action = 37;
    if (has_action()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->action());
    }

    // optional .Cmd.BlobAttr attr = 38;
    if (has_attr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attr());
    }

    // optional .Cmd.BlobOption opt = 39;
    if (has_opt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->opt());
    }

    // optional .Cmd.BlobHandNpc handnpc = 40;
    if (has_handnpc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->handnpc());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional .Cmd.BlobCamera camera = 41;
    if (has_camera()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->camera());
    }

    // optional .Cmd.BlobZone zone = 42;
    if (has_zone()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->zone());
    }

    // optional .Cmd.BlobGuild guild = 43;
    if (has_guild()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guild());
    }

    // optional .Cmd.BlobTeam team = 44;
    if (has_team()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->team());
    }

    // optional .Cmd.BlobUserZone userzone = 45;
    if (has_userzone()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userzone());
    }

    // optional .Cmd.BlobSpEffect speffect = 46;
    if (has_speffect()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->speffect());
    }

    // optional .Cmd.BlobDeposit deposit = 47;
    if (has_deposit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->deposit());
    }

    // optional .Cmd.BlobActivity activity = 48;
    if (has_activity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->activity());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional .Cmd.BlobChat chat = 51;
    if (has_chat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chat());
    }

    // optional .Cmd.BlobBattle battle = 52;
    if (has_battle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battle());
    }

    // optional .Cmd.BlobStatVar statvar = 53;
    if (has_statvar()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->statvar());
    }

    // optional .Cmd.BlobSeeNpc seenpc = 54;
    if (has_seenpc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->seenpc());
    }

    // optional .Cmd.BlobWeaponPet weaponpet = 55;
    if (has_weaponpet()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->weaponpet());
    }

    // optional .Cmd.BlobTicket ticket = 56;
    if (has_ticket()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ticket());
    }

    // optional .Cmd.BlobShare share = 57;
    if (has_share()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->share());
    }

    // optional .Cmd.BlobAchieve achieve = 58;
    if (has_achieve()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->achieve());
    }

  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional .Cmd.BlobAuthorize authorize = 59;
    if (has_authorize()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->authorize());
    }

    // optional .Cmd.BlobGuildRaid guildraid = 60;
    if (has_guildraid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guildraid());
    }

    // optional .Cmd.BlobAstrolabe astrolabe = 61;
    if (has_astrolabe()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->astrolabe());
    }

    // optional .Cmd.BlobSettings settings = 62;
    if (has_settings()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->settings());
    }

    // optional .Cmd.BlobPhoto photo = 63;
    if (has_photo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->photo());
    }

    // optional .Cmd.BlobFood food = 64;
    if (has_food()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->food());
    }

    // optional .Cmd.BlobUserPet userpet = 65;
    if (has_userpet()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userpet());
    }

    // optional .Cmd.BlobPetAdventure petadventure = 66;
    if (has_petadventure()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->petadventure());
    }

  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    // optional .Cmd.BlobTutorTask tutortask = 67;
    if (has_tutortask()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tutortask());
    }

    // optional .Cmd.BlobEye eye = 68;
    if (has_eye()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->eye());
    }

    // optional .Cmd.BlobHighRefine highrefine = 69;
    if (has_highrefine()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->highrefine());
    }

    // optional .Cmd.BlobActivityEvent acevent = 70;
    if (has_acevent()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->acevent());
    }

    // optional .Cmd.BlobUserBeing being = 71;
    if (has_being()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->being());
    }

    // optional .Cmd.BlobGuildChallenge gchallenge = 72;
    if (has_gchallenge()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gchallenge());
    }

    // optional .Cmd.BlobGvgData gvgdata = 73;
    if (has_gvgdata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gvgdata());
    }

    // optional .Cmd.BlobLottery lottery = 74;
    if (has_lottery()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lottery());
    }

  }
  if (_has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    // optional .Cmd.BlobServant servant = 75;
    if (has_servant()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->servant());
    }

    // optional .Cmd.BlobProfession profession = 76;
    if (has_profession()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->profession());
    }

    // optional .Cmd.BlobActivityQuest activityquest = 77;
    if (has_activityquest()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->activityquest());
    }

    // optional .Cmd.BlobBooth booth = 79;
    if (has_booth()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->booth());
    }

    // optional .Cmd.BlobExchangeShop exchangeshop = 80;
    if (has_exchangeshop()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->exchangeshop());
    }

    // optional .Cmd.BlobTransfer transfer = 81;
    if (has_transfer()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transfer());
    }

    // optional .Cmd.BlobElementElfData element_elf = 82;
    if (has_element_elf()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->element_elf());
    }

    // optional .Cmd.BlobBoss boss = 83;
    if (has_boss()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->boss());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobData::MergeFrom(const BlobData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_user()) {
      mutable_user()->::Cmd::BlobUser::MergeFrom(from.user());
    }
    if (from.has_fighter()) {
      mutable_fighter()->::Cmd::BlobFighter::MergeFrom(from.fighter());
    }
    if (from.has_stage()) {
      mutable_stage()->::Cmd::BlobStage::MergeFrom(from.stage());
    }
    if (from.has_questnpc()) {
      mutable_questnpc()->::Cmd::BlobQuestNpc::MergeFrom(from.questnpc());
    }
    if (from.has_buffer()) {
      mutable_buffer()->::Cmd::BlobBuffer::MergeFrom(from.buffer());
    }
    if (from.has_portrait()) {
      mutable_portrait()->::Cmd::BlobPortrait::MergeFrom(from.portrait());
    }
    if (from.has_hair()) {
      mutable_hair()->::Cmd::BlobHair::MergeFrom(from.hair());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_gear()) {
      mutable_gear()->::Cmd::BlobGears::MergeFrom(from.gear());
    }
    if (from.has_tip()) {
      mutable_tip()->::Cmd::BlobTips::MergeFrom(from.tip());
    }
    if (from.has_follower()) {
      mutable_follower()->::Cmd::BlobFollower::MergeFrom(from.follower());
    }
    if (from.has_cd()) {
      mutable_cd()->::Cmd::BlobCDTime::MergeFrom(from.cd());
    }
    if (from.has_shortcut()) {
      mutable_shortcut()->::Cmd::BlobShortcut::MergeFrom(from.shortcut());
    }
    if (from.has_effect()) {
      mutable_effect()->::Cmd::BlobGMEffects::MergeFrom(from.effect());
    }
    if (from.has_freyja()) {
      mutable_freyja()->::Cmd::BlobFreyja::MergeFrom(from.freyja());
    }
    if (from.has_lab()) {
      mutable_lab()->::Cmd::BlobLaboratory::MergeFrom(from.lab());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_scenery()) {
      mutable_scenery()->::Cmd::BlobScenery::MergeFrom(from.scenery());
    }
    if (from.has_carrier()) {
      mutable_carrier()->::Cmd::BlobCarrier::MergeFrom(from.carrier());
    }
    if (from.has_menu()) {
      mutable_menu()->::Cmd::BlobMenu::MergeFrom(from.menu());
    }
    if (from.has_shop()) {
      mutable_shop()->::Cmd::BlobShopGotItem::MergeFrom(from.shop());
    }
    if (from.has_knownmap()) {
      mutable_knownmap()->::Cmd::BlobKnownMaps::MergeFrom(from.knownmap());
    }
    if (from.has_iter()) {
      mutable_iter()->::Cmd::BlobInter::MergeFrom(from.iter());
    }
    if (from.has_hand()) {
      mutable_hand()->::Cmd::BlobHands::MergeFrom(from.hand());
    }
    if (from.has_show()) {
      mutable_show()->::Cmd::BlobShow::MergeFrom(from.show());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_trace()) {
      mutable_trace()->::Cmd::BlobTrace::MergeFrom(from.trace());
    }
    if (from.has_dojo()) {
      mutable_dojo()->::Cmd::BlobDojo::MergeFrom(from.dojo());
    }
    if (from.has_pack()) {
      mutable_pack()->::Cmd::BlobPack::MergeFrom(from.pack());
    }
    if (from.has_quest()) {
      mutable_quest()->::Cmd::BlobQuest::MergeFrom(from.quest());
    }
    if (from.has_title()) {
      mutable_title()->::Cmd::BlobTitle::MergeFrom(from.title());
    }
    if (from.has_line()) {
      mutable_line()->::Cmd::BlobLine::MergeFrom(from.line());
    }
    if (from.has_pet()) {
      mutable_pet()->::Cmd::BlobPet::MergeFrom(from.pet());
    }
    if (from.has_var()) {
      mutable_var()->::Cmd::BlobVar::MergeFrom(from.var());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_chatmsg()) {
      mutable_chatmsg()->::Cmd::BlobChatMsg::MergeFrom(from.chatmsg());
    }
    if (from.has_tower()) {
      mutable_tower()->::Cmd::BlobUserTower::MergeFrom(from.tower());
    }
    if (from.has_seal()) {
      mutable_seal()->::Cmd::BlobSeal::MergeFrom(from.seal());
    }
    if (from.has_manual()) {
      mutable_manual()->::Cmd::BlobManual::MergeFrom(from.manual());
    }
    if (from.has_action()) {
      mutable_action()->::Cmd::BlobFirstActionDone::MergeFrom(from.action());
    }
    if (from.has_attr()) {
      mutable_attr()->::Cmd::BlobAttr::MergeFrom(from.attr());
    }
    if (from.has_opt()) {
      mutable_opt()->::Cmd::BlobOption::MergeFrom(from.opt());
    }
    if (from.has_handnpc()) {
      mutable_handnpc()->::Cmd::BlobHandNpc::MergeFrom(from.handnpc());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_camera()) {
      mutable_camera()->::Cmd::BlobCamera::MergeFrom(from.camera());
    }
    if (from.has_zone()) {
      mutable_zone()->::Cmd::BlobZone::MergeFrom(from.zone());
    }
    if (from.has_guild()) {
      mutable_guild()->::Cmd::BlobGuild::MergeFrom(from.guild());
    }
    if (from.has_team()) {
      mutable_team()->::Cmd::BlobTeam::MergeFrom(from.team());
    }
    if (from.has_userzone()) {
      mutable_userzone()->::Cmd::BlobUserZone::MergeFrom(from.userzone());
    }
    if (from.has_speffect()) {
      mutable_speffect()->::Cmd::BlobSpEffect::MergeFrom(from.speffect());
    }
    if (from.has_deposit()) {
      mutable_deposit()->::Cmd::BlobDeposit::MergeFrom(from.deposit());
    }
    if (from.has_activity()) {
      mutable_activity()->::Cmd::BlobActivity::MergeFrom(from.activity());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_chat()) {
      mutable_chat()->::Cmd::BlobChat::MergeFrom(from.chat());
    }
    if (from.has_battle()) {
      mutable_battle()->::Cmd::BlobBattle::MergeFrom(from.battle());
    }
    if (from.has_statvar()) {
      mutable_statvar()->::Cmd::BlobStatVar::MergeFrom(from.statvar());
    }
    if (from.has_seenpc()) {
      mutable_seenpc()->::Cmd::BlobSeeNpc::MergeFrom(from.seenpc());
    }
    if (from.has_weaponpet()) {
      mutable_weaponpet()->::Cmd::BlobWeaponPet::MergeFrom(from.weaponpet());
    }
    if (from.has_ticket()) {
      mutable_ticket()->::Cmd::BlobTicket::MergeFrom(from.ticket());
    }
    if (from.has_share()) {
      mutable_share()->::Cmd::BlobShare::MergeFrom(from.share());
    }
    if (from.has_achieve()) {
      mutable_achieve()->::Cmd::BlobAchieve::MergeFrom(from.achieve());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_authorize()) {
      mutable_authorize()->::Cmd::BlobAuthorize::MergeFrom(from.authorize());
    }
    if (from.has_guildraid()) {
      mutable_guildraid()->::Cmd::BlobGuildRaid::MergeFrom(from.guildraid());
    }
    if (from.has_astrolabe()) {
      mutable_astrolabe()->::Cmd::BlobAstrolabe::MergeFrom(from.astrolabe());
    }
    if (from.has_settings()) {
      mutable_settings()->::Cmd::BlobSettings::MergeFrom(from.settings());
    }
    if (from.has_photo()) {
      mutable_photo()->::Cmd::BlobPhoto::MergeFrom(from.photo());
    }
    if (from.has_food()) {
      mutable_food()->::Cmd::BlobFood::MergeFrom(from.food());
    }
    if (from.has_userpet()) {
      mutable_userpet()->::Cmd::BlobUserPet::MergeFrom(from.userpet());
    }
    if (from.has_petadventure()) {
      mutable_petadventure()->::Cmd::BlobPetAdventure::MergeFrom(from.petadventure());
    }
  }
  if (from._has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    if (from.has_tutortask()) {
      mutable_tutortask()->::Cmd::BlobTutorTask::MergeFrom(from.tutortask());
    }
    if (from.has_eye()) {
      mutable_eye()->::Cmd::BlobEye::MergeFrom(from.eye());
    }
    if (from.has_highrefine()) {
      mutable_highrefine()->::Cmd::BlobHighRefine::MergeFrom(from.highrefine());
    }
    if (from.has_acevent()) {
      mutable_acevent()->::Cmd::BlobActivityEvent::MergeFrom(from.acevent());
    }
    if (from.has_being()) {
      mutable_being()->::Cmd::BlobUserBeing::MergeFrom(from.being());
    }
    if (from.has_gchallenge()) {
      mutable_gchallenge()->::Cmd::BlobGuildChallenge::MergeFrom(from.gchallenge());
    }
    if (from.has_gvgdata()) {
      mutable_gvgdata()->::Cmd::BlobGvgData::MergeFrom(from.gvgdata());
    }
    if (from.has_lottery()) {
      mutable_lottery()->::Cmd::BlobLottery::MergeFrom(from.lottery());
    }
  }
  if (from._has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    if (from.has_servant()) {
      mutable_servant()->::Cmd::BlobServant::MergeFrom(from.servant());
    }
    if (from.has_profession()) {
      mutable_profession()->::Cmd::BlobProfession::MergeFrom(from.profession());
    }
    if (from.has_activityquest()) {
      mutable_activityquest()->::Cmd::BlobActivityQuest::MergeFrom(from.activityquest());
    }
    if (from.has_booth()) {
      mutable_booth()->::Cmd::BlobBooth::MergeFrom(from.booth());
    }
    if (from.has_exchangeshop()) {
      mutable_exchangeshop()->::Cmd::BlobExchangeShop::MergeFrom(from.exchangeshop());
    }
    if (from.has_transfer()) {
      mutable_transfer()->::Cmd::BlobTransfer::MergeFrom(from.transfer());
    }
    if (from.has_element_elf()) {
      mutable_element_elf()->::Cmd::BlobElementElfData::MergeFrom(from.element_elf());
    }
    if (from.has_boss()) {
      mutable_boss()->::Cmd::BlobBoss::MergeFrom(from.boss());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobData::CopyFrom(const BlobData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobData::IsInitialized() const {

  if (has_opt()) {
    if (!this->opt().IsInitialized()) return false;
  }
  if (has_statvar()) {
    if (!this->statvar().IsInitialized()) return false;
  }
  if (has_userpet()) {
    if (!this->userpet().IsInitialized()) return false;
  }
  if (has_petadventure()) {
    if (!this->petadventure().IsInitialized()) return false;
  }
  if (has_profession()) {
    if (!this->profession().IsInitialized()) return false;
  }
  return true;
}

void BlobData::Swap(BlobData* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(user_, other->user_);
    std::swap(fighter_, other->fighter_);
    std::swap(stage_, other->stage_);
    std::swap(questnpc_, other->questnpc_);
    std::swap(buffer_, other->buffer_);
    std::swap(portrait_, other->portrait_);
    std::swap(hair_, other->hair_);
    std::swap(gear_, other->gear_);
    std::swap(tip_, other->tip_);
    std::swap(follower_, other->follower_);
    std::swap(cd_, other->cd_);
    std::swap(shortcut_, other->shortcut_);
    std::swap(effect_, other->effect_);
    std::swap(freyja_, other->freyja_);
    std::swap(lab_, other->lab_);
    std::swap(scenery_, other->scenery_);
    std::swap(carrier_, other->carrier_);
    std::swap(menu_, other->menu_);
    std::swap(shop_, other->shop_);
    std::swap(knownmap_, other->knownmap_);
    std::swap(iter_, other->iter_);
    std::swap(hand_, other->hand_);
    std::swap(show_, other->show_);
    std::swap(trace_, other->trace_);
    std::swap(dojo_, other->dojo_);
    std::swap(pack_, other->pack_);
    std::swap(quest_, other->quest_);
    std::swap(title_, other->title_);
    std::swap(line_, other->line_);
    std::swap(pet_, other->pet_);
    std::swap(var_, other->var_);
    std::swap(chatmsg_, other->chatmsg_);
    std::swap(tower_, other->tower_);
    std::swap(seal_, other->seal_);
    std::swap(manual_, other->manual_);
    std::swap(action_, other->action_);
    std::swap(attr_, other->attr_);
    std::swap(opt_, other->opt_);
    std::swap(handnpc_, other->handnpc_);
    std::swap(camera_, other->camera_);
    std::swap(zone_, other->zone_);
    std::swap(guild_, other->guild_);
    std::swap(team_, other->team_);
    std::swap(userzone_, other->userzone_);
    std::swap(speffect_, other->speffect_);
    std::swap(deposit_, other->deposit_);
    std::swap(activity_, other->activity_);
    std::swap(chat_, other->chat_);
    std::swap(battle_, other->battle_);
    std::swap(statvar_, other->statvar_);
    std::swap(seenpc_, other->seenpc_);
    std::swap(weaponpet_, other->weaponpet_);
    std::swap(ticket_, other->ticket_);
    std::swap(share_, other->share_);
    std::swap(achieve_, other->achieve_);
    std::swap(authorize_, other->authorize_);
    std::swap(guildraid_, other->guildraid_);
    std::swap(astrolabe_, other->astrolabe_);
    std::swap(settings_, other->settings_);
    std::swap(photo_, other->photo_);
    std::swap(food_, other->food_);
    std::swap(userpet_, other->userpet_);
    std::swap(petadventure_, other->petadventure_);
    std::swap(tutortask_, other->tutortask_);
    std::swap(eye_, other->eye_);
    std::swap(highrefine_, other->highrefine_);
    std::swap(acevent_, other->acevent_);
    std::swap(being_, other->being_);
    std::swap(gchallenge_, other->gchallenge_);
    std::swap(gvgdata_, other->gvgdata_);
    std::swap(lottery_, other->lottery_);
    std::swap(servant_, other->servant_);
    std::swap(profession_, other->profession_);
    std::swap(activityquest_, other->activityquest_);
    std::swap(booth_, other->booth_);
    std::swap(exchangeshop_, other->exchangeshop_);
    std::swap(transfer_, other->transfer_);
    std::swap(element_elf_, other->element_elf_);
    std::swap(boss_, other->boss_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_has_bits_[2], other->_has_bits_[2]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobData_descriptor_;
  metadata.reflection = BlobData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserAccData::kNologintimeFieldNumber;
#endif  // !_MSC_VER

UserAccData::UserAccData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UserAccData)
}

void UserAccData::InitAsDefaultInstance() {
}

UserAccData::UserAccData(const UserAccData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UserAccData)
}

void UserAccData::SharedCtor() {
  _cached_size_ = 0;
  nologintime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserAccData::~UserAccData() {
  // @@protoc_insertion_point(destructor:Cmd.UserAccData)
  SharedDtor();
}

void UserAccData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserAccData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserAccData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserAccData_descriptor_;
}

const UserAccData& UserAccData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

UserAccData* UserAccData::default_instance_ = NULL;

UserAccData* UserAccData::New() const {
  return new UserAccData;
}

void UserAccData::Clear() {
  nologintime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserAccData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UserAccData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 nologintime = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nologintime_)));
          set_has_nologintime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UserAccData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UserAccData)
  return false;
#undef DO_
}

void UserAccData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UserAccData)
  // optional uint32 nologintime = 1 [default = 0];
  if (has_nologintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->nologintime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UserAccData)
}

::google::protobuf::uint8* UserAccData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UserAccData)
  // optional uint32 nologintime = 1 [default = 0];
  if (has_nologintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->nologintime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UserAccData)
  return target;
}

int UserAccData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 nologintime = 1 [default = 0];
    if (has_nologintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nologintime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserAccData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserAccData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserAccData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserAccData::MergeFrom(const UserAccData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nologintime()) {
      set_nologintime(from.nologintime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserAccData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserAccData::CopyFrom(const UserAccData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserAccData::IsInitialized() const {

  return true;
}

void UserAccData::Swap(UserAccData* other) {
  if (other != this) {
    std::swap(nologintime_, other->nologintime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserAccData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserAccData_descriptor_;
  metadata.reflection = UserAccData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobAccData::kUserFieldNumber;
const int BlobAccData::kCreditFieldNumber;
const int BlobAccData::kShopFieldNumber;
const int BlobAccData::kVarFieldNumber;
const int BlobAccData::kManualFieldNumber;
const int BlobAccData::kFoodFieldNumber;
const int BlobAccData::kQuestFieldNumber;
const int BlobAccData::kAchieveFieldNumber;
const int BlobAccData::kTitleFieldNumber;
const int BlobAccData::kSceneryFieldNumber;
const int BlobAccData::kMenuFieldNumber;
const int BlobAccData::kAceventFieldNumber;
const int BlobAccData::kPhotoFieldNumber;
const int BlobAccData::kPortraitFieldNumber;
const int BlobAccData::kQuestnpcFieldNumber;
const int BlobAccData::kPetworkFieldNumber;
const int BlobAccData::kSkillFieldNumber;
const int BlobAccData::kServantFieldNumber;
const int BlobAccData::kRecordFieldNumber;
const int BlobAccData::kPackFieldNumber;
const int BlobAccData::kLotteryFieldNumber;
#endif  // !_MSC_VER

BlobAccData::BlobAccData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobAccData)
}

void BlobAccData::InitAsDefaultInstance() {
  user_ = const_cast< ::Cmd::BlobAccUser*>(&::Cmd::BlobAccUser::default_instance());
  credit_ = const_cast< ::Cmd::BlobNewCredit*>(&::Cmd::BlobNewCredit::default_instance());
  shop_ = const_cast< ::Cmd::BlobShopGotItem*>(&::Cmd::BlobShopGotItem::default_instance());
  var_ = const_cast< ::Cmd::BlobAccVar*>(&::Cmd::BlobAccVar::default_instance());
  manual_ = const_cast< ::Cmd::BlobManual*>(&::Cmd::BlobManual::default_instance());
  food_ = const_cast< ::Cmd::BlobFood*>(&::Cmd::BlobFood::default_instance());
  quest_ = const_cast< ::Cmd::BlobQuest*>(&::Cmd::BlobQuest::default_instance());
  achieve_ = const_cast< ::Cmd::BlobAchieve*>(&::Cmd::BlobAchieve::default_instance());
  title_ = const_cast< ::Cmd::BlobTitle*>(&::Cmd::BlobTitle::default_instance());
  scenery_ = const_cast< ::Cmd::BlobScenery*>(&::Cmd::BlobScenery::default_instance());
  menu_ = const_cast< ::Cmd::BlobMenu*>(&::Cmd::BlobMenu::default_instance());
  acevent_ = const_cast< ::Cmd::BlobActivityEvent*>(&::Cmd::BlobActivityEvent::default_instance());
  photo_ = const_cast< ::Cmd::BlobUnsolvedPhoto*>(&::Cmd::BlobUnsolvedPhoto::default_instance());
  portrait_ = const_cast< ::Cmd::BlobPortrait*>(&::Cmd::BlobPortrait::default_instance());
  questnpc_ = const_cast< ::Cmd::BlobQuestNpc*>(&::Cmd::BlobQuestNpc::default_instance());
  petwork_ = const_cast< ::Cmd::BlobPetWork*>(&::Cmd::BlobPetWork::default_instance());
  skill_ = const_cast< ::Cmd::BlobShareSkill*>(&::Cmd::BlobShareSkill::default_instance());
  servant_ = const_cast< ::Cmd::BlobServant*>(&::Cmd::BlobServant::default_instance());
  record_ = const_cast< ::Cmd::BlobRecordInfo*>(&::Cmd::BlobRecordInfo::default_instance());
  pack_ = const_cast< ::Cmd::BlobPack*>(&::Cmd::BlobPack::default_instance());
  lottery_ = const_cast< ::Cmd::BlobLottery*>(&::Cmd::BlobLottery::default_instance());
}

BlobAccData::BlobAccData(const BlobAccData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobAccData)
}

void BlobAccData::SharedCtor() {
  _cached_size_ = 0;
  user_ = NULL;
  credit_ = NULL;
  shop_ = NULL;
  var_ = NULL;
  manual_ = NULL;
  food_ = NULL;
  quest_ = NULL;
  achieve_ = NULL;
  title_ = NULL;
  scenery_ = NULL;
  menu_ = NULL;
  acevent_ = NULL;
  photo_ = NULL;
  portrait_ = NULL;
  questnpc_ = NULL;
  petwork_ = NULL;
  skill_ = NULL;
  servant_ = NULL;
  record_ = NULL;
  pack_ = NULL;
  lottery_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobAccData::~BlobAccData() {
  // @@protoc_insertion_point(destructor:Cmd.BlobAccData)
  SharedDtor();
}

void BlobAccData::SharedDtor() {
  if (this != default_instance_) {
    delete user_;
    delete credit_;
    delete shop_;
    delete var_;
    delete manual_;
    delete food_;
    delete quest_;
    delete achieve_;
    delete title_;
    delete scenery_;
    delete menu_;
    delete acevent_;
    delete photo_;
    delete portrait_;
    delete questnpc_;
    delete petwork_;
    delete skill_;
    delete servant_;
    delete record_;
    delete pack_;
    delete lottery_;
  }
}

void BlobAccData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobAccData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobAccData_descriptor_;
}

const BlobAccData& BlobAccData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobAccData* BlobAccData::default_instance_ = NULL;

BlobAccData* BlobAccData::New() const {
  return new BlobAccData;
}

void BlobAccData::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_user()) {
      if (user_ != NULL) user_->::Cmd::BlobAccUser::Clear();
    }
    if (has_credit()) {
      if (credit_ != NULL) credit_->::Cmd::BlobNewCredit::Clear();
    }
    if (has_shop()) {
      if (shop_ != NULL) shop_->::Cmd::BlobShopGotItem::Clear();
    }
    if (has_var()) {
      if (var_ != NULL) var_->::Cmd::BlobAccVar::Clear();
    }
    if (has_manual()) {
      if (manual_ != NULL) manual_->::Cmd::BlobManual::Clear();
    }
    if (has_food()) {
      if (food_ != NULL) food_->::Cmd::BlobFood::Clear();
    }
    if (has_quest()) {
      if (quest_ != NULL) quest_->::Cmd::BlobQuest::Clear();
    }
    if (has_achieve()) {
      if (achieve_ != NULL) achieve_->::Cmd::BlobAchieve::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    if (has_title()) {
      if (title_ != NULL) title_->::Cmd::BlobTitle::Clear();
    }
    if (has_scenery()) {
      if (scenery_ != NULL) scenery_->::Cmd::BlobScenery::Clear();
    }
    if (has_menu()) {
      if (menu_ != NULL) menu_->::Cmd::BlobMenu::Clear();
    }
    if (has_acevent()) {
      if (acevent_ != NULL) acevent_->::Cmd::BlobActivityEvent::Clear();
    }
    if (has_photo()) {
      if (photo_ != NULL) photo_->::Cmd::BlobUnsolvedPhoto::Clear();
    }
    if (has_portrait()) {
      if (portrait_ != NULL) portrait_->::Cmd::BlobPortrait::Clear();
    }
    if (has_questnpc()) {
      if (questnpc_ != NULL) questnpc_->::Cmd::BlobQuestNpc::Clear();
    }
    if (has_petwork()) {
      if (petwork_ != NULL) petwork_->::Cmd::BlobPetWork::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 2031616) {
    if (has_skill()) {
      if (skill_ != NULL) skill_->::Cmd::BlobShareSkill::Clear();
    }
    if (has_servant()) {
      if (servant_ != NULL) servant_->::Cmd::BlobServant::Clear();
    }
    if (has_record()) {
      if (record_ != NULL) record_->::Cmd::BlobRecordInfo::Clear();
    }
    if (has_pack()) {
      if (pack_ != NULL) pack_->::Cmd::BlobPack::Clear();
    }
    if (has_lottery()) {
      if (lottery_ != NULL) lottery_->::Cmd::BlobLottery::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobAccData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobAccData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.BlobAccUser user = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_credit;
        break;
      }

      // optional .Cmd.BlobNewCredit credit = 2;
      case 2: {
        if (tag == 18) {
         parse_credit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_credit()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_shop;
        break;
      }

      // optional .Cmd.BlobShopGotItem shop = 3;
      case 3: {
        if (tag == 26) {
         parse_shop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shop()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_var;
        break;
      }

      // optional .Cmd.BlobAccVar var = 4;
      case 4: {
        if (tag == 34) {
         parse_var:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_var()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_manual;
        break;
      }

      // optional .Cmd.BlobManual manual = 5;
      case 5: {
        if (tag == 42) {
         parse_manual:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_manual()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_food;
        break;
      }

      // optional .Cmd.BlobFood food = 6;
      case 6: {
        if (tag == 50) {
         parse_food:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_food()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_quest;
        break;
      }

      // optional .Cmd.BlobQuest quest = 7;
      case 7: {
        if (tag == 58) {
         parse_quest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quest()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_achieve;
        break;
      }

      // optional .Cmd.BlobAchieve achieve = 8;
      case 8: {
        if (tag == 66) {
         parse_achieve:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_achieve()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_title;
        break;
      }

      // optional .Cmd.BlobTitle title = 9;
      case 9: {
        if (tag == 74) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_title()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_scenery;
        break;
      }

      // optional .Cmd.BlobScenery scenery = 10;
      case 10: {
        if (tag == 82) {
         parse_scenery:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scenery()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_menu;
        break;
      }

      // optional .Cmd.BlobMenu menu = 11;
      case 11: {
        if (tag == 90) {
         parse_menu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_menu()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_acevent;
        break;
      }

      // optional .Cmd.BlobActivityEvent acevent = 12;
      case 12: {
        if (tag == 98) {
         parse_acevent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_acevent()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_photo;
        break;
      }

      // optional .Cmd.BlobUnsolvedPhoto photo = 13;
      case 13: {
        if (tag == 106) {
         parse_photo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_photo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_portrait;
        break;
      }

      // optional .Cmd.BlobPortrait portrait = 14;
      case 14: {
        if (tag == 114) {
         parse_portrait:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_portrait()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_questnpc;
        break;
      }

      // optional .Cmd.BlobQuestNpc questnpc = 15;
      case 15: {
        if (tag == 122) {
         parse_questnpc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_questnpc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_petwork;
        break;
      }

      // optional .Cmd.BlobPetWork petwork = 16;
      case 16: {
        if (tag == 130) {
         parse_petwork:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_petwork()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_skill;
        break;
      }

      // optional .Cmd.BlobShareSkill skill = 17;
      case 17: {
        if (tag == 138) {
         parse_skill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skill()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_servant;
        break;
      }

      // optional .Cmd.BlobServant servant = 18;
      case 18: {
        if (tag == 146) {
         parse_servant:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_servant()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_record;
        break;
      }

      // optional .Cmd.BlobRecordInfo record = 19;
      case 19: {
        if (tag == 154) {
         parse_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_record()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_pack;
        break;
      }

      // optional .Cmd.BlobPack pack = 20;
      case 20: {
        if (tag == 162) {
         parse_pack:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pack()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_lottery;
        break;
      }

      // optional .Cmd.BlobLottery lottery = 21;
      case 21: {
        if (tag == 170) {
         parse_lottery:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lottery()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobAccData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobAccData)
  return false;
#undef DO_
}

void BlobAccData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobAccData)
  // optional .Cmd.BlobAccUser user = 1;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->user(), output);
  }

  // optional .Cmd.BlobNewCredit credit = 2;
  if (has_credit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->credit(), output);
  }

  // optional .Cmd.BlobShopGotItem shop = 3;
  if (has_shop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->shop(), output);
  }

  // optional .Cmd.BlobAccVar var = 4;
  if (has_var()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->var(), output);
  }

  // optional .Cmd.BlobManual manual = 5;
  if (has_manual()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->manual(), output);
  }

  // optional .Cmd.BlobFood food = 6;
  if (has_food()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->food(), output);
  }

  // optional .Cmd.BlobQuest quest = 7;
  if (has_quest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->quest(), output);
  }

  // optional .Cmd.BlobAchieve achieve = 8;
  if (has_achieve()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->achieve(), output);
  }

  // optional .Cmd.BlobTitle title = 9;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->title(), output);
  }

  // optional .Cmd.BlobScenery scenery = 10;
  if (has_scenery()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->scenery(), output);
  }

  // optional .Cmd.BlobMenu menu = 11;
  if (has_menu()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->menu(), output);
  }

  // optional .Cmd.BlobActivityEvent acevent = 12;
  if (has_acevent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->acevent(), output);
  }

  // optional .Cmd.BlobUnsolvedPhoto photo = 13;
  if (has_photo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->photo(), output);
  }

  // optional .Cmd.BlobPortrait portrait = 14;
  if (has_portrait()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->portrait(), output);
  }

  // optional .Cmd.BlobQuestNpc questnpc = 15;
  if (has_questnpc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->questnpc(), output);
  }

  // optional .Cmd.BlobPetWork petwork = 16;
  if (has_petwork()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->petwork(), output);
  }

  // optional .Cmd.BlobShareSkill skill = 17;
  if (has_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->skill(), output);
  }

  // optional .Cmd.BlobServant servant = 18;
  if (has_servant()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->servant(), output);
  }

  // optional .Cmd.BlobRecordInfo record = 19;
  if (has_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->record(), output);
  }

  // optional .Cmd.BlobPack pack = 20;
  if (has_pack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->pack(), output);
  }

  // optional .Cmd.BlobLottery lottery = 21;
  if (has_lottery()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->lottery(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobAccData)
}

::google::protobuf::uint8* BlobAccData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobAccData)
  // optional .Cmd.BlobAccUser user = 1;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->user(), target);
  }

  // optional .Cmd.BlobNewCredit credit = 2;
  if (has_credit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->credit(), target);
  }

  // optional .Cmd.BlobShopGotItem shop = 3;
  if (has_shop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->shop(), target);
  }

  // optional .Cmd.BlobAccVar var = 4;
  if (has_var()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->var(), target);
  }

  // optional .Cmd.BlobManual manual = 5;
  if (has_manual()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->manual(), target);
  }

  // optional .Cmd.BlobFood food = 6;
  if (has_food()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->food(), target);
  }

  // optional .Cmd.BlobQuest quest = 7;
  if (has_quest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->quest(), target);
  }

  // optional .Cmd.BlobAchieve achieve = 8;
  if (has_achieve()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->achieve(), target);
  }

  // optional .Cmd.BlobTitle title = 9;
  if (has_title()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->title(), target);
  }

  // optional .Cmd.BlobScenery scenery = 10;
  if (has_scenery()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->scenery(), target);
  }

  // optional .Cmd.BlobMenu menu = 11;
  if (has_menu()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->menu(), target);
  }

  // optional .Cmd.BlobActivityEvent acevent = 12;
  if (has_acevent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->acevent(), target);
  }

  // optional .Cmd.BlobUnsolvedPhoto photo = 13;
  if (has_photo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->photo(), target);
  }

  // optional .Cmd.BlobPortrait portrait = 14;
  if (has_portrait()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->portrait(), target);
  }

  // optional .Cmd.BlobQuestNpc questnpc = 15;
  if (has_questnpc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->questnpc(), target);
  }

  // optional .Cmd.BlobPetWork petwork = 16;
  if (has_petwork()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->petwork(), target);
  }

  // optional .Cmd.BlobShareSkill skill = 17;
  if (has_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->skill(), target);
  }

  // optional .Cmd.BlobServant servant = 18;
  if (has_servant()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->servant(), target);
  }

  // optional .Cmd.BlobRecordInfo record = 19;
  if (has_record()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->record(), target);
  }

  // optional .Cmd.BlobPack pack = 20;
  if (has_pack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->pack(), target);
  }

  // optional .Cmd.BlobLottery lottery = 21;
  if (has_lottery()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->lottery(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobAccData)
  return target;
}

int BlobAccData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.BlobAccUser user = 1;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }

    // optional .Cmd.BlobNewCredit credit = 2;
    if (has_credit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->credit());
    }

    // optional .Cmd.BlobShopGotItem shop = 3;
    if (has_shop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shop());
    }

    // optional .Cmd.BlobAccVar var = 4;
    if (has_var()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->var());
    }

    // optional .Cmd.BlobManual manual = 5;
    if (has_manual()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->manual());
    }

    // optional .Cmd.BlobFood food = 6;
    if (has_food()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->food());
    }

    // optional .Cmd.BlobQuest quest = 7;
    if (has_quest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->quest());
    }

    // optional .Cmd.BlobAchieve achieve = 8;
    if (has_achieve()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->achieve());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .Cmd.BlobTitle title = 9;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->title());
    }

    // optional .Cmd.BlobScenery scenery = 10;
    if (has_scenery()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scenery());
    }

    // optional .Cmd.BlobMenu menu = 11;
    if (has_menu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->menu());
    }

    // optional .Cmd.BlobActivityEvent acevent = 12;
    if (has_acevent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->acevent());
    }

    // optional .Cmd.BlobUnsolvedPhoto photo = 13;
    if (has_photo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->photo());
    }

    // optional .Cmd.BlobPortrait portrait = 14;
    if (has_portrait()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->portrait());
    }

    // optional .Cmd.BlobQuestNpc questnpc = 15;
    if (has_questnpc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->questnpc());
    }

    // optional .Cmd.BlobPetWork petwork = 16;
    if (has_petwork()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->petwork());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .Cmd.BlobShareSkill skill = 17;
    if (has_skill()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skill());
    }

    // optional .Cmd.BlobServant servant = 18;
    if (has_servant()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->servant());
    }

    // optional .Cmd.BlobRecordInfo record = 19;
    if (has_record()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->record());
    }

    // optional .Cmd.BlobPack pack = 20;
    if (has_pack()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pack());
    }

    // optional .Cmd.BlobLottery lottery = 21;
    if (has_lottery()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lottery());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobAccData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobAccData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobAccData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobAccData::MergeFrom(const BlobAccData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user()) {
      mutable_user()->::Cmd::BlobAccUser::MergeFrom(from.user());
    }
    if (from.has_credit()) {
      mutable_credit()->::Cmd::BlobNewCredit::MergeFrom(from.credit());
    }
    if (from.has_shop()) {
      mutable_shop()->::Cmd::BlobShopGotItem::MergeFrom(from.shop());
    }
    if (from.has_var()) {
      mutable_var()->::Cmd::BlobAccVar::MergeFrom(from.var());
    }
    if (from.has_manual()) {
      mutable_manual()->::Cmd::BlobManual::MergeFrom(from.manual());
    }
    if (from.has_food()) {
      mutable_food()->::Cmd::BlobFood::MergeFrom(from.food());
    }
    if (from.has_quest()) {
      mutable_quest()->::Cmd::BlobQuest::MergeFrom(from.quest());
    }
    if (from.has_achieve()) {
      mutable_achieve()->::Cmd::BlobAchieve::MergeFrom(from.achieve());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_title()) {
      mutable_title()->::Cmd::BlobTitle::MergeFrom(from.title());
    }
    if (from.has_scenery()) {
      mutable_scenery()->::Cmd::BlobScenery::MergeFrom(from.scenery());
    }
    if (from.has_menu()) {
      mutable_menu()->::Cmd::BlobMenu::MergeFrom(from.menu());
    }
    if (from.has_acevent()) {
      mutable_acevent()->::Cmd::BlobActivityEvent::MergeFrom(from.acevent());
    }
    if (from.has_photo()) {
      mutable_photo()->::Cmd::BlobUnsolvedPhoto::MergeFrom(from.photo());
    }
    if (from.has_portrait()) {
      mutable_portrait()->::Cmd::BlobPortrait::MergeFrom(from.portrait());
    }
    if (from.has_questnpc()) {
      mutable_questnpc()->::Cmd::BlobQuestNpc::MergeFrom(from.questnpc());
    }
    if (from.has_petwork()) {
      mutable_petwork()->::Cmd::BlobPetWork::MergeFrom(from.petwork());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_skill()) {
      mutable_skill()->::Cmd::BlobShareSkill::MergeFrom(from.skill());
    }
    if (from.has_servant()) {
      mutable_servant()->::Cmd::BlobServant::MergeFrom(from.servant());
    }
    if (from.has_record()) {
      mutable_record()->::Cmd::BlobRecordInfo::MergeFrom(from.record());
    }
    if (from.has_pack()) {
      mutable_pack()->::Cmd::BlobPack::MergeFrom(from.pack());
    }
    if (from.has_lottery()) {
      mutable_lottery()->::Cmd::BlobLottery::MergeFrom(from.lottery());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobAccData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobAccData::CopyFrom(const BlobAccData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobAccData::IsInitialized() const {

  if (has_record()) {
    if (!this->record().IsInitialized()) return false;
  }
  return true;
}

void BlobAccData::Swap(BlobAccData* other) {
  if (other != this) {
    std::swap(user_, other->user_);
    std::swap(credit_, other->credit_);
    std::swap(shop_, other->shop_);
    std::swap(var_, other->var_);
    std::swap(manual_, other->manual_);
    std::swap(food_, other->food_);
    std::swap(quest_, other->quest_);
    std::swap(achieve_, other->achieve_);
    std::swap(title_, other->title_);
    std::swap(scenery_, other->scenery_);
    std::swap(menu_, other->menu_);
    std::swap(acevent_, other->acevent_);
    std::swap(photo_, other->photo_);
    std::swap(portrait_, other->portrait_);
    std::swap(questnpc_, other->questnpc_);
    std::swap(petwork_, other->petwork_);
    std::swap(skill_, other->skill_);
    std::swap(servant_, other->servant_);
    std::swap(record_, other->record_);
    std::swap(pack_, other->pack_);
    std::swap(lottery_, other->lottery_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobAccData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobAccData_descriptor_;
  metadata.reflection = BlobAccData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobAccUser::kAuguryrewardFieldNumber;
const int BlobAccUser::kMaxbaselvFieldNumber;
const int BlobAccUser::kMaxbaselvResettimeFieldNumber;
const int BlobAccUser::kMd5SFieldNumber;
const int BlobAccUser::kAccjoyFieldNumber;
const int BlobAccUser::kShownpcsFieldNumber;
const int BlobAccUser::kCharPrimaryIdFieldNumber;
const int BlobAccUser::kPatchversionFieldNumber;
#endif  // !_MSC_VER

BlobAccUser::BlobAccUser()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobAccUser)
}

void BlobAccUser::InitAsDefaultInstance() {
}

BlobAccUser::BlobAccUser(const BlobAccUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobAccUser)
}

void BlobAccUser::SharedCtor() {
  _cached_size_ = 0;
  auguryreward_ = 0u;
  maxbaselv_ = 0u;
  maxbaselv_resettime_ = 0u;
  char_primary_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobAccUser::~BlobAccUser() {
  // @@protoc_insertion_point(destructor:Cmd.BlobAccUser)
  SharedDtor();
}

void BlobAccUser::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobAccUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobAccUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobAccUser_descriptor_;
}

const BlobAccUser& BlobAccUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobAccUser* BlobAccUser::default_instance_ = NULL;

BlobAccUser* BlobAccUser::New() const {
  return new BlobAccUser;
}

void BlobAccUser::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BlobAccUser*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 71) {
    ZR_(auguryreward_, maxbaselv_);
    maxbaselv_resettime_ = 0u;
    char_primary_id_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  md5s_.Clear();
  accjoy_.Clear();
  shownpcs_.Clear();
  patchversion_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobAccUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobAccUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 auguryreward = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &auguryreward_)));
          set_has_auguryreward();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_maxbaselv;
        break;
      }

      // optional uint32 maxbaselv = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_maxbaselv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxbaselv_)));
          set_has_maxbaselv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_maxbaselv_resettime;
        break;
      }

      // optional uint32 maxbaselv_resettime = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_maxbaselv_resettime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxbaselv_resettime_)));
          set_has_maxbaselv_resettime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_md5s;
        break;
      }

      // repeated .Cmd.PhotoMd5 md5s = 4;
      case 4: {
        if (tag == 34) {
         parse_md5s:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_md5s()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_md5s;
        if (input->ExpectTag(42)) goto parse_accjoy;
        break;
      }

      // repeated .Cmd.BlobJoyData accjoy = 5;
      case 5: {
        if (tag == 42) {
         parse_accjoy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_accjoy()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_accjoy;
        if (input->ExpectTag(48)) goto parse_shownpcs;
        break;
      }

      // repeated uint32 shownpcs = 6;
      case 6: {
        if (tag == 48) {
         parse_shownpcs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_shownpcs())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_shownpcs())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_shownpcs;
        if (input->ExpectTag(56)) goto parse_char_primary_id;
        break;
      }

      // optional uint64 char_primary_id = 7;
      case 7: {
        if (tag == 56) {
         parse_char_primary_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &char_primary_id_)));
          set_has_char_primary_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_patchversion;
        break;
      }

      // repeated uint64 patchversion = 8;
      case 8: {
        if (tag == 64) {
         parse_patchversion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 64, input, this->mutable_patchversion())));
        } else if (tag == 66) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_patchversion())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_patchversion;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobAccUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobAccUser)
  return false;
#undef DO_
}

void BlobAccUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobAccUser)
  // optional uint32 auguryreward = 1 [default = 0];
  if (has_auguryreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->auguryreward(), output);
  }

  // optional uint32 maxbaselv = 2 [default = 0];
  if (has_maxbaselv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->maxbaselv(), output);
  }

  // optional uint32 maxbaselv_resettime = 3 [default = 0];
  if (has_maxbaselv_resettime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->maxbaselv_resettime(), output);
  }

  // repeated .Cmd.PhotoMd5 md5s = 4;
  for (int i = 0; i < this->md5s_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->md5s(i), output);
  }

  // repeated .Cmd.BlobJoyData accjoy = 5;
  for (int i = 0; i < this->accjoy_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->accjoy(i), output);
  }

  // repeated uint32 shownpcs = 6;
  for (int i = 0; i < this->shownpcs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->shownpcs(i), output);
  }

  // optional uint64 char_primary_id = 7;
  if (has_char_primary_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->char_primary_id(), output);
  }

  // repeated uint64 patchversion = 8;
  for (int i = 0; i < this->patchversion_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      8, this->patchversion(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobAccUser)
}

::google::protobuf::uint8* BlobAccUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobAccUser)
  // optional uint32 auguryreward = 1 [default = 0];
  if (has_auguryreward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->auguryreward(), target);
  }

  // optional uint32 maxbaselv = 2 [default = 0];
  if (has_maxbaselv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->maxbaselv(), target);
  }

  // optional uint32 maxbaselv_resettime = 3 [default = 0];
  if (has_maxbaselv_resettime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->maxbaselv_resettime(), target);
  }

  // repeated .Cmd.PhotoMd5 md5s = 4;
  for (int i = 0; i < this->md5s_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->md5s(i), target);
  }

  // repeated .Cmd.BlobJoyData accjoy = 5;
  for (int i = 0; i < this->accjoy_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->accjoy(i), target);
  }

  // repeated uint32 shownpcs = 6;
  for (int i = 0; i < this->shownpcs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->shownpcs(i), target);
  }

  // optional uint64 char_primary_id = 7;
  if (has_char_primary_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->char_primary_id(), target);
  }

  // repeated uint64 patchversion = 8;
  for (int i = 0; i < this->patchversion_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(8, this->patchversion(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobAccUser)
  return target;
}

int BlobAccUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 auguryreward = 1 [default = 0];
    if (has_auguryreward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->auguryreward());
    }

    // optional uint32 maxbaselv = 2 [default = 0];
    if (has_maxbaselv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxbaselv());
    }

    // optional uint32 maxbaselv_resettime = 3 [default = 0];
    if (has_maxbaselv_resettime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxbaselv_resettime());
    }

    // optional uint64 char_primary_id = 7;
    if (has_char_primary_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->char_primary_id());
    }

  }
  // repeated .Cmd.PhotoMd5 md5s = 4;
  total_size += 1 * this->md5s_size();
  for (int i = 0; i < this->md5s_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->md5s(i));
  }

  // repeated .Cmd.BlobJoyData accjoy = 5;
  total_size += 1 * this->accjoy_size();
  for (int i = 0; i < this->accjoy_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->accjoy(i));
  }

  // repeated uint32 shownpcs = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->shownpcs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->shownpcs(i));
    }
    total_size += 1 * this->shownpcs_size() + data_size;
  }

  // repeated uint64 patchversion = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->patchversion_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->patchversion(i));
    }
    total_size += 1 * this->patchversion_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobAccUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobAccUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobAccUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobAccUser::MergeFrom(const BlobAccUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  md5s_.MergeFrom(from.md5s_);
  accjoy_.MergeFrom(from.accjoy_);
  shownpcs_.MergeFrom(from.shownpcs_);
  patchversion_.MergeFrom(from.patchversion_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_auguryreward()) {
      set_auguryreward(from.auguryreward());
    }
    if (from.has_maxbaselv()) {
      set_maxbaselv(from.maxbaselv());
    }
    if (from.has_maxbaselv_resettime()) {
      set_maxbaselv_resettime(from.maxbaselv_resettime());
    }
    if (from.has_char_primary_id()) {
      set_char_primary_id(from.char_primary_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobAccUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobAccUser::CopyFrom(const BlobAccUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobAccUser::IsInitialized() const {

  return true;
}

void BlobAccUser::Swap(BlobAccUser* other) {
  if (other != this) {
    std::swap(auguryreward_, other->auguryreward_);
    std::swap(maxbaselv_, other->maxbaselv_);
    std::swap(maxbaselv_resettime_, other->maxbaselv_resettime_);
    md5s_.Swap(&other->md5s_);
    accjoy_.Swap(&other->accjoy_);
    shownpcs_.Swap(&other->shownpcs_);
    std::swap(char_primary_id_, other->char_primary_id_);
    patchversion_.Swap(&other->patchversion_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobAccUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobAccUser_descriptor_;
  metadata.reflection = BlobAccUser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobUnsolvedPhoto::kPhotosFieldNumber;
#endif  // !_MSC_VER

BlobUnsolvedPhoto::BlobUnsolvedPhoto()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobUnsolvedPhoto)
}

void BlobUnsolvedPhoto::InitAsDefaultInstance() {
}

BlobUnsolvedPhoto::BlobUnsolvedPhoto(const BlobUnsolvedPhoto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobUnsolvedPhoto)
}

void BlobUnsolvedPhoto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobUnsolvedPhoto::~BlobUnsolvedPhoto() {
  // @@protoc_insertion_point(destructor:Cmd.BlobUnsolvedPhoto)
  SharedDtor();
}

void BlobUnsolvedPhoto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobUnsolvedPhoto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobUnsolvedPhoto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobUnsolvedPhoto_descriptor_;
}

const BlobUnsolvedPhoto& BlobUnsolvedPhoto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobUnsolvedPhoto* BlobUnsolvedPhoto::default_instance_ = NULL;

BlobUnsolvedPhoto* BlobUnsolvedPhoto::New() const {
  return new BlobUnsolvedPhoto;
}

void BlobUnsolvedPhoto::Clear() {
  photos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobUnsolvedPhoto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobUnsolvedPhoto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Cmd.UnsolvedUserPhoto photos = 1;
      case 1: {
        if (tag == 10) {
         parse_photos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_photos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_photos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobUnsolvedPhoto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobUnsolvedPhoto)
  return false;
#undef DO_
}

void BlobUnsolvedPhoto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobUnsolvedPhoto)
  // repeated .Cmd.UnsolvedUserPhoto photos = 1;
  for (int i = 0; i < this->photos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->photos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobUnsolvedPhoto)
}

::google::protobuf::uint8* BlobUnsolvedPhoto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobUnsolvedPhoto)
  // repeated .Cmd.UnsolvedUserPhoto photos = 1;
  for (int i = 0; i < this->photos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->photos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobUnsolvedPhoto)
  return target;
}

int BlobUnsolvedPhoto::ByteSize() const {
  int total_size = 0;

  // repeated .Cmd.UnsolvedUserPhoto photos = 1;
  total_size += 1 * this->photos_size();
  for (int i = 0; i < this->photos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->photos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobUnsolvedPhoto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobUnsolvedPhoto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobUnsolvedPhoto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobUnsolvedPhoto::MergeFrom(const BlobUnsolvedPhoto& from) {
  GOOGLE_CHECK_NE(&from, this);
  photos_.MergeFrom(from.photos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobUnsolvedPhoto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobUnsolvedPhoto::CopyFrom(const BlobUnsolvedPhoto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobUnsolvedPhoto::IsInitialized() const {

  return true;
}

void BlobUnsolvedPhoto::Swap(BlobUnsolvedPhoto* other) {
  if (other != this) {
    photos_.Swap(&other->photos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobUnsolvedPhoto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobUnsolvedPhoto_descriptor_;
  metadata.reflection = BlobUnsolvedPhoto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobBoss::kOpenNtfFieldNumber;
#endif  // !_MSC_VER

BlobBoss::BlobBoss()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobBoss)
}

void BlobBoss::InitAsDefaultInstance() {
}

BlobBoss::BlobBoss(const BlobBoss& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobBoss)
}

void BlobBoss::SharedCtor() {
  _cached_size_ = 0;
  open_ntf_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobBoss::~BlobBoss() {
  // @@protoc_insertion_point(destructor:Cmd.BlobBoss)
  SharedDtor();
}

void BlobBoss::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobBoss::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobBoss::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobBoss_descriptor_;
}

const BlobBoss& BlobBoss::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobBoss* BlobBoss::default_instance_ = NULL;

BlobBoss* BlobBoss::New() const {
  return new BlobBoss;
}

void BlobBoss::Clear() {
  open_ntf_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobBoss::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobBoss)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool open_ntf = 1 [default = false];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &open_ntf_)));
          set_has_open_ntf();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobBoss)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobBoss)
  return false;
#undef DO_
}

void BlobBoss::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobBoss)
  // optional bool open_ntf = 1 [default = false];
  if (has_open_ntf()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->open_ntf(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobBoss)
}

::google::protobuf::uint8* BlobBoss::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobBoss)
  // optional bool open_ntf = 1 [default = false];
  if (has_open_ntf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->open_ntf(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobBoss)
  return target;
}

int BlobBoss::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool open_ntf = 1 [default = false];
    if (has_open_ntf()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobBoss::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobBoss* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobBoss*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobBoss::MergeFrom(const BlobBoss& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_open_ntf()) {
      set_open_ntf(from.open_ntf());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobBoss::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobBoss::CopyFrom(const BlobBoss& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobBoss::IsInitialized() const {

  return true;
}

void BlobBoss::Swap(BlobBoss* other) {
  if (other != this) {
    std::swap(open_ntf_, other->open_ntf_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobBoss::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobBoss_descriptor_;
  metadata.reflection = BlobBoss_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobUser::kXFieldNumber;
const int BlobUser::kYFieldNumber;
const int BlobUser::kZFieldNumber;
const int BlobUser::kClothcolorFieldNumber;
const int BlobUser::kPurifyFieldNumber;
const int BlobUser::kSavemapFieldNumber;
const int BlobUser::kLastmapidFieldNumber;
const int BlobUser::kLastrealmapidFieldNumber;
const int BlobUser::kShownpcsFieldNumber;
const int BlobUser::kMapareasFieldNumber;
const int BlobUser::kPatchversionFieldNumber;
const int BlobUser::kTeamtimelenFieldNumber;
const int BlobUser::kFolloweridFieldNumber;
const int BlobUser::kLeveluptimeFieldNumber;
const int BlobUser::kLastsmapidFieldNumber;
const int BlobUser::kSxFieldNumber;
const int BlobUser::kSyFieldNumber;
const int BlobUser::kSzFieldNumber;
const int BlobUser::kHealcountFieldNumber;
const int BlobUser::kZenyMaxFieldNumber;
const int BlobUser::kZenyDebtFieldNumber;
const int BlobUser::kPvpCoinFieldNumber;
const int BlobUser::kConFieldNumber;
const int BlobUser::kConinitFieldNumber;
const int BlobUser::kChargeZenyFieldNumber;
const int BlobUser::kChargeLotteryFieldNumber;
const int BlobUser::kLotteryCoinFieldNumber;
const int BlobUser::kRenameTimeFieldNumber;
const int BlobUser::kGuildHonorFieldNumber;
const int BlobUser::kSaveIndexFieldNumber;
const int BlobUser::kDivorceRollerCoasterFieldNumber;
const int BlobUser::kDailyNormalZenyFieldNumber;
const int BlobUser::kDailyChargeZenyFieldNumber;
const int BlobUser::kTutorbattletimeFieldNumber;
const int BlobUser::kUsedtutorbattletimeFieldNumber;
const int BlobUser::kLastOfflinetimeFieldNumber;
const int BlobUser::kLastBaselvFieldNumber;
const int BlobUser::kLastJoblvFieldNumber;
const int BlobUser::kDeadCoinFieldNumber;
const int BlobUser::kDeadLvFieldNumber;
const int BlobUser::kDeadExpFieldNumber;
#endif  // !_MSC_VER

BlobUser::BlobUser()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobUser)
}

void BlobUser::InitAsDefaultInstance() {
}

BlobUser::BlobUser(const BlobUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobUser)
}

void BlobUser::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  clothcolor_ = 0u;
  purify_ = 0u;
  savemap_ = 0u;
  lastmapid_ = 0u;
  lastrealmapid_ = 0u;
  teamtimelen_ = 0u;
  followerid_ = GOOGLE_ULONGLONG(0);
  leveluptime_ = 0u;
  lastsmapid_ = 0u;
  sx_ = 0;
  sy_ = 0;
  sz_ = 0;
  healcount_ = 0u;
  zeny_max_ = 0u;
  zeny_debt_ = 0u;
  pvp_coin_ = 0u;
  con_ = 0u;
  coninit_ = false;
  charge_zeny_ = GOOGLE_ULONGLONG(0);
  charge_lottery_ = 0u;
  lottery_coin_ = 0u;
  rename_time_ = 0u;
  guild_honor_ = 0u;
  save_index_ = GOOGLE_ULONGLONG(0);
  divorce_roller_coaster_ = false;
  daily_normal_zeny_ = GOOGLE_ULONGLONG(0);
  daily_charge_zeny_ = GOOGLE_ULONGLONG(0);
  tutorbattletime_ = GOOGLE_ULONGLONG(0);
  usedtutorbattletime_ = GOOGLE_ULONGLONG(0);
  last_offlinetime_ = 0u;
  last_baselv_ = 0u;
  last_joblv_ = 0u;
  dead_coin_ = 0u;
  dead_lv_ = 0u;
  dead_exp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobUser::~BlobUser() {
  // @@protoc_insertion_point(destructor:Cmd.BlobUser)
  SharedDtor();
}

void BlobUser::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobUser_descriptor_;
}

const BlobUser& BlobUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobUser* BlobUser::default_instance_ = NULL;

BlobUser* BlobUser::New() const {
  return new BlobUser;
}

void BlobUser::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BlobUser*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(x_, lastrealmapid_);
  }
  if (_has_bits_[8 / 32] & 63488) {
    ZR_(followerid_, sx_);
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(sy_, con_);
    coninit_ = false;
  }
  if (_has_bits_[24 / 32] & 4278190080) {
    ZR_(charge_lottery_, lottery_coin_);
    ZR_(divorce_roller_coaster_, daily_normal_zeny_);
  }
  if (_has_bits_[32 / 32] & 255) {
    ZR_(daily_charge_zeny_, dead_lv_);
  }
  dead_exp_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  shownpcs_.Clear();
  mapareas_.Clear();
  patchversion_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1 [default = 0];
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2 [default = 0];
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // optional float z = 3 [default = 0];
      case 3: {
        if (tag == 29) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_clothcolor;
        break;
      }

      // optional uint32 clothcolor = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_clothcolor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clothcolor_)));
          set_has_clothcolor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_purify;
        break;
      }

      // optional uint32 purify = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_purify:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &purify_)));
          set_has_purify();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_savemap;
        break;
      }

      // optional uint32 savemap = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_savemap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &savemap_)));
          set_has_savemap();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_lastmapid;
        break;
      }

      // optional uint32 lastmapid = 8;
      case 8: {
        if (tag == 64) {
         parse_lastmapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastmapid_)));
          set_has_lastmapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_shownpcs;
        break;
      }

      // repeated uint32 shownpcs = 9;
      case 9: {
        if (tag == 72) {
         parse_shownpcs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 72, input, this->mutable_shownpcs())));
        } else if (tag == 74) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_shownpcs())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_shownpcs;
        if (input->ExpectTag(80)) goto parse_mapareas;
        break;
      }

      // repeated uint32 mapareas = 10;
      case 10: {
        if (tag == 80) {
         parse_mapareas:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 80, input, this->mutable_mapareas())));
        } else if (tag == 82) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_mapareas())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_mapareas;
        if (input->ExpectTag(88)) goto parse_lastrealmapid;
        break;
      }

      // optional uint32 lastrealmapid = 11;
      case 11: {
        if (tag == 88) {
         parse_lastrealmapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastrealmapid_)));
          set_has_lastrealmapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_patchversion;
        break;
      }

      // repeated uint32 patchversion = 12;
      case 12: {
        if (tag == 96) {
         parse_patchversion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 96, input, this->mutable_patchversion())));
        } else if (tag == 98) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_patchversion())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_patchversion;
        if (input->ExpectTag(104)) goto parse_teamtimelen;
        break;
      }

      // optional uint32 teamtimelen = 13 [default = 0];
      case 13: {
        if (tag == 104) {
         parse_teamtimelen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamtimelen_)));
          set_has_teamtimelen();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_followerid;
        break;
      }

      // optional uint64 followerid = 14 [default = 0];
      case 14: {
        if (tag == 112) {
         parse_followerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &followerid_)));
          set_has_followerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_leveluptime;
        break;
      }

      // optional uint32 leveluptime = 15 [default = 0];
      case 15: {
        if (tag == 120) {
         parse_leveluptime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leveluptime_)));
          set_has_leveluptime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_lastsmapid;
        break;
      }

      // optional uint32 lastsmapid = 16 [default = 0];
      case 16: {
        if (tag == 128) {
         parse_lastsmapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastsmapid_)));
          set_has_lastsmapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(141)) goto parse_sx;
        break;
      }

      // optional float sx = 17 [default = 0];
      case 17: {
        if (tag == 141) {
         parse_sx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sx_)));
          set_has_sx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(149)) goto parse_sy;
        break;
      }

      // optional float sy = 18 [default = 0];
      case 18: {
        if (tag == 149) {
         parse_sy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sy_)));
          set_has_sy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(157)) goto parse_sz;
        break;
      }

      // optional float sz = 19 [default = 0];
      case 19: {
        if (tag == 157) {
         parse_sz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sz_)));
          set_has_sz();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_healcount;
        break;
      }

      // optional uint32 healcount = 20 [default = 0];
      case 20: {
        if (tag == 160) {
         parse_healcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &healcount_)));
          set_has_healcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_zeny_max;
        break;
      }

      // optional uint32 zeny_max = 21 [default = 0];
      case 21: {
        if (tag == 168) {
         parse_zeny_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zeny_max_)));
          set_has_zeny_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_zeny_debt;
        break;
      }

      // optional uint32 zeny_debt = 22 [default = 0];
      case 22: {
        if (tag == 176) {
         parse_zeny_debt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zeny_debt_)));
          set_has_zeny_debt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_pvp_coin;
        break;
      }

      // optional uint32 pvp_coin = 23 [default = 0];
      case 23: {
        if (tag == 184) {
         parse_pvp_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pvp_coin_)));
          set_has_pvp_coin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_con;
        break;
      }

      // optional uint32 con = 24 [default = 0];
      case 24: {
        if (tag == 192) {
         parse_con:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &con_)));
          set_has_con();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_coninit;
        break;
      }

      // optional bool coninit = 25 [default = false];
      case 25: {
        if (tag == 200) {
         parse_coninit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &coninit_)));
          set_has_coninit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_charge_zeny;
        break;
      }

      // optional uint64 charge_zeny = 26;
      case 26: {
        if (tag == 208) {
         parse_charge_zeny:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charge_zeny_)));
          set_has_charge_zeny();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_charge_lottery;
        break;
      }

      // optional uint32 charge_lottery = 27;
      case 27: {
        if (tag == 216) {
         parse_charge_lottery:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charge_lottery_)));
          set_has_charge_lottery();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_lottery_coin;
        break;
      }

      // optional uint32 lottery_coin = 28 [default = 0];
      case 28: {
        if (tag == 224) {
         parse_lottery_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lottery_coin_)));
          set_has_lottery_coin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_rename_time;
        break;
      }

      // optional uint32 rename_time = 29 [default = 0];
      case 29: {
        if (tag == 232) {
         parse_rename_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rename_time_)));
          set_has_rename_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_guild_honor;
        break;
      }

      // optional uint32 guild_honor = 30 [default = 0];
      case 30: {
        if (tag == 240) {
         parse_guild_honor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guild_honor_)));
          set_has_guild_honor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_save_index;
        break;
      }

      // optional uint64 save_index = 31 [default = 0];
      case 31: {
        if (tag == 248) {
         parse_save_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &save_index_)));
          set_has_save_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_divorce_roller_coaster;
        break;
      }

      // optional bool divorce_roller_coaster = 32 [default = false];
      case 32: {
        if (tag == 256) {
         parse_divorce_roller_coaster:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &divorce_roller_coaster_)));
          set_has_divorce_roller_coaster();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_daily_normal_zeny;
        break;
      }

      // optional uint64 daily_normal_zeny = 33;
      case 33: {
        if (tag == 264) {
         parse_daily_normal_zeny:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &daily_normal_zeny_)));
          set_has_daily_normal_zeny();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(272)) goto parse_daily_charge_zeny;
        break;
      }

      // optional uint64 daily_charge_zeny = 34;
      case 34: {
        if (tag == 272) {
         parse_daily_charge_zeny:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &daily_charge_zeny_)));
          set_has_daily_charge_zeny();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(280)) goto parse_tutorbattletime;
        break;
      }

      // optional uint64 tutorbattletime = 35 [default = 0];
      case 35: {
        if (tag == 280) {
         parse_tutorbattletime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tutorbattletime_)));
          set_has_tutorbattletime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(288)) goto parse_usedtutorbattletime;
        break;
      }

      // optional uint64 usedtutorbattletime = 36 [default = 0];
      case 36: {
        if (tag == 288) {
         parse_usedtutorbattletime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &usedtutorbattletime_)));
          set_has_usedtutorbattletime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(296)) goto parse_last_offlinetime;
        break;
      }

      // optional uint32 last_offlinetime = 37;
      case 37: {
        if (tag == 296) {
         parse_last_offlinetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_offlinetime_)));
          set_has_last_offlinetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(304)) goto parse_last_baselv;
        break;
      }

      // optional uint32 last_baselv = 38;
      case 38: {
        if (tag == 304) {
         parse_last_baselv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_baselv_)));
          set_has_last_baselv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(312)) goto parse_last_joblv;
        break;
      }

      // optional uint32 last_joblv = 39;
      case 39: {
        if (tag == 312) {
         parse_last_joblv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_joblv_)));
          set_has_last_joblv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(320)) goto parse_dead_coin;
        break;
      }

      // optional uint32 dead_coin = 40 [default = 0];
      case 40: {
        if (tag == 320) {
         parse_dead_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dead_coin_)));
          set_has_dead_coin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(328)) goto parse_dead_lv;
        break;
      }

      // optional uint32 dead_lv = 41 [default = 0];
      case 41: {
        if (tag == 328) {
         parse_dead_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dead_lv_)));
          set_has_dead_lv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(336)) goto parse_dead_exp;
        break;
      }

      // optional uint32 dead_exp = 42 [default = 0];
      case 42: {
        if (tag == 336) {
         parse_dead_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dead_exp_)));
          set_has_dead_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobUser)
  return false;
#undef DO_
}

void BlobUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobUser)
  // optional float x = 1 [default = 0];
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2 [default = 0];
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float z = 3 [default = 0];
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  // optional uint32 clothcolor = 4 [default = 0];
  if (has_clothcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->clothcolor(), output);
  }

  // optional uint32 purify = 6 [default = 0];
  if (has_purify()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->purify(), output);
  }

  // optional uint32 savemap = 7 [default = 0];
  if (has_savemap()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->savemap(), output);
  }

  // optional uint32 lastmapid = 8;
  if (has_lastmapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->lastmapid(), output);
  }

  // repeated uint32 shownpcs = 9;
  for (int i = 0; i < this->shownpcs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      9, this->shownpcs(i), output);
  }

  // repeated uint32 mapareas = 10;
  for (int i = 0; i < this->mapareas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      10, this->mapareas(i), output);
  }

  // optional uint32 lastrealmapid = 11;
  if (has_lastrealmapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->lastrealmapid(), output);
  }

  // repeated uint32 patchversion = 12;
  for (int i = 0; i < this->patchversion_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      12, this->patchversion(i), output);
  }

  // optional uint32 teamtimelen = 13 [default = 0];
  if (has_teamtimelen()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->teamtimelen(), output);
  }

  // optional uint64 followerid = 14 [default = 0];
  if (has_followerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->followerid(), output);
  }

  // optional uint32 leveluptime = 15 [default = 0];
  if (has_leveluptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->leveluptime(), output);
  }

  // optional uint32 lastsmapid = 16 [default = 0];
  if (has_lastsmapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->lastsmapid(), output);
  }

  // optional float sx = 17 [default = 0];
  if (has_sx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->sx(), output);
  }

  // optional float sy = 18 [default = 0];
  if (has_sy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->sy(), output);
  }

  // optional float sz = 19 [default = 0];
  if (has_sz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->sz(), output);
  }

  // optional uint32 healcount = 20 [default = 0];
  if (has_healcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->healcount(), output);
  }

  // optional uint32 zeny_max = 21 [default = 0];
  if (has_zeny_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->zeny_max(), output);
  }

  // optional uint32 zeny_debt = 22 [default = 0];
  if (has_zeny_debt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->zeny_debt(), output);
  }

  // optional uint32 pvp_coin = 23 [default = 0];
  if (has_pvp_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->pvp_coin(), output);
  }

  // optional uint32 con = 24 [default = 0];
  if (has_con()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->con(), output);
  }

  // optional bool coninit = 25 [default = false];
  if (has_coninit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->coninit(), output);
  }

  // optional uint64 charge_zeny = 26;
  if (has_charge_zeny()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(26, this->charge_zeny(), output);
  }

  // optional uint32 charge_lottery = 27;
  if (has_charge_lottery()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->charge_lottery(), output);
  }

  // optional uint32 lottery_coin = 28 [default = 0];
  if (has_lottery_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->lottery_coin(), output);
  }

  // optional uint32 rename_time = 29 [default = 0];
  if (has_rename_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->rename_time(), output);
  }

  // optional uint32 guild_honor = 30 [default = 0];
  if (has_guild_honor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->guild_honor(), output);
  }

  // optional uint64 save_index = 31 [default = 0];
  if (has_save_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(31, this->save_index(), output);
  }

  // optional bool divorce_roller_coaster = 32 [default = false];
  if (has_divorce_roller_coaster()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(32, this->divorce_roller_coaster(), output);
  }

  // optional uint64 daily_normal_zeny = 33;
  if (has_daily_normal_zeny()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(33, this->daily_normal_zeny(), output);
  }

  // optional uint64 daily_charge_zeny = 34;
  if (has_daily_charge_zeny()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(34, this->daily_charge_zeny(), output);
  }

  // optional uint64 tutorbattletime = 35 [default = 0];
  if (has_tutorbattletime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(35, this->tutorbattletime(), output);
  }

  // optional uint64 usedtutorbattletime = 36 [default = 0];
  if (has_usedtutorbattletime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(36, this->usedtutorbattletime(), output);
  }

  // optional uint32 last_offlinetime = 37;
  if (has_last_offlinetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(37, this->last_offlinetime(), output);
  }

  // optional uint32 last_baselv = 38;
  if (has_last_baselv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(38, this->last_baselv(), output);
  }

  // optional uint32 last_joblv = 39;
  if (has_last_joblv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(39, this->last_joblv(), output);
  }

  // optional uint32 dead_coin = 40 [default = 0];
  if (has_dead_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(40, this->dead_coin(), output);
  }

  // optional uint32 dead_lv = 41 [default = 0];
  if (has_dead_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(41, this->dead_lv(), output);
  }

  // optional uint32 dead_exp = 42 [default = 0];
  if (has_dead_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(42, this->dead_exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobUser)
}

::google::protobuf::uint8* BlobUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobUser)
  // optional float x = 1 [default = 0];
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2 [default = 0];
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional float z = 3 [default = 0];
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  // optional uint32 clothcolor = 4 [default = 0];
  if (has_clothcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->clothcolor(), target);
  }

  // optional uint32 purify = 6 [default = 0];
  if (has_purify()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->purify(), target);
  }

  // optional uint32 savemap = 7 [default = 0];
  if (has_savemap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->savemap(), target);
  }

  // optional uint32 lastmapid = 8;
  if (has_lastmapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->lastmapid(), target);
  }

  // repeated uint32 shownpcs = 9;
  for (int i = 0; i < this->shownpcs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(9, this->shownpcs(i), target);
  }

  // repeated uint32 mapareas = 10;
  for (int i = 0; i < this->mapareas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(10, this->mapareas(i), target);
  }

  // optional uint32 lastrealmapid = 11;
  if (has_lastrealmapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->lastrealmapid(), target);
  }

  // repeated uint32 patchversion = 12;
  for (int i = 0; i < this->patchversion_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(12, this->patchversion(i), target);
  }

  // optional uint32 teamtimelen = 13 [default = 0];
  if (has_teamtimelen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->teamtimelen(), target);
  }

  // optional uint64 followerid = 14 [default = 0];
  if (has_followerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->followerid(), target);
  }

  // optional uint32 leveluptime = 15 [default = 0];
  if (has_leveluptime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->leveluptime(), target);
  }

  // optional uint32 lastsmapid = 16 [default = 0];
  if (has_lastsmapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->lastsmapid(), target);
  }

  // optional float sx = 17 [default = 0];
  if (has_sx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->sx(), target);
  }

  // optional float sy = 18 [default = 0];
  if (has_sy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->sy(), target);
  }

  // optional float sz = 19 [default = 0];
  if (has_sz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->sz(), target);
  }

  // optional uint32 healcount = 20 [default = 0];
  if (has_healcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->healcount(), target);
  }

  // optional uint32 zeny_max = 21 [default = 0];
  if (has_zeny_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->zeny_max(), target);
  }

  // optional uint32 zeny_debt = 22 [default = 0];
  if (has_zeny_debt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->zeny_debt(), target);
  }

  // optional uint32 pvp_coin = 23 [default = 0];
  if (has_pvp_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->pvp_coin(), target);
  }

  // optional uint32 con = 24 [default = 0];
  if (has_con()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->con(), target);
  }

  // optional bool coninit = 25 [default = false];
  if (has_coninit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(25, this->coninit(), target);
  }

  // optional uint64 charge_zeny = 26;
  if (has_charge_zeny()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(26, this->charge_zeny(), target);
  }

  // optional uint32 charge_lottery = 27;
  if (has_charge_lottery()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->charge_lottery(), target);
  }

  // optional uint32 lottery_coin = 28 [default = 0];
  if (has_lottery_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->lottery_coin(), target);
  }

  // optional uint32 rename_time = 29 [default = 0];
  if (has_rename_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->rename_time(), target);
  }

  // optional uint32 guild_honor = 30 [default = 0];
  if (has_guild_honor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->guild_honor(), target);
  }

  // optional uint64 save_index = 31 [default = 0];
  if (has_save_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(31, this->save_index(), target);
  }

  // optional bool divorce_roller_coaster = 32 [default = false];
  if (has_divorce_roller_coaster()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(32, this->divorce_roller_coaster(), target);
  }

  // optional uint64 daily_normal_zeny = 33;
  if (has_daily_normal_zeny()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(33, this->daily_normal_zeny(), target);
  }

  // optional uint64 daily_charge_zeny = 34;
  if (has_daily_charge_zeny()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(34, this->daily_charge_zeny(), target);
  }

  // optional uint64 tutorbattletime = 35 [default = 0];
  if (has_tutorbattletime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(35, this->tutorbattletime(), target);
  }

  // optional uint64 usedtutorbattletime = 36 [default = 0];
  if (has_usedtutorbattletime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(36, this->usedtutorbattletime(), target);
  }

  // optional uint32 last_offlinetime = 37;
  if (has_last_offlinetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(37, this->last_offlinetime(), target);
  }

  // optional uint32 last_baselv = 38;
  if (has_last_baselv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(38, this->last_baselv(), target);
  }

  // optional uint32 last_joblv = 39;
  if (has_last_joblv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(39, this->last_joblv(), target);
  }

  // optional uint32 dead_coin = 40 [default = 0];
  if (has_dead_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(40, this->dead_coin(), target);
  }

  // optional uint32 dead_lv = 41 [default = 0];
  if (has_dead_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(41, this->dead_lv(), target);
  }

  // optional uint32 dead_exp = 42 [default = 0];
  if (has_dead_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(42, this->dead_exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobUser)
  return target;
}

int BlobUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float x = 1 [default = 0];
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 2 [default = 0];
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional float z = 3 [default = 0];
    if (has_z()) {
      total_size += 1 + 4;
    }

    // optional uint32 clothcolor = 4 [default = 0];
    if (has_clothcolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clothcolor());
    }

    // optional uint32 purify = 6 [default = 0];
    if (has_purify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->purify());
    }

    // optional uint32 savemap = 7 [default = 0];
    if (has_savemap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->savemap());
    }

    // optional uint32 lastmapid = 8;
    if (has_lastmapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastmapid());
    }

    // optional uint32 lastrealmapid = 11;
    if (has_lastrealmapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastrealmapid());
    }

  }
  if (_has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    // optional uint32 teamtimelen = 13 [default = 0];
    if (has_teamtimelen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamtimelen());
    }

    // optional uint64 followerid = 14 [default = 0];
    if (has_followerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->followerid());
    }

    // optional uint32 leveluptime = 15 [default = 0];
    if (has_leveluptime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leveluptime());
    }

    // optional uint32 lastsmapid = 16 [default = 0];
    if (has_lastsmapid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastsmapid());
    }

    // optional float sx = 17 [default = 0];
    if (has_sx()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional float sy = 18 [default = 0];
    if (has_sy()) {
      total_size += 2 + 4;
    }

    // optional float sz = 19 [default = 0];
    if (has_sz()) {
      total_size += 2 + 4;
    }

    // optional uint32 healcount = 20 [default = 0];
    if (has_healcount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->healcount());
    }

    // optional uint32 zeny_max = 21 [default = 0];
    if (has_zeny_max()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zeny_max());
    }

    // optional uint32 zeny_debt = 22 [default = 0];
    if (has_zeny_debt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zeny_debt());
    }

    // optional uint32 pvp_coin = 23 [default = 0];
    if (has_pvp_coin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pvp_coin());
    }

    // optional uint32 con = 24 [default = 0];
    if (has_con()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->con());
    }

    // optional bool coninit = 25 [default = false];
    if (has_coninit()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint64 charge_zeny = 26;
    if (has_charge_zeny()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charge_zeny());
    }

    // optional uint32 charge_lottery = 27;
    if (has_charge_lottery()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charge_lottery());
    }

    // optional uint32 lottery_coin = 28 [default = 0];
    if (has_lottery_coin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lottery_coin());
    }

    // optional uint32 rename_time = 29 [default = 0];
    if (has_rename_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rename_time());
    }

    // optional uint32 guild_honor = 30 [default = 0];
    if (has_guild_honor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guild_honor());
    }

    // optional uint64 save_index = 31 [default = 0];
    if (has_save_index()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->save_index());
    }

    // optional bool divorce_roller_coaster = 32 [default = false];
    if (has_divorce_roller_coaster()) {
      total_size += 2 + 1;
    }

    // optional uint64 daily_normal_zeny = 33;
    if (has_daily_normal_zeny()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->daily_normal_zeny());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional uint64 daily_charge_zeny = 34;
    if (has_daily_charge_zeny()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->daily_charge_zeny());
    }

    // optional uint64 tutorbattletime = 35 [default = 0];
    if (has_tutorbattletime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tutorbattletime());
    }

    // optional uint64 usedtutorbattletime = 36 [default = 0];
    if (has_usedtutorbattletime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->usedtutorbattletime());
    }

    // optional uint32 last_offlinetime = 37;
    if (has_last_offlinetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_offlinetime());
    }

    // optional uint32 last_baselv = 38;
    if (has_last_baselv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_baselv());
    }

    // optional uint32 last_joblv = 39;
    if (has_last_joblv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_joblv());
    }

    // optional uint32 dead_coin = 40 [default = 0];
    if (has_dead_coin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dead_coin());
    }

    // optional uint32 dead_lv = 41 [default = 0];
    if (has_dead_lv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dead_lv());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional uint32 dead_exp = 42 [default = 0];
    if (has_dead_exp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dead_exp());
    }

  }
  // repeated uint32 shownpcs = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->shownpcs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->shownpcs(i));
    }
    total_size += 1 * this->shownpcs_size() + data_size;
  }

  // repeated uint32 mapareas = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->mapareas_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->mapareas(i));
    }
    total_size += 1 * this->mapareas_size() + data_size;
  }

  // repeated uint32 patchversion = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->patchversion_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->patchversion(i));
    }
    total_size += 1 * this->patchversion_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobUser::MergeFrom(const BlobUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  shownpcs_.MergeFrom(from.shownpcs_);
  mapareas_.MergeFrom(from.mapareas_);
  patchversion_.MergeFrom(from.patchversion_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_clothcolor()) {
      set_clothcolor(from.clothcolor());
    }
    if (from.has_purify()) {
      set_purify(from.purify());
    }
    if (from.has_savemap()) {
      set_savemap(from.savemap());
    }
    if (from.has_lastmapid()) {
      set_lastmapid(from.lastmapid());
    }
    if (from.has_lastrealmapid()) {
      set_lastrealmapid(from.lastrealmapid());
    }
  }
  if (from._has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    if (from.has_teamtimelen()) {
      set_teamtimelen(from.teamtimelen());
    }
    if (from.has_followerid()) {
      set_followerid(from.followerid());
    }
    if (from.has_leveluptime()) {
      set_leveluptime(from.leveluptime());
    }
    if (from.has_lastsmapid()) {
      set_lastsmapid(from.lastsmapid());
    }
    if (from.has_sx()) {
      set_sx(from.sx());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_sy()) {
      set_sy(from.sy());
    }
    if (from.has_sz()) {
      set_sz(from.sz());
    }
    if (from.has_healcount()) {
      set_healcount(from.healcount());
    }
    if (from.has_zeny_max()) {
      set_zeny_max(from.zeny_max());
    }
    if (from.has_zeny_debt()) {
      set_zeny_debt(from.zeny_debt());
    }
    if (from.has_pvp_coin()) {
      set_pvp_coin(from.pvp_coin());
    }
    if (from.has_con()) {
      set_con(from.con());
    }
    if (from.has_coninit()) {
      set_coninit(from.coninit());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_charge_zeny()) {
      set_charge_zeny(from.charge_zeny());
    }
    if (from.has_charge_lottery()) {
      set_charge_lottery(from.charge_lottery());
    }
    if (from.has_lottery_coin()) {
      set_lottery_coin(from.lottery_coin());
    }
    if (from.has_rename_time()) {
      set_rename_time(from.rename_time());
    }
    if (from.has_guild_honor()) {
      set_guild_honor(from.guild_honor());
    }
    if (from.has_save_index()) {
      set_save_index(from.save_index());
    }
    if (from.has_divorce_roller_coaster()) {
      set_divorce_roller_coaster(from.divorce_roller_coaster());
    }
    if (from.has_daily_normal_zeny()) {
      set_daily_normal_zeny(from.daily_normal_zeny());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_daily_charge_zeny()) {
      set_daily_charge_zeny(from.daily_charge_zeny());
    }
    if (from.has_tutorbattletime()) {
      set_tutorbattletime(from.tutorbattletime());
    }
    if (from.has_usedtutorbattletime()) {
      set_usedtutorbattletime(from.usedtutorbattletime());
    }
    if (from.has_last_offlinetime()) {
      set_last_offlinetime(from.last_offlinetime());
    }
    if (from.has_last_baselv()) {
      set_last_baselv(from.last_baselv());
    }
    if (from.has_last_joblv()) {
      set_last_joblv(from.last_joblv());
    }
    if (from.has_dead_coin()) {
      set_dead_coin(from.dead_coin());
    }
    if (from.has_dead_lv()) {
      set_dead_lv(from.dead_lv());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_dead_exp()) {
      set_dead_exp(from.dead_exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobUser::CopyFrom(const BlobUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobUser::IsInitialized() const {

  return true;
}

void BlobUser::Swap(BlobUser* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(clothcolor_, other->clothcolor_);
    std::swap(purify_, other->purify_);
    std::swap(savemap_, other->savemap_);
    std::swap(lastmapid_, other->lastmapid_);
    std::swap(lastrealmapid_, other->lastrealmapid_);
    shownpcs_.Swap(&other->shownpcs_);
    mapareas_.Swap(&other->mapareas_);
    patchversion_.Swap(&other->patchversion_);
    std::swap(teamtimelen_, other->teamtimelen_);
    std::swap(followerid_, other->followerid_);
    std::swap(leveluptime_, other->leveluptime_);
    std::swap(lastsmapid_, other->lastsmapid_);
    std::swap(sx_, other->sx_);
    std::swap(sy_, other->sy_);
    std::swap(sz_, other->sz_);
    std::swap(healcount_, other->healcount_);
    std::swap(zeny_max_, other->zeny_max_);
    std::swap(zeny_debt_, other->zeny_debt_);
    std::swap(pvp_coin_, other->pvp_coin_);
    std::swap(con_, other->con_);
    std::swap(coninit_, other->coninit_);
    std::swap(charge_zeny_, other->charge_zeny_);
    std::swap(charge_lottery_, other->charge_lottery_);
    std::swap(lottery_coin_, other->lottery_coin_);
    std::swap(rename_time_, other->rename_time_);
    std::swap(guild_honor_, other->guild_honor_);
    std::swap(save_index_, other->save_index_);
    std::swap(divorce_roller_coaster_, other->divorce_roller_coaster_);
    std::swap(daily_normal_zeny_, other->daily_normal_zeny_);
    std::swap(daily_charge_zeny_, other->daily_charge_zeny_);
    std::swap(tutorbattletime_, other->tutorbattletime_);
    std::swap(usedtutorbattletime_, other->usedtutorbattletime_);
    std::swap(last_offlinetime_, other->last_offlinetime_);
    std::swap(last_baselv_, other->last_baselv_);
    std::swap(last_joblv_, other->last_joblv_);
    std::swap(dead_coin_, other->dead_coin_);
    std::swap(dead_lv_, other->dead_lv_);
    std::swap(dead_exp_, other->dead_exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobUser_descriptor_;
  metadata.reflection = BlobUser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillReplaceInfo::kOldidFieldNumber;
const int SkillReplaceInfo::kNewidFieldNumber;
#endif  // !_MSC_VER

SkillReplaceInfo::SkillReplaceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SkillReplaceInfo)
}

void SkillReplaceInfo::InitAsDefaultInstance() {
}

SkillReplaceInfo::SkillReplaceInfo(const SkillReplaceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SkillReplaceInfo)
}

void SkillReplaceInfo::SharedCtor() {
  _cached_size_ = 0;
  oldid_ = 0u;
  newid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillReplaceInfo::~SkillReplaceInfo() {
  // @@protoc_insertion_point(destructor:Cmd.SkillReplaceInfo)
  SharedDtor();
}

void SkillReplaceInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillReplaceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillReplaceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillReplaceInfo_descriptor_;
}

const SkillReplaceInfo& SkillReplaceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

SkillReplaceInfo* SkillReplaceInfo::default_instance_ = NULL;

SkillReplaceInfo* SkillReplaceInfo::New() const {
  return new SkillReplaceInfo;
}

void SkillReplaceInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SkillReplaceInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(oldid_, newid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillReplaceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SkillReplaceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 oldid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oldid_)));
          set_has_oldid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_newid;
        break;
      }

      // optional uint32 newid = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_newid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newid_)));
          set_has_newid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SkillReplaceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SkillReplaceInfo)
  return false;
#undef DO_
}

void SkillReplaceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SkillReplaceInfo)
  // optional uint32 oldid = 1 [default = 0];
  if (has_oldid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->oldid(), output);
  }

  // optional uint32 newid = 2 [default = 0];
  if (has_newid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->newid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SkillReplaceInfo)
}

::google::protobuf::uint8* SkillReplaceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SkillReplaceInfo)
  // optional uint32 oldid = 1 [default = 0];
  if (has_oldid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->oldid(), target);
  }

  // optional uint32 newid = 2 [default = 0];
  if (has_newid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->newid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SkillReplaceInfo)
  return target;
}

int SkillReplaceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 oldid = 1 [default = 0];
    if (has_oldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oldid());
    }

    // optional uint32 newid = 2 [default = 0];
    if (has_newid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->newid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillReplaceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillReplaceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillReplaceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillReplaceInfo::MergeFrom(const SkillReplaceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_oldid()) {
      set_oldid(from.oldid());
    }
    if (from.has_newid()) {
      set_newid(from.newid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillReplaceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillReplaceInfo::CopyFrom(const SkillReplaceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillReplaceInfo::IsInitialized() const {

  return true;
}

void SkillReplaceInfo::Swap(SkillReplaceInfo* other) {
  if (other != this) {
    std::swap(oldid_, other->oldid_);
    std::swap(newid_, other->newid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillReplaceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillReplaceInfo_descriptor_;
  metadata.reflection = SkillReplaceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillShortcutDB::kTypeFieldNumber;
const int SkillShortcutDB::kCutsFieldNumber;
#endif  // !_MSC_VER

SkillShortcutDB::SkillShortcutDB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SkillShortcutDB)
}

void SkillShortcutDB::InitAsDefaultInstance() {
}

SkillShortcutDB::SkillShortcutDB(const SkillShortcutDB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SkillShortcutDB)
}

void SkillShortcutDB::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillShortcutDB::~SkillShortcutDB() {
  // @@protoc_insertion_point(destructor:Cmd.SkillShortcutDB)
  SharedDtor();
}

void SkillShortcutDB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillShortcutDB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillShortcutDB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillShortcutDB_descriptor_;
}

const SkillShortcutDB& SkillShortcutDB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

SkillShortcutDB* SkillShortcutDB::default_instance_ = NULL;

SkillShortcutDB* SkillShortcutDB::New() const {
  return new SkillShortcutDB;
}

void SkillShortcutDB::Clear() {
  type_ = 0;
  cuts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillShortcutDB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SkillShortcutDB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.ESkillShortcut type = 1 [default = ESKILLSHORTCUT_MIN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ESkillShortcut_IsValid(value)) {
            set_type(static_cast< ::Cmd::ESkillShortcut >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cuts;
        break;
      }

      // repeated .Cmd.SkillPos cuts = 2;
      case 2: {
        if (tag == 18) {
         parse_cuts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cuts()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cuts;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SkillShortcutDB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SkillShortcutDB)
  return false;
#undef DO_
}

void SkillShortcutDB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SkillShortcutDB)
  // optional .Cmd.ESkillShortcut type = 1 [default = ESKILLSHORTCUT_MIN];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated .Cmd.SkillPos cuts = 2;
  for (int i = 0; i < this->cuts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cuts(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SkillShortcutDB)
}

::google::protobuf::uint8* SkillShortcutDB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SkillShortcutDB)
  // optional .Cmd.ESkillShortcut type = 1 [default = ESKILLSHORTCUT_MIN];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated .Cmd.SkillPos cuts = 2;
  for (int i = 0; i < this->cuts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cuts(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SkillShortcutDB)
  return target;
}

int SkillShortcutDB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.ESkillShortcut type = 1 [default = ESKILLSHORTCUT_MIN];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated .Cmd.SkillPos cuts = 2;
  total_size += 1 * this->cuts_size();
  for (int i = 0; i < this->cuts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cuts(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillShortcutDB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillShortcutDB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillShortcutDB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillShortcutDB::MergeFrom(const SkillShortcutDB& from) {
  GOOGLE_CHECK_NE(&from, this);
  cuts_.MergeFrom(from.cuts_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillShortcutDB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillShortcutDB::CopyFrom(const SkillShortcutDB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillShortcutDB::IsInitialized() const {

  return true;
}

void SkillShortcutDB::Swap(SkillShortcutDB* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    cuts_.Swap(&other->cuts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillShortcutDB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillShortcutDB_descriptor_;
  metadata.reflection = SkillShortcutDB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserSkillData::kTotalpointFieldNumber;
const int UserSkillData::kMaxposFieldNumber;
const int UserSkillData::kDatasFieldNumber;
const int UserSkillData::kPosFieldNumber;
const int UserSkillData::kAutomaxposFieldNumber;
const int UserSkillData::kAutoposFieldNumber;
const int UserSkillData::kExtendposFieldNumber;
const int UserSkillData::kMaxextendposFieldNumber;
const int UserSkillData::kResetedFieldNumber;
const int UserSkillData::kReplaceFieldNumber;
const int UserSkillData::kShortcutsFieldNumber;
const int UserSkillData::kLastConcertSkillidFieldNumber;
#endif  // !_MSC_VER

UserSkillData::UserSkillData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UserSkillData)
}

void UserSkillData::InitAsDefaultInstance() {
}

UserSkillData::UserSkillData(const UserSkillData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UserSkillData)
}

void UserSkillData::SharedCtor() {
  _cached_size_ = 0;
  totalpoint_ = 0u;
  maxpos_ = 0u;
  automaxpos_ = 0u;
  maxextendpos_ = 0u;
  reseted_ = false;
  last_concert_skillid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserSkillData::~UserSkillData() {
  // @@protoc_insertion_point(destructor:Cmd.UserSkillData)
  SharedDtor();
}

void UserSkillData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserSkillData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserSkillData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserSkillData_descriptor_;
}

const UserSkillData& UserSkillData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

UserSkillData* UserSkillData::default_instance_ = NULL;

UserSkillData* UserSkillData::New() const {
  return new UserSkillData;
}

void UserSkillData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserSkillData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(totalpoint_, maxpos_);
  ZR_(automaxpos_, maxextendpos_);
  ZR_(reseted_, last_concert_skillid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  datas_.Clear();
  pos_.Clear();
  autopos_.Clear();
  extendpos_.Clear();
  replace_.Clear();
  shortcuts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserSkillData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UserSkillData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 totalpoint = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalpoint_)));
          set_has_totalpoint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_maxpos;
        break;
      }

      // optional uint32 maxpos = 2;
      case 2: {
        if (tag == 16) {
         parse_maxpos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxpos_)));
          set_has_maxpos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_datas;
        break;
      }

      // repeated .Cmd.SkillData datas = 3;
      case 3: {
        if (tag == 26) {
         parse_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_datas;
        if (input->ExpectTag(34)) goto parse_pos;
        break;
      }

      // repeated .Cmd.SkillPos pos = 4;
      case 4: {
        if (tag == 34) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_pos;
        if (input->ExpectTag(40)) goto parse_automaxpos;
        break;
      }

      // optional uint32 automaxpos = 5;
      case 5: {
        if (tag == 40) {
         parse_automaxpos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &automaxpos_)));
          set_has_automaxpos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_autopos;
        break;
      }

      // repeated .Cmd.SkillPos autopos = 6;
      case 6: {
        if (tag == 50) {
         parse_autopos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_autopos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_autopos;
        if (input->ExpectTag(58)) goto parse_extendpos;
        break;
      }

      // repeated .Cmd.SkillPos extendpos = 7;
      case 7: {
        if (tag == 58) {
         parse_extendpos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_extendpos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_extendpos;
        if (input->ExpectTag(64)) goto parse_maxextendpos;
        break;
      }

      // optional uint32 maxextendpos = 8;
      case 8: {
        if (tag == 64) {
         parse_maxextendpos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxextendpos_)));
          set_has_maxextendpos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_reseted;
        break;
      }

      // optional bool reseted = 10 [default = false];
      case 10: {
        if (tag == 80) {
         parse_reseted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reseted_)));
          set_has_reseted();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_replace;
        break;
      }

      // repeated .Cmd.SkillReplaceInfo replace = 11;
      case 11: {
        if (tag == 90) {
         parse_replace:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_replace()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_replace;
        if (input->ExpectTag(98)) goto parse_shortcuts;
        break;
      }

      // repeated .Cmd.SkillShortcutDB shortcuts = 12;
      case 12: {
        if (tag == 98) {
         parse_shortcuts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shortcuts()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_shortcuts;
        if (input->ExpectTag(104)) goto parse_last_concert_skillid;
        break;
      }

      // optional uint32 last_concert_skillid = 13 [default = 0];
      case 13: {
        if (tag == 104) {
         parse_last_concert_skillid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_concert_skillid_)));
          set_has_last_concert_skillid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UserSkillData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UserSkillData)
  return false;
#undef DO_
}

void UserSkillData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UserSkillData)
  // optional uint32 totalpoint = 1;
  if (has_totalpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->totalpoint(), output);
  }

  // optional uint32 maxpos = 2;
  if (has_maxpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->maxpos(), output);
  }

  // repeated .Cmd.SkillData datas = 3;
  for (int i = 0; i < this->datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->datas(i), output);
  }

  // repeated .Cmd.SkillPos pos = 4;
  for (int i = 0; i < this->pos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pos(i), output);
  }

  // optional uint32 automaxpos = 5;
  if (has_automaxpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->automaxpos(), output);
  }

  // repeated .Cmd.SkillPos autopos = 6;
  for (int i = 0; i < this->autopos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->autopos(i), output);
  }

  // repeated .Cmd.SkillPos extendpos = 7;
  for (int i = 0; i < this->extendpos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->extendpos(i), output);
  }

  // optional uint32 maxextendpos = 8;
  if (has_maxextendpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->maxextendpos(), output);
  }

  // optional bool reseted = 10 [default = false];
  if (has_reseted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->reseted(), output);
  }

  // repeated .Cmd.SkillReplaceInfo replace = 11;
  for (int i = 0; i < this->replace_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->replace(i), output);
  }

  // repeated .Cmd.SkillShortcutDB shortcuts = 12;
  for (int i = 0; i < this->shortcuts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->shortcuts(i), output);
  }

  // optional uint32 last_concert_skillid = 13 [default = 0];
  if (has_last_concert_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->last_concert_skillid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UserSkillData)
}

::google::protobuf::uint8* UserSkillData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UserSkillData)
  // optional uint32 totalpoint = 1;
  if (has_totalpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->totalpoint(), target);
  }

  // optional uint32 maxpos = 2;
  if (has_maxpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->maxpos(), target);
  }

  // repeated .Cmd.SkillData datas = 3;
  for (int i = 0; i < this->datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->datas(i), target);
  }

  // repeated .Cmd.SkillPos pos = 4;
  for (int i = 0; i < this->pos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pos(i), target);
  }

  // optional uint32 automaxpos = 5;
  if (has_automaxpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->automaxpos(), target);
  }

  // repeated .Cmd.SkillPos autopos = 6;
  for (int i = 0; i < this->autopos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->autopos(i), target);
  }

  // repeated .Cmd.SkillPos extendpos = 7;
  for (int i = 0; i < this->extendpos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->extendpos(i), target);
  }

  // optional uint32 maxextendpos = 8;
  if (has_maxextendpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->maxextendpos(), target);
  }

  // optional bool reseted = 10 [default = false];
  if (has_reseted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->reseted(), target);
  }

  // repeated .Cmd.SkillReplaceInfo replace = 11;
  for (int i = 0; i < this->replace_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->replace(i), target);
  }

  // repeated .Cmd.SkillShortcutDB shortcuts = 12;
  for (int i = 0; i < this->shortcuts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->shortcuts(i), target);
  }

  // optional uint32 last_concert_skillid = 13 [default = 0];
  if (has_last_concert_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->last_concert_skillid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UserSkillData)
  return target;
}

int UserSkillData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 totalpoint = 1;
    if (has_totalpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalpoint());
    }

    // optional uint32 maxpos = 2;
    if (has_maxpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxpos());
    }

    // optional uint32 automaxpos = 5;
    if (has_automaxpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->automaxpos());
    }

    // optional uint32 maxextendpos = 8;
    if (has_maxextendpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxextendpos());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool reseted = 10 [default = false];
    if (has_reseted()) {
      total_size += 1 + 1;
    }

    // optional uint32 last_concert_skillid = 13 [default = 0];
    if (has_last_concert_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_concert_skillid());
    }

  }
  // repeated .Cmd.SkillData datas = 3;
  total_size += 1 * this->datas_size();
  for (int i = 0; i < this->datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datas(i));
  }

  // repeated .Cmd.SkillPos pos = 4;
  total_size += 1 * this->pos_size();
  for (int i = 0; i < this->pos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pos(i));
  }

  // repeated .Cmd.SkillPos autopos = 6;
  total_size += 1 * this->autopos_size();
  for (int i = 0; i < this->autopos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->autopos(i));
  }

  // repeated .Cmd.SkillPos extendpos = 7;
  total_size += 1 * this->extendpos_size();
  for (int i = 0; i < this->extendpos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->extendpos(i));
  }

  // repeated .Cmd.SkillReplaceInfo replace = 11;
  total_size += 1 * this->replace_size();
  for (int i = 0; i < this->replace_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->replace(i));
  }

  // repeated .Cmd.SkillShortcutDB shortcuts = 12;
  total_size += 1 * this->shortcuts_size();
  for (int i = 0; i < this->shortcuts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shortcuts(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserSkillData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserSkillData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserSkillData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserSkillData::MergeFrom(const UserSkillData& from) {
  GOOGLE_CHECK_NE(&from, this);
  datas_.MergeFrom(from.datas_);
  pos_.MergeFrom(from.pos_);
  autopos_.MergeFrom(from.autopos_);
  extendpos_.MergeFrom(from.extendpos_);
  replace_.MergeFrom(from.replace_);
  shortcuts_.MergeFrom(from.shortcuts_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_totalpoint()) {
      set_totalpoint(from.totalpoint());
    }
    if (from.has_maxpos()) {
      set_maxpos(from.maxpos());
    }
    if (from.has_automaxpos()) {
      set_automaxpos(from.automaxpos());
    }
    if (from.has_maxextendpos()) {
      set_maxextendpos(from.maxextendpos());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_reseted()) {
      set_reseted(from.reseted());
    }
    if (from.has_last_concert_skillid()) {
      set_last_concert_skillid(from.last_concert_skillid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserSkillData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserSkillData::CopyFrom(const UserSkillData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserSkillData::IsInitialized() const {

  return true;
}

void UserSkillData::Swap(UserSkillData* other) {
  if (other != this) {
    std::swap(totalpoint_, other->totalpoint_);
    std::swap(maxpos_, other->maxpos_);
    datas_.Swap(&other->datas_);
    pos_.Swap(&other->pos_);
    std::swap(automaxpos_, other->automaxpos_);
    autopos_.Swap(&other->autopos_);
    extendpos_.Swap(&other->extendpos_);
    std::swap(maxextendpos_, other->maxextendpos_);
    std::swap(reseted_, other->reseted_);
    replace_.Swap(&other->replace_);
    shortcuts_.Swap(&other->shortcuts_);
    std::swap(last_concert_skillid_, other->last_concert_skillid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserSkillData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserSkillData_descriptor_;
  metadata.reflection = UserSkillData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobShareSkill::kItemsFieldNumber;
#endif  // !_MSC_VER

BlobShareSkill::BlobShareSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobShareSkill)
}

void BlobShareSkill::InitAsDefaultInstance() {
}

BlobShareSkill::BlobShareSkill(const BlobShareSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobShareSkill)
}

void BlobShareSkill::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobShareSkill::~BlobShareSkill() {
  // @@protoc_insertion_point(destructor:Cmd.BlobShareSkill)
  SharedDtor();
}

void BlobShareSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobShareSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobShareSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobShareSkill_descriptor_;
}

const BlobShareSkill& BlobShareSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobShareSkill* BlobShareSkill::default_instance_ = NULL;

BlobShareSkill* BlobShareSkill::New() const {
  return new BlobShareSkill;
}

void BlobShareSkill::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobShareSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobShareSkill)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Cmd.SkillItem items = 1;
      case 1: {
        if (tag == 10) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobShareSkill)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobShareSkill)
  return false;
#undef DO_
}

void BlobShareSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobShareSkill)
  // repeated .Cmd.SkillItem items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobShareSkill)
}

::google::protobuf::uint8* BlobShareSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobShareSkill)
  // repeated .Cmd.SkillItem items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobShareSkill)
  return target;
}

int BlobShareSkill::ByteSize() const {
  int total_size = 0;

  // repeated .Cmd.SkillItem items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobShareSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobShareSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobShareSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobShareSkill::MergeFrom(const BlobShareSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobShareSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobShareSkill::CopyFrom(const BlobShareSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobShareSkill::IsInitialized() const {

  return true;
}

void BlobShareSkill::Swap(BlobShareSkill* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobShareSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobShareSkill_descriptor_;
  metadata.reflection = BlobShareSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserRoleData::kJobExpFieldNumber;
const int UserRoleData::kJobLvFieldNumber;
const int UserRoleData::kProfessionFieldNumber;
const int UserRoleData::kStrPointFieldNumber;
const int UserRoleData::kIntPointFieldNumber;
const int UserRoleData::kAgiPointFieldNumber;
const int UserRoleData::kDexPointFieldNumber;
const int UserRoleData::kVitPointFieldNumber;
const int UserRoleData::kLukPointFieldNumber;
const int UserRoleData::kTotalPointFieldNumber;
const int UserRoleData::kUsedPointFieldNumber;
const int UserRoleData::kHpFieldNumber;
const int UserRoleData::kSpFieldNumber;
const int UserRoleData::kSkillFieldNumber;
const int UserRoleData::kUnlocklvFieldNumber;
const int UserRoleData::kMaxjoblvFieldNumber;
const int UserRoleData::kBranchFieldNumber;
const int UserRoleData::kIsbuyFieldNumber;
#endif  // !_MSC_VER

UserRoleData::UserRoleData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UserRoleData)
}

void UserRoleData::InitAsDefaultInstance() {
  skill_ = const_cast< ::Cmd::UserSkillData*>(&::Cmd::UserSkillData::default_instance());
}

UserRoleData::UserRoleData(const UserRoleData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UserRoleData)
}

void UserRoleData::SharedCtor() {
  _cached_size_ = 0;
  jobexp_ = GOOGLE_ULONGLONG(0);
  joblv_ = 0u;
  profession_ = 0;
  strpoint_ = 0u;
  intpoint_ = 0u;
  agipoint_ = 0u;
  dexpoint_ = 0u;
  vitpoint_ = 0u;
  lukpoint_ = 0u;
  totalpoint_ = 0u;
  usedpoint_ = 0u;
  hp_ = 0u;
  sp_ = 0u;
  skill_ = NULL;
  maxjoblv_ = 0u;
  branch_ = 0u;
  isbuy_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserRoleData::~UserRoleData() {
  // @@protoc_insertion_point(destructor:Cmd.UserRoleData)
  SharedDtor();
}

void UserRoleData::SharedDtor() {
  if (this != default_instance_) {
    delete skill_;
  }
}

void UserRoleData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserRoleData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserRoleData_descriptor_;
}

const UserRoleData& UserRoleData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

UserRoleData* UserRoleData::default_instance_ = NULL;

UserRoleData* UserRoleData::New() const {
  return new UserRoleData;
}

void UserRoleData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserRoleData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(jobexp_, vitpoint_);
  }
  if (_has_bits_[8 / 32] & 48896) {
    ZR_(lukpoint_, sp_);
    if (has_skill()) {
      if (skill_ != NULL) skill_->::Cmd::UserSkillData::Clear();
    }
    maxjoblv_ = 0u;
  }
  ZR_(branch_, isbuy_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  unlocklv_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserRoleData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UserRoleData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 jobExp = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &jobexp_)));
          set_has_jobexp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_jobLv;
        break;
      }

      // optional uint32 jobLv = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_jobLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &joblv_)));
          set_has_joblv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_profession;
        break;
      }

      // optional .Cmd.EProfession profession = 3 [default = EPROFESSION_MIN];
      case 3: {
        if (tag == 24) {
         parse_profession:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EProfession_IsValid(value)) {
            set_profession(static_cast< ::Cmd::EProfession >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_strPoint;
        break;
      }

      // optional uint32 strPoint = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_strPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &strpoint_)));
          set_has_strpoint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_intPoint;
        break;
      }

      // optional uint32 intPoint = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_intPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &intpoint_)));
          set_has_intpoint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_agiPoint;
        break;
      }

      // optional uint32 agiPoint = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_agiPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &agipoint_)));
          set_has_agipoint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_dexPoint;
        break;
      }

      // optional uint32 dexPoint = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_dexPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dexpoint_)));
          set_has_dexpoint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_vitPoint;
        break;
      }

      // optional uint32 vitPoint = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_vitPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vitpoint_)));
          set_has_vitpoint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_lukPoint;
        break;
      }

      // optional uint32 lukPoint = 9 [default = 0];
      case 9: {
        if (tag == 72) {
         parse_lukPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lukpoint_)));
          set_has_lukpoint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_totalPoint;
        break;
      }

      // optional uint32 totalPoint = 10 [default = 0];
      case 10: {
        if (tag == 80) {
         parse_totalPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalpoint_)));
          set_has_totalpoint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_usedPoint;
        break;
      }

      // optional uint32 usedPoint = 11 [default = 0];
      case 11: {
        if (tag == 88) {
         parse_usedPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usedpoint_)));
          set_has_usedpoint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_hp;
        break;
      }

      // optional uint32 hp = 12 [default = 0];
      case 12: {
        if (tag == 96) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_sp;
        break;
      }

      // optional uint32 sp = 13 [default = 0];
      case 13: {
        if (tag == 104) {
         parse_sp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sp_)));
          set_has_sp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_skill;
        break;
      }

      // optional .Cmd.UserSkillData skill = 14;
      case 14: {
        if (tag == 114) {
         parse_skill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skill()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_unlocklv;
        break;
      }

      // repeated uint32 unlocklv = 15;
      case 15: {
        if (tag == 120) {
         parse_unlocklv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 120, input, this->mutable_unlocklv())));
        } else if (tag == 122) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_unlocklv())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_unlocklv;
        if (input->ExpectTag(128)) goto parse_maxjoblv;
        break;
      }

      // optional uint32 maxjoblv = 16 [default = 0];
      case 16: {
        if (tag == 128) {
         parse_maxjoblv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxjoblv_)));
          set_has_maxjoblv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_branch;
        break;
      }

      // optional uint32 branch = 17 [default = 0];
      case 17: {
        if (tag == 136) {
         parse_branch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &branch_)));
          set_has_branch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_isbuy;
        break;
      }

      // optional bool isbuy = 18 [default = false];
      case 18: {
        if (tag == 144) {
         parse_isbuy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isbuy_)));
          set_has_isbuy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UserRoleData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UserRoleData)
  return false;
#undef DO_
}

void UserRoleData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UserRoleData)
  // optional uint64 jobExp = 1 [default = 0];
  if (has_jobexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->jobexp(), output);
  }

  // optional uint32 jobLv = 2 [default = 0];
  if (has_joblv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->joblv(), output);
  }

  // optional .Cmd.EProfession profession = 3 [default = EPROFESSION_MIN];
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->profession(), output);
  }

  // optional uint32 strPoint = 4 [default = 0];
  if (has_strpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->strpoint(), output);
  }

  // optional uint32 intPoint = 5 [default = 0];
  if (has_intpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->intpoint(), output);
  }

  // optional uint32 agiPoint = 6 [default = 0];
  if (has_agipoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->agipoint(), output);
  }

  // optional uint32 dexPoint = 7 [default = 0];
  if (has_dexpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->dexpoint(), output);
  }

  // optional uint32 vitPoint = 8 [default = 0];
  if (has_vitpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->vitpoint(), output);
  }

  // optional uint32 lukPoint = 9 [default = 0];
  if (has_lukpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->lukpoint(), output);
  }

  // optional uint32 totalPoint = 10 [default = 0];
  if (has_totalpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->totalpoint(), output);
  }

  // optional uint32 usedPoint = 11 [default = 0];
  if (has_usedpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->usedpoint(), output);
  }

  // optional uint32 hp = 12 [default = 0];
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->hp(), output);
  }

  // optional uint32 sp = 13 [default = 0];
  if (has_sp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->sp(), output);
  }

  // optional .Cmd.UserSkillData skill = 14;
  if (has_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->skill(), output);
  }

  // repeated uint32 unlocklv = 15;
  for (int i = 0; i < this->unlocklv_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      15, this->unlocklv(i), output);
  }

  // optional uint32 maxjoblv = 16 [default = 0];
  if (has_maxjoblv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->maxjoblv(), output);
  }

  // optional uint32 branch = 17 [default = 0];
  if (has_branch()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->branch(), output);
  }

  // optional bool isbuy = 18 [default = false];
  if (has_isbuy()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->isbuy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UserRoleData)
}

::google::protobuf::uint8* UserRoleData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UserRoleData)
  // optional uint64 jobExp = 1 [default = 0];
  if (has_jobexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->jobexp(), target);
  }

  // optional uint32 jobLv = 2 [default = 0];
  if (has_joblv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->joblv(), target);
  }

  // optional .Cmd.EProfession profession = 3 [default = EPROFESSION_MIN];
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->profession(), target);
  }

  // optional uint32 strPoint = 4 [default = 0];
  if (has_strpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->strpoint(), target);
  }

  // optional uint32 intPoint = 5 [default = 0];
  if (has_intpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->intpoint(), target);
  }

  // optional uint32 agiPoint = 6 [default = 0];
  if (has_agipoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->agipoint(), target);
  }

  // optional uint32 dexPoint = 7 [default = 0];
  if (has_dexpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->dexpoint(), target);
  }

  // optional uint32 vitPoint = 8 [default = 0];
  if (has_vitpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->vitpoint(), target);
  }

  // optional uint32 lukPoint = 9 [default = 0];
  if (has_lukpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->lukpoint(), target);
  }

  // optional uint32 totalPoint = 10 [default = 0];
  if (has_totalpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->totalpoint(), target);
  }

  // optional uint32 usedPoint = 11 [default = 0];
  if (has_usedpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->usedpoint(), target);
  }

  // optional uint32 hp = 12 [default = 0];
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->hp(), target);
  }

  // optional uint32 sp = 13 [default = 0];
  if (has_sp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->sp(), target);
  }

  // optional .Cmd.UserSkillData skill = 14;
  if (has_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->skill(), target);
  }

  // repeated uint32 unlocklv = 15;
  for (int i = 0; i < this->unlocklv_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(15, this->unlocklv(i), target);
  }

  // optional uint32 maxjoblv = 16 [default = 0];
  if (has_maxjoblv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->maxjoblv(), target);
  }

  // optional uint32 branch = 17 [default = 0];
  if (has_branch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->branch(), target);
  }

  // optional bool isbuy = 18 [default = false];
  if (has_isbuy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->isbuy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UserRoleData)
  return target;
}

int UserRoleData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 jobExp = 1 [default = 0];
    if (has_jobexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->jobexp());
    }

    // optional uint32 jobLv = 2 [default = 0];
    if (has_joblv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->joblv());
    }

    // optional .Cmd.EProfession profession = 3 [default = EPROFESSION_MIN];
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->profession());
    }

    // optional uint32 strPoint = 4 [default = 0];
    if (has_strpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->strpoint());
    }

    // optional uint32 intPoint = 5 [default = 0];
    if (has_intpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->intpoint());
    }

    // optional uint32 agiPoint = 6 [default = 0];
    if (has_agipoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->agipoint());
    }

    // optional uint32 dexPoint = 7 [default = 0];
    if (has_dexpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dexpoint());
    }

    // optional uint32 vitPoint = 8 [default = 0];
    if (has_vitpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vitpoint());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 lukPoint = 9 [default = 0];
    if (has_lukpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lukpoint());
    }

    // optional uint32 totalPoint = 10 [default = 0];
    if (has_totalpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalpoint());
    }

    // optional uint32 usedPoint = 11 [default = 0];
    if (has_usedpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usedpoint());
    }

    // optional uint32 hp = 12 [default = 0];
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hp());
    }

    // optional uint32 sp = 13 [default = 0];
    if (has_sp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sp());
    }

    // optional .Cmd.UserSkillData skill = 14;
    if (has_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skill());
    }

    // optional uint32 maxjoblv = 16 [default = 0];
    if (has_maxjoblv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxjoblv());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 branch = 17 [default = 0];
    if (has_branch()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->branch());
    }

    // optional bool isbuy = 18 [default = false];
    if (has_isbuy()) {
      total_size += 2 + 1;
    }

  }
  // repeated uint32 unlocklv = 15;
  {
    int data_size = 0;
    for (int i = 0; i < this->unlocklv_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->unlocklv(i));
    }
    total_size += 1 * this->unlocklv_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserRoleData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserRoleData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserRoleData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserRoleData::MergeFrom(const UserRoleData& from) {
  GOOGLE_CHECK_NE(&from, this);
  unlocklv_.MergeFrom(from.unlocklv_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_jobexp()) {
      set_jobexp(from.jobexp());
    }
    if (from.has_joblv()) {
      set_joblv(from.joblv());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
    if (from.has_strpoint()) {
      set_strpoint(from.strpoint());
    }
    if (from.has_intpoint()) {
      set_intpoint(from.intpoint());
    }
    if (from.has_agipoint()) {
      set_agipoint(from.agipoint());
    }
    if (from.has_dexpoint()) {
      set_dexpoint(from.dexpoint());
    }
    if (from.has_vitpoint()) {
      set_vitpoint(from.vitpoint());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_lukpoint()) {
      set_lukpoint(from.lukpoint());
    }
    if (from.has_totalpoint()) {
      set_totalpoint(from.totalpoint());
    }
    if (from.has_usedpoint()) {
      set_usedpoint(from.usedpoint());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_sp()) {
      set_sp(from.sp());
    }
    if (from.has_skill()) {
      mutable_skill()->::Cmd::UserSkillData::MergeFrom(from.skill());
    }
    if (from.has_maxjoblv()) {
      set_maxjoblv(from.maxjoblv());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_branch()) {
      set_branch(from.branch());
    }
    if (from.has_isbuy()) {
      set_isbuy(from.isbuy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserRoleData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserRoleData::CopyFrom(const UserRoleData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserRoleData::IsInitialized() const {

  return true;
}

void UserRoleData::Swap(UserRoleData* other) {
  if (other != this) {
    std::swap(jobexp_, other->jobexp_);
    std::swap(joblv_, other->joblv_);
    std::swap(profession_, other->profession_);
    std::swap(strpoint_, other->strpoint_);
    std::swap(intpoint_, other->intpoint_);
    std::swap(agipoint_, other->agipoint_);
    std::swap(dexpoint_, other->dexpoint_);
    std::swap(vitpoint_, other->vitpoint_);
    std::swap(lukpoint_, other->lukpoint_);
    std::swap(totalpoint_, other->totalpoint_);
    std::swap(usedpoint_, other->usedpoint_);
    std::swap(hp_, other->hp_);
    std::swap(sp_, other->sp_);
    std::swap(skill_, other->skill_);
    unlocklv_.Swap(&other->unlocklv_);
    std::swap(maxjoblv_, other->maxjoblv_);
    std::swap(branch_, other->branch_);
    std::swap(isbuy_, other->isbuy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserRoleData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserRoleData_descriptor_;
  metadata.reflection = UserRoleData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobFighter::kDatasFieldNumber;
const int BlobFighter::kTotalpointFieldNumber;
const int BlobFighter::kMaxskillposFieldNumber;
const int BlobFighter::kMaxautoposFieldNumber;
const int BlobFighter::kMaxextendposFieldNumber;
const int BlobFighter::kMaxjoblvFieldNumber;
const int BlobFighter::kMaxcurjoblvFieldNumber;
#endif  // !_MSC_VER

BlobFighter::BlobFighter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobFighter)
}

void BlobFighter::InitAsDefaultInstance() {
}

BlobFighter::BlobFighter(const BlobFighter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobFighter)
}

void BlobFighter::SharedCtor() {
  _cached_size_ = 0;
  totalpoint_ = 0u;
  maxskillpos_ = 0u;
  maxautopos_ = 0u;
  maxextendpos_ = 0u;
  maxjoblv_ = 0u;
  maxcurjoblv_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobFighter::~BlobFighter() {
  // @@protoc_insertion_point(destructor:Cmd.BlobFighter)
  SharedDtor();
}

void BlobFighter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobFighter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobFighter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobFighter_descriptor_;
}

const BlobFighter& BlobFighter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobFighter* BlobFighter::default_instance_ = NULL;

BlobFighter* BlobFighter::New() const {
  return new BlobFighter;
}

void BlobFighter::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BlobFighter*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 126) {
    ZR_(totalpoint_, maxcurjoblv_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  datas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobFighter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobFighter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Cmd.UserRoleData datas = 1;
      case 1: {
        if (tag == 10) {
         parse_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_datas;
        if (input->ExpectTag(16)) goto parse_totalpoint;
        break;
      }

      // optional uint32 totalpoint = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_totalpoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalpoint_)));
          set_has_totalpoint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_maxskillpos;
        break;
      }

      // optional uint32 maxskillpos = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_maxskillpos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxskillpos_)));
          set_has_maxskillpos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_maxautopos;
        break;
      }

      // optional uint32 maxautopos = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_maxautopos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxautopos_)));
          set_has_maxautopos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_maxextendpos;
        break;
      }

      // optional uint32 maxextendpos = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_maxextendpos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxextendpos_)));
          set_has_maxextendpos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_maxjoblv;
        break;
      }

      // optional uint32 maxjoblv = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_maxjoblv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxjoblv_)));
          set_has_maxjoblv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_maxcurjoblv;
        break;
      }

      // optional uint32 maxcurjoblv = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_maxcurjoblv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxcurjoblv_)));
          set_has_maxcurjoblv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobFighter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobFighter)
  return false;
#undef DO_
}

void BlobFighter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobFighter)
  // repeated .Cmd.UserRoleData datas = 1;
  for (int i = 0; i < this->datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->datas(i), output);
  }

  // optional uint32 totalpoint = 2 [default = 0];
  if (has_totalpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->totalpoint(), output);
  }

  // optional uint32 maxskillpos = 3 [default = 0];
  if (has_maxskillpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->maxskillpos(), output);
  }

  // optional uint32 maxautopos = 4 [default = 0];
  if (has_maxautopos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->maxautopos(), output);
  }

  // optional uint32 maxextendpos = 5 [default = 0];
  if (has_maxextendpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->maxextendpos(), output);
  }

  // optional uint32 maxjoblv = 6 [default = 0];
  if (has_maxjoblv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->maxjoblv(), output);
  }

  // optional uint32 maxcurjoblv = 7 [default = 0];
  if (has_maxcurjoblv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->maxcurjoblv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobFighter)
}

::google::protobuf::uint8* BlobFighter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobFighter)
  // repeated .Cmd.UserRoleData datas = 1;
  for (int i = 0; i < this->datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->datas(i), target);
  }

  // optional uint32 totalpoint = 2 [default = 0];
  if (has_totalpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->totalpoint(), target);
  }

  // optional uint32 maxskillpos = 3 [default = 0];
  if (has_maxskillpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->maxskillpos(), target);
  }

  // optional uint32 maxautopos = 4 [default = 0];
  if (has_maxautopos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->maxautopos(), target);
  }

  // optional uint32 maxextendpos = 5 [default = 0];
  if (has_maxextendpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->maxextendpos(), target);
  }

  // optional uint32 maxjoblv = 6 [default = 0];
  if (has_maxjoblv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->maxjoblv(), target);
  }

  // optional uint32 maxcurjoblv = 7 [default = 0];
  if (has_maxcurjoblv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->maxcurjoblv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobFighter)
  return target;
}

int BlobFighter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 totalpoint = 2 [default = 0];
    if (has_totalpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalpoint());
    }

    // optional uint32 maxskillpos = 3 [default = 0];
    if (has_maxskillpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxskillpos());
    }

    // optional uint32 maxautopos = 4 [default = 0];
    if (has_maxautopos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxautopos());
    }

    // optional uint32 maxextendpos = 5 [default = 0];
    if (has_maxextendpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxextendpos());
    }

    // optional uint32 maxjoblv = 6 [default = 0];
    if (has_maxjoblv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxjoblv());
    }

    // optional uint32 maxcurjoblv = 7 [default = 0];
    if (has_maxcurjoblv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxcurjoblv());
    }

  }
  // repeated .Cmd.UserRoleData datas = 1;
  total_size += 1 * this->datas_size();
  for (int i = 0; i < this->datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobFighter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobFighter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobFighter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobFighter::MergeFrom(const BlobFighter& from) {
  GOOGLE_CHECK_NE(&from, this);
  datas_.MergeFrom(from.datas_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_totalpoint()) {
      set_totalpoint(from.totalpoint());
    }
    if (from.has_maxskillpos()) {
      set_maxskillpos(from.maxskillpos());
    }
    if (from.has_maxautopos()) {
      set_maxautopos(from.maxautopos());
    }
    if (from.has_maxextendpos()) {
      set_maxextendpos(from.maxextendpos());
    }
    if (from.has_maxjoblv()) {
      set_maxjoblv(from.maxjoblv());
    }
    if (from.has_maxcurjoblv()) {
      set_maxcurjoblv(from.maxcurjoblv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobFighter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobFighter::CopyFrom(const BlobFighter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobFighter::IsInitialized() const {

  return true;
}

void BlobFighter::Swap(BlobFighter* other) {
  if (other != this) {
    datas_.Swap(&other->datas_);
    std::swap(totalpoint_, other->totalpoint_);
    std::swap(maxskillpos_, other->maxskillpos_);
    std::swap(maxautopos_, other->maxautopos_);
    std::swap(maxextendpos_, other->maxextendpos_);
    std::swap(maxjoblv_, other->maxjoblv_);
    std::swap(maxcurjoblv_, other->maxcurjoblv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobFighter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobFighter_descriptor_;
  metadata.reflection = BlobFighter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StageStepNormalBlob::kStepidFieldNumber;
const int StageStepNormalBlob::kStarFieldNumber;
#endif  // !_MSC_VER

StageStepNormalBlob::StageStepNormalBlob()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.StageStepNormalBlob)
}

void StageStepNormalBlob::InitAsDefaultInstance() {
}

StageStepNormalBlob::StageStepNormalBlob(const StageStepNormalBlob& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.StageStepNormalBlob)
}

void StageStepNormalBlob::SharedCtor() {
  _cached_size_ = 0;
  stepid_ = 0u;
  star_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StageStepNormalBlob::~StageStepNormalBlob() {
  // @@protoc_insertion_point(destructor:Cmd.StageStepNormalBlob)
  SharedDtor();
}

void StageStepNormalBlob::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StageStepNormalBlob::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StageStepNormalBlob::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StageStepNormalBlob_descriptor_;
}

const StageStepNormalBlob& StageStepNormalBlob::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

StageStepNormalBlob* StageStepNormalBlob::default_instance_ = NULL;

StageStepNormalBlob* StageStepNormalBlob::New() const {
  return new StageStepNormalBlob;
}

void StageStepNormalBlob::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StageStepNormalBlob*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(stepid_, star_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StageStepNormalBlob::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.StageStepNormalBlob)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 stepid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stepid_)));
          set_has_stepid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_star;
        break;
      }

      // optional uint32 star = 2;
      case 2: {
        if (tag == 16) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.StageStepNormalBlob)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.StageStepNormalBlob)
  return false;
#undef DO_
}

void StageStepNormalBlob::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.StageStepNormalBlob)
  // optional uint32 stepid = 1;
  if (has_stepid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stepid(), output);
  }

  // optional uint32 star = 2;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->star(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.StageStepNormalBlob)
}

::google::protobuf::uint8* StageStepNormalBlob::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.StageStepNormalBlob)
  // optional uint32 stepid = 1;
  if (has_stepid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->stepid(), target);
  }

  // optional uint32 star = 2;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->star(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.StageStepNormalBlob)
  return target;
}

int StageStepNormalBlob::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 stepid = 1;
    if (has_stepid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stepid());
    }

    // optional uint32 star = 2;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StageStepNormalBlob::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StageStepNormalBlob* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StageStepNormalBlob*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StageStepNormalBlob::MergeFrom(const StageStepNormalBlob& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stepid()) {
      set_stepid(from.stepid());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StageStepNormalBlob::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StageStepNormalBlob::CopyFrom(const StageStepNormalBlob& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StageStepNormalBlob::IsInitialized() const {

  return true;
}

void StageStepNormalBlob::Swap(StageStepNormalBlob* other) {
  if (other != this) {
    std::swap(stepid_, other->stepid_);
    std::swap(star_, other->star_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StageStepNormalBlob::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StageStepNormalBlob_descriptor_;
  metadata.reflection = StageStepNormalBlob_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StageStepHardBlob::kStepidFieldNumber;
const int StageStepHardBlob::kFinishFieldNumber;
const int StageStepHardBlob::kTimeFieldNumber;
#endif  // !_MSC_VER

StageStepHardBlob::StageStepHardBlob()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.StageStepHardBlob)
}

void StageStepHardBlob::InitAsDefaultInstance() {
}

StageStepHardBlob::StageStepHardBlob(const StageStepHardBlob& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.StageStepHardBlob)
}

void StageStepHardBlob::SharedCtor() {
  _cached_size_ = 0;
  stepid_ = 0u;
  finish_ = 0u;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StageStepHardBlob::~StageStepHardBlob() {
  // @@protoc_insertion_point(destructor:Cmd.StageStepHardBlob)
  SharedDtor();
}

void StageStepHardBlob::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StageStepHardBlob::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StageStepHardBlob::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StageStepHardBlob_descriptor_;
}

const StageStepHardBlob& StageStepHardBlob::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

StageStepHardBlob* StageStepHardBlob::default_instance_ = NULL;

StageStepHardBlob* StageStepHardBlob::New() const {
  return new StageStepHardBlob;
}

void StageStepHardBlob::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StageStepHardBlob*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(stepid_, time_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StageStepHardBlob::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.StageStepHardBlob)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 stepid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stepid_)));
          set_has_stepid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_finish;
        break;
      }

      // optional uint32 finish = 2;
      case 2: {
        if (tag == 16) {
         parse_finish:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &finish_)));
          set_has_finish();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional uint32 time = 3;
      case 3: {
        if (tag == 24) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.StageStepHardBlob)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.StageStepHardBlob)
  return false;
#undef DO_
}

void StageStepHardBlob::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.StageStepHardBlob)
  // optional uint32 stepid = 1;
  if (has_stepid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stepid(), output);
  }

  // optional uint32 finish = 2;
  if (has_finish()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->finish(), output);
  }

  // optional uint32 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.StageStepHardBlob)
}

::google::protobuf::uint8* StageStepHardBlob::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.StageStepHardBlob)
  // optional uint32 stepid = 1;
  if (has_stepid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->stepid(), target);
  }

  // optional uint32 finish = 2;
  if (has_finish()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->finish(), target);
  }

  // optional uint32 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.StageStepHardBlob)
  return target;
}

int StageStepHardBlob::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 stepid = 1;
    if (has_stepid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stepid());
    }

    // optional uint32 finish = 2;
    if (has_finish()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->finish());
    }

    // optional uint32 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StageStepHardBlob::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StageStepHardBlob* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StageStepHardBlob*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StageStepHardBlob::MergeFrom(const StageStepHardBlob& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stepid()) {
      set_stepid(from.stepid());
    }
    if (from.has_finish()) {
      set_finish(from.finish());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StageStepHardBlob::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StageStepHardBlob::CopyFrom(const StageStepHardBlob& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StageStepHardBlob::IsInitialized() const {

  return true;
}

void StageStepHardBlob::Swap(StageStepHardBlob* other) {
  if (other != this) {
    std::swap(stepid_, other->stepid_);
    std::swap(finish_, other->finish_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StageStepHardBlob::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StageStepHardBlob_descriptor_;
  metadata.reflection = StageStepHardBlob_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StageBlobItem::kStageIDFieldNumber;
const int StageBlobItem::kNormalistFieldNumber;
const int StageBlobItem::kHardlistFieldNumber;
const int StageBlobItem::kGetsFieldNumber;
#endif  // !_MSC_VER

StageBlobItem::StageBlobItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.StageBlobItem)
}

void StageBlobItem::InitAsDefaultInstance() {
}

StageBlobItem::StageBlobItem(const StageBlobItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.StageBlobItem)
}

void StageBlobItem::SharedCtor() {
  _cached_size_ = 0;
  stageid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StageBlobItem::~StageBlobItem() {
  // @@protoc_insertion_point(destructor:Cmd.StageBlobItem)
  SharedDtor();
}

void StageBlobItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StageBlobItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StageBlobItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StageBlobItem_descriptor_;
}

const StageBlobItem& StageBlobItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

StageBlobItem* StageBlobItem::default_instance_ = NULL;

StageBlobItem* StageBlobItem::New() const {
  return new StageBlobItem;
}

void StageBlobItem::Clear() {
  stageid_ = 0u;
  normalist_.Clear();
  hardlist_.Clear();
  gets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StageBlobItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.StageBlobItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 stageID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stageid_)));
          set_has_stageid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_normalist;
        break;
      }

      // repeated .Cmd.StageStepNormalBlob normalist = 2;
      case 2: {
        if (tag == 18) {
         parse_normalist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_normalist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_normalist;
        if (input->ExpectTag(26)) goto parse_hardlist;
        break;
      }

      // repeated .Cmd.StageStepHardBlob hardlist = 3;
      case 3: {
        if (tag == 26) {
         parse_hardlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hardlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_hardlist;
        if (input->ExpectTag(32)) goto parse_gets;
        break;
      }

      // repeated uint32 gets = 4;
      case 4: {
        if (tag == 32) {
         parse_gets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_gets())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_gets())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gets;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.StageBlobItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.StageBlobItem)
  return false;
#undef DO_
}

void StageBlobItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.StageBlobItem)
  // optional uint32 stageID = 1;
  if (has_stageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stageid(), output);
  }

  // repeated .Cmd.StageStepNormalBlob normalist = 2;
  for (int i = 0; i < this->normalist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->normalist(i), output);
  }

  // repeated .Cmd.StageStepHardBlob hardlist = 3;
  for (int i = 0; i < this->hardlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->hardlist(i), output);
  }

  // repeated uint32 gets = 4;
  for (int i = 0; i < this->gets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->gets(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.StageBlobItem)
}

::google::protobuf::uint8* StageBlobItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.StageBlobItem)
  // optional uint32 stageID = 1;
  if (has_stageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->stageid(), target);
  }

  // repeated .Cmd.StageStepNormalBlob normalist = 2;
  for (int i = 0; i < this->normalist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->normalist(i), target);
  }

  // repeated .Cmd.StageStepHardBlob hardlist = 3;
  for (int i = 0; i < this->hardlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->hardlist(i), target);
  }

  // repeated uint32 gets = 4;
  for (int i = 0; i < this->gets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->gets(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.StageBlobItem)
  return target;
}

int StageBlobItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 stageID = 1;
    if (has_stageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stageid());
    }

  }
  // repeated .Cmd.StageStepNormalBlob normalist = 2;
  total_size += 1 * this->normalist_size();
  for (int i = 0; i < this->normalist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->normalist(i));
  }

  // repeated .Cmd.StageStepHardBlob hardlist = 3;
  total_size += 1 * this->hardlist_size();
  for (int i = 0; i < this->hardlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hardlist(i));
  }

  // repeated uint32 gets = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->gets_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->gets(i));
    }
    total_size += 1 * this->gets_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StageBlobItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StageBlobItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StageBlobItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StageBlobItem::MergeFrom(const StageBlobItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  normalist_.MergeFrom(from.normalist_);
  hardlist_.MergeFrom(from.hardlist_);
  gets_.MergeFrom(from.gets_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stageid()) {
      set_stageid(from.stageid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StageBlobItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StageBlobItem::CopyFrom(const StageBlobItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StageBlobItem::IsInitialized() const {

  return true;
}

void StageBlobItem::Swap(StageBlobItem* other) {
  if (other != this) {
    std::swap(stageid_, other->stageid_);
    normalist_.Swap(&other->normalist_);
    hardlist_.Swap(&other->hardlist_);
    gets_.Swap(&other->gets_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StageBlobItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StageBlobItem_descriptor_;
  metadata.reflection = StageBlobItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobStage::kListFieldNumber;
const int BlobStage::kResetTimeFieldNumber;
#endif  // !_MSC_VER

BlobStage::BlobStage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobStage)
}

void BlobStage::InitAsDefaultInstance() {
}

BlobStage::BlobStage(const BlobStage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobStage)
}

void BlobStage::SharedCtor() {
  _cached_size_ = 0;
  resettime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobStage::~BlobStage() {
  // @@protoc_insertion_point(destructor:Cmd.BlobStage)
  SharedDtor();
}

void BlobStage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobStage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobStage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobStage_descriptor_;
}

const BlobStage& BlobStage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobStage* BlobStage::default_instance_ = NULL;

BlobStage* BlobStage::New() const {
  return new BlobStage;
}

void BlobStage::Clear() {
  resettime_ = 0u;
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobStage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobStage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Cmd.StageBlobItem list = 1;
      case 1: {
        if (tag == 10) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectTag(16)) goto parse_resetTime;
        break;
      }

      // optional uint32 resetTime = 2;
      case 2: {
        if (tag == 16) {
         parse_resetTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resettime_)));
          set_has_resettime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobStage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobStage)
  return false;
#undef DO_
}

void BlobStage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobStage)
  // repeated .Cmd.StageBlobItem list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  // optional uint32 resetTime = 2;
  if (has_resettime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->resettime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobStage)
}

::google::protobuf::uint8* BlobStage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobStage)
  // repeated .Cmd.StageBlobItem list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  // optional uint32 resetTime = 2;
  if (has_resettime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->resettime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobStage)
  return target;
}

int BlobStage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 resetTime = 2;
    if (has_resettime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resettime());
    }

  }
  // repeated .Cmd.StageBlobItem list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobStage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobStage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobStage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobStage::MergeFrom(const BlobStage& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_resettime()) {
      set_resettime(from.resettime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobStage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobStage::CopyFrom(const BlobStage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobStage::IsInitialized() const {

  return true;
}

void BlobStage::Swap(BlobStage* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(resettime_, other->resettime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobStage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobStage_descriptor_;
  metadata.reflection = BlobStage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestNpcData::kMapidFieldNumber;
const int QuestNpcData::kQuestidFieldNumber;
const int QuestNpcData::kGroupidFieldNumber;
const int QuestNpcData::kAccFieldNumber;
const int QuestNpcData::kHpFieldNumber;
const int QuestNpcData::kDataFieldNumber;
#endif  // !_MSC_VER

QuestNpcData::QuestNpcData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QuestNpcData)
}

void QuestNpcData::InitAsDefaultInstance() {
  data_ = const_cast< ::Cmd::NpcDefineData*>(&::Cmd::NpcDefineData::default_instance());
}

QuestNpcData::QuestNpcData(const QuestNpcData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QuestNpcData)
}

void QuestNpcData::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0u;
  questid_ = 0u;
  groupid_ = 0u;
  acc_ = 0u;
  hp_ = 0u;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestNpcData::~QuestNpcData() {
  // @@protoc_insertion_point(destructor:Cmd.QuestNpcData)
  SharedDtor();
}

void QuestNpcData::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void QuestNpcData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestNpcData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestNpcData_descriptor_;
}

const QuestNpcData& QuestNpcData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

QuestNpcData* QuestNpcData::default_instance_ = NULL;

QuestNpcData* QuestNpcData::New() const {
  return new QuestNpcData;
}

void QuestNpcData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<QuestNpcData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(mapid_, acc_);
    hp_ = 0u;
    if (has_data()) {
      if (data_ != NULL) data_->::Cmd::NpcDefineData::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestNpcData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QuestNpcData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mapid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_questid;
        break;
      }

      // optional uint32 questid = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_questid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &questid_)));
          set_has_questid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_hp;
        break;
      }

      // optional uint32 hp = 12 [default = 0];
      case 12: {
        if (tag == 96) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_data;
        break;
      }

      // optional .Cmd.NpcDefineData data = 14;
      case 14: {
        if (tag == 114) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_acc;
        break;
      }

      // optional uint32 acc = 15 [default = 0];
      case 15: {
        if (tag == 120) {
         parse_acc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &acc_)));
          set_has_acc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_groupid;
        break;
      }

      // optional uint32 groupid = 16 [default = 0];
      case 16: {
        if (tag == 128) {
         parse_groupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QuestNpcData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QuestNpcData)
  return false;
#undef DO_
}

void QuestNpcData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QuestNpcData)
  // optional uint32 mapid = 1 [default = 0];
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mapid(), output);
  }

  // optional uint32 questid = 2 [default = 0];
  if (has_questid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->questid(), output);
  }

  // optional uint32 hp = 12 [default = 0];
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->hp(), output);
  }

  // optional .Cmd.NpcDefineData data = 14;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->data(), output);
  }

  // optional uint32 acc = 15 [default = 0];
  if (has_acc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->acc(), output);
  }

  // optional uint32 groupid = 16 [default = 0];
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->groupid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QuestNpcData)
}

::google::protobuf::uint8* QuestNpcData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QuestNpcData)
  // optional uint32 mapid = 1 [default = 0];
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mapid(), target);
  }

  // optional uint32 questid = 2 [default = 0];
  if (has_questid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->questid(), target);
  }

  // optional uint32 hp = 12 [default = 0];
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->hp(), target);
  }

  // optional .Cmd.NpcDefineData data = 14;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->data(), target);
  }

  // optional uint32 acc = 15 [default = 0];
  if (has_acc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->acc(), target);
  }

  // optional uint32 groupid = 16 [default = 0];
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->groupid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QuestNpcData)
  return target;
}

int QuestNpcData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 mapid = 1 [default = 0];
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

    // optional uint32 questid = 2 [default = 0];
    if (has_questid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->questid());
    }

    // optional uint32 groupid = 16 [default = 0];
    if (has_groupid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->groupid());
    }

    // optional uint32 acc = 15 [default = 0];
    if (has_acc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->acc());
    }

    // optional uint32 hp = 12 [default = 0];
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hp());
    }

    // optional .Cmd.NpcDefineData data = 14;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestNpcData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestNpcData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestNpcData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestNpcData::MergeFrom(const QuestNpcData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_questid()) {
      set_questid(from.questid());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_acc()) {
      set_acc(from.acc());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_data()) {
      mutable_data()->::Cmd::NpcDefineData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestNpcData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestNpcData::CopyFrom(const QuestNpcData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestNpcData::IsInitialized() const {

  return true;
}

void QuestNpcData::Swap(QuestNpcData* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(questid_, other->questid_);
    std::swap(groupid_, other->groupid_);
    std::swap(acc_, other->acc_);
    std::swap(hp_, other->hp_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestNpcData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestNpcData_descriptor_;
  metadata.reflection = QuestNpcData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobQuestNpc::kVersionFieldNumber;
const int BlobQuestNpc::kListFieldNumber;
#endif  // !_MSC_VER

BlobQuestNpc::BlobQuestNpc()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobQuestNpc)
}

void BlobQuestNpc::InitAsDefaultInstance() {
}

BlobQuestNpc::BlobQuestNpc(const BlobQuestNpc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobQuestNpc)
}

void BlobQuestNpc::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobQuestNpc::~BlobQuestNpc() {
  // @@protoc_insertion_point(destructor:Cmd.BlobQuestNpc)
  SharedDtor();
}

void BlobQuestNpc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobQuestNpc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobQuestNpc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobQuestNpc_descriptor_;
}

const BlobQuestNpc& BlobQuestNpc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobQuestNpc* BlobQuestNpc::default_instance_ = NULL;

BlobQuestNpc* BlobQuestNpc::New() const {
  return new BlobQuestNpc;
}

void BlobQuestNpc::Clear() {
  version_ = 0u;
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobQuestNpc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobQuestNpc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_list;
        break;
      }

      // repeated .Cmd.QuestNpcData list = 2;
      case 2: {
        if (tag == 18) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobQuestNpc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobQuestNpc)
  return false;
#undef DO_
}

void BlobQuestNpc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobQuestNpc)
  // optional uint32 version = 1 [default = 0];
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // repeated .Cmd.QuestNpcData list = 2;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobQuestNpc)
}

::google::protobuf::uint8* BlobQuestNpc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobQuestNpc)
  // optional uint32 version = 1 [default = 0];
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // repeated .Cmd.QuestNpcData list = 2;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobQuestNpc)
  return target;
}

int BlobQuestNpc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 version = 1 [default = 0];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

  }
  // repeated .Cmd.QuestNpcData list = 2;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobQuestNpc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobQuestNpc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobQuestNpc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobQuestNpc::MergeFrom(const BlobQuestNpc& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobQuestNpc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobQuestNpc::CopyFrom(const BlobQuestNpc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobQuestNpc::IsInitialized() const {

  return true;
}

void BlobQuestNpc::Swap(BlobQuestNpc* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobQuestNpc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobQuestNpc_descriptor_;
  metadata.reflection = BlobQuestNpc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BufferStateBlob::kIdFieldNumber;
const int BufferStateBlob::kEndtimeFieldNumber;
const int BufferStateBlob::kLvFieldNumber;
const int BufferStateBlob::kFromidFieldNumber;
const int BufferStateBlob::kHponaddFieldNumber;
const int BufferStateBlob::kAddtimeFieldNumber;
const int BufferStateBlob::kCountFieldNumber;
const int BufferStateBlob::kCommmondataFieldNumber;
const int BufferStateBlob::kActflagFieldNumber;
const int BufferStateBlob::kLayersFieldNumber;
const int BufferStateBlob::kTotaldamageFieldNumber;
const int BufferStateBlob::kAttackcountFieldNumber;
const int BufferStateBlob::kBeatkcountFieldNumber;
const int BufferStateBlob::kAttrsFieldNumber;
const int BufferStateBlob::kVecdataFieldNumber;
const int BufferStateBlob::kFromnameFieldNumber;
const int BufferStateBlob::kSparetimeFieldNumber;
const int BufferStateBlob::kSetendtimeFieldNumber;
const int BufferStateBlob::kTimetickFieldNumber;
#endif  // !_MSC_VER

BufferStateBlob::BufferStateBlob()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BufferStateBlob)
}

void BufferStateBlob::InitAsDefaultInstance() {
}

BufferStateBlob::BufferStateBlob(const BufferStateBlob& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BufferStateBlob)
}

void BufferStateBlob::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  endtime_ = GOOGLE_ULONGLONG(0);
  lv_ = 0u;
  fromid_ = GOOGLE_ULONGLONG(0);
  hponadd_ = 0u;
  addtime_ = 0u;
  count_ = 0u;
  commmondata_ = 0u;
  actflag_ = false;
  layers_ = 0u;
  totaldamage_ = 0u;
  attackcount_ = 0u;
  beatkcount_ = 0u;
  fromname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sparetime_ = GOOGLE_ULONGLONG(0);
  timetick_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BufferStateBlob::~BufferStateBlob() {
  // @@protoc_insertion_point(destructor:Cmd.BufferStateBlob)
  SharedDtor();
}

void BufferStateBlob::SharedDtor() {
  if (fromname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fromname_;
  }
  if (this != default_instance_) {
  }
}

void BufferStateBlob::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BufferStateBlob::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BufferStateBlob_descriptor_;
}

const BufferStateBlob& BufferStateBlob::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BufferStateBlob* BufferStateBlob::default_instance_ = NULL;

BufferStateBlob* BufferStateBlob::New() const {
  return new BufferStateBlob;
}

void BufferStateBlob::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BufferStateBlob*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(endtime_, commmondata_);
  }
  if (_has_bits_[8 / 32] & 40704) {
    ZR_(actflag_, attackcount_);
    beatkcount_ = 0u;
    if (has_fromname()) {
      if (fromname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fromname_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & 327680) {
    sparetime_ = GOOGLE_ULONGLONG(0);
    timetick_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  attrs_.Clear();
  vecdata_.Clear();
  setendtime_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BufferStateBlob::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BufferStateBlob)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_endtime;
        break;
      }

      // optional uint64 endtime = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_lv;
        break;
      }

      // optional uint32 lv = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_fromid;
        break;
      }

      // optional uint64 fromid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_fromid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fromid_)));
          set_has_fromid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_hponadd;
        break;
      }

      // optional uint32 hponadd = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_hponadd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hponadd_)));
          set_has_hponadd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_addtime;
        break;
      }

      // optional uint32 addtime = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_addtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &addtime_)));
          set_has_addtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_count;
        break;
      }

      // optional uint32 count = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_commmondata;
        break;
      }

      // optional uint32 commmondata = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_commmondata:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &commmondata_)));
          set_has_commmondata();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_actflag;
        break;
      }

      // optional bool actflag = 9;
      case 9: {
        if (tag == 72) {
         parse_actflag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &actflag_)));
          set_has_actflag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_layers;
        break;
      }

      // optional uint32 layers = 10 [default = 0];
      case 10: {
        if (tag == 80) {
         parse_layers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &layers_)));
          set_has_layers();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_totaldamage;
        break;
      }

      // optional uint32 totaldamage = 11 [default = 0];
      case 11: {
        if (tag == 88) {
         parse_totaldamage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totaldamage_)));
          set_has_totaldamage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_attackcount;
        break;
      }

      // optional uint32 attackcount = 12 [default = 0];
      case 12: {
        if (tag == 96) {
         parse_attackcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attackcount_)));
          set_has_attackcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_beatkcount;
        break;
      }

      // optional uint32 beatkcount = 13 [default = 0];
      case 13: {
        if (tag == 104) {
         parse_beatkcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &beatkcount_)));
          set_has_beatkcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_attrs;
        break;
      }

      // repeated .Cmd.UserAttrSvr attrs = 14;
      case 14: {
        if (tag == 114) {
         parse_attrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attrs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_attrs;
        if (input->ExpectTag(120)) goto parse_vecdata;
        break;
      }

      // repeated uint32 vecdata = 15;
      case 15: {
        if (tag == 120) {
         parse_vecdata:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 120, input, this->mutable_vecdata())));
        } else if (tag == 122) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_vecdata())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_vecdata;
        if (input->ExpectTag(130)) goto parse_fromname;
        break;
      }

      // optional string fromname = 16;
      case 16: {
        if (tag == 130) {
         parse_fromname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fromname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fromname().data(), this->fromname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fromname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_sparetime;
        break;
      }

      // optional uint64 sparetime = 17 [default = 0];
      case 17: {
        if (tag == 136) {
         parse_sparetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sparetime_)));
          set_has_sparetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_setendtime;
        break;
      }

      // repeated uint64 setendtime = 18;
      case 18: {
        if (tag == 144) {
         parse_setendtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 2, 144, input, this->mutable_setendtime())));
        } else if (tag == 146) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_setendtime())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_setendtime;
        if (input->ExpectTag(152)) goto parse_timetick;
        break;
      }

      // optional uint64 timetick = 19 [default = 0];
      case 19: {
        if (tag == 152) {
         parse_timetick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timetick_)));
          set_has_timetick();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BufferStateBlob)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BufferStateBlob)
  return false;
#undef DO_
}

void BufferStateBlob::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BufferStateBlob)
  // optional uint32 id = 1 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint64 endtime = 2 [default = 0];
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->endtime(), output);
  }

  // optional uint32 lv = 3 [default = 0];
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->lv(), output);
  }

  // optional uint64 fromid = 4 [default = 0];
  if (has_fromid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->fromid(), output);
  }

  // optional uint32 hponadd = 5 [default = 0];
  if (has_hponadd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->hponadd(), output);
  }

  // optional uint32 addtime = 6 [default = 0];
  if (has_addtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->addtime(), output);
  }

  // optional uint32 count = 7 [default = 0];
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->count(), output);
  }

  // optional uint32 commmondata = 8 [default = 0];
  if (has_commmondata()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->commmondata(), output);
  }

  // optional bool actflag = 9;
  if (has_actflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->actflag(), output);
  }

  // optional uint32 layers = 10 [default = 0];
  if (has_layers()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->layers(), output);
  }

  // optional uint32 totaldamage = 11 [default = 0];
  if (has_totaldamage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->totaldamage(), output);
  }

  // optional uint32 attackcount = 12 [default = 0];
  if (has_attackcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->attackcount(), output);
  }

  // optional uint32 beatkcount = 13 [default = 0];
  if (has_beatkcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->beatkcount(), output);
  }

  // repeated .Cmd.UserAttrSvr attrs = 14;
  for (int i = 0; i < this->attrs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->attrs(i), output);
  }

  // repeated uint32 vecdata = 15;
  for (int i = 0; i < this->vecdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      15, this->vecdata(i), output);
  }

  // optional string fromname = 16;
  if (has_fromname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fromname().data(), this->fromname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fromname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->fromname(), output);
  }

  // optional uint64 sparetime = 17 [default = 0];
  if (has_sparetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(17, this->sparetime(), output);
  }

  // repeated uint64 setendtime = 18;
  for (int i = 0; i < this->setendtime_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      18, this->setendtime(i), output);
  }

  // optional uint64 timetick = 19 [default = 0];
  if (has_timetick()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(19, this->timetick(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BufferStateBlob)
}

::google::protobuf::uint8* BufferStateBlob::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BufferStateBlob)
  // optional uint32 id = 1 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint64 endtime = 2 [default = 0];
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->endtime(), target);
  }

  // optional uint32 lv = 3 [default = 0];
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->lv(), target);
  }

  // optional uint64 fromid = 4 [default = 0];
  if (has_fromid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->fromid(), target);
  }

  // optional uint32 hponadd = 5 [default = 0];
  if (has_hponadd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->hponadd(), target);
  }

  // optional uint32 addtime = 6 [default = 0];
  if (has_addtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->addtime(), target);
  }

  // optional uint32 count = 7 [default = 0];
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->count(), target);
  }

  // optional uint32 commmondata = 8 [default = 0];
  if (has_commmondata()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->commmondata(), target);
  }

  // optional bool actflag = 9;
  if (has_actflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->actflag(), target);
  }

  // optional uint32 layers = 10 [default = 0];
  if (has_layers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->layers(), target);
  }

  // optional uint32 totaldamage = 11 [default = 0];
  if (has_totaldamage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->totaldamage(), target);
  }

  // optional uint32 attackcount = 12 [default = 0];
  if (has_attackcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->attackcount(), target);
  }

  // optional uint32 beatkcount = 13 [default = 0];
  if (has_beatkcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->beatkcount(), target);
  }

  // repeated .Cmd.UserAttrSvr attrs = 14;
  for (int i = 0; i < this->attrs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->attrs(i), target);
  }

  // repeated uint32 vecdata = 15;
  for (int i = 0; i < this->vecdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(15, this->vecdata(i), target);
  }

  // optional string fromname = 16;
  if (has_fromname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fromname().data(), this->fromname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fromname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->fromname(), target);
  }

  // optional uint64 sparetime = 17 [default = 0];
  if (has_sparetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(17, this->sparetime(), target);
  }

  // repeated uint64 setendtime = 18;
  for (int i = 0; i < this->setendtime_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(18, this->setendtime(i), target);
  }

  // optional uint64 timetick = 19 [default = 0];
  if (has_timetick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(19, this->timetick(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BufferStateBlob)
  return target;
}

int BufferStateBlob::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint64 endtime = 2 [default = 0];
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->endtime());
    }

    // optional uint32 lv = 3 [default = 0];
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv());
    }

    // optional uint64 fromid = 4 [default = 0];
    if (has_fromid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fromid());
    }

    // optional uint32 hponadd = 5 [default = 0];
    if (has_hponadd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hponadd());
    }

    // optional uint32 addtime = 6 [default = 0];
    if (has_addtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->addtime());
    }

    // optional uint32 count = 7 [default = 0];
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional uint32 commmondata = 8 [default = 0];
    if (has_commmondata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->commmondata());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool actflag = 9;
    if (has_actflag()) {
      total_size += 1 + 1;
    }

    // optional uint32 layers = 10 [default = 0];
    if (has_layers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->layers());
    }

    // optional uint32 totaldamage = 11 [default = 0];
    if (has_totaldamage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totaldamage());
    }

    // optional uint32 attackcount = 12 [default = 0];
    if (has_attackcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attackcount());
    }

    // optional uint32 beatkcount = 13 [default = 0];
    if (has_beatkcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->beatkcount());
    }

    // optional string fromname = 16;
    if (has_fromname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fromname());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint64 sparetime = 17 [default = 0];
    if (has_sparetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sparetime());
    }

    // optional uint64 timetick = 19 [default = 0];
    if (has_timetick()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timetick());
    }

  }
  // repeated .Cmd.UserAttrSvr attrs = 14;
  total_size += 1 * this->attrs_size();
  for (int i = 0; i < this->attrs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attrs(i));
  }

  // repeated uint32 vecdata = 15;
  {
    int data_size = 0;
    for (int i = 0; i < this->vecdata_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->vecdata(i));
    }
    total_size += 1 * this->vecdata_size() + data_size;
  }

  // repeated uint64 setendtime = 18;
  {
    int data_size = 0;
    for (int i = 0; i < this->setendtime_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->setendtime(i));
    }
    total_size += 2 * this->setendtime_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BufferStateBlob::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BufferStateBlob* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BufferStateBlob*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BufferStateBlob::MergeFrom(const BufferStateBlob& from) {
  GOOGLE_CHECK_NE(&from, this);
  attrs_.MergeFrom(from.attrs_);
  vecdata_.MergeFrom(from.vecdata_);
  setendtime_.MergeFrom(from.setendtime_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_fromid()) {
      set_fromid(from.fromid());
    }
    if (from.has_hponadd()) {
      set_hponadd(from.hponadd());
    }
    if (from.has_addtime()) {
      set_addtime(from.addtime());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_commmondata()) {
      set_commmondata(from.commmondata());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_actflag()) {
      set_actflag(from.actflag());
    }
    if (from.has_layers()) {
      set_layers(from.layers());
    }
    if (from.has_totaldamage()) {
      set_totaldamage(from.totaldamage());
    }
    if (from.has_attackcount()) {
      set_attackcount(from.attackcount());
    }
    if (from.has_beatkcount()) {
      set_beatkcount(from.beatkcount());
    }
    if (from.has_fromname()) {
      set_fromname(from.fromname());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_sparetime()) {
      set_sparetime(from.sparetime());
    }
    if (from.has_timetick()) {
      set_timetick(from.timetick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BufferStateBlob::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BufferStateBlob::CopyFrom(const BufferStateBlob& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BufferStateBlob::IsInitialized() const {

  return true;
}

void BufferStateBlob::Swap(BufferStateBlob* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(endtime_, other->endtime_);
    std::swap(lv_, other->lv_);
    std::swap(fromid_, other->fromid_);
    std::swap(hponadd_, other->hponadd_);
    std::swap(addtime_, other->addtime_);
    std::swap(count_, other->count_);
    std::swap(commmondata_, other->commmondata_);
    std::swap(actflag_, other->actflag_);
    std::swap(layers_, other->layers_);
    std::swap(totaldamage_, other->totaldamage_);
    std::swap(attackcount_, other->attackcount_);
    std::swap(beatkcount_, other->beatkcount_);
    attrs_.Swap(&other->attrs_);
    vecdata_.Swap(&other->vecdata_);
    std::swap(fromname_, other->fromname_);
    std::swap(sparetime_, other->sparetime_);
    setendtime_.Swap(&other->setendtime_);
    std::swap(timetick_, other->timetick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BufferStateBlob::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BufferStateBlob_descriptor_;
  metadata.reflection = BufferStateBlob_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobBuffer::kVersionFieldNumber;
const int BlobBuffer::kListFieldNumber;
#endif  // !_MSC_VER

BlobBuffer::BlobBuffer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobBuffer)
}

void BlobBuffer::InitAsDefaultInstance() {
}

BlobBuffer::BlobBuffer(const BlobBuffer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobBuffer)
}

void BlobBuffer::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobBuffer::~BlobBuffer() {
  // @@protoc_insertion_point(destructor:Cmd.BlobBuffer)
  SharedDtor();
}

void BlobBuffer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobBuffer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobBuffer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobBuffer_descriptor_;
}

const BlobBuffer& BlobBuffer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobBuffer* BlobBuffer::default_instance_ = NULL;

BlobBuffer* BlobBuffer::New() const {
  return new BlobBuffer;
}

void BlobBuffer::Clear() {
  version_ = 0u;
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobBuffer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobBuffer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_list;
        break;
      }

      // repeated .Cmd.BufferStateBlob list = 2;
      case 2: {
        if (tag == 18) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobBuffer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobBuffer)
  return false;
#undef DO_
}

void BlobBuffer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobBuffer)
  // optional uint32 version = 1 [default = 0];
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // repeated .Cmd.BufferStateBlob list = 2;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobBuffer)
}

::google::protobuf::uint8* BlobBuffer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobBuffer)
  // optional uint32 version = 1 [default = 0];
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // repeated .Cmd.BufferStateBlob list = 2;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobBuffer)
  return target;
}

int BlobBuffer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 version = 1 [default = 0];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

  }
  // repeated .Cmd.BufferStateBlob list = 2;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobBuffer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobBuffer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobBuffer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobBuffer::MergeFrom(const BlobBuffer& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobBuffer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobBuffer::CopyFrom(const BlobBuffer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobBuffer::IsInitialized() const {

  return true;
}

void BlobBuffer::Swap(BlobBuffer* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobBuffer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobBuffer_descriptor_;
  metadata.reflection = BlobBuffer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobPortrait::kCurportraitFieldNumber;
const int BlobPortrait::kCurframeFieldNumber;
const int BlobPortrait::kUnlockportraitFieldNumber;
const int BlobPortrait::kUnlockframeFieldNumber;
#endif  // !_MSC_VER

BlobPortrait::BlobPortrait()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobPortrait)
}

void BlobPortrait::InitAsDefaultInstance() {
}

BlobPortrait::BlobPortrait(const BlobPortrait& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobPortrait)
}

void BlobPortrait::SharedCtor() {
  _cached_size_ = 0;
  curportrait_ = 0u;
  curframe_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobPortrait::~BlobPortrait() {
  // @@protoc_insertion_point(destructor:Cmd.BlobPortrait)
  SharedDtor();
}

void BlobPortrait::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobPortrait::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobPortrait::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobPortrait_descriptor_;
}

const BlobPortrait& BlobPortrait::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobPortrait* BlobPortrait::default_instance_ = NULL;

BlobPortrait* BlobPortrait::New() const {
  return new BlobPortrait;
}

void BlobPortrait::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BlobPortrait*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(curportrait_, curframe_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  unlockportrait_.Clear();
  unlockframe_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobPortrait::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobPortrait)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 curportrait = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curportrait_)));
          set_has_curportrait();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_curframe;
        break;
      }

      // optional uint32 curframe = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_curframe:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curframe_)));
          set_has_curframe();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_unlockportrait;
        break;
      }

      // repeated uint32 unlockportrait = 3;
      case 3: {
        if (tag == 24) {
         parse_unlockportrait:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_unlockportrait())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_unlockportrait())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_unlockportrait;
        if (input->ExpectTag(32)) goto parse_unlockframe;
        break;
      }

      // repeated uint32 unlockframe = 4;
      case 4: {
        if (tag == 32) {
         parse_unlockframe:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_unlockframe())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_unlockframe())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_unlockframe;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobPortrait)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobPortrait)
  return false;
#undef DO_
}

void BlobPortrait::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobPortrait)
  // optional uint32 curportrait = 1 [default = 0];
  if (has_curportrait()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->curportrait(), output);
  }

  // optional uint32 curframe = 2 [default = 0];
  if (has_curframe()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->curframe(), output);
  }

  // repeated uint32 unlockportrait = 3;
  for (int i = 0; i < this->unlockportrait_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->unlockportrait(i), output);
  }

  // repeated uint32 unlockframe = 4;
  for (int i = 0; i < this->unlockframe_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->unlockframe(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobPortrait)
}

::google::protobuf::uint8* BlobPortrait::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobPortrait)
  // optional uint32 curportrait = 1 [default = 0];
  if (has_curportrait()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->curportrait(), target);
  }

  // optional uint32 curframe = 2 [default = 0];
  if (has_curframe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->curframe(), target);
  }

  // repeated uint32 unlockportrait = 3;
  for (int i = 0; i < this->unlockportrait_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->unlockportrait(i), target);
  }

  // repeated uint32 unlockframe = 4;
  for (int i = 0; i < this->unlockframe_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->unlockframe(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobPortrait)
  return target;
}

int BlobPortrait::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 curportrait = 1 [default = 0];
    if (has_curportrait()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curportrait());
    }

    // optional uint32 curframe = 2 [default = 0];
    if (has_curframe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curframe());
    }

  }
  // repeated uint32 unlockportrait = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->unlockportrait_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->unlockportrait(i));
    }
    total_size += 1 * this->unlockportrait_size() + data_size;
  }

  // repeated uint32 unlockframe = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->unlockframe_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->unlockframe(i));
    }
    total_size += 1 * this->unlockframe_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobPortrait::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobPortrait* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobPortrait*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobPortrait::MergeFrom(const BlobPortrait& from) {
  GOOGLE_CHECK_NE(&from, this);
  unlockportrait_.MergeFrom(from.unlockportrait_);
  unlockframe_.MergeFrom(from.unlockframe_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_curportrait()) {
      set_curportrait(from.curportrait());
    }
    if (from.has_curframe()) {
      set_curframe(from.curframe());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobPortrait::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobPortrait::CopyFrom(const BlobPortrait& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobPortrait::IsInitialized() const {

  return true;
}

void BlobPortrait::Swap(BlobPortrait* other) {
  if (other != this) {
    std::swap(curportrait_, other->curportrait_);
    std::swap(curframe_, other->curframe_);
    unlockportrait_.Swap(&other->unlockportrait_);
    unlockframe_.Swap(&other->unlockframe_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobPortrait::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobPortrait_descriptor_;
  metadata.reflection = BlobPortrait_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobHair::kCurhairFieldNumber;
const int BlobHair::kCurcolorFieldNumber;
const int BlobHair::kUnlockhairFieldNumber;
#endif  // !_MSC_VER

BlobHair::BlobHair()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobHair)
}

void BlobHair::InitAsDefaultInstance() {
}

BlobHair::BlobHair(const BlobHair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobHair)
}

void BlobHair::SharedCtor() {
  _cached_size_ = 0;
  curhair_ = 0u;
  curcolor_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobHair::~BlobHair() {
  // @@protoc_insertion_point(destructor:Cmd.BlobHair)
  SharedDtor();
}

void BlobHair::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobHair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobHair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobHair_descriptor_;
}

const BlobHair& BlobHair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobHair* BlobHair::default_instance_ = NULL;

BlobHair* BlobHair::New() const {
  return new BlobHair;
}

void BlobHair::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BlobHair*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(curhair_, curcolor_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  unlockhair_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobHair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobHair)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 curhair = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curhair_)));
          set_has_curhair();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_curcolor;
        break;
      }

      // optional uint32 curcolor = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_curcolor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curcolor_)));
          set_has_curcolor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_unlockhair;
        break;
      }

      // repeated uint32 unlockhair = 3;
      case 3: {
        if (tag == 24) {
         parse_unlockhair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_unlockhair())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_unlockhair())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_unlockhair;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobHair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobHair)
  return false;
#undef DO_
}

void BlobHair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobHair)
  // optional uint32 curhair = 1 [default = 0];
  if (has_curhair()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->curhair(), output);
  }

  // optional uint32 curcolor = 2 [default = 0];
  if (has_curcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->curcolor(), output);
  }

  // repeated uint32 unlockhair = 3;
  for (int i = 0; i < this->unlockhair_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->unlockhair(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobHair)
}

::google::protobuf::uint8* BlobHair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobHair)
  // optional uint32 curhair = 1 [default = 0];
  if (has_curhair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->curhair(), target);
  }

  // optional uint32 curcolor = 2 [default = 0];
  if (has_curcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->curcolor(), target);
  }

  // repeated uint32 unlockhair = 3;
  for (int i = 0; i < this->unlockhair_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->unlockhair(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobHair)
  return target;
}

int BlobHair::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 curhair = 1 [default = 0];
    if (has_curhair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curhair());
    }

    // optional uint32 curcolor = 2 [default = 0];
    if (has_curcolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curcolor());
    }

  }
  // repeated uint32 unlockhair = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->unlockhair_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->unlockhair(i));
    }
    total_size += 1 * this->unlockhair_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobHair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobHair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobHair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobHair::MergeFrom(const BlobHair& from) {
  GOOGLE_CHECK_NE(&from, this);
  unlockhair_.MergeFrom(from.unlockhair_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_curhair()) {
      set_curhair(from.curhair());
    }
    if (from.has_curcolor()) {
      set_curcolor(from.curcolor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobHair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobHair::CopyFrom(const BlobHair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobHair::IsInitialized() const {

  return true;
}

void BlobHair::Swap(BlobHair* other) {
  if (other != this) {
    std::swap(curhair_, other->curhair_);
    std::swap(curcolor_, other->curcolor_);
    unlockhair_.Swap(&other->unlockhair_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobHair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobHair_descriptor_;
  metadata.reflection = BlobHair_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobGearItem::kGearidFieldNumber;
const int BlobGearItem::kStateFieldNumber;
const int BlobGearItem::kSceneidFieldNumber;
#endif  // !_MSC_VER

BlobGearItem::BlobGearItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobGearItem)
}

void BlobGearItem::InitAsDefaultInstance() {
}

BlobGearItem::BlobGearItem(const BlobGearItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobGearItem)
}

void BlobGearItem::SharedCtor() {
  _cached_size_ = 0;
  gearid_ = 0u;
  state_ = 0u;
  sceneid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobGearItem::~BlobGearItem() {
  // @@protoc_insertion_point(destructor:Cmd.BlobGearItem)
  SharedDtor();
}

void BlobGearItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobGearItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobGearItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobGearItem_descriptor_;
}

const BlobGearItem& BlobGearItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobGearItem* BlobGearItem::default_instance_ = NULL;

BlobGearItem* BlobGearItem::New() const {
  return new BlobGearItem;
}

void BlobGearItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BlobGearItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(gearid_, sceneid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobGearItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobGearItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 gearid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gearid_)));
          set_has_gearid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional uint32 state = 2;
      case 2: {
        if (tag == 16) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sceneid;
        break;
      }

      // optional uint32 sceneid = 3;
      case 3: {
        if (tag == 24) {
         parse_sceneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobGearItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobGearItem)
  return false;
#undef DO_
}

void BlobGearItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobGearItem)
  // optional uint32 gearid = 1;
  if (has_gearid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gearid(), output);
  }

  // optional uint32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->state(), output);
  }

  // optional uint32 sceneid = 3;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sceneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobGearItem)
}

::google::protobuf::uint8* BlobGearItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobGearItem)
  // optional uint32 gearid = 1;
  if (has_gearid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gearid(), target);
  }

  // optional uint32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->state(), target);
  }

  // optional uint32 sceneid = 3;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sceneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobGearItem)
  return target;
}

int BlobGearItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 gearid = 1;
    if (has_gearid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gearid());
    }

    // optional uint32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

    // optional uint32 sceneid = 3;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sceneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobGearItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobGearItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobGearItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobGearItem::MergeFrom(const BlobGearItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gearid()) {
      set_gearid(from.gearid());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobGearItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobGearItem::CopyFrom(const BlobGearItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobGearItem::IsInitialized() const {

  return true;
}

void BlobGearItem::Swap(BlobGearItem* other) {
  if (other != this) {
    std::swap(gearid_, other->gearid_);
    std::swap(state_, other->state_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobGearItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobGearItem_descriptor_;
  metadata.reflection = BlobGearItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobGears::kVersionFieldNumber;
const int BlobGears::kListFieldNumber;
const int BlobGears::kExitlistFieldNumber;
#endif  // !_MSC_VER

BlobGears::BlobGears()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobGears)
}

void BlobGears::InitAsDefaultInstance() {
}

BlobGears::BlobGears(const BlobGears& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobGears)
}

void BlobGears::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobGears::~BlobGears() {
  // @@protoc_insertion_point(destructor:Cmd.BlobGears)
  SharedDtor();
}

void BlobGears::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobGears::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobGears::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobGears_descriptor_;
}

const BlobGears& BlobGears::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobGears* BlobGears::default_instance_ = NULL;

BlobGears* BlobGears::New() const {
  return new BlobGears;
}

void BlobGears::Clear() {
  version_ = 0u;
  list_.Clear();
  exitlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobGears::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobGears)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_list;
        break;
      }

      // repeated .Cmd.BlobGearItem list = 2;
      case 2: {
        if (tag == 18) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_list;
        if (input->ExpectTag(26)) goto parse_exitlist;
        break;
      }

      // repeated .Cmd.BlobGearItem exitlist = 3;
      case 3: {
        if (tag == 26) {
         parse_exitlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_exitlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_exitlist;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobGears)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobGears)
  return false;
#undef DO_
}

void BlobGears::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobGears)
  // optional uint32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // repeated .Cmd.BlobGearItem list = 2;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->list(i), output);
  }

  // repeated .Cmd.BlobGearItem exitlist = 3;
  for (int i = 0; i < this->exitlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->exitlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobGears)
}

::google::protobuf::uint8* BlobGears::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobGears)
  // optional uint32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // repeated .Cmd.BlobGearItem list = 2;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->list(i), target);
  }

  // repeated .Cmd.BlobGearItem exitlist = 3;
  for (int i = 0; i < this->exitlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->exitlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobGears)
  return target;
}

int BlobGears::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

  }
  // repeated .Cmd.BlobGearItem list = 2;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  // repeated .Cmd.BlobGearItem exitlist = 3;
  total_size += 1 * this->exitlist_size();
  for (int i = 0; i < this->exitlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->exitlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobGears::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobGears* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobGears*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobGears::MergeFrom(const BlobGears& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  exitlist_.MergeFrom(from.exitlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobGears::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobGears::CopyFrom(const BlobGears& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobGears::IsInitialized() const {

  return true;
}

void BlobGears::Swap(BlobGears* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    list_.Swap(&other->list_);
    exitlist_.Swap(&other->exitlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobGears::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobGears_descriptor_;
  metadata.reflection = BlobGears_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobTipItem::kRedFieldNumber;
const int BlobTipItem::kTipidFieldNumber;
#endif  // !_MSC_VER

BlobTipItem::BlobTipItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobTipItem)
}

void BlobTipItem::InitAsDefaultInstance() {
}

BlobTipItem::BlobTipItem(const BlobTipItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobTipItem)
}

void BlobTipItem::SharedCtor() {
  _cached_size_ = 0;
  red_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobTipItem::~BlobTipItem() {
  // @@protoc_insertion_point(destructor:Cmd.BlobTipItem)
  SharedDtor();
}

void BlobTipItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobTipItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobTipItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobTipItem_descriptor_;
}

const BlobTipItem& BlobTipItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobTipItem* BlobTipItem::default_instance_ = NULL;

BlobTipItem* BlobTipItem::New() const {
  return new BlobTipItem;
}

void BlobTipItem::Clear() {
  red_ = 0;
  tipid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobTipItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobTipItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.ERedSys red = 1 [default = EREDSYS_MIN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ERedSys_IsValid(value)) {
            set_red(static_cast< ::Cmd::ERedSys >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_tipid;
        break;
      }

      // repeated uint32 tipid = 2;
      case 2: {
        if (tag == 16) {
         parse_tipid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_tipid())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_tipid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_tipid;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobTipItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobTipItem)
  return false;
#undef DO_
}

void BlobTipItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobTipItem)
  // optional .Cmd.ERedSys red = 1 [default = EREDSYS_MIN];
  if (has_red()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->red(), output);
  }

  // repeated uint32 tipid = 2;
  for (int i = 0; i < this->tipid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->tipid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobTipItem)
}

::google::protobuf::uint8* BlobTipItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobTipItem)
  // optional .Cmd.ERedSys red = 1 [default = EREDSYS_MIN];
  if (has_red()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->red(), target);
  }

  // repeated uint32 tipid = 2;
  for (int i = 0; i < this->tipid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->tipid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobTipItem)
  return target;
}

int BlobTipItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.ERedSys red = 1 [default = EREDSYS_MIN];
    if (has_red()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->red());
    }

  }
  // repeated uint32 tipid = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->tipid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->tipid(i));
    }
    total_size += 1 * this->tipid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobTipItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobTipItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobTipItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobTipItem::MergeFrom(const BlobTipItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  tipid_.MergeFrom(from.tipid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_red()) {
      set_red(from.red());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobTipItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobTipItem::CopyFrom(const BlobTipItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobTipItem::IsInitialized() const {

  return true;
}

void BlobTipItem::Swap(BlobTipItem* other) {
  if (other != this) {
    std::swap(red_, other->red_);
    tipid_.Swap(&other->tipid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobTipItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobTipItem_descriptor_;
  metadata.reflection = BlobTipItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobTips::kVersionFieldNumber;
const int BlobTips::kListFieldNumber;
#endif  // !_MSC_VER

BlobTips::BlobTips()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobTips)
}

void BlobTips::InitAsDefaultInstance() {
}

BlobTips::BlobTips(const BlobTips& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobTips)
}

void BlobTips::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobTips::~BlobTips() {
  // @@protoc_insertion_point(destructor:Cmd.BlobTips)
  SharedDtor();
}

void BlobTips::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobTips::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobTips::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobTips_descriptor_;
}

const BlobTips& BlobTips::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobTips* BlobTips::default_instance_ = NULL;

BlobTips* BlobTips::New() const {
  return new BlobTips;
}

void BlobTips::Clear() {
  version_ = 0u;
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobTips::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobTips)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_list;
        break;
      }

      // repeated .Cmd.BlobTipItem list = 2;
      case 2: {
        if (tag == 18) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobTips)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobTips)
  return false;
#undef DO_
}

void BlobTips::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobTips)
  // optional uint32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // repeated .Cmd.BlobTipItem list = 2;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobTips)
}

::google::protobuf::uint8* BlobTips::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobTips)
  // optional uint32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // repeated .Cmd.BlobTipItem list = 2;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobTips)
  return target;
}

int BlobTips::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

  }
  // repeated .Cmd.BlobTipItem list = 2;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobTips::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobTips* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobTips*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobTips::MergeFrom(const BlobTips& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobTips::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobTips::CopyFrom(const BlobTips& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobTips::IsInitialized() const {

  return true;
}

void BlobTips::Swap(BlobTips* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobTips::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobTips_descriptor_;
  metadata.reflection = BlobTips_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FollowerItem::kIdFieldNumber;
const int FollowerItem::kSpdRatioFieldNumber;
const int FollowerItem::kBehavioursFieldNumber;
const int FollowerItem::kQuestidFieldNumber;
const int FollowerItem::kCleartimeFieldNumber;
#endif  // !_MSC_VER

FollowerItem::FollowerItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.FollowerItem)
}

void FollowerItem::InitAsDefaultInstance() {
}

FollowerItem::FollowerItem(const FollowerItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.FollowerItem)
}

void FollowerItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  spdratio_ = 0;
  behaviours_ = 0u;
  questid_ = 0u;
  cleartime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FollowerItem::~FollowerItem() {
  // @@protoc_insertion_point(destructor:Cmd.FollowerItem)
  SharedDtor();
}

void FollowerItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FollowerItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FollowerItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FollowerItem_descriptor_;
}

const FollowerItem& FollowerItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

FollowerItem* FollowerItem::default_instance_ = NULL;

FollowerItem* FollowerItem::New() const {
  return new FollowerItem;
}

void FollowerItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FollowerItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(id_, cleartime_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FollowerItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.FollowerItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_spdRatio;
        break;
      }

      // optional float spdRatio = 2 [default = 0];
      case 2: {
        if (tag == 21) {
         parse_spdRatio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &spdratio_)));
          set_has_spdratio();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_behaviours;
        break;
      }

      // optional uint32 behaviours = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_behaviours:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &behaviours_)));
          set_has_behaviours();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_questid;
        break;
      }

      // optional uint32 questid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_questid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &questid_)));
          set_has_questid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_cleartime;
        break;
      }

      // optional uint32 cleartime = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_cleartime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cleartime_)));
          set_has_cleartime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.FollowerItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.FollowerItem)
  return false;
#undef DO_
}

void FollowerItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.FollowerItem)
  // optional uint32 id = 1 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional float spdRatio = 2 [default = 0];
  if (has_spdratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->spdratio(), output);
  }

  // optional uint32 behaviours = 3 [default = 0];
  if (has_behaviours()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->behaviours(), output);
  }

  // optional uint32 questid = 4 [default = 0];
  if (has_questid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->questid(), output);
  }

  // optional uint32 cleartime = 5 [default = 0];
  if (has_cleartime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->cleartime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.FollowerItem)
}

::google::protobuf::uint8* FollowerItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.FollowerItem)
  // optional uint32 id = 1 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional float spdRatio = 2 [default = 0];
  if (has_spdratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->spdratio(), target);
  }

  // optional uint32 behaviours = 3 [default = 0];
  if (has_behaviours()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->behaviours(), target);
  }

  // optional uint32 questid = 4 [default = 0];
  if (has_questid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->questid(), target);
  }

  // optional uint32 cleartime = 5 [default = 0];
  if (has_cleartime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->cleartime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.FollowerItem)
  return target;
}

int FollowerItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional float spdRatio = 2 [default = 0];
    if (has_spdratio()) {
      total_size += 1 + 4;
    }

    // optional uint32 behaviours = 3 [default = 0];
    if (has_behaviours()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->behaviours());
    }

    // optional uint32 questid = 4 [default = 0];
    if (has_questid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->questid());
    }

    // optional uint32 cleartime = 5 [default = 0];
    if (has_cleartime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cleartime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FollowerItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FollowerItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FollowerItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FollowerItem::MergeFrom(const FollowerItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_spdratio()) {
      set_spdratio(from.spdratio());
    }
    if (from.has_behaviours()) {
      set_behaviours(from.behaviours());
    }
    if (from.has_questid()) {
      set_questid(from.questid());
    }
    if (from.has_cleartime()) {
      set_cleartime(from.cleartime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FollowerItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FollowerItem::CopyFrom(const FollowerItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FollowerItem::IsInitialized() const {

  return true;
}

void FollowerItem::Swap(FollowerItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(spdratio_, other->spdratio_);
    std::swap(behaviours_, other->behaviours_);
    std::swap(questid_, other->questid_);
    std::swap(cleartime_, other->cleartime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FollowerItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FollowerItem_descriptor_;
  metadata.reflection = FollowerItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobFollower::kVersionFieldNumber;
const int BlobFollower::kListFieldNumber;
#endif  // !_MSC_VER

BlobFollower::BlobFollower()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobFollower)
}

void BlobFollower::InitAsDefaultInstance() {
}

BlobFollower::BlobFollower(const BlobFollower& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobFollower)
}

void BlobFollower::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobFollower::~BlobFollower() {
  // @@protoc_insertion_point(destructor:Cmd.BlobFollower)
  SharedDtor();
}

void BlobFollower::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobFollower::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobFollower::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobFollower_descriptor_;
}

const BlobFollower& BlobFollower::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobFollower* BlobFollower::default_instance_ = NULL;

BlobFollower* BlobFollower::New() const {
  return new BlobFollower;
}

void BlobFollower::Clear() {
  version_ = 0u;
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobFollower::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobFollower)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_list;
        break;
      }

      // repeated .Cmd.FollowerItem list = 2;
      case 2: {
        if (tag == 18) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobFollower)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobFollower)
  return false;
#undef DO_
}

void BlobFollower::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobFollower)
  // optional uint32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // repeated .Cmd.FollowerItem list = 2;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobFollower)
}

::google::protobuf::uint8* BlobFollower::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobFollower)
  // optional uint32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // repeated .Cmd.FollowerItem list = 2;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobFollower)
  return target;
}

int BlobFollower::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

  }
  // repeated .Cmd.FollowerItem list = 2;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobFollower::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobFollower* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobFollower*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobFollower::MergeFrom(const BlobFollower& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobFollower::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobFollower::CopyFrom(const BlobFollower& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobFollower::IsInitialized() const {

  return true;
}

void BlobFollower::Swap(BlobFollower* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobFollower::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobFollower_descriptor_;
  metadata.reflection = BlobFollower_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobCDTime::kVersionFieldNumber;
const int BlobCDTime::kListFieldNumber;
#endif  // !_MSC_VER

BlobCDTime::BlobCDTime()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobCDTime)
}

void BlobCDTime::InitAsDefaultInstance() {
}

BlobCDTime::BlobCDTime(const BlobCDTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobCDTime)
}

void BlobCDTime::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobCDTime::~BlobCDTime() {
  // @@protoc_insertion_point(destructor:Cmd.BlobCDTime)
  SharedDtor();
}

void BlobCDTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobCDTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobCDTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobCDTime_descriptor_;
}

const BlobCDTime& BlobCDTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobCDTime* BlobCDTime::default_instance_ = NULL;

BlobCDTime* BlobCDTime::New() const {
  return new BlobCDTime;
}

void BlobCDTime::Clear() {
  version_ = 0u;
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobCDTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobCDTime)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_list;
        break;
      }

      // repeated .Cmd.CDTimeItem list = 2;
      case 2: {
        if (tag == 18) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobCDTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobCDTime)
  return false;
#undef DO_
}

void BlobCDTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobCDTime)
  // optional uint32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // repeated .Cmd.CDTimeItem list = 2;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobCDTime)
}

::google::protobuf::uint8* BlobCDTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobCDTime)
  // optional uint32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // repeated .Cmd.CDTimeItem list = 2;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobCDTime)
  return target;
}

int BlobCDTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

  }
  // repeated .Cmd.CDTimeItem list = 2;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobCDTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobCDTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobCDTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobCDTime::MergeFrom(const BlobCDTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobCDTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobCDTime::CopyFrom(const BlobCDTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobCDTime::IsInitialized() const {

  return true;
}

void BlobCDTime::Swap(BlobCDTime* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobCDTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobCDTime_descriptor_;
  metadata.reflection = BlobCDTime_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobShortcut::kCutFieldNumber;
const int BlobShortcut::kFirstautoFieldNumber;
const int BlobShortcut::kVersionFieldNumber;
#endif  // !_MSC_VER

BlobShortcut::BlobShortcut()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobShortcut)
}

void BlobShortcut::InitAsDefaultInstance() {
}

BlobShortcut::BlobShortcut(const BlobShortcut& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobShortcut)
}

void BlobShortcut::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobShortcut::~BlobShortcut() {
  // @@protoc_insertion_point(destructor:Cmd.BlobShortcut)
  SharedDtor();
}

void BlobShortcut::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobShortcut::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobShortcut::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobShortcut_descriptor_;
}

const BlobShortcut& BlobShortcut::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobShortcut* BlobShortcut::default_instance_ = NULL;

BlobShortcut* BlobShortcut::New() const {
  return new BlobShortcut;
}

void BlobShortcut::Clear() {
  version_ = 0u;
  cut_.Clear();
  firstauto_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobShortcut::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobShortcut)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Cmd.ShortcutItem cut = 1;
      case 1: {
        if (tag == 10) {
         parse_cut:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cut()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_cut;
        if (input->ExpectTag(16)) goto parse_firstauto;
        break;
      }

      // repeated uint32 firstauto = 2;
      case 2: {
        if (tag == 16) {
         parse_firstauto:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_firstauto())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_firstauto())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_firstauto;
        if (input->ExpectTag(24)) goto parse_version;
        break;
      }

      // optional uint32 version = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobShortcut)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobShortcut)
  return false;
#undef DO_
}

void BlobShortcut::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobShortcut)
  // repeated .Cmd.ShortcutItem cut = 1;
  for (int i = 0; i < this->cut_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cut(i), output);
  }

  // repeated uint32 firstauto = 2;
  for (int i = 0; i < this->firstauto_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->firstauto(i), output);
  }

  // optional uint32 version = 3 [default = 0];
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobShortcut)
}

::google::protobuf::uint8* BlobShortcut::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobShortcut)
  // repeated .Cmd.ShortcutItem cut = 1;
  for (int i = 0; i < this->cut_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cut(i), target);
  }

  // repeated uint32 firstauto = 2;
  for (int i = 0; i < this->firstauto_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->firstauto(i), target);
  }

  // optional uint32 version = 3 [default = 0];
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobShortcut)
  return target;
}

int BlobShortcut::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional uint32 version = 3 [default = 0];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

  }
  // repeated .Cmd.ShortcutItem cut = 1;
  total_size += 1 * this->cut_size();
  for (int i = 0; i < this->cut_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cut(i));
  }

  // repeated uint32 firstauto = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->firstauto_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->firstauto(i));
    }
    total_size += 1 * this->firstauto_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobShortcut::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobShortcut* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobShortcut*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobShortcut::MergeFrom(const BlobShortcut& from) {
  GOOGLE_CHECK_NE(&from, this);
  cut_.MergeFrom(from.cut_);
  firstauto_.MergeFrom(from.firstauto_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobShortcut::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobShortcut::CopyFrom(const BlobShortcut& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobShortcut::IsInitialized() const {

  return true;
}

void BlobShortcut::Swap(BlobShortcut* other) {
  if (other != this) {
    cut_.Swap(&other->cut_);
    firstauto_.Swap(&other->firstauto_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobShortcut::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobShortcut_descriptor_;
  metadata.reflection = BlobShortcut_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobGMEffectItem::kMapidFieldNumber;
const int BlobGMEffectItem::kIndexFieldNumber;
const int BlobGMEffectItem::kGmcommandFieldNumber;
#endif  // !_MSC_VER

BlobGMEffectItem::BlobGMEffectItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobGMEffectItem)
}

void BlobGMEffectItem::InitAsDefaultInstance() {
}

BlobGMEffectItem::BlobGMEffectItem(const BlobGMEffectItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobGMEffectItem)
}

void BlobGMEffectItem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mapid_ = 0u;
  index_ = 0u;
  gmcommand_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobGMEffectItem::~BlobGMEffectItem() {
  // @@protoc_insertion_point(destructor:Cmd.BlobGMEffectItem)
  SharedDtor();
}

void BlobGMEffectItem::SharedDtor() {
  if (gmcommand_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gmcommand_;
  }
  if (this != default_instance_) {
  }
}

void BlobGMEffectItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobGMEffectItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobGMEffectItem_descriptor_;
}

const BlobGMEffectItem& BlobGMEffectItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobGMEffectItem* BlobGMEffectItem::default_instance_ = NULL;

BlobGMEffectItem* BlobGMEffectItem::New() const {
  return new BlobGMEffectItem;
}

void BlobGMEffectItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BlobGMEffectItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(mapid_, index_);
    if (has_gmcommand()) {
      if (gmcommand_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gmcommand_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobGMEffectItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobGMEffectItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mapid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // optional uint32 index = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_gmcommand;
        break;
      }

      // optional string gmcommand = 3;
      case 3: {
        if (tag == 26) {
         parse_gmcommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gmcommand()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gmcommand().data(), this->gmcommand().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gmcommand");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobGMEffectItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobGMEffectItem)
  return false;
#undef DO_
}

void BlobGMEffectItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobGMEffectItem)
  // optional uint32 mapid = 1 [default = 0];
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mapid(), output);
  }

  // optional uint32 index = 2 [default = 0];
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->index(), output);
  }

  // optional string gmcommand = 3;
  if (has_gmcommand()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gmcommand().data(), this->gmcommand().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gmcommand");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->gmcommand(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobGMEffectItem)
}

::google::protobuf::uint8* BlobGMEffectItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobGMEffectItem)
  // optional uint32 mapid = 1 [default = 0];
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mapid(), target);
  }

  // optional uint32 index = 2 [default = 0];
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->index(), target);
  }

  // optional string gmcommand = 3;
  if (has_gmcommand()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gmcommand().data(), this->gmcommand().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gmcommand");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->gmcommand(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobGMEffectItem)
  return target;
}

int BlobGMEffectItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 mapid = 1 [default = 0];
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

    // optional uint32 index = 2 [default = 0];
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // optional string gmcommand = 3;
    if (has_gmcommand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gmcommand());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobGMEffectItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobGMEffectItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobGMEffectItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobGMEffectItem::MergeFrom(const BlobGMEffectItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_gmcommand()) {
      set_gmcommand(from.gmcommand());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobGMEffectItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobGMEffectItem::CopyFrom(const BlobGMEffectItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobGMEffectItem::IsInitialized() const {

  return true;
}

void BlobGMEffectItem::Swap(BlobGMEffectItem* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(index_, other->index_);
    std::swap(gmcommand_, other->gmcommand_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobGMEffectItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobGMEffectItem_descriptor_;
  metadata.reflection = BlobGMEffectItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobGMEffects::kVersionFieldNumber;
const int BlobGMEffects::kListFieldNumber;
#endif  // !_MSC_VER

BlobGMEffects::BlobGMEffects()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobGMEffects)
}

void BlobGMEffects::InitAsDefaultInstance() {
}

BlobGMEffects::BlobGMEffects(const BlobGMEffects& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobGMEffects)
}

void BlobGMEffects::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobGMEffects::~BlobGMEffects() {
  // @@protoc_insertion_point(destructor:Cmd.BlobGMEffects)
  SharedDtor();
}

void BlobGMEffects::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobGMEffects::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobGMEffects::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobGMEffects_descriptor_;
}

const BlobGMEffects& BlobGMEffects::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobGMEffects* BlobGMEffects::default_instance_ = NULL;

BlobGMEffects* BlobGMEffects::New() const {
  return new BlobGMEffects;
}

void BlobGMEffects::Clear() {
  version_ = 0u;
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobGMEffects::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobGMEffects)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_list;
        break;
      }

      // repeated .Cmd.BlobGMEffectItem list = 2;
      case 2: {
        if (tag == 18) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobGMEffects)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobGMEffects)
  return false;
#undef DO_
}

void BlobGMEffects::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobGMEffects)
  // optional uint32 version = 1 [default = 0];
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // repeated .Cmd.BlobGMEffectItem list = 2;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobGMEffects)
}

::google::protobuf::uint8* BlobGMEffects::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobGMEffects)
  // optional uint32 version = 1 [default = 0];
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // repeated .Cmd.BlobGMEffectItem list = 2;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobGMEffects)
  return target;
}

int BlobGMEffects::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 version = 1 [default = 0];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

  }
  // repeated .Cmd.BlobGMEffectItem list = 2;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobGMEffects::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobGMEffects* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobGMEffects*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobGMEffects::MergeFrom(const BlobGMEffects& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobGMEffects::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobGMEffects::CopyFrom(const BlobGMEffects& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobGMEffects::IsInitialized() const {

  return true;
}

void BlobGMEffects::Swap(BlobGMEffects* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobGMEffects::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobGMEffects_descriptor_;
  metadata.reflection = BlobGMEffects_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobFreyja::kVersionFieldNumber;
const int BlobFreyja::kMapidFieldNumber;
#endif  // !_MSC_VER

BlobFreyja::BlobFreyja()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobFreyja)
}

void BlobFreyja::InitAsDefaultInstance() {
}

BlobFreyja::BlobFreyja(const BlobFreyja& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobFreyja)
}

void BlobFreyja::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobFreyja::~BlobFreyja() {
  // @@protoc_insertion_point(destructor:Cmd.BlobFreyja)
  SharedDtor();
}

void BlobFreyja::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobFreyja::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobFreyja::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobFreyja_descriptor_;
}

const BlobFreyja& BlobFreyja::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobFreyja* BlobFreyja::default_instance_ = NULL;

BlobFreyja* BlobFreyja::New() const {
  return new BlobFreyja;
}

void BlobFreyja::Clear() {
  version_ = 0u;
  mapid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobFreyja::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobFreyja)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mapid;
        break;
      }

      // repeated uint32 mapid = 2;
      case 2: {
        if (tag == 16) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_mapid())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_mapid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mapid;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobFreyja)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobFreyja)
  return false;
#undef DO_
}

void BlobFreyja::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobFreyja)
  // optional uint32 version = 1 [default = 0];
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // repeated uint32 mapid = 2;
  for (int i = 0; i < this->mapid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->mapid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobFreyja)
}

::google::protobuf::uint8* BlobFreyja::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobFreyja)
  // optional uint32 version = 1 [default = 0];
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // repeated uint32 mapid = 2;
  for (int i = 0; i < this->mapid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->mapid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobFreyja)
  return target;
}

int BlobFreyja::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 version = 1 [default = 0];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

  }
  // repeated uint32 mapid = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->mapid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->mapid(i));
    }
    total_size += 1 * this->mapid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobFreyja::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobFreyja* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobFreyja*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobFreyja::MergeFrom(const BlobFreyja& from) {
  GOOGLE_CHECK_NE(&from, this);
  mapid_.MergeFrom(from.mapid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobFreyja::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobFreyja::CopyFrom(const BlobFreyja& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobFreyja::IsInitialized() const {

  return true;
}

void BlobFreyja::Swap(BlobFreyja* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    mapid_.Swap(&other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobFreyja::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobFreyja_descriptor_;
  metadata.reflection = BlobFreyja_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobTransfer::kNpcidFieldNumber;
const int BlobTransfer::kMap1AllActivatedFieldNumber;
const int BlobTransfer::kMap2AllActivatedFieldNumber;
#endif  // !_MSC_VER

BlobTransfer::BlobTransfer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobTransfer)
}

void BlobTransfer::InitAsDefaultInstance() {
}

BlobTransfer::BlobTransfer(const BlobTransfer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobTransfer)
}

void BlobTransfer::SharedCtor() {
  _cached_size_ = 0;
  map1allactivated_ = false;
  map2allactivated_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobTransfer::~BlobTransfer() {
  // @@protoc_insertion_point(destructor:Cmd.BlobTransfer)
  SharedDtor();
}

void BlobTransfer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobTransfer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobTransfer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobTransfer_descriptor_;
}

const BlobTransfer& BlobTransfer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobTransfer* BlobTransfer::default_instance_ = NULL;

BlobTransfer* BlobTransfer::New() const {
  return new BlobTransfer;
}

void BlobTransfer::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BlobTransfer*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(map1allactivated_, map2allactivated_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  npcid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobTransfer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobTransfer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 npcid = 1;
      case 1: {
        if (tag == 8) {
         parse_npcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_npcid())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_npcid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_npcid;
        if (input->ExpectTag(16)) goto parse_map1AllActivated;
        break;
      }

      // optional bool map1AllActivated = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_map1AllActivated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &map1allactivated_)));
          set_has_map1allactivated();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_map2AllActivated;
        break;
      }

      // optional bool map2AllActivated = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_map2AllActivated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &map2allactivated_)));
          set_has_map2allactivated();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobTransfer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobTransfer)
  return false;
#undef DO_
}

void BlobTransfer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobTransfer)
  // repeated uint32 npcid = 1;
  for (int i = 0; i < this->npcid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->npcid(i), output);
  }

  // optional bool map1AllActivated = 2 [default = false];
  if (has_map1allactivated()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->map1allactivated(), output);
  }

  // optional bool map2AllActivated = 3 [default = false];
  if (has_map2allactivated()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->map2allactivated(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobTransfer)
}

::google::protobuf::uint8* BlobTransfer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobTransfer)
  // repeated uint32 npcid = 1;
  for (int i = 0; i < this->npcid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->npcid(i), target);
  }

  // optional bool map1AllActivated = 2 [default = false];
  if (has_map1allactivated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->map1allactivated(), target);
  }

  // optional bool map2AllActivated = 3 [default = false];
  if (has_map2allactivated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->map2allactivated(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobTransfer)
  return target;
}

int BlobTransfer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bool map1AllActivated = 2 [default = false];
    if (has_map1allactivated()) {
      total_size += 1 + 1;
    }

    // optional bool map2AllActivated = 3 [default = false];
    if (has_map2allactivated()) {
      total_size += 1 + 1;
    }

  }
  // repeated uint32 npcid = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->npcid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->npcid(i));
    }
    total_size += 1 * this->npcid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobTransfer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobTransfer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobTransfer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobTransfer::MergeFrom(const BlobTransfer& from) {
  GOOGLE_CHECK_NE(&from, this);
  npcid_.MergeFrom(from.npcid_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_map1allactivated()) {
      set_map1allactivated(from.map1allactivated());
    }
    if (from.has_map2allactivated()) {
      set_map2allactivated(from.map2allactivated());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobTransfer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobTransfer::CopyFrom(const BlobTransfer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobTransfer::IsInitialized() const {

  return true;
}

void BlobTransfer::Swap(BlobTransfer* other) {
  if (other != this) {
    npcid_.Swap(&other->npcid_);
    std::swap(map1allactivated_, other->map1allactivated_);
    std::swap(map2allactivated_, other->map2allactivated_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobTransfer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobTransfer_descriptor_;
  metadata.reflection = BlobTransfer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobLaboratory::kVersionFieldNumber;
const int BlobLaboratory::kPointFieldNumber;
const int BlobLaboratory::kDaysFieldNumber;
#endif  // !_MSC_VER

BlobLaboratory::BlobLaboratory()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobLaboratory)
}

void BlobLaboratory::InitAsDefaultInstance() {
}

BlobLaboratory::BlobLaboratory(const BlobLaboratory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobLaboratory)
}

void BlobLaboratory::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  point_ = 0u;
  days_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobLaboratory::~BlobLaboratory() {
  // @@protoc_insertion_point(destructor:Cmd.BlobLaboratory)
  SharedDtor();
}

void BlobLaboratory::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobLaboratory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobLaboratory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobLaboratory_descriptor_;
}

const BlobLaboratory& BlobLaboratory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobLaboratory* BlobLaboratory::default_instance_ = NULL;

BlobLaboratory* BlobLaboratory::New() const {
  return new BlobLaboratory;
}

void BlobLaboratory::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BlobLaboratory*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(version_, days_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobLaboratory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobLaboratory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_point;
        break;
      }

      // optional uint32 point = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &point_)));
          set_has_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_days;
        break;
      }

      // optional uint32 days = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_days:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &days_)));
          set_has_days();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobLaboratory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobLaboratory)
  return false;
#undef DO_
}

void BlobLaboratory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobLaboratory)
  // optional uint32 version = 1 [default = 0];
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // optional uint32 point = 2 [default = 0];
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->point(), output);
  }

  // optional uint32 days = 3 [default = 0];
  if (has_days()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->days(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobLaboratory)
}

::google::protobuf::uint8* BlobLaboratory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobLaboratory)
  // optional uint32 version = 1 [default = 0];
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // optional uint32 point = 2 [default = 0];
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->point(), target);
  }

  // optional uint32 days = 3 [default = 0];
  if (has_days()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->days(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobLaboratory)
  return target;
}

int BlobLaboratory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 version = 1 [default = 0];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional uint32 point = 2 [default = 0];
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->point());
    }

    // optional uint32 days = 3 [default = 0];
    if (has_days()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->days());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobLaboratory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobLaboratory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobLaboratory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobLaboratory::MergeFrom(const BlobLaboratory& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_point()) {
      set_point(from.point());
    }
    if (from.has_days()) {
      set_days(from.days());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobLaboratory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobLaboratory::CopyFrom(const BlobLaboratory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobLaboratory::IsInitialized() const {

  return true;
}

void BlobLaboratory::Swap(BlobLaboratory* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(point_, other->point_);
    std::swap(days_, other->days_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobLaboratory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobLaboratory_descriptor_;
  metadata.reflection = BlobLaboratory_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SceneryItem::kSceneryidFieldNumber;
const int SceneryItem::kVisitedFieldNumber;
const int SceneryItem::kUploadFieldNumber;
const int SceneryItem::kAnglezFieldNumber;
const int SceneryItem::kTimeFieldNumber;
#endif  // !_MSC_VER

SceneryItem::SceneryItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SceneryItem)
}

void SceneryItem::InitAsDefaultInstance() {
}

SceneryItem::SceneryItem(const SceneryItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SceneryItem)
}

void SceneryItem::SharedCtor() {
  _cached_size_ = 0;
  sceneryid_ = 0u;
  visited_ = 0u;
  upload_ = 0u;
  anglez_ = 0u;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SceneryItem::~SceneryItem() {
  // @@protoc_insertion_point(destructor:Cmd.SceneryItem)
  SharedDtor();
}

void SceneryItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SceneryItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneryItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SceneryItem_descriptor_;
}

const SceneryItem& SceneryItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

SceneryItem* SceneryItem::default_instance_ = NULL;

SceneryItem* SceneryItem::New() const {
  return new SceneryItem;
}

void SceneryItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SceneryItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(sceneryid_, time_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SceneryItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SceneryItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sceneryid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneryid_)));
          set_has_sceneryid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_visited;
        break;
      }

      // optional uint32 visited = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_visited:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &visited_)));
          set_has_visited();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_upload;
        break;
      }

      // optional uint32 upload = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_upload:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &upload_)));
          set_has_upload();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_anglez;
        break;
      }

      // optional uint32 anglez = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_anglez:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &anglez_)));
          set_has_anglez();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_time;
        break;
      }

      // optional uint32 time = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SceneryItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SceneryItem)
  return false;
#undef DO_
}

void SceneryItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SceneryItem)
  // optional uint32 sceneryid = 1 [default = 0];
  if (has_sceneryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sceneryid(), output);
  }

  // optional uint32 visited = 2 [default = 0];
  if (has_visited()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->visited(), output);
  }

  // optional uint32 upload = 3 [default = 0];
  if (has_upload()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->upload(), output);
  }

  // optional uint32 anglez = 4 [default = 0];
  if (has_anglez()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->anglez(), output);
  }

  // optional uint32 time = 5 [default = 0];
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SceneryItem)
}

::google::protobuf::uint8* SceneryItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SceneryItem)
  // optional uint32 sceneryid = 1 [default = 0];
  if (has_sceneryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sceneryid(), target);
  }

  // optional uint32 visited = 2 [default = 0];
  if (has_visited()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->visited(), target);
  }

  // optional uint32 upload = 3 [default = 0];
  if (has_upload()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->upload(), target);
  }

  // optional uint32 anglez = 4 [default = 0];
  if (has_anglez()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->anglez(), target);
  }

  // optional uint32 time = 5 [default = 0];
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SceneryItem)
  return target;
}

int SceneryItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 sceneryid = 1 [default = 0];
    if (has_sceneryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sceneryid());
    }

    // optional uint32 visited = 2 [default = 0];
    if (has_visited()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->visited());
    }

    // optional uint32 upload = 3 [default = 0];
    if (has_upload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->upload());
    }

    // optional uint32 anglez = 4 [default = 0];
    if (has_anglez()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->anglez());
    }

    // optional uint32 time = 5 [default = 0];
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneryItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SceneryItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SceneryItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SceneryItem::MergeFrom(const SceneryItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sceneryid()) {
      set_sceneryid(from.sceneryid());
    }
    if (from.has_visited()) {
      set_visited(from.visited());
    }
    if (from.has_upload()) {
      set_upload(from.upload());
    }
    if (from.has_anglez()) {
      set_anglez(from.anglez());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SceneryItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneryItem::CopyFrom(const SceneryItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneryItem::IsInitialized() const {

  return true;
}

void SceneryItem::Swap(SceneryItem* other) {
  if (other != this) {
    std::swap(sceneryid_, other->sceneryid_);
    std::swap(visited_, other->visited_);
    std::swap(upload_, other->upload_);
    std::swap(anglez_, other->anglez_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SceneryItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SceneryItem_descriptor_;
  metadata.reflection = SceneryItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SceneryMapItem::kMapidFieldNumber;
const int SceneryMapItem::kScenerysFieldNumber;
#endif  // !_MSC_VER

SceneryMapItem::SceneryMapItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SceneryMapItem)
}

void SceneryMapItem::InitAsDefaultInstance() {
}

SceneryMapItem::SceneryMapItem(const SceneryMapItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SceneryMapItem)
}

void SceneryMapItem::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SceneryMapItem::~SceneryMapItem() {
  // @@protoc_insertion_point(destructor:Cmd.SceneryMapItem)
  SharedDtor();
}

void SceneryMapItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SceneryMapItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneryMapItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SceneryMapItem_descriptor_;
}

const SceneryMapItem& SceneryMapItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

SceneryMapItem* SceneryMapItem::default_instance_ = NULL;

SceneryMapItem* SceneryMapItem::New() const {
  return new SceneryMapItem;
}

void SceneryMapItem::Clear() {
  mapid_ = 0u;
  scenerys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SceneryMapItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SceneryMapItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mapid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_scenerys;
        break;
      }

      // repeated .Cmd.SceneryItem scenerys = 2;
      case 2: {
        if (tag == 18) {
         parse_scenerys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_scenerys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_scenerys;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SceneryMapItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SceneryMapItem)
  return false;
#undef DO_
}

void SceneryMapItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SceneryMapItem)
  // optional uint32 mapid = 1 [default = 0];
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mapid(), output);
  }

  // repeated .Cmd.SceneryItem scenerys = 2;
  for (int i = 0; i < this->scenerys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->scenerys(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SceneryMapItem)
}

::google::protobuf::uint8* SceneryMapItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SceneryMapItem)
  // optional uint32 mapid = 1 [default = 0];
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mapid(), target);
  }

  // repeated .Cmd.SceneryItem scenerys = 2;
  for (int i = 0; i < this->scenerys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->scenerys(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SceneryMapItem)
  return target;
}

int SceneryMapItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 mapid = 1 [default = 0];
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

  }
  // repeated .Cmd.SceneryItem scenerys = 2;
  total_size += 1 * this->scenerys_size();
  for (int i = 0; i < this->scenerys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->scenerys(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneryMapItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SceneryMapItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SceneryMapItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SceneryMapItem::MergeFrom(const SceneryMapItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  scenerys_.MergeFrom(from.scenerys_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SceneryMapItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneryMapItem::CopyFrom(const SceneryMapItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneryMapItem::IsInitialized() const {

  return true;
}

void SceneryMapItem::Swap(SceneryMapItem* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    scenerys_.Swap(&other->scenerys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SceneryMapItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SceneryMapItem_descriptor_;
  metadata.reflection = SceneryMapItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobScenery::kVersionFieldNumber;
const int BlobScenery::kListFieldNumber;
const int BlobScenery::kItemsFieldNumber;
#endif  // !_MSC_VER

BlobScenery::BlobScenery()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobScenery)
}

void BlobScenery::InitAsDefaultInstance() {
}

BlobScenery::BlobScenery(const BlobScenery& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobScenery)
}

void BlobScenery::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobScenery::~BlobScenery() {
  // @@protoc_insertion_point(destructor:Cmd.BlobScenery)
  SharedDtor();
}

void BlobScenery::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobScenery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobScenery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobScenery_descriptor_;
}

const BlobScenery& BlobScenery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobScenery* BlobScenery::default_instance_ = NULL;

BlobScenery* BlobScenery::New() const {
  return new BlobScenery;
}

void BlobScenery::Clear() {
  version_ = 0u;
  list_.Clear();
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobScenery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobScenery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_list;
        break;
      }

      // repeated .Cmd.SceneryMapItem list = 2;
      case 2: {
        if (tag == 18) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_list;
        if (input->ExpectTag(26)) goto parse_items;
        break;
      }

      // repeated .Cmd.SceneryItem items = 3;
      case 3: {
        if (tag == 26) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobScenery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobScenery)
  return false;
#undef DO_
}

void BlobScenery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobScenery)
  // optional uint32 version = 1 [default = 0];
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // repeated .Cmd.SceneryMapItem list = 2;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->list(i), output);
  }

  // repeated .Cmd.SceneryItem items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobScenery)
}

::google::protobuf::uint8* BlobScenery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobScenery)
  // optional uint32 version = 1 [default = 0];
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // repeated .Cmd.SceneryMapItem list = 2;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->list(i), target);
  }

  // repeated .Cmd.SceneryItem items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobScenery)
  return target;
}

int BlobScenery::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 version = 1 [default = 0];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

  }
  // repeated .Cmd.SceneryMapItem list = 2;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  // repeated .Cmd.SceneryItem items = 3;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobScenery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobScenery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobScenery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobScenery::MergeFrom(const BlobScenery& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobScenery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobScenery::CopyFrom(const BlobScenery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobScenery::IsInitialized() const {

  return true;
}

void BlobScenery::Swap(BlobScenery* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    list_.Swap(&other->list_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobScenery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobScenery_descriptor_;
  metadata.reflection = BlobScenery_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobCarrier::kVersionFieldNumber;
const int BlobCarrier::kAssembleFieldNumber;
const int BlobCarrier::kJoinmasterFieldNumber;
#endif  // !_MSC_VER

BlobCarrier::BlobCarrier()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobCarrier)
}

void BlobCarrier::InitAsDefaultInstance() {
}

BlobCarrier::BlobCarrier(const BlobCarrier& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobCarrier)
}

void BlobCarrier::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  assemble_ = 0u;
  joinmaster_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobCarrier::~BlobCarrier() {
  // @@protoc_insertion_point(destructor:Cmd.BlobCarrier)
  SharedDtor();
}

void BlobCarrier::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobCarrier::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobCarrier::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobCarrier_descriptor_;
}

const BlobCarrier& BlobCarrier::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobCarrier* BlobCarrier::default_instance_ = NULL;

BlobCarrier* BlobCarrier::New() const {
  return new BlobCarrier;
}

void BlobCarrier::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BlobCarrier*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(version_, joinmaster_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobCarrier::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobCarrier)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_assemble;
        break;
      }

      // optional uint32 assemble = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_assemble:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &assemble_)));
          set_has_assemble();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_joinmaster;
        break;
      }

      // optional uint64 joinmaster = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_joinmaster:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &joinmaster_)));
          set_has_joinmaster();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobCarrier)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobCarrier)
  return false;
#undef DO_
}

void BlobCarrier::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobCarrier)
  // optional uint32 version = 1 [default = 0];
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // optional uint32 assemble = 2 [default = 0];
  if (has_assemble()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->assemble(), output);
  }

  // optional uint64 joinmaster = 3 [default = 0];
  if (has_joinmaster()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->joinmaster(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobCarrier)
}

::google::protobuf::uint8* BlobCarrier::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobCarrier)
  // optional uint32 version = 1 [default = 0];
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // optional uint32 assemble = 2 [default = 0];
  if (has_assemble()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->assemble(), target);
  }

  // optional uint64 joinmaster = 3 [default = 0];
  if (has_joinmaster()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->joinmaster(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobCarrier)
  return target;
}

int BlobCarrier::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 version = 1 [default = 0];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional uint32 assemble = 2 [default = 0];
    if (has_assemble()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->assemble());
    }

    // optional uint64 joinmaster = 3 [default = 0];
    if (has_joinmaster()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->joinmaster());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobCarrier::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobCarrier* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobCarrier*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobCarrier::MergeFrom(const BlobCarrier& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_assemble()) {
      set_assemble(from.assemble());
    }
    if (from.has_joinmaster()) {
      set_joinmaster(from.joinmaster());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobCarrier::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobCarrier::CopyFrom(const BlobCarrier& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobCarrier::IsInitialized() const {

  return true;
}

void BlobCarrier::Swap(BlobCarrier* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(assemble_, other->assemble_);
    std::swap(joinmaster_, other->joinmaster_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobCarrier::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobCarrier_descriptor_;
  metadata.reflection = BlobCarrier_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobMenu::kVersionFieldNumber;
const int BlobMenu::kListFieldNumber;
#endif  // !_MSC_VER

BlobMenu::BlobMenu()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobMenu)
}

void BlobMenu::InitAsDefaultInstance() {
}

BlobMenu::BlobMenu(const BlobMenu& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobMenu)
}

void BlobMenu::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobMenu::~BlobMenu() {
  // @@protoc_insertion_point(destructor:Cmd.BlobMenu)
  SharedDtor();
}

void BlobMenu::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobMenu::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobMenu::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobMenu_descriptor_;
}

const BlobMenu& BlobMenu::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobMenu* BlobMenu::default_instance_ = NULL;

BlobMenu* BlobMenu::New() const {
  return new BlobMenu;
}

void BlobMenu::Clear() {
  version_ = 0u;
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobMenu::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobMenu)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_list;
        break;
      }

      // repeated uint32 list = 2;
      case 2: {
        if (tag == 16) {
         parse_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_list())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobMenu)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobMenu)
  return false;
#undef DO_
}

void BlobMenu::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobMenu)
  // optional uint32 version = 1 [default = 0];
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // repeated uint32 list = 2;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobMenu)
}

::google::protobuf::uint8* BlobMenu::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobMenu)
  // optional uint32 version = 1 [default = 0];
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // repeated uint32 list = 2;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobMenu)
  return target;
}

int BlobMenu::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 version = 1 [default = 0];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

  }
  // repeated uint32 list = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->list(i));
    }
    total_size += 1 * this->list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobMenu::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobMenu* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobMenu*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobMenu::MergeFrom(const BlobMenu& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobMenu::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobMenu::CopyFrom(const BlobMenu& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobMenu::IsInitialized() const {

  return true;
}

void BlobMenu::Swap(BlobMenu* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobMenu::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobMenu_descriptor_;
  metadata.reflection = BlobMenu_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobShopGotItem::kVersionFieldNumber;
const int BlobShopGotItem::kListFieldNumber;
const int BlobShopGotItem::kRandomFieldNumber;
const int BlobShopGotItem::kRefreshlvFieldNumber;
const int BlobShopGotItem::kRefreshlvResettimeFieldNumber;
const int BlobShopGotItem::kMonthFieldNumber;
const int BlobShopGotItem::kRandombylvFieldNumber;
const int BlobShopGotItem::kDiscountactFieldNumber;
const int BlobShopGotItem::kRandomaccFieldNumber;
const int BlobShopGotItem::kListweekFieldNumber;
const int BlobShopGotItem::kLimitmonthFieldNumber;
const int BlobShopGotItem::kAddcountFieldNumber;
const int BlobShopGotItem::kLimititemFieldNumber;
#endif  // !_MSC_VER

BlobShopGotItem::BlobShopGotItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobShopGotItem)
}

void BlobShopGotItem::InitAsDefaultInstance() {
}

BlobShopGotItem::BlobShopGotItem(const BlobShopGotItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobShopGotItem)
}

void BlobShopGotItem::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  refreshlv_ = 0u;
  refreshlv_resettime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobShopGotItem::~BlobShopGotItem() {
  // @@protoc_insertion_point(destructor:Cmd.BlobShopGotItem)
  SharedDtor();
}

void BlobShopGotItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobShopGotItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobShopGotItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobShopGotItem_descriptor_;
}

const BlobShopGotItem& BlobShopGotItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobShopGotItem* BlobShopGotItem::default_instance_ = NULL;

BlobShopGotItem* BlobShopGotItem::New() const {
  return new BlobShopGotItem;
}

void BlobShopGotItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BlobShopGotItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 25) {
    ZR_(version_, refreshlv_);
    refreshlv_resettime_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  list_.Clear();
  random_.Clear();
  month_.Clear();
  randombylv_.Clear();
  discountact_.Clear();
  randomacc_.Clear();
  listweek_.Clear();
  limitmonth_.Clear();
  addcount_.Clear();
  limititem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobShopGotItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobShopGotItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_list;
        break;
      }

      // repeated .Cmd.ShopGotItem list = 2;
      case 2: {
        if (tag == 18) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_list;
        if (input->ExpectTag(26)) goto parse_random;
        break;
      }

      // repeated .Cmd.ShopGotItem random = 3;
      case 3: {
        if (tag == 26) {
         parse_random:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_random()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_random;
        if (input->ExpectTag(32)) goto parse_refreshlv;
        break;
      }

      // optional uint32 refreshlv = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_refreshlv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &refreshlv_)));
          set_has_refreshlv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_refreshlv_resettime;
        break;
      }

      // optional uint32 refreshlv_resettime = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_refreshlv_resettime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &refreshlv_resettime_)));
          set_has_refreshlv_resettime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_month;
        break;
      }

      // repeated .Cmd.ShopGotItem month = 6;
      case 6: {
        if (tag == 50) {
         parse_month:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_month()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_month;
        if (input->ExpectTag(58)) goto parse_randombylv;
        break;
      }

      // repeated .Cmd.ShopGotItem randombylv = 7;
      case 7: {
        if (tag == 58) {
         parse_randombylv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_randombylv()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_randombylv;
        if (input->ExpectTag(66)) goto parse_discountact;
        break;
      }

      // repeated .Cmd.ShopGotItem discountact = 8;
      case 8: {
        if (tag == 66) {
         parse_discountact:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_discountact()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_discountact;
        if (input->ExpectTag(74)) goto parse_randomacc;
        break;
      }

      // repeated .Cmd.ShopGotItem randomacc = 9;
      case 9: {
        if (tag == 74) {
         parse_randomacc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_randomacc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_randomacc;
        if (input->ExpectTag(82)) goto parse_listweek;
        break;
      }

      // repeated .Cmd.ShopGotItem listweek = 10;
      case 10: {
        if (tag == 82) {
         parse_listweek:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_listweek()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_listweek;
        if (input->ExpectTag(90)) goto parse_limitmonth;
        break;
      }

      // repeated .Cmd.ShopGotItem limitmonth = 11;
      case 11: {
        if (tag == 90) {
         parse_limitmonth:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_limitmonth()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_limitmonth;
        if (input->ExpectTag(98)) goto parse_addcount;
        break;
      }

      // repeated .Cmd.ShopGotItem addcount = 12;
      case 12: {
        if (tag == 98) {
         parse_addcount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_addcount()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_addcount;
        if (input->ExpectTag(106)) goto parse_limititem;
        break;
      }

      // repeated .Cmd.ShopGotItem limititem = 13;
      case 13: {
        if (tag == 106) {
         parse_limititem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_limititem()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_limititem;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobShopGotItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobShopGotItem)
  return false;
#undef DO_
}

void BlobShopGotItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobShopGotItem)
  // optional uint32 version = 1 [default = 0];
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // repeated .Cmd.ShopGotItem list = 2;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->list(i), output);
  }

  // repeated .Cmd.ShopGotItem random = 3;
  for (int i = 0; i < this->random_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->random(i), output);
  }

  // optional uint32 refreshlv = 4 [default = 0];
  if (has_refreshlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->refreshlv(), output);
  }

  // optional uint32 refreshlv_resettime = 5 [default = 0];
  if (has_refreshlv_resettime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->refreshlv_resettime(), output);
  }

  // repeated .Cmd.ShopGotItem month = 6;
  for (int i = 0; i < this->month_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->month(i), output);
  }

  // repeated .Cmd.ShopGotItem randombylv = 7;
  for (int i = 0; i < this->randombylv_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->randombylv(i), output);
  }

  // repeated .Cmd.ShopGotItem discountact = 8;
  for (int i = 0; i < this->discountact_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->discountact(i), output);
  }

  // repeated .Cmd.ShopGotItem randomacc = 9;
  for (int i = 0; i < this->randomacc_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->randomacc(i), output);
  }

  // repeated .Cmd.ShopGotItem listweek = 10;
  for (int i = 0; i < this->listweek_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->listweek(i), output);
  }

  // repeated .Cmd.ShopGotItem limitmonth = 11;
  for (int i = 0; i < this->limitmonth_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->limitmonth(i), output);
  }

  // repeated .Cmd.ShopGotItem addcount = 12;
  for (int i = 0; i < this->addcount_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->addcount(i), output);
  }

  // repeated .Cmd.ShopGotItem limititem = 13;
  for (int i = 0; i < this->limititem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->limititem(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobShopGotItem)
}

::google::protobuf::uint8* BlobShopGotItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobShopGotItem)
  // optional uint32 version = 1 [default = 0];
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // repeated .Cmd.ShopGotItem list = 2;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->list(i), target);
  }

  // repeated .Cmd.ShopGotItem random = 3;
  for (int i = 0; i < this->random_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->random(i), target);
  }

  // optional uint32 refreshlv = 4 [default = 0];
  if (has_refreshlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->refreshlv(), target);
  }

  // optional uint32 refreshlv_resettime = 5 [default = 0];
  if (has_refreshlv_resettime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->refreshlv_resettime(), target);
  }

  // repeated .Cmd.ShopGotItem month = 6;
  for (int i = 0; i < this->month_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->month(i), target);
  }

  // repeated .Cmd.ShopGotItem randombylv = 7;
  for (int i = 0; i < this->randombylv_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->randombylv(i), target);
  }

  // repeated .Cmd.ShopGotItem discountact = 8;
  for (int i = 0; i < this->discountact_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->discountact(i), target);
  }

  // repeated .Cmd.ShopGotItem randomacc = 9;
  for (int i = 0; i < this->randomacc_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->randomacc(i), target);
  }

  // repeated .Cmd.ShopGotItem listweek = 10;
  for (int i = 0; i < this->listweek_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->listweek(i), target);
  }

  // repeated .Cmd.ShopGotItem limitmonth = 11;
  for (int i = 0; i < this->limitmonth_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->limitmonth(i), target);
  }

  // repeated .Cmd.ShopGotItem addcount = 12;
  for (int i = 0; i < this->addcount_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->addcount(i), target);
  }

  // repeated .Cmd.ShopGotItem limititem = 13;
  for (int i = 0; i < this->limititem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->limititem(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobShopGotItem)
  return target;
}

int BlobShopGotItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 version = 1 [default = 0];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional uint32 refreshlv = 4 [default = 0];
    if (has_refreshlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->refreshlv());
    }

    // optional uint32 refreshlv_resettime = 5 [default = 0];
    if (has_refreshlv_resettime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->refreshlv_resettime());
    }

  }
  // repeated .Cmd.ShopGotItem list = 2;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  // repeated .Cmd.ShopGotItem random = 3;
  total_size += 1 * this->random_size();
  for (int i = 0; i < this->random_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->random(i));
  }

  // repeated .Cmd.ShopGotItem month = 6;
  total_size += 1 * this->month_size();
  for (int i = 0; i < this->month_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->month(i));
  }

  // repeated .Cmd.ShopGotItem randombylv = 7;
  total_size += 1 * this->randombylv_size();
  for (int i = 0; i < this->randombylv_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->randombylv(i));
  }

  // repeated .Cmd.ShopGotItem discountact = 8;
  total_size += 1 * this->discountact_size();
  for (int i = 0; i < this->discountact_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->discountact(i));
  }

  // repeated .Cmd.ShopGotItem randomacc = 9;
  total_size += 1 * this->randomacc_size();
  for (int i = 0; i < this->randomacc_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->randomacc(i));
  }

  // repeated .Cmd.ShopGotItem listweek = 10;
  total_size += 1 * this->listweek_size();
  for (int i = 0; i < this->listweek_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->listweek(i));
  }

  // repeated .Cmd.ShopGotItem limitmonth = 11;
  total_size += 1 * this->limitmonth_size();
  for (int i = 0; i < this->limitmonth_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->limitmonth(i));
  }

  // repeated .Cmd.ShopGotItem addcount = 12;
  total_size += 1 * this->addcount_size();
  for (int i = 0; i < this->addcount_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->addcount(i));
  }

  // repeated .Cmd.ShopGotItem limititem = 13;
  total_size += 1 * this->limititem_size();
  for (int i = 0; i < this->limititem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->limititem(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobShopGotItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobShopGotItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobShopGotItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobShopGotItem::MergeFrom(const BlobShopGotItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  random_.MergeFrom(from.random_);
  month_.MergeFrom(from.month_);
  randombylv_.MergeFrom(from.randombylv_);
  discountact_.MergeFrom(from.discountact_);
  randomacc_.MergeFrom(from.randomacc_);
  listweek_.MergeFrom(from.listweek_);
  limitmonth_.MergeFrom(from.limitmonth_);
  addcount_.MergeFrom(from.addcount_);
  limititem_.MergeFrom(from.limititem_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_refreshlv()) {
      set_refreshlv(from.refreshlv());
    }
    if (from.has_refreshlv_resettime()) {
      set_refreshlv_resettime(from.refreshlv_resettime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobShopGotItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobShopGotItem::CopyFrom(const BlobShopGotItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobShopGotItem::IsInitialized() const {

  return true;
}

void BlobShopGotItem::Swap(BlobShopGotItem* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    list_.Swap(&other->list_);
    random_.Swap(&other->random_);
    std::swap(refreshlv_, other->refreshlv_);
    std::swap(refreshlv_resettime_, other->refreshlv_resettime_);
    month_.Swap(&other->month_);
    randombylv_.Swap(&other->randombylv_);
    discountact_.Swap(&other->discountact_);
    randomacc_.Swap(&other->randomacc_);
    listweek_.Swap(&other->listweek_);
    limitmonth_.Swap(&other->limitmonth_);
    addcount_.Swap(&other->addcount_);
    limititem_.Swap(&other->limititem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobShopGotItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobShopGotItem_descriptor_;
  metadata.reflection = BlobShopGotItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobExchangeShop::kVersionFieldNumber;
const int BlobExchangeShop::kMenuopenFieldNumber;
const int BlobExchangeShop::kItemsFieldNumber;
const int BlobExchangeShop::kItemgetFieldNumber;
const int BlobExchangeShop::kExchangedGoodsFieldNumber;
#endif  // !_MSC_VER

BlobExchangeShop::BlobExchangeShop()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobExchangeShop)
}

void BlobExchangeShop::InitAsDefaultInstance() {
}

BlobExchangeShop::BlobExchangeShop(const BlobExchangeShop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobExchangeShop)
}

void BlobExchangeShop::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  menuopen_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobExchangeShop::~BlobExchangeShop() {
  // @@protoc_insertion_point(destructor:Cmd.BlobExchangeShop)
  SharedDtor();
}

void BlobExchangeShop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobExchangeShop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobExchangeShop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobExchangeShop_descriptor_;
}

const BlobExchangeShop& BlobExchangeShop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobExchangeShop* BlobExchangeShop::default_instance_ = NULL;

BlobExchangeShop* BlobExchangeShop::New() const {
  return new BlobExchangeShop;
}

void BlobExchangeShop::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BlobExchangeShop*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(version_, menuopen_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  items_.Clear();
  itemget_.Clear();
  exchanged_goods_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobExchangeShop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobExchangeShop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_menuopen;
        break;
      }

      // optional bool menuopen = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_menuopen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &menuopen_)));
          set_has_menuopen();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_items;
        break;
      }

      // repeated .Cmd.ExchangeShopItem items = 3;
      case 3: {
        if (tag == 26) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_items;
        if (input->ExpectTag(34)) goto parse_itemget;
        break;
      }

      // repeated .Cmd.ItemGetCount itemget = 4;
      case 4: {
        if (tag == 34) {
         parse_itemget:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemget()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_itemget;
        if (input->ExpectTag(40)) goto parse_exchanged_goods;
        break;
      }

      // repeated uint32 exchanged_goods = 5;
      case 5: {
        if (tag == 40) {
         parse_exchanged_goods:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_exchanged_goods())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_exchanged_goods())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_exchanged_goods;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobExchangeShop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobExchangeShop)
  return false;
#undef DO_
}

void BlobExchangeShop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobExchangeShop)
  // optional uint32 version = 1 [default = 0];
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // optional bool menuopen = 2 [default = false];
  if (has_menuopen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->menuopen(), output);
  }

  // repeated .Cmd.ExchangeShopItem items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->items(i), output);
  }

  // repeated .Cmd.ItemGetCount itemget = 4;
  for (int i = 0; i < this->itemget_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->itemget(i), output);
  }

  // repeated uint32 exchanged_goods = 5;
  for (int i = 0; i < this->exchanged_goods_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->exchanged_goods(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobExchangeShop)
}

::google::protobuf::uint8* BlobExchangeShop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobExchangeShop)
  // optional uint32 version = 1 [default = 0];
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // optional bool menuopen = 2 [default = false];
  if (has_menuopen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->menuopen(), target);
  }

  // repeated .Cmd.ExchangeShopItem items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->items(i), target);
  }

  // repeated .Cmd.ItemGetCount itemget = 4;
  for (int i = 0; i < this->itemget_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->itemget(i), target);
  }

  // repeated uint32 exchanged_goods = 5;
  for (int i = 0; i < this->exchanged_goods_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->exchanged_goods(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobExchangeShop)
  return target;
}

int BlobExchangeShop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 version = 1 [default = 0];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional bool menuopen = 2 [default = false];
    if (has_menuopen()) {
      total_size += 1 + 1;
    }

  }
  // repeated .Cmd.ExchangeShopItem items = 3;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  // repeated .Cmd.ItemGetCount itemget = 4;
  total_size += 1 * this->itemget_size();
  for (int i = 0; i < this->itemget_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemget(i));
  }

  // repeated uint32 exchanged_goods = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->exchanged_goods_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->exchanged_goods(i));
    }
    total_size += 1 * this->exchanged_goods_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobExchangeShop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobExchangeShop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobExchangeShop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobExchangeShop::MergeFrom(const BlobExchangeShop& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  itemget_.MergeFrom(from.itemget_);
  exchanged_goods_.MergeFrom(from.exchanged_goods_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_menuopen()) {
      set_menuopen(from.menuopen());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobExchangeShop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobExchangeShop::CopyFrom(const BlobExchangeShop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobExchangeShop::IsInitialized() const {

  return true;
}

void BlobExchangeShop::Swap(BlobExchangeShop* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(menuopen_, other->menuopen_);
    items_.Swap(&other->items_);
    itemget_.Swap(&other->itemget_);
    exchanged_goods_.Swap(&other->exchanged_goods_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobExchangeShop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobExchangeShop_descriptor_;
  metadata.reflection = BlobExchangeShop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobKnownMaps::kVersionFieldNumber;
const int BlobKnownMaps::kListFieldNumber;
#endif  // !_MSC_VER

BlobKnownMaps::BlobKnownMaps()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobKnownMaps)
}

void BlobKnownMaps::InitAsDefaultInstance() {
}

BlobKnownMaps::BlobKnownMaps(const BlobKnownMaps& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobKnownMaps)
}

void BlobKnownMaps::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobKnownMaps::~BlobKnownMaps() {
  // @@protoc_insertion_point(destructor:Cmd.BlobKnownMaps)
  SharedDtor();
}

void BlobKnownMaps::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobKnownMaps::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobKnownMaps::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobKnownMaps_descriptor_;
}

const BlobKnownMaps& BlobKnownMaps::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobKnownMaps* BlobKnownMaps::default_instance_ = NULL;

BlobKnownMaps* BlobKnownMaps::New() const {
  return new BlobKnownMaps;
}

void BlobKnownMaps::Clear() {
  version_ = 0u;
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobKnownMaps::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobKnownMaps)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_list;
        break;
      }

      // repeated uint32 list = 2;
      case 2: {
        if (tag == 16) {
         parse_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_list())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobKnownMaps)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobKnownMaps)
  return false;
#undef DO_
}

void BlobKnownMaps::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobKnownMaps)
  // optional uint32 version = 1 [default = 0];
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // repeated uint32 list = 2;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobKnownMaps)
}

::google::protobuf::uint8* BlobKnownMaps::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobKnownMaps)
  // optional uint32 version = 1 [default = 0];
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // repeated uint32 list = 2;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobKnownMaps)
  return target;
}

int BlobKnownMaps::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 version = 1 [default = 0];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

  }
  // repeated uint32 list = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->list(i));
    }
    total_size += 1 * this->list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobKnownMaps::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobKnownMaps* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobKnownMaps*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobKnownMaps::MergeFrom(const BlobKnownMaps& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobKnownMaps::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobKnownMaps::CopyFrom(const BlobKnownMaps& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobKnownMaps::IsInitialized() const {

  return true;
}

void BlobKnownMaps::Swap(BlobKnownMaps* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobKnownMaps::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobKnownMaps_descriptor_;
  metadata.reflection = BlobKnownMaps_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobInter::kVersionFieldNumber;
const int BlobInter::kListFieldNumber;
#endif  // !_MSC_VER

BlobInter::BlobInter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobInter)
}

void BlobInter::InitAsDefaultInstance() {
}

BlobInter::BlobInter(const BlobInter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobInter)
}

void BlobInter::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobInter::~BlobInter() {
  // @@protoc_insertion_point(destructor:Cmd.BlobInter)
  SharedDtor();
}

void BlobInter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobInter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobInter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobInter_descriptor_;
}

const BlobInter& BlobInter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobInter* BlobInter::default_instance_ = NULL;

BlobInter* BlobInter::New() const {
  return new BlobInter;
}

void BlobInter::Clear() {
  version_ = 0u;
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobInter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobInter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_list;
        break;
      }

      // repeated .Cmd.InterData list = 2;
      case 2: {
        if (tag == 18) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobInter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobInter)
  return false;
#undef DO_
}

void BlobInter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobInter)
  // optional uint32 version = 1 [default = 0];
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // repeated .Cmd.InterData list = 2;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobInter)
}

::google::protobuf::uint8* BlobInter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobInter)
  // optional uint32 version = 1 [default = 0];
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // repeated .Cmd.InterData list = 2;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobInter)
  return target;
}

int BlobInter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 version = 1 [default = 0];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

  }
  // repeated .Cmd.InterData list = 2;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobInter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobInter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobInter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobInter::MergeFrom(const BlobInter& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobInter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobInter::CopyFrom(const BlobInter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobInter::IsInitialized() const {

  return true;
}

void BlobInter::Swap(BlobInter* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobInter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobInter_descriptor_;
  metadata.reflection = BlobInter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobHands::kVersionFieldNumber;
const int BlobHands::kIsmasterFieldNumber;
const int BlobHands::kOtheridFieldNumber;
const int BlobHands::kForcejoinidFieldNumber;
const int BlobHands::kLastHandnameFieldNumber;
const int BlobHands::kHandtimelenFieldNumber;
const int BlobHands::kNextrewardtimeFieldNumber;
const int BlobHands::kNexttiptimeFieldNumber;
#endif  // !_MSC_VER

BlobHands::BlobHands()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobHands)
}

void BlobHands::InitAsDefaultInstance() {
}

BlobHands::BlobHands(const BlobHands& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobHands)
}

void BlobHands::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  version_ = 0u;
  ismaster_ = 0u;
  otherid_ = GOOGLE_ULONGLONG(0);
  forcejoinid_ = GOOGLE_ULONGLONG(0);
  last_handname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  handtimelen_ = 0u;
  nextrewardtime_ = 0u;
  nexttiptime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobHands::~BlobHands() {
  // @@protoc_insertion_point(destructor:Cmd.BlobHands)
  SharedDtor();
}

void BlobHands::SharedDtor() {
  if (last_handname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete last_handname_;
  }
  if (this != default_instance_) {
  }
}

void BlobHands::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobHands::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobHands_descriptor_;
}

const BlobHands& BlobHands::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobHands* BlobHands::default_instance_ = NULL;

BlobHands* BlobHands::New() const {
  return new BlobHands;
}

void BlobHands::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BlobHands*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(version_, forcejoinid_);
    ZR_(handtimelen_, nexttiptime_);
    if (has_last_handname()) {
      if (last_handname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        last_handname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobHands::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobHands)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ismaster;
        break;
      }

      // optional uint32 ismaster = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_ismaster:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ismaster_)));
          set_has_ismaster();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_otherid;
        break;
      }

      // optional uint64 otherid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_otherid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &otherid_)));
          set_has_otherid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_forcejoinid;
        break;
      }

      // optional uint64 forcejoinid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_forcejoinid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &forcejoinid_)));
          set_has_forcejoinid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_last_handname;
        break;
      }

      // optional string last_handname = 5;
      case 5: {
        if (tag == 42) {
         parse_last_handname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_last_handname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->last_handname().data(), this->last_handname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "last_handname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_handtimelen;
        break;
      }

      // optional uint32 handtimelen = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_handtimelen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &handtimelen_)));
          set_has_handtimelen();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_nextrewardtime;
        break;
      }

      // optional uint32 nextrewardtime = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_nextrewardtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nextrewardtime_)));
          set_has_nextrewardtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_nexttiptime;
        break;
      }

      // optional uint32 nexttiptime = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_nexttiptime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nexttiptime_)));
          set_has_nexttiptime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobHands)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobHands)
  return false;
#undef DO_
}

void BlobHands::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobHands)
  // optional uint32 version = 1 [default = 0];
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // optional uint32 ismaster = 2 [default = 0];
  if (has_ismaster()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ismaster(), output);
  }

  // optional uint64 otherid = 3 [default = 0];
  if (has_otherid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->otherid(), output);
  }

  // optional uint64 forcejoinid = 4 [default = 0];
  if (has_forcejoinid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->forcejoinid(), output);
  }

  // optional string last_handname = 5;
  if (has_last_handname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->last_handname().data(), this->last_handname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "last_handname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->last_handname(), output);
  }

  // optional uint32 handtimelen = 6 [default = 0];
  if (has_handtimelen()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->handtimelen(), output);
  }

  // optional uint32 nextrewardtime = 7 [default = 0];
  if (has_nextrewardtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->nextrewardtime(), output);
  }

  // optional uint32 nexttiptime = 8 [default = 0];
  if (has_nexttiptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->nexttiptime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobHands)
}

::google::protobuf::uint8* BlobHands::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobHands)
  // optional uint32 version = 1 [default = 0];
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // optional uint32 ismaster = 2 [default = 0];
  if (has_ismaster()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ismaster(), target);
  }

  // optional uint64 otherid = 3 [default = 0];
  if (has_otherid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->otherid(), target);
  }

  // optional uint64 forcejoinid = 4 [default = 0];
  if (has_forcejoinid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->forcejoinid(), target);
  }

  // optional string last_handname = 5;
  if (has_last_handname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->last_handname().data(), this->last_handname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "last_handname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->last_handname(), target);
  }

  // optional uint32 handtimelen = 6 [default = 0];
  if (has_handtimelen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->handtimelen(), target);
  }

  // optional uint32 nextrewardtime = 7 [default = 0];
  if (has_nextrewardtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->nextrewardtime(), target);
  }

  // optional uint32 nexttiptime = 8 [default = 0];
  if (has_nexttiptime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->nexttiptime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobHands)
  return target;
}

int BlobHands::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 version = 1 [default = 0];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional uint32 ismaster = 2 [default = 0];
    if (has_ismaster()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ismaster());
    }

    // optional uint64 otherid = 3 [default = 0];
    if (has_otherid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->otherid());
    }

    // optional uint64 forcejoinid = 4 [default = 0];
    if (has_forcejoinid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->forcejoinid());
    }

    // optional string last_handname = 5;
    if (has_last_handname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->last_handname());
    }

    // optional uint32 handtimelen = 6 [default = 0];
    if (has_handtimelen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->handtimelen());
    }

    // optional uint32 nextrewardtime = 7 [default = 0];
    if (has_nextrewardtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nextrewardtime());
    }

    // optional uint32 nexttiptime = 8 [default = 0];
    if (has_nexttiptime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nexttiptime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobHands::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobHands* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobHands*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobHands::MergeFrom(const BlobHands& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_ismaster()) {
      set_ismaster(from.ismaster());
    }
    if (from.has_otherid()) {
      set_otherid(from.otherid());
    }
    if (from.has_forcejoinid()) {
      set_forcejoinid(from.forcejoinid());
    }
    if (from.has_last_handname()) {
      set_last_handname(from.last_handname());
    }
    if (from.has_handtimelen()) {
      set_handtimelen(from.handtimelen());
    }
    if (from.has_nextrewardtime()) {
      set_nextrewardtime(from.nextrewardtime());
    }
    if (from.has_nexttiptime()) {
      set_nexttiptime(from.nexttiptime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobHands::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobHands::CopyFrom(const BlobHands& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobHands::IsInitialized() const {

  return true;
}

void BlobHands::Swap(BlobHands* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(ismaster_, other->ismaster_);
    std::swap(otherid_, other->otherid_);
    std::swap(forcejoinid_, other->forcejoinid_);
    std::swap(last_handname_, other->last_handname_);
    std::swap(handtimelen_, other->handtimelen_);
    std::swap(nextrewardtime_, other->nextrewardtime_);
    std::swap(nexttiptime_, other->nexttiptime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobHands::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobHands_descriptor_;
  metadata.reflection = BlobHands_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobShow::kActionsFieldNumber;
const int BlobShow::kExpressionsFieldNumber;
#endif  // !_MSC_VER

BlobShow::BlobShow()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobShow)
}

void BlobShow::InitAsDefaultInstance() {
}

BlobShow::BlobShow(const BlobShow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobShow)
}

void BlobShow::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobShow::~BlobShow() {
  // @@protoc_insertion_point(destructor:Cmd.BlobShow)
  SharedDtor();
}

void BlobShow::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobShow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobShow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobShow_descriptor_;
}

const BlobShow& BlobShow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobShow* BlobShow::default_instance_ = NULL;

BlobShow* BlobShow::New() const {
  return new BlobShow;
}

void BlobShow::Clear() {
  actions_.Clear();
  expressions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobShow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobShow)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 actions = 1;
      case 1: {
        if (tag == 8) {
         parse_actions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_actions())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_actions())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_actions;
        if (input->ExpectTag(16)) goto parse_expressions;
        break;
      }

      // repeated uint32 expressions = 2;
      case 2: {
        if (tag == 16) {
         parse_expressions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_expressions())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_expressions())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_expressions;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobShow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobShow)
  return false;
#undef DO_
}

void BlobShow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobShow)
  // repeated uint32 actions = 1;
  for (int i = 0; i < this->actions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->actions(i), output);
  }

  // repeated uint32 expressions = 2;
  for (int i = 0; i < this->expressions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->expressions(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobShow)
}

::google::protobuf::uint8* BlobShow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobShow)
  // repeated uint32 actions = 1;
  for (int i = 0; i < this->actions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->actions(i), target);
  }

  // repeated uint32 expressions = 2;
  for (int i = 0; i < this->expressions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->expressions(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobShow)
  return target;
}

int BlobShow::ByteSize() const {
  int total_size = 0;

  // repeated uint32 actions = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->actions_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->actions(i));
    }
    total_size += 1 * this->actions_size() + data_size;
  }

  // repeated uint32 expressions = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->expressions_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->expressions(i));
    }
    total_size += 1 * this->expressions_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobShow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobShow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobShow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobShow::MergeFrom(const BlobShow& from) {
  GOOGLE_CHECK_NE(&from, this);
  actions_.MergeFrom(from.actions_);
  expressions_.MergeFrom(from.expressions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobShow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobShow::CopyFrom(const BlobShow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobShow::IsInitialized() const {

  return true;
}

void BlobShow::Swap(BlobShow* other) {
  if (other != this) {
    actions_.Swap(&other->actions_);
    expressions_.Swap(&other->expressions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobShow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobShow_descriptor_;
  metadata.reflection = BlobShow_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobTrace::kItemsFieldNumber;
#endif  // !_MSC_VER

BlobTrace::BlobTrace()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobTrace)
}

void BlobTrace::InitAsDefaultInstance() {
}

BlobTrace::BlobTrace(const BlobTrace& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobTrace)
}

void BlobTrace::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobTrace::~BlobTrace() {
  // @@protoc_insertion_point(destructor:Cmd.BlobTrace)
  SharedDtor();
}

void BlobTrace::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobTrace::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobTrace::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobTrace_descriptor_;
}

const BlobTrace& BlobTrace::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobTrace* BlobTrace::default_instance_ = NULL;

BlobTrace* BlobTrace::New() const {
  return new BlobTrace;
}

void BlobTrace::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobTrace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobTrace)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Cmd.TraceItem items = 1;
      case 1: {
        if (tag == 10) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobTrace)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobTrace)
  return false;
#undef DO_
}

void BlobTrace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobTrace)
  // repeated .Cmd.TraceItem items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobTrace)
}

::google::protobuf::uint8* BlobTrace::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobTrace)
  // repeated .Cmd.TraceItem items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobTrace)
  return target;
}

int BlobTrace::ByteSize() const {
  int total_size = 0;

  // repeated .Cmd.TraceItem items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobTrace::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobTrace* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobTrace*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobTrace::MergeFrom(const BlobTrace& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobTrace::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobTrace::CopyFrom(const BlobTrace& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobTrace::IsInitialized() const {

  return true;
}

void BlobTrace::Swap(BlobTrace* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobTrace::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobTrace_descriptor_;
  metadata.reflection = BlobTrace_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobOption::kTypeFieldNumber;
const int BlobOption::kNormalskillOptionFieldNumber;
const int BlobOption::kFashionhideFieldNumber;
const int BlobOption::kBitoptFieldNumber;
const int BlobOption::kSkilloptsFieldNumber;
const int BlobOption::kWeddingTypeFieldNumber;
#endif  // !_MSC_VER

BlobOption::BlobOption()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobOption)
}

void BlobOption::InitAsDefaultInstance() {
}

BlobOption::BlobOption(const BlobOption& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobOption)
}

void BlobOption::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  normalskill_option_ = 1u;
  fashionhide_ = 0u;
  bitopt_ = GOOGLE_ULONGLONG(18446744073709551615);
  wedding_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobOption::~BlobOption() {
  // @@protoc_insertion_point(destructor:Cmd.BlobOption)
  SharedDtor();
}

void BlobOption::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobOption::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobOption::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobOption_descriptor_;
}

const BlobOption& BlobOption::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobOption* BlobOption::default_instance_ = NULL;

BlobOption* BlobOption::New() const {
  return new BlobOption;
}

void BlobOption::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BlobOption*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 47) {
    ZR_(fashionhide_, wedding_type_);
    type_ = 0;
    normalskill_option_ = 1u;
    bitopt_ = GOOGLE_ULONGLONG(18446744073709551615);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  skillopts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobOption::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobOption)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.EQueryType type = 1 [default = EQUERYTYPE_MIN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EQueryType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EQueryType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_normalskill_option;
        break;
      }

      // optional uint32 normalskill_option = 2 [default = 1];
      case 2: {
        if (tag == 16) {
         parse_normalskill_option:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &normalskill_option_)));
          set_has_normalskill_option();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_fashionhide;
        break;
      }

      // optional uint32 fashionhide = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_fashionhide:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashionhide_)));
          set_has_fashionhide();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_bitopt;
        break;
      }

      // optional uint64 bitopt = 4 [default = 18446744073709551615];
      case 4: {
        if (tag == 32) {
         parse_bitopt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bitopt_)));
          set_has_bitopt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_skillopts;
        break;
      }

      // repeated .Cmd.SkillOption skillopts = 5;
      case 5: {
        if (tag == 42) {
         parse_skillopts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skillopts()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_skillopts;
        if (input->ExpectTag(48)) goto parse_wedding_type;
        break;
      }

      // optional .Cmd.EQueryType wedding_type = 6;
      case 6: {
        if (tag == 48) {
         parse_wedding_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EQueryType_IsValid(value)) {
            set_wedding_type(static_cast< ::Cmd::EQueryType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobOption)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobOption)
  return false;
#undef DO_
}

void BlobOption::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobOption)
  // optional .Cmd.EQueryType type = 1 [default = EQUERYTYPE_MIN];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint32 normalskill_option = 2 [default = 1];
  if (has_normalskill_option()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->normalskill_option(), output);
  }

  // optional uint32 fashionhide = 3 [default = 0];
  if (has_fashionhide()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->fashionhide(), output);
  }

  // optional uint64 bitopt = 4 [default = 18446744073709551615];
  if (has_bitopt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->bitopt(), output);
  }

  // repeated .Cmd.SkillOption skillopts = 5;
  for (int i = 0; i < this->skillopts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->skillopts(i), output);
  }

  // optional .Cmd.EQueryType wedding_type = 6;
  if (has_wedding_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->wedding_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobOption)
}

::google::protobuf::uint8* BlobOption::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobOption)
  // optional .Cmd.EQueryType type = 1 [default = EQUERYTYPE_MIN];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint32 normalskill_option = 2 [default = 1];
  if (has_normalskill_option()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->normalskill_option(), target);
  }

  // optional uint32 fashionhide = 3 [default = 0];
  if (has_fashionhide()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->fashionhide(), target);
  }

  // optional uint64 bitopt = 4 [default = 18446744073709551615];
  if (has_bitopt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->bitopt(), target);
  }

  // repeated .Cmd.SkillOption skillopts = 5;
  for (int i = 0; i < this->skillopts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->skillopts(i), target);
  }

  // optional .Cmd.EQueryType wedding_type = 6;
  if (has_wedding_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->wedding_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobOption)
  return target;
}

int BlobOption::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.EQueryType type = 1 [default = EQUERYTYPE_MIN];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 normalskill_option = 2 [default = 1];
    if (has_normalskill_option()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->normalskill_option());
    }

    // optional uint32 fashionhide = 3 [default = 0];
    if (has_fashionhide()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashionhide());
    }

    // optional uint64 bitopt = 4 [default = 18446744073709551615];
    if (has_bitopt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bitopt());
    }

    // optional .Cmd.EQueryType wedding_type = 6;
    if (has_wedding_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->wedding_type());
    }

  }
  // repeated .Cmd.SkillOption skillopts = 5;
  total_size += 1 * this->skillopts_size();
  for (int i = 0; i < this->skillopts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skillopts(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobOption::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobOption* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobOption*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobOption::MergeFrom(const BlobOption& from) {
  GOOGLE_CHECK_NE(&from, this);
  skillopts_.MergeFrom(from.skillopts_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_normalskill_option()) {
      set_normalskill_option(from.normalskill_option());
    }
    if (from.has_fashionhide()) {
      set_fashionhide(from.fashionhide());
    }
    if (from.has_bitopt()) {
      set_bitopt(from.bitopt());
    }
    if (from.has_wedding_type()) {
      set_wedding_type(from.wedding_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobOption::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobOption::CopyFrom(const BlobOption& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobOption::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->skillopts())) return false;
  return true;
}

void BlobOption::Swap(BlobOption* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(normalskill_option_, other->normalskill_option_);
    std::swap(fashionhide_, other->fashionhide_);
    std::swap(bitopt_, other->bitopt_);
    skillopts_.Swap(&other->skillopts_);
    std::swap(wedding_type_, other->wedding_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobOption::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobOption_descriptor_;
  metadata.reflection = BlobOption_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobDojo::kCompletedidFieldNumber;
#endif  // !_MSC_VER

BlobDojo::BlobDojo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobDojo)
}

void BlobDojo::InitAsDefaultInstance() {
}

BlobDojo::BlobDojo(const BlobDojo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobDojo)
}

void BlobDojo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobDojo::~BlobDojo() {
  // @@protoc_insertion_point(destructor:Cmd.BlobDojo)
  SharedDtor();
}

void BlobDojo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobDojo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobDojo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobDojo_descriptor_;
}

const BlobDojo& BlobDojo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobDojo* BlobDojo::default_instance_ = NULL;

BlobDojo* BlobDojo::New() const {
  return new BlobDojo;
}

void BlobDojo::Clear() {
  completedid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobDojo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobDojo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 completedid = 1;
      case 1: {
        if (tag == 8) {
         parse_completedid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_completedid())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_completedid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_completedid;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobDojo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobDojo)
  return false;
#undef DO_
}

void BlobDojo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobDojo)
  // repeated uint32 completedid = 1;
  for (int i = 0; i < this->completedid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->completedid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobDojo)
}

::google::protobuf::uint8* BlobDojo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobDojo)
  // repeated uint32 completedid = 1;
  for (int i = 0; i < this->completedid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->completedid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobDojo)
  return target;
}

int BlobDojo::ByteSize() const {
  int total_size = 0;

  // repeated uint32 completedid = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->completedid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->completedid(i));
    }
    total_size += 1 * this->completedid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobDojo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobDojo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobDojo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobDojo::MergeFrom(const BlobDojo& from) {
  GOOGLE_CHECK_NE(&from, this);
  completedid_.MergeFrom(from.completedid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobDojo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobDojo::CopyFrom(const BlobDojo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobDojo::IsInitialized() const {

  return true;
}

void BlobDojo::Swap(BlobDojo* other) {
  if (other != this) {
    completedid_.Swap(&other->completedid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobDojo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobDojo_descriptor_;
  metadata.reflection = BlobDojo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FoodItemInfo::kItemidFieldNumber;
const int FoodItemInfo::kInvalidTimeFieldNumber;
const int FoodItemInfo::kAttrsFieldNumber;
#endif  // !_MSC_VER

FoodItemInfo::FoodItemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.FoodItemInfo)
}

void FoodItemInfo::InitAsDefaultInstance() {
}

FoodItemInfo::FoodItemInfo(const FoodItemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.FoodItemInfo)
}

void FoodItemInfo::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  invalid_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FoodItemInfo::~FoodItemInfo() {
  // @@protoc_insertion_point(destructor:Cmd.FoodItemInfo)
  SharedDtor();
}

void FoodItemInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FoodItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FoodItemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FoodItemInfo_descriptor_;
}

const FoodItemInfo& FoodItemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

FoodItemInfo* FoodItemInfo::default_instance_ = NULL;

FoodItemInfo* FoodItemInfo::New() const {
  return new FoodItemInfo;
}

void FoodItemInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FoodItemInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(itemid_, invalid_time_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  attrs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FoodItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.FoodItemInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itemid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_invalid_time;
        break;
      }

      // optional uint32 invalid_time = 2;
      case 2: {
        if (tag == 16) {
         parse_invalid_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &invalid_time_)));
          set_has_invalid_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_attrs;
        break;
      }

      // repeated .Cmd.UserAttrSvr attrs = 3;
      case 3: {
        if (tag == 26) {
         parse_attrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attrs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_attrs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.FoodItemInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.FoodItemInfo)
  return false;
#undef DO_
}

void FoodItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.FoodItemInfo)
  // optional uint32 itemid = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }

  // optional uint32 invalid_time = 2;
  if (has_invalid_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->invalid_time(), output);
  }

  // repeated .Cmd.UserAttrSvr attrs = 3;
  for (int i = 0; i < this->attrs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->attrs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.FoodItemInfo)
}

::google::protobuf::uint8* FoodItemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.FoodItemInfo)
  // optional uint32 itemid = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }

  // optional uint32 invalid_time = 2;
  if (has_invalid_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->invalid_time(), target);
  }

  // repeated .Cmd.UserAttrSvr attrs = 3;
  for (int i = 0; i < this->attrs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->attrs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.FoodItemInfo)
  return target;
}

int FoodItemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 itemid = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 invalid_time = 2;
    if (has_invalid_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->invalid_time());
    }

  }
  // repeated .Cmd.UserAttrSvr attrs = 3;
  total_size += 1 * this->attrs_size();
  for (int i = 0; i < this->attrs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attrs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FoodItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FoodItemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FoodItemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FoodItemInfo::MergeFrom(const FoodItemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  attrs_.MergeFrom(from.attrs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_invalid_time()) {
      set_invalid_time(from.invalid_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FoodItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FoodItemInfo::CopyFrom(const FoodItemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FoodItemInfo::IsInitialized() const {

  return true;
}

void FoodItemInfo::Swap(FoodItemInfo* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(invalid_time_, other->invalid_time_);
    attrs_.Swap(&other->attrs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FoodItemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FoodItemInfo_descriptor_;
  metadata.reflection = FoodItemInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FoodLimitInfo::kItemidFieldNumber;
const int FoodLimitInfo::kNumFieldNumber;
const int FoodLimitInfo::kTimeFieldNumber;
#endif  // !_MSC_VER

FoodLimitInfo::FoodLimitInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.FoodLimitInfo)
}

void FoodLimitInfo::InitAsDefaultInstance() {
}

FoodLimitInfo::FoodLimitInfo(const FoodLimitInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.FoodLimitInfo)
}

void FoodLimitInfo::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  num_ = 0u;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FoodLimitInfo::~FoodLimitInfo() {
  // @@protoc_insertion_point(destructor:Cmd.FoodLimitInfo)
  SharedDtor();
}

void FoodLimitInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FoodLimitInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FoodLimitInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FoodLimitInfo_descriptor_;
}

const FoodLimitInfo& FoodLimitInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

FoodLimitInfo* FoodLimitInfo::default_instance_ = NULL;

FoodLimitInfo* FoodLimitInfo::New() const {
  return new FoodLimitInfo;
}

void FoodLimitInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FoodLimitInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(itemid_, time_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FoodLimitInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.FoodLimitInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itemid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional uint32 num = 2;
      case 2: {
        if (tag == 16) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional uint32 time = 3;
      case 3: {
        if (tag == 24) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.FoodLimitInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.FoodLimitInfo)
  return false;
#undef DO_
}

void FoodLimitInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.FoodLimitInfo)
  // optional uint32 itemid = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  // optional uint32 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.FoodLimitInfo)
}

::google::protobuf::uint8* FoodLimitInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.FoodLimitInfo)
  // optional uint32 itemid = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  // optional uint32 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.FoodLimitInfo)
  return target;
}

int FoodLimitInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 itemid = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // optional uint32 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FoodLimitInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FoodLimitInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FoodLimitInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FoodLimitInfo::MergeFrom(const FoodLimitInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FoodLimitInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FoodLimitInfo::CopyFrom(const FoodLimitInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FoodLimitInfo::IsInitialized() const {

  return true;
}

void FoodLimitInfo::Swap(FoodLimitInfo* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(num_, other->num_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FoodLimitInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FoodLimitInfo_descriptor_;
  metadata.reflection = FoodLimitInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobFood::kCookerexpFieldNumber;
const int BlobFood::kCookerlvFieldNumber;
const int BlobFood::kTasterexpFieldNumber;
const int BlobFood::kTasterlvFieldNumber;
const int BlobFood::kSavehpFieldNumber;
const int BlobFood::kSavespFieldNumber;
const int BlobFood::kHeightFieldNumber;
const int BlobFood::kWeightFieldNumber;
const int BlobFood::kRecipesFieldNumber;
const int BlobFood::kManualdataFieldNumber;
const int BlobFood::kIteminfoFieldNumber;
const int BlobFood::kSatietyFieldNumber;
const int BlobFood::kLastCookedIdsFieldNumber;
const int BlobFood::kLimitinfoFieldNumber;
#endif  // !_MSC_VER

BlobFood::BlobFood()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobFood)
}

void BlobFood::InitAsDefaultInstance() {
}

BlobFood::BlobFood(const BlobFood& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobFood)
}

void BlobFood::SharedCtor() {
  _cached_size_ = 0;
  cookerexp_ = 0u;
  cookerlv_ = 0u;
  tasterexp_ = 0u;
  tasterlv_ = 0u;
  savehp_ = GOOGLE_ULONGLONG(0);
  savesp_ = GOOGLE_ULONGLONG(0);
  height_ = 0u;
  weight_ = 0u;
  satiety_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobFood::~BlobFood() {
  // @@protoc_insertion_point(destructor:Cmd.BlobFood)
  SharedDtor();
}

void BlobFood::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobFood::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobFood::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobFood_descriptor_;
}

const BlobFood& BlobFood::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobFood* BlobFood::default_instance_ = NULL;

BlobFood* BlobFood::New() const {
  return new BlobFood;
}

void BlobFood::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BlobFood*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(cookerexp_, weight_);
  }
  satiety_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  recipes_.Clear();
  manualdata_.Clear();
  iteminfo_.Clear();
  last_cooked_ids_.Clear();
  limitinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobFood::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobFood)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cookerexp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cookerexp_)));
          set_has_cookerexp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cookerlv;
        break;
      }

      // optional uint32 cookerlv = 2;
      case 2: {
        if (tag == 16) {
         parse_cookerlv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cookerlv_)));
          set_has_cookerlv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_tasterexp;
        break;
      }

      // optional uint32 tasterexp = 3;
      case 3: {
        if (tag == 24) {
         parse_tasterexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tasterexp_)));
          set_has_tasterexp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_tasterlv;
        break;
      }

      // optional uint32 tasterlv = 4;
      case 4: {
        if (tag == 32) {
         parse_tasterlv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tasterlv_)));
          set_has_tasterlv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_savehp;
        break;
      }

      // optional uint64 savehp = 5;
      case 5: {
        if (tag == 40) {
         parse_savehp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &savehp_)));
          set_has_savehp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_savesp;
        break;
      }

      // optional uint64 savesp = 6;
      case 6: {
        if (tag == 48) {
         parse_savesp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &savesp_)));
          set_has_savesp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_height;
        break;
      }

      // optional uint32 height = 7;
      case 7: {
        if (tag == 56) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_weight;
        break;
      }

      // optional uint32 weight = 8;
      case 8: {
        if (tag == 64) {
         parse_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_recipes;
        break;
      }

      // repeated uint32 recipes = 9;
      case 9: {
        if (tag == 72) {
         parse_recipes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 72, input, this->mutable_recipes())));
        } else if (tag == 74) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_recipes())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_recipes;
        if (input->ExpectTag(82)) goto parse_manualdata;
        break;
      }

      // repeated .Cmd.FoodManualData manualdata = 10;
      case 10: {
        if (tag == 82) {
         parse_manualdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_manualdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_manualdata;
        if (input->ExpectTag(90)) goto parse_iteminfo;
        break;
      }

      // repeated .Cmd.FoodItemInfo iteminfo = 11;
      case 11: {
        if (tag == 90) {
         parse_iteminfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_iteminfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_iteminfo;
        if (input->ExpectTag(96)) goto parse_satiety;
        break;
      }

      // optional uint32 satiety = 12;
      case 12: {
        if (tag == 96) {
         parse_satiety:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &satiety_)));
          set_has_satiety();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_last_cooked_ids;
        break;
      }

      // repeated uint32 last_cooked_ids = 13;
      case 13: {
        if (tag == 104) {
         parse_last_cooked_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 104, input, this->mutable_last_cooked_ids())));
        } else if (tag == 106) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_last_cooked_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_last_cooked_ids;
        if (input->ExpectTag(114)) goto parse_limitinfo;
        break;
      }

      // repeated .Cmd.FoodLimitInfo limitinfo = 14;
      case 14: {
        if (tag == 114) {
         parse_limitinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_limitinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_limitinfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobFood)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobFood)
  return false;
#undef DO_
}

void BlobFood::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobFood)
  // optional uint32 cookerexp = 1;
  if (has_cookerexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cookerexp(), output);
  }

  // optional uint32 cookerlv = 2;
  if (has_cookerlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cookerlv(), output);
  }

  // optional uint32 tasterexp = 3;
  if (has_tasterexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tasterexp(), output);
  }

  // optional uint32 tasterlv = 4;
  if (has_tasterlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->tasterlv(), output);
  }

  // optional uint64 savehp = 5;
  if (has_savehp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->savehp(), output);
  }

  // optional uint64 savesp = 6;
  if (has_savesp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->savesp(), output);
  }

  // optional uint32 height = 7;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->height(), output);
  }

  // optional uint32 weight = 8;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->weight(), output);
  }

  // repeated uint32 recipes = 9;
  for (int i = 0; i < this->recipes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      9, this->recipes(i), output);
  }

  // repeated .Cmd.FoodManualData manualdata = 10;
  for (int i = 0; i < this->manualdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->manualdata(i), output);
  }

  // repeated .Cmd.FoodItemInfo iteminfo = 11;
  for (int i = 0; i < this->iteminfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->iteminfo(i), output);
  }

  // optional uint32 satiety = 12;
  if (has_satiety()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->satiety(), output);
  }

  // repeated uint32 last_cooked_ids = 13;
  for (int i = 0; i < this->last_cooked_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      13, this->last_cooked_ids(i), output);
  }

  // repeated .Cmd.FoodLimitInfo limitinfo = 14;
  for (int i = 0; i < this->limitinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->limitinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobFood)
}

::google::protobuf::uint8* BlobFood::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobFood)
  // optional uint32 cookerexp = 1;
  if (has_cookerexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cookerexp(), target);
  }

  // optional uint32 cookerlv = 2;
  if (has_cookerlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cookerlv(), target);
  }

  // optional uint32 tasterexp = 3;
  if (has_tasterexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tasterexp(), target);
  }

  // optional uint32 tasterlv = 4;
  if (has_tasterlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->tasterlv(), target);
  }

  // optional uint64 savehp = 5;
  if (has_savehp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->savehp(), target);
  }

  // optional uint64 savesp = 6;
  if (has_savesp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->savesp(), target);
  }

  // optional uint32 height = 7;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->height(), target);
  }

  // optional uint32 weight = 8;
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->weight(), target);
  }

  // repeated uint32 recipes = 9;
  for (int i = 0; i < this->recipes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(9, this->recipes(i), target);
  }

  // repeated .Cmd.FoodManualData manualdata = 10;
  for (int i = 0; i < this->manualdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->manualdata(i), target);
  }

  // repeated .Cmd.FoodItemInfo iteminfo = 11;
  for (int i = 0; i < this->iteminfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->iteminfo(i), target);
  }

  // optional uint32 satiety = 12;
  if (has_satiety()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->satiety(), target);
  }

  // repeated uint32 last_cooked_ids = 13;
  for (int i = 0; i < this->last_cooked_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(13, this->last_cooked_ids(i), target);
  }

  // repeated .Cmd.FoodLimitInfo limitinfo = 14;
  for (int i = 0; i < this->limitinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->limitinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobFood)
  return target;
}

int BlobFood::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 cookerexp = 1;
    if (has_cookerexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cookerexp());
    }

    // optional uint32 cookerlv = 2;
    if (has_cookerlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cookerlv());
    }

    // optional uint32 tasterexp = 3;
    if (has_tasterexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tasterexp());
    }

    // optional uint32 tasterlv = 4;
    if (has_tasterlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tasterlv());
    }

    // optional uint64 savehp = 5;
    if (has_savehp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->savehp());
    }

    // optional uint64 savesp = 6;
    if (has_savesp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->savesp());
    }

    // optional uint32 height = 7;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

    // optional uint32 weight = 8;
    if (has_weight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weight());
    }

  }
  if (_has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    // optional uint32 satiety = 12;
    if (has_satiety()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->satiety());
    }

  }
  // repeated uint32 recipes = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->recipes_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->recipes(i));
    }
    total_size += 1 * this->recipes_size() + data_size;
  }

  // repeated .Cmd.FoodManualData manualdata = 10;
  total_size += 1 * this->manualdata_size();
  for (int i = 0; i < this->manualdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->manualdata(i));
  }

  // repeated .Cmd.FoodItemInfo iteminfo = 11;
  total_size += 1 * this->iteminfo_size();
  for (int i = 0; i < this->iteminfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->iteminfo(i));
  }

  // repeated uint32 last_cooked_ids = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->last_cooked_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->last_cooked_ids(i));
    }
    total_size += 1 * this->last_cooked_ids_size() + data_size;
  }

  // repeated .Cmd.FoodLimitInfo limitinfo = 14;
  total_size += 1 * this->limitinfo_size();
  for (int i = 0; i < this->limitinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->limitinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobFood::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobFood* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobFood*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobFood::MergeFrom(const BlobFood& from) {
  GOOGLE_CHECK_NE(&from, this);
  recipes_.MergeFrom(from.recipes_);
  manualdata_.MergeFrom(from.manualdata_);
  iteminfo_.MergeFrom(from.iteminfo_);
  last_cooked_ids_.MergeFrom(from.last_cooked_ids_);
  limitinfo_.MergeFrom(from.limitinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cookerexp()) {
      set_cookerexp(from.cookerexp());
    }
    if (from.has_cookerlv()) {
      set_cookerlv(from.cookerlv());
    }
    if (from.has_tasterexp()) {
      set_tasterexp(from.tasterexp());
    }
    if (from.has_tasterlv()) {
      set_tasterlv(from.tasterlv());
    }
    if (from.has_savehp()) {
      set_savehp(from.savehp());
    }
    if (from.has_savesp()) {
      set_savesp(from.savesp());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_weight()) {
      set_weight(from.weight());
    }
  }
  if (from._has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    if (from.has_satiety()) {
      set_satiety(from.satiety());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobFood::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobFood::CopyFrom(const BlobFood& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobFood::IsInitialized() const {

  return true;
}

void BlobFood::Swap(BlobFood* other) {
  if (other != this) {
    std::swap(cookerexp_, other->cookerexp_);
    std::swap(cookerlv_, other->cookerlv_);
    std::swap(tasterexp_, other->tasterexp_);
    std::swap(tasterlv_, other->tasterlv_);
    std::swap(savehp_, other->savehp_);
    std::swap(savesp_, other->savesp_);
    std::swap(height_, other->height_);
    std::swap(weight_, other->weight_);
    recipes_.Swap(&other->recipes_);
    manualdata_.Swap(&other->manualdata_);
    iteminfo_.Swap(&other->iteminfo_);
    std::swap(satiety_, other->satiety_);
    last_cooked_ids_.Swap(&other->last_cooked_ids_);
    limitinfo_.Swap(&other->limitinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobFood::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobFood_descriptor_;
  metadata.reflection = BlobFood_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobHighRefine::kDatasFieldNumber;
#endif  // !_MSC_VER

BlobHighRefine::BlobHighRefine()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobHighRefine)
}

void BlobHighRefine::InitAsDefaultInstance() {
}

BlobHighRefine::BlobHighRefine(const BlobHighRefine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobHighRefine)
}

void BlobHighRefine::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobHighRefine::~BlobHighRefine() {
  // @@protoc_insertion_point(destructor:Cmd.BlobHighRefine)
  SharedDtor();
}

void BlobHighRefine::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobHighRefine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobHighRefine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobHighRefine_descriptor_;
}

const BlobHighRefine& BlobHighRefine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobHighRefine* BlobHighRefine::default_instance_ = NULL;

BlobHighRefine* BlobHighRefine::New() const {
  return new BlobHighRefine;
}

void BlobHighRefine::Clear() {
  datas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobHighRefine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobHighRefine)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Cmd.HighRefineData datas = 1;
      case 1: {
        if (tag == 10) {
         parse_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_datas;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobHighRefine)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobHighRefine)
  return false;
#undef DO_
}

void BlobHighRefine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobHighRefine)
  // repeated .Cmd.HighRefineData datas = 1;
  for (int i = 0; i < this->datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->datas(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobHighRefine)
}

::google::protobuf::uint8* BlobHighRefine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobHighRefine)
  // repeated .Cmd.HighRefineData datas = 1;
  for (int i = 0; i < this->datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->datas(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobHighRefine)
  return target;
}

int BlobHighRefine::ByteSize() const {
  int total_size = 0;

  // repeated .Cmd.HighRefineData datas = 1;
  total_size += 1 * this->datas_size();
  for (int i = 0; i < this->datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobHighRefine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobHighRefine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobHighRefine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobHighRefine::MergeFrom(const BlobHighRefine& from) {
  GOOGLE_CHECK_NE(&from, this);
  datas_.MergeFrom(from.datas_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobHighRefine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobHighRefine::CopyFrom(const BlobHighRefine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobHighRefine::IsInitialized() const {

  return true;
}

void BlobHighRefine::Swap(BlobHighRefine* other) {
  if (other != this) {
    datas_.Swap(&other->datas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobHighRefine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobHighRefine_descriptor_;
  metadata.reflection = BlobHighRefine_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PackageData::kTypeFieldNumber;
const int PackageData::kItemsFieldNumber;
#endif  // !_MSC_VER

PackageData::PackageData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.PackageData)
}

void PackageData::InitAsDefaultInstance() {
}

PackageData::PackageData(const PackageData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.PackageData)
}

void PackageData::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PackageData::~PackageData() {
  // @@protoc_insertion_point(destructor:Cmd.PackageData)
  SharedDtor();
}

void PackageData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PackageData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PackageData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PackageData_descriptor_;
}

const PackageData& PackageData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

PackageData* PackageData::default_instance_ = NULL;

PackageData* PackageData::New() const {
  return new PackageData;
}

void PackageData::Clear() {
  type_ = 0;
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PackageData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.PackageData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.EPackType type = 1 [default = EPACKTYPE_MIN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EPackType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EPackType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_items;
        break;
      }

      // repeated .Cmd.ItemData items = 2;
      case 2: {
        if (tag == 18) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.PackageData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.PackageData)
  return false;
#undef DO_
}

void PackageData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.PackageData)
  // optional .Cmd.EPackType type = 1 [default = EPACKTYPE_MIN];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated .Cmd.ItemData items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.PackageData)
}

::google::protobuf::uint8* PackageData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.PackageData)
  // optional .Cmd.EPackType type = 1 [default = EPACKTYPE_MIN];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated .Cmd.ItemData items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.PackageData)
  return target;
}

int PackageData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.EPackType type = 1 [default = EPACKTYPE_MIN];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated .Cmd.ItemData items = 2;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PackageData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PackageData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PackageData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PackageData::MergeFrom(const PackageData& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PackageData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PackageData::CopyFrom(const PackageData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PackageData::IsInitialized() const {

  return true;
}

void PackageData::Swap(PackageData* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PackageData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PackageData_descriptor_;
  metadata.reflection = PackageData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemUseCount::kItemidFieldNumber;
const int ItemUseCount::kUsecountFieldNumber;
#endif  // !_MSC_VER

ItemUseCount::ItemUseCount()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ItemUseCount)
}

void ItemUseCount::InitAsDefaultInstance() {
}

ItemUseCount::ItemUseCount(const ItemUseCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ItemUseCount)
}

void ItemUseCount::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  usecount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemUseCount::~ItemUseCount() {
  // @@protoc_insertion_point(destructor:Cmd.ItemUseCount)
  SharedDtor();
}

void ItemUseCount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ItemUseCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemUseCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemUseCount_descriptor_;
}

const ItemUseCount& ItemUseCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

ItemUseCount* ItemUseCount::default_instance_ = NULL;

ItemUseCount* ItemUseCount::New() const {
  return new ItemUseCount;
}

void ItemUseCount::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ItemUseCount*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(itemid_, usecount_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemUseCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ItemUseCount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itemid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_usecount;
        break;
      }

      // optional uint32 usecount = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_usecount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usecount_)));
          set_has_usecount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ItemUseCount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ItemUseCount)
  return false;
#undef DO_
}

void ItemUseCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ItemUseCount)
  // optional uint32 itemid = 1 [default = 0];
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }

  // optional uint32 usecount = 2 [default = 0];
  if (has_usecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->usecount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ItemUseCount)
}

::google::protobuf::uint8* ItemUseCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ItemUseCount)
  // optional uint32 itemid = 1 [default = 0];
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }

  // optional uint32 usecount = 2 [default = 0];
  if (has_usecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->usecount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ItemUseCount)
  return target;
}

int ItemUseCount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 itemid = 1 [default = 0];
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 usecount = 2 [default = 0];
    if (has_usecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usecount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemUseCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemUseCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemUseCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemUseCount::MergeFrom(const ItemUseCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_usecount()) {
      set_usecount(from.usecount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemUseCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemUseCount::CopyFrom(const ItemUseCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemUseCount::IsInitialized() const {

  return true;
}

void ItemUseCount::Swap(ItemUseCount* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(usecount_, other->usecount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemUseCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemUseCount_descriptor_;
  metadata.reflection = ItemUseCount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemGetCount::kItemidFieldNumber;
const int ItemGetCount::kGetcountFieldNumber;
const int ItemGetCount::kSourceFieldNumber;
#endif  // !_MSC_VER

ItemGetCount::ItemGetCount()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ItemGetCount)
}

void ItemGetCount::InitAsDefaultInstance() {
}

ItemGetCount::ItemGetCount(const ItemGetCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ItemGetCount)
}

void ItemGetCount::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  getcount_ = 0u;
  source_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemGetCount::~ItemGetCount() {
  // @@protoc_insertion_point(destructor:Cmd.ItemGetCount)
  SharedDtor();
}

void ItemGetCount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ItemGetCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemGetCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemGetCount_descriptor_;
}

const ItemGetCount& ItemGetCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

ItemGetCount* ItemGetCount::default_instance_ = NULL;

ItemGetCount* ItemGetCount::New() const {
  return new ItemGetCount;
}

void ItemGetCount::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ItemGetCount*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(itemid_, source_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemGetCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ItemGetCount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itemid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_getcount;
        break;
      }

      // optional uint32 getcount = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_getcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &getcount_)));
          set_has_getcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_source;
        break;
      }

      // optional .Cmd.ESource source = 3 [default = ESOURCE_MIN];
      case 3: {
        if (tag == 24) {
         parse_source:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ESource_IsValid(value)) {
            set_source(static_cast< ::Cmd::ESource >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ItemGetCount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ItemGetCount)
  return false;
#undef DO_
}

void ItemGetCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ItemGetCount)
  // optional uint32 itemid = 1 [default = 0];
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }

  // optional uint32 getcount = 2 [default = 0];
  if (has_getcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->getcount(), output);
  }

  // optional .Cmd.ESource source = 3 [default = ESOURCE_MIN];
  if (has_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->source(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ItemGetCount)
}

::google::protobuf::uint8* ItemGetCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ItemGetCount)
  // optional uint32 itemid = 1 [default = 0];
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }

  // optional uint32 getcount = 2 [default = 0];
  if (has_getcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->getcount(), target);
  }

  // optional .Cmd.ESource source = 3 [default = ESOURCE_MIN];
  if (has_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->source(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ItemGetCount)
  return target;
}

int ItemGetCount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 itemid = 1 [default = 0];
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 getcount = 2 [default = 0];
    if (has_getcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->getcount());
    }

    // optional .Cmd.ESource source = 3 [default = ESOURCE_MIN];
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->source());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemGetCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemGetCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemGetCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemGetCount::MergeFrom(const ItemGetCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_getcount()) {
      set_getcount(from.getcount());
    }
    if (from.has_source()) {
      set_source(from.source());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemGetCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemGetCount::CopyFrom(const ItemGetCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemGetCount::IsInitialized() const {

  return true;
}

void ItemGetCount::Swap(ItemGetCount* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(getcount_, other->getcount_);
    std::swap(source_, other->source_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemGetCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemGetCount_descriptor_;
  metadata.reflection = ItemGetCount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RewardSafetyItem::kIdFieldNumber;
const int RewardSafetyItem::kExpiretimeFieldNumber;
const int RewardSafetyItem::kRollcountFieldNumber;
const int RewardSafetyItem::kRewardcountFieldNumber;
const int RewardSafetyItem::kNextsafetycountFieldNumber;
const int RewardSafetyItem::kVersionFieldNumber;
#endif  // !_MSC_VER

RewardSafetyItem::RewardSafetyItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.RewardSafetyItem)
}

void RewardSafetyItem::InitAsDefaultInstance() {
}

RewardSafetyItem::RewardSafetyItem(const RewardSafetyItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.RewardSafetyItem)
}

void RewardSafetyItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  expiretime_ = 0u;
  rollcount_ = 0u;
  rewardcount_ = 0u;
  nextsafetycount_ = 0u;
  version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RewardSafetyItem::~RewardSafetyItem() {
  // @@protoc_insertion_point(destructor:Cmd.RewardSafetyItem)
  SharedDtor();
}

void RewardSafetyItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RewardSafetyItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RewardSafetyItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RewardSafetyItem_descriptor_;
}

const RewardSafetyItem& RewardSafetyItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

RewardSafetyItem* RewardSafetyItem::default_instance_ = NULL;

RewardSafetyItem* RewardSafetyItem::New() const {
  return new RewardSafetyItem;
}

void RewardSafetyItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RewardSafetyItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(id_, version_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RewardSafetyItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.RewardSafetyItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_expiretime;
        break;
      }

      // optional uint32 expiretime = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_expiretime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expiretime_)));
          set_has_expiretime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_rollcount;
        break;
      }

      // optional uint32 rollcount = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_rollcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rollcount_)));
          set_has_rollcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_rewardcount;
        break;
      }

      // optional uint32 rewardcount = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_rewardcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rewardcount_)));
          set_has_rewardcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_nextsafetycount;
        break;
      }

      // optional uint32 nextsafetycount = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_nextsafetycount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nextsafetycount_)));
          set_has_nextsafetycount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_version;
        break;
      }

      // optional uint32 version = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.RewardSafetyItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.RewardSafetyItem)
  return false;
#undef DO_
}

void RewardSafetyItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.RewardSafetyItem)
  // optional uint32 id = 1 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 expiretime = 2 [default = 0];
  if (has_expiretime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->expiretime(), output);
  }

  // optional uint32 rollcount = 3 [default = 0];
  if (has_rollcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rollcount(), output);
  }

  // optional uint32 rewardcount = 4 [default = 0];
  if (has_rewardcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->rewardcount(), output);
  }

  // optional uint32 nextsafetycount = 5 [default = 0];
  if (has_nextsafetycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->nextsafetycount(), output);
  }

  // optional uint32 version = 6 [default = 0];
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.RewardSafetyItem)
}

::google::protobuf::uint8* RewardSafetyItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.RewardSafetyItem)
  // optional uint32 id = 1 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 expiretime = 2 [default = 0];
  if (has_expiretime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->expiretime(), target);
  }

  // optional uint32 rollcount = 3 [default = 0];
  if (has_rollcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rollcount(), target);
  }

  // optional uint32 rewardcount = 4 [default = 0];
  if (has_rewardcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->rewardcount(), target);
  }

  // optional uint32 nextsafetycount = 5 [default = 0];
  if (has_nextsafetycount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->nextsafetycount(), target);
  }

  // optional uint32 version = 6 [default = 0];
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.RewardSafetyItem)
  return target;
}

int RewardSafetyItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 expiretime = 2 [default = 0];
    if (has_expiretime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expiretime());
    }

    // optional uint32 rollcount = 3 [default = 0];
    if (has_rollcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rollcount());
    }

    // optional uint32 rewardcount = 4 [default = 0];
    if (has_rewardcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rewardcount());
    }

    // optional uint32 nextsafetycount = 5 [default = 0];
    if (has_nextsafetycount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nextsafetycount());
    }

    // optional uint32 version = 6 [default = 0];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RewardSafetyItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RewardSafetyItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RewardSafetyItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RewardSafetyItem::MergeFrom(const RewardSafetyItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_expiretime()) {
      set_expiretime(from.expiretime());
    }
    if (from.has_rollcount()) {
      set_rollcount(from.rollcount());
    }
    if (from.has_rewardcount()) {
      set_rewardcount(from.rewardcount());
    }
    if (from.has_nextsafetycount()) {
      set_nextsafetycount(from.nextsafetycount());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RewardSafetyItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RewardSafetyItem::CopyFrom(const RewardSafetyItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewardSafetyItem::IsInitialized() const {

  return true;
}

void RewardSafetyItem::Swap(RewardSafetyItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(expiretime_, other->expiretime_);
    std::swap(rollcount_, other->rollcount_);
    std::swap(rewardcount_, other->rewardcount_);
    std::swap(nextsafetycount_, other->nextsafetycount_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RewardSafetyItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RewardSafetyItem_descriptor_;
  metadata.reflection = RewardSafetyItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobPack::kDatasFieldNumber;
const int BlobPack::kHintitemsFieldNumber;
const int BlobPack::kFrostItemInfosFieldNumber;
const int BlobPack::kItemuseFieldNumber;
const int BlobPack::kOnceitemsFieldNumber;
const int BlobPack::kItemgetFieldNumber;
const int BlobPack::kArrowidFieldNumber;
const int BlobPack::kVersionFieldNumber;
const int BlobPack::kEquipposdatasFieldNumber;
const int BlobPack::kRewardsafetyitemsFieldNumber;
#endif  // !_MSC_VER

BlobPack::BlobPack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobPack)
}

void BlobPack::InitAsDefaultInstance() {
}

BlobPack::BlobPack(const BlobPack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobPack)
}

void BlobPack::SharedCtor() {
  _cached_size_ = 0;
  arrowid_ = 0u;
  version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobPack::~BlobPack() {
  // @@protoc_insertion_point(destructor:Cmd.BlobPack)
  SharedDtor();
}

void BlobPack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobPack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobPack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobPack_descriptor_;
}

const BlobPack& BlobPack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobPack* BlobPack::default_instance_ = NULL;

BlobPack* BlobPack::New() const {
  return new BlobPack;
}

void BlobPack::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BlobPack*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(arrowid_, version_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  datas_.Clear();
  hintitems_.Clear();
  frost_item_infos_.Clear();
  itemuse_.Clear();
  onceitems_.Clear();
  itemget_.Clear();
  equipposdatas_.Clear();
  rewardsafetyitems_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobPack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobPack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Cmd.PackageData datas = 1;
      case 1: {
        if (tag == 10) {
         parse_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_datas;
        if (input->ExpectTag(16)) goto parse_hintitems;
        break;
      }

      // repeated uint32 hintitems = 2;
      case 2: {
        if (tag == 16) {
         parse_hintitems:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_hintitems())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hintitems())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_hintitems;
        if (input->ExpectTag(26)) goto parse_frost_item_infos;
        break;
      }

      // repeated .Cmd.FrostItemInfo frost_item_infos = 3;
      case 3: {
        if (tag == 26) {
         parse_frost_item_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_frost_item_infos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_frost_item_infos;
        if (input->ExpectTag(34)) goto parse_itemuse;
        break;
      }

      // repeated .Cmd.ItemUseCount itemuse = 4;
      case 4: {
        if (tag == 34) {
         parse_itemuse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemuse()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_itemuse;
        if (input->ExpectTag(40)) goto parse_onceitems;
        break;
      }

      // repeated uint32 onceitems = 5;
      case 5: {
        if (tag == 40) {
         parse_onceitems:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_onceitems())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_onceitems())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_onceitems;
        if (input->ExpectTag(50)) goto parse_itemget;
        break;
      }

      // repeated .Cmd.ItemGetCount itemget = 6;
      case 6: {
        if (tag == 50) {
         parse_itemget:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemget()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_itemget;
        if (input->ExpectTag(64)) goto parse_arrowid;
        break;
      }

      // optional uint32 arrowid = 8;
      case 8: {
        if (tag == 64) {
         parse_arrowid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &arrowid_)));
          set_has_arrowid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_version;
        break;
      }

      // optional uint32 version = 9 [default = 0];
      case 9: {
        if (tag == 72) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_equipposdatas;
        break;
      }

      // repeated .Cmd.EquipPosData equipposdatas = 10;
      case 10: {
        if (tag == 82) {
         parse_equipposdatas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipposdatas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_equipposdatas;
        if (input->ExpectTag(90)) goto parse_rewardsafetyitems;
        break;
      }

      // repeated .Cmd.RewardSafetyItem rewardsafetyitems = 11;
      case 11: {
        if (tag == 90) {
         parse_rewardsafetyitems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardsafetyitems()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_rewardsafetyitems;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobPack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobPack)
  return false;
#undef DO_
}

void BlobPack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobPack)
  // repeated .Cmd.PackageData datas = 1;
  for (int i = 0; i < this->datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->datas(i), output);
  }

  // repeated uint32 hintitems = 2;
  for (int i = 0; i < this->hintitems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->hintitems(i), output);
  }

  // repeated .Cmd.FrostItemInfo frost_item_infos = 3;
  for (int i = 0; i < this->frost_item_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->frost_item_infos(i), output);
  }

  // repeated .Cmd.ItemUseCount itemuse = 4;
  for (int i = 0; i < this->itemuse_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->itemuse(i), output);
  }

  // repeated uint32 onceitems = 5;
  for (int i = 0; i < this->onceitems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->onceitems(i), output);
  }

  // repeated .Cmd.ItemGetCount itemget = 6;
  for (int i = 0; i < this->itemget_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->itemget(i), output);
  }

  // optional uint32 arrowid = 8;
  if (has_arrowid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->arrowid(), output);
  }

  // optional uint32 version = 9 [default = 0];
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->version(), output);
  }

  // repeated .Cmd.EquipPosData equipposdatas = 10;
  for (int i = 0; i < this->equipposdatas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->equipposdatas(i), output);
  }

  // repeated .Cmd.RewardSafetyItem rewardsafetyitems = 11;
  for (int i = 0; i < this->rewardsafetyitems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->rewardsafetyitems(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobPack)
}

::google::protobuf::uint8* BlobPack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobPack)
  // repeated .Cmd.PackageData datas = 1;
  for (int i = 0; i < this->datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->datas(i), target);
  }

  // repeated uint32 hintitems = 2;
  for (int i = 0; i < this->hintitems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->hintitems(i), target);
  }

  // repeated .Cmd.FrostItemInfo frost_item_infos = 3;
  for (int i = 0; i < this->frost_item_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->frost_item_infos(i), target);
  }

  // repeated .Cmd.ItemUseCount itemuse = 4;
  for (int i = 0; i < this->itemuse_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->itemuse(i), target);
  }

  // repeated uint32 onceitems = 5;
  for (int i = 0; i < this->onceitems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->onceitems(i), target);
  }

  // repeated .Cmd.ItemGetCount itemget = 6;
  for (int i = 0; i < this->itemget_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->itemget(i), target);
  }

  // optional uint32 arrowid = 8;
  if (has_arrowid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->arrowid(), target);
  }

  // optional uint32 version = 9 [default = 0];
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->version(), target);
  }

  // repeated .Cmd.EquipPosData equipposdatas = 10;
  for (int i = 0; i < this->equipposdatas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->equipposdatas(i), target);
  }

  // repeated .Cmd.RewardSafetyItem rewardsafetyitems = 11;
  for (int i = 0; i < this->rewardsafetyitems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->rewardsafetyitems(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobPack)
  return target;
}

int BlobPack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[6 / 32] & (0xffu << (6 % 32))) {
    // optional uint32 arrowid = 8;
    if (has_arrowid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->arrowid());
    }

    // optional uint32 version = 9 [default = 0];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

  }
  // repeated .Cmd.PackageData datas = 1;
  total_size += 1 * this->datas_size();
  for (int i = 0; i < this->datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datas(i));
  }

  // repeated uint32 hintitems = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->hintitems_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->hintitems(i));
    }
    total_size += 1 * this->hintitems_size() + data_size;
  }

  // repeated .Cmd.FrostItemInfo frost_item_infos = 3;
  total_size += 1 * this->frost_item_infos_size();
  for (int i = 0; i < this->frost_item_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->frost_item_infos(i));
  }

  // repeated .Cmd.ItemUseCount itemuse = 4;
  total_size += 1 * this->itemuse_size();
  for (int i = 0; i < this->itemuse_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemuse(i));
  }

  // repeated uint32 onceitems = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->onceitems_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->onceitems(i));
    }
    total_size += 1 * this->onceitems_size() + data_size;
  }

  // repeated .Cmd.ItemGetCount itemget = 6;
  total_size += 1 * this->itemget_size();
  for (int i = 0; i < this->itemget_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemget(i));
  }

  // repeated .Cmd.EquipPosData equipposdatas = 10;
  total_size += 1 * this->equipposdatas_size();
  for (int i = 0; i < this->equipposdatas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipposdatas(i));
  }

  // repeated .Cmd.RewardSafetyItem rewardsafetyitems = 11;
  total_size += 1 * this->rewardsafetyitems_size();
  for (int i = 0; i < this->rewardsafetyitems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardsafetyitems(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobPack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobPack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobPack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobPack::MergeFrom(const BlobPack& from) {
  GOOGLE_CHECK_NE(&from, this);
  datas_.MergeFrom(from.datas_);
  hintitems_.MergeFrom(from.hintitems_);
  frost_item_infos_.MergeFrom(from.frost_item_infos_);
  itemuse_.MergeFrom(from.itemuse_);
  onceitems_.MergeFrom(from.onceitems_);
  itemget_.MergeFrom(from.itemget_);
  equipposdatas_.MergeFrom(from.equipposdatas_);
  rewardsafetyitems_.MergeFrom(from.rewardsafetyitems_);
  if (from._has_bits_[6 / 32] & (0xffu << (6 % 32))) {
    if (from.has_arrowid()) {
      set_arrowid(from.arrowid());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobPack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobPack::CopyFrom(const BlobPack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobPack::IsInitialized() const {

  return true;
}

void BlobPack::Swap(BlobPack* other) {
  if (other != this) {
    datas_.Swap(&other->datas_);
    hintitems_.Swap(&other->hintitems_);
    frost_item_infos_.Swap(&other->frost_item_infos_);
    itemuse_.Swap(&other->itemuse_);
    onceitems_.Swap(&other->onceitems_);
    itemget_.Swap(&other->itemget_);
    std::swap(arrowid_, other->arrowid_);
    std::swap(version_, other->version_);
    equipposdatas_.Swap(&other->equipposdatas_);
    rewardsafetyitems_.Swap(&other->rewardsafetyitems_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobPack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobPack_descriptor_;
  metadata.reflection = BlobPack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MapQuest::kMapidFieldNumber;
const int MapQuest::kQuestidsFieldNumber;
#endif  // !_MSC_VER

MapQuest::MapQuest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.MapQuest)
}

void MapQuest::InitAsDefaultInstance() {
}

MapQuest::MapQuest(const MapQuest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.MapQuest)
}

void MapQuest::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapQuest::~MapQuest() {
  // @@protoc_insertion_point(destructor:Cmd.MapQuest)
  SharedDtor();
}

void MapQuest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MapQuest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapQuest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapQuest_descriptor_;
}

const MapQuest& MapQuest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

MapQuest* MapQuest::default_instance_ = NULL;

MapQuest* MapQuest::New() const {
  return new MapQuest;
}

void MapQuest::Clear() {
  mapid_ = 0u;
  questids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MapQuest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.MapQuest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mapid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_questids;
        break;
      }

      // repeated uint32 questids = 2;
      case 2: {
        if (tag == 16) {
         parse_questids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_questids())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_questids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_questids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.MapQuest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.MapQuest)
  return false;
#undef DO_
}

void MapQuest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.MapQuest)
  // optional uint32 mapid = 1 [default = 0];
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mapid(), output);
  }

  // repeated uint32 questids = 2;
  for (int i = 0; i < this->questids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->questids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.MapQuest)
}

::google::protobuf::uint8* MapQuest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.MapQuest)
  // optional uint32 mapid = 1 [default = 0];
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mapid(), target);
  }

  // repeated uint32 questids = 2;
  for (int i = 0; i < this->questids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->questids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.MapQuest)
  return target;
}

int MapQuest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 mapid = 1 [default = 0];
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

  }
  // repeated uint32 questids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->questids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->questids(i));
    }
    total_size += 1 * this->questids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapQuest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapQuest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MapQuest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MapQuest::MergeFrom(const MapQuest& from) {
  GOOGLE_CHECK_NE(&from, this);
  questids_.MergeFrom(from.questids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MapQuest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapQuest::CopyFrom(const MapQuest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapQuest::IsInitialized() const {

  return true;
}

void MapQuest::Swap(MapQuest* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    questids_.Swap(&other->questids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MapQuest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapQuest_descriptor_;
  metadata.reflection = MapQuest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobQuestPuzzle::kPuzzlesFieldNumber;
#endif  // !_MSC_VER

BlobQuestPuzzle::BlobQuestPuzzle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobQuestPuzzle)
}

void BlobQuestPuzzle::InitAsDefaultInstance() {
}

BlobQuestPuzzle::BlobQuestPuzzle(const BlobQuestPuzzle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobQuestPuzzle)
}

void BlobQuestPuzzle::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobQuestPuzzle::~BlobQuestPuzzle() {
  // @@protoc_insertion_point(destructor:Cmd.BlobQuestPuzzle)
  SharedDtor();
}

void BlobQuestPuzzle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobQuestPuzzle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobQuestPuzzle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobQuestPuzzle_descriptor_;
}

const BlobQuestPuzzle& BlobQuestPuzzle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobQuestPuzzle* BlobQuestPuzzle::default_instance_ = NULL;

BlobQuestPuzzle* BlobQuestPuzzle::New() const {
  return new BlobQuestPuzzle;
}

void BlobQuestPuzzle::Clear() {
  puzzles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobQuestPuzzle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobQuestPuzzle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Cmd.QuestPuzzle puzzles = 1;
      case 1: {
        if (tag == 10) {
         parse_puzzles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_puzzles()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_puzzles;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobQuestPuzzle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobQuestPuzzle)
  return false;
#undef DO_
}

void BlobQuestPuzzle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobQuestPuzzle)
  // repeated .Cmd.QuestPuzzle puzzles = 1;
  for (int i = 0; i < this->puzzles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->puzzles(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobQuestPuzzle)
}

::google::protobuf::uint8* BlobQuestPuzzle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobQuestPuzzle)
  // repeated .Cmd.QuestPuzzle puzzles = 1;
  for (int i = 0; i < this->puzzles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->puzzles(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobQuestPuzzle)
  return target;
}

int BlobQuestPuzzle::ByteSize() const {
  int total_size = 0;

  // repeated .Cmd.QuestPuzzle puzzles = 1;
  total_size += 1 * this->puzzles_size();
  for (int i = 0; i < this->puzzles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->puzzles(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobQuestPuzzle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobQuestPuzzle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobQuestPuzzle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobQuestPuzzle::MergeFrom(const BlobQuestPuzzle& from) {
  GOOGLE_CHECK_NE(&from, this);
  puzzles_.MergeFrom(from.puzzles_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobQuestPuzzle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobQuestPuzzle::CopyFrom(const BlobQuestPuzzle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobQuestPuzzle::IsInitialized() const {

  return true;
}

void BlobQuestPuzzle::Swap(BlobQuestPuzzle* other) {
  if (other != this) {
    puzzles_.Swap(&other->puzzles_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobQuestPuzzle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobQuestPuzzle_descriptor_;
  metadata.reflection = BlobQuestPuzzle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobQuest::kAcceptFieldNumber;
const int BlobQuest::kSubmitFieldNumber;
const int BlobQuest::kDetailFieldNumber;
const int BlobQuest::kDailycountFieldNumber;
const int BlobQuest::kDailytcountFieldNumber;
const int BlobQuest::kDailyexpFieldNumber;
const int BlobQuest::kDailylevelFieldNumber;
const int BlobQuest::kDailygiftFieldNumber;
const int BlobQuest::kLastcalcdailycounttimeFieldNumber;
const int BlobQuest::kMapquestFieldNumber;
const int BlobQuest::kMaprandquestFieldNumber;
const int BlobQuest::kVarrewardFieldNumber;
const int BlobQuest::kForbidquestFieldNumber;
const int BlobQuest::kProcessAccFieldNumber;
const int BlobQuest::kPuzzleFieldNumber;
#endif  // !_MSC_VER

BlobQuest::BlobQuest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobQuest)
}

void BlobQuest::InitAsDefaultInstance() {
  puzzle_ = const_cast< ::Cmd::BlobQuestPuzzle*>(&::Cmd::BlobQuestPuzzle::default_instance());
}

BlobQuest::BlobQuest(const BlobQuest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobQuest)
}

void BlobQuest::SharedCtor() {
  _cached_size_ = 0;
  dailycount_ = 0u;
  dailytcount_ = 0u;
  dailyexp_ = 0u;
  dailylevel_ = 0u;
  lastcalcdailycounttime_ = 0u;
  puzzle_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobQuest::~BlobQuest() {
  // @@protoc_insertion_point(destructor:Cmd.BlobQuest)
  SharedDtor();
}

void BlobQuest::SharedDtor() {
  if (this != default_instance_) {
    delete puzzle_;
  }
}

void BlobQuest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobQuest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobQuest_descriptor_;
}

const BlobQuest& BlobQuest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobQuest* BlobQuest::default_instance_ = NULL;

BlobQuest* BlobQuest::New() const {
  return new BlobQuest;
}

void BlobQuest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BlobQuest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(dailycount_, dailylevel_);
  if (_has_bits_[8 / 32] & 16640) {
    lastcalcdailycounttime_ = 0u;
    if (has_puzzle()) {
      if (puzzle_ != NULL) puzzle_->::Cmd::BlobQuestPuzzle::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  accept_.Clear();
  submit_.Clear();
  detail_.Clear();
  dailygift_.Clear();
  mapquest_.Clear();
  maprandquest_.Clear();
  varreward_.Clear();
  forbidquest_.Clear();
  process_acc_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobQuest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobQuest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Cmd.QuestData accept = 1;
      case 1: {
        if (tag == 10) {
         parse_accept:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_accept()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_accept;
        if (input->ExpectTag(18)) goto parse_submit;
        break;
      }

      // repeated .Cmd.QuestData submit = 2;
      case 2: {
        if (tag == 18) {
         parse_submit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_submit()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_submit;
        if (input->ExpectTag(26)) goto parse_detail;
        break;
      }

      // repeated .Cmd.QuestDetail detail = 3;
      case 3: {
        if (tag == 26) {
         parse_detail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_detail()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_detail;
        if (input->ExpectTag(32)) goto parse_dailycount;
        break;
      }

      // optional uint32 dailycount = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_dailycount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dailycount_)));
          set_has_dailycount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_dailytcount;
        break;
      }

      // optional uint32 dailytcount = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_dailytcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dailytcount_)));
          set_has_dailytcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_dailyexp;
        break;
      }

      // optional uint32 dailyexp = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_dailyexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dailyexp_)));
          set_has_dailyexp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_dailylevel;
        break;
      }

      // optional uint32 dailylevel = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_dailylevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dailylevel_)));
          set_has_dailylevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_dailygift;
        break;
      }

      // repeated uint32 dailygift = 8;
      case 8: {
        if (tag == 64) {
         parse_dailygift:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64, input, this->mutable_dailygift())));
        } else if (tag == 66) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_dailygift())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_dailygift;
        if (input->ExpectTag(72)) goto parse_lastcalcdailycounttime;
        break;
      }

      // optional uint32 lastcalcdailycounttime = 9 [default = 0];
      case 9: {
        if (tag == 72) {
         parse_lastcalcdailycounttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastcalcdailycounttime_)));
          set_has_lastcalcdailycounttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_mapquest;
        break;
      }

      // repeated .Cmd.MapQuest mapquest = 10;
      case 10: {
        if (tag == 82) {
         parse_mapquest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mapquest()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_mapquest;
        if (input->ExpectTag(88)) goto parse_varreward;
        break;
      }

      // repeated uint32 varreward = 11;
      case 11: {
        if (tag == 88) {
         parse_varreward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 88, input, this->mutable_varreward())));
        } else if (tag == 90) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_varreward())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_varreward;
        if (input->ExpectTag(96)) goto parse_forbidquest;
        break;
      }

      // repeated uint32 forbidquest = 12;
      case 12: {
        if (tag == 96) {
         parse_forbidquest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 96, input, this->mutable_forbidquest())));
        } else if (tag == 98) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_forbidquest())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_forbidquest;
        if (input->ExpectTag(104)) goto parse_process_acc;
        break;
      }

      // repeated uint32 process_acc = 13;
      case 13: {
        if (tag == 104) {
         parse_process_acc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 104, input, this->mutable_process_acc())));
        } else if (tag == 106) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_process_acc())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_process_acc;
        if (input->ExpectTag(114)) goto parse_maprandquest;
        break;
      }

      // repeated .Cmd.MapQuest maprandquest = 14;
      case 14: {
        if (tag == 114) {
         parse_maprandquest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_maprandquest()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_maprandquest;
        if (input->ExpectTag(122)) goto parse_puzzle;
        break;
      }

      // optional .Cmd.BlobQuestPuzzle puzzle = 15;
      case 15: {
        if (tag == 122) {
         parse_puzzle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_puzzle()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobQuest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobQuest)
  return false;
#undef DO_
}

void BlobQuest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobQuest)
  // repeated .Cmd.QuestData accept = 1;
  for (int i = 0; i < this->accept_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->accept(i), output);
  }

  // repeated .Cmd.QuestData submit = 2;
  for (int i = 0; i < this->submit_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->submit(i), output);
  }

  // repeated .Cmd.QuestDetail detail = 3;
  for (int i = 0; i < this->detail_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->detail(i), output);
  }

  // optional uint32 dailycount = 4 [default = 0];
  if (has_dailycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dailycount(), output);
  }

  // optional uint32 dailytcount = 5 [default = 0];
  if (has_dailytcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->dailytcount(), output);
  }

  // optional uint32 dailyexp = 6 [default = 0];
  if (has_dailyexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->dailyexp(), output);
  }

  // optional uint32 dailylevel = 7 [default = 0];
  if (has_dailylevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->dailylevel(), output);
  }

  // repeated uint32 dailygift = 8;
  for (int i = 0; i < this->dailygift_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->dailygift(i), output);
  }

  // optional uint32 lastcalcdailycounttime = 9 [default = 0];
  if (has_lastcalcdailycounttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->lastcalcdailycounttime(), output);
  }

  // repeated .Cmd.MapQuest mapquest = 10;
  for (int i = 0; i < this->mapquest_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->mapquest(i), output);
  }

  // repeated uint32 varreward = 11;
  for (int i = 0; i < this->varreward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      11, this->varreward(i), output);
  }

  // repeated uint32 forbidquest = 12;
  for (int i = 0; i < this->forbidquest_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      12, this->forbidquest(i), output);
  }

  // repeated uint32 process_acc = 13;
  for (int i = 0; i < this->process_acc_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      13, this->process_acc(i), output);
  }

  // repeated .Cmd.MapQuest maprandquest = 14;
  for (int i = 0; i < this->maprandquest_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->maprandquest(i), output);
  }

  // optional .Cmd.BlobQuestPuzzle puzzle = 15;
  if (has_puzzle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->puzzle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobQuest)
}

::google::protobuf::uint8* BlobQuest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobQuest)
  // repeated .Cmd.QuestData accept = 1;
  for (int i = 0; i < this->accept_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->accept(i), target);
  }

  // repeated .Cmd.QuestData submit = 2;
  for (int i = 0; i < this->submit_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->submit(i), target);
  }

  // repeated .Cmd.QuestDetail detail = 3;
  for (int i = 0; i < this->detail_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->detail(i), target);
  }

  // optional uint32 dailycount = 4 [default = 0];
  if (has_dailycount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->dailycount(), target);
  }

  // optional uint32 dailytcount = 5 [default = 0];
  if (has_dailytcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->dailytcount(), target);
  }

  // optional uint32 dailyexp = 6 [default = 0];
  if (has_dailyexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->dailyexp(), target);
  }

  // optional uint32 dailylevel = 7 [default = 0];
  if (has_dailylevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->dailylevel(), target);
  }

  // repeated uint32 dailygift = 8;
  for (int i = 0; i < this->dailygift_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(8, this->dailygift(i), target);
  }

  // optional uint32 lastcalcdailycounttime = 9 [default = 0];
  if (has_lastcalcdailycounttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->lastcalcdailycounttime(), target);
  }

  // repeated .Cmd.MapQuest mapquest = 10;
  for (int i = 0; i < this->mapquest_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->mapquest(i), target);
  }

  // repeated uint32 varreward = 11;
  for (int i = 0; i < this->varreward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(11, this->varreward(i), target);
  }

  // repeated uint32 forbidquest = 12;
  for (int i = 0; i < this->forbidquest_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(12, this->forbidquest(i), target);
  }

  // repeated uint32 process_acc = 13;
  for (int i = 0; i < this->process_acc_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(13, this->process_acc(i), target);
  }

  // repeated .Cmd.MapQuest maprandquest = 14;
  for (int i = 0; i < this->maprandquest_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->maprandquest(i), target);
  }

  // optional .Cmd.BlobQuestPuzzle puzzle = 15;
  if (has_puzzle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->puzzle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobQuest)
  return target;
}

int BlobQuest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    // optional uint32 dailycount = 4 [default = 0];
    if (has_dailycount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dailycount());
    }

    // optional uint32 dailytcount = 5 [default = 0];
    if (has_dailytcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dailytcount());
    }

    // optional uint32 dailyexp = 6 [default = 0];
    if (has_dailyexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dailyexp());
    }

    // optional uint32 dailylevel = 7 [default = 0];
    if (has_dailylevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dailylevel());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 lastcalcdailycounttime = 9 [default = 0];
    if (has_lastcalcdailycounttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastcalcdailycounttime());
    }

    // optional .Cmd.BlobQuestPuzzle puzzle = 15;
    if (has_puzzle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->puzzle());
    }

  }
  // repeated .Cmd.QuestData accept = 1;
  total_size += 1 * this->accept_size();
  for (int i = 0; i < this->accept_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->accept(i));
  }

  // repeated .Cmd.QuestData submit = 2;
  total_size += 1 * this->submit_size();
  for (int i = 0; i < this->submit_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->submit(i));
  }

  // repeated .Cmd.QuestDetail detail = 3;
  total_size += 1 * this->detail_size();
  for (int i = 0; i < this->detail_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->detail(i));
  }

  // repeated uint32 dailygift = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->dailygift_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->dailygift(i));
    }
    total_size += 1 * this->dailygift_size() + data_size;
  }

  // repeated .Cmd.MapQuest mapquest = 10;
  total_size += 1 * this->mapquest_size();
  for (int i = 0; i < this->mapquest_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mapquest(i));
  }

  // repeated .Cmd.MapQuest maprandquest = 14;
  total_size += 1 * this->maprandquest_size();
  for (int i = 0; i < this->maprandquest_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->maprandquest(i));
  }

  // repeated uint32 varreward = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->varreward_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->varreward(i));
    }
    total_size += 1 * this->varreward_size() + data_size;
  }

  // repeated uint32 forbidquest = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->forbidquest_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->forbidquest(i));
    }
    total_size += 1 * this->forbidquest_size() + data_size;
  }

  // repeated uint32 process_acc = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->process_acc_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->process_acc(i));
    }
    total_size += 1 * this->process_acc_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobQuest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobQuest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobQuest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobQuest::MergeFrom(const BlobQuest& from) {
  GOOGLE_CHECK_NE(&from, this);
  accept_.MergeFrom(from.accept_);
  submit_.MergeFrom(from.submit_);
  detail_.MergeFrom(from.detail_);
  dailygift_.MergeFrom(from.dailygift_);
  mapquest_.MergeFrom(from.mapquest_);
  maprandquest_.MergeFrom(from.maprandquest_);
  varreward_.MergeFrom(from.varreward_);
  forbidquest_.MergeFrom(from.forbidquest_);
  process_acc_.MergeFrom(from.process_acc_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from.has_dailycount()) {
      set_dailycount(from.dailycount());
    }
    if (from.has_dailytcount()) {
      set_dailytcount(from.dailytcount());
    }
    if (from.has_dailyexp()) {
      set_dailyexp(from.dailyexp());
    }
    if (from.has_dailylevel()) {
      set_dailylevel(from.dailylevel());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_lastcalcdailycounttime()) {
      set_lastcalcdailycounttime(from.lastcalcdailycounttime());
    }
    if (from.has_puzzle()) {
      mutable_puzzle()->::Cmd::BlobQuestPuzzle::MergeFrom(from.puzzle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobQuest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobQuest::CopyFrom(const BlobQuest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobQuest::IsInitialized() const {

  return true;
}

void BlobQuest::Swap(BlobQuest* other) {
  if (other != this) {
    accept_.Swap(&other->accept_);
    submit_.Swap(&other->submit_);
    detail_.Swap(&other->detail_);
    std::swap(dailycount_, other->dailycount_);
    std::swap(dailytcount_, other->dailytcount_);
    std::swap(dailyexp_, other->dailyexp_);
    std::swap(dailylevel_, other->dailylevel_);
    dailygift_.Swap(&other->dailygift_);
    std::swap(lastcalcdailycounttime_, other->lastcalcdailycounttime_);
    mapquest_.Swap(&other->mapquest_);
    maprandquest_.Swap(&other->maprandquest_);
    varreward_.Swap(&other->varreward_);
    forbidquest_.Swap(&other->forbidquest_);
    process_acc_.Swap(&other->process_acc_);
    std::swap(puzzle_, other->puzzle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobQuest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobQuest_descriptor_;
  metadata.reflection = BlobQuest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobTitle::kCurTitleFieldNumber;
const int BlobTitle::kDatasFieldNumber;
const int BlobTitle::kCurAchieveTitleFieldNumber;
#endif  // !_MSC_VER

BlobTitle::BlobTitle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobTitle)
}

void BlobTitle::InitAsDefaultInstance() {
}

BlobTitle::BlobTitle(const BlobTitle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobTitle)
}

void BlobTitle::SharedCtor() {
  _cached_size_ = 0;
  curtitle_ = 0u;
  curachievetitle_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobTitle::~BlobTitle() {
  // @@protoc_insertion_point(destructor:Cmd.BlobTitle)
  SharedDtor();
}

void BlobTitle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobTitle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobTitle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobTitle_descriptor_;
}

const BlobTitle& BlobTitle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobTitle* BlobTitle::default_instance_ = NULL;

BlobTitle* BlobTitle::New() const {
  return new BlobTitle;
}

void BlobTitle::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BlobTitle*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(curtitle_, curachievetitle_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  datas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobTitle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobTitle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 curTitle = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curtitle_)));
          set_has_curtitle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_datas;
        break;
      }

      // repeated .Cmd.TitleData datas = 2;
      case 2: {
        if (tag == 18) {
         parse_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_datas;
        if (input->ExpectTag(24)) goto parse_curAchieveTitle;
        break;
      }

      // optional uint32 curAchieveTitle = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_curAchieveTitle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curachievetitle_)));
          set_has_curachievetitle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobTitle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobTitle)
  return false;
#undef DO_
}

void BlobTitle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobTitle)
  // optional uint32 curTitle = 1 [default = 0];
  if (has_curtitle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->curtitle(), output);
  }

  // repeated .Cmd.TitleData datas = 2;
  for (int i = 0; i < this->datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->datas(i), output);
  }

  // optional uint32 curAchieveTitle = 3 [default = 0];
  if (has_curachievetitle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->curachievetitle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobTitle)
}

::google::protobuf::uint8* BlobTitle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobTitle)
  // optional uint32 curTitle = 1 [default = 0];
  if (has_curtitle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->curtitle(), target);
  }

  // repeated .Cmd.TitleData datas = 2;
  for (int i = 0; i < this->datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->datas(i), target);
  }

  // optional uint32 curAchieveTitle = 3 [default = 0];
  if (has_curachievetitle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->curachievetitle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobTitle)
  return target;
}

int BlobTitle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 curTitle = 1 [default = 0];
    if (has_curtitle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curtitle());
    }

    // optional uint32 curAchieveTitle = 3 [default = 0];
    if (has_curachievetitle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curachievetitle());
    }

  }
  // repeated .Cmd.TitleData datas = 2;
  total_size += 1 * this->datas_size();
  for (int i = 0; i < this->datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobTitle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobTitle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobTitle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobTitle::MergeFrom(const BlobTitle& from) {
  GOOGLE_CHECK_NE(&from, this);
  datas_.MergeFrom(from.datas_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_curtitle()) {
      set_curtitle(from.curtitle());
    }
    if (from.has_curachievetitle()) {
      set_curachievetitle(from.curachievetitle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobTitle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobTitle::CopyFrom(const BlobTitle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobTitle::IsInitialized() const {

  return true;
}

void BlobTitle::Swap(BlobTitle* other) {
  if (other != this) {
    std::swap(curtitle_, other->curtitle_);
    datas_.Swap(&other->datas_);
    std::swap(curachievetitle_, other->curachievetitle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobTitle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobTitle_descriptor_;
  metadata.reflection = BlobTitle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobLineData::kOtheridFieldNumber;
const int BlobLineData::kExpireTimeFieldNumber;
#endif  // !_MSC_VER

BlobLineData::BlobLineData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobLineData)
}

void BlobLineData::InitAsDefaultInstance() {
}

BlobLineData::BlobLineData(const BlobLineData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobLineData)
}

void BlobLineData::SharedCtor() {
  _cached_size_ = 0;
  otherid_ = GOOGLE_ULONGLONG(0);
  expiretime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobLineData::~BlobLineData() {
  // @@protoc_insertion_point(destructor:Cmd.BlobLineData)
  SharedDtor();
}

void BlobLineData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobLineData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobLineData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobLineData_descriptor_;
}

const BlobLineData& BlobLineData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobLineData* BlobLineData::default_instance_ = NULL;

BlobLineData* BlobLineData::New() const {
  return new BlobLineData;
}

void BlobLineData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BlobLineData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(otherid_, expiretime_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobLineData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobLineData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 otherid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &otherid_)));
          set_has_otherid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_expireTime;
        break;
      }

      // optional uint32 expireTime = 2;
      case 2: {
        if (tag == 16) {
         parse_expireTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expiretime_)));
          set_has_expiretime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobLineData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobLineData)
  return false;
#undef DO_
}

void BlobLineData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobLineData)
  // optional uint64 otherid = 1;
  if (has_otherid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->otherid(), output);
  }

  // optional uint32 expireTime = 2;
  if (has_expiretime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->expiretime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobLineData)
}

::google::protobuf::uint8* BlobLineData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobLineData)
  // optional uint64 otherid = 1;
  if (has_otherid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->otherid(), target);
  }

  // optional uint32 expireTime = 2;
  if (has_expiretime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->expiretime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobLineData)
  return target;
}

int BlobLineData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 otherid = 1;
    if (has_otherid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->otherid());
    }

    // optional uint32 expireTime = 2;
    if (has_expiretime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expiretime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobLineData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobLineData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobLineData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobLineData::MergeFrom(const BlobLineData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_otherid()) {
      set_otherid(from.otherid());
    }
    if (from.has_expiretime()) {
      set_expiretime(from.expiretime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobLineData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobLineData::CopyFrom(const BlobLineData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobLineData::IsInitialized() const {

  return true;
}

void BlobLineData::Swap(BlobLineData* other) {
  if (other != this) {
    std::swap(otherid_, other->otherid_);
    std::swap(expiretime_, other->expiretime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobLineData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobLineData_descriptor_;
  metadata.reflection = BlobLineData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobLine::kIlinewhoFieldNumber;
const int BlobLine::kWholinemeFieldNumber;
#endif  // !_MSC_VER

BlobLine::BlobLine()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobLine)
}

void BlobLine::InitAsDefaultInstance() {
}

BlobLine::BlobLine(const BlobLine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobLine)
}

void BlobLine::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobLine::~BlobLine() {
  // @@protoc_insertion_point(destructor:Cmd.BlobLine)
  SharedDtor();
}

void BlobLine::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobLine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobLine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobLine_descriptor_;
}

const BlobLine& BlobLine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobLine* BlobLine::default_instance_ = NULL;

BlobLine* BlobLine::New() const {
  return new BlobLine;
}

void BlobLine::Clear() {
  ilinewho_.Clear();
  wholineme_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobLine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobLine)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Cmd.BlobLineData ilinewho = 1;
      case 1: {
        if (tag == 10) {
         parse_ilinewho:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ilinewho()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ilinewho;
        if (input->ExpectTag(18)) goto parse_wholineme;
        break;
      }

      // repeated .Cmd.BlobLineData wholineme = 2;
      case 2: {
        if (tag == 18) {
         parse_wholineme:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_wholineme()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_wholineme;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobLine)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobLine)
  return false;
#undef DO_
}

void BlobLine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobLine)
  // repeated .Cmd.BlobLineData ilinewho = 1;
  for (int i = 0; i < this->ilinewho_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ilinewho(i), output);
  }

  // repeated .Cmd.BlobLineData wholineme = 2;
  for (int i = 0; i < this->wholineme_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->wholineme(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobLine)
}

::google::protobuf::uint8* BlobLine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobLine)
  // repeated .Cmd.BlobLineData ilinewho = 1;
  for (int i = 0; i < this->ilinewho_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ilinewho(i), target);
  }

  // repeated .Cmd.BlobLineData wholineme = 2;
  for (int i = 0; i < this->wholineme_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->wholineme(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobLine)
  return target;
}

int BlobLine::ByteSize() const {
  int total_size = 0;

  // repeated .Cmd.BlobLineData ilinewho = 1;
  total_size += 1 * this->ilinewho_size();
  for (int i = 0; i < this->ilinewho_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ilinewho(i));
  }

  // repeated .Cmd.BlobLineData wholineme = 2;
  total_size += 1 * this->wholineme_size();
  for (int i = 0; i < this->wholineme_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->wholineme(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobLine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobLine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobLine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobLine::MergeFrom(const BlobLine& from) {
  GOOGLE_CHECK_NE(&from, this);
  ilinewho_.MergeFrom(from.ilinewho_);
  wholineme_.MergeFrom(from.wholineme_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobLine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobLine::CopyFrom(const BlobLine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobLine::IsInitialized() const {

  return true;
}

void BlobLine::Swap(BlobLine* other) {
  if (other != this) {
    ilinewho_.Swap(&other->ilinewho_);
    wholineme_.Swap(&other->wholineme_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobLine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobLine_descriptor_;
  metadata.reflection = BlobLine_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobSpEffect::kDataFieldNumber;
const int BlobSpEffect::kWholinemeFieldNumber;
#endif  // !_MSC_VER

BlobSpEffect::BlobSpEffect()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobSpEffect)
}

void BlobSpEffect::InitAsDefaultInstance() {
}

BlobSpEffect::BlobSpEffect(const BlobSpEffect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobSpEffect)
}

void BlobSpEffect::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobSpEffect::~BlobSpEffect() {
  // @@protoc_insertion_point(destructor:Cmd.BlobSpEffect)
  SharedDtor();
}

void BlobSpEffect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobSpEffect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobSpEffect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobSpEffect_descriptor_;
}

const BlobSpEffect& BlobSpEffect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobSpEffect* BlobSpEffect::default_instance_ = NULL;

BlobSpEffect* BlobSpEffect::New() const {
  return new BlobSpEffect;
}

void BlobSpEffect::Clear() {
  data_.Clear();
  wholineme_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobSpEffect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobSpEffect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Cmd.SpEffectData data = 1;
      case 1: {
        if (tag == 10) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectTag(18)) goto parse_wholineme;
        break;
      }

      // repeated .Cmd.BlobLineData wholineme = 2;
      case 2: {
        if (tag == 18) {
         parse_wholineme:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_wholineme()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_wholineme;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobSpEffect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobSpEffect)
  return false;
#undef DO_
}

void BlobSpEffect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobSpEffect)
  // repeated .Cmd.SpEffectData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  // repeated .Cmd.BlobLineData wholineme = 2;
  for (int i = 0; i < this->wholineme_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->wholineme(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobSpEffect)
}

::google::protobuf::uint8* BlobSpEffect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobSpEffect)
  // repeated .Cmd.SpEffectData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  // repeated .Cmd.BlobLineData wholineme = 2;
  for (int i = 0; i < this->wholineme_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->wholineme(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobSpEffect)
  return target;
}

int BlobSpEffect::ByteSize() const {
  int total_size = 0;

  // repeated .Cmd.SpEffectData data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  // repeated .Cmd.BlobLineData wholineme = 2;
  total_size += 1 * this->wholineme_size();
  for (int i = 0; i < this->wholineme_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->wholineme(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobSpEffect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobSpEffect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobSpEffect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobSpEffect::MergeFrom(const BlobSpEffect& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  wholineme_.MergeFrom(from.wholineme_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobSpEffect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobSpEffect::CopyFrom(const BlobSpEffect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobSpEffect::IsInitialized() const {

  return true;
}

void BlobSpEffect::Swap(BlobSpEffect* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    wholineme_.Swap(&other->wholineme_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobSpEffect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobSpEffect_descriptor_;
  metadata.reflection = BlobSpEffect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobHandNpc::kVersionFieldNumber;
const int BlobHandNpc::kDataFieldNumber;
const int BlobHandNpc::kEndtimeFieldNumber;
#endif  // !_MSC_VER

BlobHandNpc::BlobHandNpc()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobHandNpc)
}

void BlobHandNpc::InitAsDefaultInstance() {
  data_ = const_cast< ::Cmd::HandNpcData*>(&::Cmd::HandNpcData::default_instance());
}

BlobHandNpc::BlobHandNpc(const BlobHandNpc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobHandNpc)
}

void BlobHandNpc::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  data_ = NULL;
  endtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobHandNpc::~BlobHandNpc() {
  // @@protoc_insertion_point(destructor:Cmd.BlobHandNpc)
  SharedDtor();
}

void BlobHandNpc::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void BlobHandNpc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobHandNpc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobHandNpc_descriptor_;
}

const BlobHandNpc& BlobHandNpc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobHandNpc* BlobHandNpc::default_instance_ = NULL;

BlobHandNpc* BlobHandNpc::New() const {
  return new BlobHandNpc;
}

void BlobHandNpc::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BlobHandNpc*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(version_, endtime_);
    if (has_data()) {
      if (data_ != NULL) data_->::Cmd::HandNpcData::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobHandNpc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobHandNpc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional .Cmd.HandNpcData data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_endtime;
        break;
      }

      // optional uint32 endtime = 3;
      case 3: {
        if (tag == 24) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobHandNpc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobHandNpc)
  return false;
#undef DO_
}

void BlobHandNpc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobHandNpc)
  // optional uint32 version = 1 [default = 0];
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // optional .Cmd.HandNpcData data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }

  // optional uint32 endtime = 3;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->endtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobHandNpc)
}

::google::protobuf::uint8* BlobHandNpc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobHandNpc)
  // optional uint32 version = 1 [default = 0];
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // optional .Cmd.HandNpcData data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }

  // optional uint32 endtime = 3;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->endtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobHandNpc)
  return target;
}

int BlobHandNpc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 version = 1 [default = 0];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional .Cmd.HandNpcData data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

    // optional uint32 endtime = 3;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobHandNpc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobHandNpc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobHandNpc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobHandNpc::MergeFrom(const BlobHandNpc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_data()) {
      mutable_data()->::Cmd::HandNpcData::MergeFrom(from.data());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobHandNpc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobHandNpc::CopyFrom(const BlobHandNpc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobHandNpc::IsInitialized() const {

  return true;
}

void BlobHandNpc::Swap(BlobHandNpc* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(data_, other->data_);
    std::swap(endtime_, other->endtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobHandNpc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobHandNpc_descriptor_;
  metadata.reflection = BlobHandNpc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobPet::kActivePetFieldNumber;
const int BlobPet::kActivePartnerFieldNumber;
const int BlobPet::kDatasFieldNumber;
#endif  // !_MSC_VER

BlobPet::BlobPet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobPet)
}

void BlobPet::InitAsDefaultInstance() {
}

BlobPet::BlobPet(const BlobPet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobPet)
}

void BlobPet::SharedCtor() {
  _cached_size_ = 0;
  activepet_ = 0u;
  activepartner_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobPet::~BlobPet() {
  // @@protoc_insertion_point(destructor:Cmd.BlobPet)
  SharedDtor();
}

void BlobPet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobPet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobPet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobPet_descriptor_;
}

const BlobPet& BlobPet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobPet* BlobPet::default_instance_ = NULL;

BlobPet* BlobPet::New() const {
  return new BlobPet;
}

void BlobPet::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BlobPet*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(activepet_, activepartner_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  datas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobPet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobPet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 activePet = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activepet_)));
          set_has_activepet();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_activePartner;
        break;
      }

      // optional uint32 activePartner = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_activePartner:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activepartner_)));
          set_has_activepartner();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_datas;
        break;
      }

      // repeated .Cmd.PetData datas = 3;
      case 3: {
        if (tag == 26) {
         parse_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_datas;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobPet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobPet)
  return false;
#undef DO_
}

void BlobPet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobPet)
  // optional uint32 activePet = 1 [default = 0];
  if (has_activepet()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->activepet(), output);
  }

  // optional uint32 activePartner = 2 [default = 0];
  if (has_activepartner()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->activepartner(), output);
  }

  // repeated .Cmd.PetData datas = 3;
  for (int i = 0; i < this->datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->datas(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobPet)
}

::google::protobuf::uint8* BlobPet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobPet)
  // optional uint32 activePet = 1 [default = 0];
  if (has_activepet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->activepet(), target);
  }

  // optional uint32 activePartner = 2 [default = 0];
  if (has_activepartner()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->activepartner(), target);
  }

  // repeated .Cmd.PetData datas = 3;
  for (int i = 0; i < this->datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->datas(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobPet)
  return target;
}

int BlobPet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 activePet = 1 [default = 0];
    if (has_activepet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activepet());
    }

    // optional uint32 activePartner = 2 [default = 0];
    if (has_activepartner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activepartner());
    }

  }
  // repeated .Cmd.PetData datas = 3;
  total_size += 1 * this->datas_size();
  for (int i = 0; i < this->datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobPet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobPet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobPet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobPet::MergeFrom(const BlobPet& from) {
  GOOGLE_CHECK_NE(&from, this);
  datas_.MergeFrom(from.datas_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activepet()) {
      set_activepet(from.activepet());
    }
    if (from.has_activepartner()) {
      set_activepartner(from.activepartner());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobPet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobPet::CopyFrom(const BlobPet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobPet::IsInitialized() const {

  return true;
}

void BlobPet::Swap(BlobPet* other) {
  if (other != this) {
    std::swap(activepet_, other->activepet_);
    std::swap(activepartner_, other->activepartner_);
    datas_.Swap(&other->datas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobPet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobPet_descriptor_;
  metadata.reflection = BlobPet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobWeaponPet::kVersionFieldNumber;
const int BlobWeaponPet::kDatasFieldNumber;
const int BlobWeaponPet::kMaxpetsizeFieldNumber;
const int BlobWeaponPet::kUnlockidsFieldNumber;
#endif  // !_MSC_VER

BlobWeaponPet::BlobWeaponPet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobWeaponPet)
}

void BlobWeaponPet::InitAsDefaultInstance() {
}

BlobWeaponPet::BlobWeaponPet(const BlobWeaponPet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobWeaponPet)
}

void BlobWeaponPet::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  maxpetsize_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobWeaponPet::~BlobWeaponPet() {
  // @@protoc_insertion_point(destructor:Cmd.BlobWeaponPet)
  SharedDtor();
}

void BlobWeaponPet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobWeaponPet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobWeaponPet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobWeaponPet_descriptor_;
}

const BlobWeaponPet& BlobWeaponPet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobWeaponPet* BlobWeaponPet::default_instance_ = NULL;

BlobWeaponPet* BlobWeaponPet::New() const {
  return new BlobWeaponPet;
}

void BlobWeaponPet::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BlobWeaponPet*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(version_, maxpetsize_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  datas_.Clear();
  unlockids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobWeaponPet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobWeaponPet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_datas;
        break;
      }

      // repeated .Cmd.WeaponPetData datas = 2;
      case 2: {
        if (tag == 18) {
         parse_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_datas;
        if (input->ExpectTag(24)) goto parse_maxpetsize;
        break;
      }

      // optional uint32 maxpetsize = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_maxpetsize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxpetsize_)));
          set_has_maxpetsize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_unlockids;
        break;
      }

      // repeated uint32 unlockids = 4;
      case 4: {
        if (tag == 32) {
         parse_unlockids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_unlockids())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_unlockids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_unlockids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobWeaponPet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobWeaponPet)
  return false;
#undef DO_
}

void BlobWeaponPet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobWeaponPet)
  // optional uint32 version = 1 [default = 0];
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // repeated .Cmd.WeaponPetData datas = 2;
  for (int i = 0; i < this->datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->datas(i), output);
  }

  // optional uint32 maxpetsize = 3 [default = 0];
  if (has_maxpetsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->maxpetsize(), output);
  }

  // repeated uint32 unlockids = 4;
  for (int i = 0; i < this->unlockids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->unlockids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobWeaponPet)
}

::google::protobuf::uint8* BlobWeaponPet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobWeaponPet)
  // optional uint32 version = 1 [default = 0];
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // repeated .Cmd.WeaponPetData datas = 2;
  for (int i = 0; i < this->datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->datas(i), target);
  }

  // optional uint32 maxpetsize = 3 [default = 0];
  if (has_maxpetsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->maxpetsize(), target);
  }

  // repeated uint32 unlockids = 4;
  for (int i = 0; i < this->unlockids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->unlockids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobWeaponPet)
  return target;
}

int BlobWeaponPet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 version = 1 [default = 0];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional uint32 maxpetsize = 3 [default = 0];
    if (has_maxpetsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxpetsize());
    }

  }
  // repeated .Cmd.WeaponPetData datas = 2;
  total_size += 1 * this->datas_size();
  for (int i = 0; i < this->datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datas(i));
  }

  // repeated uint32 unlockids = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->unlockids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->unlockids(i));
    }
    total_size += 1 * this->unlockids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobWeaponPet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobWeaponPet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobWeaponPet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobWeaponPet::MergeFrom(const BlobWeaponPet& from) {
  GOOGLE_CHECK_NE(&from, this);
  datas_.MergeFrom(from.datas_);
  unlockids_.MergeFrom(from.unlockids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_maxpetsize()) {
      set_maxpetsize(from.maxpetsize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobWeaponPet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobWeaponPet::CopyFrom(const BlobWeaponPet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobWeaponPet::IsInitialized() const {

  return true;
}

void BlobWeaponPet::Swap(BlobWeaponPet* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    datas_.Swap(&other->datas_);
    std::swap(maxpetsize_, other->maxpetsize_);
    unlockids_.Swap(&other->unlockids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobWeaponPet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobWeaponPet_descriptor_;
  metadata.reflection = BlobWeaponPet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobVar::kDatasFieldNumber;
#endif  // !_MSC_VER

BlobVar::BlobVar()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobVar)
}

void BlobVar::InitAsDefaultInstance() {
}

BlobVar::BlobVar(const BlobVar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobVar)
}

void BlobVar::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobVar::~BlobVar() {
  // @@protoc_insertion_point(destructor:Cmd.BlobVar)
  SharedDtor();
}

void BlobVar::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobVar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobVar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobVar_descriptor_;
}

const BlobVar& BlobVar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobVar* BlobVar::default_instance_ = NULL;

BlobVar* BlobVar::New() const {
  return new BlobVar;
}

void BlobVar::Clear() {
  datas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobVar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobVar)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Cmd.Var datas = 1;
      case 1: {
        if (tag == 10) {
         parse_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_datas;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobVar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobVar)
  return false;
#undef DO_
}

void BlobVar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobVar)
  // repeated .Cmd.Var datas = 1;
  for (int i = 0; i < this->datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->datas(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobVar)
}

::google::protobuf::uint8* BlobVar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobVar)
  // repeated .Cmd.Var datas = 1;
  for (int i = 0; i < this->datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->datas(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobVar)
  return target;
}

int BlobVar::ByteSize() const {
  int total_size = 0;

  // repeated .Cmd.Var datas = 1;
  total_size += 1 * this->datas_size();
  for (int i = 0; i < this->datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobVar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobVar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobVar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobVar::MergeFrom(const BlobVar& from) {
  GOOGLE_CHECK_NE(&from, this);
  datas_.MergeFrom(from.datas_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobVar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobVar::CopyFrom(const BlobVar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobVar::IsInitialized() const {

  return true;
}

void BlobVar::Swap(BlobVar* other) {
  if (other != this) {
    datas_.Swap(&other->datas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobVar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobVar_descriptor_;
  metadata.reflection = BlobVar_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobAccVar::kDatasFieldNumber;
#endif  // !_MSC_VER

BlobAccVar::BlobAccVar()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobAccVar)
}

void BlobAccVar::InitAsDefaultInstance() {
}

BlobAccVar::BlobAccVar(const BlobAccVar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobAccVar)
}

void BlobAccVar::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobAccVar::~BlobAccVar() {
  // @@protoc_insertion_point(destructor:Cmd.BlobAccVar)
  SharedDtor();
}

void BlobAccVar::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobAccVar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobAccVar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobAccVar_descriptor_;
}

const BlobAccVar& BlobAccVar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobAccVar* BlobAccVar::default_instance_ = NULL;

BlobAccVar* BlobAccVar::New() const {
  return new BlobAccVar;
}

void BlobAccVar::Clear() {
  datas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobAccVar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobAccVar)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Cmd.AccVar datas = 1;
      case 1: {
        if (tag == 10) {
         parse_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_datas;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobAccVar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobAccVar)
  return false;
#undef DO_
}

void BlobAccVar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobAccVar)
  // repeated .Cmd.AccVar datas = 1;
  for (int i = 0; i < this->datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->datas(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobAccVar)
}

::google::protobuf::uint8* BlobAccVar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobAccVar)
  // repeated .Cmd.AccVar datas = 1;
  for (int i = 0; i < this->datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->datas(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobAccVar)
  return target;
}

int BlobAccVar::ByteSize() const {
  int total_size = 0;

  // repeated .Cmd.AccVar datas = 1;
  total_size += 1 * this->datas_size();
  for (int i = 0; i < this->datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobAccVar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobAccVar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobAccVar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobAccVar::MergeFrom(const BlobAccVar& from) {
  GOOGLE_CHECK_NE(&from, this);
  datas_.MergeFrom(from.datas_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobAccVar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobAccVar::CopyFrom(const BlobAccVar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobAccVar::IsInitialized() const {

  return true;
}

void BlobAccVar::Swap(BlobAccVar* other) {
  if (other != this) {
    datas_.Swap(&other->datas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobAccVar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobAccVar_descriptor_;
  metadata.reflection = BlobAccVar_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillDamage::kSkillidFieldNumber;
const int SkillDamage::kDamageFieldNumber;
const int SkillDamage::kTypeFieldNumber;
const int SkillDamage::kTargetidFieldNumber;
#endif  // !_MSC_VER

SkillDamage::SkillDamage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SkillDamage)
}

void SkillDamage::InitAsDefaultInstance() {
}

SkillDamage::SkillDamage(const SkillDamage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SkillDamage)
}

void SkillDamage::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0u;
  damage_ = 0u;
  type_ = 0u;
  targetid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillDamage::~SkillDamage() {
  // @@protoc_insertion_point(destructor:Cmd.SkillDamage)
  SharedDtor();
}

void SkillDamage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillDamage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillDamage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillDamage_descriptor_;
}

const SkillDamage& SkillDamage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

SkillDamage* SkillDamage::default_instance_ = NULL;

SkillDamage* SkillDamage::New() const {
  return new SkillDamage;
}

void SkillDamage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SkillDamage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(skillid_, type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillDamage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SkillDamage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 skillid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_damage;
        break;
      }

      // optional uint32 damage = 2;
      case 2: {
        if (tag == 16) {
         parse_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional uint32 type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_targetid;
        break;
      }

      // optional uint64 targetid = 4;
      case 4: {
        if (tag == 32) {
         parse_targetid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SkillDamage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SkillDamage)
  return false;
#undef DO_
}

void SkillDamage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SkillDamage)
  // optional uint32 skillid = 1;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skillid(), output);
  }

  // optional uint32 damage = 2;
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->damage(), output);
  }

  // optional uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  // optional uint64 targetid = 4;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->targetid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SkillDamage)
}

::google::protobuf::uint8* SkillDamage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SkillDamage)
  // optional uint32 skillid = 1;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skillid(), target);
  }

  // optional uint32 damage = 2;
  if (has_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->damage(), target);
  }

  // optional uint32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  // optional uint64 targetid = 4;
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->targetid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SkillDamage)
  return target;
}

int SkillDamage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 skillid = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }

    // optional uint32 damage = 2;
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->damage());
    }

    // optional uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint64 targetid = 4;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->targetid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillDamage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillDamage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillDamage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillDamage::MergeFrom(const SkillDamage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_damage()) {
      set_damage(from.damage());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillDamage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillDamage::CopyFrom(const SkillDamage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillDamage::IsInitialized() const {

  return true;
}

void SkillDamage::Swap(SkillDamage* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(damage_, other->damage_);
    std::swap(type_, other->type_);
    std::swap(targetid_, other->targetid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillDamage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillDamage_descriptor_;
  metadata.reflection = SkillDamage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StatKillMonster::kMonsteridFieldNumber;
const int StatKillMonster::kKillnumFieldNumber;
#endif  // !_MSC_VER

StatKillMonster::StatKillMonster()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.StatKillMonster)
}

void StatKillMonster::InitAsDefaultInstance() {
}

StatKillMonster::StatKillMonster(const StatKillMonster& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.StatKillMonster)
}

void StatKillMonster::SharedCtor() {
  _cached_size_ = 0;
  monsterid_ = 0u;
  killnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StatKillMonster::~StatKillMonster() {
  // @@protoc_insertion_point(destructor:Cmd.StatKillMonster)
  SharedDtor();
}

void StatKillMonster::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StatKillMonster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatKillMonster::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatKillMonster_descriptor_;
}

const StatKillMonster& StatKillMonster::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

StatKillMonster* StatKillMonster::default_instance_ = NULL;

StatKillMonster* StatKillMonster::New() const {
  return new StatKillMonster;
}

void StatKillMonster::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StatKillMonster*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(monsterid_, killnum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StatKillMonster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.StatKillMonster)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 monsterid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monsterid_)));
          set_has_monsterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_killnum;
        break;
      }

      // required uint32 killnum = 2;
      case 2: {
        if (tag == 16) {
         parse_killnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killnum_)));
          set_has_killnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.StatKillMonster)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.StatKillMonster)
  return false;
#undef DO_
}

void StatKillMonster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.StatKillMonster)
  // required uint32 monsterid = 1;
  if (has_monsterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->monsterid(), output);
  }

  // required uint32 killnum = 2;
  if (has_killnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->killnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.StatKillMonster)
}

::google::protobuf::uint8* StatKillMonster::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.StatKillMonster)
  // required uint32 monsterid = 1;
  if (has_monsterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->monsterid(), target);
  }

  // required uint32 killnum = 2;
  if (has_killnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->killnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.StatKillMonster)
  return target;
}

int StatKillMonster::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 monsterid = 1;
    if (has_monsterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monsterid());
    }

    // required uint32 killnum = 2;
    if (has_killnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatKillMonster::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StatKillMonster* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StatKillMonster*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StatKillMonster::MergeFrom(const StatKillMonster& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_monsterid()) {
      set_monsterid(from.monsterid());
    }
    if (from.has_killnum()) {
      set_killnum(from.killnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StatKillMonster::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatKillMonster::CopyFrom(const StatKillMonster& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatKillMonster::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void StatKillMonster::Swap(StatKillMonster* other) {
  if (other != this) {
    std::swap(monsterid_, other->monsterid_);
    std::swap(killnum_, other->killnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StatKillMonster::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatKillMonster_descriptor_;
  metadata.reflection = StatKillMonster_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobStatVar::kDatasFieldNumber;
const int BlobStatVar::kSkilldamageFieldNumber;
const int BlobStatVar::kKillmonsterFieldNumber;
#endif  // !_MSC_VER

BlobStatVar::BlobStatVar()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobStatVar)
}

void BlobStatVar::InitAsDefaultInstance() {
}

BlobStatVar::BlobStatVar(const BlobStatVar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobStatVar)
}

void BlobStatVar::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobStatVar::~BlobStatVar() {
  // @@protoc_insertion_point(destructor:Cmd.BlobStatVar)
  SharedDtor();
}

void BlobStatVar::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobStatVar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobStatVar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobStatVar_descriptor_;
}

const BlobStatVar& BlobStatVar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobStatVar* BlobStatVar::default_instance_ = NULL;

BlobStatVar* BlobStatVar::New() const {
  return new BlobStatVar;
}

void BlobStatVar::Clear() {
  datas_.Clear();
  skilldamage_.Clear();
  killmonster_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobStatVar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobStatVar)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Cmd.StatVar datas = 1;
      case 1: {
        if (tag == 10) {
         parse_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_datas;
        if (input->ExpectTag(18)) goto parse_skilldamage;
        break;
      }

      // repeated .Cmd.SkillDamage skilldamage = 2;
      case 2: {
        if (tag == 18) {
         parse_skilldamage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skilldamage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_skilldamage;
        if (input->ExpectTag(26)) goto parse_killmonster;
        break;
      }

      // repeated .Cmd.StatKillMonster killmonster = 3;
      case 3: {
        if (tag == 26) {
         parse_killmonster:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_killmonster()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_killmonster;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobStatVar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobStatVar)
  return false;
#undef DO_
}

void BlobStatVar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobStatVar)
  // repeated .Cmd.StatVar datas = 1;
  for (int i = 0; i < this->datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->datas(i), output);
  }

  // repeated .Cmd.SkillDamage skilldamage = 2;
  for (int i = 0; i < this->skilldamage_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->skilldamage(i), output);
  }

  // repeated .Cmd.StatKillMonster killmonster = 3;
  for (int i = 0; i < this->killmonster_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->killmonster(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobStatVar)
}

::google::protobuf::uint8* BlobStatVar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobStatVar)
  // repeated .Cmd.StatVar datas = 1;
  for (int i = 0; i < this->datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->datas(i), target);
  }

  // repeated .Cmd.SkillDamage skilldamage = 2;
  for (int i = 0; i < this->skilldamage_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->skilldamage(i), target);
  }

  // repeated .Cmd.StatKillMonster killmonster = 3;
  for (int i = 0; i < this->killmonster_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->killmonster(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobStatVar)
  return target;
}

int BlobStatVar::ByteSize() const {
  int total_size = 0;

  // repeated .Cmd.StatVar datas = 1;
  total_size += 1 * this->datas_size();
  for (int i = 0; i < this->datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datas(i));
  }

  // repeated .Cmd.SkillDamage skilldamage = 2;
  total_size += 1 * this->skilldamage_size();
  for (int i = 0; i < this->skilldamage_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skilldamage(i));
  }

  // repeated .Cmd.StatKillMonster killmonster = 3;
  total_size += 1 * this->killmonster_size();
  for (int i = 0; i < this->killmonster_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->killmonster(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobStatVar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobStatVar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobStatVar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobStatVar::MergeFrom(const BlobStatVar& from) {
  GOOGLE_CHECK_NE(&from, this);
  datas_.MergeFrom(from.datas_);
  skilldamage_.MergeFrom(from.skilldamage_);
  killmonster_.MergeFrom(from.killmonster_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobStatVar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobStatVar::CopyFrom(const BlobStatVar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobStatVar::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->killmonster())) return false;
  return true;
}

void BlobStatVar::Swap(BlobStatVar* other) {
  if (other != this) {
    datas_.Swap(&other->datas_);
    skilldamage_.Swap(&other->skilldamage_);
    killmonster_.Swap(&other->killmonster_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobStatVar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobStatVar_descriptor_;
  metadata.reflection = BlobStatVar_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobChatMsg::kPresetFieldNumber;
#endif  // !_MSC_VER

BlobChatMsg::BlobChatMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobChatMsg)
}

void BlobChatMsg::InitAsDefaultInstance() {
}

BlobChatMsg::BlobChatMsg(const BlobChatMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobChatMsg)
}

void BlobChatMsg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobChatMsg::~BlobChatMsg() {
  // @@protoc_insertion_point(destructor:Cmd.BlobChatMsg)
  SharedDtor();
}

void BlobChatMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobChatMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobChatMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobChatMsg_descriptor_;
}

const BlobChatMsg& BlobChatMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobChatMsg* BlobChatMsg::default_instance_ = NULL;

BlobChatMsg* BlobChatMsg::New() const {
  return new BlobChatMsg;
}

void BlobChatMsg::Clear() {
  preset_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobChatMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobChatMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Cmd.PresetMsg preset = 1;
      case 1: {
        if (tag == 10) {
         parse_preset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_preset()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_preset;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobChatMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobChatMsg)
  return false;
#undef DO_
}

void BlobChatMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobChatMsg)
  // repeated .Cmd.PresetMsg preset = 1;
  for (int i = 0; i < this->preset_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->preset(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobChatMsg)
}

::google::protobuf::uint8* BlobChatMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobChatMsg)
  // repeated .Cmd.PresetMsg preset = 1;
  for (int i = 0; i < this->preset_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->preset(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobChatMsg)
  return target;
}

int BlobChatMsg::ByteSize() const {
  int total_size = 0;

  // repeated .Cmd.PresetMsg preset = 1;
  total_size += 1 * this->preset_size();
  for (int i = 0; i < this->preset_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->preset(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobChatMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobChatMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobChatMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobChatMsg::MergeFrom(const BlobChatMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  preset_.MergeFrom(from.preset_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobChatMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobChatMsg::CopyFrom(const BlobChatMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobChatMsg::IsInitialized() const {

  return true;
}

void BlobChatMsg::Swap(BlobChatMsg* other) {
  if (other != this) {
    preset_.Swap(&other->preset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobChatMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobChatMsg_descriptor_;
  metadata.reflection = BlobChatMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobUserTower::kTowerinfoFieldNumber;
const int BlobUserTower::kCleartimeFieldNumber;
#endif  // !_MSC_VER

BlobUserTower::BlobUserTower()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobUserTower)
}

void BlobUserTower::InitAsDefaultInstance() {
  towerinfo_ = const_cast< ::Cmd::UserTowerInfo*>(&::Cmd::UserTowerInfo::default_instance());
}

BlobUserTower::BlobUserTower(const BlobUserTower& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobUserTower)
}

void BlobUserTower::SharedCtor() {
  _cached_size_ = 0;
  towerinfo_ = NULL;
  cleartime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobUserTower::~BlobUserTower() {
  // @@protoc_insertion_point(destructor:Cmd.BlobUserTower)
  SharedDtor();
}

void BlobUserTower::SharedDtor() {
  if (this != default_instance_) {
    delete towerinfo_;
  }
}

void BlobUserTower::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobUserTower::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobUserTower_descriptor_;
}

const BlobUserTower& BlobUserTower::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobUserTower* BlobUserTower::default_instance_ = NULL;

BlobUserTower* BlobUserTower::New() const {
  return new BlobUserTower;
}

void BlobUserTower::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_towerinfo()) {
      if (towerinfo_ != NULL) towerinfo_->::Cmd::UserTowerInfo::Clear();
    }
    cleartime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobUserTower::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobUserTower)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.UserTowerInfo towerinfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_towerinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cleartime;
        break;
      }

      // optional uint32 cleartime = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_cleartime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cleartime_)));
          set_has_cleartime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobUserTower)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobUserTower)
  return false;
#undef DO_
}

void BlobUserTower::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobUserTower)
  // optional .Cmd.UserTowerInfo towerinfo = 1;
  if (has_towerinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->towerinfo(), output);
  }

  // optional uint32 cleartime = 2 [default = 0];
  if (has_cleartime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cleartime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobUserTower)
}

::google::protobuf::uint8* BlobUserTower::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobUserTower)
  // optional .Cmd.UserTowerInfo towerinfo = 1;
  if (has_towerinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->towerinfo(), target);
  }

  // optional uint32 cleartime = 2 [default = 0];
  if (has_cleartime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cleartime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobUserTower)
  return target;
}

int BlobUserTower::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.UserTowerInfo towerinfo = 1;
    if (has_towerinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->towerinfo());
    }

    // optional uint32 cleartime = 2 [default = 0];
    if (has_cleartime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cleartime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobUserTower::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobUserTower* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobUserTower*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobUserTower::MergeFrom(const BlobUserTower& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_towerinfo()) {
      mutable_towerinfo()->::Cmd::UserTowerInfo::MergeFrom(from.towerinfo());
    }
    if (from.has_cleartime()) {
      set_cleartime(from.cleartime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobUserTower::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobUserTower::CopyFrom(const BlobUserTower& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobUserTower::IsInitialized() const {

  return true;
}

void BlobUserTower::Swap(BlobUserTower* other) {
  if (other != this) {
    std::swap(towerinfo_, other->towerinfo_);
    std::swap(cleartime_, other->cleartime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobUserTower::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobUserTower_descriptor_;
  metadata.reflection = BlobUserTower_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobSeal::kDatasFieldNumber;
const int BlobSeal::kQuestsealsFieldNumber;
const int BlobSeal::kNexttimeFieldNumber;
const int BlobSeal::kOpensealsFieldNumber;
#endif  // !_MSC_VER

BlobSeal::BlobSeal()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobSeal)
}

void BlobSeal::InitAsDefaultInstance() {
}

BlobSeal::BlobSeal(const BlobSeal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobSeal)
}

void BlobSeal::SharedCtor() {
  _cached_size_ = 0;
  nexttime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobSeal::~BlobSeal() {
  // @@protoc_insertion_point(destructor:Cmd.BlobSeal)
  SharedDtor();
}

void BlobSeal::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobSeal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobSeal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobSeal_descriptor_;
}

const BlobSeal& BlobSeal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobSeal* BlobSeal::default_instance_ = NULL;

BlobSeal* BlobSeal::New() const {
  return new BlobSeal;
}

void BlobSeal::Clear() {
  nexttime_ = 0u;
  datas_.Clear();
  questseals_.Clear();
  openseals_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobSeal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobSeal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Cmd.SealData datas = 1;
      case 1: {
        if (tag == 10) {
         parse_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_datas;
        if (input->ExpectTag(18)) goto parse_questseals;
        break;
      }

      // repeated .Cmd.SealData questseals = 2;
      case 2: {
        if (tag == 18) {
         parse_questseals:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_questseals()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_questseals;
        if (input->ExpectTag(24)) goto parse_nexttime;
        break;
      }

      // optional uint32 nexttime = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_nexttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nexttime_)));
          set_has_nexttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_openseals;
        break;
      }

      // repeated uint32 openseals = 4;
      case 4: {
        if (tag == 32) {
         parse_openseals:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_openseals())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_openseals())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_openseals;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobSeal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobSeal)
  return false;
#undef DO_
}

void BlobSeal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobSeal)
  // repeated .Cmd.SealData datas = 1;
  for (int i = 0; i < this->datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->datas(i), output);
  }

  // repeated .Cmd.SealData questseals = 2;
  for (int i = 0; i < this->questseals_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->questseals(i), output);
  }

  // optional uint32 nexttime = 3 [default = 0];
  if (has_nexttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->nexttime(), output);
  }

  // repeated uint32 openseals = 4;
  for (int i = 0; i < this->openseals_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->openseals(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobSeal)
}

::google::protobuf::uint8* BlobSeal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobSeal)
  // repeated .Cmd.SealData datas = 1;
  for (int i = 0; i < this->datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->datas(i), target);
  }

  // repeated .Cmd.SealData questseals = 2;
  for (int i = 0; i < this->questseals_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->questseals(i), target);
  }

  // optional uint32 nexttime = 3 [default = 0];
  if (has_nexttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->nexttime(), target);
  }

  // repeated uint32 openseals = 4;
  for (int i = 0; i < this->openseals_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->openseals(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobSeal)
  return target;
}

int BlobSeal::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional uint32 nexttime = 3 [default = 0];
    if (has_nexttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nexttime());
    }

  }
  // repeated .Cmd.SealData datas = 1;
  total_size += 1 * this->datas_size();
  for (int i = 0; i < this->datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datas(i));
  }

  // repeated .Cmd.SealData questseals = 2;
  total_size += 1 * this->questseals_size();
  for (int i = 0; i < this->questseals_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->questseals(i));
  }

  // repeated uint32 openseals = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->openseals_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->openseals(i));
    }
    total_size += 1 * this->openseals_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobSeal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobSeal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobSeal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobSeal::MergeFrom(const BlobSeal& from) {
  GOOGLE_CHECK_NE(&from, this);
  datas_.MergeFrom(from.datas_);
  questseals_.MergeFrom(from.questseals_);
  openseals_.MergeFrom(from.openseals_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_nexttime()) {
      set_nexttime(from.nexttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobSeal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobSeal::CopyFrom(const BlobSeal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobSeal::IsInitialized() const {

  return true;
}

void BlobSeal::Swap(BlobSeal* other) {
  if (other != this) {
    datas_.Swap(&other->datas_);
    questseals_.Swap(&other->questseals_);
    std::swap(nexttime_, other->nexttime_);
    openseals_.Swap(&other->openseals_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobSeal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobSeal_descriptor_;
  metadata.reflection = BlobSeal_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobManual::kDataFieldNumber;
const int BlobManual::kIsaddFieldNumber;
#endif  // !_MSC_VER

BlobManual::BlobManual()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobManual)
}

void BlobManual::InitAsDefaultInstance() {
  data_ = const_cast< ::Cmd::ManualData*>(&::Cmd::ManualData::default_instance());
}

BlobManual::BlobManual(const BlobManual& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobManual)
}

void BlobManual::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  isadd_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobManual::~BlobManual() {
  // @@protoc_insertion_point(destructor:Cmd.BlobManual)
  SharedDtor();
}

void BlobManual::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void BlobManual::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobManual::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobManual_descriptor_;
}

const BlobManual& BlobManual::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobManual* BlobManual::default_instance_ = NULL;

BlobManual* BlobManual::New() const {
  return new BlobManual;
}

void BlobManual::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_data()) {
      if (data_ != NULL) data_->::Cmd::ManualData::Clear();
    }
    isadd_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobManual::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobManual)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.ManualData data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_isadd;
        break;
      }

      // optional bool isadd = 2;
      case 2: {
        if (tag == 16) {
         parse_isadd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isadd_)));
          set_has_isadd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobManual)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobManual)
  return false;
#undef DO_
}

void BlobManual::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobManual)
  // optional .Cmd.ManualData data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }

  // optional bool isadd = 2;
  if (has_isadd()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isadd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobManual)
}

::google::protobuf::uint8* BlobManual::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobManual)
  // optional .Cmd.ManualData data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }

  // optional bool isadd = 2;
  if (has_isadd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isadd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobManual)
  return target;
}

int BlobManual::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.ManualData data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

    // optional bool isadd = 2;
    if (has_isadd()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobManual::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobManual* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobManual*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobManual::MergeFrom(const BlobManual& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::Cmd::ManualData::MergeFrom(from.data());
    }
    if (from.has_isadd()) {
      set_isadd(from.isadd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobManual::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobManual::CopyFrom(const BlobManual& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobManual::IsInitialized() const {

  return true;
}

void BlobManual::Swap(BlobManual* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(isadd_, other->isadd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobManual::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobManual_descriptor_;
  metadata.reflection = BlobManual_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobFirstActionDone::kActionFieldNumber;
#endif  // !_MSC_VER

BlobFirstActionDone::BlobFirstActionDone()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobFirstActionDone)
}

void BlobFirstActionDone::InitAsDefaultInstance() {
}

BlobFirstActionDone::BlobFirstActionDone(const BlobFirstActionDone& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobFirstActionDone)
}

void BlobFirstActionDone::SharedCtor() {
  _cached_size_ = 0;
  action_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobFirstActionDone::~BlobFirstActionDone() {
  // @@protoc_insertion_point(destructor:Cmd.BlobFirstActionDone)
  SharedDtor();
}

void BlobFirstActionDone::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobFirstActionDone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobFirstActionDone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobFirstActionDone_descriptor_;
}

const BlobFirstActionDone& BlobFirstActionDone::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobFirstActionDone* BlobFirstActionDone::default_instance_ = NULL;

BlobFirstActionDone* BlobFirstActionDone::New() const {
  return new BlobFirstActionDone;
}

void BlobFirstActionDone::Clear() {
  action_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobFirstActionDone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobFirstActionDone)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 action = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_)));
          set_has_action();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobFirstActionDone)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobFirstActionDone)
  return false;
#undef DO_
}

void BlobFirstActionDone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobFirstActionDone)
  // optional uint32 action = 1;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->action(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobFirstActionDone)
}

::google::protobuf::uint8* BlobFirstActionDone::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobFirstActionDone)
  // optional uint32 action = 1;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->action(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobFirstActionDone)
  return target;
}

int BlobFirstActionDone::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 action = 1;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->action());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobFirstActionDone::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobFirstActionDone* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobFirstActionDone*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobFirstActionDone::MergeFrom(const BlobFirstActionDone& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_action()) {
      set_action(from.action());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobFirstActionDone::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobFirstActionDone::CopyFrom(const BlobFirstActionDone& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobFirstActionDone::IsInitialized() const {

  return true;
}

void BlobFirstActionDone::Swap(BlobFirstActionDone* other) {
  if (other != this) {
    std::swap(action_, other->action_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobFirstActionDone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobFirstActionDone_descriptor_;
  metadata.reflection = BlobFirstActionDone_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobAttr::kDatasFieldNumber;
#endif  // !_MSC_VER

BlobAttr::BlobAttr()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobAttr)
}

void BlobAttr::InitAsDefaultInstance() {
}

BlobAttr::BlobAttr(const BlobAttr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobAttr)
}

void BlobAttr::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobAttr::~BlobAttr() {
  // @@protoc_insertion_point(destructor:Cmd.BlobAttr)
  SharedDtor();
}

void BlobAttr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobAttr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobAttr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobAttr_descriptor_;
}

const BlobAttr& BlobAttr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobAttr* BlobAttr::default_instance_ = NULL;

BlobAttr* BlobAttr::New() const {
  return new BlobAttr;
}

void BlobAttr::Clear() {
  datas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobAttr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobAttr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Cmd.UserAttrSvr datas = 1;
      case 1: {
        if (tag == 10) {
         parse_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_datas;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobAttr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobAttr)
  return false;
#undef DO_
}

void BlobAttr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobAttr)
  // repeated .Cmd.UserAttrSvr datas = 1;
  for (int i = 0; i < this->datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->datas(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobAttr)
}

::google::protobuf::uint8* BlobAttr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobAttr)
  // repeated .Cmd.UserAttrSvr datas = 1;
  for (int i = 0; i < this->datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->datas(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobAttr)
  return target;
}

int BlobAttr::ByteSize() const {
  int total_size = 0;

  // repeated .Cmd.UserAttrSvr datas = 1;
  total_size += 1 * this->datas_size();
  for (int i = 0; i < this->datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobAttr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobAttr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobAttr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobAttr::MergeFrom(const BlobAttr& from) {
  GOOGLE_CHECK_NE(&from, this);
  datas_.MergeFrom(from.datas_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobAttr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobAttr::CopyFrom(const BlobAttr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobAttr::IsInitialized() const {

  return true;
}

void BlobAttr::Swap(BlobAttr* other) {
  if (other != this) {
    datas_.Swap(&other->datas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobAttr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobAttr_descriptor_;
  metadata.reflection = BlobAttr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MonsterNum::kMonsteridFieldNumber;
const int MonsterNum::kCountFieldNumber;
#endif  // !_MSC_VER

MonsterNum::MonsterNum()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.MonsterNum)
}

void MonsterNum::InitAsDefaultInstance() {
}

MonsterNum::MonsterNum(const MonsterNum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.MonsterNum)
}

void MonsterNum::SharedCtor() {
  _cached_size_ = 0;
  monsterid_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MonsterNum::~MonsterNum() {
  // @@protoc_insertion_point(destructor:Cmd.MonsterNum)
  SharedDtor();
}

void MonsterNum::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MonsterNum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MonsterNum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MonsterNum_descriptor_;
}

const MonsterNum& MonsterNum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

MonsterNum* MonsterNum::default_instance_ = NULL;

MonsterNum* MonsterNum::New() const {
  return new MonsterNum;
}

void MonsterNum::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MonsterNum*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(monsterid_, count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MonsterNum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.MonsterNum)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 monsterid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monsterid_)));
          set_has_monsterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional uint32 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.MonsterNum)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.MonsterNum)
  return false;
#undef DO_
}

void MonsterNum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.MonsterNum)
  // optional uint32 monsterid = 1;
  if (has_monsterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->monsterid(), output);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.MonsterNum)
}

::google::protobuf::uint8* MonsterNum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.MonsterNum)
  // optional uint32 monsterid = 1;
  if (has_monsterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->monsterid(), target);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.MonsterNum)
  return target;
}

int MonsterNum::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 monsterid = 1;
    if (has_monsterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monsterid());
    }

    // optional uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MonsterNum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MonsterNum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MonsterNum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MonsterNum::MergeFrom(const MonsterNum& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_monsterid()) {
      set_monsterid(from.monsterid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MonsterNum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MonsterNum::CopyFrom(const MonsterNum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonsterNum::IsInitialized() const {

  return true;
}

void MonsterNum::Swap(MonsterNum* other) {
  if (other != this) {
    std::swap(monsterid_, other->monsterid_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MonsterNum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MonsterNum_descriptor_;
  metadata.reflection = MonsterNum_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobCamera::kVersionFieldNumber;
const int BlobCamera::kMonstersFieldNumber;
#endif  // !_MSC_VER

BlobCamera::BlobCamera()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobCamera)
}

void BlobCamera::InitAsDefaultInstance() {
}

BlobCamera::BlobCamera(const BlobCamera& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobCamera)
}

void BlobCamera::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobCamera::~BlobCamera() {
  // @@protoc_insertion_point(destructor:Cmd.BlobCamera)
  SharedDtor();
}

void BlobCamera::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobCamera::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobCamera::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobCamera_descriptor_;
}

const BlobCamera& BlobCamera::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobCamera* BlobCamera::default_instance_ = NULL;

BlobCamera* BlobCamera::New() const {
  return new BlobCamera;
}

void BlobCamera::Clear() {
  version_ = 0u;
  monsters_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobCamera::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobCamera)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_monsters;
        break;
      }

      // repeated .Cmd.MonsterNum monsters = 2;
      case 2: {
        if (tag == 18) {
         parse_monsters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monsters()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_monsters;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobCamera)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobCamera)
  return false;
#undef DO_
}

void BlobCamera::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobCamera)
  // optional uint32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // repeated .Cmd.MonsterNum monsters = 2;
  for (int i = 0; i < this->monsters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->monsters(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobCamera)
}

::google::protobuf::uint8* BlobCamera::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobCamera)
  // optional uint32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // repeated .Cmd.MonsterNum monsters = 2;
  for (int i = 0; i < this->monsters_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->monsters(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobCamera)
  return target;
}

int BlobCamera::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

  }
  // repeated .Cmd.MonsterNum monsters = 2;
  total_size += 1 * this->monsters_size();
  for (int i = 0; i < this->monsters_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monsters(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobCamera::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobCamera* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobCamera*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobCamera::MergeFrom(const BlobCamera& from) {
  GOOGLE_CHECK_NE(&from, this);
  monsters_.MergeFrom(from.monsters_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobCamera::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobCamera::CopyFrom(const BlobCamera& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobCamera::IsInitialized() const {

  return true;
}

void BlobCamera::Swap(BlobCamera* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    monsters_.Swap(&other->monsters_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobCamera::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobCamera_descriptor_;
  metadata.reflection = BlobCamera_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RaidZone::kRaididFieldNumber;
const int RaidZone::kZoneidFieldNumber;
#endif  // !_MSC_VER

RaidZone::RaidZone()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.RaidZone)
}

void RaidZone::InitAsDefaultInstance() {
}

RaidZone::RaidZone(const RaidZone& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.RaidZone)
}

void RaidZone::SharedCtor() {
  _cached_size_ = 0;
  raidid_ = 0u;
  zoneid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RaidZone::~RaidZone() {
  // @@protoc_insertion_point(destructor:Cmd.RaidZone)
  SharedDtor();
}

void RaidZone::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RaidZone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaidZone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaidZone_descriptor_;
}

const RaidZone& RaidZone::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

RaidZone* RaidZone::default_instance_ = NULL;

RaidZone* RaidZone::New() const {
  return new RaidZone;
}

void RaidZone::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RaidZone*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(raidid_, zoneid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RaidZone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.RaidZone)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 raidid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raidid_)));
          set_has_raidid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.RaidZone)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.RaidZone)
  return false;
#undef DO_
}

void RaidZone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.RaidZone)
  // optional uint32 raidid = 1 [default = 0];
  if (has_raidid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->raidid(), output);
  }

  // optional uint32 zoneid = 2 [default = 0];
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zoneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.RaidZone)
}

::google::protobuf::uint8* RaidZone::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.RaidZone)
  // optional uint32 raidid = 1 [default = 0];
  if (has_raidid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->raidid(), target);
  }

  // optional uint32 zoneid = 2 [default = 0];
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zoneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.RaidZone)
  return target;
}

int RaidZone::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 raidid = 1 [default = 0];
    if (has_raidid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raidid());
    }

    // optional uint32 zoneid = 2 [default = 0];
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaidZone::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RaidZone* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RaidZone*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RaidZone::MergeFrom(const RaidZone& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_raidid()) {
      set_raidid(from.raidid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RaidZone::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaidZone::CopyFrom(const RaidZone& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaidZone::IsInitialized() const {

  return true;
}

void RaidZone::Swap(RaidZone* other) {
  if (other != this) {
    std::swap(raidid_, other->raidid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RaidZone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaidZone_descriptor_;
  metadata.reflection = RaidZone_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobZone::kVersionFieldNumber;
const int BlobZone::kZoneidFieldNumber;
const int BlobZone::kMapidFieldNumber;
const int BlobZone::kCmdFieldNumber;
const int BlobZone::kPastzoneidFieldNumber;
const int BlobZone::kRaidzonelistFieldNumber;
const int BlobZone::kEffectivetimeFieldNumber;
const int BlobZone::kTypeFieldNumber;
const int BlobZone::kRoomidFieldNumber;
const int BlobZone::kColorindexFieldNumber;
const int BlobZone::kXFieldNumber;
const int BlobZone::kYFieldNumber;
const int BlobZone::kZFieldNumber;
#endif  // !_MSC_VER

BlobZone::BlobZone()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobZone)
}

void BlobZone::InitAsDefaultInstance() {
}

BlobZone::BlobZone(const BlobZone& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobZone)
}

void BlobZone::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  version_ = 0u;
  zoneid_ = 0u;
  mapid_ = 0u;
  cmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pastzoneid_ = 0u;
  effectivetime_ = 0u;
  type_ = 0u;
  roomid_ = GOOGLE_ULONGLONG(0);
  colorindex_ = 0u;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobZone::~BlobZone() {
  // @@protoc_insertion_point(destructor:Cmd.BlobZone)
  SharedDtor();
}

void BlobZone::SharedDtor() {
  if (cmd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cmd_;
  }
  if (this != default_instance_) {
  }
}

void BlobZone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobZone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobZone_descriptor_;
}

const BlobZone& BlobZone::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobZone* BlobZone::default_instance_ = NULL;

BlobZone* BlobZone::New() const {
  return new BlobZone;
}

void BlobZone::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BlobZone*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 223) {
    ZR_(version_, zoneid_);
    ZR_(mapid_, pastzoneid_);
    ZR_(effectivetime_, type_);
    if (has_cmd()) {
      if (cmd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cmd_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 7936) {
    ZR_(roomid_, z_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  raidzonelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobZone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobZone)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 2;
      case 2: {
        if (tag == 16) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mapid;
        break;
      }

      // optional uint32 mapid = 3;
      case 3: {
        if (tag == 24) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_cmd;
        break;
      }

      // optional bytes cmd = 4;
      case 4: {
        if (tag == 34) {
         parse_cmd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cmd()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_pastzoneid;
        break;
      }

      // optional uint32 pastzoneid = 5;
      case 5: {
        if (tag == 40) {
         parse_pastzoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pastzoneid_)));
          set_has_pastzoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_raidzonelist;
        break;
      }

      // repeated .Cmd.RaidZone raidzonelist = 6;
      case 6: {
        if (tag == 50) {
         parse_raidzonelist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_raidzonelist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_raidzonelist;
        if (input->ExpectTag(56)) goto parse_effectivetime;
        break;
      }

      // optional uint32 effectivetime = 7;
      case 7: {
        if (tag == 56) {
         parse_effectivetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effectivetime_)));
          set_has_effectivetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_type;
        break;
      }

      // optional uint32 type = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_roomid;
        break;
      }

      // optional uint64 roomid = 9;
      case 9: {
        if (tag == 72) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_colorindex;
        break;
      }

      // optional uint32 colorindex = 10;
      case 10: {
        if (tag == 80) {
         parse_colorindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &colorindex_)));
          set_has_colorindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_x;
        break;
      }

      // optional float x = 11 [default = 0];
      case 11: {
        if (tag == 93) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_y;
        break;
      }

      // optional float y = 12 [default = 0];
      case 12: {
        if (tag == 101) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(109)) goto parse_z;
        break;
      }

      // optional float z = 13 [default = 0];
      case 13: {
        if (tag == 109) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobZone)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobZone)
  return false;
#undef DO_
}

void BlobZone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobZone)
  // optional uint32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // optional uint32 zoneid = 2;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zoneid(), output);
  }

  // optional uint32 mapid = 3;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mapid(), output);
  }

  // optional bytes cmd = 4;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->cmd(), output);
  }

  // optional uint32 pastzoneid = 5;
  if (has_pastzoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->pastzoneid(), output);
  }

  // repeated .Cmd.RaidZone raidzonelist = 6;
  for (int i = 0; i < this->raidzonelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->raidzonelist(i), output);
  }

  // optional uint32 effectivetime = 7;
  if (has_effectivetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->effectivetime(), output);
  }

  // optional uint32 type = 8 [default = 0];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->type(), output);
  }

  // optional uint64 roomid = 9;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->roomid(), output);
  }

  // optional uint32 colorindex = 10;
  if (has_colorindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->colorindex(), output);
  }

  // optional float x = 11 [default = 0];
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->x(), output);
  }

  // optional float y = 12 [default = 0];
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->y(), output);
  }

  // optional float z = 13 [default = 0];
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobZone)
}

::google::protobuf::uint8* BlobZone::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobZone)
  // optional uint32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // optional uint32 zoneid = 2;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zoneid(), target);
  }

  // optional uint32 mapid = 3;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mapid(), target);
  }

  // optional bytes cmd = 4;
  if (has_cmd()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->cmd(), target);
  }

  // optional uint32 pastzoneid = 5;
  if (has_pastzoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->pastzoneid(), target);
  }

  // repeated .Cmd.RaidZone raidzonelist = 6;
  for (int i = 0; i < this->raidzonelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->raidzonelist(i), target);
  }

  // optional uint32 effectivetime = 7;
  if (has_effectivetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->effectivetime(), target);
  }

  // optional uint32 type = 8 [default = 0];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->type(), target);
  }

  // optional uint64 roomid = 9;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->roomid(), target);
  }

  // optional uint32 colorindex = 10;
  if (has_colorindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->colorindex(), target);
  }

  // optional float x = 11 [default = 0];
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->x(), target);
  }

  // optional float y = 12 [default = 0];
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->y(), target);
  }

  // optional float z = 13 [default = 0];
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobZone)
  return target;
}

int BlobZone::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional uint32 zoneid = 2;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint32 mapid = 3;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

    // optional bytes cmd = 4;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cmd());
    }

    // optional uint32 pastzoneid = 5;
    if (has_pastzoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pastzoneid());
    }

    // optional uint32 effectivetime = 7;
    if (has_effectivetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effectivetime());
    }

    // optional uint32 type = 8 [default = 0];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 roomid = 9;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // optional uint32 colorindex = 10;
    if (has_colorindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->colorindex());
    }

    // optional float x = 11 [default = 0];
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 12 [default = 0];
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional float z = 13 [default = 0];
    if (has_z()) {
      total_size += 1 + 4;
    }

  }
  // repeated .Cmd.RaidZone raidzonelist = 6;
  total_size += 1 * this->raidzonelist_size();
  for (int i = 0; i < this->raidzonelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->raidzonelist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobZone::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobZone* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobZone*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobZone::MergeFrom(const BlobZone& from) {
  GOOGLE_CHECK_NE(&from, this);
  raidzonelist_.MergeFrom(from.raidzonelist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_pastzoneid()) {
      set_pastzoneid(from.pastzoneid());
    }
    if (from.has_effectivetime()) {
      set_effectivetime(from.effectivetime());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_colorindex()) {
      set_colorindex(from.colorindex());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobZone::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobZone::CopyFrom(const BlobZone& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobZone::IsInitialized() const {

  return true;
}

void BlobZone::Swap(BlobZone* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(mapid_, other->mapid_);
    std::swap(cmd_, other->cmd_);
    std::swap(pastzoneid_, other->pastzoneid_);
    raidzonelist_.Swap(&other->raidzonelist_);
    std::swap(effectivetime_, other->effectivetime_);
    std::swap(type_, other->type_);
    std::swap(roomid_, other->roomid_);
    std::swap(colorindex_, other->colorindex_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobZone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobZone_descriptor_;
  metadata.reflection = BlobZone_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobGuild::kInfoFieldNumber;
#endif  // !_MSC_VER

BlobGuild::BlobGuild()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobGuild)
}

void BlobGuild::InitAsDefaultInstance() {
  info_ = const_cast< ::Cmd::GuildInfo*>(&::Cmd::GuildInfo::default_instance());
}

BlobGuild::BlobGuild(const BlobGuild& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobGuild)
}

void BlobGuild::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobGuild::~BlobGuild() {
  // @@protoc_insertion_point(destructor:Cmd.BlobGuild)
  SharedDtor();
}

void BlobGuild::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void BlobGuild::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobGuild::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobGuild_descriptor_;
}

const BlobGuild& BlobGuild::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobGuild* BlobGuild::default_instance_ = NULL;

BlobGuild* BlobGuild::New() const {
  return new BlobGuild;
}

void BlobGuild::Clear() {
  if (has_info()) {
    if (info_ != NULL) info_->::Cmd::GuildInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobGuild::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobGuild)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.GuildInfo info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobGuild)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobGuild)
  return false;
#undef DO_
}

void BlobGuild::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobGuild)
  // optional .Cmd.GuildInfo info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobGuild)
}

::google::protobuf::uint8* BlobGuild::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobGuild)
  // optional .Cmd.GuildInfo info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobGuild)
  return target;
}

int BlobGuild::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.GuildInfo info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobGuild::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobGuild* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobGuild*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobGuild::MergeFrom(const BlobGuild& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::Cmd::GuildInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobGuild::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobGuild::CopyFrom(const BlobGuild& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobGuild::IsInitialized() const {

  return true;
}

void BlobGuild::Swap(BlobGuild* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobGuild::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobGuild_descriptor_;
  metadata.reflection = BlobGuild_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobTeam::kInfoFieldNumber;
#endif  // !_MSC_VER

BlobTeam::BlobTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobTeam)
}

void BlobTeam::InitAsDefaultInstance() {
  info_ = const_cast< ::Cmd::TeamInfo*>(&::Cmd::TeamInfo::default_instance());
}

BlobTeam::BlobTeam(const BlobTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobTeam)
}

void BlobTeam::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobTeam::~BlobTeam() {
  // @@protoc_insertion_point(destructor:Cmd.BlobTeam)
  SharedDtor();
}

void BlobTeam::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void BlobTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobTeam_descriptor_;
}

const BlobTeam& BlobTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobTeam* BlobTeam::default_instance_ = NULL;

BlobTeam* BlobTeam::New() const {
  return new BlobTeam;
}

void BlobTeam::Clear() {
  if (has_info()) {
    if (info_ != NULL) info_->::Cmd::TeamInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobTeam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.TeamInfo info = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobTeam)
  return false;
#undef DO_
}

void BlobTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobTeam)
  // optional .Cmd.TeamInfo info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobTeam)
}

::google::protobuf::uint8* BlobTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobTeam)
  // optional .Cmd.TeamInfo info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobTeam)
  return target;
}

int BlobTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.TeamInfo info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobTeam::MergeFrom(const BlobTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::Cmd::TeamInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobTeam::CopyFrom(const BlobTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobTeam::IsInitialized() const {

  return true;
}

void BlobTeam::Swap(BlobTeam* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobTeam_descriptor_;
  metadata.reflection = BlobTeam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobUserZone::kInfosFieldNumber;
#endif  // !_MSC_VER

BlobUserZone::BlobUserZone()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobUserZone)
}

void BlobUserZone::InitAsDefaultInstance() {
}

BlobUserZone::BlobUserZone(const BlobUserZone& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobUserZone)
}

void BlobUserZone::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobUserZone::~BlobUserZone() {
  // @@protoc_insertion_point(destructor:Cmd.BlobUserZone)
  SharedDtor();
}

void BlobUserZone::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobUserZone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobUserZone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobUserZone_descriptor_;
}

const BlobUserZone& BlobUserZone::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobUserZone* BlobUserZone::default_instance_ = NULL;

BlobUserZone* BlobUserZone::New() const {
  return new BlobUserZone;
}

void BlobUserZone::Clear() {
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobUserZone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobUserZone)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Cmd.RecentZoneInfo infos = 3;
      case 3: {
        if (tag == 26) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_infos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobUserZone)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobUserZone)
  return false;
#undef DO_
}

void BlobUserZone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobUserZone)
  // repeated .Cmd.RecentZoneInfo infos = 3;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobUserZone)
}

::google::protobuf::uint8* BlobUserZone::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobUserZone)
  // repeated .Cmd.RecentZoneInfo infos = 3;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobUserZone)
  return target;
}

int BlobUserZone::ByteSize() const {
  int total_size = 0;

  // repeated .Cmd.RecentZoneInfo infos = 3;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobUserZone::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobUserZone* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobUserZone*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobUserZone::MergeFrom(const BlobUserZone& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobUserZone::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobUserZone::CopyFrom(const BlobUserZone& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobUserZone::IsInitialized() const {

  return true;
}

void BlobUserZone::Swap(BlobUserZone* other) {
  if (other != this) {
    infos_.Swap(&other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobUserZone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobUserZone_descriptor_;
  metadata.reflection = BlobUserZone_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobAccQuest::kAcceptIdsFieldNumber;
const int BlobAccQuest::kChoiceIdsFieldNumber;
const int BlobAccQuest::kVersionFieldNumber;
#endif  // !_MSC_VER

BlobAccQuest::BlobAccQuest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobAccQuest)
}

void BlobAccQuest::InitAsDefaultInstance() {
}

BlobAccQuest::BlobAccQuest(const BlobAccQuest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobAccQuest)
}

void BlobAccQuest::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobAccQuest::~BlobAccQuest() {
  // @@protoc_insertion_point(destructor:Cmd.BlobAccQuest)
  SharedDtor();
}

void BlobAccQuest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobAccQuest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobAccQuest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobAccQuest_descriptor_;
}

const BlobAccQuest& BlobAccQuest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobAccQuest* BlobAccQuest::default_instance_ = NULL;

BlobAccQuest* BlobAccQuest::New() const {
  return new BlobAccQuest;
}

void BlobAccQuest::Clear() {
  version_ = 0u;
  accept_ids_.Clear();
  choice_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobAccQuest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobAccQuest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 accept_ids = 1;
      case 1: {
        if (tag == 8) {
         parse_accept_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_accept_ids())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_accept_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_accept_ids;
        if (input->ExpectTag(16)) goto parse_choice_ids;
        break;
      }

      // repeated uint32 choice_ids = 2;
      case 2: {
        if (tag == 16) {
         parse_choice_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_choice_ids())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_choice_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_choice_ids;
        if (input->ExpectTag(24)) goto parse_version;
        break;
      }

      // optional uint32 version = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobAccQuest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobAccQuest)
  return false;
#undef DO_
}

void BlobAccQuest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobAccQuest)
  // repeated uint32 accept_ids = 1;
  for (int i = 0; i < this->accept_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->accept_ids(i), output);
  }

  // repeated uint32 choice_ids = 2;
  for (int i = 0; i < this->choice_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->choice_ids(i), output);
  }

  // optional uint32 version = 3 [default = 0];
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobAccQuest)
}

::google::protobuf::uint8* BlobAccQuest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobAccQuest)
  // repeated uint32 accept_ids = 1;
  for (int i = 0; i < this->accept_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->accept_ids(i), target);
  }

  // repeated uint32 choice_ids = 2;
  for (int i = 0; i < this->choice_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->choice_ids(i), target);
  }

  // optional uint32 version = 3 [default = 0];
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobAccQuest)
  return target;
}

int BlobAccQuest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional uint32 version = 3 [default = 0];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

  }
  // repeated uint32 accept_ids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->accept_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->accept_ids(i));
    }
    total_size += 1 * this->accept_ids_size() + data_size;
  }

  // repeated uint32 choice_ids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->choice_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->choice_ids(i));
    }
    total_size += 1 * this->choice_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobAccQuest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobAccQuest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobAccQuest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobAccQuest::MergeFrom(const BlobAccQuest& from) {
  GOOGLE_CHECK_NE(&from, this);
  accept_ids_.MergeFrom(from.accept_ids_);
  choice_ids_.MergeFrom(from.choice_ids_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobAccQuest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobAccQuest::CopyFrom(const BlobAccQuest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobAccQuest::IsInitialized() const {

  return true;
}

void BlobAccQuest::Swap(BlobAccQuest* other) {
  if (other != this) {
    accept_ids_.Swap(&other->accept_ids_);
    choice_ids_.Swap(&other->choice_ids_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobAccQuest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobAccQuest_descriptor_;
  metadata.reflection = BlobAccQuest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobGlobalTower::kInfoFieldNumber;
const int BlobGlobalTower::kVarFieldNumber;
#endif  // !_MSC_VER

BlobGlobalTower::BlobGlobalTower()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobGlobalTower)
}

void BlobGlobalTower::InitAsDefaultInstance() {
  info_ = const_cast< ::Cmd::TowerInfo*>(&::Cmd::TowerInfo::default_instance());
  var_ = const_cast< ::Cmd::BlobVar*>(&::Cmd::BlobVar::default_instance());
}

BlobGlobalTower::BlobGlobalTower(const BlobGlobalTower& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobGlobalTower)
}

void BlobGlobalTower::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  var_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobGlobalTower::~BlobGlobalTower() {
  // @@protoc_insertion_point(destructor:Cmd.BlobGlobalTower)
  SharedDtor();
}

void BlobGlobalTower::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
    delete var_;
  }
}

void BlobGlobalTower::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobGlobalTower::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobGlobalTower_descriptor_;
}

const BlobGlobalTower& BlobGlobalTower::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobGlobalTower* BlobGlobalTower::default_instance_ = NULL;

BlobGlobalTower* BlobGlobalTower::New() const {
  return new BlobGlobalTower;
}

void BlobGlobalTower::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_info()) {
      if (info_ != NULL) info_->::Cmd::TowerInfo::Clear();
    }
    if (has_var()) {
      if (var_ != NULL) var_->::Cmd::BlobVar::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobGlobalTower::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobGlobalTower)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.TowerInfo info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_var;
        break;
      }

      // optional .Cmd.BlobVar var = 2;
      case 2: {
        if (tag == 18) {
         parse_var:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_var()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobGlobalTower)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobGlobalTower)
  return false;
#undef DO_
}

void BlobGlobalTower::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobGlobalTower)
  // optional .Cmd.TowerInfo info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  // optional .Cmd.BlobVar var = 2;
  if (has_var()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->var(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobGlobalTower)
}

::google::protobuf::uint8* BlobGlobalTower::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobGlobalTower)
  // optional .Cmd.TowerInfo info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  // optional .Cmd.BlobVar var = 2;
  if (has_var()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->var(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobGlobalTower)
  return target;
}

int BlobGlobalTower::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.TowerInfo info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // optional .Cmd.BlobVar var = 2;
    if (has_var()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->var());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobGlobalTower::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobGlobalTower* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobGlobalTower*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobGlobalTower::MergeFrom(const BlobGlobalTower& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::Cmd::TowerInfo::MergeFrom(from.info());
    }
    if (from.has_var()) {
      mutable_var()->::Cmd::BlobVar::MergeFrom(from.var());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobGlobalTower::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobGlobalTower::CopyFrom(const BlobGlobalTower& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobGlobalTower::IsInitialized() const {

  return true;
}

void BlobGlobalTower::Swap(BlobGlobalTower* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(var_, other->var_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobGlobalTower::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobGlobalTower_descriptor_;
  metadata.reflection = BlobGlobalTower_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GlobalSocialFocus::kGuidFieldNumber;
const int GlobalSocialFocus::kGuidsFieldNumber;
#endif  // !_MSC_VER

GlobalSocialFocus::GlobalSocialFocus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GlobalSocialFocus)
}

void GlobalSocialFocus::InitAsDefaultInstance() {
}

GlobalSocialFocus::GlobalSocialFocus(const GlobalSocialFocus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GlobalSocialFocus)
}

void GlobalSocialFocus::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GlobalSocialFocus::~GlobalSocialFocus() {
  // @@protoc_insertion_point(destructor:Cmd.GlobalSocialFocus)
  SharedDtor();
}

void GlobalSocialFocus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GlobalSocialFocus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GlobalSocialFocus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GlobalSocialFocus_descriptor_;
}

const GlobalSocialFocus& GlobalSocialFocus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

GlobalSocialFocus* GlobalSocialFocus::default_instance_ = NULL;

GlobalSocialFocus* GlobalSocialFocus::New() const {
  return new GlobalSocialFocus;
}

void GlobalSocialFocus::Clear() {
  guid_ = GOOGLE_ULONGLONG(0);
  guids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GlobalSocialFocus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GlobalSocialFocus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 guid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guids;
        break;
      }

      // repeated uint64 guids = 2;
      case 2: {
        if (tag == 16) {
         parse_guids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_guids())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_guids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GlobalSocialFocus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GlobalSocialFocus)
  return false;
#undef DO_
}

void GlobalSocialFocus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GlobalSocialFocus)
  // optional uint64 guid = 1 [default = 0];
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guid(), output);
  }

  // repeated uint64 guids = 2;
  for (int i = 0; i < this->guids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->guids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GlobalSocialFocus)
}

::google::protobuf::uint8* GlobalSocialFocus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GlobalSocialFocus)
  // optional uint64 guid = 1 [default = 0];
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guid(), target);
  }

  // repeated uint64 guids = 2;
  for (int i = 0; i < this->guids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->guids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GlobalSocialFocus)
  return target;
}

int GlobalSocialFocus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 guid = 1 [default = 0];
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

  }
  // repeated uint64 guids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->guids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->guids(i));
    }
    total_size += 1 * this->guids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GlobalSocialFocus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GlobalSocialFocus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GlobalSocialFocus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GlobalSocialFocus::MergeFrom(const GlobalSocialFocus& from) {
  GOOGLE_CHECK_NE(&from, this);
  guids_.MergeFrom(from.guids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GlobalSocialFocus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GlobalSocialFocus::CopyFrom(const GlobalSocialFocus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalSocialFocus::IsInitialized() const {

  return true;
}

void GlobalSocialFocus::Swap(GlobalSocialFocus* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    guids_.Swap(&other->guids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GlobalSocialFocus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GlobalSocialFocus_descriptor_;
  metadata.reflection = GlobalSocialFocus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobGlobalSociality::kApplysFieldNumber;
const int BlobGlobalSociality::kFocussFieldNumber;
#endif  // !_MSC_VER

BlobGlobalSociality::BlobGlobalSociality()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobGlobalSociality)
}

void BlobGlobalSociality::InitAsDefaultInstance() {
}

BlobGlobalSociality::BlobGlobalSociality(const BlobGlobalSociality& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobGlobalSociality)
}

void BlobGlobalSociality::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobGlobalSociality::~BlobGlobalSociality() {
  // @@protoc_insertion_point(destructor:Cmd.BlobGlobalSociality)
  SharedDtor();
}

void BlobGlobalSociality::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobGlobalSociality::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobGlobalSociality::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobGlobalSociality_descriptor_;
}

const BlobGlobalSociality& BlobGlobalSociality::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobGlobalSociality* BlobGlobalSociality::default_instance_ = NULL;

BlobGlobalSociality* BlobGlobalSociality::New() const {
  return new BlobGlobalSociality;
}

void BlobGlobalSociality::Clear() {
  applys_.Clear();
  focuss_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobGlobalSociality::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobGlobalSociality)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 applys = 1;
      case 1: {
        if (tag == 8) {
         parse_applys:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_applys())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_applys())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_applys;
        if (input->ExpectTag(18)) goto parse_focuss;
        break;
      }

      // repeated .Cmd.GlobalSocialFocus focuss = 2;
      case 2: {
        if (tag == 18) {
         parse_focuss:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_focuss()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_focuss;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobGlobalSociality)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobGlobalSociality)
  return false;
#undef DO_
}

void BlobGlobalSociality::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobGlobalSociality)
  // repeated uint64 applys = 1;
  for (int i = 0; i < this->applys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->applys(i), output);
  }

  // repeated .Cmd.GlobalSocialFocus focuss = 2;
  for (int i = 0; i < this->focuss_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->focuss(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobGlobalSociality)
}

::google::protobuf::uint8* BlobGlobalSociality::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobGlobalSociality)
  // repeated uint64 applys = 1;
  for (int i = 0; i < this->applys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->applys(i), target);
  }

  // repeated .Cmd.GlobalSocialFocus focuss = 2;
  for (int i = 0; i < this->focuss_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->focuss(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobGlobalSociality)
  return target;
}

int BlobGlobalSociality::ByteSize() const {
  int total_size = 0;

  // repeated uint64 applys = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->applys_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->applys(i));
    }
    total_size += 1 * this->applys_size() + data_size;
  }

  // repeated .Cmd.GlobalSocialFocus focuss = 2;
  total_size += 1 * this->focuss_size();
  for (int i = 0; i < this->focuss_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->focuss(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobGlobalSociality::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobGlobalSociality* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobGlobalSociality*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobGlobalSociality::MergeFrom(const BlobGlobalSociality& from) {
  GOOGLE_CHECK_NE(&from, this);
  applys_.MergeFrom(from.applys_);
  focuss_.MergeFrom(from.focuss_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobGlobalSociality::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobGlobalSociality::CopyFrom(const BlobGlobalSociality& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobGlobalSociality::IsInitialized() const {

  return true;
}

void BlobGlobalSociality::Swap(BlobGlobalSociality* other) {
  if (other != this) {
    applys_.Swap(&other->applys_);
    focuss_.Swap(&other->focuss_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobGlobalSociality::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobGlobalSociality_descriptor_;
  metadata.reflection = BlobGlobalSociality_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChargeData::kTimeFieldNumber;
const int ChargeData::kMoneyFieldNumber;
#endif  // !_MSC_VER

ChargeData::ChargeData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ChargeData)
}

void ChargeData::InitAsDefaultInstance() {
}

ChargeData::ChargeData(const ChargeData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ChargeData)
}

void ChargeData::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0u;
  money_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChargeData::~ChargeData() {
  // @@protoc_insertion_point(destructor:Cmd.ChargeData)
  SharedDtor();
}

void ChargeData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChargeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChargeData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChargeData_descriptor_;
}

const ChargeData& ChargeData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

ChargeData* ChargeData::default_instance_ = NULL;

ChargeData* ChargeData::New() const {
  return new ChargeData;
}

void ChargeData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ChargeData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(money_, time_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChargeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ChargeData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_money;
        break;
      }

      // optional uint64 money = 2;
      case 2: {
        if (tag == 16) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ChargeData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ChargeData)
  return false;
#undef DO_
}

void ChargeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ChargeData)
  // optional uint32 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->time(), output);
  }

  // optional uint64 money = 2;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->money(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ChargeData)
}

::google::protobuf::uint8* ChargeData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ChargeData)
  // optional uint32 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->time(), target);
  }

  // optional uint64 money = 2;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->money(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ChargeData)
  return target;
}

int ChargeData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional uint64 money = 2;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->money());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChargeData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChargeData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChargeData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChargeData::MergeFrom(const ChargeData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChargeData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChargeData::CopyFrom(const ChargeData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChargeData::IsInitialized() const {

  return true;
}

void ChargeData::Swap(ChargeData* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(money_, other->money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChargeData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChargeData_descriptor_;
  metadata.reflection = ChargeData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobDeposit::kTypeDatasFieldNumber;
const int BlobDeposit::kCardDatasFieldNumber;
const int BlobDeposit::kChargeDatasFieldNumber;
const int BlobDeposit::kUsedcardsFieldNumber;
const int BlobDeposit::kHasquotaFieldNumber;
const int BlobDeposit::kQuotaDetailFieldNumber;
const int BlobDeposit::kQuotaLogFieldNumber;
const int BlobDeposit::kGetitemFieldNumber;
const int BlobDeposit::kQuotaLockFieldNumber;
#endif  // !_MSC_VER

BlobDeposit::BlobDeposit()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobDeposit)
}

void BlobDeposit::InitAsDefaultInstance() {
}

BlobDeposit::BlobDeposit(const BlobDeposit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobDeposit)
}

void BlobDeposit::SharedCtor() {
  _cached_size_ = 0;
  hasquota_ = false;
  getitem_ = false;
  quota_lock_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobDeposit::~BlobDeposit() {
  // @@protoc_insertion_point(destructor:Cmd.BlobDeposit)
  SharedDtor();
}

void BlobDeposit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobDeposit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobDeposit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobDeposit_descriptor_;
}

const BlobDeposit& BlobDeposit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobDeposit* BlobDeposit::default_instance_ = NULL;

BlobDeposit* BlobDeposit::New() const {
  return new BlobDeposit;
}

void BlobDeposit::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BlobDeposit*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(hasquota_, getitem_);
  quota_lock_ = GOOGLE_ULONGLONG(0);

#undef OFFSET_OF_FIELD_
#undef ZR_

  typedatas_.Clear();
  carddatas_.Clear();
  chargedatas_.Clear();
  usedcards_.Clear();
  quota_detail_.Clear();
  quota_log_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobDeposit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobDeposit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Cmd.DepositTypeData typeDatas = 1;
      case 1: {
        if (tag == 10) {
         parse_typeDatas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_typedatas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_typeDatas;
        if (input->ExpectTag(18)) goto parse_cardDatas;
        break;
      }

      // repeated .Cmd.DepositCardData cardDatas = 2;
      case 2: {
        if (tag == 18) {
         parse_cardDatas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_carddatas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cardDatas;
        if (input->ExpectTag(26)) goto parse_chargeDatas;
        break;
      }

      // repeated .Cmd.ChargeData chargeDatas = 3;
      case 3: {
        if (tag == 26) {
         parse_chargeDatas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chargedatas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_chargeDatas;
        if (input->ExpectTag(32)) goto parse_usedcards;
        break;
      }

      // repeated uint32 usedcards = 4;
      case 4: {
        if (tag == 32) {
         parse_usedcards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_usedcards())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_usedcards())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_usedcards;
        if (input->ExpectTag(40)) goto parse_hasquota;
        break;
      }

      // optional bool hasquota = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_hasquota:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasquota_)));
          set_has_hasquota();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_quota_detail;
        break;
      }

      // repeated .Cmd.QuotaDetail quota_detail = 6;
      case 6: {
        if (tag == 50) {
         parse_quota_detail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_quota_detail()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_quota_detail;
        if (input->ExpectTag(58)) goto parse_quota_log;
        break;
      }

      // repeated .Cmd.QuotaLog quota_log = 7;
      case 7: {
        if (tag == 58) {
         parse_quota_log:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_quota_log()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_quota_log;
        if (input->ExpectTag(64)) goto parse_getitem;
        break;
      }

      // optional bool getitem = 8 [default = false];
      case 8: {
        if (tag == 64) {
         parse_getitem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &getitem_)));
          set_has_getitem();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_quota_lock;
        break;
      }

      // optional uint64 quota_lock = 9 [default = 0];
      case 9: {
        if (tag == 72) {
         parse_quota_lock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &quota_lock_)));
          set_has_quota_lock();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobDeposit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobDeposit)
  return false;
#undef DO_
}

void BlobDeposit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobDeposit)
  // repeated .Cmd.DepositTypeData typeDatas = 1;
  for (int i = 0; i < this->typedatas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->typedatas(i), output);
  }

  // repeated .Cmd.DepositCardData cardDatas = 2;
  for (int i = 0; i < this->carddatas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->carddatas(i), output);
  }

  // repeated .Cmd.ChargeData chargeDatas = 3;
  for (int i = 0; i < this->chargedatas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->chargedatas(i), output);
  }

  // repeated uint32 usedcards = 4;
  for (int i = 0; i < this->usedcards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->usedcards(i), output);
  }

  // optional bool hasquota = 5 [default = false];
  if (has_hasquota()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->hasquota(), output);
  }

  // repeated .Cmd.QuotaDetail quota_detail = 6;
  for (int i = 0; i < this->quota_detail_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->quota_detail(i), output);
  }

  // repeated .Cmd.QuotaLog quota_log = 7;
  for (int i = 0; i < this->quota_log_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->quota_log(i), output);
  }

  // optional bool getitem = 8 [default = false];
  if (has_getitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->getitem(), output);
  }

  // optional uint64 quota_lock = 9 [default = 0];
  if (has_quota_lock()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->quota_lock(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobDeposit)
}

::google::protobuf::uint8* BlobDeposit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobDeposit)
  // repeated .Cmd.DepositTypeData typeDatas = 1;
  for (int i = 0; i < this->typedatas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->typedatas(i), target);
  }

  // repeated .Cmd.DepositCardData cardDatas = 2;
  for (int i = 0; i < this->carddatas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->carddatas(i), target);
  }

  // repeated .Cmd.ChargeData chargeDatas = 3;
  for (int i = 0; i < this->chargedatas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->chargedatas(i), target);
  }

  // repeated uint32 usedcards = 4;
  for (int i = 0; i < this->usedcards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->usedcards(i), target);
  }

  // optional bool hasquota = 5 [default = false];
  if (has_hasquota()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->hasquota(), target);
  }

  // repeated .Cmd.QuotaDetail quota_detail = 6;
  for (int i = 0; i < this->quota_detail_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->quota_detail(i), target);
  }

  // repeated .Cmd.QuotaLog quota_log = 7;
  for (int i = 0; i < this->quota_log_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->quota_log(i), target);
  }

  // optional bool getitem = 8 [default = false];
  if (has_getitem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->getitem(), target);
  }

  // optional uint64 quota_lock = 9 [default = 0];
  if (has_quota_lock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->quota_lock(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobDeposit)
  return target;
}

int BlobDeposit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    // optional bool hasquota = 5 [default = false];
    if (has_hasquota()) {
      total_size += 1 + 1;
    }

    // optional bool getitem = 8 [default = false];
    if (has_getitem()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 quota_lock = 9 [default = 0];
    if (has_quota_lock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->quota_lock());
    }

  }
  // repeated .Cmd.DepositTypeData typeDatas = 1;
  total_size += 1 * this->typedatas_size();
  for (int i = 0; i < this->typedatas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->typedatas(i));
  }

  // repeated .Cmd.DepositCardData cardDatas = 2;
  total_size += 1 * this->carddatas_size();
  for (int i = 0; i < this->carddatas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->carddatas(i));
  }

  // repeated .Cmd.ChargeData chargeDatas = 3;
  total_size += 1 * this->chargedatas_size();
  for (int i = 0; i < this->chargedatas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chargedatas(i));
  }

  // repeated uint32 usedcards = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->usedcards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->usedcards(i));
    }
    total_size += 1 * this->usedcards_size() + data_size;
  }

  // repeated .Cmd.QuotaDetail quota_detail = 6;
  total_size += 1 * this->quota_detail_size();
  for (int i = 0; i < this->quota_detail_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->quota_detail(i));
  }

  // repeated .Cmd.QuotaLog quota_log = 7;
  total_size += 1 * this->quota_log_size();
  for (int i = 0; i < this->quota_log_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->quota_log(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobDeposit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobDeposit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobDeposit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobDeposit::MergeFrom(const BlobDeposit& from) {
  GOOGLE_CHECK_NE(&from, this);
  typedatas_.MergeFrom(from.typedatas_);
  carddatas_.MergeFrom(from.carddatas_);
  chargedatas_.MergeFrom(from.chargedatas_);
  usedcards_.MergeFrom(from.usedcards_);
  quota_detail_.MergeFrom(from.quota_detail_);
  quota_log_.MergeFrom(from.quota_log_);
  if (from._has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    if (from.has_hasquota()) {
      set_hasquota(from.hasquota());
    }
    if (from.has_getitem()) {
      set_getitem(from.getitem());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_quota_lock()) {
      set_quota_lock(from.quota_lock());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobDeposit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobDeposit::CopyFrom(const BlobDeposit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobDeposit::IsInitialized() const {

  return true;
}

void BlobDeposit::Swap(BlobDeposit* other) {
  if (other != this) {
    typedatas_.Swap(&other->typedatas_);
    carddatas_.Swap(&other->carddatas_);
    chargedatas_.Swap(&other->chargedatas_);
    usedcards_.Swap(&other->usedcards_);
    std::swap(hasquota_, other->hasquota_);
    quota_detail_.Swap(&other->quota_detail_);
    quota_log_.Swap(&other->quota_log_);
    std::swap(getitem_, other->getitem_);
    std::swap(quota_lock_, other->quota_lock_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobDeposit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobDeposit_descriptor_;
  metadata.reflection = BlobDeposit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobTicketData::kTypeFieldNumber;
const int BlobTicketData::kGuidFieldNumber;
const int BlobTicketData::kRetFieldNumber;
const int BlobTicketData::kTimeFieldNumber;
#endif  // !_MSC_VER

BlobTicketData::BlobTicketData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobTicketData)
}

void BlobTicketData::InitAsDefaultInstance() {
}

BlobTicketData::BlobTicketData(const BlobTicketData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobTicketData)
}

void BlobTicketData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 1;
  guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ret_ = 0;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobTicketData::~BlobTicketData() {
  // @@protoc_insertion_point(destructor:Cmd.BlobTicketData)
  SharedDtor();
}

void BlobTicketData::SharedDtor() {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guid_;
  }
  if (this != default_instance_) {
  }
}

void BlobTicketData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobTicketData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobTicketData_descriptor_;
}

const BlobTicketData& BlobTicketData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobTicketData* BlobTicketData::default_instance_ = NULL;

BlobTicketData* BlobTicketData::New() const {
  return new BlobTicketData;
}

void BlobTicketData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BlobTicketData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(ret_, time_);
    type_ = 1;
    if (has_guid()) {
      if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobTicketData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobTicketData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.ETicketType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ETicketType_IsValid(value)) {
            set_type(static_cast< ::Cmd::ETicketType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_guid;
        break;
      }

      // optional string guid = 2;
      case 2: {
        if (tag == 18) {
         parse_guid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guid().data(), this->guid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ret;
        break;
      }

      // optional .Cmd.ETicketRet ret = 3;
      case 3: {
        if (tag == 24) {
         parse_ret:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ETicketRet_IsValid(value)) {
            set_ret(static_cast< ::Cmd::ETicketRet >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }

      // optional uint32 time = 4;
      case 4: {
        if (tag == 32) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobTicketData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobTicketData)
  return false;
#undef DO_
}

void BlobTicketData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobTicketData)
  // optional .Cmd.ETicketType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->guid(), output);
  }

  // optional .Cmd.ETicketRet ret = 3;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->ret(), output);
  }

  // optional uint32 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobTicketData)
}

::google::protobuf::uint8* BlobTicketData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobTicketData)
  // optional .Cmd.ETicketType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->guid(), target);
  }

  // optional .Cmd.ETicketRet ret = 3;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->ret(), target);
  }

  // optional uint32 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobTicketData)
  return target;
}

int BlobTicketData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.ETicketType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guid());
    }

    // optional .Cmd.ETicketRet ret = 3;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

    // optional uint32 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobTicketData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobTicketData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobTicketData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobTicketData::MergeFrom(const BlobTicketData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobTicketData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobTicketData::CopyFrom(const BlobTicketData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobTicketData::IsInitialized() const {

  return true;
}

void BlobTicketData::Swap(BlobTicketData* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(guid_, other->guid_);
    std::swap(ret_, other->ret_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobTicketData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobTicketData_descriptor_;
  metadata.reflection = BlobTicketData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobTicketCacheCmd::kTypeFieldNumber;
const int BlobTicketCacheCmd::kGuidFieldNumber;
const int BlobTicketCacheCmd::kDataFieldNumber;
const int BlobTicketCacheCmd::kLenFieldNumber;
const int BlobTicketCacheCmd::kTimeFieldNumber;
#endif  // !_MSC_VER

BlobTicketCacheCmd::BlobTicketCacheCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobTicketCacheCmd)
}

void BlobTicketCacheCmd::InitAsDefaultInstance() {
}

BlobTicketCacheCmd::BlobTicketCacheCmd(const BlobTicketCacheCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobTicketCacheCmd)
}

void BlobTicketCacheCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 1;
  guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  len_ = 0u;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobTicketCacheCmd::~BlobTicketCacheCmd() {
  // @@protoc_insertion_point(destructor:Cmd.BlobTicketCacheCmd)
  SharedDtor();
}

void BlobTicketCacheCmd::SharedDtor() {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guid_;
  }
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void BlobTicketCacheCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobTicketCacheCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobTicketCacheCmd_descriptor_;
}

const BlobTicketCacheCmd& BlobTicketCacheCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobTicketCacheCmd* BlobTicketCacheCmd::default_instance_ = NULL;

BlobTicketCacheCmd* BlobTicketCacheCmd::New() const {
  return new BlobTicketCacheCmd;
}

void BlobTicketCacheCmd::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    type_ = 1;
    if (has_guid()) {
      if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guid_->clear();
      }
    }
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
    len_ = 0u;
    time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobTicketCacheCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobTicketCacheCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.ETicketCmdType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ETicketCmdType_IsValid(value)) {
            set_type(static_cast< ::Cmd::ETicketCmdType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_guid;
        break;
      }

      // optional string guid = 2;
      case 2: {
        if (tag == 18) {
         parse_guid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guid().data(), this->guid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional bytes data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_len;
        break;
      }

      // optional uint32 len = 4;
      case 4: {
        if (tag == 32) {
         parse_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &len_)));
          set_has_len();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_time;
        break;
      }

      // optional uint32 time = 5;
      case 5: {
        if (tag == 40) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobTicketCacheCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobTicketCacheCmd)
  return false;
#undef DO_
}

void BlobTicketCacheCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobTicketCacheCmd)
  // optional .Cmd.ETicketCmdType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->guid(), output);
  }

  // optional bytes data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  // optional uint32 len = 4;
  if (has_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->len(), output);
  }

  // optional uint32 time = 5;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobTicketCacheCmd)
}

::google::protobuf::uint8* BlobTicketCacheCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobTicketCacheCmd)
  // optional .Cmd.ETicketCmdType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->guid(), target);
  }

  // optional bytes data = 3;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  // optional uint32 len = 4;
  if (has_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->len(), target);
  }

  // optional uint32 time = 5;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobTicketCacheCmd)
  return target;
}

int BlobTicketCacheCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.ETicketCmdType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guid());
    }

    // optional bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional uint32 len = 4;
    if (has_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->len());
    }

    // optional uint32 time = 5;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobTicketCacheCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobTicketCacheCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobTicketCacheCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobTicketCacheCmd::MergeFrom(const BlobTicketCacheCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_len()) {
      set_len(from.len());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobTicketCacheCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobTicketCacheCmd::CopyFrom(const BlobTicketCacheCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobTicketCacheCmd::IsInitialized() const {

  return true;
}

void BlobTicketCacheCmd::Swap(BlobTicketCacheCmd* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(guid_, other->guid_);
    std::swap(data_, other->data_);
    std::swap(len_, other->len_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobTicketCacheCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobTicketCacheCmd_descriptor_;
  metadata.reflection = BlobTicketCacheCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobTicket::kTickdataFieldNumber;
const int BlobTicket::kCacheCmdsFieldNumber;
#endif  // !_MSC_VER

BlobTicket::BlobTicket()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobTicket)
}

void BlobTicket::InitAsDefaultInstance() {
}

BlobTicket::BlobTicket(const BlobTicket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobTicket)
}

void BlobTicket::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobTicket::~BlobTicket() {
  // @@protoc_insertion_point(destructor:Cmd.BlobTicket)
  SharedDtor();
}

void BlobTicket::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobTicket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobTicket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobTicket_descriptor_;
}

const BlobTicket& BlobTicket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobTicket* BlobTicket::default_instance_ = NULL;

BlobTicket* BlobTicket::New() const {
  return new BlobTicket;
}

void BlobTicket::Clear() {
  tickdata_.Clear();
  cache_cmds_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobTicket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobTicket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Cmd.BlobTicketData tickdata = 1;
      case 1: {
        if (tag == 10) {
         parse_tickdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tickdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_tickdata;
        if (input->ExpectTag(18)) goto parse_cache_cmds;
        break;
      }

      // repeated .Cmd.BlobTicketCacheCmd cache_cmds = 2;
      case 2: {
        if (tag == 18) {
         parse_cache_cmds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cache_cmds()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cache_cmds;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobTicket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobTicket)
  return false;
#undef DO_
}

void BlobTicket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobTicket)
  // repeated .Cmd.BlobTicketData tickdata = 1;
  for (int i = 0; i < this->tickdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tickdata(i), output);
  }

  // repeated .Cmd.BlobTicketCacheCmd cache_cmds = 2;
  for (int i = 0; i < this->cache_cmds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cache_cmds(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobTicket)
}

::google::protobuf::uint8* BlobTicket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobTicket)
  // repeated .Cmd.BlobTicketData tickdata = 1;
  for (int i = 0; i < this->tickdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tickdata(i), target);
  }

  // repeated .Cmd.BlobTicketCacheCmd cache_cmds = 2;
  for (int i = 0; i < this->cache_cmds_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cache_cmds(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobTicket)
  return target;
}

int BlobTicket::ByteSize() const {
  int total_size = 0;

  // repeated .Cmd.BlobTicketData tickdata = 1;
  total_size += 1 * this->tickdata_size();
  for (int i = 0; i < this->tickdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tickdata(i));
  }

  // repeated .Cmd.BlobTicketCacheCmd cache_cmds = 2;
  total_size += 1 * this->cache_cmds_size();
  for (int i = 0; i < this->cache_cmds_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cache_cmds(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobTicket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobTicket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobTicket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobTicket::MergeFrom(const BlobTicket& from) {
  GOOGLE_CHECK_NE(&from, this);
  tickdata_.MergeFrom(from.tickdata_);
  cache_cmds_.MergeFrom(from.cache_cmds_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobTicket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobTicket::CopyFrom(const BlobTicket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobTicket::IsInitialized() const {

  return true;
}

void BlobTicket::Swap(BlobTicket* other) {
  if (other != this) {
    tickdata_.Swap(&other->tickdata_);
    cache_cmds_.Swap(&other->cache_cmds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobTicket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobTicket_descriptor_;
  metadata.reflection = BlobTicket_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobCredit::kVersionFieldNumber;
const int BlobCredit::kCreditFieldNumber;
const int BlobCredit::kMonsterValueFieldNumber;
const int BlobCredit::kSavedtimeFieldNumber;
const int BlobCredit::kForbidtimeFieldNumber;
const int BlobCredit::kAuguryrewardFieldNumber;
const int BlobCredit::kShopFieldNumber;
const int BlobCredit::kVarFieldNumber;
const int BlobCredit::kMaxbaselvFieldNumber;
const int BlobCredit::kMaxbaselvResettimeFieldNumber;
const int BlobCredit::kAceventFieldNumber;
#endif  // !_MSC_VER

BlobCredit::BlobCredit()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobCredit)
}

void BlobCredit::InitAsDefaultInstance() {
  shop_ = const_cast< ::Cmd::BlobShopGotItem*>(&::Cmd::BlobShopGotItem::default_instance());
  var_ = const_cast< ::Cmd::BlobAccVar*>(&::Cmd::BlobAccVar::default_instance());
  acevent_ = const_cast< ::Cmd::BlobActivityEvent*>(&::Cmd::BlobActivityEvent::default_instance());
}

BlobCredit::BlobCredit(const BlobCredit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobCredit)
}

void BlobCredit::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  credit_ = 0;
  monster_value_ = 0u;
  savedtime_ = 0u;
  forbidtime_ = 0u;
  auguryreward_ = 0u;
  shop_ = NULL;
  var_ = NULL;
  maxbaselv_ = 0u;
  maxbaselv_resettime_ = 0u;
  acevent_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobCredit::~BlobCredit() {
  // @@protoc_insertion_point(destructor:Cmd.BlobCredit)
  SharedDtor();
}

void BlobCredit::SharedDtor() {
  if (this != default_instance_) {
    delete shop_;
    delete var_;
    delete acevent_;
  }
}

void BlobCredit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobCredit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobCredit_descriptor_;
}

const BlobCredit& BlobCredit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobCredit* BlobCredit::default_instance_ = NULL;

BlobCredit* BlobCredit::New() const {
  return new BlobCredit;
}

void BlobCredit::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BlobCredit*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(version_, auguryreward_);
    if (has_shop()) {
      if (shop_ != NULL) shop_->::Cmd::BlobShopGotItem::Clear();
    }
    if (has_var()) {
      if (var_ != NULL) var_->::Cmd::BlobAccVar::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 1792) {
    ZR_(maxbaselv_, maxbaselv_resettime_);
    if (has_acevent()) {
      if (acevent_ != NULL) acevent_->::Cmd::BlobActivityEvent::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobCredit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobCredit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_credit;
        break;
      }

      // optional int32 credit = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_credit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &credit_)));
          set_has_credit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_monster_value;
        break;
      }

      // optional uint32 monster_value = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_monster_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monster_value_)));
          set_has_monster_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_savedtime;
        break;
      }

      // optional uint32 savedtime = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_savedtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &savedtime_)));
          set_has_savedtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_forbidtime;
        break;
      }

      // optional uint32 forbidtime = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_forbidtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &forbidtime_)));
          set_has_forbidtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_auguryreward;
        break;
      }

      // optional uint32 auguryreward = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_auguryreward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &auguryreward_)));
          set_has_auguryreward();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_shop;
        break;
      }

      // optional .Cmd.BlobShopGotItem shop = 7;
      case 7: {
        if (tag == 58) {
         parse_shop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shop()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_var;
        break;
      }

      // optional .Cmd.BlobAccVar var = 8;
      case 8: {
        if (tag == 66) {
         parse_var:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_var()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_maxbaselv;
        break;
      }

      // optional uint32 maxbaselv = 9 [default = 0];
      case 9: {
        if (tag == 72) {
         parse_maxbaselv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxbaselv_)));
          set_has_maxbaselv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_maxbaselv_resettime;
        break;
      }

      // optional uint32 maxbaselv_resettime = 10 [default = 0];
      case 10: {
        if (tag == 80) {
         parse_maxbaselv_resettime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxbaselv_resettime_)));
          set_has_maxbaselv_resettime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_acevent;
        break;
      }

      // optional .Cmd.BlobActivityEvent acevent = 11;
      case 11: {
        if (tag == 90) {
         parse_acevent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_acevent()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobCredit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobCredit)
  return false;
#undef DO_
}

void BlobCredit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobCredit)
  // optional uint32 version = 1 [default = 0];
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // optional int32 credit = 2 [default = 0];
  if (has_credit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->credit(), output);
  }

  // optional uint32 monster_value = 3 [default = 0];
  if (has_monster_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->monster_value(), output);
  }

  // optional uint32 savedtime = 4 [default = 0];
  if (has_savedtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->savedtime(), output);
  }

  // optional uint32 forbidtime = 5 [default = 0];
  if (has_forbidtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->forbidtime(), output);
  }

  // optional uint32 auguryreward = 6 [default = 0];
  if (has_auguryreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->auguryreward(), output);
  }

  // optional .Cmd.BlobShopGotItem shop = 7;
  if (has_shop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->shop(), output);
  }

  // optional .Cmd.BlobAccVar var = 8;
  if (has_var()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->var(), output);
  }

  // optional uint32 maxbaselv = 9 [default = 0];
  if (has_maxbaselv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->maxbaselv(), output);
  }

  // optional uint32 maxbaselv_resettime = 10 [default = 0];
  if (has_maxbaselv_resettime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->maxbaselv_resettime(), output);
  }

  // optional .Cmd.BlobActivityEvent acevent = 11;
  if (has_acevent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->acevent(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobCredit)
}

::google::protobuf::uint8* BlobCredit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobCredit)
  // optional uint32 version = 1 [default = 0];
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // optional int32 credit = 2 [default = 0];
  if (has_credit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->credit(), target);
  }

  // optional uint32 monster_value = 3 [default = 0];
  if (has_monster_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->monster_value(), target);
  }

  // optional uint32 savedtime = 4 [default = 0];
  if (has_savedtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->savedtime(), target);
  }

  // optional uint32 forbidtime = 5 [default = 0];
  if (has_forbidtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->forbidtime(), target);
  }

  // optional uint32 auguryreward = 6 [default = 0];
  if (has_auguryreward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->auguryreward(), target);
  }

  // optional .Cmd.BlobShopGotItem shop = 7;
  if (has_shop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->shop(), target);
  }

  // optional .Cmd.BlobAccVar var = 8;
  if (has_var()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->var(), target);
  }

  // optional uint32 maxbaselv = 9 [default = 0];
  if (has_maxbaselv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->maxbaselv(), target);
  }

  // optional uint32 maxbaselv_resettime = 10 [default = 0];
  if (has_maxbaselv_resettime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->maxbaselv_resettime(), target);
  }

  // optional .Cmd.BlobActivityEvent acevent = 11;
  if (has_acevent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->acevent(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobCredit)
  return target;
}

int BlobCredit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 version = 1 [default = 0];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional int32 credit = 2 [default = 0];
    if (has_credit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->credit());
    }

    // optional uint32 monster_value = 3 [default = 0];
    if (has_monster_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monster_value());
    }

    // optional uint32 savedtime = 4 [default = 0];
    if (has_savedtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->savedtime());
    }

    // optional uint32 forbidtime = 5 [default = 0];
    if (has_forbidtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->forbidtime());
    }

    // optional uint32 auguryreward = 6 [default = 0];
    if (has_auguryreward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->auguryreward());
    }

    // optional .Cmd.BlobShopGotItem shop = 7;
    if (has_shop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shop());
    }

    // optional .Cmd.BlobAccVar var = 8;
    if (has_var()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->var());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 maxbaselv = 9 [default = 0];
    if (has_maxbaselv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxbaselv());
    }

    // optional uint32 maxbaselv_resettime = 10 [default = 0];
    if (has_maxbaselv_resettime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxbaselv_resettime());
    }

    // optional .Cmd.BlobActivityEvent acevent = 11;
    if (has_acevent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->acevent());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobCredit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobCredit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobCredit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobCredit::MergeFrom(const BlobCredit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_credit()) {
      set_credit(from.credit());
    }
    if (from.has_monster_value()) {
      set_monster_value(from.monster_value());
    }
    if (from.has_savedtime()) {
      set_savedtime(from.savedtime());
    }
    if (from.has_forbidtime()) {
      set_forbidtime(from.forbidtime());
    }
    if (from.has_auguryreward()) {
      set_auguryreward(from.auguryreward());
    }
    if (from.has_shop()) {
      mutable_shop()->::Cmd::BlobShopGotItem::MergeFrom(from.shop());
    }
    if (from.has_var()) {
      mutable_var()->::Cmd::BlobAccVar::MergeFrom(from.var());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_maxbaselv()) {
      set_maxbaselv(from.maxbaselv());
    }
    if (from.has_maxbaselv_resettime()) {
      set_maxbaselv_resettime(from.maxbaselv_resettime());
    }
    if (from.has_acevent()) {
      mutable_acevent()->::Cmd::BlobActivityEvent::MergeFrom(from.acevent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobCredit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobCredit::CopyFrom(const BlobCredit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobCredit::IsInitialized() const {

  return true;
}

void BlobCredit::Swap(BlobCredit* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(credit_, other->credit_);
    std::swap(monster_value_, other->monster_value_);
    std::swap(savedtime_, other->savedtime_);
    std::swap(forbidtime_, other->forbidtime_);
    std::swap(auguryreward_, other->auguryreward_);
    std::swap(shop_, other->shop_);
    std::swap(var_, other->var_);
    std::swap(maxbaselv_, other->maxbaselv_);
    std::swap(maxbaselv_resettime_, other->maxbaselv_resettime_);
    std::swap(acevent_, other->acevent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobCredit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobCredit_descriptor_;
  metadata.reflection = BlobCredit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobNewCredit::kVersionFieldNumber;
const int BlobNewCredit::kCreditFieldNumber;
const int BlobNewCredit::kMonsterValueFieldNumber;
const int BlobNewCredit::kSavedtimeFieldNumber;
const int BlobNewCredit::kForbidtimeFieldNumber;
#endif  // !_MSC_VER

BlobNewCredit::BlobNewCredit()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobNewCredit)
}

void BlobNewCredit::InitAsDefaultInstance() {
}

BlobNewCredit::BlobNewCredit(const BlobNewCredit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobNewCredit)
}

void BlobNewCredit::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  credit_ = 0;
  monster_value_ = 0u;
  savedtime_ = 0u;
  forbidtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobNewCredit::~BlobNewCredit() {
  // @@protoc_insertion_point(destructor:Cmd.BlobNewCredit)
  SharedDtor();
}

void BlobNewCredit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobNewCredit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobNewCredit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobNewCredit_descriptor_;
}

const BlobNewCredit& BlobNewCredit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobNewCredit* BlobNewCredit::default_instance_ = NULL;

BlobNewCredit* BlobNewCredit::New() const {
  return new BlobNewCredit;
}

void BlobNewCredit::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BlobNewCredit*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(version_, forbidtime_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobNewCredit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobNewCredit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_credit;
        break;
      }

      // optional int32 credit = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_credit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &credit_)));
          set_has_credit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_monster_value;
        break;
      }

      // optional uint32 monster_value = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_monster_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monster_value_)));
          set_has_monster_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_savedtime;
        break;
      }

      // optional uint32 savedtime = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_savedtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &savedtime_)));
          set_has_savedtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_forbidtime;
        break;
      }

      // optional uint32 forbidtime = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_forbidtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &forbidtime_)));
          set_has_forbidtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobNewCredit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobNewCredit)
  return false;
#undef DO_
}

void BlobNewCredit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobNewCredit)
  // optional uint32 version = 1 [default = 0];
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // optional int32 credit = 2 [default = 0];
  if (has_credit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->credit(), output);
  }

  // optional uint32 monster_value = 3 [default = 0];
  if (has_monster_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->monster_value(), output);
  }

  // optional uint32 savedtime = 4 [default = 0];
  if (has_savedtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->savedtime(), output);
  }

  // optional uint32 forbidtime = 5 [default = 0];
  if (has_forbidtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->forbidtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobNewCredit)
}

::google::protobuf::uint8* BlobNewCredit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobNewCredit)
  // optional uint32 version = 1 [default = 0];
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // optional int32 credit = 2 [default = 0];
  if (has_credit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->credit(), target);
  }

  // optional uint32 monster_value = 3 [default = 0];
  if (has_monster_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->monster_value(), target);
  }

  // optional uint32 savedtime = 4 [default = 0];
  if (has_savedtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->savedtime(), target);
  }

  // optional uint32 forbidtime = 5 [default = 0];
  if (has_forbidtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->forbidtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobNewCredit)
  return target;
}

int BlobNewCredit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 version = 1 [default = 0];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional int32 credit = 2 [default = 0];
    if (has_credit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->credit());
    }

    // optional uint32 monster_value = 3 [default = 0];
    if (has_monster_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monster_value());
    }

    // optional uint32 savedtime = 4 [default = 0];
    if (has_savedtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->savedtime());
    }

    // optional uint32 forbidtime = 5 [default = 0];
    if (has_forbidtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->forbidtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobNewCredit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobNewCredit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobNewCredit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobNewCredit::MergeFrom(const BlobNewCredit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_credit()) {
      set_credit(from.credit());
    }
    if (from.has_monster_value()) {
      set_monster_value(from.monster_value());
    }
    if (from.has_savedtime()) {
      set_savedtime(from.savedtime());
    }
    if (from.has_forbidtime()) {
      set_forbidtime(from.forbidtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobNewCredit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobNewCredit::CopyFrom(const BlobNewCredit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobNewCredit::IsInitialized() const {

  return true;
}

void BlobNewCredit::Swap(BlobNewCredit* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(credit_, other->credit_);
    std::swap(monster_value_, other->monster_value_);
    std::swap(savedtime_, other->savedtime_);
    std::swap(forbidtime_, other->forbidtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobNewCredit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobNewCredit_descriptor_;
  metadata.reflection = BlobNewCredit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChatCount::kTargetidFieldNumber;
const int ChatCount::kToChatFieldNumber;
const int ChatCount::kFromChatFieldNumber;
#endif  // !_MSC_VER

ChatCount::ChatCount()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ChatCount)
}

void ChatCount::InitAsDefaultInstance() {
}

ChatCount::ChatCount(const ChatCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ChatCount)
}

void ChatCount::SharedCtor() {
  _cached_size_ = 0;
  targetid_ = GOOGLE_ULONGLONG(0);
  to_chat_ = 0u;
  from_chat_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatCount::~ChatCount() {
  // @@protoc_insertion_point(destructor:Cmd.ChatCount)
  SharedDtor();
}

void ChatCount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChatCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatCount_descriptor_;
}

const ChatCount& ChatCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

ChatCount* ChatCount::default_instance_ = NULL;

ChatCount* ChatCount::New() const {
  return new ChatCount;
}

void ChatCount::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ChatCount*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(targetid_, from_chat_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ChatCount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 targetid = 2 [default = 0];
      case 2: {
        if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_to_chat;
        break;
      }

      // optional uint32 to_chat = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_to_chat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &to_chat_)));
          set_has_to_chat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_from_chat;
        break;
      }

      // optional uint32 from_chat = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_from_chat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_chat_)));
          set_has_from_chat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ChatCount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ChatCount)
  return false;
#undef DO_
}

void ChatCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ChatCount)
  // optional uint64 targetid = 2 [default = 0];
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->targetid(), output);
  }

  // optional uint32 to_chat = 3 [default = 0];
  if (has_to_chat()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->to_chat(), output);
  }

  // optional uint32 from_chat = 4 [default = 0];
  if (has_from_chat()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->from_chat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ChatCount)
}

::google::protobuf::uint8* ChatCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ChatCount)
  // optional uint64 targetid = 2 [default = 0];
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->targetid(), target);
  }

  // optional uint32 to_chat = 3 [default = 0];
  if (has_to_chat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->to_chat(), target);
  }

  // optional uint32 from_chat = 4 [default = 0];
  if (has_from_chat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->from_chat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ChatCount)
  return target;
}

int ChatCount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 targetid = 2 [default = 0];
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->targetid());
    }

    // optional uint32 to_chat = 3 [default = 0];
    if (has_to_chat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->to_chat());
    }

    // optional uint32 from_chat = 4 [default = 0];
    if (has_from_chat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->from_chat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatCount::MergeFrom(const ChatCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
    if (from.has_to_chat()) {
      set_to_chat(from.to_chat());
    }
    if (from.has_from_chat()) {
      set_from_chat(from.from_chat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatCount::CopyFrom(const ChatCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatCount::IsInitialized() const {

  return true;
}

void ChatCount::Swap(ChatCount* other) {
  if (other != this) {
    std::swap(targetid_, other->targetid_);
    std::swap(to_chat_, other->to_chat_);
    std::swap(from_chat_, other->from_chat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatCount_descriptor_;
  metadata.reflection = ChatCount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChatItem::kCharidFieldNumber;
const int ChatItem::kTimeFieldNumber;
const int ChatItem::kNameFieldNumber;
const int ChatItem::kMsgFieldNumber;
#endif  // !_MSC_VER

ChatItem::ChatItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ChatItem)
}

void ChatItem::InitAsDefaultInstance() {
}

ChatItem::ChatItem(const ChatItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ChatItem)
}

void ChatItem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  time_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatItem::~ChatItem() {
  // @@protoc_insertion_point(destructor:Cmd.ChatItem)
  SharedDtor();
}

void ChatItem::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void ChatItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatItem_descriptor_;
}

const ChatItem& ChatItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

ChatItem* ChatItem::default_instance_ = NULL;

ChatItem* ChatItem::New() const {
  return new ChatItem;
}

void ChatItem::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    charid_ = GOOGLE_ULONGLONG(0);
    time_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ChatItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 charid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional uint32 time = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_msg;
        break;
      }

      // optional string msg = 4;
      case 4: {
        if (tag == 34) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ChatItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ChatItem)
  return false;
#undef DO_
}

void ChatItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ChatItem)
  // optional uint64 charid = 1 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // optional uint32 time = 2 [default = 0];
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional string msg = 4;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ChatItem)
}

::google::protobuf::uint8* ChatItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ChatItem)
  // optional uint64 charid = 1 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // optional uint32 time = 2 [default = 0];
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional string msg = 4;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ChatItem)
  return target;
}

int ChatItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 charid = 1 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 time = 2 [default = 0];
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string msg = 4;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatItem::MergeFrom(const ChatItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatItem::CopyFrom(const ChatItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatItem::IsInitialized() const {

  return true;
}

void ChatItem::Swap(ChatItem* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(time_, other->time_);
    std::swap(name_, other->name_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatItem_descriptor_;
  metadata.reflection = ChatItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobChat::kCountsFieldNumber;
const int BlobChat::kSavelistFieldNumber;
const int BlobChat::kItemsFieldNumber;
#endif  // !_MSC_VER

BlobChat::BlobChat()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobChat)
}

void BlobChat::InitAsDefaultInstance() {
}

BlobChat::BlobChat(const BlobChat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobChat)
}

void BlobChat::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobChat::~BlobChat() {
  // @@protoc_insertion_point(destructor:Cmd.BlobChat)
  SharedDtor();
}

void BlobChat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobChat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobChat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobChat_descriptor_;
}

const BlobChat& BlobChat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobChat* BlobChat::default_instance_ = NULL;

BlobChat* BlobChat::New() const {
  return new BlobChat;
}

void BlobChat::Clear() {
  counts_.Clear();
  savelist_.Clear();
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobChat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobChat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Cmd.ChatCount counts = 1;
      case 1: {
        if (tag == 10) {
         parse_counts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_counts()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_counts;
        if (input->ExpectTag(16)) goto parse_savelist;
        break;
      }

      // repeated uint64 savelist = 2;
      case 2: {
        if (tag == 16) {
         parse_savelist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_savelist())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_savelist())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_savelist;
        if (input->ExpectTag(26)) goto parse_items;
        break;
      }

      // repeated .Cmd.ChatItem items = 3;
      case 3: {
        if (tag == 26) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobChat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobChat)
  return false;
#undef DO_
}

void BlobChat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobChat)
  // repeated .Cmd.ChatCount counts = 1;
  for (int i = 0; i < this->counts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->counts(i), output);
  }

  // repeated uint64 savelist = 2;
  for (int i = 0; i < this->savelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->savelist(i), output);
  }

  // repeated .Cmd.ChatItem items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobChat)
}

::google::protobuf::uint8* BlobChat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobChat)
  // repeated .Cmd.ChatCount counts = 1;
  for (int i = 0; i < this->counts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->counts(i), target);
  }

  // repeated uint64 savelist = 2;
  for (int i = 0; i < this->savelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->savelist(i), target);
  }

  // repeated .Cmd.ChatItem items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobChat)
  return target;
}

int BlobChat::ByteSize() const {
  int total_size = 0;

  // repeated .Cmd.ChatCount counts = 1;
  total_size += 1 * this->counts_size();
  for (int i = 0; i < this->counts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->counts(i));
  }

  // repeated uint64 savelist = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->savelist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->savelist(i));
    }
    total_size += 1 * this->savelist_size() + data_size;
  }

  // repeated .Cmd.ChatItem items = 3;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobChat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobChat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobChat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobChat::MergeFrom(const BlobChat& from) {
  GOOGLE_CHECK_NE(&from, this);
  counts_.MergeFrom(from.counts_);
  savelist_.MergeFrom(from.savelist_);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobChat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobChat::CopyFrom(const BlobChat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobChat::IsInitialized() const {

  return true;
}

void BlobChat::Swap(BlobChat* other) {
  if (other != this) {
    counts_.Swap(&other->counts_);
    savelist_.Swap(&other->savelist_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobChat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobChat_descriptor_;
  metadata.reflection = BlobChat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityCommonData::kNameFieldNumber;
const int ActivityCommonData::kParamsFieldNumber;
#endif  // !_MSC_VER

ActivityCommonData::ActivityCommonData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ActivityCommonData)
}

void ActivityCommonData::InitAsDefaultInstance() {
}

ActivityCommonData::ActivityCommonData(const ActivityCommonData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ActivityCommonData)
}

void ActivityCommonData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityCommonData::~ActivityCommonData() {
  // @@protoc_insertion_point(destructor:Cmd.ActivityCommonData)
  SharedDtor();
}

void ActivityCommonData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ActivityCommonData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityCommonData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityCommonData_descriptor_;
}

const ActivityCommonData& ActivityCommonData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

ActivityCommonData* ActivityCommonData::default_instance_ = NULL;

ActivityCommonData* ActivityCommonData::New() const {
  return new ActivityCommonData;
}

void ActivityCommonData::Clear() {
  if (has_name()) {
    if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      name_->clear();
    }
  }
  params_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityCommonData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ActivityCommonData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_params;
        break;
      }

      // repeated uint32 params = 2;
      case 2: {
        if (tag == 16) {
         parse_params:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_params())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_params())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_params;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ActivityCommonData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ActivityCommonData)
  return false;
#undef DO_
}

void ActivityCommonData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ActivityCommonData)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated uint32 params = 2;
  for (int i = 0; i < this->params_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->params(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ActivityCommonData)
}

::google::protobuf::uint8* ActivityCommonData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ActivityCommonData)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated uint32 params = 2;
  for (int i = 0; i < this->params_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->params(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ActivityCommonData)
  return target;
}

int ActivityCommonData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated uint32 params = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->params_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->params(i));
    }
    total_size += 1 * this->params_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityCommonData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityCommonData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityCommonData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityCommonData::MergeFrom(const ActivityCommonData& from) {
  GOOGLE_CHECK_NE(&from, this);
  params_.MergeFrom(from.params_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityCommonData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityCommonData::CopyFrom(const ActivityCommonData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityCommonData::IsInitialized() const {

  return true;
}

void ActivityCommonData::Swap(ActivityCommonData* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    params_.Swap(&other->params_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityCommonData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityCommonData_descriptor_;
  metadata.reflection = ActivityCommonData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobActivity::kVersionFieldNumber;
const int BlobActivity::kActivitydatasFieldNumber;
#endif  // !_MSC_VER

BlobActivity::BlobActivity()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobActivity)
}

void BlobActivity::InitAsDefaultInstance() {
}

BlobActivity::BlobActivity(const BlobActivity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobActivity)
}

void BlobActivity::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobActivity::~BlobActivity() {
  // @@protoc_insertion_point(destructor:Cmd.BlobActivity)
  SharedDtor();
}

void BlobActivity::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobActivity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobActivity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobActivity_descriptor_;
}

const BlobActivity& BlobActivity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobActivity* BlobActivity::default_instance_ = NULL;

BlobActivity* BlobActivity::New() const {
  return new BlobActivity;
}

void BlobActivity::Clear() {
  version_ = 0u;
  activitydatas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobActivity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobActivity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_activitydatas;
        break;
      }

      // repeated .Cmd.ActivityCommonData activitydatas = 2;
      case 2: {
        if (tag == 18) {
         parse_activitydatas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_activitydatas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_activitydatas;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobActivity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobActivity)
  return false;
#undef DO_
}

void BlobActivity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobActivity)
  // optional uint32 version = 1 [default = 0];
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // repeated .Cmd.ActivityCommonData activitydatas = 2;
  for (int i = 0; i < this->activitydatas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->activitydatas(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobActivity)
}

::google::protobuf::uint8* BlobActivity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobActivity)
  // optional uint32 version = 1 [default = 0];
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // repeated .Cmd.ActivityCommonData activitydatas = 2;
  for (int i = 0; i < this->activitydatas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->activitydatas(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobActivity)
  return target;
}

int BlobActivity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 version = 1 [default = 0];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

  }
  // repeated .Cmd.ActivityCommonData activitydatas = 2;
  total_size += 1 * this->activitydatas_size();
  for (int i = 0; i < this->activitydatas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->activitydatas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobActivity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobActivity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobActivity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobActivity::MergeFrom(const BlobActivity& from) {
  GOOGLE_CHECK_NE(&from, this);
  activitydatas_.MergeFrom(from.activitydatas_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobActivity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobActivity::CopyFrom(const BlobActivity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobActivity::IsInitialized() const {

  return true;
}

void BlobActivity::Swap(BlobActivity* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    activitydatas_.Swap(&other->activitydatas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobActivity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobActivity_descriptor_;
  metadata.reflection = BlobActivity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobRelation::kVersionFieldNumber;
const int BlobRelation::kBlackFieldNumber;
#endif  // !_MSC_VER

BlobRelation::BlobRelation()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobRelation)
}

void BlobRelation::InitAsDefaultInstance() {
}

BlobRelation::BlobRelation(const BlobRelation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobRelation)
}

void BlobRelation::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobRelation::~BlobRelation() {
  // @@protoc_insertion_point(destructor:Cmd.BlobRelation)
  SharedDtor();
}

void BlobRelation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobRelation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobRelation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobRelation_descriptor_;
}

const BlobRelation& BlobRelation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobRelation* BlobRelation::default_instance_ = NULL;

BlobRelation* BlobRelation::New() const {
  return new BlobRelation;
}

void BlobRelation::Clear() {
  version_ = 0u;
  black_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobRelation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobRelation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_black;
        break;
      }

      // repeated uint64 black = 2;
      case 2: {
        if (tag == 16) {
         parse_black:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_black())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_black())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_black;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobRelation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobRelation)
  return false;
#undef DO_
}

void BlobRelation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobRelation)
  // optional uint32 version = 1 [default = 0];
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // repeated uint64 black = 2;
  for (int i = 0; i < this->black_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->black(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobRelation)
}

::google::protobuf::uint8* BlobRelation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobRelation)
  // optional uint32 version = 1 [default = 0];
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // repeated uint64 black = 2;
  for (int i = 0; i < this->black_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->black(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobRelation)
  return target;
}

int BlobRelation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 version = 1 [default = 0];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

  }
  // repeated uint64 black = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->black_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->black(i));
    }
    total_size += 1 * this->black_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobRelation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobRelation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobRelation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobRelation::MergeFrom(const BlobRelation& from) {
  GOOGLE_CHECK_NE(&from, this);
  black_.MergeFrom(from.black_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobRelation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobRelation::CopyFrom(const BlobRelation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobRelation::IsInitialized() const {

  return true;
}

void BlobRelation::Swap(BlobRelation* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    black_.Swap(&other->black_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobRelation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobRelation_descriptor_;
  metadata.reflection = BlobRelation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShareNormal::kTypeFieldNumber;
const int ShareNormal::kValueFieldNumber;
#endif  // !_MSC_VER

ShareNormal::ShareNormal()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ShareNormal)
}

void ShareNormal::InitAsDefaultInstance() {
}

ShareNormal::ShareNormal(const ShareNormal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ShareNormal)
}

void ShareNormal::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShareNormal::~ShareNormal() {
  // @@protoc_insertion_point(destructor:Cmd.ShareNormal)
  SharedDtor();
}

void ShareNormal::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShareNormal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShareNormal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShareNormal_descriptor_;
}

const ShareNormal& ShareNormal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

ShareNormal* ShareNormal::default_instance_ = NULL;

ShareNormal* ShareNormal::New() const {
  return new ShareNormal;
}

void ShareNormal::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ShareNormal*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(value_, type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShareNormal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ShareNormal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.EShareDataType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EShareDataType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EShareDataType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional uint64 value = 2;
      case 2: {
        if (tag == 16) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ShareNormal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ShareNormal)
  return false;
#undef DO_
}

void ShareNormal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ShareNormal)
  // optional .Cmd.EShareDataType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint64 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ShareNormal)
}

::google::protobuf::uint8* ShareNormal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ShareNormal)
  // optional .Cmd.EShareDataType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint64 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ShareNormal)
  return target;
}

int ShareNormal::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.EShareDataType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint64 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShareNormal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShareNormal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShareNormal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShareNormal::MergeFrom(const ShareNormal& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShareNormal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShareNormal::CopyFrom(const ShareNormal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShareNormal::IsInitialized() const {

  return true;
}

void ShareNormal::Swap(ShareNormal* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShareNormal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShareNormal_descriptor_;
  metadata.reflection = ShareNormal_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShareCalcItem::kHighKeyFieldNumber;
const int ShareCalcItem::kLowKeyFieldNumber;
const int ShareCalcItem::kHighValueFieldNumber;
const int ShareCalcItem::kLowValueFieldNumber;
#endif  // !_MSC_VER

ShareCalcItem::ShareCalcItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ShareCalcItem)
}

void ShareCalcItem::InitAsDefaultInstance() {
}

ShareCalcItem::ShareCalcItem(const ShareCalcItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ShareCalcItem)
}

void ShareCalcItem::SharedCtor() {
  _cached_size_ = 0;
  high_key_ = 0u;
  low_key_ = 0u;
  high_value_ = 0u;
  low_value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShareCalcItem::~ShareCalcItem() {
  // @@protoc_insertion_point(destructor:Cmd.ShareCalcItem)
  SharedDtor();
}

void ShareCalcItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShareCalcItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShareCalcItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShareCalcItem_descriptor_;
}

const ShareCalcItem& ShareCalcItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

ShareCalcItem* ShareCalcItem::default_instance_ = NULL;

ShareCalcItem* ShareCalcItem::New() const {
  return new ShareCalcItem;
}

void ShareCalcItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ShareCalcItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(high_key_, low_value_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShareCalcItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ShareCalcItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 high_key = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &high_key_)));
          set_has_high_key();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_low_key;
        break;
      }

      // optional uint32 low_key = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_low_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &low_key_)));
          set_has_low_key();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_high_value;
        break;
      }

      // optional uint32 high_value = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_high_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &high_value_)));
          set_has_high_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_low_value;
        break;
      }

      // optional uint32 low_value = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_low_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &low_value_)));
          set_has_low_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ShareCalcItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ShareCalcItem)
  return false;
#undef DO_
}

void ShareCalcItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ShareCalcItem)
  // optional uint32 high_key = 1 [default = 0];
  if (has_high_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->high_key(), output);
  }

  // optional uint32 low_key = 2 [default = 0];
  if (has_low_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->low_key(), output);
  }

  // optional uint32 high_value = 3 [default = 0];
  if (has_high_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->high_value(), output);
  }

  // optional uint32 low_value = 4 [default = 0];
  if (has_low_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->low_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ShareCalcItem)
}

::google::protobuf::uint8* ShareCalcItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ShareCalcItem)
  // optional uint32 high_key = 1 [default = 0];
  if (has_high_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->high_key(), target);
  }

  // optional uint32 low_key = 2 [default = 0];
  if (has_low_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->low_key(), target);
  }

  // optional uint32 high_value = 3 [default = 0];
  if (has_high_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->high_value(), target);
  }

  // optional uint32 low_value = 4 [default = 0];
  if (has_low_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->low_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ShareCalcItem)
  return target;
}

int ShareCalcItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 high_key = 1 [default = 0];
    if (has_high_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->high_key());
    }

    // optional uint32 low_key = 2 [default = 0];
    if (has_low_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->low_key());
    }

    // optional uint32 high_value = 3 [default = 0];
    if (has_high_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->high_value());
    }

    // optional uint32 low_value = 4 [default = 0];
    if (has_low_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->low_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShareCalcItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShareCalcItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShareCalcItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShareCalcItem::MergeFrom(const ShareCalcItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_high_key()) {
      set_high_key(from.high_key());
    }
    if (from.has_low_key()) {
      set_low_key(from.low_key());
    }
    if (from.has_high_value()) {
      set_high_value(from.high_value());
    }
    if (from.has_low_value()) {
      set_low_value(from.low_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShareCalcItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShareCalcItem::CopyFrom(const ShareCalcItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShareCalcItem::IsInitialized() const {

  return true;
}

void ShareCalcItem::Swap(ShareCalcItem* other) {
  if (other != this) {
    std::swap(high_key_, other->high_key_);
    std::swap(low_key_, other->low_key_);
    std::swap(high_value_, other->high_value_);
    std::swap(low_value_, other->low_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShareCalcItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShareCalcItem_descriptor_;
  metadata.reflection = ShareCalcItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShareCalc::kTypeFieldNumber;
const int ShareCalc::kItemsFieldNumber;
#endif  // !_MSC_VER

ShareCalc::ShareCalc()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ShareCalc)
}

void ShareCalc::InitAsDefaultInstance() {
}

ShareCalc::ShareCalc(const ShareCalc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ShareCalc)
}

void ShareCalc::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShareCalc::~ShareCalc() {
  // @@protoc_insertion_point(destructor:Cmd.ShareCalc)
  SharedDtor();
}

void ShareCalc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShareCalc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShareCalc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShareCalc_descriptor_;
}

const ShareCalc& ShareCalc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

ShareCalc* ShareCalc::default_instance_ = NULL;

ShareCalc* ShareCalc::New() const {
  return new ShareCalc;
}

void ShareCalc::Clear() {
  type_ = 0;
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShareCalc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ShareCalc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.EShareDataType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EShareDataType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EShareDataType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_items;
        break;
      }

      // repeated .Cmd.ShareCalcItem items = 3;
      case 3: {
        if (tag == 26) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ShareCalc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ShareCalc)
  return false;
#undef DO_
}

void ShareCalc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ShareCalc)
  // optional .Cmd.EShareDataType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated .Cmd.ShareCalcItem items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ShareCalc)
}

::google::protobuf::uint8* ShareCalc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ShareCalc)
  // optional .Cmd.EShareDataType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated .Cmd.ShareCalcItem items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ShareCalc)
  return target;
}

int ShareCalc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.EShareDataType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated .Cmd.ShareCalcItem items = 3;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShareCalc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShareCalc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShareCalc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShareCalc::MergeFrom(const ShareCalc& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShareCalc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShareCalc::CopyFrom(const ShareCalc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShareCalc::IsInitialized() const {

  return true;
}

void ShareCalc::Swap(ShareCalc* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShareCalc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShareCalc_descriptor_;
  metadata.reflection = ShareCalc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShareFirstMvp::kMvpidFieldNumber;
#endif  // !_MSC_VER

ShareFirstMvp::ShareFirstMvp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ShareFirstMvp)
}

void ShareFirstMvp::InitAsDefaultInstance() {
}

ShareFirstMvp::ShareFirstMvp(const ShareFirstMvp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ShareFirstMvp)
}

void ShareFirstMvp::SharedCtor() {
  _cached_size_ = 0;
  mvpid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShareFirstMvp::~ShareFirstMvp() {
  // @@protoc_insertion_point(destructor:Cmd.ShareFirstMvp)
  SharedDtor();
}

void ShareFirstMvp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShareFirstMvp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShareFirstMvp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShareFirstMvp_descriptor_;
}

const ShareFirstMvp& ShareFirstMvp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

ShareFirstMvp* ShareFirstMvp::default_instance_ = NULL;

ShareFirstMvp* ShareFirstMvp::New() const {
  return new ShareFirstMvp;
}

void ShareFirstMvp::Clear() {
  mvpid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShareFirstMvp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ShareFirstMvp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mvpid = 2;
      case 2: {
        if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mvpid_)));
          set_has_mvpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ShareFirstMvp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ShareFirstMvp)
  return false;
#undef DO_
}

void ShareFirstMvp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ShareFirstMvp)
  // optional uint32 mvpid = 2;
  if (has_mvpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mvpid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ShareFirstMvp)
}

::google::protobuf::uint8* ShareFirstMvp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ShareFirstMvp)
  // optional uint32 mvpid = 2;
  if (has_mvpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mvpid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ShareFirstMvp)
  return target;
}

int ShareFirstMvp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 mvpid = 2;
    if (has_mvpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mvpid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShareFirstMvp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShareFirstMvp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShareFirstMvp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShareFirstMvp::MergeFrom(const ShareFirstMvp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mvpid()) {
      set_mvpid(from.mvpid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShareFirstMvp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShareFirstMvp::CopyFrom(const ShareFirstMvp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShareFirstMvp::IsInitialized() const {

  return true;
}

void ShareFirstMvp::Swap(ShareFirstMvp* other) {
  if (other != this) {
    std::swap(mvpid_, other->mvpid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShareFirstMvp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShareFirstMvp_descriptor_;
  metadata.reflection = ShareFirstMvp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShareFirstHand::kOtheridFieldNumber;
#endif  // !_MSC_VER

ShareFirstHand::ShareFirstHand()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ShareFirstHand)
}

void ShareFirstHand::InitAsDefaultInstance() {
}

ShareFirstHand::ShareFirstHand(const ShareFirstHand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ShareFirstHand)
}

void ShareFirstHand::SharedCtor() {
  _cached_size_ = 0;
  otherid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShareFirstHand::~ShareFirstHand() {
  // @@protoc_insertion_point(destructor:Cmd.ShareFirstHand)
  SharedDtor();
}

void ShareFirstHand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShareFirstHand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShareFirstHand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShareFirstHand_descriptor_;
}

const ShareFirstHand& ShareFirstHand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

ShareFirstHand* ShareFirstHand::default_instance_ = NULL;

ShareFirstHand* ShareFirstHand::New() const {
  return new ShareFirstHand;
}

void ShareFirstHand::Clear() {
  otherid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShareFirstHand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ShareFirstHand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 otherid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &otherid_)));
          set_has_otherid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ShareFirstHand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ShareFirstHand)
  return false;
#undef DO_
}

void ShareFirstHand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ShareFirstHand)
  // optional uint64 otherid = 1;
  if (has_otherid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->otherid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ShareFirstHand)
}

::google::protobuf::uint8* ShareFirstHand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ShareFirstHand)
  // optional uint64 otherid = 1;
  if (has_otherid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->otherid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ShareFirstHand)
  return target;
}

int ShareFirstHand::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 otherid = 1;
    if (has_otherid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->otherid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShareFirstHand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShareFirstHand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShareFirstHand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShareFirstHand::MergeFrom(const ShareFirstHand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_otherid()) {
      set_otherid(from.otherid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShareFirstHand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShareFirstHand::CopyFrom(const ShareFirstHand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShareFirstHand::IsInitialized() const {

  return true;
}

void ShareFirstHand::Swap(ShareFirstHand* other) {
  if (other != this) {
    std::swap(otherid_, other->otherid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShareFirstHand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShareFirstHand_descriptor_;
  metadata.reflection = ShareFirstHand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShareFirstCarrier::kOtheridFieldNumber;
#endif  // !_MSC_VER

ShareFirstCarrier::ShareFirstCarrier()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ShareFirstCarrier)
}

void ShareFirstCarrier::InitAsDefaultInstance() {
}

ShareFirstCarrier::ShareFirstCarrier(const ShareFirstCarrier& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ShareFirstCarrier)
}

void ShareFirstCarrier::SharedCtor() {
  _cached_size_ = 0;
  otherid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShareFirstCarrier::~ShareFirstCarrier() {
  // @@protoc_insertion_point(destructor:Cmd.ShareFirstCarrier)
  SharedDtor();
}

void ShareFirstCarrier::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShareFirstCarrier::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShareFirstCarrier::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShareFirstCarrier_descriptor_;
}

const ShareFirstCarrier& ShareFirstCarrier::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

ShareFirstCarrier* ShareFirstCarrier::default_instance_ = NULL;

ShareFirstCarrier* ShareFirstCarrier::New() const {
  return new ShareFirstCarrier;
}

void ShareFirstCarrier::Clear() {
  otherid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShareFirstCarrier::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ShareFirstCarrier)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 otherid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &otherid_)));
          set_has_otherid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ShareFirstCarrier)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ShareFirstCarrier)
  return false;
#undef DO_
}

void ShareFirstCarrier::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ShareFirstCarrier)
  // optional uint64 otherid = 1;
  if (has_otherid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->otherid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ShareFirstCarrier)
}

::google::protobuf::uint8* ShareFirstCarrier::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ShareFirstCarrier)
  // optional uint64 otherid = 1;
  if (has_otherid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->otherid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ShareFirstCarrier)
  return target;
}

int ShareFirstCarrier::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 otherid = 1;
    if (has_otherid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->otherid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShareFirstCarrier::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShareFirstCarrier* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShareFirstCarrier*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShareFirstCarrier::MergeFrom(const ShareFirstCarrier& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_otherid()) {
      set_otherid(from.otherid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShareFirstCarrier::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShareFirstCarrier::CopyFrom(const ShareFirstCarrier& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShareFirstCarrier::IsInitialized() const {

  return true;
}

void ShareFirstCarrier::Swap(ShareFirstCarrier* other) {
  if (other != this) {
    std::swap(otherid_, other->otherid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShareFirstCarrier::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShareFirstCarrier_descriptor_;
  metadata.reflection = ShareFirstCarrier_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShareTrade::kItemidFieldNumber;
const int ShareTrade::kTotalPriceFieldNumber;
const int ShareTrade::kRefineLvFieldNumber;
#endif  // !_MSC_VER

ShareTrade::ShareTrade()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ShareTrade)
}

void ShareTrade::InitAsDefaultInstance() {
}

ShareTrade::ShareTrade(const ShareTrade& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ShareTrade)
}

void ShareTrade::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  total_price_ = GOOGLE_ULONGLONG(0);
  refine_lv_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShareTrade::~ShareTrade() {
  // @@protoc_insertion_point(destructor:Cmd.ShareTrade)
  SharedDtor();
}

void ShareTrade::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShareTrade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShareTrade::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShareTrade_descriptor_;
}

const ShareTrade& ShareTrade::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

ShareTrade* ShareTrade::default_instance_ = NULL;

ShareTrade* ShareTrade::New() const {
  return new ShareTrade;
}

void ShareTrade::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ShareTrade*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(total_price_, refine_lv_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShareTrade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ShareTrade)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itemid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_total_price;
        break;
      }

      // optional uint64 total_price = 2;
      case 2: {
        if (tag == 16) {
         parse_total_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_price_)));
          set_has_total_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_refine_lv;
        break;
      }

      // optional uint32 refine_lv = 3;
      case 3: {
        if (tag == 24) {
         parse_refine_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &refine_lv_)));
          set_has_refine_lv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ShareTrade)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ShareTrade)
  return false;
#undef DO_
}

void ShareTrade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ShareTrade)
  // optional uint32 itemid = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }

  // optional uint64 total_price = 2;
  if (has_total_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->total_price(), output);
  }

  // optional uint32 refine_lv = 3;
  if (has_refine_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->refine_lv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ShareTrade)
}

::google::protobuf::uint8* ShareTrade::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ShareTrade)
  // optional uint32 itemid = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }

  // optional uint64 total_price = 2;
  if (has_total_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->total_price(), target);
  }

  // optional uint32 refine_lv = 3;
  if (has_refine_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->refine_lv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ShareTrade)
  return target;
}

int ShareTrade::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 itemid = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint64 total_price = 2;
    if (has_total_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->total_price());
    }

    // optional uint32 refine_lv = 3;
    if (has_refine_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->refine_lv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShareTrade::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShareTrade* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShareTrade*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShareTrade::MergeFrom(const ShareTrade& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_total_price()) {
      set_total_price(from.total_price());
    }
    if (from.has_refine_lv()) {
      set_refine_lv(from.refine_lv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShareTrade::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShareTrade::CopyFrom(const ShareTrade& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShareTrade::IsInitialized() const {

  return true;
}

void ShareTrade::Swap(ShareTrade* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(total_price_, other->total_price_);
    std::swap(refine_lv_, other->refine_lv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShareTrade::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShareTrade_descriptor_;
  metadata.reflection = ShareTrade_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShareDamage::kDamageFieldNumber;
const int ShareDamage::kTargetFieldNumber;
#endif  // !_MSC_VER

ShareDamage::ShareDamage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ShareDamage)
}

void ShareDamage::InitAsDefaultInstance() {
}

ShareDamage::ShareDamage(const ShareDamage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ShareDamage)
}

void ShareDamage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  damage_ = GOOGLE_ULONGLONG(0);
  target_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShareDamage::~ShareDamage() {
  // @@protoc_insertion_point(destructor:Cmd.ShareDamage)
  SharedDtor();
}

void ShareDamage::SharedDtor() {
  if (target_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete target_;
  }
  if (this != default_instance_) {
  }
}

void ShareDamage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShareDamage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShareDamage_descriptor_;
}

const ShareDamage& ShareDamage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

ShareDamage* ShareDamage::default_instance_ = NULL;

ShareDamage* ShareDamage::New() const {
  return new ShareDamage;
}

void ShareDamage::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    damage_ = GOOGLE_ULONGLONG(0);
    if (has_target()) {
      if (target_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        target_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShareDamage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ShareDamage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 damage = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_target;
        break;
      }

      // optional string target = 2;
      case 2: {
        if (tag == 18) {
         parse_target:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->target().data(), this->target().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "target");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ShareDamage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ShareDamage)
  return false;
#undef DO_
}

void ShareDamage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ShareDamage)
  // optional uint64 damage = 1;
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->damage(), output);
  }

  // optional string target = 2;
  if (has_target()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->target().data(), this->target().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "target");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->target(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ShareDamage)
}

::google::protobuf::uint8* ShareDamage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ShareDamage)
  // optional uint64 damage = 1;
  if (has_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->damage(), target);
  }

  // optional string target = 2;
  if (has_target()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->target().data(), this->target().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "target");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->target(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ShareDamage)
  return target;
}

int ShareDamage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 damage = 1;
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->damage());
    }

    // optional string target = 2;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->target());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShareDamage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShareDamage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShareDamage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShareDamage::MergeFrom(const ShareDamage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_damage()) {
      set_damage(from.damage());
    }
    if (from.has_target()) {
      set_target(from.target());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShareDamage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShareDamage::CopyFrom(const ShareDamage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShareDamage::IsInitialized() const {

  return true;
}

void ShareDamage::Swap(ShareDamage* other) {
  if (other != this) {
    std::swap(damage_, other->damage_);
    std::swap(target_, other->target_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShareDamage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShareDamage_descriptor_;
  metadata.reflection = ShareDamage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobShare::kNormaldataFieldNumber;
const int BlobShare::kCalcdataFieldNumber;
const int BlobShare::kFirstmvpFieldNumber;
const int BlobShare::kFirstphotoFieldNumber;
const int BlobShare::kFirsthandFieldNumber;
const int BlobShare::kFirstcarrierFieldNumber;
const int BlobShare::kTradebuyFieldNumber;
const int BlobShare::kTradesellFieldNumber;
const int BlobShare::kMaxdamageFieldNumber;
const int BlobShare::kMysteryBoxFieldNumber;
#endif  // !_MSC_VER

BlobShare::BlobShare()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobShare)
}

void BlobShare::InitAsDefaultInstance() {
  firstmvp_ = const_cast< ::Cmd::ShareFirstMvp*>(&::Cmd::ShareFirstMvp::default_instance());
  firsthand_ = const_cast< ::Cmd::ShareFirstHand*>(&::Cmd::ShareFirstHand::default_instance());
  firstcarrier_ = const_cast< ::Cmd::ShareFirstCarrier*>(&::Cmd::ShareFirstCarrier::default_instance());
  tradebuy_ = const_cast< ::Cmd::ShareTrade*>(&::Cmd::ShareTrade::default_instance());
  tradesell_ = const_cast< ::Cmd::ShareTrade*>(&::Cmd::ShareTrade::default_instance());
  maxdamage_ = const_cast< ::Cmd::ShareDamage*>(&::Cmd::ShareDamage::default_instance());
}

BlobShare::BlobShare(const BlobShare& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobShare)
}

void BlobShare::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  firstmvp_ = NULL;
  firstphoto_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  firsthand_ = NULL;
  firstcarrier_ = NULL;
  tradebuy_ = NULL;
  tradesell_ = NULL;
  maxdamage_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobShare::~BlobShare() {
  // @@protoc_insertion_point(destructor:Cmd.BlobShare)
  SharedDtor();
}

void BlobShare::SharedDtor() {
  if (firstphoto_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete firstphoto_;
  }
  if (this != default_instance_) {
    delete firstmvp_;
    delete firsthand_;
    delete firstcarrier_;
    delete tradebuy_;
    delete tradesell_;
    delete maxdamage_;
  }
}

void BlobShare::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobShare::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobShare_descriptor_;
}

const BlobShare& BlobShare::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobShare* BlobShare::default_instance_ = NULL;

BlobShare* BlobShare::New() const {
  return new BlobShare;
}

void BlobShare::Clear() {
  if (_has_bits_[0 / 32] & 252) {
    if (has_firstmvp()) {
      if (firstmvp_ != NULL) firstmvp_->::Cmd::ShareFirstMvp::Clear();
    }
    if (has_firstphoto()) {
      if (firstphoto_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        firstphoto_->clear();
      }
    }
    if (has_firsthand()) {
      if (firsthand_ != NULL) firsthand_->::Cmd::ShareFirstHand::Clear();
    }
    if (has_firstcarrier()) {
      if (firstcarrier_ != NULL) firstcarrier_->::Cmd::ShareFirstCarrier::Clear();
    }
    if (has_tradebuy()) {
      if (tradebuy_ != NULL) tradebuy_->::Cmd::ShareTrade::Clear();
    }
    if (has_tradesell()) {
      if (tradesell_ != NULL) tradesell_->::Cmd::ShareTrade::Clear();
    }
  }
  if (has_maxdamage()) {
    if (maxdamage_ != NULL) maxdamage_->::Cmd::ShareDamage::Clear();
  }
  normaldata_.Clear();
  calcdata_.Clear();
  mystery_box_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobShare::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobShare)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Cmd.ShareNormal normaldata = 1;
      case 1: {
        if (tag == 10) {
         parse_normaldata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_normaldata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_normaldata;
        if (input->ExpectTag(18)) goto parse_calcdata;
        break;
      }

      // repeated .Cmd.ShareCalc calcdata = 2;
      case 2: {
        if (tag == 18) {
         parse_calcdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_calcdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_calcdata;
        if (input->ExpectTag(26)) goto parse_firstmvp;
        break;
      }

      // optional .Cmd.ShareFirstMvp firstmvp = 3;
      case 3: {
        if (tag == 26) {
         parse_firstmvp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_firstmvp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_firstphoto;
        break;
      }

      // optional string firstphoto = 4;
      case 4: {
        if (tag == 34) {
         parse_firstphoto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_firstphoto()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->firstphoto().data(), this->firstphoto().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "firstphoto");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_firsthand;
        break;
      }

      // optional .Cmd.ShareFirstHand firsthand = 5;
      case 5: {
        if (tag == 42) {
         parse_firsthand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_firsthand()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_firstcarrier;
        break;
      }

      // optional .Cmd.ShareFirstCarrier firstcarrier = 6;
      case 6: {
        if (tag == 50) {
         parse_firstcarrier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_firstcarrier()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_tradebuy;
        break;
      }

      // optional .Cmd.ShareTrade tradebuy = 7;
      case 7: {
        if (tag == 58) {
         parse_tradebuy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tradebuy()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_tradesell;
        break;
      }

      // optional .Cmd.ShareTrade tradesell = 8;
      case 8: {
        if (tag == 66) {
         parse_tradesell:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tradesell()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_maxdamage;
        break;
      }

      // optional .Cmd.ShareDamage maxdamage = 9;
      case 9: {
        if (tag == 74) {
         parse_maxdamage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_maxdamage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_mystery_box;
        break;
      }

      // repeated uint32 mystery_box = 10;
      case 10: {
        if (tag == 80) {
         parse_mystery_box:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 80, input, this->mutable_mystery_box())));
        } else if (tag == 82) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_mystery_box())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_mystery_box;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobShare)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobShare)
  return false;
#undef DO_
}

void BlobShare::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobShare)
  // repeated .Cmd.ShareNormal normaldata = 1;
  for (int i = 0; i < this->normaldata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->normaldata(i), output);
  }

  // repeated .Cmd.ShareCalc calcdata = 2;
  for (int i = 0; i < this->calcdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->calcdata(i), output);
  }

  // optional .Cmd.ShareFirstMvp firstmvp = 3;
  if (has_firstmvp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->firstmvp(), output);
  }

  // optional string firstphoto = 4;
  if (has_firstphoto()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->firstphoto().data(), this->firstphoto().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "firstphoto");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->firstphoto(), output);
  }

  // optional .Cmd.ShareFirstHand firsthand = 5;
  if (has_firsthand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->firsthand(), output);
  }

  // optional .Cmd.ShareFirstCarrier firstcarrier = 6;
  if (has_firstcarrier()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->firstcarrier(), output);
  }

  // optional .Cmd.ShareTrade tradebuy = 7;
  if (has_tradebuy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->tradebuy(), output);
  }

  // optional .Cmd.ShareTrade tradesell = 8;
  if (has_tradesell()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->tradesell(), output);
  }

  // optional .Cmd.ShareDamage maxdamage = 9;
  if (has_maxdamage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->maxdamage(), output);
  }

  // repeated uint32 mystery_box = 10;
  for (int i = 0; i < this->mystery_box_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      10, this->mystery_box(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobShare)
}

::google::protobuf::uint8* BlobShare::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobShare)
  // repeated .Cmd.ShareNormal normaldata = 1;
  for (int i = 0; i < this->normaldata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->normaldata(i), target);
  }

  // repeated .Cmd.ShareCalc calcdata = 2;
  for (int i = 0; i < this->calcdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->calcdata(i), target);
  }

  // optional .Cmd.ShareFirstMvp firstmvp = 3;
  if (has_firstmvp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->firstmvp(), target);
  }

  // optional string firstphoto = 4;
  if (has_firstphoto()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->firstphoto().data(), this->firstphoto().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "firstphoto");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->firstphoto(), target);
  }

  // optional .Cmd.ShareFirstHand firsthand = 5;
  if (has_firsthand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->firsthand(), target);
  }

  // optional .Cmd.ShareFirstCarrier firstcarrier = 6;
  if (has_firstcarrier()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->firstcarrier(), target);
  }

  // optional .Cmd.ShareTrade tradebuy = 7;
  if (has_tradebuy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->tradebuy(), target);
  }

  // optional .Cmd.ShareTrade tradesell = 8;
  if (has_tradesell()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->tradesell(), target);
  }

  // optional .Cmd.ShareDamage maxdamage = 9;
  if (has_maxdamage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->maxdamage(), target);
  }

  // repeated uint32 mystery_box = 10;
  for (int i = 0; i < this->mystery_box_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(10, this->mystery_box(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobShare)
  return target;
}

int BlobShare::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional .Cmd.ShareFirstMvp firstmvp = 3;
    if (has_firstmvp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->firstmvp());
    }

    // optional string firstphoto = 4;
    if (has_firstphoto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->firstphoto());
    }

    // optional .Cmd.ShareFirstHand firsthand = 5;
    if (has_firsthand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->firsthand());
    }

    // optional .Cmd.ShareFirstCarrier firstcarrier = 6;
    if (has_firstcarrier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->firstcarrier());
    }

    // optional .Cmd.ShareTrade tradebuy = 7;
    if (has_tradebuy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tradebuy());
    }

    // optional .Cmd.ShareTrade tradesell = 8;
    if (has_tradesell()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tradesell());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .Cmd.ShareDamage maxdamage = 9;
    if (has_maxdamage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->maxdamage());
    }

  }
  // repeated .Cmd.ShareNormal normaldata = 1;
  total_size += 1 * this->normaldata_size();
  for (int i = 0; i < this->normaldata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->normaldata(i));
  }

  // repeated .Cmd.ShareCalc calcdata = 2;
  total_size += 1 * this->calcdata_size();
  for (int i = 0; i < this->calcdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->calcdata(i));
  }

  // repeated uint32 mystery_box = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->mystery_box_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->mystery_box(i));
    }
    total_size += 1 * this->mystery_box_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobShare::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobShare* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobShare*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobShare::MergeFrom(const BlobShare& from) {
  GOOGLE_CHECK_NE(&from, this);
  normaldata_.MergeFrom(from.normaldata_);
  calcdata_.MergeFrom(from.calcdata_);
  mystery_box_.MergeFrom(from.mystery_box_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_firstmvp()) {
      mutable_firstmvp()->::Cmd::ShareFirstMvp::MergeFrom(from.firstmvp());
    }
    if (from.has_firstphoto()) {
      set_firstphoto(from.firstphoto());
    }
    if (from.has_firsthand()) {
      mutable_firsthand()->::Cmd::ShareFirstHand::MergeFrom(from.firsthand());
    }
    if (from.has_firstcarrier()) {
      mutable_firstcarrier()->::Cmd::ShareFirstCarrier::MergeFrom(from.firstcarrier());
    }
    if (from.has_tradebuy()) {
      mutable_tradebuy()->::Cmd::ShareTrade::MergeFrom(from.tradebuy());
    }
    if (from.has_tradesell()) {
      mutable_tradesell()->::Cmd::ShareTrade::MergeFrom(from.tradesell());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_maxdamage()) {
      mutable_maxdamage()->::Cmd::ShareDamage::MergeFrom(from.maxdamage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobShare::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobShare::CopyFrom(const BlobShare& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobShare::IsInitialized() const {

  return true;
}

void BlobShare::Swap(BlobShare* other) {
  if (other != this) {
    normaldata_.Swap(&other->normaldata_);
    calcdata_.Swap(&other->calcdata_);
    std::swap(firstmvp_, other->firstmvp_);
    std::swap(firstphoto_, other->firstphoto_);
    std::swap(firsthand_, other->firsthand_);
    std::swap(firstcarrier_, other->firstcarrier_);
    std::swap(tradebuy_, other->tradebuy_);
    std::swap(tradesell_, other->tradesell_);
    std::swap(maxdamage_, other->maxdamage_);
    mystery_box_.Swap(&other->mystery_box_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobShare::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobShare_descriptor_;
  metadata.reflection = BlobShare_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AchieveDBItem::kIdFieldNumber;
const int AchieveDBItem::kProcessFieldNumber;
const int AchieveDBItem::kFinishtimeFieldNumber;
const int AchieveDBItem::kRewardGetFieldNumber;
const int AchieveDBItem::kParamsFieldNumber;
#endif  // !_MSC_VER

AchieveDBItem::AchieveDBItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.AchieveDBItem)
}

void AchieveDBItem::InitAsDefaultInstance() {
}

AchieveDBItem::AchieveDBItem(const AchieveDBItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.AchieveDBItem)
}

void AchieveDBItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  process_ = 0u;
  finishtime_ = 0u;
  reward_get_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AchieveDBItem::~AchieveDBItem() {
  // @@protoc_insertion_point(destructor:Cmd.AchieveDBItem)
  SharedDtor();
}

void AchieveDBItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AchieveDBItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AchieveDBItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AchieveDBItem_descriptor_;
}

const AchieveDBItem& AchieveDBItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

AchieveDBItem* AchieveDBItem::default_instance_ = NULL;

AchieveDBItem* AchieveDBItem::New() const {
  return new AchieveDBItem;
}

void AchieveDBItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AchieveDBItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, reward_get_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  params_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AchieveDBItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.AchieveDBItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_process;
        break;
      }

      // optional uint32 process = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_process:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &process_)));
          set_has_process();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_finishtime;
        break;
      }

      // optional uint32 finishtime = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_finishtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &finishtime_)));
          set_has_finishtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_reward_get;
        break;
      }

      // optional bool reward_get = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_reward_get:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reward_get_)));
          set_has_reward_get();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_params;
        break;
      }

      // repeated uint64 params = 5;
      case 5: {
        if (tag == 40) {
         parse_params:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 40, input, this->mutable_params())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_params())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_params;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.AchieveDBItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.AchieveDBItem)
  return false;
#undef DO_
}

void AchieveDBItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.AchieveDBItem)
  // optional uint32 id = 1 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 process = 2 [default = 0];
  if (has_process()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->process(), output);
  }

  // optional uint32 finishtime = 3 [default = 0];
  if (has_finishtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->finishtime(), output);
  }

  // optional bool reward_get = 4 [default = false];
  if (has_reward_get()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->reward_get(), output);
  }

  // repeated uint64 params = 5;
  for (int i = 0; i < this->params_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      5, this->params(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.AchieveDBItem)
}

::google::protobuf::uint8* AchieveDBItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.AchieveDBItem)
  // optional uint32 id = 1 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 process = 2 [default = 0];
  if (has_process()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->process(), target);
  }

  // optional uint32 finishtime = 3 [default = 0];
  if (has_finishtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->finishtime(), target);
  }

  // optional bool reward_get = 4 [default = false];
  if (has_reward_get()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->reward_get(), target);
  }

  // repeated uint64 params = 5;
  for (int i = 0; i < this->params_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(5, this->params(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.AchieveDBItem)
  return target;
}

int AchieveDBItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 process = 2 [default = 0];
    if (has_process()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->process());
    }

    // optional uint32 finishtime = 3 [default = 0];
    if (has_finishtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->finishtime());
    }

    // optional bool reward_get = 4 [default = false];
    if (has_reward_get()) {
      total_size += 1 + 1;
    }

  }
  // repeated uint64 params = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->params_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->params(i));
    }
    total_size += 1 * this->params_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AchieveDBItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AchieveDBItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AchieveDBItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AchieveDBItem::MergeFrom(const AchieveDBItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  params_.MergeFrom(from.params_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_process()) {
      set_process(from.process());
    }
    if (from.has_finishtime()) {
      set_finishtime(from.finishtime());
    }
    if (from.has_reward_get()) {
      set_reward_get(from.reward_get());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AchieveDBItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AchieveDBItem::CopyFrom(const AchieveDBItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AchieveDBItem::IsInitialized() const {

  return true;
}

void AchieveDBItem::Swap(AchieveDBItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(process_, other->process_);
    std::swap(finishtime_, other->finishtime_);
    std::swap(reward_get_, other->reward_get_);
    params_.Swap(&other->params_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AchieveDBItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AchieveDBItem_descriptor_;
  metadata.reflection = AchieveDBItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobAchieve::kDataFieldNumber;
const int BlobAchieve::kMaxCacheFieldNumber;
const int BlobAchieve::kVersionFieldNumber;
const int BlobAchieve::kItemsFieldNumber;
const int BlobAchieve::kCharVersionFieldNumber;
#endif  // !_MSC_VER

BlobAchieve::BlobAchieve()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobAchieve)
}

void BlobAchieve::InitAsDefaultInstance() {
}

BlobAchieve::BlobAchieve(const BlobAchieve& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobAchieve)
}

void BlobAchieve::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  char_version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobAchieve::~BlobAchieve() {
  // @@protoc_insertion_point(destructor:Cmd.BlobAchieve)
  SharedDtor();
}

void BlobAchieve::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobAchieve::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobAchieve::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobAchieve_descriptor_;
}

const BlobAchieve& BlobAchieve::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobAchieve* BlobAchieve::default_instance_ = NULL;

BlobAchieve* BlobAchieve::New() const {
  return new BlobAchieve;
}

void BlobAchieve::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BlobAchieve*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(version_, char_version_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  data_.Clear();
  max_cache_.Clear();
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobAchieve::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobAchieve)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Cmd.AchieveData data = 1;
      case 1: {
        if (tag == 10) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectTag(18)) goto parse_max_cache;
        break;
      }

      // repeated .Cmd.MaxInfo max_cache = 2;
      case 2: {
        if (tag == 18) {
         parse_max_cache:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_max_cache()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_max_cache;
        if (input->ExpectTag(24)) goto parse_version;
        break;
      }

      // optional uint32 version = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_items;
        break;
      }

      // repeated .Cmd.AchieveDBItem items = 4;
      case 4: {
        if (tag == 34) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_items;
        if (input->ExpectTag(40)) goto parse_char_version;
        break;
      }

      // optional uint32 char_version = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_char_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &char_version_)));
          set_has_char_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobAchieve)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobAchieve)
  return false;
#undef DO_
}

void BlobAchieve::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobAchieve)
  // repeated .Cmd.AchieveData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  // repeated .Cmd.MaxInfo max_cache = 2;
  for (int i = 0; i < this->max_cache_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->max_cache(i), output);
  }

  // optional uint32 version = 3 [default = 0];
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->version(), output);
  }

  // repeated .Cmd.AchieveDBItem items = 4;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->items(i), output);
  }

  // optional uint32 char_version = 5 [default = 0];
  if (has_char_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->char_version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobAchieve)
}

::google::protobuf::uint8* BlobAchieve::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobAchieve)
  // repeated .Cmd.AchieveData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  // repeated .Cmd.MaxInfo max_cache = 2;
  for (int i = 0; i < this->max_cache_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->max_cache(i), target);
  }

  // optional uint32 version = 3 [default = 0];
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->version(), target);
  }

  // repeated .Cmd.AchieveDBItem items = 4;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->items(i), target);
  }

  // optional uint32 char_version = 5 [default = 0];
  if (has_char_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->char_version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobAchieve)
  return target;
}

int BlobAchieve::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional uint32 version = 3 [default = 0];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional uint32 char_version = 5 [default = 0];
    if (has_char_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->char_version());
    }

  }
  // repeated .Cmd.AchieveData data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  // repeated .Cmd.MaxInfo max_cache = 2;
  total_size += 1 * this->max_cache_size();
  for (int i = 0; i < this->max_cache_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->max_cache(i));
  }

  // repeated .Cmd.AchieveDBItem items = 4;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobAchieve::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobAchieve* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobAchieve*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobAchieve::MergeFrom(const BlobAchieve& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  max_cache_.MergeFrom(from.max_cache_);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_char_version()) {
      set_char_version(from.char_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobAchieve::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobAchieve::CopyFrom(const BlobAchieve& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobAchieve::IsInitialized() const {

  return true;
}

void BlobAchieve::Swap(BlobAchieve* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    max_cache_.Swap(&other->max_cache_);
    std::swap(version_, other->version_);
    items_.Swap(&other->items_);
    std::swap(char_version_, other->char_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobAchieve::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobAchieve_descriptor_;
  metadata.reflection = BlobAchieve_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobAuthorize::kPasswordFieldNumber;
const int BlobAuthorize::kResettimeFieldNumber;
const int BlobAuthorize::kInputtimeFieldNumber;
#endif  // !_MSC_VER

BlobAuthorize::BlobAuthorize()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobAuthorize)
}

void BlobAuthorize::InitAsDefaultInstance() {
}

BlobAuthorize::BlobAuthorize(const BlobAuthorize& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobAuthorize)
}

void BlobAuthorize::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resettime_ = 0u;
  inputtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobAuthorize::~BlobAuthorize() {
  // @@protoc_insertion_point(destructor:Cmd.BlobAuthorize)
  SharedDtor();
}

void BlobAuthorize::SharedDtor() {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void BlobAuthorize::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobAuthorize::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobAuthorize_descriptor_;
}

const BlobAuthorize& BlobAuthorize::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobAuthorize* BlobAuthorize::default_instance_ = NULL;

BlobAuthorize* BlobAuthorize::New() const {
  return new BlobAuthorize;
}

void BlobAuthorize::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BlobAuthorize*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(resettime_, inputtime_);
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        password_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobAuthorize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobAuthorize)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string password = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "password");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_resettime;
        break;
      }

      // optional uint32 resettime = 2;
      case 2: {
        if (tag == 16) {
         parse_resettime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resettime_)));
          set_has_resettime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_inputtime;
        break;
      }

      // optional uint32 inputtime = 3;
      case 3: {
        if (tag == 24) {
         parse_inputtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inputtime_)));
          set_has_inputtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobAuthorize)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobAuthorize)
  return false;
#undef DO_
}

void BlobAuthorize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobAuthorize)
  // optional string password = 1;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->password(), output);
  }

  // optional uint32 resettime = 2;
  if (has_resettime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->resettime(), output);
  }

  // optional uint32 inputtime = 3;
  if (has_inputtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->inputtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobAuthorize)
}

::google::protobuf::uint8* BlobAuthorize::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobAuthorize)
  // optional string password = 1;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->password(), target);
  }

  // optional uint32 resettime = 2;
  if (has_resettime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->resettime(), target);
  }

  // optional uint32 inputtime = 3;
  if (has_inputtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->inputtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobAuthorize)
  return target;
}

int BlobAuthorize::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string password = 1;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional uint32 resettime = 2;
    if (has_resettime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resettime());
    }

    // optional uint32 inputtime = 3;
    if (has_inputtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->inputtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobAuthorize::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobAuthorize* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobAuthorize*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobAuthorize::MergeFrom(const BlobAuthorize& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_resettime()) {
      set_resettime(from.resettime());
    }
    if (from.has_inputtime()) {
      set_inputtime(from.inputtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobAuthorize::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobAuthorize::CopyFrom(const BlobAuthorize& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobAuthorize::IsInitialized() const {

  return true;
}

void BlobAuthorize::Swap(BlobAuthorize* other) {
  if (other != this) {
    std::swap(password_, other->password_);
    std::swap(resettime_, other->resettime_);
    std::swap(inputtime_, other->inputtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobAuthorize::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobAuthorize_descriptor_;
  metadata.reflection = BlobAuthorize_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildRaid::kNpcidFieldNumber;
const int GuildRaid::kStateFieldNumber;
const int GuildRaid::kKilledbossFieldNumber;
#endif  // !_MSC_VER

GuildRaid::GuildRaid()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GuildRaid)
}

void GuildRaid::InitAsDefaultInstance() {
}

GuildRaid::GuildRaid(const GuildRaid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GuildRaid)
}

void GuildRaid::SharedCtor() {
  _cached_size_ = 0;
  npcid_ = GOOGLE_ULONGLONG(0);
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildRaid::~GuildRaid() {
  // @@protoc_insertion_point(destructor:Cmd.GuildRaid)
  SharedDtor();
}

void GuildRaid::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildRaid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildRaid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildRaid_descriptor_;
}

const GuildRaid& GuildRaid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

GuildRaid* GuildRaid::default_instance_ = NULL;

GuildRaid* GuildRaid::New() const {
  return new GuildRaid;
}

void GuildRaid::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    npcid_ = GOOGLE_ULONGLONG(0);
    state_ = 0;
  }
  killedboss_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildRaid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GuildRaid)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 npcid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &npcid_)));
          set_has_npcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional .Cmd.EGuildGateState state = 2;
      case 2: {
        if (tag == 16) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EGuildGateState_IsValid(value)) {
            set_state(static_cast< ::Cmd::EGuildGateState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_killedboss;
        break;
      }

      // repeated uint32 killedboss = 3;
      case 3: {
        if (tag == 24) {
         parse_killedboss:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_killedboss())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_killedboss())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_killedboss;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GuildRaid)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GuildRaid)
  return false;
#undef DO_
}

void GuildRaid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GuildRaid)
  // optional uint64 npcid = 1;
  if (has_npcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->npcid(), output);
  }

  // optional .Cmd.EGuildGateState state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  // repeated uint32 killedboss = 3;
  for (int i = 0; i < this->killedboss_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->killedboss(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GuildRaid)
}

::google::protobuf::uint8* GuildRaid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GuildRaid)
  // optional uint64 npcid = 1;
  if (has_npcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->npcid(), target);
  }

  // optional .Cmd.EGuildGateState state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  // repeated uint32 killedboss = 3;
  for (int i = 0; i < this->killedboss_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->killedboss(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GuildRaid)
  return target;
}

int GuildRaid::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 npcid = 1;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->npcid());
    }

    // optional .Cmd.EGuildGateState state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

  }
  // repeated uint32 killedboss = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->killedboss_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->killedboss(i));
    }
    total_size += 1 * this->killedboss_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildRaid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildRaid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildRaid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildRaid::MergeFrom(const GuildRaid& from) {
  GOOGLE_CHECK_NE(&from, this);
  killedboss_.MergeFrom(from.killedboss_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_npcid()) {
      set_npcid(from.npcid());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildRaid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildRaid::CopyFrom(const GuildRaid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildRaid::IsInitialized() const {

  return true;
}

void GuildRaid::Swap(GuildRaid* other) {
  if (other != this) {
    std::swap(npcid_, other->npcid_);
    std::swap(state_, other->state_);
    killedboss_.Swap(&other->killedboss_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildRaid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildRaid_descriptor_;
  metadata.reflection = GuildRaid_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobGuildRaid::kRaidFieldNumber;
const int BlobGuildRaid::kRaidversionFieldNumber;
#endif  // !_MSC_VER

BlobGuildRaid::BlobGuildRaid()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobGuildRaid)
}

void BlobGuildRaid::InitAsDefaultInstance() {
}

BlobGuildRaid::BlobGuildRaid(const BlobGuildRaid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobGuildRaid)
}

void BlobGuildRaid::SharedCtor() {
  _cached_size_ = 0;
  raidversion_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobGuildRaid::~BlobGuildRaid() {
  // @@protoc_insertion_point(destructor:Cmd.BlobGuildRaid)
  SharedDtor();
}

void BlobGuildRaid::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobGuildRaid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobGuildRaid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobGuildRaid_descriptor_;
}

const BlobGuildRaid& BlobGuildRaid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobGuildRaid* BlobGuildRaid::default_instance_ = NULL;

BlobGuildRaid* BlobGuildRaid::New() const {
  return new BlobGuildRaid;
}

void BlobGuildRaid::Clear() {
  raidversion_ = 0u;
  raid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobGuildRaid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobGuildRaid)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Cmd.GuildRaid raid = 1;
      case 1: {
        if (tag == 10) {
         parse_raid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_raid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_raid;
        if (input->ExpectTag(16)) goto parse_raidversion;
        break;
      }

      // optional uint32 raidversion = 2;
      case 2: {
        if (tag == 16) {
         parse_raidversion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raidversion_)));
          set_has_raidversion();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobGuildRaid)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobGuildRaid)
  return false;
#undef DO_
}

void BlobGuildRaid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobGuildRaid)
  // repeated .Cmd.GuildRaid raid = 1;
  for (int i = 0; i < this->raid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->raid(i), output);
  }

  // optional uint32 raidversion = 2;
  if (has_raidversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->raidversion(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobGuildRaid)
}

::google::protobuf::uint8* BlobGuildRaid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobGuildRaid)
  // repeated .Cmd.GuildRaid raid = 1;
  for (int i = 0; i < this->raid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->raid(i), target);
  }

  // optional uint32 raidversion = 2;
  if (has_raidversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->raidversion(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobGuildRaid)
  return target;
}

int BlobGuildRaid::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 raidversion = 2;
    if (has_raidversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raidversion());
    }

  }
  // repeated .Cmd.GuildRaid raid = 1;
  total_size += 1 * this->raid_size();
  for (int i = 0; i < this->raid_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->raid(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobGuildRaid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobGuildRaid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobGuildRaid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobGuildRaid::MergeFrom(const BlobGuildRaid& from) {
  GOOGLE_CHECK_NE(&from, this);
  raid_.MergeFrom(from.raid_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_raidversion()) {
      set_raidversion(from.raidversion());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobGuildRaid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobGuildRaid::CopyFrom(const BlobGuildRaid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobGuildRaid::IsInitialized() const {

  return true;
}

void BlobGuildRaid::Swap(BlobGuildRaid* other) {
  if (other != this) {
    raid_.Swap(&other->raid_);
    std::swap(raidversion_, other->raidversion_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobGuildRaid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobGuildRaid_descriptor_;
  metadata.reflection = BlobGuildRaid_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AstrolabeStarData::kIdFieldNumber;
#endif  // !_MSC_VER

AstrolabeStarData::AstrolabeStarData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.AstrolabeStarData)
}

void AstrolabeStarData::InitAsDefaultInstance() {
}

AstrolabeStarData::AstrolabeStarData(const AstrolabeStarData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.AstrolabeStarData)
}

void AstrolabeStarData::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AstrolabeStarData::~AstrolabeStarData() {
  // @@protoc_insertion_point(destructor:Cmd.AstrolabeStarData)
  SharedDtor();
}

void AstrolabeStarData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AstrolabeStarData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AstrolabeStarData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AstrolabeStarData_descriptor_;
}

const AstrolabeStarData& AstrolabeStarData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

AstrolabeStarData* AstrolabeStarData::default_instance_ = NULL;

AstrolabeStarData* AstrolabeStarData::New() const {
  return new AstrolabeStarData;
}

void AstrolabeStarData::Clear() {
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AstrolabeStarData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.AstrolabeStarData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.AstrolabeStarData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.AstrolabeStarData)
  return false;
#undef DO_
}

void AstrolabeStarData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.AstrolabeStarData)
  // optional uint32 id = 1 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.AstrolabeStarData)
}

::google::protobuf::uint8* AstrolabeStarData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.AstrolabeStarData)
  // optional uint32 id = 1 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.AstrolabeStarData)
  return target;
}

int AstrolabeStarData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AstrolabeStarData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AstrolabeStarData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AstrolabeStarData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AstrolabeStarData::MergeFrom(const AstrolabeStarData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AstrolabeStarData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AstrolabeStarData::CopyFrom(const AstrolabeStarData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AstrolabeStarData::IsInitialized() const {

  return true;
}

void AstrolabeStarData::Swap(AstrolabeStarData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AstrolabeStarData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AstrolabeStarData_descriptor_;
  metadata.reflection = AstrolabeStarData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AstrolabeData::kIdFieldNumber;
const int AstrolabeData::kStarsFieldNumber;
const int AstrolabeData::kCostsFieldNumber;
#endif  // !_MSC_VER

AstrolabeData::AstrolabeData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.AstrolabeData)
}

void AstrolabeData::InitAsDefaultInstance() {
}

AstrolabeData::AstrolabeData(const AstrolabeData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.AstrolabeData)
}

void AstrolabeData::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AstrolabeData::~AstrolabeData() {
  // @@protoc_insertion_point(destructor:Cmd.AstrolabeData)
  SharedDtor();
}

void AstrolabeData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AstrolabeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AstrolabeData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AstrolabeData_descriptor_;
}

const AstrolabeData& AstrolabeData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

AstrolabeData* AstrolabeData::default_instance_ = NULL;

AstrolabeData* AstrolabeData::New() const {
  return new AstrolabeData;
}

void AstrolabeData::Clear() {
  id_ = 0u;
  stars_.Clear();
  costs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AstrolabeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.AstrolabeData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_stars;
        break;
      }

      // repeated .Cmd.AstrolabeStarData stars = 2;
      case 2: {
        if (tag == 18) {
         parse_stars:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stars()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_stars;
        if (input->ExpectTag(26)) goto parse_costs;
        break;
      }

      // repeated .Cmd.AstrolabeCostData costs = 3;
      case 3: {
        if (tag == 26) {
         parse_costs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_costs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_costs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.AstrolabeData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.AstrolabeData)
  return false;
#undef DO_
}

void AstrolabeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.AstrolabeData)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // repeated .Cmd.AstrolabeStarData stars = 2;
  for (int i = 0; i < this->stars_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stars(i), output);
  }

  // repeated .Cmd.AstrolabeCostData costs = 3;
  for (int i = 0; i < this->costs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->costs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.AstrolabeData)
}

::google::protobuf::uint8* AstrolabeData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.AstrolabeData)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // repeated .Cmd.AstrolabeStarData stars = 2;
  for (int i = 0; i < this->stars_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stars(i), target);
  }

  // repeated .Cmd.AstrolabeCostData costs = 3;
  for (int i = 0; i < this->costs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->costs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.AstrolabeData)
  return target;
}

int AstrolabeData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  // repeated .Cmd.AstrolabeStarData stars = 2;
  total_size += 1 * this->stars_size();
  for (int i = 0; i < this->stars_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stars(i));
  }

  // repeated .Cmd.AstrolabeCostData costs = 3;
  total_size += 1 * this->costs_size();
  for (int i = 0; i < this->costs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->costs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AstrolabeData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AstrolabeData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AstrolabeData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AstrolabeData::MergeFrom(const AstrolabeData& from) {
  GOOGLE_CHECK_NE(&from, this);
  stars_.MergeFrom(from.stars_);
  costs_.MergeFrom(from.costs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AstrolabeData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AstrolabeData::CopyFrom(const AstrolabeData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AstrolabeData::IsInitialized() const {

  return true;
}

void AstrolabeData::Swap(AstrolabeData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    stars_.Swap(&other->stars_);
    costs_.Swap(&other->costs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AstrolabeData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AstrolabeData_descriptor_;
  metadata.reflection = AstrolabeData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AstrolabeMainData::kTypeFieldNumber;
const int AstrolabeMainData::kAstrolabesFieldNumber;
#endif  // !_MSC_VER

AstrolabeMainData::AstrolabeMainData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.AstrolabeMainData)
}

void AstrolabeMainData::InitAsDefaultInstance() {
}

AstrolabeMainData::AstrolabeMainData(const AstrolabeMainData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.AstrolabeMainData)
}

void AstrolabeMainData::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AstrolabeMainData::~AstrolabeMainData() {
  // @@protoc_insertion_point(destructor:Cmd.AstrolabeMainData)
  SharedDtor();
}

void AstrolabeMainData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AstrolabeMainData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AstrolabeMainData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AstrolabeMainData_descriptor_;
}

const AstrolabeMainData& AstrolabeMainData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

AstrolabeMainData* AstrolabeMainData::default_instance_ = NULL;

AstrolabeMainData* AstrolabeMainData::New() const {
  return new AstrolabeMainData;
}

void AstrolabeMainData::Clear() {
  type_ = 0;
  astrolabes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AstrolabeMainData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.AstrolabeMainData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.EAstrolabeType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EAstrolabeType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EAstrolabeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_astrolabes;
        break;
      }

      // repeated .Cmd.AstrolabeData astrolabes = 2;
      case 2: {
        if (tag == 18) {
         parse_astrolabes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_astrolabes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_astrolabes;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.AstrolabeMainData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.AstrolabeMainData)
  return false;
#undef DO_
}

void AstrolabeMainData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.AstrolabeMainData)
  // optional .Cmd.EAstrolabeType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated .Cmd.AstrolabeData astrolabes = 2;
  for (int i = 0; i < this->astrolabes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->astrolabes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.AstrolabeMainData)
}

::google::protobuf::uint8* AstrolabeMainData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.AstrolabeMainData)
  // optional .Cmd.EAstrolabeType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated .Cmd.AstrolabeData astrolabes = 2;
  for (int i = 0; i < this->astrolabes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->astrolabes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.AstrolabeMainData)
  return target;
}

int AstrolabeMainData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.EAstrolabeType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated .Cmd.AstrolabeData astrolabes = 2;
  total_size += 1 * this->astrolabes_size();
  for (int i = 0; i < this->astrolabes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->astrolabes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AstrolabeMainData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AstrolabeMainData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AstrolabeMainData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AstrolabeMainData::MergeFrom(const AstrolabeMainData& from) {
  GOOGLE_CHECK_NE(&from, this);
  astrolabes_.MergeFrom(from.astrolabes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AstrolabeMainData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AstrolabeMainData::CopyFrom(const AstrolabeMainData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AstrolabeMainData::IsInitialized() const {

  return true;
}

void AstrolabeMainData::Swap(AstrolabeMainData* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    astrolabes_.Swap(&other->astrolabes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AstrolabeMainData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AstrolabeMainData_descriptor_;
  metadata.reflection = AstrolabeMainData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobAstrolabe::kDatasFieldNumber;
#endif  // !_MSC_VER

BlobAstrolabe::BlobAstrolabe()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobAstrolabe)
}

void BlobAstrolabe::InitAsDefaultInstance() {
}

BlobAstrolabe::BlobAstrolabe(const BlobAstrolabe& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobAstrolabe)
}

void BlobAstrolabe::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobAstrolabe::~BlobAstrolabe() {
  // @@protoc_insertion_point(destructor:Cmd.BlobAstrolabe)
  SharedDtor();
}

void BlobAstrolabe::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobAstrolabe::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobAstrolabe::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobAstrolabe_descriptor_;
}

const BlobAstrolabe& BlobAstrolabe::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobAstrolabe* BlobAstrolabe::default_instance_ = NULL;

BlobAstrolabe* BlobAstrolabe::New() const {
  return new BlobAstrolabe;
}

void BlobAstrolabe::Clear() {
  datas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobAstrolabe::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobAstrolabe)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Cmd.AstrolabeMainData datas = 1;
      case 1: {
        if (tag == 10) {
         parse_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_datas;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobAstrolabe)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobAstrolabe)
  return false;
#undef DO_
}

void BlobAstrolabe::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobAstrolabe)
  // repeated .Cmd.AstrolabeMainData datas = 1;
  for (int i = 0; i < this->datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->datas(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobAstrolabe)
}

::google::protobuf::uint8* BlobAstrolabe::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobAstrolabe)
  // repeated .Cmd.AstrolabeMainData datas = 1;
  for (int i = 0; i < this->datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->datas(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobAstrolabe)
  return target;
}

int BlobAstrolabe::ByteSize() const {
  int total_size = 0;

  // repeated .Cmd.AstrolabeMainData datas = 1;
  total_size += 1 * this->datas_size();
  for (int i = 0; i < this->datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobAstrolabe::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobAstrolabe* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobAstrolabe*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobAstrolabe::MergeFrom(const BlobAstrolabe& from) {
  GOOGLE_CHECK_NE(&from, this);
  datas_.MergeFrom(from.datas_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobAstrolabe::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobAstrolabe::CopyFrom(const BlobAstrolabe& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobAstrolabe::IsInitialized() const {

  return true;
}

void BlobAstrolabe::Swap(BlobAstrolabe* other) {
  if (other != this) {
    datas_.Swap(&other->datas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobAstrolabe::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobAstrolabe_descriptor_;
  metadata.reflection = BlobAstrolabe_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetAdventureDBItem::kIdFieldNumber;
const int PetAdventureDBItem::kStarttimeFieldNumber;
const int PetAdventureDBItem::kStatusFieldNumber;
const int PetAdventureDBItem::kEggsFieldNumber;
const int PetAdventureDBItem::kStepsFieldNumber;
const int PetAdventureDBItem::kRaresrewardFieldNumber;
const int PetAdventureDBItem::kSpecidFieldNumber;
const int PetAdventureDBItem::kEffFieldNumber;
const int PetAdventureDBItem::kRewardinfoFieldNumber;
const int PetAdventureDBItem::kExtrarewardinfoFieldNumber;
#endif  // !_MSC_VER

PetAdventureDBItem::PetAdventureDBItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.PetAdventureDBItem)
}

void PetAdventureDBItem::InitAsDefaultInstance() {
}

PetAdventureDBItem::PetAdventureDBItem(const PetAdventureDBItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.PetAdventureDBItem)
}

void PetAdventureDBItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  starttime_ = 0u;
  status_ = 0;
  specid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetAdventureDBItem::~PetAdventureDBItem() {
  // @@protoc_insertion_point(destructor:Cmd.PetAdventureDBItem)
  SharedDtor();
}

void PetAdventureDBItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PetAdventureDBItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetAdventureDBItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetAdventureDBItem_descriptor_;
}

const PetAdventureDBItem& PetAdventureDBItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

PetAdventureDBItem* PetAdventureDBItem::default_instance_ = NULL;

PetAdventureDBItem* PetAdventureDBItem::New() const {
  return new PetAdventureDBItem;
}

void PetAdventureDBItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PetAdventureDBItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, starttime_);
  ZR_(status_, specid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  eggs_.Clear();
  steps_.Clear();
  raresreward_.Clear();
  eff_.Clear();
  rewardinfo_.Clear();
  extrarewardinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetAdventureDBItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.PetAdventureDBItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_starttime;
        break;
      }

      // optional uint32 starttime = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_starttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // optional .Cmd.EPetAdventureStatus status = 3 [default = EPETADVENTURESTATUS_MIN];
      case 3: {
        if (tag == 24) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EPetAdventureStatus_IsValid(value)) {
            set_status(static_cast< ::Cmd::EPetAdventureStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_eggs;
        break;
      }

      // repeated .Cmd.ItemData eggs = 4;
      case 4: {
        if (tag == 34) {
         parse_eggs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_eggs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_eggs;
        if (input->ExpectTag(42)) goto parse_steps;
        break;
      }

      // repeated .Cmd.PetAdventureStep steps = 5;
      case 5: {
        if (tag == 42) {
         parse_steps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_steps()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_steps;
        if (input->ExpectTag(50)) goto parse_raresreward;
        break;
      }

      // repeated .Cmd.ItemData raresreward = 6;
      case 6: {
        if (tag == 50) {
         parse_raresreward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_raresreward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_raresreward;
        if (input->ExpectTag(56)) goto parse_specid;
        break;
      }

      // optional uint32 specid = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_specid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &specid_)));
          set_has_specid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_eff;
        break;
      }

      // repeated .Cmd.PetEfficiencyInfo eff = 8;
      case 8: {
        if (tag == 66) {
         parse_eff:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_eff()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_eff;
        if (input->ExpectTag(74)) goto parse_rewardinfo;
        break;
      }

      // repeated .Cmd.PetMonsterRewardInfo rewardinfo = 9;
      case 9: {
        if (tag == 74) {
         parse_rewardinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_rewardinfo;
        if (input->ExpectTag(82)) goto parse_extrarewardinfo;
        break;
      }

      // repeated .Cmd.ItemData extrarewardinfo = 10;
      case 10: {
        if (tag == 82) {
         parse_extrarewardinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_extrarewardinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_extrarewardinfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.PetAdventureDBItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.PetAdventureDBItem)
  return false;
#undef DO_
}

void PetAdventureDBItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.PetAdventureDBItem)
  // optional uint32 id = 1 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 starttime = 2 [default = 0];
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->starttime(), output);
  }

  // optional .Cmd.EPetAdventureStatus status = 3 [default = EPETADVENTURESTATUS_MIN];
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  // repeated .Cmd.ItemData eggs = 4;
  for (int i = 0; i < this->eggs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->eggs(i), output);
  }

  // repeated .Cmd.PetAdventureStep steps = 5;
  for (int i = 0; i < this->steps_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->steps(i), output);
  }

  // repeated .Cmd.ItemData raresreward = 6;
  for (int i = 0; i < this->raresreward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->raresreward(i), output);
  }

  // optional uint32 specid = 7 [default = 0];
  if (has_specid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->specid(), output);
  }

  // repeated .Cmd.PetEfficiencyInfo eff = 8;
  for (int i = 0; i < this->eff_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->eff(i), output);
  }

  // repeated .Cmd.PetMonsterRewardInfo rewardinfo = 9;
  for (int i = 0; i < this->rewardinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->rewardinfo(i), output);
  }

  // repeated .Cmd.ItemData extrarewardinfo = 10;
  for (int i = 0; i < this->extrarewardinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->extrarewardinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.PetAdventureDBItem)
}

::google::protobuf::uint8* PetAdventureDBItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.PetAdventureDBItem)
  // optional uint32 id = 1 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 starttime = 2 [default = 0];
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->starttime(), target);
  }

  // optional .Cmd.EPetAdventureStatus status = 3 [default = EPETADVENTURESTATUS_MIN];
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->status(), target);
  }

  // repeated .Cmd.ItemData eggs = 4;
  for (int i = 0; i < this->eggs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->eggs(i), target);
  }

  // repeated .Cmd.PetAdventureStep steps = 5;
  for (int i = 0; i < this->steps_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->steps(i), target);
  }

  // repeated .Cmd.ItemData raresreward = 6;
  for (int i = 0; i < this->raresreward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->raresreward(i), target);
  }

  // optional uint32 specid = 7 [default = 0];
  if (has_specid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->specid(), target);
  }

  // repeated .Cmd.PetEfficiencyInfo eff = 8;
  for (int i = 0; i < this->eff_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->eff(i), target);
  }

  // repeated .Cmd.PetMonsterRewardInfo rewardinfo = 9;
  for (int i = 0; i < this->rewardinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->rewardinfo(i), target);
  }

  // repeated .Cmd.ItemData extrarewardinfo = 10;
  for (int i = 0; i < this->extrarewardinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->extrarewardinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.PetAdventureDBItem)
  return target;
}

int PetAdventureDBItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 starttime = 2 [default = 0];
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->starttime());
    }

    // optional .Cmd.EPetAdventureStatus status = 3 [default = EPETADVENTURESTATUS_MIN];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional uint32 specid = 7 [default = 0];
    if (has_specid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->specid());
    }

  }
  // repeated .Cmd.ItemData eggs = 4;
  total_size += 1 * this->eggs_size();
  for (int i = 0; i < this->eggs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->eggs(i));
  }

  // repeated .Cmd.PetAdventureStep steps = 5;
  total_size += 1 * this->steps_size();
  for (int i = 0; i < this->steps_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->steps(i));
  }

  // repeated .Cmd.ItemData raresreward = 6;
  total_size += 1 * this->raresreward_size();
  for (int i = 0; i < this->raresreward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->raresreward(i));
  }

  // repeated .Cmd.PetEfficiencyInfo eff = 8;
  total_size += 1 * this->eff_size();
  for (int i = 0; i < this->eff_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->eff(i));
  }

  // repeated .Cmd.PetMonsterRewardInfo rewardinfo = 9;
  total_size += 1 * this->rewardinfo_size();
  for (int i = 0; i < this->rewardinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardinfo(i));
  }

  // repeated .Cmd.ItemData extrarewardinfo = 10;
  total_size += 1 * this->extrarewardinfo_size();
  for (int i = 0; i < this->extrarewardinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->extrarewardinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetAdventureDBItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetAdventureDBItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetAdventureDBItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetAdventureDBItem::MergeFrom(const PetAdventureDBItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  eggs_.MergeFrom(from.eggs_);
  steps_.MergeFrom(from.steps_);
  raresreward_.MergeFrom(from.raresreward_);
  eff_.MergeFrom(from.eff_);
  rewardinfo_.MergeFrom(from.rewardinfo_);
  extrarewardinfo_.MergeFrom(from.extrarewardinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_specid()) {
      set_specid(from.specid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetAdventureDBItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetAdventureDBItem::CopyFrom(const PetAdventureDBItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetAdventureDBItem::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->eff())) return false;
  return true;
}

void PetAdventureDBItem::Swap(PetAdventureDBItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(starttime_, other->starttime_);
    std::swap(status_, other->status_);
    eggs_.Swap(&other->eggs_);
    steps_.Swap(&other->steps_);
    raresreward_.Swap(&other->raresreward_);
    std::swap(specid_, other->specid_);
    eff_.Swap(&other->eff_);
    rewardinfo_.Swap(&other->rewardinfo_);
    extrarewardinfo_.Swap(&other->extrarewardinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetAdventureDBItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetAdventureDBItem_descriptor_;
  metadata.reflection = PetAdventureDBItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobPetAdventure::kItemsFieldNumber;
const int BlobPetAdventure::kUnlockareaFieldNumber;
const int BlobPetAdventure::kVersionFieldNumber;
#endif  // !_MSC_VER

BlobPetAdventure::BlobPetAdventure()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobPetAdventure)
}

void BlobPetAdventure::InitAsDefaultInstance() {
}

BlobPetAdventure::BlobPetAdventure(const BlobPetAdventure& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobPetAdventure)
}

void BlobPetAdventure::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobPetAdventure::~BlobPetAdventure() {
  // @@protoc_insertion_point(destructor:Cmd.BlobPetAdventure)
  SharedDtor();
}

void BlobPetAdventure::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobPetAdventure::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobPetAdventure::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobPetAdventure_descriptor_;
}

const BlobPetAdventure& BlobPetAdventure::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobPetAdventure* BlobPetAdventure::default_instance_ = NULL;

BlobPetAdventure* BlobPetAdventure::New() const {
  return new BlobPetAdventure;
}

void BlobPetAdventure::Clear() {
  version_ = 0u;
  items_.Clear();
  unlockarea_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobPetAdventure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobPetAdventure)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Cmd.PetAdventureDBItem items = 1;
      case 1: {
        if (tag == 10) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectTag(16)) goto parse_unlockarea;
        break;
      }

      // repeated uint32 unlockarea = 2;
      case 2: {
        if (tag == 16) {
         parse_unlockarea:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_unlockarea())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_unlockarea())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_unlockarea;
        if (input->ExpectTag(24)) goto parse_version;
        break;
      }

      // optional uint32 version = 3;
      case 3: {
        if (tag == 24) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobPetAdventure)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobPetAdventure)
  return false;
#undef DO_
}

void BlobPetAdventure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobPetAdventure)
  // repeated .Cmd.PetAdventureDBItem items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  // repeated uint32 unlockarea = 2;
  for (int i = 0; i < this->unlockarea_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->unlockarea(i), output);
  }

  // optional uint32 version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobPetAdventure)
}

::google::protobuf::uint8* BlobPetAdventure::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobPetAdventure)
  // repeated .Cmd.PetAdventureDBItem items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  // repeated uint32 unlockarea = 2;
  for (int i = 0; i < this->unlockarea_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->unlockarea(i), target);
  }

  // optional uint32 version = 3;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobPetAdventure)
  return target;
}

int BlobPetAdventure::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional uint32 version = 3;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

  }
  // repeated .Cmd.PetAdventureDBItem items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  // repeated uint32 unlockarea = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->unlockarea_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->unlockarea(i));
    }
    total_size += 1 * this->unlockarea_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobPetAdventure::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobPetAdventure* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobPetAdventure*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobPetAdventure::MergeFrom(const BlobPetAdventure& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  unlockarea_.MergeFrom(from.unlockarea_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobPetAdventure::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobPetAdventure::CopyFrom(const BlobPetAdventure& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobPetAdventure::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->items())) return false;
  return true;
}

void BlobPetAdventure::Swap(BlobPetAdventure* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    unlockarea_.Swap(&other->unlockarea_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobPetAdventure::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobPetAdventure_descriptor_;
  metadata.reflection = BlobPetAdventure_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobPetWork::kManualFieldNumber;
const int BlobPetWork::kDatasFieldNumber;
const int BlobPetWork::kPetsFieldNumber;
const int BlobPetWork::kRewardsFieldNumber;
const int BlobPetWork::kCardExpiretimeFieldNumber;
#endif  // !_MSC_VER

BlobPetWork::BlobPetWork()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobPetWork)
}

void BlobPetWork::InitAsDefaultInstance() {
  manual_ = const_cast< ::Cmd::WorkManual*>(&::Cmd::WorkManual::default_instance());
}

BlobPetWork::BlobPetWork(const BlobPetWork& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobPetWork)
}

void BlobPetWork::SharedCtor() {
  _cached_size_ = 0;
  manual_ = NULL;
  card_expiretime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobPetWork::~BlobPetWork() {
  // @@protoc_insertion_point(destructor:Cmd.BlobPetWork)
  SharedDtor();
}

void BlobPetWork::SharedDtor() {
  if (this != default_instance_) {
    delete manual_;
  }
}

void BlobPetWork::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobPetWork::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobPetWork_descriptor_;
}

const BlobPetWork& BlobPetWork::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobPetWork* BlobPetWork::default_instance_ = NULL;

BlobPetWork* BlobPetWork::New() const {
  return new BlobPetWork;
}

void BlobPetWork::Clear() {
  if (_has_bits_[0 / 32] & 17) {
    if (has_manual()) {
      if (manual_ != NULL) manual_->::Cmd::WorkManual::Clear();
    }
    card_expiretime_ = 0u;
  }
  datas_.Clear();
  pets_.Clear();
  rewards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobPetWork::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobPetWork)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.WorkManual manual = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_manual()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_datas;
        break;
      }

      // repeated .Cmd.WorkSpace datas = 2;
      case 2: {
        if (tag == 18) {
         parse_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_datas;
        if (input->ExpectTag(26)) goto parse_pets;
        break;
      }

      // repeated .Cmd.WorkPetExtra pets = 3;
      case 3: {
        if (tag == 26) {
         parse_pets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pets()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pets;
        if (input->ExpectTag(32)) goto parse_card_expiretime;
        break;
      }

      // optional uint32 card_expiretime = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_card_expiretime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_expiretime_)));
          set_has_card_expiretime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_rewards;
        break;
      }

      // repeated .Cmd.WorkDayReward rewards = 5;
      case 5: {
        if (tag == 42) {
         parse_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_rewards;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobPetWork)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobPetWork)
  return false;
#undef DO_
}

void BlobPetWork::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobPetWork)
  // optional .Cmd.WorkManual manual = 1;
  if (has_manual()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->manual(), output);
  }

  // repeated .Cmd.WorkSpace datas = 2;
  for (int i = 0; i < this->datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->datas(i), output);
  }

  // repeated .Cmd.WorkPetExtra pets = 3;
  for (int i = 0; i < this->pets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pets(i), output);
  }

  // optional uint32 card_expiretime = 4 [default = 0];
  if (has_card_expiretime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->card_expiretime(), output);
  }

  // repeated .Cmd.WorkDayReward rewards = 5;
  for (int i = 0; i < this->rewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->rewards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobPetWork)
}

::google::protobuf::uint8* BlobPetWork::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobPetWork)
  // optional .Cmd.WorkManual manual = 1;
  if (has_manual()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->manual(), target);
  }

  // repeated .Cmd.WorkSpace datas = 2;
  for (int i = 0; i < this->datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->datas(i), target);
  }

  // repeated .Cmd.WorkPetExtra pets = 3;
  for (int i = 0; i < this->pets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pets(i), target);
  }

  // optional uint32 card_expiretime = 4 [default = 0];
  if (has_card_expiretime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->card_expiretime(), target);
  }

  // repeated .Cmd.WorkDayReward rewards = 5;
  for (int i = 0; i < this->rewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->rewards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobPetWork)
  return target;
}

int BlobPetWork::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.WorkManual manual = 1;
    if (has_manual()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->manual());
    }

    // optional uint32 card_expiretime = 4 [default = 0];
    if (has_card_expiretime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->card_expiretime());
    }

  }
  // repeated .Cmd.WorkSpace datas = 2;
  total_size += 1 * this->datas_size();
  for (int i = 0; i < this->datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datas(i));
  }

  // repeated .Cmd.WorkPetExtra pets = 3;
  total_size += 1 * this->pets_size();
  for (int i = 0; i < this->pets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pets(i));
  }

  // repeated .Cmd.WorkDayReward rewards = 5;
  total_size += 1 * this->rewards_size();
  for (int i = 0; i < this->rewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobPetWork::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobPetWork* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobPetWork*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobPetWork::MergeFrom(const BlobPetWork& from) {
  GOOGLE_CHECK_NE(&from, this);
  datas_.MergeFrom(from.datas_);
  pets_.MergeFrom(from.pets_);
  rewards_.MergeFrom(from.rewards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_manual()) {
      mutable_manual()->::Cmd::WorkManual::MergeFrom(from.manual());
    }
    if (from.has_card_expiretime()) {
      set_card_expiretime(from.card_expiretime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobPetWork::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobPetWork::CopyFrom(const BlobPetWork& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobPetWork::IsInitialized() const {

  return true;
}

void BlobPetWork::Swap(BlobPetWork* other) {
  if (other != this) {
    std::swap(manual_, other->manual_);
    datas_.Swap(&other->datas_);
    pets_.Swap(&other->pets_);
    rewards_.Swap(&other->rewards_);
    std::swap(card_expiretime_, other->card_expiretime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobPetWork::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobPetWork_descriptor_;
  metadata.reflection = BlobPetWork_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobEye::kCuridFieldNumber;
const int BlobEye::kUnlockidsFieldNumber;
#endif  // !_MSC_VER

BlobEye::BlobEye()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobEye)
}

void BlobEye::InitAsDefaultInstance() {
}

BlobEye::BlobEye(const BlobEye& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobEye)
}

void BlobEye::SharedCtor() {
  _cached_size_ = 0;
  curid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobEye::~BlobEye() {
  // @@protoc_insertion_point(destructor:Cmd.BlobEye)
  SharedDtor();
}

void BlobEye::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobEye::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobEye::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobEye_descriptor_;
}

const BlobEye& BlobEye::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobEye* BlobEye::default_instance_ = NULL;

BlobEye* BlobEye::New() const {
  return new BlobEye;
}

void BlobEye::Clear() {
  curid_ = 0u;
  unlockids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobEye::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobEye)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 curid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curid_)));
          set_has_curid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_unlockids;
        break;
      }

      // repeated uint32 unlockids = 2;
      case 2: {
        if (tag == 16) {
         parse_unlockids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_unlockids())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_unlockids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_unlockids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobEye)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobEye)
  return false;
#undef DO_
}

void BlobEye::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobEye)
  // optional uint32 curid = 1 [default = 0];
  if (has_curid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->curid(), output);
  }

  // repeated uint32 unlockids = 2;
  for (int i = 0; i < this->unlockids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->unlockids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobEye)
}

::google::protobuf::uint8* BlobEye::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobEye)
  // optional uint32 curid = 1 [default = 0];
  if (has_curid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->curid(), target);
  }

  // repeated uint32 unlockids = 2;
  for (int i = 0; i < this->unlockids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->unlockids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobEye)
  return target;
}

int BlobEye::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 curid = 1 [default = 0];
    if (has_curid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curid());
    }

  }
  // repeated uint32 unlockids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->unlockids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->unlockids(i));
    }
    total_size += 1 * this->unlockids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobEye::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobEye* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobEye*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobEye::MergeFrom(const BlobEye& from) {
  GOOGLE_CHECK_NE(&from, this);
  unlockids_.MergeFrom(from.unlockids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_curid()) {
      set_curid(from.curid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobEye::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobEye::CopyFrom(const BlobEye& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobEye::IsInitialized() const {

  return true;
}

void BlobEye::Swap(BlobEye* other) {
  if (other != this) {
    std::swap(curid_, other->curid_);
    unlockids_.Swap(&other->unlockids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobEye::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobEye_descriptor_;
  metadata.reflection = BlobEye_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobTutorTask::kItemsFieldNumber;
const int BlobTutorTask::kProficiencyFieldNumber;
const int BlobTutorTask::kTutorrewardsFieldNumber;
const int BlobTutorTask::kGrowrewardFieldNumber;
const int BlobTutorTask::kTutorgrowrewardFieldNumber;
const int BlobTutorTask::kGrowrewardlvFieldNumber;
#endif  // !_MSC_VER

BlobTutorTask::BlobTutorTask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobTutorTask)
}

void BlobTutorTask::InitAsDefaultInstance() {
}

BlobTutorTask::BlobTutorTask(const BlobTutorTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobTutorTask)
}

void BlobTutorTask::SharedCtor() {
  _cached_size_ = 0;
  proficiency_ = 0u;
  growrewardlv_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobTutorTask::~BlobTutorTask() {
  // @@protoc_insertion_point(destructor:Cmd.BlobTutorTask)
  SharedDtor();
}

void BlobTutorTask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobTutorTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobTutorTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobTutorTask_descriptor_;
}

const BlobTutorTask& BlobTutorTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobTutorTask* BlobTutorTask::default_instance_ = NULL;

BlobTutorTask* BlobTutorTask::New() const {
  return new BlobTutorTask;
}

void BlobTutorTask::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BlobTutorTask*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(proficiency_, growrewardlv_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  items_.Clear();
  tutorrewards_.Clear();
  growreward_.Clear();
  tutorgrowreward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobTutorTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobTutorTask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Cmd.TutorTaskItem items = 1;
      case 1: {
        if (tag == 10) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectTag(16)) goto parse_proficiency;
        break;
      }

      // optional uint32 proficiency = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_proficiency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proficiency_)));
          set_has_proficiency();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_tutorrewards;
        break;
      }

      // repeated .Cmd.TutorReward tutorrewards = 3;
      case 3: {
        if (tag == 26) {
         parse_tutorrewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tutorrewards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_tutorrewards;
        if (input->ExpectTag(32)) goto parse_growreward;
        break;
      }

      // repeated uint64 growreward = 4;
      case 4: {
        if (tag == 32) {
         parse_growreward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 32, input, this->mutable_growreward())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_growreward())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_growreward;
        if (input->ExpectTag(40)) goto parse_tutorgrowreward;
        break;
      }

      // repeated uint64 tutorgrowreward = 5;
      case 5: {
        if (tag == 40) {
         parse_tutorgrowreward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 40, input, this->mutable_tutorgrowreward())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_tutorgrowreward())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_tutorgrowreward;
        if (input->ExpectTag(48)) goto parse_growrewardlv;
        break;
      }

      // optional uint32 growrewardlv = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_growrewardlv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &growrewardlv_)));
          set_has_growrewardlv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobTutorTask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobTutorTask)
  return false;
#undef DO_
}

void BlobTutorTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobTutorTask)
  // repeated .Cmd.TutorTaskItem items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  // optional uint32 proficiency = 2 [default = 0];
  if (has_proficiency()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->proficiency(), output);
  }

  // repeated .Cmd.TutorReward tutorrewards = 3;
  for (int i = 0; i < this->tutorrewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->tutorrewards(i), output);
  }

  // repeated uint64 growreward = 4;
  for (int i = 0; i < this->growreward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      4, this->growreward(i), output);
  }

  // repeated uint64 tutorgrowreward = 5;
  for (int i = 0; i < this->tutorgrowreward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      5, this->tutorgrowreward(i), output);
  }

  // optional uint32 growrewardlv = 6 [default = 0];
  if (has_growrewardlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->growrewardlv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobTutorTask)
}

::google::protobuf::uint8* BlobTutorTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobTutorTask)
  // repeated .Cmd.TutorTaskItem items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  // optional uint32 proficiency = 2 [default = 0];
  if (has_proficiency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->proficiency(), target);
  }

  // repeated .Cmd.TutorReward tutorrewards = 3;
  for (int i = 0; i < this->tutorrewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->tutorrewards(i), target);
  }

  // repeated uint64 growreward = 4;
  for (int i = 0; i < this->growreward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(4, this->growreward(i), target);
  }

  // repeated uint64 tutorgrowreward = 5;
  for (int i = 0; i < this->tutorgrowreward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(5, this->tutorgrowreward(i), target);
  }

  // optional uint32 growrewardlv = 6 [default = 0];
  if (has_growrewardlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->growrewardlv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobTutorTask)
  return target;
}

int BlobTutorTask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 proficiency = 2 [default = 0];
    if (has_proficiency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->proficiency());
    }

    // optional uint32 growrewardlv = 6 [default = 0];
    if (has_growrewardlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->growrewardlv());
    }

  }
  // repeated .Cmd.TutorTaskItem items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  // repeated .Cmd.TutorReward tutorrewards = 3;
  total_size += 1 * this->tutorrewards_size();
  for (int i = 0; i < this->tutorrewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tutorrewards(i));
  }

  // repeated uint64 growreward = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->growreward_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->growreward(i));
    }
    total_size += 1 * this->growreward_size() + data_size;
  }

  // repeated uint64 tutorgrowreward = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->tutorgrowreward_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->tutorgrowreward(i));
    }
    total_size += 1 * this->tutorgrowreward_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobTutorTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobTutorTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobTutorTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobTutorTask::MergeFrom(const BlobTutorTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  tutorrewards_.MergeFrom(from.tutorrewards_);
  growreward_.MergeFrom(from.growreward_);
  tutorgrowreward_.MergeFrom(from.tutorgrowreward_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_proficiency()) {
      set_proficiency(from.proficiency());
    }
    if (from.has_growrewardlv()) {
      set_growrewardlv(from.growrewardlv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobTutorTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobTutorTask::CopyFrom(const BlobTutorTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobTutorTask::IsInitialized() const {

  return true;
}

void BlobTutorTask::Swap(BlobTutorTask* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(proficiency_, other->proficiency_);
    tutorrewards_.Swap(&other->tutorrewards_);
    growreward_.Swap(&other->growreward_);
    tutorgrowreward_.Swap(&other->tutorgrowreward_);
    std::swap(growrewardlv_, other->growrewardlv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobTutorTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobTutorTask_descriptor_;
  metadata.reflection = BlobTutorTask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobActivityEvent::kRewarditemsFieldNumber;
const int BlobActivityEvent::kEventcntFieldNumber;
#endif  // !_MSC_VER

BlobActivityEvent::BlobActivityEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobActivityEvent)
}

void BlobActivityEvent::InitAsDefaultInstance() {
}

BlobActivityEvent::BlobActivityEvent(const BlobActivityEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobActivityEvent)
}

void BlobActivityEvent::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobActivityEvent::~BlobActivityEvent() {
  // @@protoc_insertion_point(destructor:Cmd.BlobActivityEvent)
  SharedDtor();
}

void BlobActivityEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobActivityEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobActivityEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobActivityEvent_descriptor_;
}

const BlobActivityEvent& BlobActivityEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobActivityEvent* BlobActivityEvent::default_instance_ = NULL;

BlobActivityEvent* BlobActivityEvent::New() const {
  return new BlobActivityEvent;
}

void BlobActivityEvent::Clear() {
  rewarditems_.Clear();
  eventcnt_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobActivityEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobActivityEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Cmd.AERewardItem rewarditems = 1;
      case 1: {
        if (tag == 10) {
         parse_rewarditems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewarditems()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_rewarditems;
        if (input->ExpectTag(18)) goto parse_eventcnt;
        break;
      }

      // repeated .Cmd.ActivityEventCnt eventcnt = 2;
      case 2: {
        if (tag == 18) {
         parse_eventcnt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_eventcnt()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_eventcnt;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobActivityEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobActivityEvent)
  return false;
#undef DO_
}

void BlobActivityEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobActivityEvent)
  // repeated .Cmd.AERewardItem rewarditems = 1;
  for (int i = 0; i < this->rewarditems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewarditems(i), output);
  }

  // repeated .Cmd.ActivityEventCnt eventcnt = 2;
  for (int i = 0; i < this->eventcnt_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->eventcnt(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobActivityEvent)
}

::google::protobuf::uint8* BlobActivityEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobActivityEvent)
  // repeated .Cmd.AERewardItem rewarditems = 1;
  for (int i = 0; i < this->rewarditems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rewarditems(i), target);
  }

  // repeated .Cmd.ActivityEventCnt eventcnt = 2;
  for (int i = 0; i < this->eventcnt_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->eventcnt(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobActivityEvent)
  return target;
}

int BlobActivityEvent::ByteSize() const {
  int total_size = 0;

  // repeated .Cmd.AERewardItem rewarditems = 1;
  total_size += 1 * this->rewarditems_size();
  for (int i = 0; i < this->rewarditems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewarditems(i));
  }

  // repeated .Cmd.ActivityEventCnt eventcnt = 2;
  total_size += 1 * this->eventcnt_size();
  for (int i = 0; i < this->eventcnt_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->eventcnt(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobActivityEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobActivityEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobActivityEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobActivityEvent::MergeFrom(const BlobActivityEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewarditems_.MergeFrom(from.rewarditems_);
  eventcnt_.MergeFrom(from.eventcnt_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobActivityEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobActivityEvent::CopyFrom(const BlobActivityEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobActivityEvent::IsInitialized() const {

  return true;
}

void BlobActivityEvent::Swap(BlobActivityEvent* other) {
  if (other != this) {
    rewarditems_.Swap(&other->rewarditems_);
    eventcnt_.Swap(&other->eventcnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobActivityEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobActivityEvent_descriptor_;
  metadata.reflection = BlobActivityEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobGuildChallenge::kItemsFieldNumber;
#endif  // !_MSC_VER

BlobGuildChallenge::BlobGuildChallenge()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobGuildChallenge)
}

void BlobGuildChallenge::InitAsDefaultInstance() {
}

BlobGuildChallenge::BlobGuildChallenge(const BlobGuildChallenge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobGuildChallenge)
}

void BlobGuildChallenge::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobGuildChallenge::~BlobGuildChallenge() {
  // @@protoc_insertion_point(destructor:Cmd.BlobGuildChallenge)
  SharedDtor();
}

void BlobGuildChallenge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobGuildChallenge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobGuildChallenge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobGuildChallenge_descriptor_;
}

const BlobGuildChallenge& BlobGuildChallenge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobGuildChallenge* BlobGuildChallenge::default_instance_ = NULL;

BlobGuildChallenge* BlobGuildChallenge::New() const {
  return new BlobGuildChallenge;
}

void BlobGuildChallenge::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobGuildChallenge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobGuildChallenge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Cmd.GuildChallengeItem items = 1;
      case 1: {
        if (tag == 10) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobGuildChallenge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobGuildChallenge)
  return false;
#undef DO_
}

void BlobGuildChallenge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobGuildChallenge)
  // repeated .Cmd.GuildChallengeItem items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobGuildChallenge)
}

::google::protobuf::uint8* BlobGuildChallenge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobGuildChallenge)
  // repeated .Cmd.GuildChallengeItem items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobGuildChallenge)
  return target;
}

int BlobGuildChallenge::ByteSize() const {
  int total_size = 0;

  // repeated .Cmd.GuildChallengeItem items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobGuildChallenge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobGuildChallenge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobGuildChallenge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobGuildChallenge::MergeFrom(const BlobGuildChallenge& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobGuildChallenge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobGuildChallenge::CopyFrom(const BlobGuildChallenge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobGuildChallenge::IsInitialized() const {

  return true;
}

void BlobGuildChallenge::Swap(BlobGuildChallenge* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobGuildChallenge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobGuildChallenge_descriptor_;
  metadata.reflection = BlobGuildChallenge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobGvgData::kDatasFieldNumber;
const int BlobGvgData::kExpiretimeFieldNumber;
#endif  // !_MSC_VER

BlobGvgData::BlobGvgData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobGvgData)
}

void BlobGvgData::InitAsDefaultInstance() {
}

BlobGvgData::BlobGvgData(const BlobGvgData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobGvgData)
}

void BlobGvgData::SharedCtor() {
  _cached_size_ = 0;
  expiretime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobGvgData::~BlobGvgData() {
  // @@protoc_insertion_point(destructor:Cmd.BlobGvgData)
  SharedDtor();
}

void BlobGvgData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobGvgData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobGvgData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobGvgData_descriptor_;
}

const BlobGvgData& BlobGvgData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobGvgData* BlobGvgData::default_instance_ = NULL;

BlobGvgData* BlobGvgData::New() const {
  return new BlobGvgData;
}

void BlobGvgData::Clear() {
  expiretime_ = 0u;
  datas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobGvgData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobGvgData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Cmd.GvgData datas = 1;
      case 1: {
        if (tag == 10) {
         parse_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_datas;
        if (input->ExpectTag(16)) goto parse_expiretime;
        break;
      }

      // optional uint32 expiretime = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_expiretime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expiretime_)));
          set_has_expiretime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobGvgData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobGvgData)
  return false;
#undef DO_
}

void BlobGvgData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobGvgData)
  // repeated .Cmd.GvgData datas = 1;
  for (int i = 0; i < this->datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->datas(i), output);
  }

  // optional uint32 expiretime = 2 [default = 0];
  if (has_expiretime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->expiretime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobGvgData)
}

::google::protobuf::uint8* BlobGvgData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobGvgData)
  // repeated .Cmd.GvgData datas = 1;
  for (int i = 0; i < this->datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->datas(i), target);
  }

  // optional uint32 expiretime = 2 [default = 0];
  if (has_expiretime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->expiretime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobGvgData)
  return target;
}

int BlobGvgData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 expiretime = 2 [default = 0];
    if (has_expiretime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expiretime());
    }

  }
  // repeated .Cmd.GvgData datas = 1;
  total_size += 1 * this->datas_size();
  for (int i = 0; i < this->datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobGvgData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobGvgData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobGvgData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobGvgData::MergeFrom(const BlobGvgData& from) {
  GOOGLE_CHECK_NE(&from, this);
  datas_.MergeFrom(from.datas_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_expiretime()) {
      set_expiretime(from.expiretime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobGvgData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobGvgData::CopyFrom(const BlobGvgData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobGvgData::IsInitialized() const {

  return true;
}

void BlobGvgData::Swap(BlobGvgData* other) {
  if (other != this) {
    datas_.Swap(&other->datas_);
    std::swap(expiretime_, other->expiretime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobGvgData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobGvgData_descriptor_;
  metadata.reflection = BlobGvgData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobUserData::kXFieldNumber;
const int BlobUserData::kYFieldNumber;
const int BlobUserData::kZFieldNumber;
const int BlobUserData::kCdtimeFieldNumber;
const int BlobUserData::kShortcutsFieldNumber;
const int BlobUserData::kFollowerFieldNumber;
const int BlobUserData::kStageFieldNumber;
const int BlobUserData::kQuestnpcFieldNumber;
const int BlobUserData::kBufferFieldNumber;
const int BlobUserData::kMenuFieldNumber;
const int BlobUserData::kClothcolorFieldNumber;
const int BlobUserData::kPortFieldNumber;
const int BlobUserData::kItemsFieldNumber;
const int BlobUserData::kHairFieldNumber;
const int BlobUserData::kMapsFieldNumber;
const int BlobUserData::kGearFieldNumber;
const int BlobUserData::kGardenFieldNumber;
const int BlobUserData::kPurifyFieldNumber;
const int BlobUserData::kTipsFieldNumber;
const int BlobUserData::kSavemapFieldNumber;
const int BlobUserData::kGmsFieldNumber;
const int BlobUserData::kFreyjaFieldNumber;
const int BlobUserData::kIntersFieldNumber;
const int BlobUserData::kLaboratoryFieldNumber;
const int BlobUserData::kSceneryFieldNumber;
const int BlobUserData::kCarrierFieldNumber;
const int BlobUserData::kLastmapidFieldNumber;
const int BlobUserData::kShownpcsFieldNumber;
const int BlobUserData::kMapareasFieldNumber;
const int BlobUserData::kHandsFieldNumber;
const int BlobUserData::kUsershowFieldNumber;
const int BlobUserData::kLastrealmapidFieldNumber;
const int BlobUserData::kTraceFieldNumber;
const int BlobUserData::kOptionFieldNumber;
const int BlobUserData::kFirstactionFieldNumber;
const int BlobUserData::kTitleFieldNumber;
const int BlobUserData::kLinesFieldNumber;
const int BlobUserData::kDojoFieldNumber;
const int BlobUserData::kPatchversionFieldNumber;
const int BlobUserData::kFoodFieldNumber;
#endif  // !_MSC_VER

BlobUserData::BlobUserData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobUserData)
}

void BlobUserData::InitAsDefaultInstance() {
  cdtime_ = const_cast< ::Cmd::BlobCDTime*>(&::Cmd::BlobCDTime::default_instance());
  shortcuts_ = const_cast< ::Cmd::BlobShortcut*>(&::Cmd::BlobShortcut::default_instance());
  follower_ = const_cast< ::Cmd::BlobFollower*>(&::Cmd::BlobFollower::default_instance());
  stage_ = const_cast< ::Cmd::BlobStage*>(&::Cmd::BlobStage::default_instance());
  questnpc_ = const_cast< ::Cmd::BlobQuestNpc*>(&::Cmd::BlobQuestNpc::default_instance());
  buffer_ = const_cast< ::Cmd::BlobBuffer*>(&::Cmd::BlobBuffer::default_instance());
  menu_ = const_cast< ::Cmd::BlobMenu*>(&::Cmd::BlobMenu::default_instance());
  port_ = const_cast< ::Cmd::BlobPortrait*>(&::Cmd::BlobPortrait::default_instance());
  items_ = const_cast< ::Cmd::BlobShopGotItem*>(&::Cmd::BlobShopGotItem::default_instance());
  hair_ = const_cast< ::Cmd::BlobHair*>(&::Cmd::BlobHair::default_instance());
  maps_ = const_cast< ::Cmd::BlobKnownMaps*>(&::Cmd::BlobKnownMaps::default_instance());
  gear_ = const_cast< ::Cmd::BlobGears*>(&::Cmd::BlobGears::default_instance());
  tips_ = const_cast< ::Cmd::BlobTips*>(&::Cmd::BlobTips::default_instance());
  gms_ = const_cast< ::Cmd::BlobGMEffects*>(&::Cmd::BlobGMEffects::default_instance());
  freyja_ = const_cast< ::Cmd::BlobFreyja*>(&::Cmd::BlobFreyja::default_instance());
  inters_ = const_cast< ::Cmd::BlobInter*>(&::Cmd::BlobInter::default_instance());
  laboratory_ = const_cast< ::Cmd::BlobLaboratory*>(&::Cmd::BlobLaboratory::default_instance());
  scenery_ = const_cast< ::Cmd::BlobScenery*>(&::Cmd::BlobScenery::default_instance());
  carrier_ = const_cast< ::Cmd::BlobCarrier*>(&::Cmd::BlobCarrier::default_instance());
  hands_ = const_cast< ::Cmd::BlobHands*>(&::Cmd::BlobHands::default_instance());
  usershow_ = const_cast< ::Cmd::BlobShow*>(&::Cmd::BlobShow::default_instance());
  trace_ = const_cast< ::Cmd::BlobTrace*>(&::Cmd::BlobTrace::default_instance());
  option_ = const_cast< ::Cmd::BlobOption*>(&::Cmd::BlobOption::default_instance());
  firstaction_ = const_cast< ::Cmd::BlobFirstActionDone*>(&::Cmd::BlobFirstActionDone::default_instance());
  title_ = const_cast< ::Cmd::BlobTitle*>(&::Cmd::BlobTitle::default_instance());
  lines_ = const_cast< ::Cmd::BlobLine*>(&::Cmd::BlobLine::default_instance());
  dojo_ = const_cast< ::Cmd::BlobDojo*>(&::Cmd::BlobDojo::default_instance());
  food_ = const_cast< ::Cmd::BlobFood*>(&::Cmd::BlobFood::default_instance());
}

BlobUserData::BlobUserData(const BlobUserData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobUserData)
}

void BlobUserData::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  cdtime_ = NULL;
  shortcuts_ = NULL;
  follower_ = NULL;
  stage_ = NULL;
  questnpc_ = NULL;
  buffer_ = NULL;
  menu_ = NULL;
  clothcolor_ = 0u;
  port_ = NULL;
  items_ = NULL;
  hair_ = NULL;
  maps_ = NULL;
  gear_ = NULL;
  garden_ = 0u;
  purify_ = 0u;
  tips_ = NULL;
  savemap_ = 0u;
  gms_ = NULL;
  freyja_ = NULL;
  inters_ = NULL;
  laboratory_ = NULL;
  scenery_ = NULL;
  carrier_ = NULL;
  lastmapid_ = 0u;
  hands_ = NULL;
  usershow_ = NULL;
  lastrealmapid_ = 0u;
  trace_ = NULL;
  option_ = NULL;
  firstaction_ = NULL;
  title_ = NULL;
  lines_ = NULL;
  dojo_ = NULL;
  food_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobUserData::~BlobUserData() {
  // @@protoc_insertion_point(destructor:Cmd.BlobUserData)
  SharedDtor();
}

void BlobUserData::SharedDtor() {
  if (this != default_instance_) {
    delete cdtime_;
    delete shortcuts_;
    delete follower_;
    delete stage_;
    delete questnpc_;
    delete buffer_;
    delete menu_;
    delete port_;
    delete items_;
    delete hair_;
    delete maps_;
    delete gear_;
    delete tips_;
    delete gms_;
    delete freyja_;
    delete inters_;
    delete laboratory_;
    delete scenery_;
    delete carrier_;
    delete hands_;
    delete usershow_;
    delete trace_;
    delete option_;
    delete firstaction_;
    delete title_;
    delete lines_;
    delete dojo_;
    delete food_;
  }
}

void BlobUserData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobUserData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobUserData_descriptor_;
}

const BlobUserData& BlobUserData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobUserData* BlobUserData::default_instance_ = NULL;

BlobUserData* BlobUserData::New() const {
  return new BlobUserData;
}

void BlobUserData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BlobUserData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(x_, y_);
    z_ = 0;
    if (has_cdtime()) {
      if (cdtime_ != NULL) cdtime_->::Cmd::BlobCDTime::Clear();
    }
    if (has_shortcuts()) {
      if (shortcuts_ != NULL) shortcuts_->::Cmd::BlobShortcut::Clear();
    }
    if (has_follower()) {
      if (follower_ != NULL) follower_->::Cmd::BlobFollower::Clear();
    }
    if (has_stage()) {
      if (stage_ != NULL) stage_->::Cmd::BlobStage::Clear();
    }
    if (has_questnpc()) {
      if (questnpc_ != NULL) questnpc_->::Cmd::BlobQuestNpc::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    if (has_buffer()) {
      if (buffer_ != NULL) buffer_->::Cmd::BlobBuffer::Clear();
    }
    if (has_menu()) {
      if (menu_ != NULL) menu_->::Cmd::BlobMenu::Clear();
    }
    clothcolor_ = 0u;
    if (has_port()) {
      if (port_ != NULL) port_->::Cmd::BlobPortrait::Clear();
    }
    if (has_items()) {
      if (items_ != NULL) items_->::Cmd::BlobShopGotItem::Clear();
    }
    if (has_hair()) {
      if (hair_ != NULL) hair_->::Cmd::BlobHair::Clear();
    }
    if (has_maps()) {
      if (maps_ != NULL) maps_->::Cmd::BlobKnownMaps::Clear();
    }
    if (has_gear()) {
      if (gear_ != NULL) gear_->::Cmd::BlobGears::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(garden_, purify_);
    if (has_tips()) {
      if (tips_ != NULL) tips_->::Cmd::BlobTips::Clear();
    }
    savemap_ = 0u;
    if (has_gms()) {
      if (gms_ != NULL) gms_->::Cmd::BlobGMEffects::Clear();
    }
    if (has_freyja()) {
      if (freyja_ != NULL) freyja_->::Cmd::BlobFreyja::Clear();
    }
    if (has_inters()) {
      if (inters_ != NULL) inters_->::Cmd::BlobInter::Clear();
    }
    if (has_laboratory()) {
      if (laboratory_ != NULL) laboratory_->::Cmd::BlobLaboratory::Clear();
    }
  }
  if (_has_bits_[24 / 32] & 3875536896) {
    if (has_scenery()) {
      if (scenery_ != NULL) scenery_->::Cmd::BlobScenery::Clear();
    }
    if (has_carrier()) {
      if (carrier_ != NULL) carrier_->::Cmd::BlobCarrier::Clear();
    }
    lastmapid_ = 0u;
    if (has_hands()) {
      if (hands_ != NULL) hands_->::Cmd::BlobHands::Clear();
    }
    if (has_usershow()) {
      if (usershow_ != NULL) usershow_->::Cmd::BlobShow::Clear();
    }
    lastrealmapid_ = 0u;
  }
  if (_has_bits_[32 / 32] & 191) {
    if (has_trace()) {
      if (trace_ != NULL) trace_->::Cmd::BlobTrace::Clear();
    }
    if (has_option()) {
      if (option_ != NULL) option_->::Cmd::BlobOption::Clear();
    }
    if (has_firstaction()) {
      if (firstaction_ != NULL) firstaction_->::Cmd::BlobFirstActionDone::Clear();
    }
    if (has_title()) {
      if (title_ != NULL) title_->::Cmd::BlobTitle::Clear();
    }
    if (has_lines()) {
      if (lines_ != NULL) lines_->::Cmd::BlobLine::Clear();
    }
    if (has_dojo()) {
      if (dojo_ != NULL) dojo_->::Cmd::BlobDojo::Clear();
    }
    if (has_food()) {
      if (food_ != NULL) food_->::Cmd::BlobFood::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  shownpcs_.Clear();
  mapareas_.Clear();
  patchversion_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobUserData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobUserData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1 [default = 0];
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2 [default = 0];
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // optional float z = 3 [default = 0];
      case 3: {
        if (tag == 29) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_cdtime;
        break;
      }

      // optional .Cmd.BlobCDTime cdtime = 4;
      case 4: {
        if (tag == 34) {
         parse_cdtime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cdtime()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_shortcuts;
        break;
      }

      // optional .Cmd.BlobShortcut shortcuts = 5;
      case 5: {
        if (tag == 42) {
         parse_shortcuts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shortcuts()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_follower;
        break;
      }

      // optional .Cmd.BlobFollower follower = 6;
      case 6: {
        if (tag == 50) {
         parse_follower:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_follower()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_stage;
        break;
      }

      // optional .Cmd.BlobStage stage = 7;
      case 7: {
        if (tag == 58) {
         parse_stage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_questnpc;
        break;
      }

      // optional .Cmd.BlobQuestNpc questnpc = 8;
      case 8: {
        if (tag == 66) {
         parse_questnpc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_questnpc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_buffer;
        break;
      }

      // optional .Cmd.BlobBuffer buffer = 9;
      case 9: {
        if (tag == 74) {
         parse_buffer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_menu;
        break;
      }

      // optional .Cmd.BlobMenu menu = 10;
      case 10: {
        if (tag == 82) {
         parse_menu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_menu()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_clothcolor;
        break;
      }

      // optional uint32 clothcolor = 11 [default = 0];
      case 11: {
        if (tag == 88) {
         parse_clothcolor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clothcolor_)));
          set_has_clothcolor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_port;
        break;
      }

      // optional .Cmd.BlobPortrait port = 12;
      case 12: {
        if (tag == 98) {
         parse_port:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_port()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_items;
        break;
      }

      // optional .Cmd.BlobShopGotItem items = 13;
      case 13: {
        if (tag == 106) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_hair;
        break;
      }

      // optional .Cmd.BlobHair hair = 14;
      case 14: {
        if (tag == 114) {
         parse_hair:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hair()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_maps;
        break;
      }

      // optional .Cmd.BlobKnownMaps maps = 15;
      case 15: {
        if (tag == 122) {
         parse_maps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_maps()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_gear;
        break;
      }

      // optional .Cmd.BlobGears gear = 16;
      case 16: {
        if (tag == 130) {
         parse_gear:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gear()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_garden;
        break;
      }

      // optional uint32 garden = 17 [default = 0];
      case 17: {
        if (tag == 136) {
         parse_garden:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &garden_)));
          set_has_garden();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_purify;
        break;
      }

      // optional uint32 purify = 18 [default = 0];
      case 18: {
        if (tag == 144) {
         parse_purify:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &purify_)));
          set_has_purify();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_tips;
        break;
      }

      // optional .Cmd.BlobTips tips = 19;
      case 19: {
        if (tag == 154) {
         parse_tips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tips()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_savemap;
        break;
      }

      // optional uint32 savemap = 20 [default = 0];
      case 20: {
        if (tag == 160) {
         parse_savemap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &savemap_)));
          set_has_savemap();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_gms;
        break;
      }

      // optional .Cmd.BlobGMEffects gms = 21;
      case 21: {
        if (tag == 170) {
         parse_gms:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gms()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_freyja;
        break;
      }

      // optional .Cmd.BlobFreyja freyja = 22;
      case 22: {
        if (tag == 178) {
         parse_freyja:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_freyja()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_inters;
        break;
      }

      // optional .Cmd.BlobInter inters = 23;
      case 23: {
        if (tag == 186) {
         parse_inters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_inters()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_laboratory;
        break;
      }

      // optional .Cmd.BlobLaboratory laboratory = 24;
      case 24: {
        if (tag == 194) {
         parse_laboratory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_laboratory()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_scenery;
        break;
      }

      // optional .Cmd.BlobScenery scenery = 25;
      case 25: {
        if (tag == 202) {
         parse_scenery:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scenery()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_carrier;
        break;
      }

      // optional .Cmd.BlobCarrier carrier = 27;
      case 27: {
        if (tag == 218) {
         parse_carrier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_carrier()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_lastmapid;
        break;
      }

      // optional uint32 lastmapid = 28;
      case 28: {
        if (tag == 224) {
         parse_lastmapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastmapid_)));
          set_has_lastmapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_shownpcs;
        break;
      }

      // repeated uint32 shownpcs = 29;
      case 29: {
        if (tag == 232) {
         parse_shownpcs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 232, input, this->mutable_shownpcs())));
        } else if (tag == 234) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_shownpcs())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_shownpcs;
        if (input->ExpectTag(240)) goto parse_mapareas;
        break;
      }

      // repeated uint32 mapareas = 30;
      case 30: {
        if (tag == 240) {
         parse_mapareas:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 240, input, this->mutable_mapareas())));
        } else if (tag == 242) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_mapareas())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_mapareas;
        if (input->ExpectTag(250)) goto parse_hands;
        break;
      }

      // optional .Cmd.BlobHands hands = 31;
      case 31: {
        if (tag == 250) {
         parse_hands:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hands()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(258)) goto parse_usershow;
        break;
      }

      // optional .Cmd.BlobShow usershow = 32;
      case 32: {
        if (tag == 258) {
         parse_usershow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_usershow()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_lastrealmapid;
        break;
      }

      // optional uint32 lastrealmapid = 33;
      case 33: {
        if (tag == 264) {
         parse_lastrealmapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastrealmapid_)));
          set_has_lastrealmapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(274)) goto parse_trace;
        break;
      }

      // optional .Cmd.BlobTrace trace = 34;
      case 34: {
        if (tag == 274) {
         parse_trace:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trace()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(282)) goto parse_option;
        break;
      }

      // optional .Cmd.BlobOption option = 35;
      case 35: {
        if (tag == 282) {
         parse_option:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_option()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(290)) goto parse_firstaction;
        break;
      }

      // optional .Cmd.BlobFirstActionDone firstaction = 36;
      case 36: {
        if (tag == 290) {
         parse_firstaction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_firstaction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(298)) goto parse_title;
        break;
      }

      // optional .Cmd.BlobTitle title = 37;
      case 37: {
        if (tag == 298) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_title()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(306)) goto parse_lines;
        break;
      }

      // optional .Cmd.BlobLine lines = 38;
      case 38: {
        if (tag == 306) {
         parse_lines:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lines()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(314)) goto parse_dojo;
        break;
      }

      // optional .Cmd.BlobDojo dojo = 39;
      case 39: {
        if (tag == 314) {
         parse_dojo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dojo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(320)) goto parse_patchversion;
        break;
      }

      // repeated uint32 patchversion = 40;
      case 40: {
        if (tag == 320) {
         parse_patchversion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 320, input, this->mutable_patchversion())));
        } else if (tag == 322) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_patchversion())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(320)) goto parse_patchversion;
        if (input->ExpectTag(330)) goto parse_food;
        break;
      }

      // optional .Cmd.BlobFood food = 41;
      case 41: {
        if (tag == 330) {
         parse_food:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_food()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobUserData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobUserData)
  return false;
#undef DO_
}

void BlobUserData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobUserData)
  // optional float x = 1 [default = 0];
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2 [default = 0];
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float z = 3 [default = 0];
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  // optional .Cmd.BlobCDTime cdtime = 4;
  if (has_cdtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->cdtime(), output);
  }

  // optional .Cmd.BlobShortcut shortcuts = 5;
  if (has_shortcuts()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->shortcuts(), output);
  }

  // optional .Cmd.BlobFollower follower = 6;
  if (has_follower()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->follower(), output);
  }

  // optional .Cmd.BlobStage stage = 7;
  if (has_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->stage(), output);
  }

  // optional .Cmd.BlobQuestNpc questnpc = 8;
  if (has_questnpc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->questnpc(), output);
  }

  // optional .Cmd.BlobBuffer buffer = 9;
  if (has_buffer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->buffer(), output);
  }

  // optional .Cmd.BlobMenu menu = 10;
  if (has_menu()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->menu(), output);
  }

  // optional uint32 clothcolor = 11 [default = 0];
  if (has_clothcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->clothcolor(), output);
  }

  // optional .Cmd.BlobPortrait port = 12;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->port(), output);
  }

  // optional .Cmd.BlobShopGotItem items = 13;
  if (has_items()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->items(), output);
  }

  // optional .Cmd.BlobHair hair = 14;
  if (has_hair()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->hair(), output);
  }

  // optional .Cmd.BlobKnownMaps maps = 15;
  if (has_maps()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->maps(), output);
  }

  // optional .Cmd.BlobGears gear = 16;
  if (has_gear()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->gear(), output);
  }

  // optional uint32 garden = 17 [default = 0];
  if (has_garden()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->garden(), output);
  }

  // optional uint32 purify = 18 [default = 0];
  if (has_purify()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->purify(), output);
  }

  // optional .Cmd.BlobTips tips = 19;
  if (has_tips()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->tips(), output);
  }

  // optional uint32 savemap = 20 [default = 0];
  if (has_savemap()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->savemap(), output);
  }

  // optional .Cmd.BlobGMEffects gms = 21;
  if (has_gms()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->gms(), output);
  }

  // optional .Cmd.BlobFreyja freyja = 22;
  if (has_freyja()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->freyja(), output);
  }

  // optional .Cmd.BlobInter inters = 23;
  if (has_inters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->inters(), output);
  }

  // optional .Cmd.BlobLaboratory laboratory = 24;
  if (has_laboratory()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->laboratory(), output);
  }

  // optional .Cmd.BlobScenery scenery = 25;
  if (has_scenery()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->scenery(), output);
  }

  // optional .Cmd.BlobCarrier carrier = 27;
  if (has_carrier()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->carrier(), output);
  }

  // optional uint32 lastmapid = 28;
  if (has_lastmapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->lastmapid(), output);
  }

  // repeated uint32 shownpcs = 29;
  for (int i = 0; i < this->shownpcs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      29, this->shownpcs(i), output);
  }

  // repeated uint32 mapareas = 30;
  for (int i = 0; i < this->mapareas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      30, this->mapareas(i), output);
  }

  // optional .Cmd.BlobHands hands = 31;
  if (has_hands()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->hands(), output);
  }

  // optional .Cmd.BlobShow usershow = 32;
  if (has_usershow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->usershow(), output);
  }

  // optional uint32 lastrealmapid = 33;
  if (has_lastrealmapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->lastrealmapid(), output);
  }

  // optional .Cmd.BlobTrace trace = 34;
  if (has_trace()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, this->trace(), output);
  }

  // optional .Cmd.BlobOption option = 35;
  if (has_option()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      35, this->option(), output);
  }

  // optional .Cmd.BlobFirstActionDone firstaction = 36;
  if (has_firstaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      36, this->firstaction(), output);
  }

  // optional .Cmd.BlobTitle title = 37;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      37, this->title(), output);
  }

  // optional .Cmd.BlobLine lines = 38;
  if (has_lines()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      38, this->lines(), output);
  }

  // optional .Cmd.BlobDojo dojo = 39;
  if (has_dojo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      39, this->dojo(), output);
  }

  // repeated uint32 patchversion = 40;
  for (int i = 0; i < this->patchversion_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      40, this->patchversion(i), output);
  }

  // optional .Cmd.BlobFood food = 41;
  if (has_food()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      41, this->food(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobUserData)
}

::google::protobuf::uint8* BlobUserData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobUserData)
  // optional float x = 1 [default = 0];
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2 [default = 0];
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional float z = 3 [default = 0];
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  // optional .Cmd.BlobCDTime cdtime = 4;
  if (has_cdtime()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->cdtime(), target);
  }

  // optional .Cmd.BlobShortcut shortcuts = 5;
  if (has_shortcuts()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->shortcuts(), target);
  }

  // optional .Cmd.BlobFollower follower = 6;
  if (has_follower()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->follower(), target);
  }

  // optional .Cmd.BlobStage stage = 7;
  if (has_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->stage(), target);
  }

  // optional .Cmd.BlobQuestNpc questnpc = 8;
  if (has_questnpc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->questnpc(), target);
  }

  // optional .Cmd.BlobBuffer buffer = 9;
  if (has_buffer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->buffer(), target);
  }

  // optional .Cmd.BlobMenu menu = 10;
  if (has_menu()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->menu(), target);
  }

  // optional uint32 clothcolor = 11 [default = 0];
  if (has_clothcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->clothcolor(), target);
  }

  // optional .Cmd.BlobPortrait port = 12;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->port(), target);
  }

  // optional .Cmd.BlobShopGotItem items = 13;
  if (has_items()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->items(), target);
  }

  // optional .Cmd.BlobHair hair = 14;
  if (has_hair()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->hair(), target);
  }

  // optional .Cmd.BlobKnownMaps maps = 15;
  if (has_maps()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->maps(), target);
  }

  // optional .Cmd.BlobGears gear = 16;
  if (has_gear()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->gear(), target);
  }

  // optional uint32 garden = 17 [default = 0];
  if (has_garden()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->garden(), target);
  }

  // optional uint32 purify = 18 [default = 0];
  if (has_purify()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->purify(), target);
  }

  // optional .Cmd.BlobTips tips = 19;
  if (has_tips()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->tips(), target);
  }

  // optional uint32 savemap = 20 [default = 0];
  if (has_savemap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->savemap(), target);
  }

  // optional .Cmd.BlobGMEffects gms = 21;
  if (has_gms()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->gms(), target);
  }

  // optional .Cmd.BlobFreyja freyja = 22;
  if (has_freyja()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->freyja(), target);
  }

  // optional .Cmd.BlobInter inters = 23;
  if (has_inters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->inters(), target);
  }

  // optional .Cmd.BlobLaboratory laboratory = 24;
  if (has_laboratory()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->laboratory(), target);
  }

  // optional .Cmd.BlobScenery scenery = 25;
  if (has_scenery()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->scenery(), target);
  }

  // optional .Cmd.BlobCarrier carrier = 27;
  if (has_carrier()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        27, this->carrier(), target);
  }

  // optional uint32 lastmapid = 28;
  if (has_lastmapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->lastmapid(), target);
  }

  // repeated uint32 shownpcs = 29;
  for (int i = 0; i < this->shownpcs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(29, this->shownpcs(i), target);
  }

  // repeated uint32 mapareas = 30;
  for (int i = 0; i < this->mapareas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(30, this->mapareas(i), target);
  }

  // optional .Cmd.BlobHands hands = 31;
  if (has_hands()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        31, this->hands(), target);
  }

  // optional .Cmd.BlobShow usershow = 32;
  if (has_usershow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        32, this->usershow(), target);
  }

  // optional uint32 lastrealmapid = 33;
  if (has_lastrealmapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(33, this->lastrealmapid(), target);
  }

  // optional .Cmd.BlobTrace trace = 34;
  if (has_trace()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        34, this->trace(), target);
  }

  // optional .Cmd.BlobOption option = 35;
  if (has_option()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        35, this->option(), target);
  }

  // optional .Cmd.BlobFirstActionDone firstaction = 36;
  if (has_firstaction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        36, this->firstaction(), target);
  }

  // optional .Cmd.BlobTitle title = 37;
  if (has_title()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        37, this->title(), target);
  }

  // optional .Cmd.BlobLine lines = 38;
  if (has_lines()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        38, this->lines(), target);
  }

  // optional .Cmd.BlobDojo dojo = 39;
  if (has_dojo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        39, this->dojo(), target);
  }

  // repeated uint32 patchversion = 40;
  for (int i = 0; i < this->patchversion_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(40, this->patchversion(i), target);
  }

  // optional .Cmd.BlobFood food = 41;
  if (has_food()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        41, this->food(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobUserData)
  return target;
}

int BlobUserData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float x = 1 [default = 0];
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 2 [default = 0];
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional float z = 3 [default = 0];
    if (has_z()) {
      total_size += 1 + 4;
    }

    // optional .Cmd.BlobCDTime cdtime = 4;
    if (has_cdtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cdtime());
    }

    // optional .Cmd.BlobShortcut shortcuts = 5;
    if (has_shortcuts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shortcuts());
    }

    // optional .Cmd.BlobFollower follower = 6;
    if (has_follower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->follower());
    }

    // optional .Cmd.BlobStage stage = 7;
    if (has_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stage());
    }

    // optional .Cmd.BlobQuestNpc questnpc = 8;
    if (has_questnpc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->questnpc());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .Cmd.BlobBuffer buffer = 9;
    if (has_buffer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffer());
    }

    // optional .Cmd.BlobMenu menu = 10;
    if (has_menu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->menu());
    }

    // optional uint32 clothcolor = 11 [default = 0];
    if (has_clothcolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clothcolor());
    }

    // optional .Cmd.BlobPortrait port = 12;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->port());
    }

    // optional .Cmd.BlobShopGotItem items = 13;
    if (has_items()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->items());
    }

    // optional .Cmd.BlobHair hair = 14;
    if (has_hair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hair());
    }

    // optional .Cmd.BlobKnownMaps maps = 15;
    if (has_maps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->maps());
    }

    // optional .Cmd.BlobGears gear = 16;
    if (has_gear()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gear());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 garden = 17 [default = 0];
    if (has_garden()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->garden());
    }

    // optional uint32 purify = 18 [default = 0];
    if (has_purify()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->purify());
    }

    // optional .Cmd.BlobTips tips = 19;
    if (has_tips()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tips());
    }

    // optional uint32 savemap = 20 [default = 0];
    if (has_savemap()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->savemap());
    }

    // optional .Cmd.BlobGMEffects gms = 21;
    if (has_gms()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gms());
    }

    // optional .Cmd.BlobFreyja freyja = 22;
    if (has_freyja()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->freyja());
    }

    // optional .Cmd.BlobInter inters = 23;
    if (has_inters()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->inters());
    }

    // optional .Cmd.BlobLaboratory laboratory = 24;
    if (has_laboratory()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->laboratory());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .Cmd.BlobScenery scenery = 25;
    if (has_scenery()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scenery());
    }

    // optional .Cmd.BlobCarrier carrier = 27;
    if (has_carrier()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->carrier());
    }

    // optional uint32 lastmapid = 28;
    if (has_lastmapid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastmapid());
    }

    // optional .Cmd.BlobHands hands = 31;
    if (has_hands()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hands());
    }

    // optional .Cmd.BlobShow usershow = 32;
    if (has_usershow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->usershow());
    }

    // optional uint32 lastrealmapid = 33;
    if (has_lastrealmapid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastrealmapid());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional .Cmd.BlobTrace trace = 34;
    if (has_trace()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trace());
    }

    // optional .Cmd.BlobOption option = 35;
    if (has_option()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->option());
    }

    // optional .Cmd.BlobFirstActionDone firstaction = 36;
    if (has_firstaction()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->firstaction());
    }

    // optional .Cmd.BlobTitle title = 37;
    if (has_title()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->title());
    }

    // optional .Cmd.BlobLine lines = 38;
    if (has_lines()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lines());
    }

    // optional .Cmd.BlobDojo dojo = 39;
    if (has_dojo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dojo());
    }

    // optional .Cmd.BlobFood food = 41;
    if (has_food()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->food());
    }

  }
  // repeated uint32 shownpcs = 29;
  {
    int data_size = 0;
    for (int i = 0; i < this->shownpcs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->shownpcs(i));
    }
    total_size += 2 * this->shownpcs_size() + data_size;
  }

  // repeated uint32 mapareas = 30;
  {
    int data_size = 0;
    for (int i = 0; i < this->mapareas_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->mapareas(i));
    }
    total_size += 2 * this->mapareas_size() + data_size;
  }

  // repeated uint32 patchversion = 40;
  {
    int data_size = 0;
    for (int i = 0; i < this->patchversion_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->patchversion(i));
    }
    total_size += 2 * this->patchversion_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobUserData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobUserData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobUserData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobUserData::MergeFrom(const BlobUserData& from) {
  GOOGLE_CHECK_NE(&from, this);
  shownpcs_.MergeFrom(from.shownpcs_);
  mapareas_.MergeFrom(from.mapareas_);
  patchversion_.MergeFrom(from.patchversion_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_cdtime()) {
      mutable_cdtime()->::Cmd::BlobCDTime::MergeFrom(from.cdtime());
    }
    if (from.has_shortcuts()) {
      mutable_shortcuts()->::Cmd::BlobShortcut::MergeFrom(from.shortcuts());
    }
    if (from.has_follower()) {
      mutable_follower()->::Cmd::BlobFollower::MergeFrom(from.follower());
    }
    if (from.has_stage()) {
      mutable_stage()->::Cmd::BlobStage::MergeFrom(from.stage());
    }
    if (from.has_questnpc()) {
      mutable_questnpc()->::Cmd::BlobQuestNpc::MergeFrom(from.questnpc());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_buffer()) {
      mutable_buffer()->::Cmd::BlobBuffer::MergeFrom(from.buffer());
    }
    if (from.has_menu()) {
      mutable_menu()->::Cmd::BlobMenu::MergeFrom(from.menu());
    }
    if (from.has_clothcolor()) {
      set_clothcolor(from.clothcolor());
    }
    if (from.has_port()) {
      mutable_port()->::Cmd::BlobPortrait::MergeFrom(from.port());
    }
    if (from.has_items()) {
      mutable_items()->::Cmd::BlobShopGotItem::MergeFrom(from.items());
    }
    if (from.has_hair()) {
      mutable_hair()->::Cmd::BlobHair::MergeFrom(from.hair());
    }
    if (from.has_maps()) {
      mutable_maps()->::Cmd::BlobKnownMaps::MergeFrom(from.maps());
    }
    if (from.has_gear()) {
      mutable_gear()->::Cmd::BlobGears::MergeFrom(from.gear());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_garden()) {
      set_garden(from.garden());
    }
    if (from.has_purify()) {
      set_purify(from.purify());
    }
    if (from.has_tips()) {
      mutable_tips()->::Cmd::BlobTips::MergeFrom(from.tips());
    }
    if (from.has_savemap()) {
      set_savemap(from.savemap());
    }
    if (from.has_gms()) {
      mutable_gms()->::Cmd::BlobGMEffects::MergeFrom(from.gms());
    }
    if (from.has_freyja()) {
      mutable_freyja()->::Cmd::BlobFreyja::MergeFrom(from.freyja());
    }
    if (from.has_inters()) {
      mutable_inters()->::Cmd::BlobInter::MergeFrom(from.inters());
    }
    if (from.has_laboratory()) {
      mutable_laboratory()->::Cmd::BlobLaboratory::MergeFrom(from.laboratory());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_scenery()) {
      mutable_scenery()->::Cmd::BlobScenery::MergeFrom(from.scenery());
    }
    if (from.has_carrier()) {
      mutable_carrier()->::Cmd::BlobCarrier::MergeFrom(from.carrier());
    }
    if (from.has_lastmapid()) {
      set_lastmapid(from.lastmapid());
    }
    if (from.has_hands()) {
      mutable_hands()->::Cmd::BlobHands::MergeFrom(from.hands());
    }
    if (from.has_usershow()) {
      mutable_usershow()->::Cmd::BlobShow::MergeFrom(from.usershow());
    }
    if (from.has_lastrealmapid()) {
      set_lastrealmapid(from.lastrealmapid());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_trace()) {
      mutable_trace()->::Cmd::BlobTrace::MergeFrom(from.trace());
    }
    if (from.has_option()) {
      mutable_option()->::Cmd::BlobOption::MergeFrom(from.option());
    }
    if (from.has_firstaction()) {
      mutable_firstaction()->::Cmd::BlobFirstActionDone::MergeFrom(from.firstaction());
    }
    if (from.has_title()) {
      mutable_title()->::Cmd::BlobTitle::MergeFrom(from.title());
    }
    if (from.has_lines()) {
      mutable_lines()->::Cmd::BlobLine::MergeFrom(from.lines());
    }
    if (from.has_dojo()) {
      mutable_dojo()->::Cmd::BlobDojo::MergeFrom(from.dojo());
    }
    if (from.has_food()) {
      mutable_food()->::Cmd::BlobFood::MergeFrom(from.food());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobUserData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobUserData::CopyFrom(const BlobUserData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobUserData::IsInitialized() const {

  if (has_option()) {
    if (!this->option().IsInitialized()) return false;
  }
  return true;
}

void BlobUserData::Swap(BlobUserData* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(cdtime_, other->cdtime_);
    std::swap(shortcuts_, other->shortcuts_);
    std::swap(follower_, other->follower_);
    std::swap(stage_, other->stage_);
    std::swap(questnpc_, other->questnpc_);
    std::swap(buffer_, other->buffer_);
    std::swap(menu_, other->menu_);
    std::swap(clothcolor_, other->clothcolor_);
    std::swap(port_, other->port_);
    std::swap(items_, other->items_);
    std::swap(hair_, other->hair_);
    std::swap(maps_, other->maps_);
    std::swap(gear_, other->gear_);
    std::swap(garden_, other->garden_);
    std::swap(purify_, other->purify_);
    std::swap(tips_, other->tips_);
    std::swap(savemap_, other->savemap_);
    std::swap(gms_, other->gms_);
    std::swap(freyja_, other->freyja_);
    std::swap(inters_, other->inters_);
    std::swap(laboratory_, other->laboratory_);
    std::swap(scenery_, other->scenery_);
    std::swap(carrier_, other->carrier_);
    std::swap(lastmapid_, other->lastmapid_);
    shownpcs_.Swap(&other->shownpcs_);
    mapareas_.Swap(&other->mapareas_);
    std::swap(hands_, other->hands_);
    std::swap(usershow_, other->usershow_);
    std::swap(lastrealmapid_, other->lastrealmapid_);
    std::swap(trace_, other->trace_);
    std::swap(option_, other->option_);
    std::swap(firstaction_, other->firstaction_);
    std::swap(title_, other->title_);
    std::swap(lines_, other->lines_);
    std::swap(dojo_, other->dojo_);
    patchversion_.Swap(&other->patchversion_);
    std::swap(food_, other->food_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobUserData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobUserData_descriptor_;
  metadata.reflection = BlobUserData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DelPatchCharRecordCmd::kCmdFieldNumber;
const int DelPatchCharRecordCmd::kParamFieldNumber;
const int DelPatchCharRecordCmd::kCharidFieldNumber;
const int DelPatchCharRecordCmd::kTypeFieldNumber;
#endif  // !_MSC_VER

DelPatchCharRecordCmd::DelPatchCharRecordCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.DelPatchCharRecordCmd)
}

void DelPatchCharRecordCmd::InitAsDefaultInstance() {
}

DelPatchCharRecordCmd::DelPatchCharRecordCmd(const DelPatchCharRecordCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.DelPatchCharRecordCmd)
}

void DelPatchCharRecordCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 200;
  param_ = 11;
  charid_ = GOOGLE_ULONGLONG(0);
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DelPatchCharRecordCmd::~DelPatchCharRecordCmd() {
  // @@protoc_insertion_point(destructor:Cmd.DelPatchCharRecordCmd)
  SharedDtor();
}

void DelPatchCharRecordCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DelPatchCharRecordCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DelPatchCharRecordCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DelPatchCharRecordCmd_descriptor_;
}

const DelPatchCharRecordCmd& DelPatchCharRecordCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

DelPatchCharRecordCmd* DelPatchCharRecordCmd::default_instance_ = NULL;

DelPatchCharRecordCmd* DelPatchCharRecordCmd::New() const {
  return new DelPatchCharRecordCmd;
}

void DelPatchCharRecordCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 200;
    param_ = 11;
    charid_ = GOOGLE_ULONGLONG(0);
    type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DelPatchCharRecordCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.DelPatchCharRecordCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_DEL_PATCH_CHAR];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::RecordParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::RecordParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional .Cmd.EPatchType type = 4 [default = EPATCHTYPE_QUEST];
      case 4: {
        if (tag == 32) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EPatchType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EPatchType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.DelPatchCharRecordCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.DelPatchCharRecordCmd)
  return false;
#undef DO_
}

void DelPatchCharRecordCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.DelPatchCharRecordCmd)
  // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_DEL_PATCH_CHAR];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional .Cmd.EPatchType type = 4 [default = EPATCHTYPE_QUEST];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.DelPatchCharRecordCmd)
}

::google::protobuf::uint8* DelPatchCharRecordCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.DelPatchCharRecordCmd)
  // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_DEL_PATCH_CHAR];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional .Cmd.EPatchType type = 4 [default = EPATCHTYPE_QUEST];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.DelPatchCharRecordCmd)
  return target;
}

int DelPatchCharRecordCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_DEL_PATCH_CHAR];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional .Cmd.EPatchType type = 4 [default = EPATCHTYPE_QUEST];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelPatchCharRecordCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DelPatchCharRecordCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DelPatchCharRecordCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DelPatchCharRecordCmd::MergeFrom(const DelPatchCharRecordCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DelPatchCharRecordCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelPatchCharRecordCmd::CopyFrom(const DelPatchCharRecordCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelPatchCharRecordCmd::IsInitialized() const {

  return true;
}

void DelPatchCharRecordCmd::Swap(DelPatchCharRecordCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DelPatchCharRecordCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DelPatchCharRecordCmd_descriptor_;
  metadata.reflection = DelPatchCharRecordCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobChatItem::kItemsFieldNumber;
#endif  // !_MSC_VER

BlobChatItem::BlobChatItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobChatItem)
}

void BlobChatItem::InitAsDefaultInstance() {
}

BlobChatItem::BlobChatItem(const BlobChatItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobChatItem)
}

void BlobChatItem::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobChatItem::~BlobChatItem() {
  // @@protoc_insertion_point(destructor:Cmd.BlobChatItem)
  SharedDtor();
}

void BlobChatItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobChatItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobChatItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobChatItem_descriptor_;
}

const BlobChatItem& BlobChatItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobChatItem* BlobChatItem::default_instance_ = NULL;

BlobChatItem* BlobChatItem::New() const {
  return new BlobChatItem;
}

void BlobChatItem::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobChatItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobChatItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Cmd.ChatItem items = 1;
      case 1: {
        if (tag == 10) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobChatItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobChatItem)
  return false;
#undef DO_
}

void BlobChatItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobChatItem)
  // repeated .Cmd.ChatItem items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobChatItem)
}

::google::protobuf::uint8* BlobChatItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobChatItem)
  // repeated .Cmd.ChatItem items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobChatItem)
  return target;
}

int BlobChatItem::ByteSize() const {
  int total_size = 0;

  // repeated .Cmd.ChatItem items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobChatItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobChatItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobChatItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobChatItem::MergeFrom(const BlobChatItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobChatItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobChatItem::CopyFrom(const BlobChatItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobChatItem::IsInitialized() const {

  return true;
}

void BlobChatItem::Swap(BlobChatItem* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobChatItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobChatItem_descriptor_;
  metadata.reflection = BlobChatItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChatSaveRecordCmd::kCmdFieldNumber;
const int ChatSaveRecordCmd::kParamFieldNumber;
const int ChatSaveRecordCmd::kCharidFieldNumber;
const int ChatSaveRecordCmd::kPortraitFieldNumber;
const int ChatSaveRecordCmd::kTimeFieldNumber;
const int ChatSaveRecordCmd::kDataFieldNumber;
#endif  // !_MSC_VER

ChatSaveRecordCmd::ChatSaveRecordCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ChatSaveRecordCmd)
}

void ChatSaveRecordCmd::InitAsDefaultInstance() {
}

ChatSaveRecordCmd::ChatSaveRecordCmd(const ChatSaveRecordCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ChatSaveRecordCmd)
}

void ChatSaveRecordCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 200;
  param_ = 12;
  charid_ = GOOGLE_ULONGLONG(0);
  portrait_ = 0u;
  time_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatSaveRecordCmd::~ChatSaveRecordCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ChatSaveRecordCmd)
  SharedDtor();
}

void ChatSaveRecordCmd::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void ChatSaveRecordCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatSaveRecordCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatSaveRecordCmd_descriptor_;
}

const ChatSaveRecordCmd& ChatSaveRecordCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

ChatSaveRecordCmd* ChatSaveRecordCmd::default_instance_ = NULL;

ChatSaveRecordCmd* ChatSaveRecordCmd::New() const {
  return new ChatSaveRecordCmd;
}

void ChatSaveRecordCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ChatSaveRecordCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(charid_, time_);
    cmd_ = 200;
    param_ = 12;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatSaveRecordCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ChatSaveRecordCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_CHAT_SAVE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::RecordParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::RecordParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_portrait;
        break;
      }

      // optional uint32 portrait = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_portrait:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &portrait_)));
          set_has_portrait();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_time;
        break;
      }

      // optional uint32 time = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_data;
        break;
      }

      // optional bytes data = 6;
      case 6: {
        if (tag == 50) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ChatSaveRecordCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ChatSaveRecordCmd)
  return false;
#undef DO_
}

void ChatSaveRecordCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ChatSaveRecordCmd)
  // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_CHAT_SAVE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional uint32 portrait = 4 [default = 0];
  if (has_portrait()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->portrait(), output);
  }

  // optional uint32 time = 5 [default = 0];
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->time(), output);
  }

  // optional bytes data = 6;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ChatSaveRecordCmd)
}

::google::protobuf::uint8* ChatSaveRecordCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ChatSaveRecordCmd)
  // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_CHAT_SAVE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional uint32 portrait = 4 [default = 0];
  if (has_portrait()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->portrait(), target);
  }

  // optional uint32 time = 5 [default = 0];
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->time(), target);
  }

  // optional bytes data = 6;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ChatSaveRecordCmd)
  return target;
}

int ChatSaveRecordCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_CHAT_SAVE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 portrait = 4 [default = 0];
    if (has_portrait()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->portrait());
    }

    // optional uint32 time = 5 [default = 0];
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional bytes data = 6;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatSaveRecordCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatSaveRecordCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatSaveRecordCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatSaveRecordCmd::MergeFrom(const ChatSaveRecordCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_portrait()) {
      set_portrait(from.portrait());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatSaveRecordCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatSaveRecordCmd::CopyFrom(const ChatSaveRecordCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatSaveRecordCmd::IsInitialized() const {

  return true;
}

void ChatSaveRecordCmd::Swap(ChatSaveRecordCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(portrait_, other->portrait_);
    std::swap(time_, other->time_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatSaveRecordCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatSaveRecordCmd_descriptor_;
  metadata.reflection = ChatSaveRecordCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryChatRecordCmd::kCmdFieldNumber;
const int QueryChatRecordCmd::kParamFieldNumber;
const int QueryChatRecordCmd::kCharidFieldNumber;
const int QueryChatRecordCmd::kTargetidFieldNumber;
const int QueryChatRecordCmd::kStartFieldNumber;
const int QueryChatRecordCmd::kEndFieldNumber;
const int QueryChatRecordCmd::kSelfportFieldNumber;
const int QueryChatRecordCmd::kTargetportFieldNumber;
const int QueryChatRecordCmd::kScenenameFieldNumber;
const int QueryChatRecordCmd::kDatasFieldNumber;
#endif  // !_MSC_VER

QueryChatRecordCmd::QueryChatRecordCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QueryChatRecordCmd)
}

void QueryChatRecordCmd::InitAsDefaultInstance() {
}

QueryChatRecordCmd::QueryChatRecordCmd(const QueryChatRecordCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QueryChatRecordCmd)
}

void QueryChatRecordCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 200;
  param_ = 13;
  charid_ = GOOGLE_ULONGLONG(0);
  targetid_ = GOOGLE_ULONGLONG(0);
  start_ = 0u;
  end_ = 0u;
  selfport_ = 0u;
  targetport_ = 0u;
  scenename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryChatRecordCmd::~QueryChatRecordCmd() {
  // @@protoc_insertion_point(destructor:Cmd.QueryChatRecordCmd)
  SharedDtor();
}

void QueryChatRecordCmd::SharedDtor() {
  if (scenename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete scenename_;
  }
  if (this != default_instance_) {
  }
}

void QueryChatRecordCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryChatRecordCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryChatRecordCmd_descriptor_;
}

const QueryChatRecordCmd& QueryChatRecordCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

QueryChatRecordCmd* QueryChatRecordCmd::default_instance_ = NULL;

QueryChatRecordCmd* QueryChatRecordCmd::New() const {
  return new QueryChatRecordCmd;
}

void QueryChatRecordCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<QueryChatRecordCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(charid_, targetport_);
    cmd_ = 200;
    param_ = 13;
  }
  if (has_scenename()) {
    if (scenename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      scenename_->clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  datas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryChatRecordCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QueryChatRecordCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_CHAT_QUERY];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::RecordParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::RecordParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_targetid;
        break;
      }

      // optional uint64 targetid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_targetid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_start;
        break;
      }

      // optional uint32 start = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_)));
          set_has_start();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_end;
        break;
      }

      // optional uint32 end = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_)));
          set_has_end();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_selfport;
        break;
      }

      // optional uint32 selfport = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_selfport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &selfport_)));
          set_has_selfport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_targetport;
        break;
      }

      // optional uint32 targetport = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_targetport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targetport_)));
          set_has_targetport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_scenename;
        break;
      }

      // optional string scenename = 9;
      case 9: {
        if (tag == 74) {
         parse_scenename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scenename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->scenename().data(), this->scenename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "scenename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_datas;
        break;
      }

      // repeated bytes datas = 10;
      case 10: {
        if (tag == 82) {
         parse_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_datas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_datas;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QueryChatRecordCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QueryChatRecordCmd)
  return false;
#undef DO_
}

void QueryChatRecordCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QueryChatRecordCmd)
  // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_CHAT_QUERY];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional uint64 targetid = 4 [default = 0];
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->targetid(), output);
  }

  // optional uint32 start = 5 [default = 0];
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->start(), output);
  }

  // optional uint32 end = 6 [default = 0];
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->end(), output);
  }

  // optional uint32 selfport = 7 [default = 0];
  if (has_selfport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->selfport(), output);
  }

  // optional uint32 targetport = 8 [default = 0];
  if (has_targetport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->targetport(), output);
  }

  // optional string scenename = 9;
  if (has_scenename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scenename().data(), this->scenename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "scenename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->scenename(), output);
  }

  // repeated bytes datas = 10;
  for (int i = 0; i < this->datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->datas(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QueryChatRecordCmd)
}

::google::protobuf::uint8* QueryChatRecordCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QueryChatRecordCmd)
  // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_CHAT_QUERY];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional uint64 targetid = 4 [default = 0];
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->targetid(), target);
  }

  // optional uint32 start = 5 [default = 0];
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->start(), target);
  }

  // optional uint32 end = 6 [default = 0];
  if (has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->end(), target);
  }

  // optional uint32 selfport = 7 [default = 0];
  if (has_selfport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->selfport(), target);
  }

  // optional uint32 targetport = 8 [default = 0];
  if (has_targetport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->targetport(), target);
  }

  // optional string scenename = 9;
  if (has_scenename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scenename().data(), this->scenename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "scenename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->scenename(), target);
  }

  // repeated bytes datas = 10;
  for (int i = 0; i < this->datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(10, this->datas(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QueryChatRecordCmd)
  return target;
}

int QueryChatRecordCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_CHAT_QUERY];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint64 targetid = 4 [default = 0];
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->targetid());
    }

    // optional uint32 start = 5 [default = 0];
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start());
    }

    // optional uint32 end = 6 [default = 0];
    if (has_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end());
    }

    // optional uint32 selfport = 7 [default = 0];
    if (has_selfport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->selfport());
    }

    // optional uint32 targetport = 8 [default = 0];
    if (has_targetport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targetport());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string scenename = 9;
    if (has_scenename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scenename());
    }

  }
  // repeated bytes datas = 10;
  total_size += 1 * this->datas_size();
  for (int i = 0; i < this->datas_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->datas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryChatRecordCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryChatRecordCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryChatRecordCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryChatRecordCmd::MergeFrom(const QueryChatRecordCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  datas_.MergeFrom(from.datas_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
    if (from.has_start()) {
      set_start(from.start());
    }
    if (from.has_end()) {
      set_end(from.end());
    }
    if (from.has_selfport()) {
      set_selfport(from.selfport());
    }
    if (from.has_targetport()) {
      set_targetport(from.targetport());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_scenename()) {
      set_scenename(from.scenename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryChatRecordCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryChatRecordCmd::CopyFrom(const QueryChatRecordCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryChatRecordCmd::IsInitialized() const {

  return true;
}

void QueryChatRecordCmd::Swap(QueryChatRecordCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(targetid_, other->targetid_);
    std::swap(start_, other->start_);
    std::swap(end_, other->end_);
    std::swap(selfport_, other->selfport_);
    std::swap(targetport_, other->targetport_);
    std::swap(scenename_, other->scenename_);
    datas_.Swap(&other->datas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryChatRecordCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryChatRecordCmd_descriptor_;
  metadata.reflection = QueryChatRecordCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserRenameQueryRecordCmd::kCmdFieldNumber;
const int UserRenameQueryRecordCmd::kParamFieldNumber;
const int UserRenameQueryRecordCmd::kCharidFieldNumber;
const int UserRenameQueryRecordCmd::kAccidFieldNumber;
const int UserRenameQueryRecordCmd::kOldnameFieldNumber;
const int UserRenameQueryRecordCmd::kNewnameFieldNumber;
const int UserRenameQueryRecordCmd::kScenenameFieldNumber;
const int UserRenameQueryRecordCmd::kCodeFieldNumber;
#endif  // !_MSC_VER

UserRenameQueryRecordCmd::UserRenameQueryRecordCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UserRenameQueryRecordCmd)
}

void UserRenameQueryRecordCmd::InitAsDefaultInstance() {
}

UserRenameQueryRecordCmd::UserRenameQueryRecordCmd(const UserRenameQueryRecordCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UserRenameQueryRecordCmd)
}

void UserRenameQueryRecordCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 200;
  param_ = 18;
  charid_ = GOOGLE_ULONGLONG(0);
  accid_ = GOOGLE_ULONGLONG(0);
  oldname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  newname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scenename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserRenameQueryRecordCmd::~UserRenameQueryRecordCmd() {
  // @@protoc_insertion_point(destructor:Cmd.UserRenameQueryRecordCmd)
  SharedDtor();
}

void UserRenameQueryRecordCmd::SharedDtor() {
  if (oldname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete oldname_;
  }
  if (newname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete newname_;
  }
  if (scenename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete scenename_;
  }
  if (this != default_instance_) {
  }
}

void UserRenameQueryRecordCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserRenameQueryRecordCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserRenameQueryRecordCmd_descriptor_;
}

const UserRenameQueryRecordCmd& UserRenameQueryRecordCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

UserRenameQueryRecordCmd* UserRenameQueryRecordCmd::default_instance_ = NULL;

UserRenameQueryRecordCmd* UserRenameQueryRecordCmd::New() const {
  return new UserRenameQueryRecordCmd;
}

void UserRenameQueryRecordCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserRenameQueryRecordCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(charid_, accid_);
    cmd_ = 200;
    param_ = 18;
    if (has_oldname()) {
      if (oldname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        oldname_->clear();
      }
    }
    if (has_newname()) {
      if (newname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        newname_->clear();
      }
    }
    if (has_scenename()) {
      if (scenename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        scenename_->clear();
      }
    }
    code_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserRenameQueryRecordCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UserRenameQueryRecordCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_USER_RENAME_QUERY];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::RecordParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::RecordParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_accid;
        break;
      }

      // optional uint64 accid = 4;
      case 4: {
        if (tag == 32) {
         parse_accid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &accid_)));
          set_has_accid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_oldname;
        break;
      }

      // optional string oldname = 5;
      case 5: {
        if (tag == 42) {
         parse_oldname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_oldname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->oldname().data(), this->oldname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "oldname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_newname;
        break;
      }

      // optional string newname = 6;
      case 6: {
        if (tag == 50) {
         parse_newname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_newname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->newname().data(), this->newname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "newname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_scenename;
        break;
      }

      // optional string scenename = 7;
      case 7: {
        if (tag == 58) {
         parse_scenename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scenename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->scenename().data(), this->scenename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "scenename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_code;
        break;
      }

      // optional .Cmd.ERenameErrCode code = 8 [default = ERENAME_SUCCESS];
      case 8: {
        if (tag == 64) {
         parse_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ERenameErrCode_IsValid(value)) {
            set_code(static_cast< ::Cmd::ERenameErrCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UserRenameQueryRecordCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UserRenameQueryRecordCmd)
  return false;
#undef DO_
}

void UserRenameQueryRecordCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UserRenameQueryRecordCmd)
  // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_USER_RENAME_QUERY];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional uint64 accid = 4;
  if (has_accid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->accid(), output);
  }

  // optional string oldname = 5;
  if (has_oldname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->oldname().data(), this->oldname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "oldname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->oldname(), output);
  }

  // optional string newname = 6;
  if (has_newname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->newname().data(), this->newname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "newname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->newname(), output);
  }

  // optional string scenename = 7;
  if (has_scenename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scenename().data(), this->scenename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "scenename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->scenename(), output);
  }

  // optional .Cmd.ERenameErrCode code = 8 [default = ERENAME_SUCCESS];
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UserRenameQueryRecordCmd)
}

::google::protobuf::uint8* UserRenameQueryRecordCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UserRenameQueryRecordCmd)
  // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_USER_RENAME_QUERY];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional uint64 accid = 4;
  if (has_accid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->accid(), target);
  }

  // optional string oldname = 5;
  if (has_oldname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->oldname().data(), this->oldname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "oldname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->oldname(), target);
  }

  // optional string newname = 6;
  if (has_newname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->newname().data(), this->newname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "newname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->newname(), target);
  }

  // optional string scenename = 7;
  if (has_scenename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scenename().data(), this->scenename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "scenename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->scenename(), target);
  }

  // optional .Cmd.ERenameErrCode code = 8 [default = ERENAME_SUCCESS];
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UserRenameQueryRecordCmd)
  return target;
}

int UserRenameQueryRecordCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_USER_RENAME_QUERY];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint64 accid = 4;
    if (has_accid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->accid());
    }

    // optional string oldname = 5;
    if (has_oldname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->oldname());
    }

    // optional string newname = 6;
    if (has_newname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->newname());
    }

    // optional string scenename = 7;
    if (has_scenename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scenename());
    }

    // optional .Cmd.ERenameErrCode code = 8 [default = ERENAME_SUCCESS];
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserRenameQueryRecordCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserRenameQueryRecordCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserRenameQueryRecordCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserRenameQueryRecordCmd::MergeFrom(const UserRenameQueryRecordCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_accid()) {
      set_accid(from.accid());
    }
    if (from.has_oldname()) {
      set_oldname(from.oldname());
    }
    if (from.has_newname()) {
      set_newname(from.newname());
    }
    if (from.has_scenename()) {
      set_scenename(from.scenename());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserRenameQueryRecordCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserRenameQueryRecordCmd::CopyFrom(const UserRenameQueryRecordCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserRenameQueryRecordCmd::IsInitialized() const {

  return true;
}

void UserRenameQueryRecordCmd::Swap(UserRenameQueryRecordCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(accid_, other->accid_);
    std::swap(oldname_, other->oldname_);
    std::swap(newname_, other->newname_);
    std::swap(scenename_, other->scenename_);
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserRenameQueryRecordCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserRenameQueryRecordCmd_descriptor_;
  metadata.reflection = UserRenameQueryRecordCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserRenameResultRecordCmd::kCmdFieldNumber;
const int UserRenameResultRecordCmd::kParamFieldNumber;
const int UserRenameResultRecordCmd::kCharidFieldNumber;
const int UserRenameResultRecordCmd::kAccidFieldNumber;
const int UserRenameResultRecordCmd::kNewnameFieldNumber;
const int UserRenameResultRecordCmd::kOldnameFieldNumber;
const int UserRenameResultRecordCmd::kSuccessFieldNumber;
#endif  // !_MSC_VER

UserRenameResultRecordCmd::UserRenameResultRecordCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UserRenameResultRecordCmd)
}

void UserRenameResultRecordCmd::InitAsDefaultInstance() {
}

UserRenameResultRecordCmd::UserRenameResultRecordCmd(const UserRenameResultRecordCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UserRenameResultRecordCmd)
}

void UserRenameResultRecordCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 200;
  param_ = 19;
  charid_ = GOOGLE_ULONGLONG(0);
  accid_ = GOOGLE_ULONGLONG(0);
  newname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  oldname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  success_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserRenameResultRecordCmd::~UserRenameResultRecordCmd() {
  // @@protoc_insertion_point(destructor:Cmd.UserRenameResultRecordCmd)
  SharedDtor();
}

void UserRenameResultRecordCmd::SharedDtor() {
  if (newname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete newname_;
  }
  if (oldname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete oldname_;
  }
  if (this != default_instance_) {
  }
}

void UserRenameResultRecordCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserRenameResultRecordCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserRenameResultRecordCmd_descriptor_;
}

const UserRenameResultRecordCmd& UserRenameResultRecordCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

UserRenameResultRecordCmd* UserRenameResultRecordCmd::default_instance_ = NULL;

UserRenameResultRecordCmd* UserRenameResultRecordCmd::New() const {
  return new UserRenameResultRecordCmd;
}

void UserRenameResultRecordCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserRenameResultRecordCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(charid_, accid_);
    cmd_ = 200;
    param_ = 19;
    if (has_newname()) {
      if (newname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        newname_->clear();
      }
    }
    if (has_oldname()) {
      if (oldname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        oldname_->clear();
      }
    }
    success_ = false;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserRenameResultRecordCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UserRenameResultRecordCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_USER_RENAME_RESULT];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::RecordParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::RecordParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_accid;
        break;
      }

      // optional uint64 accid = 4;
      case 4: {
        if (tag == 32) {
         parse_accid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &accid_)));
          set_has_accid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_newname;
        break;
      }

      // optional string newname = 5;
      case 5: {
        if (tag == 42) {
         parse_newname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_newname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->newname().data(), this->newname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "newname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_oldname;
        break;
      }

      // optional string oldname = 6;
      case 6: {
        if (tag == 50) {
         parse_oldname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_oldname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->oldname().data(), this->oldname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "oldname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_success;
        break;
      }

      // optional bool success = 7 [default = false];
      case 7: {
        if (tag == 56) {
         parse_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UserRenameResultRecordCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UserRenameResultRecordCmd)
  return false;
#undef DO_
}

void UserRenameResultRecordCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UserRenameResultRecordCmd)
  // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_USER_RENAME_RESULT];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional uint64 accid = 4;
  if (has_accid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->accid(), output);
  }

  // optional string newname = 5;
  if (has_newname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->newname().data(), this->newname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "newname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->newname(), output);
  }

  // optional string oldname = 6;
  if (has_oldname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->oldname().data(), this->oldname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "oldname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->oldname(), output);
  }

  // optional bool success = 7 [default = false];
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->success(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UserRenameResultRecordCmd)
}

::google::protobuf::uint8* UserRenameResultRecordCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UserRenameResultRecordCmd)
  // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_USER_RENAME_RESULT];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional uint64 accid = 4;
  if (has_accid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->accid(), target);
  }

  // optional string newname = 5;
  if (has_newname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->newname().data(), this->newname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "newname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->newname(), target);
  }

  // optional string oldname = 6;
  if (has_oldname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->oldname().data(), this->oldname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "oldname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->oldname(), target);
  }

  // optional bool success = 7 [default = false];
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->success(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UserRenameResultRecordCmd)
  return target;
}

int UserRenameResultRecordCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_USER_RENAME_RESULT];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint64 accid = 4;
    if (has_accid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->accid());
    }

    // optional string newname = 5;
    if (has_newname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->newname());
    }

    // optional string oldname = 6;
    if (has_oldname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->oldname());
    }

    // optional bool success = 7 [default = false];
    if (has_success()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserRenameResultRecordCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserRenameResultRecordCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserRenameResultRecordCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserRenameResultRecordCmd::MergeFrom(const UserRenameResultRecordCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_accid()) {
      set_accid(from.accid());
    }
    if (from.has_newname()) {
      set_newname(from.newname());
    }
    if (from.has_oldname()) {
      set_oldname(from.oldname());
    }
    if (from.has_success()) {
      set_success(from.success());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserRenameResultRecordCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserRenameResultRecordCmd::CopyFrom(const UserRenameResultRecordCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserRenameResultRecordCmd::IsInitialized() const {

  return true;
}

void UserRenameResultRecordCmd::Swap(UserRenameResultRecordCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(accid_, other->accid_);
    std::swap(newname_, other->newname_);
    std::swap(oldname_, other->oldname_);
    std::swap(success_, other->success_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserRenameResultRecordCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserRenameResultRecordCmd_descriptor_;
  metadata.reflection = UserRenameResultRecordCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LotteryResultRecordCmd::kCmdFieldNumber;
const int LotteryResultRecordCmd::kParamFieldNumber;
const int LotteryResultRecordCmd::kCharidFieldNumber;
const int LotteryResultRecordCmd::kItemidFieldNumber;
const int LotteryResultRecordCmd::kNameFieldNumber;
const int LotteryResultRecordCmd::kItemnameFieldNumber;
const int LotteryResultRecordCmd::kTypeFieldNumber;
const int LotteryResultRecordCmd::kRateFieldNumber;
#endif  // !_MSC_VER

LotteryResultRecordCmd::LotteryResultRecordCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.LotteryResultRecordCmd)
}

void LotteryResultRecordCmd::InitAsDefaultInstance() {
}

LotteryResultRecordCmd::LotteryResultRecordCmd(const LotteryResultRecordCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.LotteryResultRecordCmd)
}

void LotteryResultRecordCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 200;
  param_ = 20;
  charid_ = GOOGLE_ULONGLONG(0);
  itemid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0u;
  rate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LotteryResultRecordCmd::~LotteryResultRecordCmd() {
  // @@protoc_insertion_point(destructor:Cmd.LotteryResultRecordCmd)
  SharedDtor();
}

void LotteryResultRecordCmd::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete itemname_;
  }
  if (this != default_instance_) {
  }
}

void LotteryResultRecordCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LotteryResultRecordCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LotteryResultRecordCmd_descriptor_;
}

const LotteryResultRecordCmd& LotteryResultRecordCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

LotteryResultRecordCmd* LotteryResultRecordCmd::default_instance_ = NULL;

LotteryResultRecordCmd* LotteryResultRecordCmd::New() const {
  return new LotteryResultRecordCmd;
}

void LotteryResultRecordCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LotteryResultRecordCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(charid_, itemid_);
    ZR_(type_, rate_);
    cmd_ = 200;
    param_ = 20;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_itemname()) {
      if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        itemname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LotteryResultRecordCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.LotteryResultRecordCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_LOTTERY_RESULT];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::RecordParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::RecordParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_itemid;
        break;
      }

      // optional uint64 itemid = 4;
      case 4: {
        if (tag == 32) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // optional string name = 5;
      case 5: {
        if (tag == 42) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_itemname;
        break;
      }

      // optional string itemname = 6;
      case 6: {
        if (tag == 50) {
         parse_itemname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_itemname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->itemname().data(), this->itemname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "itemname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_type;
        break;
      }

      // optional uint32 type = 7;
      case 7: {
        if (tag == 56) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_rate;
        break;
      }

      // optional uint32 rate = 8;
      case 8: {
        if (tag == 64) {
         parse_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rate_)));
          set_has_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.LotteryResultRecordCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.LotteryResultRecordCmd)
  return false;
#undef DO_
}

void LotteryResultRecordCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.LotteryResultRecordCmd)
  // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_LOTTERY_RESULT];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional uint64 itemid = 4;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->itemid(), output);
  }

  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->name(), output);
  }

  // optional string itemname = 6;
  if (has_itemname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemname().data(), this->itemname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->itemname(), output);
  }

  // optional uint32 type = 7;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->type(), output);
  }

  // optional uint32 rate = 8;
  if (has_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->rate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.LotteryResultRecordCmd)
}

::google::protobuf::uint8* LotteryResultRecordCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.LotteryResultRecordCmd)
  // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_LOTTERY_RESULT];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional uint64 itemid = 4;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->itemid(), target);
  }

  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  // optional string itemname = 6;
  if (has_itemname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemname().data(), this->itemname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->itemname(), target);
  }

  // optional uint32 type = 7;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->type(), target);
  }

  // optional uint32 rate = 8;
  if (has_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->rate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.LotteryResultRecordCmd)
  return target;
}

int LotteryResultRecordCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_LOTTERY_RESULT];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint64 itemid = 4;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->itemid());
    }

    // optional string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string itemname = 6;
    if (has_itemname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->itemname());
    }

    // optional uint32 type = 7;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 rate = 8;
    if (has_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LotteryResultRecordCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LotteryResultRecordCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LotteryResultRecordCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LotteryResultRecordCmd::MergeFrom(const LotteryResultRecordCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_itemname()) {
      set_itemname(from.itemname());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_rate()) {
      set_rate(from.rate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LotteryResultRecordCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LotteryResultRecordCmd::CopyFrom(const LotteryResultRecordCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LotteryResultRecordCmd::IsInitialized() const {

  return true;
}

void LotteryResultRecordCmd::Swap(LotteryResultRecordCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(itemid_, other->itemid_);
    std::swap(name_, other->name_);
    std::swap(itemname_, other->itemname_);
    std::swap(type_, other->type_);
    std::swap(rate_, other->rate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LotteryResultRecordCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LotteryResultRecordCmd_descriptor_;
  metadata.reflection = LotteryResultRecordCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobBattle::kTotalbattletimeFieldNumber;
#endif  // !_MSC_VER

BlobBattle::BlobBattle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobBattle)
}

void BlobBattle::InitAsDefaultInstance() {
}

BlobBattle::BlobBattle(const BlobBattle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobBattle)
}

void BlobBattle::SharedCtor() {
  _cached_size_ = 0;
  totalbattletime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobBattle::~BlobBattle() {
  // @@protoc_insertion_point(destructor:Cmd.BlobBattle)
  SharedDtor();
}

void BlobBattle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobBattle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobBattle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobBattle_descriptor_;
}

const BlobBattle& BlobBattle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobBattle* BlobBattle::default_instance_ = NULL;

BlobBattle* BlobBattle::New() const {
  return new BlobBattle;
}

void BlobBattle::Clear() {
  totalbattletime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobBattle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobBattle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 totalbattletime = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalbattletime_)));
          set_has_totalbattletime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobBattle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobBattle)
  return false;
#undef DO_
}

void BlobBattle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobBattle)
  // optional uint32 totalbattletime = 1 [default = 0];
  if (has_totalbattletime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->totalbattletime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobBattle)
}

::google::protobuf::uint8* BlobBattle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobBattle)
  // optional uint32 totalbattletime = 1 [default = 0];
  if (has_totalbattletime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->totalbattletime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobBattle)
  return target;
}

int BlobBattle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 totalbattletime = 1 [default = 0];
    if (has_totalbattletime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalbattletime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobBattle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobBattle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobBattle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobBattle::MergeFrom(const BlobBattle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_totalbattletime()) {
      set_totalbattletime(from.totalbattletime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobBattle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobBattle::CopyFrom(const BlobBattle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobBattle::IsInitialized() const {

  return true;
}

void BlobBattle::Swap(BlobBattle* other) {
  if (other != this) {
    std::swap(totalbattletime_, other->totalbattletime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobBattle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobBattle_descriptor_;
  metadata.reflection = BlobBattle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobSeeNpc::kSeeFieldNumber;
const int BlobSeeNpc::kHideFieldNumber;
#endif  // !_MSC_VER

BlobSeeNpc::BlobSeeNpc()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobSeeNpc)
}

void BlobSeeNpc::InitAsDefaultInstance() {
}

BlobSeeNpc::BlobSeeNpc(const BlobSeeNpc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobSeeNpc)
}

void BlobSeeNpc::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobSeeNpc::~BlobSeeNpc() {
  // @@protoc_insertion_point(destructor:Cmd.BlobSeeNpc)
  SharedDtor();
}

void BlobSeeNpc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobSeeNpc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobSeeNpc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobSeeNpc_descriptor_;
}

const BlobSeeNpc& BlobSeeNpc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobSeeNpc* BlobSeeNpc::default_instance_ = NULL;

BlobSeeNpc* BlobSeeNpc::New() const {
  return new BlobSeeNpc;
}

void BlobSeeNpc::Clear() {
  see_.Clear();
  hide_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobSeeNpc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobSeeNpc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 see = 1;
      case 1: {
        if (tag == 8) {
         parse_see:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_see())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_see())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_see;
        if (input->ExpectTag(16)) goto parse_hide;
        break;
      }

      // repeated uint32 hide = 2;
      case 2: {
        if (tag == 16) {
         parse_hide:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_hide())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hide())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_hide;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobSeeNpc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobSeeNpc)
  return false;
#undef DO_
}

void BlobSeeNpc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobSeeNpc)
  // repeated uint32 see = 1;
  for (int i = 0; i < this->see_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->see(i), output);
  }

  // repeated uint32 hide = 2;
  for (int i = 0; i < this->hide_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->hide(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobSeeNpc)
}

::google::protobuf::uint8* BlobSeeNpc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobSeeNpc)
  // repeated uint32 see = 1;
  for (int i = 0; i < this->see_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->see(i), target);
  }

  // repeated uint32 hide = 2;
  for (int i = 0; i < this->hide_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->hide(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobSeeNpc)
  return target;
}

int BlobSeeNpc::ByteSize() const {
  int total_size = 0;

  // repeated uint32 see = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->see_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->see(i));
    }
    total_size += 1 * this->see_size() + data_size;
  }

  // repeated uint32 hide = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->hide_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->hide(i));
    }
    total_size += 1 * this->hide_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobSeeNpc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobSeeNpc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobSeeNpc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobSeeNpc::MergeFrom(const BlobSeeNpc& from) {
  GOOGLE_CHECK_NE(&from, this);
  see_.MergeFrom(from.see_);
  hide_.MergeFrom(from.hide_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobSeeNpc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobSeeNpc::CopyFrom(const BlobSeeNpc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobSeeNpc::IsInitialized() const {

  return true;
}

void BlobSeeNpc::Swap(BlobSeeNpc* other) {
  if (other != this) {
    see_.Swap(&other->see_);
    hide_.Swap(&other->hide_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobSeeNpc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobSeeNpc_descriptor_;
  metadata.reflection = BlobSeeNpc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobSettings::kTransmapFieldNumber;
const int BlobSettings::kTransXFieldNumber;
const int BlobSettings::kTransYFieldNumber;
const int BlobSettings::kTransZFieldNumber;
#endif  // !_MSC_VER

BlobSettings::BlobSettings()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobSettings)
}

void BlobSettings::InitAsDefaultInstance() {
}

BlobSettings::BlobSettings(const BlobSettings& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobSettings)
}

void BlobSettings::SharedCtor() {
  _cached_size_ = 0;
  transmap_ = 0u;
  trans_x_ = 0;
  trans_y_ = 0;
  trans_z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobSettings::~BlobSettings() {
  // @@protoc_insertion_point(destructor:Cmd.BlobSettings)
  SharedDtor();
}

void BlobSettings::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobSettings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobSettings::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobSettings_descriptor_;
}

const BlobSettings& BlobSettings::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobSettings* BlobSettings::default_instance_ = NULL;

BlobSettings* BlobSettings::New() const {
  return new BlobSettings;
}

void BlobSettings::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BlobSettings*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(transmap_, trans_z_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobSettings)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 transmap = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &transmap_)));
          set_has_transmap();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_trans_x;
        break;
      }

      // optional float trans_x = 2 [default = 0];
      case 2: {
        if (tag == 21) {
         parse_trans_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &trans_x_)));
          set_has_trans_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_trans_y;
        break;
      }

      // optional float trans_y = 3 [default = 0];
      case 3: {
        if (tag == 29) {
         parse_trans_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &trans_y_)));
          set_has_trans_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_trans_z;
        break;
      }

      // optional float trans_z = 4 [default = 0];
      case 4: {
        if (tag == 37) {
         parse_trans_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &trans_z_)));
          set_has_trans_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobSettings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobSettings)
  return false;
#undef DO_
}

void BlobSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobSettings)
  // optional uint32 transmap = 1 [default = 0];
  if (has_transmap()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->transmap(), output);
  }

  // optional float trans_x = 2 [default = 0];
  if (has_trans_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->trans_x(), output);
  }

  // optional float trans_y = 3 [default = 0];
  if (has_trans_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->trans_y(), output);
  }

  // optional float trans_z = 4 [default = 0];
  if (has_trans_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->trans_z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobSettings)
}

::google::protobuf::uint8* BlobSettings::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobSettings)
  // optional uint32 transmap = 1 [default = 0];
  if (has_transmap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->transmap(), target);
  }

  // optional float trans_x = 2 [default = 0];
  if (has_trans_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->trans_x(), target);
  }

  // optional float trans_y = 3 [default = 0];
  if (has_trans_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->trans_y(), target);
  }

  // optional float trans_z = 4 [default = 0];
  if (has_trans_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->trans_z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobSettings)
  return target;
}

int BlobSettings::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 transmap = 1 [default = 0];
    if (has_transmap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->transmap());
    }

    // optional float trans_x = 2 [default = 0];
    if (has_trans_x()) {
      total_size += 1 + 4;
    }

    // optional float trans_y = 3 [default = 0];
    if (has_trans_y()) {
      total_size += 1 + 4;
    }

    // optional float trans_z = 4 [default = 0];
    if (has_trans_z()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobSettings::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobSettings* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobSettings*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobSettings::MergeFrom(const BlobSettings& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_transmap()) {
      set_transmap(from.transmap());
    }
    if (from.has_trans_x()) {
      set_trans_x(from.trans_x());
    }
    if (from.has_trans_y()) {
      set_trans_y(from.trans_y());
    }
    if (from.has_trans_z()) {
      set_trans_z(from.trans_z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobSettings::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobSettings::CopyFrom(const BlobSettings& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobSettings::IsInitialized() const {

  return true;
}

void BlobSettings::Swap(BlobSettings* other) {
  if (other != this) {
    std::swap(transmap_, other->transmap_);
    std::swap(trans_x_, other->trans_x_);
    std::swap(trans_y_, other->trans_y_);
    std::swap(trans_z_, other->trans_z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobSettings::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobSettings_descriptor_;
  metadata.reflection = BlobSettings_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobPhoto::kItemsFieldNumber;
#endif  // !_MSC_VER

BlobPhoto::BlobPhoto()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobPhoto)
}

void BlobPhoto::InitAsDefaultInstance() {
}

BlobPhoto::BlobPhoto(const BlobPhoto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobPhoto)
}

void BlobPhoto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobPhoto::~BlobPhoto() {
  // @@protoc_insertion_point(destructor:Cmd.BlobPhoto)
  SharedDtor();
}

void BlobPhoto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobPhoto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobPhoto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobPhoto_descriptor_;
}

const BlobPhoto& BlobPhoto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobPhoto* BlobPhoto::default_instance_ = NULL;

BlobPhoto* BlobPhoto::New() const {
  return new BlobPhoto;
}

void BlobPhoto::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobPhoto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobPhoto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Cmd.PhotoItem items = 1;
      case 1: {
        if (tag == 10) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobPhoto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobPhoto)
  return false;
#undef DO_
}

void BlobPhoto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobPhoto)
  // repeated .Cmd.PhotoItem items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobPhoto)
}

::google::protobuf::uint8* BlobPhoto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobPhoto)
  // repeated .Cmd.PhotoItem items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobPhoto)
  return target;
}

int BlobPhoto::ByteSize() const {
  int total_size = 0;

  // repeated .Cmd.PhotoItem items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobPhoto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobPhoto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobPhoto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobPhoto::MergeFrom(const BlobPhoto& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobPhoto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobPhoto::CopyFrom(const BlobPhoto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobPhoto::IsInitialized() const {

  return true;
}

void BlobPhoto::Swap(BlobPhoto* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobPhoto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobPhoto_descriptor_;
  metadata.reflection = BlobPhoto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobUserPet::kDataFieldNumber;
const int BlobUserPet::kUnlockinfoFieldNumber;
#endif  // !_MSC_VER

BlobUserPet::BlobUserPet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobUserPet)
}

void BlobUserPet::InitAsDefaultInstance() {
  unlockinfo_ = const_cast< ::Cmd::PetEquipUnlockInfo*>(&::Cmd::PetEquipUnlockInfo::default_instance());
}

BlobUserPet::BlobUserPet(const BlobUserPet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobUserPet)
}

void BlobUserPet::SharedCtor() {
  _cached_size_ = 0;
  unlockinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobUserPet::~BlobUserPet() {
  // @@protoc_insertion_point(destructor:Cmd.BlobUserPet)
  SharedDtor();
}

void BlobUserPet::SharedDtor() {
  if (this != default_instance_) {
    delete unlockinfo_;
  }
}

void BlobUserPet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobUserPet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobUserPet_descriptor_;
}

const BlobUserPet& BlobUserPet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobUserPet* BlobUserPet::default_instance_ = NULL;

BlobUserPet* BlobUserPet::New() const {
  return new BlobUserPet;
}

void BlobUserPet::Clear() {
  if (has_unlockinfo()) {
    if (unlockinfo_ != NULL) unlockinfo_->::Cmd::PetEquipUnlockInfo::Clear();
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobUserPet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobUserPet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Cmd.UserPetData data = 1;
      case 1: {
        if (tag == 10) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectTag(18)) goto parse_unlockinfo;
        break;
      }

      // optional .Cmd.PetEquipUnlockInfo unlockinfo = 2;
      case 2: {
        if (tag == 18) {
         parse_unlockinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unlockinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobUserPet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobUserPet)
  return false;
#undef DO_
}

void BlobUserPet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobUserPet)
  // repeated .Cmd.UserPetData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  // optional .Cmd.PetEquipUnlockInfo unlockinfo = 2;
  if (has_unlockinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->unlockinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobUserPet)
}

::google::protobuf::uint8* BlobUserPet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobUserPet)
  // repeated .Cmd.UserPetData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  // optional .Cmd.PetEquipUnlockInfo unlockinfo = 2;
  if (has_unlockinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->unlockinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobUserPet)
  return target;
}

int BlobUserPet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .Cmd.PetEquipUnlockInfo unlockinfo = 2;
    if (has_unlockinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unlockinfo());
    }

  }
  // repeated .Cmd.UserPetData data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobUserPet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobUserPet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobUserPet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobUserPet::MergeFrom(const BlobUserPet& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_unlockinfo()) {
      mutable_unlockinfo()->::Cmd::PetEquipUnlockInfo::MergeFrom(from.unlockinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobUserPet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobUserPet::CopyFrom(const BlobUserPet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobUserPet::IsInitialized() const {

  if (has_unlockinfo()) {
    if (!this->unlockinfo().IsInitialized()) return false;
  }
  return true;
}

void BlobUserPet::Swap(BlobUserPet* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(unlockinfo_, other->unlockinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobUserPet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobUserPet_descriptor_;
  metadata.reflection = BlobUserPet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobUserBeing::kDataFieldNumber;
const int BlobUserBeing::kCurbeingidFieldNumber;
const int BlobUserBeing::kSkillpointFieldNumber;
#endif  // !_MSC_VER

BlobUserBeing::BlobUserBeing()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobUserBeing)
}

void BlobUserBeing::InitAsDefaultInstance() {
}

BlobUserBeing::BlobUserBeing(const BlobUserBeing& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobUserBeing)
}

void BlobUserBeing::SharedCtor() {
  _cached_size_ = 0;
  curbeingid_ = 0u;
  skillpoint_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobUserBeing::~BlobUserBeing() {
  // @@protoc_insertion_point(destructor:Cmd.BlobUserBeing)
  SharedDtor();
}

void BlobUserBeing::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobUserBeing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobUserBeing::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobUserBeing_descriptor_;
}

const BlobUserBeing& BlobUserBeing::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobUserBeing* BlobUserBeing::default_instance_ = NULL;

BlobUserBeing* BlobUserBeing::New() const {
  return new BlobUserBeing;
}

void BlobUserBeing::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BlobUserBeing*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(curbeingid_, skillpoint_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobUserBeing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobUserBeing)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Cmd.UserBeingData data = 1;
      case 1: {
        if (tag == 10) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectTag(16)) goto parse_curbeingid;
        break;
      }

      // optional uint32 curbeingid = 2;
      case 2: {
        if (tag == 16) {
         parse_curbeingid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curbeingid_)));
          set_has_curbeingid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_skillpoint;
        break;
      }

      // optional uint32 skillpoint = 3;
      case 3: {
        if (tag == 24) {
         parse_skillpoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillpoint_)));
          set_has_skillpoint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobUserBeing)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobUserBeing)
  return false;
#undef DO_
}

void BlobUserBeing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobUserBeing)
  // repeated .Cmd.UserBeingData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  // optional uint32 curbeingid = 2;
  if (has_curbeingid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->curbeingid(), output);
  }

  // optional uint32 skillpoint = 3;
  if (has_skillpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->skillpoint(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobUserBeing)
}

::google::protobuf::uint8* BlobUserBeing::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobUserBeing)
  // repeated .Cmd.UserBeingData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  // optional uint32 curbeingid = 2;
  if (has_curbeingid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->curbeingid(), target);
  }

  // optional uint32 skillpoint = 3;
  if (has_skillpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->skillpoint(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobUserBeing)
  return target;
}

int BlobUserBeing::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 curbeingid = 2;
    if (has_curbeingid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curbeingid());
    }

    // optional uint32 skillpoint = 3;
    if (has_skillpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillpoint());
    }

  }
  // repeated .Cmd.UserBeingData data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobUserBeing::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobUserBeing* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobUserBeing*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobUserBeing::MergeFrom(const BlobUserBeing& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_curbeingid()) {
      set_curbeingid(from.curbeingid());
    }
    if (from.has_skillpoint()) {
      set_skillpoint(from.skillpoint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobUserBeing::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobUserBeing::CopyFrom(const BlobUserBeing& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobUserBeing::IsInitialized() const {

  return true;
}

void BlobUserBeing::Swap(BlobUserBeing* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(curbeingid_, other->curbeingid_);
    std::swap(skillpoint_, other->skillpoint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobUserBeing::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobUserBeing_descriptor_;
  metadata.reflection = BlobUserBeing_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobJoyData::kEtypeFieldNumber;
const int BlobJoyData::kJoyvalueFieldNumber;
#endif  // !_MSC_VER

BlobJoyData::BlobJoyData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobJoyData)
}

void BlobJoyData::InitAsDefaultInstance() {
}

BlobJoyData::BlobJoyData(const BlobJoyData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobJoyData)
}

void BlobJoyData::SharedCtor() {
  _cached_size_ = 0;
  etype_ = 0;
  joyvalue_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobJoyData::~BlobJoyData() {
  // @@protoc_insertion_point(destructor:Cmd.BlobJoyData)
  SharedDtor();
}

void BlobJoyData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobJoyData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobJoyData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobJoyData_descriptor_;
}

const BlobJoyData& BlobJoyData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobJoyData* BlobJoyData::default_instance_ = NULL;

BlobJoyData* BlobJoyData::New() const {
  return new BlobJoyData;
}

void BlobJoyData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BlobJoyData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(etype_, joyvalue_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobJoyData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobJoyData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.EJoyActivityType etype = 1 [default = JOY_ACTIVITY_MIN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EJoyActivityType_IsValid(value)) {
            set_etype(static_cast< ::Cmd::EJoyActivityType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_joyvalue;
        break;
      }

      // optional uint32 joyvalue = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_joyvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &joyvalue_)));
          set_has_joyvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobJoyData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobJoyData)
  return false;
#undef DO_
}

void BlobJoyData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobJoyData)
  // optional .Cmd.EJoyActivityType etype = 1 [default = JOY_ACTIVITY_MIN];
  if (has_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->etype(), output);
  }

  // optional uint32 joyvalue = 2 [default = 0];
  if (has_joyvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->joyvalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobJoyData)
}

::google::protobuf::uint8* BlobJoyData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobJoyData)
  // optional .Cmd.EJoyActivityType etype = 1 [default = JOY_ACTIVITY_MIN];
  if (has_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->etype(), target);
  }

  // optional uint32 joyvalue = 2 [default = 0];
  if (has_joyvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->joyvalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobJoyData)
  return target;
}

int BlobJoyData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.EJoyActivityType etype = 1 [default = JOY_ACTIVITY_MIN];
    if (has_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->etype());
    }

    // optional uint32 joyvalue = 2 [default = 0];
    if (has_joyvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->joyvalue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobJoyData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobJoyData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobJoyData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobJoyData::MergeFrom(const BlobJoyData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_etype()) {
      set_etype(from.etype());
    }
    if (from.has_joyvalue()) {
      set_joyvalue(from.joyvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobJoyData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobJoyData::CopyFrom(const BlobJoyData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobJoyData::IsInitialized() const {

  return true;
}

void BlobJoyData::Swap(BlobJoyData* other) {
  if (other != this) {
    std::swap(etype_, other->etype_);
    std::swap(joyvalue_, other->joyvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobJoyData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobJoyData_descriptor_;
  metadata.reflection = BlobJoyData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LotteryPoolData::kPoolidFieldNumber;
const int LotteryPoolData::kCoinFieldNumber;
#endif  // !_MSC_VER

LotteryPoolData::LotteryPoolData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.LotteryPoolData)
}

void LotteryPoolData::InitAsDefaultInstance() {
}

LotteryPoolData::LotteryPoolData(const LotteryPoolData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.LotteryPoolData)
}

void LotteryPoolData::SharedCtor() {
  _cached_size_ = 0;
  poolid_ = 0u;
  coin_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LotteryPoolData::~LotteryPoolData() {
  // @@protoc_insertion_point(destructor:Cmd.LotteryPoolData)
  SharedDtor();
}

void LotteryPoolData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LotteryPoolData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LotteryPoolData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LotteryPoolData_descriptor_;
}

const LotteryPoolData& LotteryPoolData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

LotteryPoolData* LotteryPoolData::default_instance_ = NULL;

LotteryPoolData* LotteryPoolData::New() const {
  return new LotteryPoolData;
}

void LotteryPoolData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LotteryPoolData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(poolid_, coin_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LotteryPoolData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.LotteryPoolData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 poolid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &poolid_)));
          set_has_poolid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_coin;
        break;
      }

      // optional uint32 coin = 2;
      case 2: {
        if (tag == 16) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.LotteryPoolData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.LotteryPoolData)
  return false;
#undef DO_
}

void LotteryPoolData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.LotteryPoolData)
  // optional uint32 poolid = 1;
  if (has_poolid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->poolid(), output);
  }

  // optional uint32 coin = 2;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->coin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.LotteryPoolData)
}

::google::protobuf::uint8* LotteryPoolData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.LotteryPoolData)
  // optional uint32 poolid = 1;
  if (has_poolid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->poolid(), target);
  }

  // optional uint32 coin = 2;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->coin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.LotteryPoolData)
  return target;
}

int LotteryPoolData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 poolid = 1;
    if (has_poolid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->poolid());
    }

    // optional uint32 coin = 2;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coin());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LotteryPoolData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LotteryPoolData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LotteryPoolData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LotteryPoolData::MergeFrom(const LotteryPoolData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_poolid()) {
      set_poolid(from.poolid());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LotteryPoolData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LotteryPoolData::CopyFrom(const LotteryPoolData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LotteryPoolData::IsInitialized() const {

  return true;
}

void LotteryPoolData::Swap(LotteryPoolData* other) {
  if (other != this) {
    std::swap(poolid_, other->poolid_);
    std::swap(coin_, other->coin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LotteryPoolData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LotteryPoolData_descriptor_;
  metadata.reflection = LotteryPoolData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobLottery::kItemsFieldNumber;
const int BlobLottery::kPoolsFieldNumber;
const int BlobLottery::kPooltimeFieldNumber;
#endif  // !_MSC_VER

BlobLottery::BlobLottery()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobLottery)
}

void BlobLottery::InitAsDefaultInstance() {
}

BlobLottery::BlobLottery(const BlobLottery& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobLottery)
}

void BlobLottery::SharedCtor() {
  _cached_size_ = 0;
  pooltime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobLottery::~BlobLottery() {
  // @@protoc_insertion_point(destructor:Cmd.BlobLottery)
  SharedDtor();
}

void BlobLottery::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobLottery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobLottery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobLottery_descriptor_;
}

const BlobLottery& BlobLottery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobLottery* BlobLottery::default_instance_ = NULL;

BlobLottery* BlobLottery::New() const {
  return new BlobLottery;
}

void BlobLottery::Clear() {
  pooltime_ = 0u;
  items_.Clear();
  pools_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobLottery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobLottery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 items = 1;
      case 1: {
        if (tag == 8) {
         parse_items:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_items())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_items())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_items;
        if (input->ExpectTag(18)) goto parse_pools;
        break;
      }

      // repeated .Cmd.LotteryPoolData pools = 2;
      case 2: {
        if (tag == 18) {
         parse_pools:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pools()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pools;
        if (input->ExpectTag(24)) goto parse_pooltime;
        break;
      }

      // optional uint32 pooltime = 3;
      case 3: {
        if (tag == 24) {
         parse_pooltime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pooltime_)));
          set_has_pooltime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobLottery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobLottery)
  return false;
#undef DO_
}

void BlobLottery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobLottery)
  // repeated uint32 items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->items(i), output);
  }

  // repeated .Cmd.LotteryPoolData pools = 2;
  for (int i = 0; i < this->pools_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pools(i), output);
  }

  // optional uint32 pooltime = 3;
  if (has_pooltime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pooltime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobLottery)
}

::google::protobuf::uint8* BlobLottery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobLottery)
  // repeated uint32 items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->items(i), target);
  }

  // repeated .Cmd.LotteryPoolData pools = 2;
  for (int i = 0; i < this->pools_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pools(i), target);
  }

  // optional uint32 pooltime = 3;
  if (has_pooltime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pooltime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobLottery)
  return target;
}

int BlobLottery::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional uint32 pooltime = 3;
    if (has_pooltime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pooltime());
    }

  }
  // repeated uint32 items = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->items_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->items(i));
    }
    total_size += 1 * this->items_size() + data_size;
  }

  // repeated .Cmd.LotteryPoolData pools = 2;
  total_size += 1 * this->pools_size();
  for (int i = 0; i < this->pools_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pools(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobLottery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobLottery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobLottery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobLottery::MergeFrom(const BlobLottery& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  pools_.MergeFrom(from.pools_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_pooltime()) {
      set_pooltime(from.pooltime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobLottery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobLottery::CopyFrom(const BlobLottery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobLottery::IsInitialized() const {

  return true;
}

void BlobLottery::Swap(BlobLottery* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    pools_.Swap(&other->pools_);
    std::swap(pooltime_, other->pooltime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobLottery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobLottery_descriptor_;
  metadata.reflection = BlobLottery_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobServant::kServantidFieldNumber;
const int BlobServant::kRecitemFieldNumber;
const int BlobServant::kOwnservantFieldNumber;
const int BlobServant::kGrowthitemFieldNumber;
const int BlobServant::kGrowthvalueFieldNumber;
const int BlobServant::kGrowthcurinfoFieldNumber;
#endif  // !_MSC_VER

BlobServant::BlobServant()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobServant)
}

void BlobServant::InitAsDefaultInstance() {
}

BlobServant::BlobServant(const BlobServant& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobServant)
}

void BlobServant::SharedCtor() {
  _cached_size_ = 0;
  servantid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobServant::~BlobServant() {
  // @@protoc_insertion_point(destructor:Cmd.BlobServant)
  SharedDtor();
}

void BlobServant::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobServant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobServant::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobServant_descriptor_;
}

const BlobServant& BlobServant::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobServant* BlobServant::default_instance_ = NULL;

BlobServant* BlobServant::New() const {
  return new BlobServant;
}

void BlobServant::Clear() {
  servantid_ = 0u;
  recitem_.Clear();
  ownservant_.Clear();
  growthitem_.Clear();
  growthvalue_.Clear();
  growthcurinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobServant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobServant)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 servantid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &servantid_)));
          set_has_servantid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_recitem;
        break;
      }

      // repeated .Cmd.RecommendItemInfo recitem = 2;
      case 2: {
        if (tag == 18) {
         parse_recitem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recitem()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_recitem;
        if (input->ExpectTag(24)) goto parse_ownservant;
        break;
      }

      // repeated uint32 ownservant = 3;
      case 3: {
        if (tag == 24) {
         parse_ownservant:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_ownservant())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_ownservant())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ownservant;
        if (input->ExpectTag(34)) goto parse_growthitem;
        break;
      }

      // repeated .Cmd.GrowthItemInfo growthitem = 4;
      case 4: {
        if (tag == 34) {
         parse_growthitem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_growthitem()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_growthitem;
        if (input->ExpectTag(42)) goto parse_growthvalue;
        break;
      }

      // repeated .Cmd.GrowthValueInfo growthvalue = 5;
      case 5: {
        if (tag == 42) {
         parse_growthvalue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_growthvalue()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_growthvalue;
        if (input->ExpectTag(50)) goto parse_growthcurinfo;
        break;
      }

      // repeated .Cmd.GrowthCurInfo growthcurinfo = 6;
      case 6: {
        if (tag == 50) {
         parse_growthcurinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_growthcurinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_growthcurinfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobServant)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobServant)
  return false;
#undef DO_
}

void BlobServant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobServant)
  // optional uint32 servantid = 1 [default = 0];
  if (has_servantid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->servantid(), output);
  }

  // repeated .Cmd.RecommendItemInfo recitem = 2;
  for (int i = 0; i < this->recitem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->recitem(i), output);
  }

  // repeated uint32 ownservant = 3;
  for (int i = 0; i < this->ownservant_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->ownservant(i), output);
  }

  // repeated .Cmd.GrowthItemInfo growthitem = 4;
  for (int i = 0; i < this->growthitem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->growthitem(i), output);
  }

  // repeated .Cmd.GrowthValueInfo growthvalue = 5;
  for (int i = 0; i < this->growthvalue_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->growthvalue(i), output);
  }

  // repeated .Cmd.GrowthCurInfo growthcurinfo = 6;
  for (int i = 0; i < this->growthcurinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->growthcurinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobServant)
}

::google::protobuf::uint8* BlobServant::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobServant)
  // optional uint32 servantid = 1 [default = 0];
  if (has_servantid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->servantid(), target);
  }

  // repeated .Cmd.RecommendItemInfo recitem = 2;
  for (int i = 0; i < this->recitem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->recitem(i), target);
  }

  // repeated uint32 ownservant = 3;
  for (int i = 0; i < this->ownservant_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->ownservant(i), target);
  }

  // repeated .Cmd.GrowthItemInfo growthitem = 4;
  for (int i = 0; i < this->growthitem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->growthitem(i), target);
  }

  // repeated .Cmd.GrowthValueInfo growthvalue = 5;
  for (int i = 0; i < this->growthvalue_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->growthvalue(i), target);
  }

  // repeated .Cmd.GrowthCurInfo growthcurinfo = 6;
  for (int i = 0; i < this->growthcurinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->growthcurinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobServant)
  return target;
}

int BlobServant::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 servantid = 1 [default = 0];
    if (has_servantid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->servantid());
    }

  }
  // repeated .Cmd.RecommendItemInfo recitem = 2;
  total_size += 1 * this->recitem_size();
  for (int i = 0; i < this->recitem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recitem(i));
  }

  // repeated uint32 ownservant = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->ownservant_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->ownservant(i));
    }
    total_size += 1 * this->ownservant_size() + data_size;
  }

  // repeated .Cmd.GrowthItemInfo growthitem = 4;
  total_size += 1 * this->growthitem_size();
  for (int i = 0; i < this->growthitem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->growthitem(i));
  }

  // repeated .Cmd.GrowthValueInfo growthvalue = 5;
  total_size += 1 * this->growthvalue_size();
  for (int i = 0; i < this->growthvalue_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->growthvalue(i));
  }

  // repeated .Cmd.GrowthCurInfo growthcurinfo = 6;
  total_size += 1 * this->growthcurinfo_size();
  for (int i = 0; i < this->growthcurinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->growthcurinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobServant::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobServant* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobServant*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobServant::MergeFrom(const BlobServant& from) {
  GOOGLE_CHECK_NE(&from, this);
  recitem_.MergeFrom(from.recitem_);
  ownservant_.MergeFrom(from.ownservant_);
  growthitem_.MergeFrom(from.growthitem_);
  growthvalue_.MergeFrom(from.growthvalue_);
  growthcurinfo_.MergeFrom(from.growthcurinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_servantid()) {
      set_servantid(from.servantid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobServant::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobServant::CopyFrom(const BlobServant& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobServant::IsInitialized() const {

  return true;
}

void BlobServant::Swap(BlobServant* other) {
  if (other != this) {
    std::swap(servantid_, other->servantid_);
    recitem_.Swap(&other->recitem_);
    ownservant_.Swap(&other->ownservant_);
    growthitem_.Swap(&other->growthitem_);
    growthvalue_.Swap(&other->growthvalue_);
    growthcurinfo_.Swap(&other->growthcurinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobServant::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobServant_descriptor_;
  metadata.reflection = BlobServant_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProfessionData::kIdFieldNumber;
const int ProfessionData::kProfessionFieldNumber;
const int ProfessionData::kJoblvFieldNumber;
const int ProfessionData::kJobexpFieldNumber;
const int ProfessionData::kTypeFieldNumber;
const int ProfessionData::kRecordnameFieldNumber;
const int ProfessionData::kRecordtimeFieldNumber;
const int ProfessionData::kCharidFieldNumber;
const int ProfessionData::kCharnameFieldNumber;
const int ProfessionData::kProBranchFieldNumber;
const int ProfessionData::kAstrolabeDataFieldNumber;
const int ProfessionData::kPackDataFieldNumber;
const int ProfessionData::kRoleDataFieldNumber;
const int ProfessionData::kBeingDataFieldNumber;
const int ProfessionData::kAttrDataFieldNumber;
const int ProfessionData::kNoviceDataFieldNumber;
const int ProfessionData::kPartnerDataFieldNumber;
const int ProfessionData::kIsfirstFieldNumber;
const int ProfessionData::kAppearanceDataFieldNumber;
const int ProfessionData::kSkillposFieldNumber;
const int ProfessionData::kOpertimeFieldNumber;
const int ProfessionData::kShortcutFieldNumber;
const int ProfessionData::kExchangeItemsFieldNumber;
#endif  // !_MSC_VER

ProfessionData::ProfessionData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ProfessionData)
}

void ProfessionData::InitAsDefaultInstance() {
  astrolabe_data_ = const_cast< ::Cmd::BlobAstrolabe*>(&::Cmd::BlobAstrolabe::default_instance());
  role_data_ = const_cast< ::Cmd::UserRoleData*>(&::Cmd::UserRoleData::default_instance());
  being_data_ = const_cast< ::Cmd::BlobUserBeing*>(&::Cmd::BlobUserBeing::default_instance());
  attr_data_ = const_cast< ::Cmd::BlobAttr*>(&::Cmd::BlobAttr::default_instance());
  novice_data_ = const_cast< ::Cmd::SkillData*>(&::Cmd::SkillData::default_instance());
  partner_data_ = const_cast< ::Cmd::BlobPet*>(&::Cmd::BlobPet::default_instance());
  skillpos_ = const_cast< ::Cmd::SkillValidPosData*>(&::Cmd::SkillValidPosData::default_instance());
  shortcut_ = const_cast< ::Cmd::SkillValidPos*>(&::Cmd::SkillValidPos::default_instance());
}

ProfessionData::ProfessionData(const ProfessionData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ProfessionData)
}

void ProfessionData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  profession_ = 0u;
  joblv_ = 0u;
  jobexp_ = 0u;
  type_ = 1;
  recordname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recordtime_ = 0u;
  charid_ = GOOGLE_ULONGLONG(0);
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pro_branch_ = 0u;
  astrolabe_data_ = NULL;
  role_data_ = NULL;
  being_data_ = NULL;
  attr_data_ = NULL;
  novice_data_ = NULL;
  partner_data_ = NULL;
  isfirst_ = true;
  skillpos_ = NULL;
  opertime_ = 0u;
  shortcut_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProfessionData::~ProfessionData() {
  // @@protoc_insertion_point(destructor:Cmd.ProfessionData)
  SharedDtor();
}

void ProfessionData::SharedDtor() {
  if (recordname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete recordname_;
  }
  if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete charname_;
  }
  if (this != default_instance_) {
    delete astrolabe_data_;
    delete role_data_;
    delete being_data_;
    delete attr_data_;
    delete novice_data_;
    delete partner_data_;
    delete skillpos_;
    delete shortcut_;
  }
}

void ProfessionData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProfessionData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProfessionData_descriptor_;
}

const ProfessionData& ProfessionData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

ProfessionData* ProfessionData::default_instance_ = NULL;

ProfessionData* ProfessionData::New() const {
  return new ProfessionData;
}

void ProfessionData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ProfessionData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, jobexp_);
    ZR_(recordtime_, charid_);
    type_ = 1;
    if (has_recordname()) {
      if (recordname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        recordname_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 63232) {
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        charname_->clear();
      }
    }
    pro_branch_ = 0u;
    if (has_astrolabe_data()) {
      if (astrolabe_data_ != NULL) astrolabe_data_->::Cmd::BlobAstrolabe::Clear();
    }
    if (has_role_data()) {
      if (role_data_ != NULL) role_data_->::Cmd::UserRoleData::Clear();
    }
    if (has_being_data()) {
      if (being_data_ != NULL) being_data_->::Cmd::BlobUserBeing::Clear();
    }
    if (has_attr_data()) {
      if (attr_data_ != NULL) attr_data_->::Cmd::BlobAttr::Clear();
    }
    if (has_novice_data()) {
      if (novice_data_ != NULL) novice_data_->::Cmd::SkillData::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 3866624) {
    if (has_partner_data()) {
      if (partner_data_ != NULL) partner_data_->::Cmd::BlobPet::Clear();
    }
    isfirst_ = true;
    if (has_skillpos()) {
      if (skillpos_ != NULL) skillpos_->::Cmd::SkillValidPosData::Clear();
    }
    opertime_ = 0u;
    if (has_shortcut()) {
      if (shortcut_ != NULL) shortcut_->::Cmd::SkillValidPos::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  pack_data_.Clear();
  appearance_data_.Clear();
  exchange_items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProfessionData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ProfessionData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_profession;
        break;
      }

      // optional uint32 profession = 2;
      case 2: {
        if (tag == 16) {
         parse_profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &profession_)));
          set_has_profession();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_joblv;
        break;
      }

      // optional uint32 joblv = 3;
      case 3: {
        if (tag == 24) {
         parse_joblv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &joblv_)));
          set_has_joblv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_jobexp;
        break;
      }

      // optional uint32 jobexp = 4;
      case 4: {
        if (tag == 32) {
         parse_jobexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &jobexp_)));
          set_has_jobexp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // optional .Cmd.EProfressionDataType type = 5 [default = ETypeBranch];
      case 5: {
        if (tag == 40) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EProfressionDataType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EProfressionDataType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_recordname;
        break;
      }

      // optional string recordname = 6;
      case 6: {
        if (tag == 50) {
         parse_recordname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_recordname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->recordname().data(), this->recordname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "recordname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_recordtime;
        break;
      }

      // optional uint32 recordtime = 7;
      case 7: {
        if (tag == 56) {
         parse_recordtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recordtime_)));
          set_has_recordtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 8;
      case 8: {
        if (tag == 64) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_charname;
        break;
      }

      // optional string charname = 9;
      case 9: {
        if (tag == 74) {
         parse_charname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->charname().data(), this->charname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "charname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_pro_branch;
        break;
      }

      // optional uint32 pro_branch = 10;
      case 10: {
        if (tag == 80) {
         parse_pro_branch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pro_branch_)));
          set_has_pro_branch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_astrolabe_data;
        break;
      }

      // optional .Cmd.BlobAstrolabe astrolabe_data = 11;
      case 11: {
        if (tag == 90) {
         parse_astrolabe_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_astrolabe_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_pack_data;
        break;
      }

      // repeated .Cmd.EquipPackData pack_data = 12;
      case 12: {
        if (tag == 98) {
         parse_pack_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pack_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_pack_data;
        if (input->ExpectTag(106)) goto parse_role_data;
        break;
      }

      // optional .Cmd.UserRoleData role_data = 13;
      case 13: {
        if (tag == 106) {
         parse_role_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_being_data;
        break;
      }

      // optional .Cmd.BlobUserBeing being_data = 14;
      case 14: {
        if (tag == 114) {
         parse_being_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_being_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_attr_data;
        break;
      }

      // optional .Cmd.BlobAttr attr_data = 15;
      case 15: {
        if (tag == 122) {
         parse_attr_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attr_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_novice_data;
        break;
      }

      // optional .Cmd.SkillData novice_data = 16;
      case 16: {
        if (tag == 130) {
         parse_novice_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_novice_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_partner_data;
        break;
      }

      // optional .Cmd.BlobPet partner_data = 17;
      case 17: {
        if (tag == 138) {
         parse_partner_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_partner_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_isfirst;
        break;
      }

      // optional bool isfirst = 18 [default = true];
      case 18: {
        if (tag == 144) {
         parse_isfirst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfirst_)));
          set_has_isfirst();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_appearance_data;
        break;
      }

      // repeated .Cmd.UserData appearance_data = 19;
      case 19: {
        if (tag == 154) {
         parse_appearance_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_appearance_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_appearance_data;
        if (input->ExpectTag(162)) goto parse_skillpos;
        break;
      }

      // optional .Cmd.SkillValidPosData skillpos = 20;
      case 20: {
        if (tag == 162) {
         parse_skillpos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skillpos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_opertime;
        break;
      }

      // optional uint32 opertime = 21;
      case 21: {
        if (tag == 168) {
         parse_opertime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opertime_)));
          set_has_opertime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_shortcut;
        break;
      }

      // optional .Cmd.SkillValidPos shortcut = 22;
      case 22: {
        if (tag == 178) {
         parse_shortcut:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shortcut()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_exchange_items;
        break;
      }

      // repeated .Cmd.ExchangeShopItem exchange_items = 23;
      case 23: {
        if (tag == 186) {
         parse_exchange_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_exchange_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_exchange_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ProfessionData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ProfessionData)
  return false;
#undef DO_
}

void ProfessionData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ProfessionData)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 profession = 2;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->profession(), output);
  }

  // optional uint32 joblv = 3;
  if (has_joblv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->joblv(), output);
  }

  // optional uint32 jobexp = 4;
  if (has_jobexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->jobexp(), output);
  }

  // optional .Cmd.EProfressionDataType type = 5 [default = ETypeBranch];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->type(), output);
  }

  // optional string recordname = 6;
  if (has_recordname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->recordname().data(), this->recordname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recordname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->recordname(), output);
  }

  // optional uint32 recordtime = 7;
  if (has_recordtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->recordtime(), output);
  }

  // optional uint64 charid = 8;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->charid(), output);
  }

  // optional string charname = 9;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->charname(), output);
  }

  // optional uint32 pro_branch = 10;
  if (has_pro_branch()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->pro_branch(), output);
  }

  // optional .Cmd.BlobAstrolabe astrolabe_data = 11;
  if (has_astrolabe_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->astrolabe_data(), output);
  }

  // repeated .Cmd.EquipPackData pack_data = 12;
  for (int i = 0; i < this->pack_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->pack_data(i), output);
  }

  // optional .Cmd.UserRoleData role_data = 13;
  if (has_role_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->role_data(), output);
  }

  // optional .Cmd.BlobUserBeing being_data = 14;
  if (has_being_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->being_data(), output);
  }

  // optional .Cmd.BlobAttr attr_data = 15;
  if (has_attr_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->attr_data(), output);
  }

  // optional .Cmd.SkillData novice_data = 16;
  if (has_novice_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->novice_data(), output);
  }

  // optional .Cmd.BlobPet partner_data = 17;
  if (has_partner_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->partner_data(), output);
  }

  // optional bool isfirst = 18 [default = true];
  if (has_isfirst()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->isfirst(), output);
  }

  // repeated .Cmd.UserData appearance_data = 19;
  for (int i = 0; i < this->appearance_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->appearance_data(i), output);
  }

  // optional .Cmd.SkillValidPosData skillpos = 20;
  if (has_skillpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->skillpos(), output);
  }

  // optional uint32 opertime = 21;
  if (has_opertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->opertime(), output);
  }

  // optional .Cmd.SkillValidPos shortcut = 22;
  if (has_shortcut()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->shortcut(), output);
  }

  // repeated .Cmd.ExchangeShopItem exchange_items = 23;
  for (int i = 0; i < this->exchange_items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->exchange_items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ProfessionData)
}

::google::protobuf::uint8* ProfessionData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ProfessionData)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 profession = 2;
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->profession(), target);
  }

  // optional uint32 joblv = 3;
  if (has_joblv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->joblv(), target);
  }

  // optional uint32 jobexp = 4;
  if (has_jobexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->jobexp(), target);
  }

  // optional .Cmd.EProfressionDataType type = 5 [default = ETypeBranch];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->type(), target);
  }

  // optional string recordname = 6;
  if (has_recordname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->recordname().data(), this->recordname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recordname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->recordname(), target);
  }

  // optional uint32 recordtime = 7;
  if (has_recordtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->recordtime(), target);
  }

  // optional uint64 charid = 8;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->charid(), target);
  }

  // optional string charname = 9;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->charname(), target);
  }

  // optional uint32 pro_branch = 10;
  if (has_pro_branch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->pro_branch(), target);
  }

  // optional .Cmd.BlobAstrolabe astrolabe_data = 11;
  if (has_astrolabe_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->astrolabe_data(), target);
  }

  // repeated .Cmd.EquipPackData pack_data = 12;
  for (int i = 0; i < this->pack_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->pack_data(i), target);
  }

  // optional .Cmd.UserRoleData role_data = 13;
  if (has_role_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->role_data(), target);
  }

  // optional .Cmd.BlobUserBeing being_data = 14;
  if (has_being_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->being_data(), target);
  }

  // optional .Cmd.BlobAttr attr_data = 15;
  if (has_attr_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->attr_data(), target);
  }

  // optional .Cmd.SkillData novice_data = 16;
  if (has_novice_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->novice_data(), target);
  }

  // optional .Cmd.BlobPet partner_data = 17;
  if (has_partner_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->partner_data(), target);
  }

  // optional bool isfirst = 18 [default = true];
  if (has_isfirst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->isfirst(), target);
  }

  // repeated .Cmd.UserData appearance_data = 19;
  for (int i = 0; i < this->appearance_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->appearance_data(i), target);
  }

  // optional .Cmd.SkillValidPosData skillpos = 20;
  if (has_skillpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->skillpos(), target);
  }

  // optional uint32 opertime = 21;
  if (has_opertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->opertime(), target);
  }

  // optional .Cmd.SkillValidPos shortcut = 22;
  if (has_shortcut()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->shortcut(), target);
  }

  // repeated .Cmd.ExchangeShopItem exchange_items = 23;
  for (int i = 0; i < this->exchange_items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->exchange_items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ProfessionData)
  return target;
}

int ProfessionData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 profession = 2;
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->profession());
    }

    // optional uint32 joblv = 3;
    if (has_joblv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->joblv());
    }

    // optional uint32 jobexp = 4;
    if (has_jobexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->jobexp());
    }

    // optional .Cmd.EProfressionDataType type = 5 [default = ETypeBranch];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string recordname = 6;
    if (has_recordname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->recordname());
    }

    // optional uint32 recordtime = 7;
    if (has_recordtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recordtime());
    }

    // optional uint64 charid = 8;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string charname = 9;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charname());
    }

    // optional uint32 pro_branch = 10;
    if (has_pro_branch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pro_branch());
    }

    // optional .Cmd.BlobAstrolabe astrolabe_data = 11;
    if (has_astrolabe_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->astrolabe_data());
    }

    // optional .Cmd.UserRoleData role_data = 13;
    if (has_role_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role_data());
    }

    // optional .Cmd.BlobUserBeing being_data = 14;
    if (has_being_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->being_data());
    }

    // optional .Cmd.BlobAttr attr_data = 15;
    if (has_attr_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attr_data());
    }

    // optional .Cmd.SkillData novice_data = 16;
    if (has_novice_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->novice_data());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .Cmd.BlobPet partner_data = 17;
    if (has_partner_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->partner_data());
    }

    // optional bool isfirst = 18 [default = true];
    if (has_isfirst()) {
      total_size += 2 + 1;
    }

    // optional .Cmd.SkillValidPosData skillpos = 20;
    if (has_skillpos()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skillpos());
    }

    // optional uint32 opertime = 21;
    if (has_opertime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opertime());
    }

    // optional .Cmd.SkillValidPos shortcut = 22;
    if (has_shortcut()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shortcut());
    }

  }
  // repeated .Cmd.EquipPackData pack_data = 12;
  total_size += 1 * this->pack_data_size();
  for (int i = 0; i < this->pack_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pack_data(i));
  }

  // repeated .Cmd.UserData appearance_data = 19;
  total_size += 2 * this->appearance_data_size();
  for (int i = 0; i < this->appearance_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->appearance_data(i));
  }

  // repeated .Cmd.ExchangeShopItem exchange_items = 23;
  total_size += 2 * this->exchange_items_size();
  for (int i = 0; i < this->exchange_items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->exchange_items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProfessionData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProfessionData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProfessionData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProfessionData::MergeFrom(const ProfessionData& from) {
  GOOGLE_CHECK_NE(&from, this);
  pack_data_.MergeFrom(from.pack_data_);
  appearance_data_.MergeFrom(from.appearance_data_);
  exchange_items_.MergeFrom(from.exchange_items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
    if (from.has_joblv()) {
      set_joblv(from.joblv());
    }
    if (from.has_jobexp()) {
      set_jobexp(from.jobexp());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_recordname()) {
      set_recordname(from.recordname());
    }
    if (from.has_recordtime()) {
      set_recordtime(from.recordtime());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_charname()) {
      set_charname(from.charname());
    }
    if (from.has_pro_branch()) {
      set_pro_branch(from.pro_branch());
    }
    if (from.has_astrolabe_data()) {
      mutable_astrolabe_data()->::Cmd::BlobAstrolabe::MergeFrom(from.astrolabe_data());
    }
    if (from.has_role_data()) {
      mutable_role_data()->::Cmd::UserRoleData::MergeFrom(from.role_data());
    }
    if (from.has_being_data()) {
      mutable_being_data()->::Cmd::BlobUserBeing::MergeFrom(from.being_data());
    }
    if (from.has_attr_data()) {
      mutable_attr_data()->::Cmd::BlobAttr::MergeFrom(from.attr_data());
    }
    if (from.has_novice_data()) {
      mutable_novice_data()->::Cmd::SkillData::MergeFrom(from.novice_data());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_partner_data()) {
      mutable_partner_data()->::Cmd::BlobPet::MergeFrom(from.partner_data());
    }
    if (from.has_isfirst()) {
      set_isfirst(from.isfirst());
    }
    if (from.has_skillpos()) {
      mutable_skillpos()->::Cmd::SkillValidPosData::MergeFrom(from.skillpos());
    }
    if (from.has_opertime()) {
      set_opertime(from.opertime());
    }
    if (from.has_shortcut()) {
      mutable_shortcut()->::Cmd::SkillValidPos::MergeFrom(from.shortcut());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProfessionData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfessionData::CopyFrom(const ProfessionData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfessionData::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->appearance_data())) return false;
  return true;
}

void ProfessionData::Swap(ProfessionData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(profession_, other->profession_);
    std::swap(joblv_, other->joblv_);
    std::swap(jobexp_, other->jobexp_);
    std::swap(type_, other->type_);
    std::swap(recordname_, other->recordname_);
    std::swap(recordtime_, other->recordtime_);
    std::swap(charid_, other->charid_);
    std::swap(charname_, other->charname_);
    std::swap(pro_branch_, other->pro_branch_);
    std::swap(astrolabe_data_, other->astrolabe_data_);
    pack_data_.Swap(&other->pack_data_);
    std::swap(role_data_, other->role_data_);
    std::swap(being_data_, other->being_data_);
    std::swap(attr_data_, other->attr_data_);
    std::swap(novice_data_, other->novice_data_);
    std::swap(partner_data_, other->partner_data_);
    std::swap(isfirst_, other->isfirst_);
    appearance_data_.Swap(&other->appearance_data_);
    std::swap(skillpos_, other->skillpos_);
    std::swap(opertime_, other->opertime_);
    std::swap(shortcut_, other->shortcut_);
    exchange_items_.Swap(&other->exchange_items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProfessionData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProfessionData_descriptor_;
  metadata.reflection = ProfessionData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProfessionSvrData::kIdFieldNumber;
const int ProfessionSvrData::kBepro1TimeFieldNumber;
const int ProfessionSvrData::kBepro2TimeFieldNumber;
const int ProfessionSvrData::kBepro3TimeFieldNumber;
#endif  // !_MSC_VER

ProfessionSvrData::ProfessionSvrData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ProfessionSvrData)
}

void ProfessionSvrData::InitAsDefaultInstance() {
}

ProfessionSvrData::ProfessionSvrData(const ProfessionSvrData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ProfessionSvrData)
}

void ProfessionSvrData::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  bepro_1_time_ = 0u;
  bepro_2_time_ = 0u;
  bepro_3_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProfessionSvrData::~ProfessionSvrData() {
  // @@protoc_insertion_point(destructor:Cmd.ProfessionSvrData)
  SharedDtor();
}

void ProfessionSvrData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProfessionSvrData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProfessionSvrData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProfessionSvrData_descriptor_;
}

const ProfessionSvrData& ProfessionSvrData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

ProfessionSvrData* ProfessionSvrData::default_instance_ = NULL;

ProfessionSvrData* ProfessionSvrData::New() const {
  return new ProfessionSvrData;
}

void ProfessionSvrData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ProfessionSvrData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, bepro_3_time_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProfessionSvrData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ProfessionSvrData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_bepro_1_time;
        break;
      }

      // optional uint32 bepro_1_time = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_bepro_1_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bepro_1_time_)));
          set_has_bepro_1_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_bepro_2_time;
        break;
      }

      // optional uint32 bepro_2_time = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_bepro_2_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bepro_2_time_)));
          set_has_bepro_2_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_bepro_3_time;
        break;
      }

      // optional uint32 bepro_3_time = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_bepro_3_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bepro_3_time_)));
          set_has_bepro_3_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ProfessionSvrData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ProfessionSvrData)
  return false;
#undef DO_
}

void ProfessionSvrData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ProfessionSvrData)
  // optional uint32 id = 1 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 bepro_1_time = 2 [default = 0];
  if (has_bepro_1_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bepro_1_time(), output);
  }

  // optional uint32 bepro_2_time = 3 [default = 0];
  if (has_bepro_2_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->bepro_2_time(), output);
  }

  // optional uint32 bepro_3_time = 4 [default = 0];
  if (has_bepro_3_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->bepro_3_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ProfessionSvrData)
}

::google::protobuf::uint8* ProfessionSvrData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ProfessionSvrData)
  // optional uint32 id = 1 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 bepro_1_time = 2 [default = 0];
  if (has_bepro_1_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bepro_1_time(), target);
  }

  // optional uint32 bepro_2_time = 3 [default = 0];
  if (has_bepro_2_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->bepro_2_time(), target);
  }

  // optional uint32 bepro_3_time = 4 [default = 0];
  if (has_bepro_3_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->bepro_3_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ProfessionSvrData)
  return target;
}

int ProfessionSvrData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 bepro_1_time = 2 [default = 0];
    if (has_bepro_1_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bepro_1_time());
    }

    // optional uint32 bepro_2_time = 3 [default = 0];
    if (has_bepro_2_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bepro_2_time());
    }

    // optional uint32 bepro_3_time = 4 [default = 0];
    if (has_bepro_3_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bepro_3_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProfessionSvrData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProfessionSvrData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProfessionSvrData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProfessionSvrData::MergeFrom(const ProfessionSvrData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_bepro_1_time()) {
      set_bepro_1_time(from.bepro_1_time());
    }
    if (from.has_bepro_2_time()) {
      set_bepro_2_time(from.bepro_2_time());
    }
    if (from.has_bepro_3_time()) {
      set_bepro_3_time(from.bepro_3_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProfessionSvrData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfessionSvrData::CopyFrom(const ProfessionSvrData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfessionSvrData::IsInitialized() const {

  return true;
}

void ProfessionSvrData::Swap(ProfessionSvrData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(bepro_1_time_, other->bepro_1_time_);
    std::swap(bepro_2_time_, other->bepro_2_time_);
    std::swap(bepro_3_time_, other->bepro_3_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProfessionSvrData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProfessionSvrData_descriptor_;
  metadata.reflection = ProfessionSvrData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobProfession::kDatasFieldNumber;
const int BlobProfession::kSvrDatasFieldNumber;
const int BlobProfession::kLastLoadTimeFieldNumber;
#endif  // !_MSC_VER

BlobProfession::BlobProfession()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobProfession)
}

void BlobProfession::InitAsDefaultInstance() {
}

BlobProfession::BlobProfession(const BlobProfession& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobProfession)
}

void BlobProfession::SharedCtor() {
  _cached_size_ = 0;
  last_load_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobProfession::~BlobProfession() {
  // @@protoc_insertion_point(destructor:Cmd.BlobProfession)
  SharedDtor();
}

void BlobProfession::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobProfession::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobProfession::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobProfession_descriptor_;
}

const BlobProfession& BlobProfession::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobProfession* BlobProfession::default_instance_ = NULL;

BlobProfession* BlobProfession::New() const {
  return new BlobProfession;
}

void BlobProfession::Clear() {
  last_load_time_ = 0u;
  datas_.Clear();
  svr_datas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobProfession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobProfession)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Cmd.ProfessionData datas = 1;
      case 1: {
        if (tag == 10) {
         parse_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_datas;
        if (input->ExpectTag(16)) goto parse_last_load_time;
        break;
      }

      // optional uint32 last_load_time = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_last_load_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_load_time_)));
          set_has_last_load_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_svr_datas;
        break;
      }

      // repeated .Cmd.ProfessionSvrData svr_datas = 3;
      case 3: {
        if (tag == 26) {
         parse_svr_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_svr_datas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_svr_datas;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobProfession)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobProfession)
  return false;
#undef DO_
}

void BlobProfession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobProfession)
  // repeated .Cmd.ProfessionData datas = 1;
  for (int i = 0; i < this->datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->datas(i), output);
  }

  // optional uint32 last_load_time = 2 [default = 0];
  if (has_last_load_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->last_load_time(), output);
  }

  // repeated .Cmd.ProfessionSvrData svr_datas = 3;
  for (int i = 0; i < this->svr_datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->svr_datas(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobProfession)
}

::google::protobuf::uint8* BlobProfession::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobProfession)
  // repeated .Cmd.ProfessionData datas = 1;
  for (int i = 0; i < this->datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->datas(i), target);
  }

  // optional uint32 last_load_time = 2 [default = 0];
  if (has_last_load_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->last_load_time(), target);
  }

  // repeated .Cmd.ProfessionSvrData svr_datas = 3;
  for (int i = 0; i < this->svr_datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->svr_datas(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobProfession)
  return target;
}

int BlobProfession::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional uint32 last_load_time = 2 [default = 0];
    if (has_last_load_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_load_time());
    }

  }
  // repeated .Cmd.ProfessionData datas = 1;
  total_size += 1 * this->datas_size();
  for (int i = 0; i < this->datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datas(i));
  }

  // repeated .Cmd.ProfessionSvrData svr_datas = 3;
  total_size += 1 * this->svr_datas_size();
  for (int i = 0; i < this->svr_datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->svr_datas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobProfession::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobProfession* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobProfession*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobProfession::MergeFrom(const BlobProfession& from) {
  GOOGLE_CHECK_NE(&from, this);
  datas_.MergeFrom(from.datas_);
  svr_datas_.MergeFrom(from.svr_datas_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_last_load_time()) {
      set_last_load_time(from.last_load_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobProfession::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobProfession::CopyFrom(const BlobProfession& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobProfession::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->datas())) return false;
  return true;
}

void BlobProfession::Swap(BlobProfession* other) {
  if (other != this) {
    datas_.Swap(&other->datas_);
    svr_datas_.Swap(&other->svr_datas_);
    std::swap(last_load_time_, other->last_load_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobProfession::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobProfession_descriptor_;
  metadata.reflection = BlobProfession_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobRecordInfo::kBuytimesFieldNumber;
const int BlobRecordInfo::kLastLoadTimeFieldNumber;
const int BlobRecordInfo::kRecordsFieldNumber;
const int BlobRecordInfo::kDestCharidFieldNumber;
const int BlobRecordInfo::kDestMapFieldNumber;
const int BlobRecordInfo::kDestSlotidFieldNumber;
const int BlobRecordInfo::kCardExpiretimeFieldNumber;
const int BlobRecordInfo::kAstrolDataFieldNumber;
#endif  // !_MSC_VER

BlobRecordInfo::BlobRecordInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobRecordInfo)
}

void BlobRecordInfo::InitAsDefaultInstance() {
}

BlobRecordInfo::BlobRecordInfo(const BlobRecordInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobRecordInfo)
}

void BlobRecordInfo::SharedCtor() {
  _cached_size_ = 0;
  buytimes_ = 0u;
  last_load_time_ = 0u;
  dest_charid_ = 0u;
  dest_map_ = 0u;
  dest_slotid_ = 0u;
  card_expiretime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobRecordInfo::~BlobRecordInfo() {
  // @@protoc_insertion_point(destructor:Cmd.BlobRecordInfo)
  SharedDtor();
}

void BlobRecordInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobRecordInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobRecordInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobRecordInfo_descriptor_;
}

const BlobRecordInfo& BlobRecordInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobRecordInfo* BlobRecordInfo::default_instance_ = NULL;

BlobRecordInfo* BlobRecordInfo::New() const {
  return new BlobRecordInfo;
}

void BlobRecordInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BlobRecordInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 123) {
    ZR_(buytimes_, last_load_time_);
    ZR_(dest_charid_, card_expiretime_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  records_.Clear();
  astrol_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobRecordInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobRecordInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 buytimes = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buytimes_)));
          set_has_buytimes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_last_load_time;
        break;
      }

      // optional uint32 last_load_time = 2;
      case 2: {
        if (tag == 16) {
         parse_last_load_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_load_time_)));
          set_has_last_load_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_records;
        break;
      }

      // repeated .Cmd.ProfessionData records = 3;
      case 3: {
        if (tag == 26) {
         parse_records:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_records()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_records;
        if (input->ExpectTag(32)) goto parse_dest_charid;
        break;
      }

      // optional uint32 dest_charid = 4;
      case 4: {
        if (tag == 32) {
         parse_dest_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dest_charid_)));
          set_has_dest_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_dest_map;
        break;
      }

      // optional uint32 dest_map = 5;
      case 5: {
        if (tag == 40) {
         parse_dest_map:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dest_map_)));
          set_has_dest_map();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_dest_slotid;
        break;
      }

      // optional uint32 dest_slotid = 6;
      case 6: {
        if (tag == 48) {
         parse_dest_slotid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dest_slotid_)));
          set_has_dest_slotid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_card_expiretime;
        break;
      }

      // optional uint32 card_expiretime = 7;
      case 7: {
        if (tag == 56) {
         parse_card_expiretime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_expiretime_)));
          set_has_card_expiretime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_astrol_data;
        break;
      }

      // repeated .Cmd.UserAstrolMaterialData astrol_data = 8;
      case 8: {
        if (tag == 66) {
         parse_astrol_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_astrol_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_astrol_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobRecordInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobRecordInfo)
  return false;
#undef DO_
}

void BlobRecordInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobRecordInfo)
  // optional uint32 buytimes = 1;
  if (has_buytimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->buytimes(), output);
  }

  // optional uint32 last_load_time = 2;
  if (has_last_load_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->last_load_time(), output);
  }

  // repeated .Cmd.ProfessionData records = 3;
  for (int i = 0; i < this->records_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->records(i), output);
  }

  // optional uint32 dest_charid = 4;
  if (has_dest_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dest_charid(), output);
  }

  // optional uint32 dest_map = 5;
  if (has_dest_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->dest_map(), output);
  }

  // optional uint32 dest_slotid = 6;
  if (has_dest_slotid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->dest_slotid(), output);
  }

  // optional uint32 card_expiretime = 7;
  if (has_card_expiretime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->card_expiretime(), output);
  }

  // repeated .Cmd.UserAstrolMaterialData astrol_data = 8;
  for (int i = 0; i < this->astrol_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->astrol_data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobRecordInfo)
}

::google::protobuf::uint8* BlobRecordInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobRecordInfo)
  // optional uint32 buytimes = 1;
  if (has_buytimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->buytimes(), target);
  }

  // optional uint32 last_load_time = 2;
  if (has_last_load_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->last_load_time(), target);
  }

  // repeated .Cmd.ProfessionData records = 3;
  for (int i = 0; i < this->records_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->records(i), target);
  }

  // optional uint32 dest_charid = 4;
  if (has_dest_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->dest_charid(), target);
  }

  // optional uint32 dest_map = 5;
  if (has_dest_map()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->dest_map(), target);
  }

  // optional uint32 dest_slotid = 6;
  if (has_dest_slotid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->dest_slotid(), target);
  }

  // optional uint32 card_expiretime = 7;
  if (has_card_expiretime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->card_expiretime(), target);
  }

  // repeated .Cmd.UserAstrolMaterialData astrol_data = 8;
  for (int i = 0; i < this->astrol_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->astrol_data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobRecordInfo)
  return target;
}

int BlobRecordInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 buytimes = 1;
    if (has_buytimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buytimes());
    }

    // optional uint32 last_load_time = 2;
    if (has_last_load_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_load_time());
    }

    // optional uint32 dest_charid = 4;
    if (has_dest_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dest_charid());
    }

    // optional uint32 dest_map = 5;
    if (has_dest_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dest_map());
    }

    // optional uint32 dest_slotid = 6;
    if (has_dest_slotid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dest_slotid());
    }

    // optional uint32 card_expiretime = 7;
    if (has_card_expiretime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->card_expiretime());
    }

  }
  // repeated .Cmd.ProfessionData records = 3;
  total_size += 1 * this->records_size();
  for (int i = 0; i < this->records_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->records(i));
  }

  // repeated .Cmd.UserAstrolMaterialData astrol_data = 8;
  total_size += 1 * this->astrol_data_size();
  for (int i = 0; i < this->astrol_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->astrol_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobRecordInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobRecordInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobRecordInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobRecordInfo::MergeFrom(const BlobRecordInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  records_.MergeFrom(from.records_);
  astrol_data_.MergeFrom(from.astrol_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buytimes()) {
      set_buytimes(from.buytimes());
    }
    if (from.has_last_load_time()) {
      set_last_load_time(from.last_load_time());
    }
    if (from.has_dest_charid()) {
      set_dest_charid(from.dest_charid());
    }
    if (from.has_dest_map()) {
      set_dest_map(from.dest_map());
    }
    if (from.has_dest_slotid()) {
      set_dest_slotid(from.dest_slotid());
    }
    if (from.has_card_expiretime()) {
      set_card_expiretime(from.card_expiretime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobRecordInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobRecordInfo::CopyFrom(const BlobRecordInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobRecordInfo::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->records())) return false;
  return true;
}

void BlobRecordInfo::Swap(BlobRecordInfo* other) {
  if (other != this) {
    std::swap(buytimes_, other->buytimes_);
    std::swap(last_load_time_, other->last_load_time_);
    records_.Swap(&other->records_);
    std::swap(dest_charid_, other->dest_charid_);
    std::swap(dest_map_, other->dest_map_);
    std::swap(dest_slotid_, other->dest_slotid_);
    std::swap(card_expiretime_, other->card_expiretime_);
    astrol_data_.Swap(&other->astrol_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobRecordInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobRecordInfo_descriptor_;
  metadata.reflection = BlobRecordInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserProfessionData::kProfessionFieldNumber;
const int UserProfessionData::kJoblvFieldNumber;
#endif  // !_MSC_VER

UserProfessionData::UserProfessionData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UserProfessionData)
}

void UserProfessionData::InitAsDefaultInstance() {
}

UserProfessionData::UserProfessionData(const UserProfessionData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UserProfessionData)
}

void UserProfessionData::SharedCtor() {
  _cached_size_ = 0;
  profession_ = 0u;
  joblv_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserProfessionData::~UserProfessionData() {
  // @@protoc_insertion_point(destructor:Cmd.UserProfessionData)
  SharedDtor();
}

void UserProfessionData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserProfessionData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserProfessionData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserProfessionData_descriptor_;
}

const UserProfessionData& UserProfessionData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

UserProfessionData* UserProfessionData::default_instance_ = NULL;

UserProfessionData* UserProfessionData::New() const {
  return new UserProfessionData;
}

void UserProfessionData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserProfessionData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(profession_, joblv_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserProfessionData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UserProfessionData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 profession = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &profession_)));
          set_has_profession();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_joblv;
        break;
      }

      // optional uint32 joblv = 2;
      case 2: {
        if (tag == 16) {
         parse_joblv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &joblv_)));
          set_has_joblv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UserProfessionData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UserProfessionData)
  return false;
#undef DO_
}

void UserProfessionData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UserProfessionData)
  // optional uint32 profession = 1;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->profession(), output);
  }

  // optional uint32 joblv = 2;
  if (has_joblv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->joblv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UserProfessionData)
}

::google::protobuf::uint8* UserProfessionData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UserProfessionData)
  // optional uint32 profession = 1;
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->profession(), target);
  }

  // optional uint32 joblv = 2;
  if (has_joblv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->joblv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UserProfessionData)
  return target;
}

int UserProfessionData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 profession = 1;
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->profession());
    }

    // optional uint32 joblv = 2;
    if (has_joblv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->joblv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserProfessionData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserProfessionData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserProfessionData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserProfessionData::MergeFrom(const UserProfessionData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_profession()) {
      set_profession(from.profession());
    }
    if (from.has_joblv()) {
      set_joblv(from.joblv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserProfessionData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserProfessionData::CopyFrom(const UserProfessionData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserProfessionData::IsInitialized() const {

  return true;
}

void UserProfessionData::Swap(UserProfessionData* other) {
  if (other != this) {
    std::swap(profession_, other->profession_);
    std::swap(joblv_, other->joblv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserProfessionData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserProfessionData_descriptor_;
  metadata.reflection = UserProfessionData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqUserProfessionCmd::kCmdFieldNumber;
const int ReqUserProfessionCmd::kParamFieldNumber;
const int ReqUserProfessionCmd::kCharidFieldNumber;
const int ReqUserProfessionCmd::kAccidFieldNumber;
const int ReqUserProfessionCmd::kScenenameFieldNumber;
const int ReqUserProfessionCmd::kDatasFieldNumber;
#endif  // !_MSC_VER

ReqUserProfessionCmd::ReqUserProfessionCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ReqUserProfessionCmd)
}

void ReqUserProfessionCmd::InitAsDefaultInstance() {
}

ReqUserProfessionCmd::ReqUserProfessionCmd(const ReqUserProfessionCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ReqUserProfessionCmd)
}

void ReqUserProfessionCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 200;
  param_ = 21;
  charid_ = GOOGLE_ULONGLONG(0);
  accid_ = GOOGLE_ULONGLONG(0);
  scenename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqUserProfessionCmd::~ReqUserProfessionCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ReqUserProfessionCmd)
  SharedDtor();
}

void ReqUserProfessionCmd::SharedDtor() {
  if (scenename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete scenename_;
  }
  if (this != default_instance_) {
  }
}

void ReqUserProfessionCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqUserProfessionCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqUserProfessionCmd_descriptor_;
}

const ReqUserProfessionCmd& ReqUserProfessionCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

ReqUserProfessionCmd* ReqUserProfessionCmd::default_instance_ = NULL;

ReqUserProfessionCmd* ReqUserProfessionCmd::New() const {
  return new ReqUserProfessionCmd;
}

void ReqUserProfessionCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReqUserProfessionCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(charid_, accid_);
    cmd_ = 200;
    param_ = 21;
    if (has_scenename()) {
      if (scenename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        scenename_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  datas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqUserProfessionCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ReqUserProfessionCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_USER_PROFESSION];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::RecordParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::RecordParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_accid;
        break;
      }

      // optional uint64 accid = 4;
      case 4: {
        if (tag == 32) {
         parse_accid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &accid_)));
          set_has_accid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_scenename;
        break;
      }

      // optional string scenename = 5;
      case 5: {
        if (tag == 42) {
         parse_scenename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scenename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->scenename().data(), this->scenename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "scenename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_datas;
        break;
      }

      // repeated .Cmd.UserProfessionData datas = 6;
      case 6: {
        if (tag == 50) {
         parse_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_datas;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ReqUserProfessionCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ReqUserProfessionCmd)
  return false;
#undef DO_
}

void ReqUserProfessionCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ReqUserProfessionCmd)
  // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_USER_PROFESSION];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional uint64 accid = 4;
  if (has_accid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->accid(), output);
  }

  // optional string scenename = 5;
  if (has_scenename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scenename().data(), this->scenename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "scenename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->scenename(), output);
  }

  // repeated .Cmd.UserProfessionData datas = 6;
  for (int i = 0; i < this->datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->datas(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ReqUserProfessionCmd)
}

::google::protobuf::uint8* ReqUserProfessionCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ReqUserProfessionCmd)
  // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_USER_PROFESSION];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional uint64 accid = 4;
  if (has_accid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->accid(), target);
  }

  // optional string scenename = 5;
  if (has_scenename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scenename().data(), this->scenename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "scenename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->scenename(), target);
  }

  // repeated .Cmd.UserProfessionData datas = 6;
  for (int i = 0; i < this->datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->datas(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ReqUserProfessionCmd)
  return target;
}

int ReqUserProfessionCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_USER_PROFESSION];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint64 accid = 4;
    if (has_accid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->accid());
    }

    // optional string scenename = 5;
    if (has_scenename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scenename());
    }

  }
  // repeated .Cmd.UserProfessionData datas = 6;
  total_size += 1 * this->datas_size();
  for (int i = 0; i < this->datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqUserProfessionCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqUserProfessionCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqUserProfessionCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqUserProfessionCmd::MergeFrom(const ReqUserProfessionCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  datas_.MergeFrom(from.datas_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_accid()) {
      set_accid(from.accid());
    }
    if (from.has_scenename()) {
      set_scenename(from.scenename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqUserProfessionCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqUserProfessionCmd::CopyFrom(const ReqUserProfessionCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqUserProfessionCmd::IsInitialized() const {

  return true;
}

void ReqUserProfessionCmd::Swap(ReqUserProfessionCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(accid_, other->accid_);
    std::swap(scenename_, other->scenename_);
    datas_.Swap(&other->datas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqUserProfessionCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqUserProfessionCmd_descriptor_;
  metadata.reflection = ReqUserProfessionCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProfessionSaveRecordCmd::kCmdFieldNumber;
const int ProfessionSaveRecordCmd::kParamFieldNumber;
const int ProfessionSaveRecordCmd::kCharidFieldNumber;
const int ProfessionSaveRecordCmd::kBranchFieldNumber;
const int ProfessionSaveRecordCmd::kDataFieldNumber;
#endif  // !_MSC_VER

ProfessionSaveRecordCmd::ProfessionSaveRecordCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ProfessionSaveRecordCmd)
}

void ProfessionSaveRecordCmd::InitAsDefaultInstance() {
}

ProfessionSaveRecordCmd::ProfessionSaveRecordCmd(const ProfessionSaveRecordCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ProfessionSaveRecordCmd)
}

void ProfessionSaveRecordCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 200;
  param_ = 22;
  charid_ = GOOGLE_ULONGLONG(0);
  branch_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProfessionSaveRecordCmd::~ProfessionSaveRecordCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ProfessionSaveRecordCmd)
  SharedDtor();
}

void ProfessionSaveRecordCmd::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void ProfessionSaveRecordCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProfessionSaveRecordCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProfessionSaveRecordCmd_descriptor_;
}

const ProfessionSaveRecordCmd& ProfessionSaveRecordCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

ProfessionSaveRecordCmd* ProfessionSaveRecordCmd::default_instance_ = NULL;

ProfessionSaveRecordCmd* ProfessionSaveRecordCmd::New() const {
  return new ProfessionSaveRecordCmd;
}

void ProfessionSaveRecordCmd::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    cmd_ = 200;
    param_ = 22;
    charid_ = GOOGLE_ULONGLONG(0);
    branch_ = 0u;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProfessionSaveRecordCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ProfessionSaveRecordCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_PROFESSION_SAVE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::RecordParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::RecordParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_branch;
        break;
      }

      // optional uint32 branch = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_branch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &branch_)));
          set_has_branch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_data;
        break;
      }

      // optional bytes data = 5;
      case 5: {
        if (tag == 42) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ProfessionSaveRecordCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ProfessionSaveRecordCmd)
  return false;
#undef DO_
}

void ProfessionSaveRecordCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ProfessionSaveRecordCmd)
  // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_PROFESSION_SAVE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional uint32 branch = 4 [default = 0];
  if (has_branch()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->branch(), output);
  }

  // optional bytes data = 5;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ProfessionSaveRecordCmd)
}

::google::protobuf::uint8* ProfessionSaveRecordCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ProfessionSaveRecordCmd)
  // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_PROFESSION_SAVE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional uint32 branch = 4 [default = 0];
  if (has_branch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->branch(), target);
  }

  // optional bytes data = 5;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ProfessionSaveRecordCmd)
  return target;
}

int ProfessionSaveRecordCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_PROFESSION_SAVE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 branch = 4 [default = 0];
    if (has_branch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->branch());
    }

    // optional bytes data = 5;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProfessionSaveRecordCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProfessionSaveRecordCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProfessionSaveRecordCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProfessionSaveRecordCmd::MergeFrom(const ProfessionSaveRecordCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_branch()) {
      set_branch(from.branch());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProfessionSaveRecordCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfessionSaveRecordCmd::CopyFrom(const ProfessionSaveRecordCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfessionSaveRecordCmd::IsInitialized() const {

  return true;
}

void ProfessionSaveRecordCmd::Swap(ProfessionSaveRecordCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(branch_, other->branch_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProfessionSaveRecordCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProfessionSaveRecordCmd_descriptor_;
  metadata.reflection = ProfessionSaveRecordCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProfessionQueryRecordCmd::kCmdFieldNumber;
const int ProfessionQueryRecordCmd::kParamFieldNumber;
const int ProfessionQueryRecordCmd::kCharidFieldNumber;
const int ProfessionQueryRecordCmd::kScenenameFieldNumber;
const int ProfessionQueryRecordCmd::kDatasFieldNumber;
#endif  // !_MSC_VER

ProfessionQueryRecordCmd::ProfessionQueryRecordCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ProfessionQueryRecordCmd)
}

void ProfessionQueryRecordCmd::InitAsDefaultInstance() {
}

ProfessionQueryRecordCmd::ProfessionQueryRecordCmd(const ProfessionQueryRecordCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ProfessionQueryRecordCmd)
}

void ProfessionQueryRecordCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 200;
  param_ = 23;
  charid_ = GOOGLE_ULONGLONG(0);
  scenename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProfessionQueryRecordCmd::~ProfessionQueryRecordCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ProfessionQueryRecordCmd)
  SharedDtor();
}

void ProfessionQueryRecordCmd::SharedDtor() {
  if (scenename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete scenename_;
  }
  if (this != default_instance_) {
  }
}

void ProfessionQueryRecordCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProfessionQueryRecordCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProfessionQueryRecordCmd_descriptor_;
}

const ProfessionQueryRecordCmd& ProfessionQueryRecordCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

ProfessionQueryRecordCmd* ProfessionQueryRecordCmd::default_instance_ = NULL;

ProfessionQueryRecordCmd* ProfessionQueryRecordCmd::New() const {
  return new ProfessionQueryRecordCmd;
}

void ProfessionQueryRecordCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 200;
    param_ = 23;
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_scenename()) {
      if (scenename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        scenename_->clear();
      }
    }
  }
  datas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProfessionQueryRecordCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ProfessionQueryRecordCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_PROFESSION_QUERY];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::RecordParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::RecordParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_scenename;
        break;
      }

      // optional string scenename = 4;
      case 4: {
        if (tag == 34) {
         parse_scenename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scenename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->scenename().data(), this->scenename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "scenename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_datas;
        break;
      }

      // repeated bytes datas = 5;
      case 5: {
        if (tag == 42) {
         parse_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_datas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_datas;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ProfessionQueryRecordCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ProfessionQueryRecordCmd)
  return false;
#undef DO_
}

void ProfessionQueryRecordCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ProfessionQueryRecordCmd)
  // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_PROFESSION_QUERY];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional string scenename = 4;
  if (has_scenename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scenename().data(), this->scenename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "scenename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->scenename(), output);
  }

  // repeated bytes datas = 5;
  for (int i = 0; i < this->datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->datas(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ProfessionQueryRecordCmd)
}

::google::protobuf::uint8* ProfessionQueryRecordCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ProfessionQueryRecordCmd)
  // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_PROFESSION_QUERY];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional string scenename = 4;
  if (has_scenename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scenename().data(), this->scenename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "scenename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->scenename(), target);
  }

  // repeated bytes datas = 5;
  for (int i = 0; i < this->datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(5, this->datas(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ProfessionQueryRecordCmd)
  return target;
}

int ProfessionQueryRecordCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_PROFESSION_QUERY];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional string scenename = 4;
    if (has_scenename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scenename());
    }

  }
  // repeated bytes datas = 5;
  total_size += 1 * this->datas_size();
  for (int i = 0; i < this->datas_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->datas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProfessionQueryRecordCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProfessionQueryRecordCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProfessionQueryRecordCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProfessionQueryRecordCmd::MergeFrom(const ProfessionQueryRecordCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  datas_.MergeFrom(from.datas_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_scenename()) {
      set_scenename(from.scenename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProfessionQueryRecordCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfessionQueryRecordCmd::CopyFrom(const ProfessionQueryRecordCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfessionQueryRecordCmd::IsInitialized() const {

  return true;
}

void ProfessionQueryRecordCmd::Swap(ProfessionQueryRecordCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(scenename_, other->scenename_);
    datas_.Swap(&other->datas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProfessionQueryRecordCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProfessionQueryRecordCmd_descriptor_;
  metadata.reflection = ProfessionQueryRecordCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityQuestItem::kQuestidFieldNumber;
const int ActivityQuestItem::kFinishcountFieldNumber;
const int ActivityQuestItem::kLastquesttimeFieldNumber;
#endif  // !_MSC_VER

ActivityQuestItem::ActivityQuestItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ActivityQuestItem)
}

void ActivityQuestItem::InitAsDefaultInstance() {
}

ActivityQuestItem::ActivityQuestItem(const ActivityQuestItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ActivityQuestItem)
}

void ActivityQuestItem::SharedCtor() {
  _cached_size_ = 0;
  questid_ = 0u;
  finishcount_ = 0u;
  lastquesttime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityQuestItem::~ActivityQuestItem() {
  // @@protoc_insertion_point(destructor:Cmd.ActivityQuestItem)
  SharedDtor();
}

void ActivityQuestItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActivityQuestItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityQuestItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityQuestItem_descriptor_;
}

const ActivityQuestItem& ActivityQuestItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

ActivityQuestItem* ActivityQuestItem::default_instance_ = NULL;

ActivityQuestItem* ActivityQuestItem::New() const {
  return new ActivityQuestItem;
}

void ActivityQuestItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ActivityQuestItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(questid_, lastquesttime_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityQuestItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ActivityQuestItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 questid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &questid_)));
          set_has_questid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_finishcount;
        break;
      }

      // optional uint32 finishcount = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_finishcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &finishcount_)));
          set_has_finishcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_lastquesttime;
        break;
      }

      // optional uint32 lastquesttime = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_lastquesttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastquesttime_)));
          set_has_lastquesttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ActivityQuestItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ActivityQuestItem)
  return false;
#undef DO_
}

void ActivityQuestItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ActivityQuestItem)
  // optional uint32 questid = 1 [default = 0];
  if (has_questid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->questid(), output);
  }

  // optional uint32 finishcount = 2 [default = 0];
  if (has_finishcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->finishcount(), output);
  }

  // optional uint32 lastquesttime = 3 [default = 0];
  if (has_lastquesttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->lastquesttime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ActivityQuestItem)
}

::google::protobuf::uint8* ActivityQuestItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ActivityQuestItem)
  // optional uint32 questid = 1 [default = 0];
  if (has_questid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->questid(), target);
  }

  // optional uint32 finishcount = 2 [default = 0];
  if (has_finishcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->finishcount(), target);
  }

  // optional uint32 lastquesttime = 3 [default = 0];
  if (has_lastquesttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->lastquesttime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ActivityQuestItem)
  return target;
}

int ActivityQuestItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 questid = 1 [default = 0];
    if (has_questid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->questid());
    }

    // optional uint32 finishcount = 2 [default = 0];
    if (has_finishcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->finishcount());
    }

    // optional uint32 lastquesttime = 3 [default = 0];
    if (has_lastquesttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastquesttime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityQuestItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityQuestItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityQuestItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityQuestItem::MergeFrom(const ActivityQuestItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_questid()) {
      set_questid(from.questid());
    }
    if (from.has_finishcount()) {
      set_finishcount(from.finishcount());
    }
    if (from.has_lastquesttime()) {
      set_lastquesttime(from.lastquesttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityQuestItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityQuestItem::CopyFrom(const ActivityQuestItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityQuestItem::IsInitialized() const {

  return true;
}

void ActivityQuestItem::Swap(ActivityQuestItem* other) {
  if (other != this) {
    std::swap(questid_, other->questid_);
    std::swap(finishcount_, other->finishcount_);
    std::swap(lastquesttime_, other->lastquesttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityQuestItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityQuestItem_descriptor_;
  metadata.reflection = ActivityQuestItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobActivityQuest::kActivityitemsFieldNumber;
#endif  // !_MSC_VER

BlobActivityQuest::BlobActivityQuest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobActivityQuest)
}

void BlobActivityQuest::InitAsDefaultInstance() {
}

BlobActivityQuest::BlobActivityQuest(const BlobActivityQuest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobActivityQuest)
}

void BlobActivityQuest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobActivityQuest::~BlobActivityQuest() {
  // @@protoc_insertion_point(destructor:Cmd.BlobActivityQuest)
  SharedDtor();
}

void BlobActivityQuest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobActivityQuest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobActivityQuest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobActivityQuest_descriptor_;
}

const BlobActivityQuest& BlobActivityQuest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobActivityQuest* BlobActivityQuest::default_instance_ = NULL;

BlobActivityQuest* BlobActivityQuest::New() const {
  return new BlobActivityQuest;
}

void BlobActivityQuest::Clear() {
  activityitems_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobActivityQuest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobActivityQuest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Cmd.ActivityQuestItem activityitems = 1;
      case 1: {
        if (tag == 10) {
         parse_activityitems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_activityitems()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_activityitems;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobActivityQuest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobActivityQuest)
  return false;
#undef DO_
}

void BlobActivityQuest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobActivityQuest)
  // repeated .Cmd.ActivityQuestItem activityitems = 1;
  for (int i = 0; i < this->activityitems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->activityitems(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobActivityQuest)
}

::google::protobuf::uint8* BlobActivityQuest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobActivityQuest)
  // repeated .Cmd.ActivityQuestItem activityitems = 1;
  for (int i = 0; i < this->activityitems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->activityitems(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobActivityQuest)
  return target;
}

int BlobActivityQuest::ByteSize() const {
  int total_size = 0;

  // repeated .Cmd.ActivityQuestItem activityitems = 1;
  total_size += 1 * this->activityitems_size();
  for (int i = 0; i < this->activityitems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->activityitems(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobActivityQuest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobActivityQuest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobActivityQuest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobActivityQuest::MergeFrom(const BlobActivityQuest& from) {
  GOOGLE_CHECK_NE(&from, this);
  activityitems_.MergeFrom(from.activityitems_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobActivityQuest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobActivityQuest::CopyFrom(const BlobActivityQuest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobActivityQuest::IsInitialized() const {

  return true;
}

void BlobActivityQuest::Swap(BlobActivityQuest* other) {
  if (other != this) {
    activityitems_.Swap(&other->activityitems_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobActivityQuest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobActivityQuest_descriptor_;
  metadata.reflection = BlobActivityQuest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobBooth::kScoreFieldNumber;
#endif  // !_MSC_VER

BlobBooth::BlobBooth()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobBooth)
}

void BlobBooth::InitAsDefaultInstance() {
}

BlobBooth::BlobBooth(const BlobBooth& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobBooth)
}

void BlobBooth::SharedCtor() {
  _cached_size_ = 0;
  score_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobBooth::~BlobBooth() {
  // @@protoc_insertion_point(destructor:Cmd.BlobBooth)
  SharedDtor();
}

void BlobBooth::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobBooth::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobBooth::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobBooth_descriptor_;
}

const BlobBooth& BlobBooth::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobBooth* BlobBooth::default_instance_ = NULL;

BlobBooth* BlobBooth::New() const {
  return new BlobBooth;
}

void BlobBooth::Clear() {
  score_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobBooth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobBooth)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 score = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobBooth)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobBooth)
  return false;
#undef DO_
}

void BlobBooth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobBooth)
  // optional uint32 score = 1;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobBooth)
}

::google::protobuf::uint8* BlobBooth::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobBooth)
  // optional uint32 score = 1;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobBooth)
  return target;
}

int BlobBooth::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 score = 1;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobBooth::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobBooth* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobBooth*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobBooth::MergeFrom(const BlobBooth& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobBooth::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobBooth::CopyFrom(const BlobBooth& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobBooth::IsInitialized() const {

  return true;
}

void BlobBooth::Swap(BlobBooth* other) {
  if (other != this) {
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobBooth::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobBooth_descriptor_;
  metadata.reflection = BlobBooth_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobElementElfData::kCurElementIdFieldNumber;
const int BlobElementElfData::kClearTimeFieldNumber;
#endif  // !_MSC_VER

BlobElementElfData::BlobElementElfData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BlobElementElfData)
}

void BlobElementElfData::InitAsDefaultInstance() {
}

BlobElementElfData::BlobElementElfData(const BlobElementElfData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BlobElementElfData)
}

void BlobElementElfData::SharedCtor() {
  _cached_size_ = 0;
  cur_element_id_ = 0u;
  clear_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobElementElfData::~BlobElementElfData() {
  // @@protoc_insertion_point(destructor:Cmd.BlobElementElfData)
  SharedDtor();
}

void BlobElementElfData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlobElementElfData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobElementElfData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobElementElfData_descriptor_;
}

const BlobElementElfData& BlobElementElfData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

BlobElementElfData* BlobElementElfData::default_instance_ = NULL;

BlobElementElfData* BlobElementElfData::New() const {
  return new BlobElementElfData;
}

void BlobElementElfData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BlobElementElfData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(cur_element_id_, clear_time_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobElementElfData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BlobElementElfData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cur_element_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_element_id_)));
          set_has_cur_element_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_clear_time;
        break;
      }

      // optional uint32 clear_time = 2;
      case 2: {
        if (tag == 16) {
         parse_clear_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clear_time_)));
          set_has_clear_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BlobElementElfData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BlobElementElfData)
  return false;
#undef DO_
}

void BlobElementElfData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BlobElementElfData)
  // optional uint32 cur_element_id = 1;
  if (has_cur_element_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cur_element_id(), output);
  }

  // optional uint32 clear_time = 2;
  if (has_clear_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->clear_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BlobElementElfData)
}

::google::protobuf::uint8* BlobElementElfData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BlobElementElfData)
  // optional uint32 cur_element_id = 1;
  if (has_cur_element_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cur_element_id(), target);
  }

  // optional uint32 clear_time = 2;
  if (has_clear_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->clear_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BlobElementElfData)
  return target;
}

int BlobElementElfData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 cur_element_id = 1;
    if (has_cur_element_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_element_id());
    }

    // optional uint32 clear_time = 2;
    if (has_clear_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clear_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobElementElfData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobElementElfData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobElementElfData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobElementElfData::MergeFrom(const BlobElementElfData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cur_element_id()) {
      set_cur_element_id(from.cur_element_id());
    }
    if (from.has_clear_time()) {
      set_clear_time(from.clear_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobElementElfData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobElementElfData::CopyFrom(const BlobElementElfData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobElementElfData::IsInitialized() const {

  return true;
}

void BlobElementElfData::Swap(BlobElementElfData* other) {
  if (other != this) {
    std::swap(cur_element_id_, other->cur_element_id_);
    std::swap(clear_time_, other->clear_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobElementElfData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobElementElfData_descriptor_;
  metadata.reflection = BlobElementElfData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CheatTagRecordCmd::kCmdFieldNumber;
const int CheatTagRecordCmd::kParamFieldNumber;
const int CheatTagRecordCmd::kCharidFieldNumber;
const int CheatTagRecordCmd::kMinintervalFieldNumber;
const int CheatTagRecordCmd::kFrameFieldNumber;
const int CheatTagRecordCmd::kCountFieldNumber;
#endif  // !_MSC_VER

CheatTagRecordCmd::CheatTagRecordCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.CheatTagRecordCmd)
}

void CheatTagRecordCmd::InitAsDefaultInstance() {
}

CheatTagRecordCmd::CheatTagRecordCmd(const CheatTagRecordCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.CheatTagRecordCmd)
}

void CheatTagRecordCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 200;
  param_ = 24;
  charid_ = GOOGLE_ULONGLONG(0);
  mininterval_ = 0u;
  frame_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CheatTagRecordCmd::~CheatTagRecordCmd() {
  // @@protoc_insertion_point(destructor:Cmd.CheatTagRecordCmd)
  SharedDtor();
}

void CheatTagRecordCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CheatTagRecordCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheatTagRecordCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheatTagRecordCmd_descriptor_;
}

const CheatTagRecordCmd& CheatTagRecordCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

CheatTagRecordCmd* CheatTagRecordCmd::default_instance_ = NULL;

CheatTagRecordCmd* CheatTagRecordCmd::New() const {
  return new CheatTagRecordCmd;
}

void CheatTagRecordCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CheatTagRecordCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(charid_, count_);
    cmd_ = 200;
    param_ = 24;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CheatTagRecordCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.CheatTagRecordCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_CHEAT_TAG];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::RecordParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::RecordParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_mininterval;
        break;
      }

      // optional uint32 mininterval = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_mininterval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mininterval_)));
          set_has_mininterval();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_frame;
        break;
      }

      // optional uint32 frame = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_frame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frame_)));
          set_has_frame();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_count;
        break;
      }

      // optional uint32 count = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.CheatTagRecordCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.CheatTagRecordCmd)
  return false;
#undef DO_
}

void CheatTagRecordCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.CheatTagRecordCmd)
  // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_CHEAT_TAG];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional uint32 mininterval = 4 [default = 0];
  if (has_mininterval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->mininterval(), output);
  }

  // optional uint32 frame = 5 [default = 0];
  if (has_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->frame(), output);
  }

  // optional uint32 count = 6 [default = 0];
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.CheatTagRecordCmd)
}

::google::protobuf::uint8* CheatTagRecordCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.CheatTagRecordCmd)
  // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_CHEAT_TAG];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional uint32 mininterval = 4 [default = 0];
  if (has_mininterval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->mininterval(), target);
  }

  // optional uint32 frame = 5 [default = 0];
  if (has_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->frame(), target);
  }

  // optional uint32 count = 6 [default = 0];
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.CheatTagRecordCmd)
  return target;
}

int CheatTagRecordCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_CHEAT_TAG];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 mininterval = 4 [default = 0];
    if (has_mininterval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mininterval());
    }

    // optional uint32 frame = 5 [default = 0];
    if (has_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->frame());
    }

    // optional uint32 count = 6 [default = 0];
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheatTagRecordCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CheatTagRecordCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CheatTagRecordCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CheatTagRecordCmd::MergeFrom(const CheatTagRecordCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_mininterval()) {
      set_mininterval(from.mininterval());
    }
    if (from.has_frame()) {
      set_frame(from.frame());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CheatTagRecordCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheatTagRecordCmd::CopyFrom(const CheatTagRecordCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheatTagRecordCmd::IsInitialized() const {

  return true;
}

void CheatTagRecordCmd::Swap(CheatTagRecordCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(mininterval_, other->mininterval_);
    std::swap(frame_, other->frame_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CheatTagRecordCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CheatTagRecordCmd_descriptor_;
  metadata.reflection = CheatTagRecordCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CheatTagQueryRecordCmd::kCmdFieldNumber;
const int CheatTagQueryRecordCmd::kParamFieldNumber;
const int CheatTagQueryRecordCmd::kCharidFieldNumber;
const int CheatTagQueryRecordCmd::kScenenameFieldNumber;
#endif  // !_MSC_VER

CheatTagQueryRecordCmd::CheatTagQueryRecordCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.CheatTagQueryRecordCmd)
}

void CheatTagQueryRecordCmd::InitAsDefaultInstance() {
}

CheatTagQueryRecordCmd::CheatTagQueryRecordCmd(const CheatTagQueryRecordCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.CheatTagQueryRecordCmd)
}

void CheatTagQueryRecordCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 200;
  param_ = 25;
  charid_ = GOOGLE_ULONGLONG(0);
  scenename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CheatTagQueryRecordCmd::~CheatTagQueryRecordCmd() {
  // @@protoc_insertion_point(destructor:Cmd.CheatTagQueryRecordCmd)
  SharedDtor();
}

void CheatTagQueryRecordCmd::SharedDtor() {
  if (scenename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete scenename_;
  }
  if (this != default_instance_) {
  }
}

void CheatTagQueryRecordCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheatTagQueryRecordCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheatTagQueryRecordCmd_descriptor_;
}

const CheatTagQueryRecordCmd& CheatTagQueryRecordCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecordCmd_2eproto();
  return *default_instance_;
}

CheatTagQueryRecordCmd* CheatTagQueryRecordCmd::default_instance_ = NULL;

CheatTagQueryRecordCmd* CheatTagQueryRecordCmd::New() const {
  return new CheatTagQueryRecordCmd;
}

void CheatTagQueryRecordCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 200;
    param_ = 25;
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_scenename()) {
      if (scenename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        scenename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CheatTagQueryRecordCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.CheatTagQueryRecordCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_CHEAT_TAG_QUERY];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::RecordParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::RecordParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_scenename;
        break;
      }

      // optional string scenename = 4;
      case 4: {
        if (tag == 34) {
         parse_scenename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scenename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->scenename().data(), this->scenename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "scenename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.CheatTagQueryRecordCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.CheatTagQueryRecordCmd)
  return false;
#undef DO_
}

void CheatTagQueryRecordCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.CheatTagQueryRecordCmd)
  // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_CHEAT_TAG_QUERY];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional string scenename = 4;
  if (has_scenename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scenename().data(), this->scenename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "scenename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->scenename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.CheatTagQueryRecordCmd)
}

::google::protobuf::uint8* CheatTagQueryRecordCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.CheatTagQueryRecordCmd)
  // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_CHEAT_TAG_QUERY];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional string scenename = 4;
  if (has_scenename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scenename().data(), this->scenename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "scenename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->scenename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.CheatTagQueryRecordCmd)
  return target;
}

int CheatTagQueryRecordCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = RECORD_DATA_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.RecordParam param = 2 [default = RECORDPARAM_CHEAT_TAG_QUERY];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional string scenename = 4;
    if (has_scenename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scenename());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheatTagQueryRecordCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CheatTagQueryRecordCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CheatTagQueryRecordCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CheatTagQueryRecordCmd::MergeFrom(const CheatTagQueryRecordCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_scenename()) {
      set_scenename(from.scenename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CheatTagQueryRecordCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheatTagQueryRecordCmd::CopyFrom(const CheatTagQueryRecordCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheatTagQueryRecordCmd::IsInitialized() const {

  return true;
}

void CheatTagQueryRecordCmd::Swap(CheatTagQueryRecordCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(scenename_, other->scenename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CheatTagQueryRecordCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CheatTagQueryRecordCmd_descriptor_;
  metadata.reflection = CheatTagQueryRecordCmd_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

// @@protoc_insertion_point(global_scope)
