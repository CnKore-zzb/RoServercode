// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FuBenCmd.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "FuBenCmd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Cmd {

namespace {

const ::google::protobuf::Descriptor* TrackData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrackData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaidPConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaidPConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrackFuBenUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrackFuBenUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* FailFuBenUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FailFuBenUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* LeaveFuBenUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LeaveFuBenUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* SuccessFuBenUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SuccessFuBenUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldStageItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldStageItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* StageStepItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StageStepItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldStageUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldStageUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* StageNormalStepItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StageNormalStepItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* StageHardStepItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StageHardStepItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* StageStepUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StageStepUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* StartStageUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StartStageUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetRewardStageUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetRewardStageUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* StageStepStarUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StageStepStarUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* MonsterCountUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MonsterCountUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* FubenStepSyncCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FubenStepSyncCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* FuBenProgressSyncCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FuBenProgressSyncCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* FuBenClearInfoCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FuBenClearInfoCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildGateData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildGateData_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserGuildRaidFubenCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserGuildRaidFubenCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildGateOptCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildGateOptCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildFireInfoFubenCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildFireInfoFubenCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildFireStopFubenCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildFireStopFubenCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildFireDangerFubenCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildFireDangerFubenCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildFireMetalHpFubenCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildFireMetalHpFubenCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildFireCalmFubenCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildFireCalmFubenCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildFireNewDefFubenCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildFireNewDefFubenCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildFireRestartFubenCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildFireRestartFubenCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildFireStatusFubenCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildFireStatusFubenCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GvgData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GvgData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GvgDataSyncCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GvgDataSyncCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GvgDataUpdateCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GvgDataUpdateCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GvgDefNameChangeFubenCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GvgDefNameChangeFubenCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* SyncMvpInfoFubenCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncMvpInfoFubenCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* BossDieFubenCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BossDieFubenCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateUserNumFubenCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateUserNumFubenCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GvgTowerValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GvgTowerValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* GvgTowerData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GvgTowerData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GvgCrystalInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GvgCrystalInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GvgGuildInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GvgGuildInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SuperGvgSyncFubenCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SuperGvgSyncFubenCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GvgTowerUpdateFubenCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GvgTowerUpdateFubenCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GvgMetalDieFubenCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GvgMetalDieFubenCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GvgCrystalUpdateFubenCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GvgCrystalUpdateFubenCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryGvgTowerInfoFubenCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryGvgTowerInfoFubenCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* RewardItemData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RewardItemData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SuperGvgRewardData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SuperGvgRewardData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SuperGvgRewardInfoFubenCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SuperGvgRewardInfoFubenCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* SuperGvgUserData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SuperGvgUserData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SuperGvgGuildUserData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SuperGvgGuildUserData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SuperGvgQueryUserDataFubenCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SuperGvgQueryUserDataFubenCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* MvpBattleTeamData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MvpBattleTeamData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MvpBattleReportFubenCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MvpBattleReportFubenCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamPwsRaidUserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamPwsRaidUserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamPwsRaidTeamInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamPwsRaidTeamInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryTeamPwsUserInfoFubenCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryTeamPwsUserInfoFubenCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamPwsReportFubenCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamPwsReportFubenCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamPwsInfoSyncData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamPwsInfoSyncData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamPwsInfoSyncFubenCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamPwsInfoSyncFubenCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateTeamPwsInfoFubenCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateTeamPwsInfoFubenCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* SelectTeamPwsMagicFubenCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SelectTeamPwsMagicFubenCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* InviteSummonBossFubenCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InviteSummonBossFubenCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplySummonBossFubenCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplySummonBossFubenCmd_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* FuBenParam_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ERaidType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EGuildGateState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EGuildGateOpt_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EGuildFireResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EGvgDataType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EGvgTowerState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EGvgTowerType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ETeamPwsColor_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EMagicBallType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_FuBenCmd_2eproto() {
  protobuf_AddDesc_FuBenCmd_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "FuBenCmd.proto");
  GOOGLE_CHECK(file != NULL);
  TrackData_descriptor_ = file->message_type(0);
  static const int TrackData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackData, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackData, id_),
  };
  TrackData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrackData_descriptor_,
      TrackData::default_instance_,
      TrackData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrackData));
  RaidPConfig_descriptor_ = file->message_type(1);
  static const int RaidPConfig_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaidPConfig, raidid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaidPConfig, starid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaidPConfig, auto__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaidPConfig, whethertrace_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaidPConfig, descinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaidPConfig, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaidPConfig, traceinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaidPConfig, params_),
  };
  RaidPConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RaidPConfig_descriptor_,
      RaidPConfig::default_instance_,
      RaidPConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaidPConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaidPConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RaidPConfig));
  TrackFuBenUserCmd_descriptor_ = file->message_type(2);
  static const int TrackFuBenUserCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackFuBenUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackFuBenUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackFuBenUserCmd, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackFuBenUserCmd, dmapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackFuBenUserCmd, endtime_),
  };
  TrackFuBenUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrackFuBenUserCmd_descriptor_,
      TrackFuBenUserCmd::default_instance_,
      TrackFuBenUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackFuBenUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackFuBenUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrackFuBenUserCmd));
  FailFuBenUserCmd_descriptor_ = file->message_type(3);
  static const int FailFuBenUserCmd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FailFuBenUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FailFuBenUserCmd, param_),
  };
  FailFuBenUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FailFuBenUserCmd_descriptor_,
      FailFuBenUserCmd::default_instance_,
      FailFuBenUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FailFuBenUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FailFuBenUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FailFuBenUserCmd));
  LeaveFuBenUserCmd_descriptor_ = file->message_type(4);
  static const int LeaveFuBenUserCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveFuBenUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveFuBenUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveFuBenUserCmd, mapid_),
  };
  LeaveFuBenUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LeaveFuBenUserCmd_descriptor_,
      LeaveFuBenUserCmd::default_instance_,
      LeaveFuBenUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveFuBenUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveFuBenUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LeaveFuBenUserCmd));
  SuccessFuBenUserCmd_descriptor_ = file->message_type(5);
  static const int SuccessFuBenUserCmd_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuccessFuBenUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuccessFuBenUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuccessFuBenUserCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuccessFuBenUserCmd, param1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuccessFuBenUserCmd, param2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuccessFuBenUserCmd, param3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuccessFuBenUserCmd, param4_),
  };
  SuccessFuBenUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SuccessFuBenUserCmd_descriptor_,
      SuccessFuBenUserCmd::default_instance_,
      SuccessFuBenUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuccessFuBenUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuccessFuBenUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SuccessFuBenUserCmd));
  WorldStageItem_descriptor_ = file->message_type(6);
  static const int WorldStageItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStageItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStageItem, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStageItem, getlist_),
  };
  WorldStageItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldStageItem_descriptor_,
      WorldStageItem::default_instance_,
      WorldStageItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStageItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStageItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldStageItem));
  StageStepItem_descriptor_ = file->message_type(7);
  static const int StageStepItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageStepItem, stageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageStepItem, stepid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageStepItem, type_),
  };
  StageStepItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StageStepItem_descriptor_,
      StageStepItem::default_instance_,
      StageStepItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageStepItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageStepItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StageStepItem));
  WorldStageUserCmd_descriptor_ = file->message_type(8);
  static const int WorldStageUserCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStageUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStageUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStageUserCmd, list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStageUserCmd, curinfo_),
  };
  WorldStageUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldStageUserCmd_descriptor_,
      WorldStageUserCmd::default_instance_,
      WorldStageUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStageUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStageUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldStageUserCmd));
  StageNormalStepItem_descriptor_ = file->message_type(9);
  static const int StageNormalStepItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageNormalStepItem, stepid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageNormalStepItem, star_),
  };
  StageNormalStepItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StageNormalStepItem_descriptor_,
      StageNormalStepItem::default_instance_,
      StageNormalStepItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageNormalStepItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageNormalStepItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StageNormalStepItem));
  StageHardStepItem_descriptor_ = file->message_type(10);
  static const int StageHardStepItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageHardStepItem, stepid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageHardStepItem, finish_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageHardStepItem, challengetime_),
  };
  StageHardStepItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StageHardStepItem_descriptor_,
      StageHardStepItem::default_instance_,
      StageHardStepItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageHardStepItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageHardStepItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StageHardStepItem));
  StageStepUserCmd_descriptor_ = file->message_type(11);
  static const int StageStepUserCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageStepUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageStepUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageStepUserCmd, stageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageStepUserCmd, normalist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageStepUserCmd, hardlist_),
  };
  StageStepUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StageStepUserCmd_descriptor_,
      StageStepUserCmd::default_instance_,
      StageStepUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageStepUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageStepUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StageStepUserCmd));
  StartStageUserCmd_descriptor_ = file->message_type(12);
  static const int StartStageUserCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartStageUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartStageUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartStageUserCmd, stageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartStageUserCmd, stepid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartStageUserCmd, type_),
  };
  StartStageUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StartStageUserCmd_descriptor_,
      StartStageUserCmd::default_instance_,
      StartStageUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartStageUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartStageUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StartStageUserCmd));
  GetRewardStageUserCmd_descriptor_ = file->message_type(13);
  static const int GetRewardStageUserCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRewardStageUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRewardStageUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRewardStageUserCmd, stageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRewardStageUserCmd, starid_),
  };
  GetRewardStageUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetRewardStageUserCmd_descriptor_,
      GetRewardStageUserCmd::default_instance_,
      GetRewardStageUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRewardStageUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRewardStageUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetRewardStageUserCmd));
  StageStepStarUserCmd_descriptor_ = file->message_type(14);
  static const int StageStepStarUserCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageStepStarUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageStepStarUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageStepStarUserCmd, stageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageStepStarUserCmd, stepid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageStepStarUserCmd, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageStepStarUserCmd, type_),
  };
  StageStepStarUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StageStepStarUserCmd_descriptor_,
      StageStepStarUserCmd::default_instance_,
      StageStepStarUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageStepStarUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageStepStarUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StageStepStarUserCmd));
  MonsterCountUserCmd_descriptor_ = file->message_type(15);
  static const int MonsterCountUserCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterCountUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterCountUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterCountUserCmd, num_),
  };
  MonsterCountUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MonsterCountUserCmd_descriptor_,
      MonsterCountUserCmd::default_instance_,
      MonsterCountUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterCountUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterCountUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MonsterCountUserCmd));
  FubenStepSyncCmd_descriptor_ = file->message_type(16);
  static const int FubenStepSyncCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FubenStepSyncCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FubenStepSyncCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FubenStepSyncCmd, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FubenStepSyncCmd, del_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FubenStepSyncCmd, config_),
  };
  FubenStepSyncCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FubenStepSyncCmd_descriptor_,
      FubenStepSyncCmd::default_instance_,
      FubenStepSyncCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FubenStepSyncCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FubenStepSyncCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FubenStepSyncCmd));
  FuBenProgressSyncCmd_descriptor_ = file->message_type(17);
  static const int FuBenProgressSyncCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuBenProgressSyncCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuBenProgressSyncCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuBenProgressSyncCmd, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuBenProgressSyncCmd, progress_),
  };
  FuBenProgressSyncCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FuBenProgressSyncCmd_descriptor_,
      FuBenProgressSyncCmd::default_instance_,
      FuBenProgressSyncCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuBenProgressSyncCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuBenProgressSyncCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FuBenProgressSyncCmd));
  FuBenClearInfoCmd_descriptor_ = file->message_type(18);
  static const int FuBenClearInfoCmd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuBenClearInfoCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuBenClearInfoCmd, param_),
  };
  FuBenClearInfoCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FuBenClearInfoCmd_descriptor_,
      FuBenClearInfoCmd::default_instance_,
      FuBenClearInfoCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuBenClearInfoCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuBenClearInfoCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FuBenClearInfoCmd));
  GuildGateData_descriptor_ = file->message_type(19);
  static const int GuildGateData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildGateData, gatenpcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildGateData, killedbossnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildGateData, groupindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildGateData, closetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildGateData, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildGateData, isspecial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildGateData, state_),
  };
  GuildGateData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildGateData_descriptor_,
      GuildGateData::default_instance_,
      GuildGateData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildGateData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildGateData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildGateData));
  UserGuildRaidFubenCmd_descriptor_ = file->message_type(20);
  static const int UserGuildRaidFubenCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGuildRaidFubenCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGuildRaidFubenCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGuildRaidFubenCmd, gatedata_),
  };
  UserGuildRaidFubenCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserGuildRaidFubenCmd_descriptor_,
      UserGuildRaidFubenCmd::default_instance_,
      UserGuildRaidFubenCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGuildRaidFubenCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGuildRaidFubenCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserGuildRaidFubenCmd));
  GuildGateOptCmd_descriptor_ = file->message_type(21);
  static const int GuildGateOptCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildGateOptCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildGateOptCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildGateOptCmd, gatenpcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildGateOptCmd, opt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildGateOptCmd, uplocklevel_),
  };
  GuildGateOptCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildGateOptCmd_descriptor_,
      GuildGateOptCmd::default_instance_,
      GuildGateOptCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildGateOptCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildGateOptCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildGateOptCmd));
  GuildFireInfoFubenCmd_descriptor_ = file->message_type(22);
  static const int GuildFireInfoFubenCmd_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildFireInfoFubenCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildFireInfoFubenCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildFireInfoFubenCmd, fire_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildFireInfoFubenCmd, def_guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildFireInfoFubenCmd, endfire_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildFireInfoFubenCmd, danger_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildFireInfoFubenCmd, danger_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildFireInfoFubenCmd, metal_hpper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildFireInfoFubenCmd, calmdown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildFireInfoFubenCmd, calm_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildFireInfoFubenCmd, def_guildname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildFireInfoFubenCmd, def_perfect_),
  };
  GuildFireInfoFubenCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildFireInfoFubenCmd_descriptor_,
      GuildFireInfoFubenCmd::default_instance_,
      GuildFireInfoFubenCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildFireInfoFubenCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildFireInfoFubenCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildFireInfoFubenCmd));
  GuildFireStopFubenCmd_descriptor_ = file->message_type(23);
  static const int GuildFireStopFubenCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildFireStopFubenCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildFireStopFubenCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildFireStopFubenCmd, result_),
  };
  GuildFireStopFubenCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildFireStopFubenCmd_descriptor_,
      GuildFireStopFubenCmd::default_instance_,
      GuildFireStopFubenCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildFireStopFubenCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildFireStopFubenCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildFireStopFubenCmd));
  GuildFireDangerFubenCmd_descriptor_ = file->message_type(24);
  static const int GuildFireDangerFubenCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildFireDangerFubenCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildFireDangerFubenCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildFireDangerFubenCmd, danger_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildFireDangerFubenCmd, danger_time_),
  };
  GuildFireDangerFubenCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildFireDangerFubenCmd_descriptor_,
      GuildFireDangerFubenCmd::default_instance_,
      GuildFireDangerFubenCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildFireDangerFubenCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildFireDangerFubenCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildFireDangerFubenCmd));
  GuildFireMetalHpFubenCmd_descriptor_ = file->message_type(25);
  static const int GuildFireMetalHpFubenCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildFireMetalHpFubenCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildFireMetalHpFubenCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildFireMetalHpFubenCmd, hpper_),
  };
  GuildFireMetalHpFubenCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildFireMetalHpFubenCmd_descriptor_,
      GuildFireMetalHpFubenCmd::default_instance_,
      GuildFireMetalHpFubenCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildFireMetalHpFubenCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildFireMetalHpFubenCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildFireMetalHpFubenCmd));
  GuildFireCalmFubenCmd_descriptor_ = file->message_type(26);
  static const int GuildFireCalmFubenCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildFireCalmFubenCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildFireCalmFubenCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildFireCalmFubenCmd, calm_),
  };
  GuildFireCalmFubenCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildFireCalmFubenCmd_descriptor_,
      GuildFireCalmFubenCmd::default_instance_,
      GuildFireCalmFubenCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildFireCalmFubenCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildFireCalmFubenCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildFireCalmFubenCmd));
  GuildFireNewDefFubenCmd_descriptor_ = file->message_type(27);
  static const int GuildFireNewDefFubenCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildFireNewDefFubenCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildFireNewDefFubenCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildFireNewDefFubenCmd, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildFireNewDefFubenCmd, guildname_),
  };
  GuildFireNewDefFubenCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildFireNewDefFubenCmd_descriptor_,
      GuildFireNewDefFubenCmd::default_instance_,
      GuildFireNewDefFubenCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildFireNewDefFubenCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildFireNewDefFubenCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildFireNewDefFubenCmd));
  GuildFireRestartFubenCmd_descriptor_ = file->message_type(28);
  static const int GuildFireRestartFubenCmd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildFireRestartFubenCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildFireRestartFubenCmd, param_),
  };
  GuildFireRestartFubenCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildFireRestartFubenCmd_descriptor_,
      GuildFireRestartFubenCmd::default_instance_,
      GuildFireRestartFubenCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildFireRestartFubenCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildFireRestartFubenCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildFireRestartFubenCmd));
  GuildFireStatusFubenCmd_descriptor_ = file->message_type(29);
  static const int GuildFireStatusFubenCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildFireStatusFubenCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildFireStatusFubenCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildFireStatusFubenCmd, open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildFireStatusFubenCmd, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildFireStatusFubenCmd, cityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildFireStatusFubenCmd, cityopen_),
  };
  GuildFireStatusFubenCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildFireStatusFubenCmd_descriptor_,
      GuildFireStatusFubenCmd::default_instance_,
      GuildFireStatusFubenCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildFireStatusFubenCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildFireStatusFubenCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildFireStatusFubenCmd));
  GvgData_descriptor_ = file->message_type(30);
  static const int GvgData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GvgData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GvgData, value_),
  };
  GvgData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GvgData_descriptor_,
      GvgData::default_instance_,
      GvgData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GvgData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GvgData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GvgData));
  GvgDataSyncCmd_descriptor_ = file->message_type(31);
  static const int GvgDataSyncCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GvgDataSyncCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GvgDataSyncCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GvgDataSyncCmd, datas_),
  };
  GvgDataSyncCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GvgDataSyncCmd_descriptor_,
      GvgDataSyncCmd::default_instance_,
      GvgDataSyncCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GvgDataSyncCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GvgDataSyncCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GvgDataSyncCmd));
  GvgDataUpdateCmd_descriptor_ = file->message_type(32);
  static const int GvgDataUpdateCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GvgDataUpdateCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GvgDataUpdateCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GvgDataUpdateCmd, data_),
  };
  GvgDataUpdateCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GvgDataUpdateCmd_descriptor_,
      GvgDataUpdateCmd::default_instance_,
      GvgDataUpdateCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GvgDataUpdateCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GvgDataUpdateCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GvgDataUpdateCmd));
  GvgDefNameChangeFubenCmd_descriptor_ = file->message_type(33);
  static const int GvgDefNameChangeFubenCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GvgDefNameChangeFubenCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GvgDefNameChangeFubenCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GvgDefNameChangeFubenCmd, newname_),
  };
  GvgDefNameChangeFubenCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GvgDefNameChangeFubenCmd_descriptor_,
      GvgDefNameChangeFubenCmd::default_instance_,
      GvgDefNameChangeFubenCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GvgDefNameChangeFubenCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GvgDefNameChangeFubenCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GvgDefNameChangeFubenCmd));
  SyncMvpInfoFubenCmd_descriptor_ = file->message_type(34);
  static const int SyncMvpInfoFubenCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncMvpInfoFubenCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncMvpInfoFubenCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncMvpInfoFubenCmd, usernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncMvpInfoFubenCmd, liveboss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncMvpInfoFubenCmd, dieboss_),
  };
  SyncMvpInfoFubenCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SyncMvpInfoFubenCmd_descriptor_,
      SyncMvpInfoFubenCmd::default_instance_,
      SyncMvpInfoFubenCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncMvpInfoFubenCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncMvpInfoFubenCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SyncMvpInfoFubenCmd));
  BossDieFubenCmd_descriptor_ = file->message_type(35);
  static const int BossDieFubenCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDieFubenCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDieFubenCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDieFubenCmd, npcid_),
  };
  BossDieFubenCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BossDieFubenCmd_descriptor_,
      BossDieFubenCmd::default_instance_,
      BossDieFubenCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDieFubenCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDieFubenCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BossDieFubenCmd));
  UpdateUserNumFubenCmd_descriptor_ = file->message_type(36);
  static const int UpdateUserNumFubenCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserNumFubenCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserNumFubenCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserNumFubenCmd, usernum_),
  };
  UpdateUserNumFubenCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateUserNumFubenCmd_descriptor_,
      UpdateUserNumFubenCmd::default_instance_,
      UpdateUserNumFubenCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserNumFubenCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserNumFubenCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateUserNumFubenCmd));
  GvgTowerValue_descriptor_ = file->message_type(37);
  static const int GvgTowerValue_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GvgTowerValue, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GvgTowerValue, value_),
  };
  GvgTowerValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GvgTowerValue_descriptor_,
      GvgTowerValue::default_instance_,
      GvgTowerValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GvgTowerValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GvgTowerValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GvgTowerValue));
  GvgTowerData_descriptor_ = file->message_type(38);
  static const int GvgTowerData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GvgTowerData, etype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GvgTowerData, estate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GvgTowerData, owner_guild_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GvgTowerData, info_),
  };
  GvgTowerData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GvgTowerData_descriptor_,
      GvgTowerData::default_instance_,
      GvgTowerData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GvgTowerData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GvgTowerData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GvgTowerData));
  GvgCrystalInfo_descriptor_ = file->message_type(39);
  static const int GvgCrystalInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GvgCrystalInfo, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GvgCrystalInfo, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GvgCrystalInfo, crystalnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GvgCrystalInfo, chipnum_),
  };
  GvgCrystalInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GvgCrystalInfo_descriptor_,
      GvgCrystalInfo::default_instance_,
      GvgCrystalInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GvgCrystalInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GvgCrystalInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GvgCrystalInfo));
  GvgGuildInfo_descriptor_ = file->message_type(40);
  static const int GvgGuildInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GvgGuildInfo, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GvgGuildInfo, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GvgGuildInfo, guildname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GvgGuildInfo, icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GvgGuildInfo, metal_live_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GvgGuildInfo, crystal_),
  };
  GvgGuildInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GvgGuildInfo_descriptor_,
      GvgGuildInfo::default_instance_,
      GvgGuildInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GvgGuildInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GvgGuildInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GvgGuildInfo));
  SuperGvgSyncFubenCmd_descriptor_ = file->message_type(41);
  static const int SuperGvgSyncFubenCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperGvgSyncFubenCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperGvgSyncFubenCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperGvgSyncFubenCmd, towers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperGvgSyncFubenCmd, guildinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperGvgSyncFubenCmd, firebegintime_),
  };
  SuperGvgSyncFubenCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SuperGvgSyncFubenCmd_descriptor_,
      SuperGvgSyncFubenCmd::default_instance_,
      SuperGvgSyncFubenCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperGvgSyncFubenCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperGvgSyncFubenCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SuperGvgSyncFubenCmd));
  GvgTowerUpdateFubenCmd_descriptor_ = file->message_type(42);
  static const int GvgTowerUpdateFubenCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GvgTowerUpdateFubenCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GvgTowerUpdateFubenCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GvgTowerUpdateFubenCmd, towers_),
  };
  GvgTowerUpdateFubenCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GvgTowerUpdateFubenCmd_descriptor_,
      GvgTowerUpdateFubenCmd::default_instance_,
      GvgTowerUpdateFubenCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GvgTowerUpdateFubenCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GvgTowerUpdateFubenCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GvgTowerUpdateFubenCmd));
  GvgMetalDieFubenCmd_descriptor_ = file->message_type(43);
  static const int GvgMetalDieFubenCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GvgMetalDieFubenCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GvgMetalDieFubenCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GvgMetalDieFubenCmd, index_),
  };
  GvgMetalDieFubenCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GvgMetalDieFubenCmd_descriptor_,
      GvgMetalDieFubenCmd::default_instance_,
      GvgMetalDieFubenCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GvgMetalDieFubenCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GvgMetalDieFubenCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GvgMetalDieFubenCmd));
  GvgCrystalUpdateFubenCmd_descriptor_ = file->message_type(44);
  static const int GvgCrystalUpdateFubenCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GvgCrystalUpdateFubenCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GvgCrystalUpdateFubenCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GvgCrystalUpdateFubenCmd, crystals_),
  };
  GvgCrystalUpdateFubenCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GvgCrystalUpdateFubenCmd_descriptor_,
      GvgCrystalUpdateFubenCmd::default_instance_,
      GvgCrystalUpdateFubenCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GvgCrystalUpdateFubenCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GvgCrystalUpdateFubenCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GvgCrystalUpdateFubenCmd));
  QueryGvgTowerInfoFubenCmd_descriptor_ = file->message_type(45);
  static const int QueryGvgTowerInfoFubenCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryGvgTowerInfoFubenCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryGvgTowerInfoFubenCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryGvgTowerInfoFubenCmd, etype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryGvgTowerInfoFubenCmd, open_),
  };
  QueryGvgTowerInfoFubenCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryGvgTowerInfoFubenCmd_descriptor_,
      QueryGvgTowerInfoFubenCmd::default_instance_,
      QueryGvgTowerInfoFubenCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryGvgTowerInfoFubenCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryGvgTowerInfoFubenCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryGvgTowerInfoFubenCmd));
  RewardItemData_descriptor_ = file->message_type(46);
  static const int RewardItemData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardItemData, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardItemData, count_),
  };
  RewardItemData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RewardItemData_descriptor_,
      RewardItemData::default_instance_,
      RewardItemData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardItemData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardItemData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RewardItemData));
  SuperGvgRewardData_descriptor_ = file->message_type(47);
  static const int SuperGvgRewardData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperGvgRewardData, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperGvgRewardData, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperGvgRewardData, items_),
  };
  SuperGvgRewardData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SuperGvgRewardData_descriptor_,
      SuperGvgRewardData::default_instance_,
      SuperGvgRewardData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperGvgRewardData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperGvgRewardData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SuperGvgRewardData));
  SuperGvgRewardInfoFubenCmd_descriptor_ = file->message_type(48);
  static const int SuperGvgRewardInfoFubenCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperGvgRewardInfoFubenCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperGvgRewardInfoFubenCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperGvgRewardInfoFubenCmd, rewardinfo_),
  };
  SuperGvgRewardInfoFubenCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SuperGvgRewardInfoFubenCmd_descriptor_,
      SuperGvgRewardInfoFubenCmd::default_instance_,
      SuperGvgRewardInfoFubenCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperGvgRewardInfoFubenCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperGvgRewardInfoFubenCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SuperGvgRewardInfoFubenCmd));
  SuperGvgUserData_descriptor_ = file->message_type(49);
  static const int SuperGvgUserData_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperGvgUserData, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperGvgUserData, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperGvgUserData, killusernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperGvgUserData, dienum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperGvgUserData, chipnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperGvgUserData, towertime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperGvgUserData, healhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperGvgUserData, relivenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperGvgUserData, metaldamage_),
  };
  SuperGvgUserData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SuperGvgUserData_descriptor_,
      SuperGvgUserData::default_instance_,
      SuperGvgUserData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperGvgUserData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperGvgUserData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SuperGvgUserData));
  SuperGvgGuildUserData_descriptor_ = file->message_type(50);
  static const int SuperGvgGuildUserData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperGvgGuildUserData, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperGvgGuildUserData, userdatas_),
  };
  SuperGvgGuildUserData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SuperGvgGuildUserData_descriptor_,
      SuperGvgGuildUserData::default_instance_,
      SuperGvgGuildUserData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperGvgGuildUserData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperGvgGuildUserData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SuperGvgGuildUserData));
  SuperGvgQueryUserDataFubenCmd_descriptor_ = file->message_type(51);
  static const int SuperGvgQueryUserDataFubenCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperGvgQueryUserDataFubenCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperGvgQueryUserDataFubenCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperGvgQueryUserDataFubenCmd, guilduserdata_),
  };
  SuperGvgQueryUserDataFubenCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SuperGvgQueryUserDataFubenCmd_descriptor_,
      SuperGvgQueryUserDataFubenCmd::default_instance_,
      SuperGvgQueryUserDataFubenCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperGvgQueryUserDataFubenCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperGvgQueryUserDataFubenCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SuperGvgQueryUserDataFubenCmd));
  MvpBattleTeamData_descriptor_ = file->message_type(52);
  static const int MvpBattleTeamData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MvpBattleTeamData, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MvpBattleTeamData, teamname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MvpBattleTeamData, killmvps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MvpBattleTeamData, killminis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MvpBattleTeamData, killusernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MvpBattleTeamData, deadboss_),
  };
  MvpBattleTeamData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MvpBattleTeamData_descriptor_,
      MvpBattleTeamData::default_instance_,
      MvpBattleTeamData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MvpBattleTeamData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MvpBattleTeamData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MvpBattleTeamData));
  MvpBattleReportFubenCmd_descriptor_ = file->message_type(53);
  static const int MvpBattleReportFubenCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MvpBattleReportFubenCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MvpBattleReportFubenCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MvpBattleReportFubenCmd, datas_),
  };
  MvpBattleReportFubenCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MvpBattleReportFubenCmd_descriptor_,
      MvpBattleReportFubenCmd::default_instance_,
      MvpBattleReportFubenCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MvpBattleReportFubenCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MvpBattleReportFubenCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MvpBattleReportFubenCmd));
  TeamPwsRaidUserInfo_descriptor_ = file->message_type(54);
  static const int TeamPwsRaidUserInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPwsRaidUserInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPwsRaidUserInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPwsRaidUserInfo, killnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPwsRaidUserInfo, heal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPwsRaidUserInfo, killscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPwsRaidUserInfo, ballscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPwsRaidUserInfo, buffscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPwsRaidUserInfo, dienum_),
  };
  TeamPwsRaidUserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamPwsRaidUserInfo_descriptor_,
      TeamPwsRaidUserInfo::default_instance_,
      TeamPwsRaidUserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPwsRaidUserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPwsRaidUserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamPwsRaidUserInfo));
  TeamPwsRaidTeamInfo_descriptor_ = file->message_type(55);
  static const int TeamPwsRaidTeamInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPwsRaidTeamInfo, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPwsRaidTeamInfo, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPwsRaidTeamInfo, userinfos_),
  };
  TeamPwsRaidTeamInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamPwsRaidTeamInfo_descriptor_,
      TeamPwsRaidTeamInfo::default_instance_,
      TeamPwsRaidTeamInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPwsRaidTeamInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPwsRaidTeamInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamPwsRaidTeamInfo));
  QueryTeamPwsUserInfoFubenCmd_descriptor_ = file->message_type(56);
  static const int QueryTeamPwsUserInfoFubenCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryTeamPwsUserInfoFubenCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryTeamPwsUserInfoFubenCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryTeamPwsUserInfoFubenCmd, teaminfo_),
  };
  QueryTeamPwsUserInfoFubenCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryTeamPwsUserInfoFubenCmd_descriptor_,
      QueryTeamPwsUserInfoFubenCmd::default_instance_,
      QueryTeamPwsUserInfoFubenCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryTeamPwsUserInfoFubenCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryTeamPwsUserInfoFubenCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryTeamPwsUserInfoFubenCmd));
  TeamPwsReportFubenCmd_descriptor_ = file->message_type(57);
  static const int TeamPwsReportFubenCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPwsReportFubenCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPwsReportFubenCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPwsReportFubenCmd, teaminfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPwsReportFubenCmd, mvpuserinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPwsReportFubenCmd, winteam_),
  };
  TeamPwsReportFubenCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamPwsReportFubenCmd_descriptor_,
      TeamPwsReportFubenCmd::default_instance_,
      TeamPwsReportFubenCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPwsReportFubenCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPwsReportFubenCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamPwsReportFubenCmd));
  TeamPwsInfoSyncData_descriptor_ = file->message_type(58);
  static const int TeamPwsInfoSyncData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPwsInfoSyncData, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPwsInfoSyncData, teamname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPwsInfoSyncData, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPwsInfoSyncData, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPwsInfoSyncData, effectcd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPwsInfoSyncData, magicid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPwsInfoSyncData, balls_),
  };
  TeamPwsInfoSyncData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamPwsInfoSyncData_descriptor_,
      TeamPwsInfoSyncData::default_instance_,
      TeamPwsInfoSyncData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPwsInfoSyncData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPwsInfoSyncData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamPwsInfoSyncData));
  TeamPwsInfoSyncFubenCmd_descriptor_ = file->message_type(59);
  static const int TeamPwsInfoSyncFubenCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPwsInfoSyncFubenCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPwsInfoSyncFubenCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPwsInfoSyncFubenCmd, teaminfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPwsInfoSyncFubenCmd, endtime_),
  };
  TeamPwsInfoSyncFubenCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamPwsInfoSyncFubenCmd_descriptor_,
      TeamPwsInfoSyncFubenCmd::default_instance_,
      TeamPwsInfoSyncFubenCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPwsInfoSyncFubenCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPwsInfoSyncFubenCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamPwsInfoSyncFubenCmd));
  UpdateTeamPwsInfoFubenCmd_descriptor_ = file->message_type(60);
  static const int UpdateTeamPwsInfoFubenCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateTeamPwsInfoFubenCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateTeamPwsInfoFubenCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateTeamPwsInfoFubenCmd, teaminfo_),
  };
  UpdateTeamPwsInfoFubenCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateTeamPwsInfoFubenCmd_descriptor_,
      UpdateTeamPwsInfoFubenCmd::default_instance_,
      UpdateTeamPwsInfoFubenCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateTeamPwsInfoFubenCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateTeamPwsInfoFubenCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateTeamPwsInfoFubenCmd));
  SelectTeamPwsMagicFubenCmd_descriptor_ = file->message_type(61);
  static const int SelectTeamPwsMagicFubenCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectTeamPwsMagicFubenCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectTeamPwsMagicFubenCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectTeamPwsMagicFubenCmd, magicid_),
  };
  SelectTeamPwsMagicFubenCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SelectTeamPwsMagicFubenCmd_descriptor_,
      SelectTeamPwsMagicFubenCmd::default_instance_,
      SelectTeamPwsMagicFubenCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectTeamPwsMagicFubenCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectTeamPwsMagicFubenCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SelectTeamPwsMagicFubenCmd));
  InviteSummonBossFubenCmd_descriptor_ = file->message_type(62);
  static const int InviteSummonBossFubenCmd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteSummonBossFubenCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteSummonBossFubenCmd, param_),
  };
  InviteSummonBossFubenCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InviteSummonBossFubenCmd_descriptor_,
      InviteSummonBossFubenCmd::default_instance_,
      InviteSummonBossFubenCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteSummonBossFubenCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteSummonBossFubenCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InviteSummonBossFubenCmd));
  ReplySummonBossFubenCmd_descriptor_ = file->message_type(63);
  static const int ReplySummonBossFubenCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplySummonBossFubenCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplySummonBossFubenCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplySummonBossFubenCmd, isfull_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplySummonBossFubenCmd, agree_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplySummonBossFubenCmd, charid_),
  };
  ReplySummonBossFubenCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplySummonBossFubenCmd_descriptor_,
      ReplySummonBossFubenCmd::default_instance_,
      ReplySummonBossFubenCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplySummonBossFubenCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplySummonBossFubenCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplySummonBossFubenCmd));
  FuBenParam_descriptor_ = file->enum_type(0);
  ERaidType_descriptor_ = file->enum_type(1);
  EGuildGateState_descriptor_ = file->enum_type(2);
  EGuildGateOpt_descriptor_ = file->enum_type(3);
  EGuildFireResult_descriptor_ = file->enum_type(4);
  EGvgDataType_descriptor_ = file->enum_type(5);
  EGvgTowerState_descriptor_ = file->enum_type(6);
  EGvgTowerType_descriptor_ = file->enum_type(7);
  ETeamPwsColor_descriptor_ = file->enum_type(8);
  EMagicBallType_descriptor_ = file->enum_type(9);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_FuBenCmd_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrackData_descriptor_, &TrackData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RaidPConfig_descriptor_, &RaidPConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrackFuBenUserCmd_descriptor_, &TrackFuBenUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FailFuBenUserCmd_descriptor_, &FailFuBenUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LeaveFuBenUserCmd_descriptor_, &LeaveFuBenUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SuccessFuBenUserCmd_descriptor_, &SuccessFuBenUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldStageItem_descriptor_, &WorldStageItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StageStepItem_descriptor_, &StageStepItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldStageUserCmd_descriptor_, &WorldStageUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StageNormalStepItem_descriptor_, &StageNormalStepItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StageHardStepItem_descriptor_, &StageHardStepItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StageStepUserCmd_descriptor_, &StageStepUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StartStageUserCmd_descriptor_, &StartStageUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetRewardStageUserCmd_descriptor_, &GetRewardStageUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StageStepStarUserCmd_descriptor_, &StageStepStarUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MonsterCountUserCmd_descriptor_, &MonsterCountUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FubenStepSyncCmd_descriptor_, &FubenStepSyncCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FuBenProgressSyncCmd_descriptor_, &FuBenProgressSyncCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FuBenClearInfoCmd_descriptor_, &FuBenClearInfoCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildGateData_descriptor_, &GuildGateData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserGuildRaidFubenCmd_descriptor_, &UserGuildRaidFubenCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildGateOptCmd_descriptor_, &GuildGateOptCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildFireInfoFubenCmd_descriptor_, &GuildFireInfoFubenCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildFireStopFubenCmd_descriptor_, &GuildFireStopFubenCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildFireDangerFubenCmd_descriptor_, &GuildFireDangerFubenCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildFireMetalHpFubenCmd_descriptor_, &GuildFireMetalHpFubenCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildFireCalmFubenCmd_descriptor_, &GuildFireCalmFubenCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildFireNewDefFubenCmd_descriptor_, &GuildFireNewDefFubenCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildFireRestartFubenCmd_descriptor_, &GuildFireRestartFubenCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildFireStatusFubenCmd_descriptor_, &GuildFireStatusFubenCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GvgData_descriptor_, &GvgData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GvgDataSyncCmd_descriptor_, &GvgDataSyncCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GvgDataUpdateCmd_descriptor_, &GvgDataUpdateCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GvgDefNameChangeFubenCmd_descriptor_, &GvgDefNameChangeFubenCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SyncMvpInfoFubenCmd_descriptor_, &SyncMvpInfoFubenCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BossDieFubenCmd_descriptor_, &BossDieFubenCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateUserNumFubenCmd_descriptor_, &UpdateUserNumFubenCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GvgTowerValue_descriptor_, &GvgTowerValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GvgTowerData_descriptor_, &GvgTowerData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GvgCrystalInfo_descriptor_, &GvgCrystalInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GvgGuildInfo_descriptor_, &GvgGuildInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SuperGvgSyncFubenCmd_descriptor_, &SuperGvgSyncFubenCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GvgTowerUpdateFubenCmd_descriptor_, &GvgTowerUpdateFubenCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GvgMetalDieFubenCmd_descriptor_, &GvgMetalDieFubenCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GvgCrystalUpdateFubenCmd_descriptor_, &GvgCrystalUpdateFubenCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryGvgTowerInfoFubenCmd_descriptor_, &QueryGvgTowerInfoFubenCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RewardItemData_descriptor_, &RewardItemData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SuperGvgRewardData_descriptor_, &SuperGvgRewardData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SuperGvgRewardInfoFubenCmd_descriptor_, &SuperGvgRewardInfoFubenCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SuperGvgUserData_descriptor_, &SuperGvgUserData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SuperGvgGuildUserData_descriptor_, &SuperGvgGuildUserData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SuperGvgQueryUserDataFubenCmd_descriptor_, &SuperGvgQueryUserDataFubenCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MvpBattleTeamData_descriptor_, &MvpBattleTeamData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MvpBattleReportFubenCmd_descriptor_, &MvpBattleReportFubenCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamPwsRaidUserInfo_descriptor_, &TeamPwsRaidUserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamPwsRaidTeamInfo_descriptor_, &TeamPwsRaidTeamInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryTeamPwsUserInfoFubenCmd_descriptor_, &QueryTeamPwsUserInfoFubenCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamPwsReportFubenCmd_descriptor_, &TeamPwsReportFubenCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamPwsInfoSyncData_descriptor_, &TeamPwsInfoSyncData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamPwsInfoSyncFubenCmd_descriptor_, &TeamPwsInfoSyncFubenCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateTeamPwsInfoFubenCmd_descriptor_, &UpdateTeamPwsInfoFubenCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SelectTeamPwsMagicFubenCmd_descriptor_, &SelectTeamPwsMagicFubenCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InviteSummonBossFubenCmd_descriptor_, &InviteSummonBossFubenCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplySummonBossFubenCmd_descriptor_, &ReplySummonBossFubenCmd::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_FuBenCmd_2eproto() {
  delete TrackData::default_instance_;
  delete TrackData_reflection_;
  delete RaidPConfig::default_instance_;
  delete RaidPConfig_reflection_;
  delete TrackFuBenUserCmd::default_instance_;
  delete TrackFuBenUserCmd_reflection_;
  delete FailFuBenUserCmd::default_instance_;
  delete FailFuBenUserCmd_reflection_;
  delete LeaveFuBenUserCmd::default_instance_;
  delete LeaveFuBenUserCmd_reflection_;
  delete SuccessFuBenUserCmd::default_instance_;
  delete SuccessFuBenUserCmd_reflection_;
  delete WorldStageItem::default_instance_;
  delete WorldStageItem_reflection_;
  delete StageStepItem::default_instance_;
  delete StageStepItem_reflection_;
  delete WorldStageUserCmd::default_instance_;
  delete WorldStageUserCmd_reflection_;
  delete StageNormalStepItem::default_instance_;
  delete StageNormalStepItem_reflection_;
  delete StageHardStepItem::default_instance_;
  delete StageHardStepItem_reflection_;
  delete StageStepUserCmd::default_instance_;
  delete StageStepUserCmd_reflection_;
  delete StartStageUserCmd::default_instance_;
  delete StartStageUserCmd_reflection_;
  delete GetRewardStageUserCmd::default_instance_;
  delete GetRewardStageUserCmd_reflection_;
  delete StageStepStarUserCmd::default_instance_;
  delete StageStepStarUserCmd_reflection_;
  delete MonsterCountUserCmd::default_instance_;
  delete MonsterCountUserCmd_reflection_;
  delete FubenStepSyncCmd::default_instance_;
  delete FubenStepSyncCmd_reflection_;
  delete FuBenProgressSyncCmd::default_instance_;
  delete FuBenProgressSyncCmd_reflection_;
  delete FuBenClearInfoCmd::default_instance_;
  delete FuBenClearInfoCmd_reflection_;
  delete GuildGateData::default_instance_;
  delete GuildGateData_reflection_;
  delete UserGuildRaidFubenCmd::default_instance_;
  delete UserGuildRaidFubenCmd_reflection_;
  delete GuildGateOptCmd::default_instance_;
  delete GuildGateOptCmd_reflection_;
  delete GuildFireInfoFubenCmd::default_instance_;
  delete GuildFireInfoFubenCmd_reflection_;
  delete GuildFireStopFubenCmd::default_instance_;
  delete GuildFireStopFubenCmd_reflection_;
  delete GuildFireDangerFubenCmd::default_instance_;
  delete GuildFireDangerFubenCmd_reflection_;
  delete GuildFireMetalHpFubenCmd::default_instance_;
  delete GuildFireMetalHpFubenCmd_reflection_;
  delete GuildFireCalmFubenCmd::default_instance_;
  delete GuildFireCalmFubenCmd_reflection_;
  delete GuildFireNewDefFubenCmd::default_instance_;
  delete GuildFireNewDefFubenCmd_reflection_;
  delete GuildFireRestartFubenCmd::default_instance_;
  delete GuildFireRestartFubenCmd_reflection_;
  delete GuildFireStatusFubenCmd::default_instance_;
  delete GuildFireStatusFubenCmd_reflection_;
  delete GvgData::default_instance_;
  delete GvgData_reflection_;
  delete GvgDataSyncCmd::default_instance_;
  delete GvgDataSyncCmd_reflection_;
  delete GvgDataUpdateCmd::default_instance_;
  delete GvgDataUpdateCmd_reflection_;
  delete GvgDefNameChangeFubenCmd::default_instance_;
  delete GvgDefNameChangeFubenCmd_reflection_;
  delete SyncMvpInfoFubenCmd::default_instance_;
  delete SyncMvpInfoFubenCmd_reflection_;
  delete BossDieFubenCmd::default_instance_;
  delete BossDieFubenCmd_reflection_;
  delete UpdateUserNumFubenCmd::default_instance_;
  delete UpdateUserNumFubenCmd_reflection_;
  delete GvgTowerValue::default_instance_;
  delete GvgTowerValue_reflection_;
  delete GvgTowerData::default_instance_;
  delete GvgTowerData_reflection_;
  delete GvgCrystalInfo::default_instance_;
  delete GvgCrystalInfo_reflection_;
  delete GvgGuildInfo::default_instance_;
  delete GvgGuildInfo_reflection_;
  delete SuperGvgSyncFubenCmd::default_instance_;
  delete SuperGvgSyncFubenCmd_reflection_;
  delete GvgTowerUpdateFubenCmd::default_instance_;
  delete GvgTowerUpdateFubenCmd_reflection_;
  delete GvgMetalDieFubenCmd::default_instance_;
  delete GvgMetalDieFubenCmd_reflection_;
  delete GvgCrystalUpdateFubenCmd::default_instance_;
  delete GvgCrystalUpdateFubenCmd_reflection_;
  delete QueryGvgTowerInfoFubenCmd::default_instance_;
  delete QueryGvgTowerInfoFubenCmd_reflection_;
  delete RewardItemData::default_instance_;
  delete RewardItemData_reflection_;
  delete SuperGvgRewardData::default_instance_;
  delete SuperGvgRewardData_reflection_;
  delete SuperGvgRewardInfoFubenCmd::default_instance_;
  delete SuperGvgRewardInfoFubenCmd_reflection_;
  delete SuperGvgUserData::default_instance_;
  delete SuperGvgUserData_reflection_;
  delete SuperGvgGuildUserData::default_instance_;
  delete SuperGvgGuildUserData_reflection_;
  delete SuperGvgQueryUserDataFubenCmd::default_instance_;
  delete SuperGvgQueryUserDataFubenCmd_reflection_;
  delete MvpBattleTeamData::default_instance_;
  delete MvpBattleTeamData_reflection_;
  delete MvpBattleReportFubenCmd::default_instance_;
  delete MvpBattleReportFubenCmd_reflection_;
  delete TeamPwsRaidUserInfo::default_instance_;
  delete TeamPwsRaidUserInfo_reflection_;
  delete TeamPwsRaidTeamInfo::default_instance_;
  delete TeamPwsRaidTeamInfo_reflection_;
  delete QueryTeamPwsUserInfoFubenCmd::default_instance_;
  delete QueryTeamPwsUserInfoFubenCmd_reflection_;
  delete TeamPwsReportFubenCmd::default_instance_;
  delete TeamPwsReportFubenCmd_reflection_;
  delete TeamPwsInfoSyncData::default_instance_;
  delete TeamPwsInfoSyncData_reflection_;
  delete TeamPwsInfoSyncFubenCmd::default_instance_;
  delete TeamPwsInfoSyncFubenCmd_reflection_;
  delete UpdateTeamPwsInfoFubenCmd::default_instance_;
  delete UpdateTeamPwsInfoFubenCmd_reflection_;
  delete SelectTeamPwsMagicFubenCmd::default_instance_;
  delete SelectTeamPwsMagicFubenCmd_reflection_;
  delete InviteSummonBossFubenCmd::default_instance_;
  delete InviteSummonBossFubenCmd_reflection_;
  delete ReplySummonBossFubenCmd::default_instance_;
  delete ReplySummonBossFubenCmd_reflection_;
}

void protobuf_AddDesc_FuBenCmd_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Cmd::protobuf_AddDesc_xCmd_2eproto();
  ::Cmd::protobuf_AddDesc_ProtoCommon_2eproto();
  ::Cmd::protobuf_AddDesc_ChatCmd_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016FuBenCmd.proto\022\003Cmd\032\nxCmd.proto\032\021Proto"
    "Common.proto\032\rChatCmd.proto\"%\n\tTrackData"
    "\022\014\n\004star\030\001 \001(\r\022\n\n\002id\030\002 \001(\r\"\265\001\n\013RaidPConf"
    "ig\022\021\n\006RaidID\030\001 \001(\r:\0010\022\021\n\006starID\030\002 \001(\r:\0010"
    "\022\017\n\004Auto\030\003 \001(\r:\0010\022\027\n\014WhetherTrace\030\004 \001(\r:"
    "\0010\022\020\n\010DescInfo\030\005 \001(\t\022\017\n\007Content\030\006 \001(\t\022\021\n"
    "\tTraceInfo\030\007 \001(\t\022 \n\006params\030\010 \001(\0132\020.Cmd.C"
    "onfigParam\"\263\001\n\021TrackFuBenUserCmd\022)\n\003cmd\030"
    "\001 \001(\0162\014.Cmd.Command:\016FUBEN_PROTOCMD\0224\n\005p"
    "aram\030\002 \001(\0162\017.Cmd.FuBenParam:\024TRACK_FUBEN"
    "_USER_CMD\022\034\n\004data\030\003 \003(\0132\016.Cmd.TrackData\022"
    "\016\n\006dmapid\030\004 \001(\r\022\017\n\007endtime\030\005 \001(\r\"r\n\020Fail"
    "FuBenUserCmd\022)\n\003cmd\030\001 \001(\0162\014.Cmd.Command:"
    "\016FUBEN_PROTOCMD\0223\n\005param\030\002 \001(\0162\017.Cmd.FuB"
    "enParam:\023FAIL_FUBEN_USER_CMD\"\203\001\n\021LeaveFu"
    "BenUserCmd\022)\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\016F"
    "UBEN_PROTOCMD\0224\n\005param\030\002 \001(\0162\017.Cmd.FuBen"
    "Param:\024LEAVE_FUBEN_USER_CMD\022\r\n\005mapid\030\003 \001"
    "(\r\"\361\001\n\023SuccessFuBenUserCmd\022)\n\003cmd\030\001 \001(\0162"
    "\014.Cmd.Command:\016FUBEN_PROTOCMD\0226\n\005param\030\002"
    " \001(\0162\017.Cmd.FuBenParam:\026SUCCESS_FUBEN_USE"
    "R_CMD\022+\n\004type\030\003 \001(\0162\016.Cmd.ERaidType:\rERA"
    "IDTYPE_MIN\022\021\n\006param1\030\004 \001(\r:\0010\022\021\n\006param2\030"
    "\005 \001(\r:\0010\022\021\n\006param3\030\006 \001(\r:\0010\022\021\n\006param4\030\007 "
    "\001(\r:\0010\";\n\016WorldStageItem\022\n\n\002id\030\001 \001(\r\022\014\n\004"
    "star\030\002 \001(\r\022\017\n\007getList\030\003 \003(\r\">\n\rStageStep"
    "Item\022\017\n\007stageid\030\001 \001(\r\022\016\n\006stepid\030\002 \001(\r\022\014\n"
    "\004type\030\003 \001(\r\"\274\001\n\021WorldStageUserCmd\022)\n\003cmd"
    "\030\001 \001(\0162\014.Cmd.Command:\016FUBEN_PROTOCMD\0224\n\005"
    "param\030\002 \001(\0162\017.Cmd.FuBenParam:\024WORLD_STAG"
    "E_USER_CMD\022!\n\004list\030\003 \003(\0132\023.Cmd.WorldStag"
    "eItem\022#\n\007curinfo\030\004 \003(\0132\022.Cmd.StageStepIt"
    "em\"3\n\023StageNormalStepItem\022\016\n\006stepid\030\001 \001("
    "\r\022\014\n\004star\030\002 \001(\r\"J\n\021StageHardStepItem\022\016\n\006"
    "stepid\030\001 \001(\r\022\016\n\006finish\030\002 \001(\r\022\025\n\rchalleng"
    "eTime\030\003 \001(\r\"\331\001\n\020StageStepUserCmd\022)\n\003cmd\030"
    "\001 \001(\0162\014.Cmd.Command:\016FUBEN_PROTOCMD\0222\n\005p"
    "aram\030\002 \001(\0162\017.Cmd.FuBenParam:\022SUB_STAGE_U"
    "SER_CMD\022\017\n\007stageid\030\003 \001(\r\022+\n\tnormalist\030\004 "
    "\003(\0132\030.Cmd.StageNormalStepItem\022(\n\010hardlis"
    "t\030\005 \003(\0132\026.Cmd.StageHardStepItem\"\243\001\n\021Star"
    "tStageUserCmd\022)\n\003cmd\030\001 \001(\0162\014.Cmd.Command"
    ":\016FUBEN_PROTOCMD\0224\n\005param\030\002 \001(\0162\017.Cmd.Fu"
    "BenParam:\024START_STAGE_USER_CMD\022\017\n\007stagei"
    "d\030\003 \001(\r\022\016\n\006stepid\030\004 \001(\r\022\014\n\004type\030\005 \001(\r\"\236\001"
    "\n\025GetRewardStageUserCmd\022)\n\003cmd\030\001 \001(\0162\014.C"
    "md.Command:\016FUBEN_PROTOCMD\0229\n\005param\030\002 \001("
    "\0162\017.Cmd.FuBenParam:\031GET_REWARD_STAGE_USE"
    "R_CMD\022\017\n\007stageid\030\003 \001(\r\022\016\n\006starid\030\004 \001(\r\"\270"
    "\001\n\024StageStepStarUserCmd\022)\n\003cmd\030\001 \001(\0162\014.C"
    "md.Command:\016FUBEN_PROTOCMD\0228\n\005param\030\002 \001("
    "\0162\017.Cmd.FuBenParam:\030STAGE_STEP_STAR_USER"
    "_CMD\022\017\n\007stageid\030\003 \001(\r\022\016\n\006stepid\030\004 \001(\r\022\014\n"
    "\004star\030\005 \001(\r\022\014\n\004type\030\006 \001(\r\"\205\001\n\023MonsterCou"
    "ntUserCmd\022)\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\016FU"
    "BEN_PROTOCMD\0226\n\005param\030\002 \001(\0162\017.Cmd.FuBenP"
    "aram:\026MONSTER_COUNT_USER_CMD\022\013\n\003num\030\003 \001("
    "\r\"\263\001\n\020FubenStepSyncCmd\022)\n\003cmd\030\001 \001(\0162\014.Cm"
    "d.Command:\016FUBEN_PROTOCMD\022/\n\005param\030\002 \001(\016"
    "2\017.Cmd.FuBenParam:\017FUBEN_STEP_SYNC\022\r\n\002id"
    "\030\003 \001(\r:\0010\022\022\n\003del\030\004 \001(\010:\005false\022 \n\006config\030"
    "\005 \001(\0132\020.Cmd.RaidPConfig\"\226\001\n\024FuBenProgres"
    "sSyncCmd\022)\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\016FUB"
    "EN_PROTOCMD\022/\n\005param\030\002 \001(\0162\017.Cmd.FuBenPa"
    "ram:\017FUBEN_GOAL_SYNC\022\r\n\002id\030\003 \001(\r:\0010\022\023\n\010p"
    "rogress\030\004 \001(\r:\0010\"p\n\021FuBenClearInfoCmd\022)\n"
    "\003cmd\030\001 \001(\0162\014.Cmd.Command:\016FUBEN_PROTOCMD"
    "\0220\n\005param\030\002 \001(\0162\017.Cmd.FuBenParam:\020FUBEN_"
    "CLEAR_SYNC\"\320\001\n\rGuildGateData\022\021\n\tgatenpci"
    "d\030\001 \002(\004\022\030\n\rkilledbossnum\030\002 \001(\r:\0010\022\025\n\ngro"
    "upindex\030\003 \001(\r:\0010\022\024\n\tclosetime\030\004 \001(\r:\0010\022\020"
    "\n\005level\030\005 \001(\r:\0010\022\030\n\tisspecial\030\006 \001(\010:\005fal"
    "se\0229\n\005state\030\007 \001(\0162\024.Cmd.EGuildGateState:"
    "\024EGUILDGATESTATE_LOCK\"\236\001\n\025UserGuildRaidF"
    "ubenCmd\022)\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\016FUBE"
    "N_PROTOCMD\0224\n\005param\030\002 \001(\0162\017.Cmd.FuBenPar"
    "am:\024GUILD_RAID_USER_INFO\022$\n\010gatedata\030\003 \003"
    "(\0132\022.Cmd.GuildGateData\"\275\001\n\017GuildGateOptC"
    "md\022)\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\016FUBEN_PRO"
    "TOCMD\0223\n\005param\030\002 \001(\0162\017.Cmd.FuBenParam:\023G"
    "UILD_RAID_GATE_OPT\022\021\n\tgatenpcid\030\003 \001(\004\022\037\n"
    "\003opt\030\004 \001(\0162\022.Cmd.EGuildGateOpt\022\026\n\013uplock"
    "level\030\005 \001(\r:\0010\"\342\002\n\025GuildFireInfoFubenCmd"
    "\022)\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\016FUBEN_PROTO"
    "CMD\022/\n\005param\030\002 \001(\0162\017.Cmd.FuBenParam:\017GUI"
    "LD_FIRE_INFO\022\023\n\004fire\030\003 \001(\010:\005false\022\026\n\013def"
    "_guildid\030\004 \001(\004:\0010\022\027\n\014endfire_time\030\005 \001(\r:"
    "\0010\022\025\n\006danger\030\006 \001(\010:\005false\022\026\n\013danger_time"
    "\030\007 \001(\r:\0010\022\026\n\013metal_hpper\030\010 \001(\r:\0010\022\027\n\010cal"
    "mdown\030\t \001(\010:\005false\022\024\n\tcalm_time\030\n \001(\r:\0010"
    "\022\025\n\rdef_guildname\030\013 \001(\t\022\032\n\013def_perfect\030\014"
    " \001(\010:\005false\"\232\001\n\025GuildFireStopFubenCmd\022)\n"
    "\003cmd\030\001 \001(\0162\014.Cmd.Command:\016FUBEN_PROTOCMD"
    "\022/\n\005param\030\002 \001(\0162\017.Cmd.FuBenParam:\017GUILD_"
    "FIRE_STOP\022%\n\006result\030\003 \002(\0162\025.Cmd.EGuildFi"
    "reResult\"\246\001\n\027GuildFireDangerFubenCmd\022)\n\003"
    "cmd\030\001 \001(\0162\014.Cmd.Command:\016FUBEN_PROTOCMD\022"
    "1\n\005param\030\002 \001(\0162\017.Cmd.FuBenParam:\021GUILD_F"
    "IRE_DANGER\022\025\n\006danger\030\003 \001(\010:\005false\022\026\n\013dan"
    "ger_time\030\004 \001(\r:\0010\"\213\001\n\030GuildFireMetalHpFu"
    "benCmd\022)\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\016FUBEN"
    "_PROTOCMD\0222\n\005param\030\002 \001(\0162\017.Cmd.FuBenPara"
    "m:\022GUILD_FIRE_METALHP\022\020\n\005hpper\030\003 \001(\r:\0010\""
    "\210\001\n\025GuildFireCalmFubenCmd\022)\n\003cmd\030\001 \001(\0162\014"
    ".Cmd.Command:\016FUBEN_PROTOCMD\022/\n\005param\030\002 "
    "\001(\0162\017.Cmd.FuBenParam:\017GUILD_FIRE_CALM\022\023\n"
    "\004calm\030\003 \001(\010:\005false\"\244\001\n\027GuildFireNewDefFu"
    "benCmd\022)\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\016FUBEN"
    "_PROTOCMD\0227\n\005param\030\002 \001(\0162\017.Cmd.FuBenPara"
    "m:\027GUILD_FIRE_CHANGE_GUILD\022\022\n\007guildid\030\003 "
    "\001(\004:\0010\022\021\n\tguildname\030\004 \001(\t\"y\n\030GuildFireRe"
    "startFubenCmd\022)\n\003cmd\030\001 \001(\0162\014.Cmd.Command"
    ":\016FUBEN_PROTOCMD\0222\n\005param\030\002 \001(\0162\017.Cmd.Fu"
    "BenParam:\022GUILD_FIRE_RESTART\"\313\001\n\027GuildFi"
    "reStatusFubenCmd\022)\n\003cmd\030\001 \001(\0162\014.Cmd.Comm"
    "and:\016FUBEN_PROTOCMD\0221\n\005param\030\002 \001(\0162\017.Cmd"
    ".FuBenParam:\021GUILD_FIRE_STATUS\022\023\n\004open\030\003"
    " \001(\010:\005false\022\024\n\tstarttime\030\004 \001(\r:\0010\022\016\n\006cit"
    "yid\030\005 \002(\r\022\027\n\010cityopen\030\006 \001(\010:\005false\"J\n\007Gv"
    "gData\022-\n\004type\030\001 \001(\0162\021.Cmd.EGvgDataType:\014"
    "EGVGDATA_MIN\022\020\n\005value\030\002 \001(\r:\0010\"\213\001\n\016GvgDa"
    "taSyncCmd\022)\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\016FU"
    "BEN_PROTOCMD\0221\n\005param\030\002 \001(\0162\017.Cmd.FuBenP"
    "aram:\021GVG_DATA_SYNC_CMD\022\033\n\005datas\030\003 \003(\0132\014"
    ".Cmd.GvgData\"\216\001\n\020GvgDataUpdateCmd\022)\n\003cmd"
    "\030\001 \001(\0162\014.Cmd.Command:\016FUBEN_PROTOCMD\0223\n\005"
    "param\030\002 \001(\0162\017.Cmd.FuBenParam:\023GVG_DATA_U"
    "PDATE_CMD\022\032\n\004data\030\003 \001(\0132\014.Cmd.GvgData\"\224\001"
    "\n\030GvgDefNameChangeFubenCmd\022)\n\003cmd\030\001 \001(\0162"
    "\014.Cmd.Command:\016FUBEN_PROTOCMD\022<\n\005param\030\002"
    " \001(\0162\017.Cmd.FuBenParam:\034GUILD_FIRE_CHANGE"
    "_GUILD_NAME\022\017\n\007newname\030\003 \002(\t\"\257\001\n\023SyncMvp"
    "InfoFubenCmd\022)\n\003cmd\030\001 \001(\0162\014.Cmd.Command:"
    "\016FUBEN_PROTOCMD\0226\n\005param\030\002 \001(\0162\017.Cmd.FuB"
    "enParam:\026MVPBATTLE_SYNC_MVPINFO\022\022\n\007usern"
    "um\030\003 \001(\r:\0010\022\020\n\010liveboss\030\004 \003(\r\022\017\n\007dieboss"
    "\030\005 \003(\r\"\177\n\017BossDieFubenCmd\022)\n\003cmd\030\001 \001(\0162\014"
    ".Cmd.Command:\016FUBEN_PROTOCMD\0222\n\005param\030\002 "
    "\001(\0162\017.Cmd.FuBenParam:\022MVPBATTLE_BOSS_DIE"
    "\022\r\n\005npcid\030\003 \002(\r\"\213\001\n\025UpdateUserNumFubenCm"
    "d\022)\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\016FUBEN_PROT"
    "OCMD\0223\n\005param\030\002 \001(\0162\017.Cmd.FuBenParam:\023FU"
    "BEN_USERNUM_COUNT\022\022\n\007usernum\030\003 \001(\r:\0010\"/\n"
    "\rGvgTowerValue\022\017\n\007guildid\030\001 \001(\004\022\r\n\005value"
    "\030\002 \001(\r\"\215\001\n\014GvgTowerData\022!\n\005etype\030\001 \001(\0162\022"
    ".Cmd.EGvgTowerType\022#\n\006estate\030\002 \001(\0162\023.Cmd"
    ".EGvgTowerState\022\023\n\013owner_guild\030\003 \001(\004\022 \n\004"
    "info\030\004 \003(\0132\022.Cmd.GvgTowerValue\"Z\n\016GvgCry"
    "stalInfo\022\014\n\004rank\030\001 \001(\r\022\017\n\007guildid\030\002 \001(\004\022"
    "\025\n\ncrystalnum\030\003 \001(\r:\0010\022\022\n\007chipnum\030\004 \001(\r:"
    "\0010\"\220\001\n\014GvgGuildInfo\022\r\n\005index\030\001 \001(\r\022\017\n\007gu"
    "ildid\030\002 \001(\004\022\021\n\tguildname\030\003 \001(\t\022\014\n\004icon\030\004"
    " \001(\t\022\031\n\nmetal_live\030\005 \001(\010:\005false\022$\n\007cryst"
    "al\030\006 \001(\0132\023.Cmd.GvgCrystalInfo\"\330\001\n\024SuperG"
    "vgSyncFubenCmd\022)\n\003cmd\030\001 \001(\0162\014.Cmd.Comman"
    "d:\016FUBEN_PROTOCMD\0222\n\005param\030\002 \001(\0162\017.Cmd.F"
    "uBenParam:\022SUPERGVG_INFO_SYNC\022!\n\006towers\030"
    "\003 \003(\0132\021.Cmd.GvgTowerData\022$\n\tguildinfo\030\004 "
    "\003(\0132\021.Cmd.GvgGuildInfo\022\030\n\rfirebegintime\030"
    "\005 \001(\r:\0010\"\241\001\n\026GvgTowerUpdateFubenCmd\022)\n\003c"
    "md\030\001 \001(\0162\014.Cmd.Command:\016FUBEN_PROTOCMD\0229"
    "\n\005param\030\002 \001(\0162\017.Cmd.FuBenParam:\031SUPERGVG"
    "_TOWERINFO_UPDATE\022!\n\006towers\030\003 \003(\0132\021.Cmd."
    "GvgTowerData\"\206\001\n\023GvgMetalDieFubenCmd\022)\n\003"
    "cmd\030\001 \001(\0162\014.Cmd.Command:\016FUBEN_PROTOCMD\022"
    "2\n\005param\030\002 \001(\0162\017.Cmd.FuBenParam:\022SUPERGV"
    "G_METAL_DIE\022\020\n\005index\030\003 \001(\r:\0010\"\247\001\n\030GvgCry"
    "stalUpdateFubenCmd\022)\n\003cmd\030\001 \001(\0162\014.Cmd.Co"
    "mmand:\016FUBEN_PROTOCMD\0229\n\005param\030\002 \001(\0162\017.C"
    "md.FuBenParam:\031SUPERGVG_METALINFO_UPDATE"
    "\022%\n\010crystals\030\003 \003(\0132\023.Cmd.GvgCrystalInfo\""
    "\270\001\n\031QueryGvgTowerInfoFubenCmd\022)\n\003cmd\030\001 \001"
    "(\0162\014.Cmd.Command:\016FUBEN_PROTOCMD\0228\n\005para"
    "m\030\002 \001(\0162\017.Cmd.FuBenParam:\030SUPERGVG_QUERY"
    "_TOWERINFO\022!\n\005etype\030\003 \002(\0162\022.Cmd.EGvgTowe"
    "rType\022\023\n\004open\030\004 \001(\010:\005false\"/\n\016RewardItem"
    "Data\022\016\n\006itemid\030\001 \001(\r\022\r\n\005count\030\002 \001(\r\"W\n\022S"
    "uperGvgRewardData\022\017\n\007guildid\030\001 \001(\004\022\014\n\004ra"
    "nk\030\002 \001(\r\022\"\n\005items\030\003 \003(\0132\023.Cmd.RewardItem"
    "Data\"\252\001\n\032SuperGvgRewardInfoFubenCmd\022)\n\003c"
    "md\030\001 \001(\0162\014.Cmd.Command:\016FUBEN_PROTOCMD\0224"
    "\n\005param\030\002 \001(\0162\017.Cmd.FuBenParam:\024SUPERGVG"
    "_REWARD_INFO\022+\n\nrewardinfo\030\003 \003(\0132\027.Cmd.S"
    "uperGvgRewardData\"\316\001\n\020SuperGvgUserData\022\020"
    "\n\010username\030\001 \002(\t\022\022\n\nprofession\030\002 \002(\r\022\026\n\013"
    "killusernum\030\003 \001(\r:\0010\022\021\n\006dienum\030\004 \001(\r:\0010\022"
    "\022\n\007chipnum\030\005 \001(\r:\0010\022\024\n\ttowertime\030\006 \001(\r:\001"
    "0\022\021\n\006healhp\030\007 \001(\r:\0010\022\024\n\trelivenum\030\010 \001(\r:"
    "\0010\022\026\n\013metaldamage\030\t \001(\r:\0010\"R\n\025SuperGvgGu"
    "ildUserData\022\017\n\007guildid\030\001 \002(\004\022(\n\tuserdata"
    "s\030\002 \003(\0132\025.Cmd.SuperGvgUserData\"\267\001\n\035Super"
    "GvgQueryUserDataFubenCmd\022)\n\003cmd\030\001 \001(\0162\014."
    "Cmd.Command:\016FUBEN_PROTOCMD\0228\n\005param\030\002 \001"
    "(\0162\017.Cmd.FuBenParam:\030SUPERGVG_QUERY_USER"
    "_DATA\0221\n\rguilduserdata\030\003 \003(\0132\032.Cmd.Super"
    "GvgGuildUserData\"\204\001\n\021MvpBattleTeamData\022\016"
    "\n\006teamid\030\001 \002(\004\022\020\n\010teamname\030\002 \001(\t\022\020\n\010kill"
    "mvps\030\003 \003(\r\022\021\n\tkillminis\030\004 \003(\r\022\026\n\013killuse"
    "rnum\030\005 \001(\r:\0010\022\020\n\010deadboss\030\006 \003(\r\"\241\001\n\027MvpB"
    "attleReportFubenCmd\022)\n\003cmd\030\001 \001(\0162\014.Cmd.C"
    "ommand:\016FUBEN_PROTOCMD\0224\n\005param\030\002 \001(\0162\017."
    "Cmd.FuBenParam:\024MVPBATTLE_END_REPORT\022%\n\005"
    "datas\030\003 \003(\0132\026.Cmd.MvpBattleTeamData\"\233\001\n\023"
    "TeamPwsRaidUserInfo\022\016\n\006charid\030\001 \001(\004\022\014\n\004n"
    "ame\030\002 \001(\t\022\017\n\007killnum\030\003 \001(\r\022\014\n\004heal\030\004 \001(\r"
    "\022\021\n\tkillscore\030\005 \001(\r\022\021\n\tballscore\030\006 \001(\r\022\021"
    "\n\tbuffscore\030\007 \001(\r\022\016\n\006dienum\030\010 \001(\r\"u\n\023Tea"
    "mPwsRaidTeamInfo\022\016\n\006teamid\030\001 \001(\004\022!\n\005colo"
    "r\030\002 \001(\0162\022.Cmd.ETeamPwsColor\022+\n\tuserinfos"
    "\030\003 \003(\0132\030.Cmd.TeamPwsRaidUserInfo\"\262\001\n\034Que"
    "ryTeamPwsUserInfoFubenCmd\022)\n\003cmd\030\001 \001(\0162\014"
    ".Cmd.Command:\016FUBEN_PROTOCMD\022;\n\005param\030\002 "
    "\001(\0162\017.Cmd.FuBenParam:\033QUERY_RAID_TEAMPWS"
    "_USERINFO\022*\n\010teaminfo\030\003 \003(\0132\030.Cmd.TeamPw"
    "sRaidTeamInfo\"\360\001\n\025TeamPwsReportFubenCmd\022"
    ")\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\016FUBEN_PROTOC"
    "MD\0222\n\005param\030\002 \001(\0162\017.Cmd.FuBenParam:\022TEAM"
    "PWS_END_REPORT\022*\n\010teaminfo\030\003 \003(\0132\030.Cmd.T"
    "eamPwsRaidTeamInfo\022\'\n\013mvpuserinfo\030\004 \001(\0132"
    "\022.Cmd.QueryUserInfo\022#\n\007winteam\030\005 \002(\0162\022.C"
    "md.ETeamPwsColor\"\271\001\n\023TeamPwsInfoSyncData"
    "\022\016\n\006teamid\030\001 \001(\004\022\020\n\010teamname\030\002 \001(\t\022!\n\005co"
    "lor\030\003 \001(\0162\022.Cmd.ETeamPwsColor\022\020\n\005score\030\004"
    " \001(\r:\0010\022\023\n\010effectcd\030\005 \001(\r:\0010\022\022\n\007magicid\030"
    "\006 \001(\r:\0010\022\"\n\005balls\030\007 \003(\0162\023.Cmd.EMagicBall"
    "Type\"\264\001\n\027TeamPwsInfoSyncFubenCmd\022)\n\003cmd\030"
    "\001 \001(\0162\014.Cmd.Command:\016FUBEN_PROTOCMD\0221\n\005p"
    "aram\030\002 \001(\0162\017.Cmd.FuBenParam:\021TEAMPWS_SYN"
    "C_INFO\022*\n\010teaminfo\030\003 \003(\0132\030.Cmd.TeamPwsIn"
    "foSyncData\022\017\n\007endtime\030\004 \001(\r\"\247\001\n\031UpdateTe"
    "amPwsInfoFubenCmd\022)\n\003cmd\030\001 \001(\0162\014.Cmd.Com"
    "mand:\016FUBEN_PROTOCMD\0223\n\005param\030\002 \001(\0162\017.Cm"
    "d.FuBenParam:\023TEAMPWS_UPDATE_INFO\022*\n\010tea"
    "minfo\030\003 \003(\0132\030.Cmd.TeamPwsInfoSyncData\"\216\001"
    "\n\032SelectTeamPwsMagicFubenCmd\022)\n\003cmd\030\001 \001("
    "\0162\014.Cmd.Command:\016FUBEN_PROTOCMD\0224\n\005param"
    "\030\002 \001(\0162\017.Cmd.FuBenParam:\024TEAMPWS_SELECT_"
    "MAGIC\022\017\n\007magicid\030\003 \002(\r\"}\n\030InviteSummonBo"
    "ssFubenCmd\022)\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\016F"
    "UBEN_PROTOCMD\0226\n\005param\030\002 \001(\0162\017.Cmd.FuBen"
    "Param:\026INVITE_SUMMON_DEADBOSS\"\270\001\n\027ReplyS"
    "ummonBossFubenCmd\022)\n\003cmd\030\001 \001(\0162\014.Cmd.Com"
    "mand:\016FUBEN_PROTOCMD\0225\n\005param\030\002 \001(\0162\017.Cm"
    "d.FuBenParam:\025REPLY_SUMMON_DEADBOSS\022\025\n\006i"
    "sfull\030\003 \001(\010:\005false\022\024\n\005agree\030\004 \001(\010:\005false"
    "\022\016\n\006charid\030\005 \001(\004*\261\t\n\nFuBenParam\022\030\n\024TRACK"
    "_FUBEN_USER_CMD\020\001\022\027\n\023FAIL_FUBEN_USER_CMD"
    "\020\002\022\030\n\024LEAVE_FUBEN_USER_CMD\020\003\022\032\n\026SUCCESS_"
    "FUBEN_USER_CMD\020\004\022\030\n\024WORLD_STAGE_USER_CMD"
    "\020\005\022\026\n\022SUB_STAGE_USER_CMD\020\006\022\030\n\024START_STAG"
    "E_USER_CMD\020\007\022\035\n\031GET_REWARD_STAGE_USER_CM"
    "D\020\010\022\034\n\030STAGE_STEP_STAR_USER_CMD\020\t\022\027\n\023JOI"
    "N_FUBEN_USER_CMD\020\n\022\032\n\026MONSTER_COUNT_USER"
    "_CMD\020\013\022\023\n\017FUBEN_STEP_SYNC\020\014\022\023\n\017FUBEN_GOA"
    "L_SYNC\020\r\022\024\n\020FUBEN_CLEAR_SYNC\020\017\022\030\n\024GUILD_"
    "RAID_USER_INFO\020\020\022\027\n\023GUILD_RAID_GATE_OPT\020"
    "\021\022\023\n\017GUILD_FIRE_INFO\020\022\022\023\n\017GUILD_FIRE_STO"
    "P\020\023\022\025\n\021GUILD_FIRE_DANGER\020\024\022\026\n\022GUILD_FIRE"
    "_METALHP\020\025\022\023\n\017GUILD_FIRE_CALM\020\026\022\033\n\027GUILD"
    "_FIRE_CHANGE_GUILD\020\027\022\026\n\022GUILD_FIRE_RESTA"
    "RT\020\030\022\025\n\021GUILD_FIRE_STATUS\020\031\022\025\n\021GVG_DATA_"
    "SYNC_CMD\020\032\022\027\n\023GVG_DATA_UPDATE_CMD\020\033\022 \n\034G"
    "UILD_FIRE_CHANGE_GUILD_NAME\020\034\022\032\n\026MVPBATT"
    "LE_SYNC_MVPINFO\020\035\022\026\n\022MVPBATTLE_BOSS_DIE\020"
    "\036\022\027\n\023FUBEN_USERNUM_COUNT\020\037\022\026\n\022SUPERGVG_I"
    "NFO_SYNC\020 \022\035\n\031SUPERGVG_TOWERINFO_UPDATE\020"
    "!\022\035\n\031SUPERGVG_METALINFO_UPDATE\020\"\022\034\n\030SUPE"
    "RGVG_QUERY_TOWERINFO\020#\022\030\n\024SUPERGVG_REWAR"
    "D_INFO\020$\022\034\n\030SUPERGVG_QUERY_USER_DATA\020%\022\030"
    "\n\024MVPBATTLE_END_REPORT\020&\022\026\n\022SUPERGVG_MET"
    "AL_DIE\020\'\022\032\n\026INVITE_SUMMON_DEADBOSS\020(\022\031\n\025"
    "REPLY_SUMMON_DEADBOSS\020)\022\037\n\033QUERY_RAID_TE"
    "AMPWS_USERINFO\020*\022\026\n\022TEAMPWS_END_REPORT\020+"
    "\022\025\n\021TEAMPWS_SYNC_INFO\020,\022\030\n\024TEAMPWS_SELEC"
    "T_MAGIC\020-\022\030\n\024TEAMPWS_UPDATE_MAGIC\020.\022\027\n\023T"
    "EAMPWS_UPDATE_INFO\020/*\254\005\n\tERaidType\022\021\n\rER"
    "AIDTYPE_MIN\020\000\022\031\n\025ERAIDTYPE_FERRISWHEEL\020\001"
    "\022\024\n\020ERAIDTYPE_NORMAL\020\002\022\026\n\022ERAIDTYPE_EXCH"
    "ANGE\020\003\022\023\n\017ERAIDTYPE_TOWER\020\004\022\030\n\024ERAIDTYPE"
    "_LABORATORY\020\005\022\035\n\031ERAIDTYPE_EXCHANGEGALLE"
    "RY\020\006\022\022\n\016ERAIDTYPE_SEAL\020\007\022\027\n\023ERAIDTYPE_RA"
    "IDTEMP2\020\010\022\022\n\016ERAIDTYPE_DOJO\020\t\022\023\n\017ERAIDTY"
    "PE_GUILD\020\n\022\027\n\023ERAIDTYPE_RAIDTEMP4\020\013\022\027\n\023E"
    "RAIDTYPE_ITEMIMAGE\020\014\022\027\n\023ERAIDTYPE_GUILDR"
    "AID\020\r\022\027\n\023ERAIDTYPE_GUILDFIRE\020\016\022\025\n\021ERAIDT"
    "YPE_PVP_LLH\020\025\022\026\n\022ERAIDTYPE_PVP_SMZL\020\026\022\026\n"
    "\022ERAIDTYPE_PVP_HLJS\020\027\022\026\n\022ERAIDTYPE_DATEL"
    "AND\020\030\022\027\n\023ERAIDTYPE_PVP_POLLY\020\031\022\025\n\021ERAIDT"
    "YPE_WEDDING\020\032\022$\n ERAIDTYPE_DIVORCE_ROLLE"
    "R_COASTER\020\033\022\025\n\021ERAIDTYPE_PVECARD\020\034\022\027\n\023ER"
    "AIDTYPE_MVPBATTLE\020\035\022\026\n\022ERAIDTYPE_SUPERGV"
    "G\020\036\022\024\n\020ERAIDTYPE_ALTMAN\020\037\022\025\n\021ERAIDTYPE_T"
    "EAMPWS\020 \022\021\n\rERAIDTYPE_MAX\020!*y\n\017EGuildGat"
    "eState\022\027\n\023EGUILDGATESTATE_MIN\020\000\022\030\n\024EGUIL"
    "DGATESTATE_LOCK\020\001\022\031\n\025EGUILDGATESTATE_CLO"
    "SE\020\002\022\030\n\024EGUILDGATESTATE_OPEN\020\003*Z\n\rEGuild"
    "GateOpt\022\030\n\024EGUILDGATEOPT_UNLOCK\020\001\022\026\n\022EGU"
    "ILDGATEOPT_OPEN\020\002\022\027\n\023EGUILDGATEOPT_ENTER"
    "\020\003*g\n\020EGuildFireResult\022\030\n\024EGUILDFIRERESU"
    "LT_DEF\020\001\022\034\n\030EGUILDFIRERESULT_DEFSPEC\020\002\022\033"
    "\n\027EGUILDFIRERESULT_ATTACK\020\003*\322\001\n\014EGvgData"
    "Type\022\020\n\014EGVGDATA_MIN\020\000\022\027\n\023EGVGDATA_PARTI"
    "NTIME\020\001\022\024\n\020EGVGDATA_KILLMON\020\002\022\023\n\017EGVGDAT"
    "A_RELIVE\020\003\022\022\n\016EGVGDATA_EXPEL\020\004\022\025\n\021EGVGDA"
    "TA_DAMMETAL\020\005\022\026\n\022EGVGDATA_KILLMETAL\020\006\022\025\n"
    "\021EGVGDATA_KILLUSER\020\007\022\022\n\016EGVGDATA_HONOR\020\010"
    "*a\n\016EGvgTowerState\022\033\n\027EGVGTOWERSTATE_INI"
    "TFREE\020\001\022\031\n\025EGVGTOWERSTATE_OCCUPY\020\002\022\027\n\023EG"
    "VGTOWERSTATE_FREE\020\003*n\n\rEGvgTowerType\022\025\n\021"
    "EGVGTOWERTYPE_MIN\020\000\022\026\n\022EGVGTOWERTYPE_COR"
    "E\020\001\022\026\n\022EGVGTOWERTYPE_WEST\020\002\022\026\n\022EGVGTOWER"
    "TYPE_EAST\020\003*4\n\rETeamPwsColor\022\020\n\014ETEAMPWS"
    "_RED\020\001\022\021\n\rETEAMPWS_BLUE\020\002*z\n\016EMagicBallT"
    "ype\022\022\n\016EMAGICBALL_MIN\020\000\022\023\n\017EMAGICBALL_WI"
    "ND\020\001\022\024\n\020EMAGICBALL_EARTH\020\002\022\024\n\020EMAGICBALL"
    "_WATER\020\003\022\023\n\017EMAGICBALL_FIRE\020\004", 12629);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "FuBenCmd.proto", &protobuf_RegisterTypes);
  TrackData::default_instance_ = new TrackData();
  RaidPConfig::default_instance_ = new RaidPConfig();
  TrackFuBenUserCmd::default_instance_ = new TrackFuBenUserCmd();
  FailFuBenUserCmd::default_instance_ = new FailFuBenUserCmd();
  LeaveFuBenUserCmd::default_instance_ = new LeaveFuBenUserCmd();
  SuccessFuBenUserCmd::default_instance_ = new SuccessFuBenUserCmd();
  WorldStageItem::default_instance_ = new WorldStageItem();
  StageStepItem::default_instance_ = new StageStepItem();
  WorldStageUserCmd::default_instance_ = new WorldStageUserCmd();
  StageNormalStepItem::default_instance_ = new StageNormalStepItem();
  StageHardStepItem::default_instance_ = new StageHardStepItem();
  StageStepUserCmd::default_instance_ = new StageStepUserCmd();
  StartStageUserCmd::default_instance_ = new StartStageUserCmd();
  GetRewardStageUserCmd::default_instance_ = new GetRewardStageUserCmd();
  StageStepStarUserCmd::default_instance_ = new StageStepStarUserCmd();
  MonsterCountUserCmd::default_instance_ = new MonsterCountUserCmd();
  FubenStepSyncCmd::default_instance_ = new FubenStepSyncCmd();
  FuBenProgressSyncCmd::default_instance_ = new FuBenProgressSyncCmd();
  FuBenClearInfoCmd::default_instance_ = new FuBenClearInfoCmd();
  GuildGateData::default_instance_ = new GuildGateData();
  UserGuildRaidFubenCmd::default_instance_ = new UserGuildRaidFubenCmd();
  GuildGateOptCmd::default_instance_ = new GuildGateOptCmd();
  GuildFireInfoFubenCmd::default_instance_ = new GuildFireInfoFubenCmd();
  GuildFireStopFubenCmd::default_instance_ = new GuildFireStopFubenCmd();
  GuildFireDangerFubenCmd::default_instance_ = new GuildFireDangerFubenCmd();
  GuildFireMetalHpFubenCmd::default_instance_ = new GuildFireMetalHpFubenCmd();
  GuildFireCalmFubenCmd::default_instance_ = new GuildFireCalmFubenCmd();
  GuildFireNewDefFubenCmd::default_instance_ = new GuildFireNewDefFubenCmd();
  GuildFireRestartFubenCmd::default_instance_ = new GuildFireRestartFubenCmd();
  GuildFireStatusFubenCmd::default_instance_ = new GuildFireStatusFubenCmd();
  GvgData::default_instance_ = new GvgData();
  GvgDataSyncCmd::default_instance_ = new GvgDataSyncCmd();
  GvgDataUpdateCmd::default_instance_ = new GvgDataUpdateCmd();
  GvgDefNameChangeFubenCmd::default_instance_ = new GvgDefNameChangeFubenCmd();
  SyncMvpInfoFubenCmd::default_instance_ = new SyncMvpInfoFubenCmd();
  BossDieFubenCmd::default_instance_ = new BossDieFubenCmd();
  UpdateUserNumFubenCmd::default_instance_ = new UpdateUserNumFubenCmd();
  GvgTowerValue::default_instance_ = new GvgTowerValue();
  GvgTowerData::default_instance_ = new GvgTowerData();
  GvgCrystalInfo::default_instance_ = new GvgCrystalInfo();
  GvgGuildInfo::default_instance_ = new GvgGuildInfo();
  SuperGvgSyncFubenCmd::default_instance_ = new SuperGvgSyncFubenCmd();
  GvgTowerUpdateFubenCmd::default_instance_ = new GvgTowerUpdateFubenCmd();
  GvgMetalDieFubenCmd::default_instance_ = new GvgMetalDieFubenCmd();
  GvgCrystalUpdateFubenCmd::default_instance_ = new GvgCrystalUpdateFubenCmd();
  QueryGvgTowerInfoFubenCmd::default_instance_ = new QueryGvgTowerInfoFubenCmd();
  RewardItemData::default_instance_ = new RewardItemData();
  SuperGvgRewardData::default_instance_ = new SuperGvgRewardData();
  SuperGvgRewardInfoFubenCmd::default_instance_ = new SuperGvgRewardInfoFubenCmd();
  SuperGvgUserData::default_instance_ = new SuperGvgUserData();
  SuperGvgGuildUserData::default_instance_ = new SuperGvgGuildUserData();
  SuperGvgQueryUserDataFubenCmd::default_instance_ = new SuperGvgQueryUserDataFubenCmd();
  MvpBattleTeamData::default_instance_ = new MvpBattleTeamData();
  MvpBattleReportFubenCmd::default_instance_ = new MvpBattleReportFubenCmd();
  TeamPwsRaidUserInfo::default_instance_ = new TeamPwsRaidUserInfo();
  TeamPwsRaidTeamInfo::default_instance_ = new TeamPwsRaidTeamInfo();
  QueryTeamPwsUserInfoFubenCmd::default_instance_ = new QueryTeamPwsUserInfoFubenCmd();
  TeamPwsReportFubenCmd::default_instance_ = new TeamPwsReportFubenCmd();
  TeamPwsInfoSyncData::default_instance_ = new TeamPwsInfoSyncData();
  TeamPwsInfoSyncFubenCmd::default_instance_ = new TeamPwsInfoSyncFubenCmd();
  UpdateTeamPwsInfoFubenCmd::default_instance_ = new UpdateTeamPwsInfoFubenCmd();
  SelectTeamPwsMagicFubenCmd::default_instance_ = new SelectTeamPwsMagicFubenCmd();
  InviteSummonBossFubenCmd::default_instance_ = new InviteSummonBossFubenCmd();
  ReplySummonBossFubenCmd::default_instance_ = new ReplySummonBossFubenCmd();
  TrackData::default_instance_->InitAsDefaultInstance();
  RaidPConfig::default_instance_->InitAsDefaultInstance();
  TrackFuBenUserCmd::default_instance_->InitAsDefaultInstance();
  FailFuBenUserCmd::default_instance_->InitAsDefaultInstance();
  LeaveFuBenUserCmd::default_instance_->InitAsDefaultInstance();
  SuccessFuBenUserCmd::default_instance_->InitAsDefaultInstance();
  WorldStageItem::default_instance_->InitAsDefaultInstance();
  StageStepItem::default_instance_->InitAsDefaultInstance();
  WorldStageUserCmd::default_instance_->InitAsDefaultInstance();
  StageNormalStepItem::default_instance_->InitAsDefaultInstance();
  StageHardStepItem::default_instance_->InitAsDefaultInstance();
  StageStepUserCmd::default_instance_->InitAsDefaultInstance();
  StartStageUserCmd::default_instance_->InitAsDefaultInstance();
  GetRewardStageUserCmd::default_instance_->InitAsDefaultInstance();
  StageStepStarUserCmd::default_instance_->InitAsDefaultInstance();
  MonsterCountUserCmd::default_instance_->InitAsDefaultInstance();
  FubenStepSyncCmd::default_instance_->InitAsDefaultInstance();
  FuBenProgressSyncCmd::default_instance_->InitAsDefaultInstance();
  FuBenClearInfoCmd::default_instance_->InitAsDefaultInstance();
  GuildGateData::default_instance_->InitAsDefaultInstance();
  UserGuildRaidFubenCmd::default_instance_->InitAsDefaultInstance();
  GuildGateOptCmd::default_instance_->InitAsDefaultInstance();
  GuildFireInfoFubenCmd::default_instance_->InitAsDefaultInstance();
  GuildFireStopFubenCmd::default_instance_->InitAsDefaultInstance();
  GuildFireDangerFubenCmd::default_instance_->InitAsDefaultInstance();
  GuildFireMetalHpFubenCmd::default_instance_->InitAsDefaultInstance();
  GuildFireCalmFubenCmd::default_instance_->InitAsDefaultInstance();
  GuildFireNewDefFubenCmd::default_instance_->InitAsDefaultInstance();
  GuildFireRestartFubenCmd::default_instance_->InitAsDefaultInstance();
  GuildFireStatusFubenCmd::default_instance_->InitAsDefaultInstance();
  GvgData::default_instance_->InitAsDefaultInstance();
  GvgDataSyncCmd::default_instance_->InitAsDefaultInstance();
  GvgDataUpdateCmd::default_instance_->InitAsDefaultInstance();
  GvgDefNameChangeFubenCmd::default_instance_->InitAsDefaultInstance();
  SyncMvpInfoFubenCmd::default_instance_->InitAsDefaultInstance();
  BossDieFubenCmd::default_instance_->InitAsDefaultInstance();
  UpdateUserNumFubenCmd::default_instance_->InitAsDefaultInstance();
  GvgTowerValue::default_instance_->InitAsDefaultInstance();
  GvgTowerData::default_instance_->InitAsDefaultInstance();
  GvgCrystalInfo::default_instance_->InitAsDefaultInstance();
  GvgGuildInfo::default_instance_->InitAsDefaultInstance();
  SuperGvgSyncFubenCmd::default_instance_->InitAsDefaultInstance();
  GvgTowerUpdateFubenCmd::default_instance_->InitAsDefaultInstance();
  GvgMetalDieFubenCmd::default_instance_->InitAsDefaultInstance();
  GvgCrystalUpdateFubenCmd::default_instance_->InitAsDefaultInstance();
  QueryGvgTowerInfoFubenCmd::default_instance_->InitAsDefaultInstance();
  RewardItemData::default_instance_->InitAsDefaultInstance();
  SuperGvgRewardData::default_instance_->InitAsDefaultInstance();
  SuperGvgRewardInfoFubenCmd::default_instance_->InitAsDefaultInstance();
  SuperGvgUserData::default_instance_->InitAsDefaultInstance();
  SuperGvgGuildUserData::default_instance_->InitAsDefaultInstance();
  SuperGvgQueryUserDataFubenCmd::default_instance_->InitAsDefaultInstance();
  MvpBattleTeamData::default_instance_->InitAsDefaultInstance();
  MvpBattleReportFubenCmd::default_instance_->InitAsDefaultInstance();
  TeamPwsRaidUserInfo::default_instance_->InitAsDefaultInstance();
  TeamPwsRaidTeamInfo::default_instance_->InitAsDefaultInstance();
  QueryTeamPwsUserInfoFubenCmd::default_instance_->InitAsDefaultInstance();
  TeamPwsReportFubenCmd::default_instance_->InitAsDefaultInstance();
  TeamPwsInfoSyncData::default_instance_->InitAsDefaultInstance();
  TeamPwsInfoSyncFubenCmd::default_instance_->InitAsDefaultInstance();
  UpdateTeamPwsInfoFubenCmd::default_instance_->InitAsDefaultInstance();
  SelectTeamPwsMagicFubenCmd::default_instance_->InitAsDefaultInstance();
  InviteSummonBossFubenCmd::default_instance_->InitAsDefaultInstance();
  ReplySummonBossFubenCmd::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_FuBenCmd_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_FuBenCmd_2eproto {
  StaticDescriptorInitializer_FuBenCmd_2eproto() {
    protobuf_AddDesc_FuBenCmd_2eproto();
  }
} static_descriptor_initializer_FuBenCmd_2eproto_;
const ::google::protobuf::EnumDescriptor* FuBenParam_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FuBenParam_descriptor_;
}
bool FuBenParam_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ERaidType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ERaidType_descriptor_;
}
bool ERaidType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EGuildGateState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EGuildGateState_descriptor_;
}
bool EGuildGateState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EGuildGateOpt_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EGuildGateOpt_descriptor_;
}
bool EGuildGateOpt_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EGuildFireResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EGuildFireResult_descriptor_;
}
bool EGuildFireResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EGvgDataType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EGvgDataType_descriptor_;
}
bool EGvgDataType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EGvgTowerState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EGvgTowerState_descriptor_;
}
bool EGvgTowerState_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EGvgTowerType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EGvgTowerType_descriptor_;
}
bool EGvgTowerType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ETeamPwsColor_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ETeamPwsColor_descriptor_;
}
bool ETeamPwsColor_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EMagicBallType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EMagicBallType_descriptor_;
}
bool EMagicBallType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int TrackData::kStarFieldNumber;
const int TrackData::kIdFieldNumber;
#endif  // !_MSC_VER

TrackData::TrackData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TrackData)
}

void TrackData::InitAsDefaultInstance() {
}

TrackData::TrackData(const TrackData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TrackData)
}

void TrackData::SharedCtor() {
  _cached_size_ = 0;
  star_ = 0u;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrackData::~TrackData() {
  // @@protoc_insertion_point(destructor:Cmd.TrackData)
  SharedDtor();
}

void TrackData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TrackData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrackData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrackData_descriptor_;
}

const TrackData& TrackData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FuBenCmd_2eproto();
  return *default_instance_;
}

TrackData* TrackData::default_instance_ = NULL;

TrackData* TrackData::New() const {
  return new TrackData;
}

void TrackData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TrackData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(star_, id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrackData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TrackData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 star = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TrackData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TrackData)
  return false;
#undef DO_
}

void TrackData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TrackData)
  // optional uint32 star = 1;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->star(), output);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TrackData)
}

::google::protobuf::uint8* TrackData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TrackData)
  // optional uint32 star = 1;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->star(), target);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TrackData)
  return target;
}

int TrackData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 star = 1;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star());
    }

    // optional uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrackData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrackData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrackData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrackData::MergeFrom(const TrackData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrackData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackData::CopyFrom(const TrackData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackData::IsInitialized() const {

  return true;
}

void TrackData::Swap(TrackData* other) {
  if (other != this) {
    std::swap(star_, other->star_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrackData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrackData_descriptor_;
  metadata.reflection = TrackData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RaidPConfig::kRaidIDFieldNumber;
const int RaidPConfig::kStarIDFieldNumber;
const int RaidPConfig::kAutoFieldNumber;
const int RaidPConfig::kWhetherTraceFieldNumber;
const int RaidPConfig::kDescInfoFieldNumber;
const int RaidPConfig::kContentFieldNumber;
const int RaidPConfig::kTraceInfoFieldNumber;
const int RaidPConfig::kParamsFieldNumber;
#endif  // !_MSC_VER

RaidPConfig::RaidPConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.RaidPConfig)
}

void RaidPConfig::InitAsDefaultInstance() {
  params_ = const_cast< ::Cmd::ConfigParam*>(&::Cmd::ConfigParam::default_instance());
}

RaidPConfig::RaidPConfig(const RaidPConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.RaidPConfig)
}

void RaidPConfig::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  raidid_ = 0u;
  starid_ = 0u;
  auto__ = 0u;
  whethertrace_ = 0u;
  descinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  traceinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  params_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RaidPConfig::~RaidPConfig() {
  // @@protoc_insertion_point(destructor:Cmd.RaidPConfig)
  SharedDtor();
}

void RaidPConfig::SharedDtor() {
  if (descinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete descinfo_;
  }
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (traceinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete traceinfo_;
  }
  if (this != default_instance_) {
    delete params_;
  }
}

void RaidPConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaidPConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaidPConfig_descriptor_;
}

const RaidPConfig& RaidPConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FuBenCmd_2eproto();
  return *default_instance_;
}

RaidPConfig* RaidPConfig::default_instance_ = NULL;

RaidPConfig* RaidPConfig::New() const {
  return new RaidPConfig;
}

void RaidPConfig::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RaidPConfig*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(raidid_, whethertrace_);
    if (has_descinfo()) {
      if (descinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        descinfo_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
    if (has_traceinfo()) {
      if (traceinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        traceinfo_->clear();
      }
    }
    if (has_params()) {
      if (params_ != NULL) params_->::Cmd::ConfigParam::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RaidPConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.RaidPConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 RaidID = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raidid_)));
          set_has_raidid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_starID;
        break;
      }

      // optional uint32 starID = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_starID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &starid_)));
          set_has_starid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Auto;
        break;
      }

      // optional uint32 Auto = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_Auto:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &auto__)));
          set_has_auto_();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_WhetherTrace;
        break;
      }

      // optional uint32 WhetherTrace = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_WhetherTrace:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &whethertrace_)));
          set_has_whethertrace();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_DescInfo;
        break;
      }

      // optional string DescInfo = 5;
      case 5: {
        if (tag == 42) {
         parse_DescInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_descinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->descinfo().data(), this->descinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "descinfo");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_Content;
        break;
      }

      // optional string Content = 6;
      case 6: {
        if (tag == 50) {
         parse_Content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_TraceInfo;
        break;
      }

      // optional string TraceInfo = 7;
      case 7: {
        if (tag == 58) {
         parse_TraceInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_traceinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->traceinfo().data(), this->traceinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "traceinfo");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_params;
        break;
      }

      // optional .Cmd.ConfigParam params = 8;
      case 8: {
        if (tag == 66) {
         parse_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_params()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.RaidPConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.RaidPConfig)
  return false;
#undef DO_
}

void RaidPConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.RaidPConfig)
  // optional uint32 RaidID = 1 [default = 0];
  if (has_raidid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->raidid(), output);
  }

  // optional uint32 starID = 2 [default = 0];
  if (has_starid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->starid(), output);
  }

  // optional uint32 Auto = 3 [default = 0];
  if (has_auto_()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->auto_(), output);
  }

  // optional uint32 WhetherTrace = 4 [default = 0];
  if (has_whethertrace()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->whethertrace(), output);
  }

  // optional string DescInfo = 5;
  if (has_descinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->descinfo().data(), this->descinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "descinfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->descinfo(), output);
  }

  // optional string Content = 6;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->content(), output);
  }

  // optional string TraceInfo = 7;
  if (has_traceinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->traceinfo().data(), this->traceinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "traceinfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->traceinfo(), output);
  }

  // optional .Cmd.ConfigParam params = 8;
  if (has_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->params(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.RaidPConfig)
}

::google::protobuf::uint8* RaidPConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.RaidPConfig)
  // optional uint32 RaidID = 1 [default = 0];
  if (has_raidid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->raidid(), target);
  }

  // optional uint32 starID = 2 [default = 0];
  if (has_starid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->starid(), target);
  }

  // optional uint32 Auto = 3 [default = 0];
  if (has_auto_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->auto_(), target);
  }

  // optional uint32 WhetherTrace = 4 [default = 0];
  if (has_whethertrace()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->whethertrace(), target);
  }

  // optional string DescInfo = 5;
  if (has_descinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->descinfo().data(), this->descinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "descinfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->descinfo(), target);
  }

  // optional string Content = 6;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->content(), target);
  }

  // optional string TraceInfo = 7;
  if (has_traceinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->traceinfo().data(), this->traceinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "traceinfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->traceinfo(), target);
  }

  // optional .Cmd.ConfigParam params = 8;
  if (has_params()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->params(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.RaidPConfig)
  return target;
}

int RaidPConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RaidID = 1 [default = 0];
    if (has_raidid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raidid());
    }

    // optional uint32 starID = 2 [default = 0];
    if (has_starid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->starid());
    }

    // optional uint32 Auto = 3 [default = 0];
    if (has_auto_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->auto_());
    }

    // optional uint32 WhetherTrace = 4 [default = 0];
    if (has_whethertrace()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->whethertrace());
    }

    // optional string DescInfo = 5;
    if (has_descinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->descinfo());
    }

    // optional string Content = 6;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional string TraceInfo = 7;
    if (has_traceinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->traceinfo());
    }

    // optional .Cmd.ConfigParam params = 8;
    if (has_params()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->params());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaidPConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RaidPConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RaidPConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RaidPConfig::MergeFrom(const RaidPConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_raidid()) {
      set_raidid(from.raidid());
    }
    if (from.has_starid()) {
      set_starid(from.starid());
    }
    if (from.has_auto_()) {
      set_auto_(from.auto_());
    }
    if (from.has_whethertrace()) {
      set_whethertrace(from.whethertrace());
    }
    if (from.has_descinfo()) {
      set_descinfo(from.descinfo());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_traceinfo()) {
      set_traceinfo(from.traceinfo());
    }
    if (from.has_params()) {
      mutable_params()->::Cmd::ConfigParam::MergeFrom(from.params());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RaidPConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaidPConfig::CopyFrom(const RaidPConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaidPConfig::IsInitialized() const {

  return true;
}

void RaidPConfig::Swap(RaidPConfig* other) {
  if (other != this) {
    std::swap(raidid_, other->raidid_);
    std::swap(starid_, other->starid_);
    std::swap(auto__, other->auto__);
    std::swap(whethertrace_, other->whethertrace_);
    std::swap(descinfo_, other->descinfo_);
    std::swap(content_, other->content_);
    std::swap(traceinfo_, other->traceinfo_);
    std::swap(params_, other->params_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RaidPConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaidPConfig_descriptor_;
  metadata.reflection = RaidPConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrackFuBenUserCmd::kCmdFieldNumber;
const int TrackFuBenUserCmd::kParamFieldNumber;
const int TrackFuBenUserCmd::kDataFieldNumber;
const int TrackFuBenUserCmd::kDmapidFieldNumber;
const int TrackFuBenUserCmd::kEndtimeFieldNumber;
#endif  // !_MSC_VER

TrackFuBenUserCmd::TrackFuBenUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TrackFuBenUserCmd)
}

void TrackFuBenUserCmd::InitAsDefaultInstance() {
}

TrackFuBenUserCmd::TrackFuBenUserCmd(const TrackFuBenUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TrackFuBenUserCmd)
}

void TrackFuBenUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 11;
  param_ = 1;
  dmapid_ = 0u;
  endtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrackFuBenUserCmd::~TrackFuBenUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.TrackFuBenUserCmd)
  SharedDtor();
}

void TrackFuBenUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TrackFuBenUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrackFuBenUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrackFuBenUserCmd_descriptor_;
}

const TrackFuBenUserCmd& TrackFuBenUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FuBenCmd_2eproto();
  return *default_instance_;
}

TrackFuBenUserCmd* TrackFuBenUserCmd::default_instance_ = NULL;

TrackFuBenUserCmd* TrackFuBenUserCmd::New() const {
  return new TrackFuBenUserCmd;
}

void TrackFuBenUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TrackFuBenUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 27) {
    ZR_(dmapid_, endtime_);
    cmd_ = 11;
    param_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrackFuBenUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TrackFuBenUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.FuBenParam param = 2 [default = TRACK_FUBEN_USER_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::FuBenParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::FuBenParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // repeated .Cmd.TrackData data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        if (input->ExpectTag(32)) goto parse_dmapid;
        break;
      }

      // optional uint32 dmapid = 4;
      case 4: {
        if (tag == 32) {
         parse_dmapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dmapid_)));
          set_has_dmapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_endtime;
        break;
      }

      // optional uint32 endtime = 5;
      case 5: {
        if (tag == 40) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TrackFuBenUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TrackFuBenUserCmd)
  return false;
#undef DO_
}

void TrackFuBenUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TrackFuBenUserCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.FuBenParam param = 2 [default = TRACK_FUBEN_USER_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.TrackData data = 3;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(i), output);
  }

  // optional uint32 dmapid = 4;
  if (has_dmapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dmapid(), output);
  }

  // optional uint32 endtime = 5;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->endtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TrackFuBenUserCmd)
}

::google::protobuf::uint8* TrackFuBenUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TrackFuBenUserCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.FuBenParam param = 2 [default = TRACK_FUBEN_USER_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.TrackData data = 3;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(i), target);
  }

  // optional uint32 dmapid = 4;
  if (has_dmapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->dmapid(), target);
  }

  // optional uint32 endtime = 5;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->endtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TrackFuBenUserCmd)
  return target;
}

int TrackFuBenUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.FuBenParam param = 2 [default = TRACK_FUBEN_USER_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 dmapid = 4;
    if (has_dmapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dmapid());
    }

    // optional uint32 endtime = 5;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endtime());
    }

  }
  // repeated .Cmd.TrackData data = 3;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrackFuBenUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrackFuBenUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrackFuBenUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrackFuBenUserCmd::MergeFrom(const TrackFuBenUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_dmapid()) {
      set_dmapid(from.dmapid());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrackFuBenUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackFuBenUserCmd::CopyFrom(const TrackFuBenUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackFuBenUserCmd::IsInitialized() const {

  return true;
}

void TrackFuBenUserCmd::Swap(TrackFuBenUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    data_.Swap(&other->data_);
    std::swap(dmapid_, other->dmapid_);
    std::swap(endtime_, other->endtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrackFuBenUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrackFuBenUserCmd_descriptor_;
  metadata.reflection = TrackFuBenUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FailFuBenUserCmd::kCmdFieldNumber;
const int FailFuBenUserCmd::kParamFieldNumber;
#endif  // !_MSC_VER

FailFuBenUserCmd::FailFuBenUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.FailFuBenUserCmd)
}

void FailFuBenUserCmd::InitAsDefaultInstance() {
}

FailFuBenUserCmd::FailFuBenUserCmd(const FailFuBenUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.FailFuBenUserCmd)
}

void FailFuBenUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 11;
  param_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FailFuBenUserCmd::~FailFuBenUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.FailFuBenUserCmd)
  SharedDtor();
}

void FailFuBenUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FailFuBenUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FailFuBenUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FailFuBenUserCmd_descriptor_;
}

const FailFuBenUserCmd& FailFuBenUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FuBenCmd_2eproto();
  return *default_instance_;
}

FailFuBenUserCmd* FailFuBenUserCmd::default_instance_ = NULL;

FailFuBenUserCmd* FailFuBenUserCmd::New() const {
  return new FailFuBenUserCmd;
}

void FailFuBenUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 11;
    param_ = 2;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FailFuBenUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.FailFuBenUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.FuBenParam param = 2 [default = FAIL_FUBEN_USER_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::FuBenParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::FuBenParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.FailFuBenUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.FailFuBenUserCmd)
  return false;
#undef DO_
}

void FailFuBenUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.FailFuBenUserCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.FuBenParam param = 2 [default = FAIL_FUBEN_USER_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.FailFuBenUserCmd)
}

::google::protobuf::uint8* FailFuBenUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.FailFuBenUserCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.FuBenParam param = 2 [default = FAIL_FUBEN_USER_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.FailFuBenUserCmd)
  return target;
}

int FailFuBenUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.FuBenParam param = 2 [default = FAIL_FUBEN_USER_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FailFuBenUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FailFuBenUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FailFuBenUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FailFuBenUserCmd::MergeFrom(const FailFuBenUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FailFuBenUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FailFuBenUserCmd::CopyFrom(const FailFuBenUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FailFuBenUserCmd::IsInitialized() const {

  return true;
}

void FailFuBenUserCmd::Swap(FailFuBenUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FailFuBenUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FailFuBenUserCmd_descriptor_;
  metadata.reflection = FailFuBenUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LeaveFuBenUserCmd::kCmdFieldNumber;
const int LeaveFuBenUserCmd::kParamFieldNumber;
const int LeaveFuBenUserCmd::kMapidFieldNumber;
#endif  // !_MSC_VER

LeaveFuBenUserCmd::LeaveFuBenUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.LeaveFuBenUserCmd)
}

void LeaveFuBenUserCmd::InitAsDefaultInstance() {
}

LeaveFuBenUserCmd::LeaveFuBenUserCmd(const LeaveFuBenUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.LeaveFuBenUserCmd)
}

void LeaveFuBenUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 11;
  param_ = 3;
  mapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LeaveFuBenUserCmd::~LeaveFuBenUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.LeaveFuBenUserCmd)
  SharedDtor();
}

void LeaveFuBenUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LeaveFuBenUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeaveFuBenUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LeaveFuBenUserCmd_descriptor_;
}

const LeaveFuBenUserCmd& LeaveFuBenUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FuBenCmd_2eproto();
  return *default_instance_;
}

LeaveFuBenUserCmd* LeaveFuBenUserCmd::default_instance_ = NULL;

LeaveFuBenUserCmd* LeaveFuBenUserCmd::New() const {
  return new LeaveFuBenUserCmd;
}

void LeaveFuBenUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 11;
    param_ = 3;
    mapid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LeaveFuBenUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.LeaveFuBenUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.FuBenParam param = 2 [default = LEAVE_FUBEN_USER_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::FuBenParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::FuBenParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mapid;
        break;
      }

      // optional uint32 mapid = 3;
      case 3: {
        if (tag == 24) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.LeaveFuBenUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.LeaveFuBenUserCmd)
  return false;
#undef DO_
}

void LeaveFuBenUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.LeaveFuBenUserCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.FuBenParam param = 2 [default = LEAVE_FUBEN_USER_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 mapid = 3;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mapid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.LeaveFuBenUserCmd)
}

::google::protobuf::uint8* LeaveFuBenUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.LeaveFuBenUserCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.FuBenParam param = 2 [default = LEAVE_FUBEN_USER_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 mapid = 3;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mapid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.LeaveFuBenUserCmd)
  return target;
}

int LeaveFuBenUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.FuBenParam param = 2 [default = LEAVE_FUBEN_USER_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 mapid = 3;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeaveFuBenUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LeaveFuBenUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LeaveFuBenUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LeaveFuBenUserCmd::MergeFrom(const LeaveFuBenUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LeaveFuBenUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaveFuBenUserCmd::CopyFrom(const LeaveFuBenUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaveFuBenUserCmd::IsInitialized() const {

  return true;
}

void LeaveFuBenUserCmd::Swap(LeaveFuBenUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LeaveFuBenUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LeaveFuBenUserCmd_descriptor_;
  metadata.reflection = LeaveFuBenUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SuccessFuBenUserCmd::kCmdFieldNumber;
const int SuccessFuBenUserCmd::kParamFieldNumber;
const int SuccessFuBenUserCmd::kTypeFieldNumber;
const int SuccessFuBenUserCmd::kParam1FieldNumber;
const int SuccessFuBenUserCmd::kParam2FieldNumber;
const int SuccessFuBenUserCmd::kParam3FieldNumber;
const int SuccessFuBenUserCmd::kParam4FieldNumber;
#endif  // !_MSC_VER

SuccessFuBenUserCmd::SuccessFuBenUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SuccessFuBenUserCmd)
}

void SuccessFuBenUserCmd::InitAsDefaultInstance() {
}

SuccessFuBenUserCmd::SuccessFuBenUserCmd(const SuccessFuBenUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SuccessFuBenUserCmd)
}

void SuccessFuBenUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 11;
  param_ = 4;
  type_ = 0;
  param1_ = 0u;
  param2_ = 0u;
  param3_ = 0u;
  param4_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SuccessFuBenUserCmd::~SuccessFuBenUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.SuccessFuBenUserCmd)
  SharedDtor();
}

void SuccessFuBenUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SuccessFuBenUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SuccessFuBenUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SuccessFuBenUserCmd_descriptor_;
}

const SuccessFuBenUserCmd& SuccessFuBenUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FuBenCmd_2eproto();
  return *default_instance_;
}

SuccessFuBenUserCmd* SuccessFuBenUserCmd::default_instance_ = NULL;

SuccessFuBenUserCmd* SuccessFuBenUserCmd::New() const {
  return new SuccessFuBenUserCmd;
}

void SuccessFuBenUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SuccessFuBenUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(type_, param4_);
    cmd_ = 11;
    param_ = 4;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SuccessFuBenUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SuccessFuBenUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.FuBenParam param = 2 [default = SUCCESS_FUBEN_USER_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::FuBenParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::FuBenParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .Cmd.ERaidType type = 3 [default = ERAIDTYPE_MIN];
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ERaidType_IsValid(value)) {
            set_type(static_cast< ::Cmd::ERaidType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_param1;
        break;
      }

      // optional uint32 param1 = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_param1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &param1_)));
          set_has_param1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_param2;
        break;
      }

      // optional uint32 param2 = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_param2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &param2_)));
          set_has_param2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_param3;
        break;
      }

      // optional uint32 param3 = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_param3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &param3_)));
          set_has_param3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_param4;
        break;
      }

      // optional uint32 param4 = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_param4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &param4_)));
          set_has_param4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SuccessFuBenUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SuccessFuBenUserCmd)
  return false;
#undef DO_
}

void SuccessFuBenUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SuccessFuBenUserCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.FuBenParam param = 2 [default = SUCCESS_FUBEN_USER_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.ERaidType type = 3 [default = ERAIDTYPE_MIN];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional uint32 param1 = 4 [default = 0];
  if (has_param1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->param1(), output);
  }

  // optional uint32 param2 = 5 [default = 0];
  if (has_param2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->param2(), output);
  }

  // optional uint32 param3 = 6 [default = 0];
  if (has_param3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->param3(), output);
  }

  // optional uint32 param4 = 7 [default = 0];
  if (has_param4()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->param4(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SuccessFuBenUserCmd)
}

::google::protobuf::uint8* SuccessFuBenUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SuccessFuBenUserCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.FuBenParam param = 2 [default = SUCCESS_FUBEN_USER_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.ERaidType type = 3 [default = ERAIDTYPE_MIN];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional uint32 param1 = 4 [default = 0];
  if (has_param1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->param1(), target);
  }

  // optional uint32 param2 = 5 [default = 0];
  if (has_param2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->param2(), target);
  }

  // optional uint32 param3 = 6 [default = 0];
  if (has_param3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->param3(), target);
  }

  // optional uint32 param4 = 7 [default = 0];
  if (has_param4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->param4(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SuccessFuBenUserCmd)
  return target;
}

int SuccessFuBenUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.FuBenParam param = 2 [default = SUCCESS_FUBEN_USER_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.ERaidType type = 3 [default = ERAIDTYPE_MIN];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 param1 = 4 [default = 0];
    if (has_param1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->param1());
    }

    // optional uint32 param2 = 5 [default = 0];
    if (has_param2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->param2());
    }

    // optional uint32 param3 = 6 [default = 0];
    if (has_param3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->param3());
    }

    // optional uint32 param4 = 7 [default = 0];
    if (has_param4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->param4());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SuccessFuBenUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SuccessFuBenUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SuccessFuBenUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SuccessFuBenUserCmd::MergeFrom(const SuccessFuBenUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_param1()) {
      set_param1(from.param1());
    }
    if (from.has_param2()) {
      set_param2(from.param2());
    }
    if (from.has_param3()) {
      set_param3(from.param3());
    }
    if (from.has_param4()) {
      set_param4(from.param4());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SuccessFuBenUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SuccessFuBenUserCmd::CopyFrom(const SuccessFuBenUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SuccessFuBenUserCmd::IsInitialized() const {

  return true;
}

void SuccessFuBenUserCmd::Swap(SuccessFuBenUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(type_, other->type_);
    std::swap(param1_, other->param1_);
    std::swap(param2_, other->param2_);
    std::swap(param3_, other->param3_);
    std::swap(param4_, other->param4_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SuccessFuBenUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SuccessFuBenUserCmd_descriptor_;
  metadata.reflection = SuccessFuBenUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldStageItem::kIdFieldNumber;
const int WorldStageItem::kStarFieldNumber;
const int WorldStageItem::kGetListFieldNumber;
#endif  // !_MSC_VER

WorldStageItem::WorldStageItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.WorldStageItem)
}

void WorldStageItem::InitAsDefaultInstance() {
}

WorldStageItem::WorldStageItem(const WorldStageItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.WorldStageItem)
}

void WorldStageItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  star_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldStageItem::~WorldStageItem() {
  // @@protoc_insertion_point(destructor:Cmd.WorldStageItem)
  SharedDtor();
}

void WorldStageItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WorldStageItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldStageItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldStageItem_descriptor_;
}

const WorldStageItem& WorldStageItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FuBenCmd_2eproto();
  return *default_instance_;
}

WorldStageItem* WorldStageItem::default_instance_ = NULL;

WorldStageItem* WorldStageItem::New() const {
  return new WorldStageItem;
}

void WorldStageItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<WorldStageItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, star_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  getlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldStageItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.WorldStageItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_star;
        break;
      }

      // optional uint32 star = 2;
      case 2: {
        if (tag == 16) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_getList;
        break;
      }

      // repeated uint32 getList = 3;
      case 3: {
        if (tag == 24) {
         parse_getList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_getlist())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_getlist())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_getList;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.WorldStageItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.WorldStageItem)
  return false;
#undef DO_
}

void WorldStageItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.WorldStageItem)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 star = 2;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->star(), output);
  }

  // repeated uint32 getList = 3;
  for (int i = 0; i < this->getlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->getlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.WorldStageItem)
}

::google::protobuf::uint8* WorldStageItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.WorldStageItem)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 star = 2;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->star(), target);
  }

  // repeated uint32 getList = 3;
  for (int i = 0; i < this->getlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->getlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.WorldStageItem)
  return target;
}

int WorldStageItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 star = 2;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star());
    }

  }
  // repeated uint32 getList = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->getlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->getlist(i));
    }
    total_size += 1 * this->getlist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldStageItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldStageItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldStageItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldStageItem::MergeFrom(const WorldStageItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  getlist_.MergeFrom(from.getlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldStageItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldStageItem::CopyFrom(const WorldStageItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldStageItem::IsInitialized() const {

  return true;
}

void WorldStageItem::Swap(WorldStageItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(star_, other->star_);
    getlist_.Swap(&other->getlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldStageItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldStageItem_descriptor_;
  metadata.reflection = WorldStageItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StageStepItem::kStageidFieldNumber;
const int StageStepItem::kStepidFieldNumber;
const int StageStepItem::kTypeFieldNumber;
#endif  // !_MSC_VER

StageStepItem::StageStepItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.StageStepItem)
}

void StageStepItem::InitAsDefaultInstance() {
}

StageStepItem::StageStepItem(const StageStepItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.StageStepItem)
}

void StageStepItem::SharedCtor() {
  _cached_size_ = 0;
  stageid_ = 0u;
  stepid_ = 0u;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StageStepItem::~StageStepItem() {
  // @@protoc_insertion_point(destructor:Cmd.StageStepItem)
  SharedDtor();
}

void StageStepItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StageStepItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StageStepItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StageStepItem_descriptor_;
}

const StageStepItem& StageStepItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FuBenCmd_2eproto();
  return *default_instance_;
}

StageStepItem* StageStepItem::default_instance_ = NULL;

StageStepItem* StageStepItem::New() const {
  return new StageStepItem;
}

void StageStepItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StageStepItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(stageid_, type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StageStepItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.StageStepItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 stageid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stageid_)));
          set_has_stageid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_stepid;
        break;
      }

      // optional uint32 stepid = 2;
      case 2: {
        if (tag == 16) {
         parse_stepid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stepid_)));
          set_has_stepid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional uint32 type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.StageStepItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.StageStepItem)
  return false;
#undef DO_
}

void StageStepItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.StageStepItem)
  // optional uint32 stageid = 1;
  if (has_stageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stageid(), output);
  }

  // optional uint32 stepid = 2;
  if (has_stepid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->stepid(), output);
  }

  // optional uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.StageStepItem)
}

::google::protobuf::uint8* StageStepItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.StageStepItem)
  // optional uint32 stageid = 1;
  if (has_stageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->stageid(), target);
  }

  // optional uint32 stepid = 2;
  if (has_stepid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->stepid(), target);
  }

  // optional uint32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.StageStepItem)
  return target;
}

int StageStepItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 stageid = 1;
    if (has_stageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stageid());
    }

    // optional uint32 stepid = 2;
    if (has_stepid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stepid());
    }

    // optional uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StageStepItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StageStepItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StageStepItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StageStepItem::MergeFrom(const StageStepItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stageid()) {
      set_stageid(from.stageid());
    }
    if (from.has_stepid()) {
      set_stepid(from.stepid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StageStepItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StageStepItem::CopyFrom(const StageStepItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StageStepItem::IsInitialized() const {

  return true;
}

void StageStepItem::Swap(StageStepItem* other) {
  if (other != this) {
    std::swap(stageid_, other->stageid_);
    std::swap(stepid_, other->stepid_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StageStepItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StageStepItem_descriptor_;
  metadata.reflection = StageStepItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldStageUserCmd::kCmdFieldNumber;
const int WorldStageUserCmd::kParamFieldNumber;
const int WorldStageUserCmd::kListFieldNumber;
const int WorldStageUserCmd::kCurinfoFieldNumber;
#endif  // !_MSC_VER

WorldStageUserCmd::WorldStageUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.WorldStageUserCmd)
}

void WorldStageUserCmd::InitAsDefaultInstance() {
}

WorldStageUserCmd::WorldStageUserCmd(const WorldStageUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.WorldStageUserCmd)
}

void WorldStageUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 11;
  param_ = 5;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldStageUserCmd::~WorldStageUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.WorldStageUserCmd)
  SharedDtor();
}

void WorldStageUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WorldStageUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldStageUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldStageUserCmd_descriptor_;
}

const WorldStageUserCmd& WorldStageUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FuBenCmd_2eproto();
  return *default_instance_;
}

WorldStageUserCmd* WorldStageUserCmd::default_instance_ = NULL;

WorldStageUserCmd* WorldStageUserCmd::New() const {
  return new WorldStageUserCmd;
}

void WorldStageUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 11;
    param_ = 5;
  }
  list_.Clear();
  curinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldStageUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.WorldStageUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.FuBenParam param = 2 [default = WORLD_STAGE_USER_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::FuBenParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::FuBenParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_list;
        break;
      }

      // repeated .Cmd.WorldStageItem list = 3;
      case 3: {
        if (tag == 26) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_list;
        if (input->ExpectTag(34)) goto parse_curinfo;
        break;
      }

      // repeated .Cmd.StageStepItem curinfo = 4;
      case 4: {
        if (tag == 34) {
         parse_curinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_curinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_curinfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.WorldStageUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.WorldStageUserCmd)
  return false;
#undef DO_
}

void WorldStageUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.WorldStageUserCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.FuBenParam param = 2 [default = WORLD_STAGE_USER_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.WorldStageItem list = 3;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->list(i), output);
  }

  // repeated .Cmd.StageStepItem curinfo = 4;
  for (int i = 0; i < this->curinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->curinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.WorldStageUserCmd)
}

::google::protobuf::uint8* WorldStageUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.WorldStageUserCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.FuBenParam param = 2 [default = WORLD_STAGE_USER_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.WorldStageItem list = 3;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->list(i), target);
  }

  // repeated .Cmd.StageStepItem curinfo = 4;
  for (int i = 0; i < this->curinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->curinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.WorldStageUserCmd)
  return target;
}

int WorldStageUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.FuBenParam param = 2 [default = WORLD_STAGE_USER_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.WorldStageItem list = 3;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  // repeated .Cmd.StageStepItem curinfo = 4;
  total_size += 1 * this->curinfo_size();
  for (int i = 0; i < this->curinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->curinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldStageUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldStageUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldStageUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldStageUserCmd::MergeFrom(const WorldStageUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  curinfo_.MergeFrom(from.curinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldStageUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldStageUserCmd::CopyFrom(const WorldStageUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldStageUserCmd::IsInitialized() const {

  return true;
}

void WorldStageUserCmd::Swap(WorldStageUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    list_.Swap(&other->list_);
    curinfo_.Swap(&other->curinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldStageUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldStageUserCmd_descriptor_;
  metadata.reflection = WorldStageUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StageNormalStepItem::kStepidFieldNumber;
const int StageNormalStepItem::kStarFieldNumber;
#endif  // !_MSC_VER

StageNormalStepItem::StageNormalStepItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.StageNormalStepItem)
}

void StageNormalStepItem::InitAsDefaultInstance() {
}

StageNormalStepItem::StageNormalStepItem(const StageNormalStepItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.StageNormalStepItem)
}

void StageNormalStepItem::SharedCtor() {
  _cached_size_ = 0;
  stepid_ = 0u;
  star_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StageNormalStepItem::~StageNormalStepItem() {
  // @@protoc_insertion_point(destructor:Cmd.StageNormalStepItem)
  SharedDtor();
}

void StageNormalStepItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StageNormalStepItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StageNormalStepItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StageNormalStepItem_descriptor_;
}

const StageNormalStepItem& StageNormalStepItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FuBenCmd_2eproto();
  return *default_instance_;
}

StageNormalStepItem* StageNormalStepItem::default_instance_ = NULL;

StageNormalStepItem* StageNormalStepItem::New() const {
  return new StageNormalStepItem;
}

void StageNormalStepItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StageNormalStepItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(stepid_, star_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StageNormalStepItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.StageNormalStepItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 stepid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stepid_)));
          set_has_stepid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_star;
        break;
      }

      // optional uint32 star = 2;
      case 2: {
        if (tag == 16) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.StageNormalStepItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.StageNormalStepItem)
  return false;
#undef DO_
}

void StageNormalStepItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.StageNormalStepItem)
  // optional uint32 stepid = 1;
  if (has_stepid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stepid(), output);
  }

  // optional uint32 star = 2;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->star(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.StageNormalStepItem)
}

::google::protobuf::uint8* StageNormalStepItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.StageNormalStepItem)
  // optional uint32 stepid = 1;
  if (has_stepid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->stepid(), target);
  }

  // optional uint32 star = 2;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->star(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.StageNormalStepItem)
  return target;
}

int StageNormalStepItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 stepid = 1;
    if (has_stepid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stepid());
    }

    // optional uint32 star = 2;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StageNormalStepItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StageNormalStepItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StageNormalStepItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StageNormalStepItem::MergeFrom(const StageNormalStepItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stepid()) {
      set_stepid(from.stepid());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StageNormalStepItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StageNormalStepItem::CopyFrom(const StageNormalStepItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StageNormalStepItem::IsInitialized() const {

  return true;
}

void StageNormalStepItem::Swap(StageNormalStepItem* other) {
  if (other != this) {
    std::swap(stepid_, other->stepid_);
    std::swap(star_, other->star_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StageNormalStepItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StageNormalStepItem_descriptor_;
  metadata.reflection = StageNormalStepItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StageHardStepItem::kStepidFieldNumber;
const int StageHardStepItem::kFinishFieldNumber;
const int StageHardStepItem::kChallengeTimeFieldNumber;
#endif  // !_MSC_VER

StageHardStepItem::StageHardStepItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.StageHardStepItem)
}

void StageHardStepItem::InitAsDefaultInstance() {
}

StageHardStepItem::StageHardStepItem(const StageHardStepItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.StageHardStepItem)
}

void StageHardStepItem::SharedCtor() {
  _cached_size_ = 0;
  stepid_ = 0u;
  finish_ = 0u;
  challengetime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StageHardStepItem::~StageHardStepItem() {
  // @@protoc_insertion_point(destructor:Cmd.StageHardStepItem)
  SharedDtor();
}

void StageHardStepItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StageHardStepItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StageHardStepItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StageHardStepItem_descriptor_;
}

const StageHardStepItem& StageHardStepItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FuBenCmd_2eproto();
  return *default_instance_;
}

StageHardStepItem* StageHardStepItem::default_instance_ = NULL;

StageHardStepItem* StageHardStepItem::New() const {
  return new StageHardStepItem;
}

void StageHardStepItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StageHardStepItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(stepid_, challengetime_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StageHardStepItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.StageHardStepItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 stepid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stepid_)));
          set_has_stepid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_finish;
        break;
      }

      // optional uint32 finish = 2;
      case 2: {
        if (tag == 16) {
         parse_finish:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &finish_)));
          set_has_finish();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_challengeTime;
        break;
      }

      // optional uint32 challengeTime = 3;
      case 3: {
        if (tag == 24) {
         parse_challengeTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challengetime_)));
          set_has_challengetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.StageHardStepItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.StageHardStepItem)
  return false;
#undef DO_
}

void StageHardStepItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.StageHardStepItem)
  // optional uint32 stepid = 1;
  if (has_stepid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stepid(), output);
  }

  // optional uint32 finish = 2;
  if (has_finish()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->finish(), output);
  }

  // optional uint32 challengeTime = 3;
  if (has_challengetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->challengetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.StageHardStepItem)
}

::google::protobuf::uint8* StageHardStepItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.StageHardStepItem)
  // optional uint32 stepid = 1;
  if (has_stepid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->stepid(), target);
  }

  // optional uint32 finish = 2;
  if (has_finish()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->finish(), target);
  }

  // optional uint32 challengeTime = 3;
  if (has_challengetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->challengetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.StageHardStepItem)
  return target;
}

int StageHardStepItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 stepid = 1;
    if (has_stepid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stepid());
    }

    // optional uint32 finish = 2;
    if (has_finish()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->finish());
    }

    // optional uint32 challengeTime = 3;
    if (has_challengetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->challengetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StageHardStepItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StageHardStepItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StageHardStepItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StageHardStepItem::MergeFrom(const StageHardStepItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stepid()) {
      set_stepid(from.stepid());
    }
    if (from.has_finish()) {
      set_finish(from.finish());
    }
    if (from.has_challengetime()) {
      set_challengetime(from.challengetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StageHardStepItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StageHardStepItem::CopyFrom(const StageHardStepItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StageHardStepItem::IsInitialized() const {

  return true;
}

void StageHardStepItem::Swap(StageHardStepItem* other) {
  if (other != this) {
    std::swap(stepid_, other->stepid_);
    std::swap(finish_, other->finish_);
    std::swap(challengetime_, other->challengetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StageHardStepItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StageHardStepItem_descriptor_;
  metadata.reflection = StageHardStepItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StageStepUserCmd::kCmdFieldNumber;
const int StageStepUserCmd::kParamFieldNumber;
const int StageStepUserCmd::kStageidFieldNumber;
const int StageStepUserCmd::kNormalistFieldNumber;
const int StageStepUserCmd::kHardlistFieldNumber;
#endif  // !_MSC_VER

StageStepUserCmd::StageStepUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.StageStepUserCmd)
}

void StageStepUserCmd::InitAsDefaultInstance() {
}

StageStepUserCmd::StageStepUserCmd(const StageStepUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.StageStepUserCmd)
}

void StageStepUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 11;
  param_ = 6;
  stageid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StageStepUserCmd::~StageStepUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.StageStepUserCmd)
  SharedDtor();
}

void StageStepUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StageStepUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StageStepUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StageStepUserCmd_descriptor_;
}

const StageStepUserCmd& StageStepUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FuBenCmd_2eproto();
  return *default_instance_;
}

StageStepUserCmd* StageStepUserCmd::default_instance_ = NULL;

StageStepUserCmd* StageStepUserCmd::New() const {
  return new StageStepUserCmd;
}

void StageStepUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 11;
    param_ = 6;
    stageid_ = 0u;
  }
  normalist_.Clear();
  hardlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StageStepUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.StageStepUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.FuBenParam param = 2 [default = SUB_STAGE_USER_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::FuBenParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::FuBenParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_stageid;
        break;
      }

      // optional uint32 stageid = 3;
      case 3: {
        if (tag == 24) {
         parse_stageid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stageid_)));
          set_has_stageid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_normalist;
        break;
      }

      // repeated .Cmd.StageNormalStepItem normalist = 4;
      case 4: {
        if (tag == 34) {
         parse_normalist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_normalist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_normalist;
        if (input->ExpectTag(42)) goto parse_hardlist;
        break;
      }

      // repeated .Cmd.StageHardStepItem hardlist = 5;
      case 5: {
        if (tag == 42) {
         parse_hardlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hardlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_hardlist;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.StageStepUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.StageStepUserCmd)
  return false;
#undef DO_
}

void StageStepUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.StageStepUserCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.FuBenParam param = 2 [default = SUB_STAGE_USER_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 stageid = 3;
  if (has_stageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->stageid(), output);
  }

  // repeated .Cmd.StageNormalStepItem normalist = 4;
  for (int i = 0; i < this->normalist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->normalist(i), output);
  }

  // repeated .Cmd.StageHardStepItem hardlist = 5;
  for (int i = 0; i < this->hardlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->hardlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.StageStepUserCmd)
}

::google::protobuf::uint8* StageStepUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.StageStepUserCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.FuBenParam param = 2 [default = SUB_STAGE_USER_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 stageid = 3;
  if (has_stageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->stageid(), target);
  }

  // repeated .Cmd.StageNormalStepItem normalist = 4;
  for (int i = 0; i < this->normalist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->normalist(i), target);
  }

  // repeated .Cmd.StageHardStepItem hardlist = 5;
  for (int i = 0; i < this->hardlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->hardlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.StageStepUserCmd)
  return target;
}

int StageStepUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.FuBenParam param = 2 [default = SUB_STAGE_USER_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 stageid = 3;
    if (has_stageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stageid());
    }

  }
  // repeated .Cmd.StageNormalStepItem normalist = 4;
  total_size += 1 * this->normalist_size();
  for (int i = 0; i < this->normalist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->normalist(i));
  }

  // repeated .Cmd.StageHardStepItem hardlist = 5;
  total_size += 1 * this->hardlist_size();
  for (int i = 0; i < this->hardlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hardlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StageStepUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StageStepUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StageStepUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StageStepUserCmd::MergeFrom(const StageStepUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  normalist_.MergeFrom(from.normalist_);
  hardlist_.MergeFrom(from.hardlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_stageid()) {
      set_stageid(from.stageid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StageStepUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StageStepUserCmd::CopyFrom(const StageStepUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StageStepUserCmd::IsInitialized() const {

  return true;
}

void StageStepUserCmd::Swap(StageStepUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(stageid_, other->stageid_);
    normalist_.Swap(&other->normalist_);
    hardlist_.Swap(&other->hardlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StageStepUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StageStepUserCmd_descriptor_;
  metadata.reflection = StageStepUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StartStageUserCmd::kCmdFieldNumber;
const int StartStageUserCmd::kParamFieldNumber;
const int StartStageUserCmd::kStageidFieldNumber;
const int StartStageUserCmd::kStepidFieldNumber;
const int StartStageUserCmd::kTypeFieldNumber;
#endif  // !_MSC_VER

StartStageUserCmd::StartStageUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.StartStageUserCmd)
}

void StartStageUserCmd::InitAsDefaultInstance() {
}

StartStageUserCmd::StartStageUserCmd(const StartStageUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.StartStageUserCmd)
}

void StartStageUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 11;
  param_ = 7;
  stageid_ = 0u;
  stepid_ = 0u;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StartStageUserCmd::~StartStageUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.StartStageUserCmd)
  SharedDtor();
}

void StartStageUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StartStageUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartStageUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StartStageUserCmd_descriptor_;
}

const StartStageUserCmd& StartStageUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FuBenCmd_2eproto();
  return *default_instance_;
}

StartStageUserCmd* StartStageUserCmd::default_instance_ = NULL;

StartStageUserCmd* StartStageUserCmd::New() const {
  return new StartStageUserCmd;
}

void StartStageUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StartStageUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(stageid_, type_);
    cmd_ = 11;
    param_ = 7;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StartStageUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.StartStageUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.FuBenParam param = 2 [default = START_STAGE_USER_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::FuBenParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::FuBenParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_stageid;
        break;
      }

      // optional uint32 stageid = 3;
      case 3: {
        if (tag == 24) {
         parse_stageid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stageid_)));
          set_has_stageid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_stepid;
        break;
      }

      // optional uint32 stepid = 4;
      case 4: {
        if (tag == 32) {
         parse_stepid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stepid_)));
          set_has_stepid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // optional uint32 type = 5;
      case 5: {
        if (tag == 40) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.StartStageUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.StartStageUserCmd)
  return false;
#undef DO_
}

void StartStageUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.StartStageUserCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.FuBenParam param = 2 [default = START_STAGE_USER_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 stageid = 3;
  if (has_stageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->stageid(), output);
  }

  // optional uint32 stepid = 4;
  if (has_stepid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->stepid(), output);
  }

  // optional uint32 type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.StartStageUserCmd)
}

::google::protobuf::uint8* StartStageUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.StartStageUserCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.FuBenParam param = 2 [default = START_STAGE_USER_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 stageid = 3;
  if (has_stageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->stageid(), target);
  }

  // optional uint32 stepid = 4;
  if (has_stepid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->stepid(), target);
  }

  // optional uint32 type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.StartStageUserCmd)
  return target;
}

int StartStageUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.FuBenParam param = 2 [default = START_STAGE_USER_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 stageid = 3;
    if (has_stageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stageid());
    }

    // optional uint32 stepid = 4;
    if (has_stepid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stepid());
    }

    // optional uint32 type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartStageUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StartStageUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StartStageUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StartStageUserCmd::MergeFrom(const StartStageUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_stageid()) {
      set_stageid(from.stageid());
    }
    if (from.has_stepid()) {
      set_stepid(from.stepid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StartStageUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartStageUserCmd::CopyFrom(const StartStageUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartStageUserCmd::IsInitialized() const {

  return true;
}

void StartStageUserCmd::Swap(StartStageUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(stageid_, other->stageid_);
    std::swap(stepid_, other->stepid_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StartStageUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StartStageUserCmd_descriptor_;
  metadata.reflection = StartStageUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetRewardStageUserCmd::kCmdFieldNumber;
const int GetRewardStageUserCmd::kParamFieldNumber;
const int GetRewardStageUserCmd::kStageidFieldNumber;
const int GetRewardStageUserCmd::kStaridFieldNumber;
#endif  // !_MSC_VER

GetRewardStageUserCmd::GetRewardStageUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GetRewardStageUserCmd)
}

void GetRewardStageUserCmd::InitAsDefaultInstance() {
}

GetRewardStageUserCmd::GetRewardStageUserCmd(const GetRewardStageUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GetRewardStageUserCmd)
}

void GetRewardStageUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 11;
  param_ = 8;
  stageid_ = 0u;
  starid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetRewardStageUserCmd::~GetRewardStageUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GetRewardStageUserCmd)
  SharedDtor();
}

void GetRewardStageUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetRewardStageUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRewardStageUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetRewardStageUserCmd_descriptor_;
}

const GetRewardStageUserCmd& GetRewardStageUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FuBenCmd_2eproto();
  return *default_instance_;
}

GetRewardStageUserCmd* GetRewardStageUserCmd::default_instance_ = NULL;

GetRewardStageUserCmd* GetRewardStageUserCmd::New() const {
  return new GetRewardStageUserCmd;
}

void GetRewardStageUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetRewardStageUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(stageid_, starid_);
    cmd_ = 11;
    param_ = 8;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetRewardStageUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GetRewardStageUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.FuBenParam param = 2 [default = GET_REWARD_STAGE_USER_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::FuBenParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::FuBenParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_stageid;
        break;
      }

      // optional uint32 stageid = 3;
      case 3: {
        if (tag == 24) {
         parse_stageid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stageid_)));
          set_has_stageid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_starid;
        break;
      }

      // optional uint32 starid = 4;
      case 4: {
        if (tag == 32) {
         parse_starid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &starid_)));
          set_has_starid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GetRewardStageUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GetRewardStageUserCmd)
  return false;
#undef DO_
}

void GetRewardStageUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GetRewardStageUserCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.FuBenParam param = 2 [default = GET_REWARD_STAGE_USER_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 stageid = 3;
  if (has_stageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->stageid(), output);
  }

  // optional uint32 starid = 4;
  if (has_starid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->starid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GetRewardStageUserCmd)
}

::google::protobuf::uint8* GetRewardStageUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GetRewardStageUserCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.FuBenParam param = 2 [default = GET_REWARD_STAGE_USER_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 stageid = 3;
  if (has_stageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->stageid(), target);
  }

  // optional uint32 starid = 4;
  if (has_starid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->starid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GetRewardStageUserCmd)
  return target;
}

int GetRewardStageUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.FuBenParam param = 2 [default = GET_REWARD_STAGE_USER_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 stageid = 3;
    if (has_stageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stageid());
    }

    // optional uint32 starid = 4;
    if (has_starid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->starid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRewardStageUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetRewardStageUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetRewardStageUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetRewardStageUserCmd::MergeFrom(const GetRewardStageUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_stageid()) {
      set_stageid(from.stageid());
    }
    if (from.has_starid()) {
      set_starid(from.starid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetRewardStageUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRewardStageUserCmd::CopyFrom(const GetRewardStageUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRewardStageUserCmd::IsInitialized() const {

  return true;
}

void GetRewardStageUserCmd::Swap(GetRewardStageUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(stageid_, other->stageid_);
    std::swap(starid_, other->starid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetRewardStageUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetRewardStageUserCmd_descriptor_;
  metadata.reflection = GetRewardStageUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StageStepStarUserCmd::kCmdFieldNumber;
const int StageStepStarUserCmd::kParamFieldNumber;
const int StageStepStarUserCmd::kStageidFieldNumber;
const int StageStepStarUserCmd::kStepidFieldNumber;
const int StageStepStarUserCmd::kStarFieldNumber;
const int StageStepStarUserCmd::kTypeFieldNumber;
#endif  // !_MSC_VER

StageStepStarUserCmd::StageStepStarUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.StageStepStarUserCmd)
}

void StageStepStarUserCmd::InitAsDefaultInstance() {
}

StageStepStarUserCmd::StageStepStarUserCmd(const StageStepStarUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.StageStepStarUserCmd)
}

void StageStepStarUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 11;
  param_ = 9;
  stageid_ = 0u;
  stepid_ = 0u;
  star_ = 0u;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StageStepStarUserCmd::~StageStepStarUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.StageStepStarUserCmd)
  SharedDtor();
}

void StageStepStarUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StageStepStarUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StageStepStarUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StageStepStarUserCmd_descriptor_;
}

const StageStepStarUserCmd& StageStepStarUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FuBenCmd_2eproto();
  return *default_instance_;
}

StageStepStarUserCmd* StageStepStarUserCmd::default_instance_ = NULL;

StageStepStarUserCmd* StageStepStarUserCmd::New() const {
  return new StageStepStarUserCmd;
}

void StageStepStarUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StageStepStarUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(stageid_, type_);
    cmd_ = 11;
    param_ = 9;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StageStepStarUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.StageStepStarUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.FuBenParam param = 2 [default = STAGE_STEP_STAR_USER_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::FuBenParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::FuBenParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_stageid;
        break;
      }

      // optional uint32 stageid = 3;
      case 3: {
        if (tag == 24) {
         parse_stageid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stageid_)));
          set_has_stageid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_stepid;
        break;
      }

      // optional uint32 stepid = 4;
      case 4: {
        if (tag == 32) {
         parse_stepid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stepid_)));
          set_has_stepid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_star;
        break;
      }

      // optional uint32 star = 5;
      case 5: {
        if (tag == 40) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_type;
        break;
      }

      // optional uint32 type = 6;
      case 6: {
        if (tag == 48) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.StageStepStarUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.StageStepStarUserCmd)
  return false;
#undef DO_
}

void StageStepStarUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.StageStepStarUserCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.FuBenParam param = 2 [default = STAGE_STEP_STAR_USER_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 stageid = 3;
  if (has_stageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->stageid(), output);
  }

  // optional uint32 stepid = 4;
  if (has_stepid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->stepid(), output);
  }

  // optional uint32 star = 5;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->star(), output);
  }

  // optional uint32 type = 6;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.StageStepStarUserCmd)
}

::google::protobuf::uint8* StageStepStarUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.StageStepStarUserCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.FuBenParam param = 2 [default = STAGE_STEP_STAR_USER_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 stageid = 3;
  if (has_stageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->stageid(), target);
  }

  // optional uint32 stepid = 4;
  if (has_stepid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->stepid(), target);
  }

  // optional uint32 star = 5;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->star(), target);
  }

  // optional uint32 type = 6;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.StageStepStarUserCmd)
  return target;
}

int StageStepStarUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.FuBenParam param = 2 [default = STAGE_STEP_STAR_USER_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 stageid = 3;
    if (has_stageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stageid());
    }

    // optional uint32 stepid = 4;
    if (has_stepid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stepid());
    }

    // optional uint32 star = 5;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star());
    }

    // optional uint32 type = 6;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StageStepStarUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StageStepStarUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StageStepStarUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StageStepStarUserCmd::MergeFrom(const StageStepStarUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_stageid()) {
      set_stageid(from.stageid());
    }
    if (from.has_stepid()) {
      set_stepid(from.stepid());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StageStepStarUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StageStepStarUserCmd::CopyFrom(const StageStepStarUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StageStepStarUserCmd::IsInitialized() const {

  return true;
}

void StageStepStarUserCmd::Swap(StageStepStarUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(stageid_, other->stageid_);
    std::swap(stepid_, other->stepid_);
    std::swap(star_, other->star_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StageStepStarUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StageStepStarUserCmd_descriptor_;
  metadata.reflection = StageStepStarUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MonsterCountUserCmd::kCmdFieldNumber;
const int MonsterCountUserCmd::kParamFieldNumber;
const int MonsterCountUserCmd::kNumFieldNumber;
#endif  // !_MSC_VER

MonsterCountUserCmd::MonsterCountUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.MonsterCountUserCmd)
}

void MonsterCountUserCmd::InitAsDefaultInstance() {
}

MonsterCountUserCmd::MonsterCountUserCmd(const MonsterCountUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.MonsterCountUserCmd)
}

void MonsterCountUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 11;
  param_ = 11;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MonsterCountUserCmd::~MonsterCountUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.MonsterCountUserCmd)
  SharedDtor();
}

void MonsterCountUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MonsterCountUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MonsterCountUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MonsterCountUserCmd_descriptor_;
}

const MonsterCountUserCmd& MonsterCountUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FuBenCmd_2eproto();
  return *default_instance_;
}

MonsterCountUserCmd* MonsterCountUserCmd::default_instance_ = NULL;

MonsterCountUserCmd* MonsterCountUserCmd::New() const {
  return new MonsterCountUserCmd;
}

void MonsterCountUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 11;
    param_ = 11;
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MonsterCountUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.MonsterCountUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.FuBenParam param = 2 [default = MONSTER_COUNT_USER_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::FuBenParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::FuBenParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional uint32 num = 3;
      case 3: {
        if (tag == 24) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.MonsterCountUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.MonsterCountUserCmd)
  return false;
#undef DO_
}

void MonsterCountUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.MonsterCountUserCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.FuBenParam param = 2 [default = MONSTER_COUNT_USER_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.MonsterCountUserCmd)
}

::google::protobuf::uint8* MonsterCountUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.MonsterCountUserCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.FuBenParam param = 2 [default = MONSTER_COUNT_USER_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.MonsterCountUserCmd)
  return target;
}

int MonsterCountUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.FuBenParam param = 2 [default = MONSTER_COUNT_USER_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MonsterCountUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MonsterCountUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MonsterCountUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MonsterCountUserCmd::MergeFrom(const MonsterCountUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MonsterCountUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MonsterCountUserCmd::CopyFrom(const MonsterCountUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonsterCountUserCmd::IsInitialized() const {

  return true;
}

void MonsterCountUserCmd::Swap(MonsterCountUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MonsterCountUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MonsterCountUserCmd_descriptor_;
  metadata.reflection = MonsterCountUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FubenStepSyncCmd::kCmdFieldNumber;
const int FubenStepSyncCmd::kParamFieldNumber;
const int FubenStepSyncCmd::kIdFieldNumber;
const int FubenStepSyncCmd::kDelFieldNumber;
const int FubenStepSyncCmd::kConfigFieldNumber;
#endif  // !_MSC_VER

FubenStepSyncCmd::FubenStepSyncCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.FubenStepSyncCmd)
}

void FubenStepSyncCmd::InitAsDefaultInstance() {
  config_ = const_cast< ::Cmd::RaidPConfig*>(&::Cmd::RaidPConfig::default_instance());
}

FubenStepSyncCmd::FubenStepSyncCmd(const FubenStepSyncCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.FubenStepSyncCmd)
}

void FubenStepSyncCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 11;
  param_ = 12;
  id_ = 0u;
  del_ = false;
  config_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FubenStepSyncCmd::~FubenStepSyncCmd() {
  // @@protoc_insertion_point(destructor:Cmd.FubenStepSyncCmd)
  SharedDtor();
}

void FubenStepSyncCmd::SharedDtor() {
  if (this != default_instance_) {
    delete config_;
  }
}

void FubenStepSyncCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FubenStepSyncCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FubenStepSyncCmd_descriptor_;
}

const FubenStepSyncCmd& FubenStepSyncCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FuBenCmd_2eproto();
  return *default_instance_;
}

FubenStepSyncCmd* FubenStepSyncCmd::default_instance_ = NULL;

FubenStepSyncCmd* FubenStepSyncCmd::New() const {
  return new FubenStepSyncCmd;
}

void FubenStepSyncCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FubenStepSyncCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(id_, del_);
    cmd_ = 11;
    param_ = 12;
    if (has_config()) {
      if (config_ != NULL) config_->::Cmd::RaidPConfig::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FubenStepSyncCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.FubenStepSyncCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.FuBenParam param = 2 [default = FUBEN_STEP_SYNC];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::FuBenParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::FuBenParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional uint32 id = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_del;
        break;
      }

      // optional bool del = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_del:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &del_)));
          set_has_del();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_config;
        break;
      }

      // optional .Cmd.RaidPConfig config = 5;
      case 5: {
        if (tag == 42) {
         parse_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.FubenStepSyncCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.FubenStepSyncCmd)
  return false;
#undef DO_
}

void FubenStepSyncCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.FubenStepSyncCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.FuBenParam param = 2 [default = FUBEN_STEP_SYNC];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 id = 3 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->id(), output);
  }

  // optional bool del = 4 [default = false];
  if (has_del()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->del(), output);
  }

  // optional .Cmd.RaidPConfig config = 5;
  if (has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->config(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.FubenStepSyncCmd)
}

::google::protobuf::uint8* FubenStepSyncCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.FubenStepSyncCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.FuBenParam param = 2 [default = FUBEN_STEP_SYNC];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 id = 3 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->id(), target);
  }

  // optional bool del = 4 [default = false];
  if (has_del()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->del(), target);
  }

  // optional .Cmd.RaidPConfig config = 5;
  if (has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->config(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.FubenStepSyncCmd)
  return target;
}

int FubenStepSyncCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.FuBenParam param = 2 [default = FUBEN_STEP_SYNC];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 id = 3 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional bool del = 4 [default = false];
    if (has_del()) {
      total_size += 1 + 1;
    }

    // optional .Cmd.RaidPConfig config = 5;
    if (has_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->config());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FubenStepSyncCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FubenStepSyncCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FubenStepSyncCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FubenStepSyncCmd::MergeFrom(const FubenStepSyncCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_del()) {
      set_del(from.del());
    }
    if (from.has_config()) {
      mutable_config()->::Cmd::RaidPConfig::MergeFrom(from.config());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FubenStepSyncCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FubenStepSyncCmd::CopyFrom(const FubenStepSyncCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FubenStepSyncCmd::IsInitialized() const {

  return true;
}

void FubenStepSyncCmd::Swap(FubenStepSyncCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(id_, other->id_);
    std::swap(del_, other->del_);
    std::swap(config_, other->config_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FubenStepSyncCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FubenStepSyncCmd_descriptor_;
  metadata.reflection = FubenStepSyncCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FuBenProgressSyncCmd::kCmdFieldNumber;
const int FuBenProgressSyncCmd::kParamFieldNumber;
const int FuBenProgressSyncCmd::kIdFieldNumber;
const int FuBenProgressSyncCmd::kProgressFieldNumber;
#endif  // !_MSC_VER

FuBenProgressSyncCmd::FuBenProgressSyncCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.FuBenProgressSyncCmd)
}

void FuBenProgressSyncCmd::InitAsDefaultInstance() {
}

FuBenProgressSyncCmd::FuBenProgressSyncCmd(const FuBenProgressSyncCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.FuBenProgressSyncCmd)
}

void FuBenProgressSyncCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 11;
  param_ = 13;
  id_ = 0u;
  progress_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FuBenProgressSyncCmd::~FuBenProgressSyncCmd() {
  // @@protoc_insertion_point(destructor:Cmd.FuBenProgressSyncCmd)
  SharedDtor();
}

void FuBenProgressSyncCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FuBenProgressSyncCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FuBenProgressSyncCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FuBenProgressSyncCmd_descriptor_;
}

const FuBenProgressSyncCmd& FuBenProgressSyncCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FuBenCmd_2eproto();
  return *default_instance_;
}

FuBenProgressSyncCmd* FuBenProgressSyncCmd::default_instance_ = NULL;

FuBenProgressSyncCmd* FuBenProgressSyncCmd::New() const {
  return new FuBenProgressSyncCmd;
}

void FuBenProgressSyncCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FuBenProgressSyncCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(id_, progress_);
    cmd_ = 11;
    param_ = 13;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FuBenProgressSyncCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.FuBenProgressSyncCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.FuBenParam param = 2 [default = FUBEN_GOAL_SYNC];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::FuBenParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::FuBenParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional uint32 id = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_progress;
        break;
      }

      // optional uint32 progress = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_progress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &progress_)));
          set_has_progress();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.FuBenProgressSyncCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.FuBenProgressSyncCmd)
  return false;
#undef DO_
}

void FuBenProgressSyncCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.FuBenProgressSyncCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.FuBenParam param = 2 [default = FUBEN_GOAL_SYNC];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 id = 3 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->id(), output);
  }

  // optional uint32 progress = 4 [default = 0];
  if (has_progress()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->progress(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.FuBenProgressSyncCmd)
}

::google::protobuf::uint8* FuBenProgressSyncCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.FuBenProgressSyncCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.FuBenParam param = 2 [default = FUBEN_GOAL_SYNC];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 id = 3 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->id(), target);
  }

  // optional uint32 progress = 4 [default = 0];
  if (has_progress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->progress(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.FuBenProgressSyncCmd)
  return target;
}

int FuBenProgressSyncCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.FuBenParam param = 2 [default = FUBEN_GOAL_SYNC];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 id = 3 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 progress = 4 [default = 0];
    if (has_progress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->progress());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FuBenProgressSyncCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FuBenProgressSyncCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FuBenProgressSyncCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FuBenProgressSyncCmd::MergeFrom(const FuBenProgressSyncCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_progress()) {
      set_progress(from.progress());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FuBenProgressSyncCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FuBenProgressSyncCmd::CopyFrom(const FuBenProgressSyncCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FuBenProgressSyncCmd::IsInitialized() const {

  return true;
}

void FuBenProgressSyncCmd::Swap(FuBenProgressSyncCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(id_, other->id_);
    std::swap(progress_, other->progress_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FuBenProgressSyncCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FuBenProgressSyncCmd_descriptor_;
  metadata.reflection = FuBenProgressSyncCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FuBenClearInfoCmd::kCmdFieldNumber;
const int FuBenClearInfoCmd::kParamFieldNumber;
#endif  // !_MSC_VER

FuBenClearInfoCmd::FuBenClearInfoCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.FuBenClearInfoCmd)
}

void FuBenClearInfoCmd::InitAsDefaultInstance() {
}

FuBenClearInfoCmd::FuBenClearInfoCmd(const FuBenClearInfoCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.FuBenClearInfoCmd)
}

void FuBenClearInfoCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 11;
  param_ = 15;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FuBenClearInfoCmd::~FuBenClearInfoCmd() {
  // @@protoc_insertion_point(destructor:Cmd.FuBenClearInfoCmd)
  SharedDtor();
}

void FuBenClearInfoCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FuBenClearInfoCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FuBenClearInfoCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FuBenClearInfoCmd_descriptor_;
}

const FuBenClearInfoCmd& FuBenClearInfoCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FuBenCmd_2eproto();
  return *default_instance_;
}

FuBenClearInfoCmd* FuBenClearInfoCmd::default_instance_ = NULL;

FuBenClearInfoCmd* FuBenClearInfoCmd::New() const {
  return new FuBenClearInfoCmd;
}

void FuBenClearInfoCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 11;
    param_ = 15;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FuBenClearInfoCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.FuBenClearInfoCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.FuBenParam param = 2 [default = FUBEN_CLEAR_SYNC];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::FuBenParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::FuBenParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.FuBenClearInfoCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.FuBenClearInfoCmd)
  return false;
#undef DO_
}

void FuBenClearInfoCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.FuBenClearInfoCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.FuBenParam param = 2 [default = FUBEN_CLEAR_SYNC];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.FuBenClearInfoCmd)
}

::google::protobuf::uint8* FuBenClearInfoCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.FuBenClearInfoCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.FuBenParam param = 2 [default = FUBEN_CLEAR_SYNC];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.FuBenClearInfoCmd)
  return target;
}

int FuBenClearInfoCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.FuBenParam param = 2 [default = FUBEN_CLEAR_SYNC];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FuBenClearInfoCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FuBenClearInfoCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FuBenClearInfoCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FuBenClearInfoCmd::MergeFrom(const FuBenClearInfoCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FuBenClearInfoCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FuBenClearInfoCmd::CopyFrom(const FuBenClearInfoCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FuBenClearInfoCmd::IsInitialized() const {

  return true;
}

void FuBenClearInfoCmd::Swap(FuBenClearInfoCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FuBenClearInfoCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FuBenClearInfoCmd_descriptor_;
  metadata.reflection = FuBenClearInfoCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildGateData::kGatenpcidFieldNumber;
const int GuildGateData::kKilledbossnumFieldNumber;
const int GuildGateData::kGroupindexFieldNumber;
const int GuildGateData::kClosetimeFieldNumber;
const int GuildGateData::kLevelFieldNumber;
const int GuildGateData::kIsspecialFieldNumber;
const int GuildGateData::kStateFieldNumber;
#endif  // !_MSC_VER

GuildGateData::GuildGateData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GuildGateData)
}

void GuildGateData::InitAsDefaultInstance() {
}

GuildGateData::GuildGateData(const GuildGateData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GuildGateData)
}

void GuildGateData::SharedCtor() {
  _cached_size_ = 0;
  gatenpcid_ = GOOGLE_ULONGLONG(0);
  killedbossnum_ = 0u;
  groupindex_ = 0u;
  closetime_ = 0u;
  level_ = 0u;
  isspecial_ = false;
  state_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildGateData::~GuildGateData() {
  // @@protoc_insertion_point(destructor:Cmd.GuildGateData)
  SharedDtor();
}

void GuildGateData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildGateData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildGateData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildGateData_descriptor_;
}

const GuildGateData& GuildGateData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FuBenCmd_2eproto();
  return *default_instance_;
}

GuildGateData* GuildGateData::default_instance_ = NULL;

GuildGateData* GuildGateData::New() const {
  return new GuildGateData;
}

void GuildGateData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GuildGateData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(gatenpcid_, isspecial_);
    state_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildGateData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GuildGateData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 gatenpcid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gatenpcid_)));
          set_has_gatenpcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_killedbossnum;
        break;
      }

      // optional uint32 killedbossnum = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_killedbossnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killedbossnum_)));
          set_has_killedbossnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_groupindex;
        break;
      }

      // optional uint32 groupindex = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_groupindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groupindex_)));
          set_has_groupindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_closetime;
        break;
      }

      // optional uint32 closetime = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_closetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &closetime_)));
          set_has_closetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }

      // optional uint32 level = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_isspecial;
        break;
      }

      // optional bool isspecial = 6 [default = false];
      case 6: {
        if (tag == 48) {
         parse_isspecial:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isspecial_)));
          set_has_isspecial();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_state;
        break;
      }

      // optional .Cmd.EGuildGateState state = 7 [default = EGUILDGATESTATE_LOCK];
      case 7: {
        if (tag == 56) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EGuildGateState_IsValid(value)) {
            set_state(static_cast< ::Cmd::EGuildGateState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GuildGateData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GuildGateData)
  return false;
#undef DO_
}

void GuildGateData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GuildGateData)
  // required uint64 gatenpcid = 1;
  if (has_gatenpcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->gatenpcid(), output);
  }

  // optional uint32 killedbossnum = 2 [default = 0];
  if (has_killedbossnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->killedbossnum(), output);
  }

  // optional uint32 groupindex = 3 [default = 0];
  if (has_groupindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->groupindex(), output);
  }

  // optional uint32 closetime = 4 [default = 0];
  if (has_closetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->closetime(), output);
  }

  // optional uint32 level = 5 [default = 0];
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->level(), output);
  }

  // optional bool isspecial = 6 [default = false];
  if (has_isspecial()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->isspecial(), output);
  }

  // optional .Cmd.EGuildGateState state = 7 [default = EGUILDGATESTATE_LOCK];
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GuildGateData)
}

::google::protobuf::uint8* GuildGateData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GuildGateData)
  // required uint64 gatenpcid = 1;
  if (has_gatenpcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->gatenpcid(), target);
  }

  // optional uint32 killedbossnum = 2 [default = 0];
  if (has_killedbossnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->killedbossnum(), target);
  }

  // optional uint32 groupindex = 3 [default = 0];
  if (has_groupindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->groupindex(), target);
  }

  // optional uint32 closetime = 4 [default = 0];
  if (has_closetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->closetime(), target);
  }

  // optional uint32 level = 5 [default = 0];
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->level(), target);
  }

  // optional bool isspecial = 6 [default = false];
  if (has_isspecial()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->isspecial(), target);
  }

  // optional .Cmd.EGuildGateState state = 7 [default = EGUILDGATESTATE_LOCK];
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GuildGateData)
  return target;
}

int GuildGateData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 gatenpcid = 1;
    if (has_gatenpcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gatenpcid());
    }

    // optional uint32 killedbossnum = 2 [default = 0];
    if (has_killedbossnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killedbossnum());
    }

    // optional uint32 groupindex = 3 [default = 0];
    if (has_groupindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->groupindex());
    }

    // optional uint32 closetime = 4 [default = 0];
    if (has_closetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->closetime());
    }

    // optional uint32 level = 5 [default = 0];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional bool isspecial = 6 [default = false];
    if (has_isspecial()) {
      total_size += 1 + 1;
    }

    // optional .Cmd.EGuildGateState state = 7 [default = EGUILDGATESTATE_LOCK];
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildGateData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildGateData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildGateData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildGateData::MergeFrom(const GuildGateData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gatenpcid()) {
      set_gatenpcid(from.gatenpcid());
    }
    if (from.has_killedbossnum()) {
      set_killedbossnum(from.killedbossnum());
    }
    if (from.has_groupindex()) {
      set_groupindex(from.groupindex());
    }
    if (from.has_closetime()) {
      set_closetime(from.closetime());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_isspecial()) {
      set_isspecial(from.isspecial());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildGateData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildGateData::CopyFrom(const GuildGateData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildGateData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GuildGateData::Swap(GuildGateData* other) {
  if (other != this) {
    std::swap(gatenpcid_, other->gatenpcid_);
    std::swap(killedbossnum_, other->killedbossnum_);
    std::swap(groupindex_, other->groupindex_);
    std::swap(closetime_, other->closetime_);
    std::swap(level_, other->level_);
    std::swap(isspecial_, other->isspecial_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildGateData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildGateData_descriptor_;
  metadata.reflection = GuildGateData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserGuildRaidFubenCmd::kCmdFieldNumber;
const int UserGuildRaidFubenCmd::kParamFieldNumber;
const int UserGuildRaidFubenCmd::kGatedataFieldNumber;
#endif  // !_MSC_VER

UserGuildRaidFubenCmd::UserGuildRaidFubenCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UserGuildRaidFubenCmd)
}

void UserGuildRaidFubenCmd::InitAsDefaultInstance() {
}

UserGuildRaidFubenCmd::UserGuildRaidFubenCmd(const UserGuildRaidFubenCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UserGuildRaidFubenCmd)
}

void UserGuildRaidFubenCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 11;
  param_ = 16;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserGuildRaidFubenCmd::~UserGuildRaidFubenCmd() {
  // @@protoc_insertion_point(destructor:Cmd.UserGuildRaidFubenCmd)
  SharedDtor();
}

void UserGuildRaidFubenCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserGuildRaidFubenCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserGuildRaidFubenCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserGuildRaidFubenCmd_descriptor_;
}

const UserGuildRaidFubenCmd& UserGuildRaidFubenCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FuBenCmd_2eproto();
  return *default_instance_;
}

UserGuildRaidFubenCmd* UserGuildRaidFubenCmd::default_instance_ = NULL;

UserGuildRaidFubenCmd* UserGuildRaidFubenCmd::New() const {
  return new UserGuildRaidFubenCmd;
}

void UserGuildRaidFubenCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 11;
    param_ = 16;
  }
  gatedata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserGuildRaidFubenCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UserGuildRaidFubenCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.FuBenParam param = 2 [default = GUILD_RAID_USER_INFO];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::FuBenParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::FuBenParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_gatedata;
        break;
      }

      // repeated .Cmd.GuildGateData gatedata = 3;
      case 3: {
        if (tag == 26) {
         parse_gatedata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gatedata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_gatedata;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UserGuildRaidFubenCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UserGuildRaidFubenCmd)
  return false;
#undef DO_
}

void UserGuildRaidFubenCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UserGuildRaidFubenCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.FuBenParam param = 2 [default = GUILD_RAID_USER_INFO];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.GuildGateData gatedata = 3;
  for (int i = 0; i < this->gatedata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->gatedata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UserGuildRaidFubenCmd)
}

::google::protobuf::uint8* UserGuildRaidFubenCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UserGuildRaidFubenCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.FuBenParam param = 2 [default = GUILD_RAID_USER_INFO];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.GuildGateData gatedata = 3;
  for (int i = 0; i < this->gatedata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->gatedata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UserGuildRaidFubenCmd)
  return target;
}

int UserGuildRaidFubenCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.FuBenParam param = 2 [default = GUILD_RAID_USER_INFO];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.GuildGateData gatedata = 3;
  total_size += 1 * this->gatedata_size();
  for (int i = 0; i < this->gatedata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gatedata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserGuildRaidFubenCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserGuildRaidFubenCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserGuildRaidFubenCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserGuildRaidFubenCmd::MergeFrom(const UserGuildRaidFubenCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  gatedata_.MergeFrom(from.gatedata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserGuildRaidFubenCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserGuildRaidFubenCmd::CopyFrom(const UserGuildRaidFubenCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserGuildRaidFubenCmd::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->gatedata())) return false;
  return true;
}

void UserGuildRaidFubenCmd::Swap(UserGuildRaidFubenCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    gatedata_.Swap(&other->gatedata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserGuildRaidFubenCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserGuildRaidFubenCmd_descriptor_;
  metadata.reflection = UserGuildRaidFubenCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildGateOptCmd::kCmdFieldNumber;
const int GuildGateOptCmd::kParamFieldNumber;
const int GuildGateOptCmd::kGatenpcidFieldNumber;
const int GuildGateOptCmd::kOptFieldNumber;
const int GuildGateOptCmd::kUplocklevelFieldNumber;
#endif  // !_MSC_VER

GuildGateOptCmd::GuildGateOptCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GuildGateOptCmd)
}

void GuildGateOptCmd::InitAsDefaultInstance() {
}

GuildGateOptCmd::GuildGateOptCmd(const GuildGateOptCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GuildGateOptCmd)
}

void GuildGateOptCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 11;
  param_ = 17;
  gatenpcid_ = GOOGLE_ULONGLONG(0);
  opt_ = 1;
  uplocklevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildGateOptCmd::~GuildGateOptCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GuildGateOptCmd)
  SharedDtor();
}

void GuildGateOptCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildGateOptCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildGateOptCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildGateOptCmd_descriptor_;
}

const GuildGateOptCmd& GuildGateOptCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FuBenCmd_2eproto();
  return *default_instance_;
}

GuildGateOptCmd* GuildGateOptCmd::default_instance_ = NULL;

GuildGateOptCmd* GuildGateOptCmd::New() const {
  return new GuildGateOptCmd;
}

void GuildGateOptCmd::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    cmd_ = 11;
    param_ = 17;
    gatenpcid_ = GOOGLE_ULONGLONG(0);
    opt_ = 1;
    uplocklevel_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildGateOptCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GuildGateOptCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.FuBenParam param = 2 [default = GUILD_RAID_GATE_OPT];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::FuBenParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::FuBenParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gatenpcid;
        break;
      }

      // optional uint64 gatenpcid = 3;
      case 3: {
        if (tag == 24) {
         parse_gatenpcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gatenpcid_)));
          set_has_gatenpcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_opt;
        break;
      }

      // optional .Cmd.EGuildGateOpt opt = 4;
      case 4: {
        if (tag == 32) {
         parse_opt:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EGuildGateOpt_IsValid(value)) {
            set_opt(static_cast< ::Cmd::EGuildGateOpt >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_uplocklevel;
        break;
      }

      // optional uint32 uplocklevel = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_uplocklevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uplocklevel_)));
          set_has_uplocklevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GuildGateOptCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GuildGateOptCmd)
  return false;
#undef DO_
}

void GuildGateOptCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GuildGateOptCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.FuBenParam param = 2 [default = GUILD_RAID_GATE_OPT];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 gatenpcid = 3;
  if (has_gatenpcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->gatenpcid(), output);
  }

  // optional .Cmd.EGuildGateOpt opt = 4;
  if (has_opt()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->opt(), output);
  }

  // optional uint32 uplocklevel = 5 [default = 0];
  if (has_uplocklevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->uplocklevel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GuildGateOptCmd)
}

::google::protobuf::uint8* GuildGateOptCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GuildGateOptCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.FuBenParam param = 2 [default = GUILD_RAID_GATE_OPT];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 gatenpcid = 3;
  if (has_gatenpcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->gatenpcid(), target);
  }

  // optional .Cmd.EGuildGateOpt opt = 4;
  if (has_opt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->opt(), target);
  }

  // optional uint32 uplocklevel = 5 [default = 0];
  if (has_uplocklevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->uplocklevel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GuildGateOptCmd)
  return target;
}

int GuildGateOptCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.FuBenParam param = 2 [default = GUILD_RAID_GATE_OPT];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 gatenpcid = 3;
    if (has_gatenpcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gatenpcid());
    }

    // optional .Cmd.EGuildGateOpt opt = 4;
    if (has_opt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->opt());
    }

    // optional uint32 uplocklevel = 5 [default = 0];
    if (has_uplocklevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uplocklevel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildGateOptCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildGateOptCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildGateOptCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildGateOptCmd::MergeFrom(const GuildGateOptCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_gatenpcid()) {
      set_gatenpcid(from.gatenpcid());
    }
    if (from.has_opt()) {
      set_opt(from.opt());
    }
    if (from.has_uplocklevel()) {
      set_uplocklevel(from.uplocklevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildGateOptCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildGateOptCmd::CopyFrom(const GuildGateOptCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildGateOptCmd::IsInitialized() const {

  return true;
}

void GuildGateOptCmd::Swap(GuildGateOptCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(gatenpcid_, other->gatenpcid_);
    std::swap(opt_, other->opt_);
    std::swap(uplocklevel_, other->uplocklevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildGateOptCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildGateOptCmd_descriptor_;
  metadata.reflection = GuildGateOptCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildFireInfoFubenCmd::kCmdFieldNumber;
const int GuildFireInfoFubenCmd::kParamFieldNumber;
const int GuildFireInfoFubenCmd::kFireFieldNumber;
const int GuildFireInfoFubenCmd::kDefGuildidFieldNumber;
const int GuildFireInfoFubenCmd::kEndfireTimeFieldNumber;
const int GuildFireInfoFubenCmd::kDangerFieldNumber;
const int GuildFireInfoFubenCmd::kDangerTimeFieldNumber;
const int GuildFireInfoFubenCmd::kMetalHpperFieldNumber;
const int GuildFireInfoFubenCmd::kCalmdownFieldNumber;
const int GuildFireInfoFubenCmd::kCalmTimeFieldNumber;
const int GuildFireInfoFubenCmd::kDefGuildnameFieldNumber;
const int GuildFireInfoFubenCmd::kDefPerfectFieldNumber;
#endif  // !_MSC_VER

GuildFireInfoFubenCmd::GuildFireInfoFubenCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GuildFireInfoFubenCmd)
}

void GuildFireInfoFubenCmd::InitAsDefaultInstance() {
}

GuildFireInfoFubenCmd::GuildFireInfoFubenCmd(const GuildFireInfoFubenCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GuildFireInfoFubenCmd)
}

void GuildFireInfoFubenCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 11;
  param_ = 18;
  fire_ = false;
  def_guildid_ = GOOGLE_ULONGLONG(0);
  endfire_time_ = 0u;
  danger_ = false;
  danger_time_ = 0u;
  metal_hpper_ = 0u;
  calmdown_ = false;
  calm_time_ = 0u;
  def_guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  def_perfect_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildFireInfoFubenCmd::~GuildFireInfoFubenCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GuildFireInfoFubenCmd)
  SharedDtor();
}

void GuildFireInfoFubenCmd::SharedDtor() {
  if (def_guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete def_guildname_;
  }
  if (this != default_instance_) {
  }
}

void GuildFireInfoFubenCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildFireInfoFubenCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildFireInfoFubenCmd_descriptor_;
}

const GuildFireInfoFubenCmd& GuildFireInfoFubenCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FuBenCmd_2eproto();
  return *default_instance_;
}

GuildFireInfoFubenCmd* GuildFireInfoFubenCmd::default_instance_ = NULL;

GuildFireInfoFubenCmd* GuildFireInfoFubenCmd::New() const {
  return new GuildFireInfoFubenCmd;
}

void GuildFireInfoFubenCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GuildFireInfoFubenCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(def_guildid_, danger_);
    cmd_ = 11;
    param_ = 18;
    metal_hpper_ = 0u;
  }
  if (_has_bits_[8 / 32] & 3840) {
    ZR_(calmdown_, def_perfect_);
    calm_time_ = 0u;
    if (has_def_guildname()) {
      if (def_guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        def_guildname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildFireInfoFubenCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GuildFireInfoFubenCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.FuBenParam param = 2 [default = GUILD_FIRE_INFO];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::FuBenParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::FuBenParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_fire;
        break;
      }

      // optional bool fire = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_fire:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fire_)));
          set_has_fire();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_def_guildid;
        break;
      }

      // optional uint64 def_guildid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_def_guildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &def_guildid_)));
          set_has_def_guildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_endfire_time;
        break;
      }

      // optional uint32 endfire_time = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_endfire_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endfire_time_)));
          set_has_endfire_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_danger;
        break;
      }

      // optional bool danger = 6 [default = false];
      case 6: {
        if (tag == 48) {
         parse_danger:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &danger_)));
          set_has_danger();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_danger_time;
        break;
      }

      // optional uint32 danger_time = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_danger_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &danger_time_)));
          set_has_danger_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_metal_hpper;
        break;
      }

      // optional uint32 metal_hpper = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_metal_hpper:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &metal_hpper_)));
          set_has_metal_hpper();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_calmdown;
        break;
      }

      // optional bool calmdown = 9 [default = false];
      case 9: {
        if (tag == 72) {
         parse_calmdown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &calmdown_)));
          set_has_calmdown();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_calm_time;
        break;
      }

      // optional uint32 calm_time = 10 [default = 0];
      case 10: {
        if (tag == 80) {
         parse_calm_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &calm_time_)));
          set_has_calm_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_def_guildname;
        break;
      }

      // optional string def_guildname = 11;
      case 11: {
        if (tag == 90) {
         parse_def_guildname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_def_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->def_guildname().data(), this->def_guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "def_guildname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_def_perfect;
        break;
      }

      // optional bool def_perfect = 12 [default = false];
      case 12: {
        if (tag == 96) {
         parse_def_perfect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &def_perfect_)));
          set_has_def_perfect();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GuildFireInfoFubenCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GuildFireInfoFubenCmd)
  return false;
#undef DO_
}

void GuildFireInfoFubenCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GuildFireInfoFubenCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.FuBenParam param = 2 [default = GUILD_FIRE_INFO];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional bool fire = 3 [default = false];
  if (has_fire()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->fire(), output);
  }

  // optional uint64 def_guildid = 4 [default = 0];
  if (has_def_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->def_guildid(), output);
  }

  // optional uint32 endfire_time = 5 [default = 0];
  if (has_endfire_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->endfire_time(), output);
  }

  // optional bool danger = 6 [default = false];
  if (has_danger()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->danger(), output);
  }

  // optional uint32 danger_time = 7 [default = 0];
  if (has_danger_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->danger_time(), output);
  }

  // optional uint32 metal_hpper = 8 [default = 0];
  if (has_metal_hpper()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->metal_hpper(), output);
  }

  // optional bool calmdown = 9 [default = false];
  if (has_calmdown()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->calmdown(), output);
  }

  // optional uint32 calm_time = 10 [default = 0];
  if (has_calm_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->calm_time(), output);
  }

  // optional string def_guildname = 11;
  if (has_def_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->def_guildname().data(), this->def_guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "def_guildname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->def_guildname(), output);
  }

  // optional bool def_perfect = 12 [default = false];
  if (has_def_perfect()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->def_perfect(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GuildFireInfoFubenCmd)
}

::google::protobuf::uint8* GuildFireInfoFubenCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GuildFireInfoFubenCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.FuBenParam param = 2 [default = GUILD_FIRE_INFO];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional bool fire = 3 [default = false];
  if (has_fire()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->fire(), target);
  }

  // optional uint64 def_guildid = 4 [default = 0];
  if (has_def_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->def_guildid(), target);
  }

  // optional uint32 endfire_time = 5 [default = 0];
  if (has_endfire_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->endfire_time(), target);
  }

  // optional bool danger = 6 [default = false];
  if (has_danger()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->danger(), target);
  }

  // optional uint32 danger_time = 7 [default = 0];
  if (has_danger_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->danger_time(), target);
  }

  // optional uint32 metal_hpper = 8 [default = 0];
  if (has_metal_hpper()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->metal_hpper(), target);
  }

  // optional bool calmdown = 9 [default = false];
  if (has_calmdown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->calmdown(), target);
  }

  // optional uint32 calm_time = 10 [default = 0];
  if (has_calm_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->calm_time(), target);
  }

  // optional string def_guildname = 11;
  if (has_def_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->def_guildname().data(), this->def_guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "def_guildname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->def_guildname(), target);
  }

  // optional bool def_perfect = 12 [default = false];
  if (has_def_perfect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->def_perfect(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GuildFireInfoFubenCmd)
  return target;
}

int GuildFireInfoFubenCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.FuBenParam param = 2 [default = GUILD_FIRE_INFO];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional bool fire = 3 [default = false];
    if (has_fire()) {
      total_size += 1 + 1;
    }

    // optional uint64 def_guildid = 4 [default = 0];
    if (has_def_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->def_guildid());
    }

    // optional uint32 endfire_time = 5 [default = 0];
    if (has_endfire_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endfire_time());
    }

    // optional bool danger = 6 [default = false];
    if (has_danger()) {
      total_size += 1 + 1;
    }

    // optional uint32 danger_time = 7 [default = 0];
    if (has_danger_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->danger_time());
    }

    // optional uint32 metal_hpper = 8 [default = 0];
    if (has_metal_hpper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->metal_hpper());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool calmdown = 9 [default = false];
    if (has_calmdown()) {
      total_size += 1 + 1;
    }

    // optional uint32 calm_time = 10 [default = 0];
    if (has_calm_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->calm_time());
    }

    // optional string def_guildname = 11;
    if (has_def_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->def_guildname());
    }

    // optional bool def_perfect = 12 [default = false];
    if (has_def_perfect()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildFireInfoFubenCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildFireInfoFubenCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildFireInfoFubenCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildFireInfoFubenCmd::MergeFrom(const GuildFireInfoFubenCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_fire()) {
      set_fire(from.fire());
    }
    if (from.has_def_guildid()) {
      set_def_guildid(from.def_guildid());
    }
    if (from.has_endfire_time()) {
      set_endfire_time(from.endfire_time());
    }
    if (from.has_danger()) {
      set_danger(from.danger());
    }
    if (from.has_danger_time()) {
      set_danger_time(from.danger_time());
    }
    if (from.has_metal_hpper()) {
      set_metal_hpper(from.metal_hpper());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_calmdown()) {
      set_calmdown(from.calmdown());
    }
    if (from.has_calm_time()) {
      set_calm_time(from.calm_time());
    }
    if (from.has_def_guildname()) {
      set_def_guildname(from.def_guildname());
    }
    if (from.has_def_perfect()) {
      set_def_perfect(from.def_perfect());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildFireInfoFubenCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildFireInfoFubenCmd::CopyFrom(const GuildFireInfoFubenCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildFireInfoFubenCmd::IsInitialized() const {

  return true;
}

void GuildFireInfoFubenCmd::Swap(GuildFireInfoFubenCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(fire_, other->fire_);
    std::swap(def_guildid_, other->def_guildid_);
    std::swap(endfire_time_, other->endfire_time_);
    std::swap(danger_, other->danger_);
    std::swap(danger_time_, other->danger_time_);
    std::swap(metal_hpper_, other->metal_hpper_);
    std::swap(calmdown_, other->calmdown_);
    std::swap(calm_time_, other->calm_time_);
    std::swap(def_guildname_, other->def_guildname_);
    std::swap(def_perfect_, other->def_perfect_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildFireInfoFubenCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildFireInfoFubenCmd_descriptor_;
  metadata.reflection = GuildFireInfoFubenCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildFireStopFubenCmd::kCmdFieldNumber;
const int GuildFireStopFubenCmd::kParamFieldNumber;
const int GuildFireStopFubenCmd::kResultFieldNumber;
#endif  // !_MSC_VER

GuildFireStopFubenCmd::GuildFireStopFubenCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GuildFireStopFubenCmd)
}

void GuildFireStopFubenCmd::InitAsDefaultInstance() {
}

GuildFireStopFubenCmd::GuildFireStopFubenCmd(const GuildFireStopFubenCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GuildFireStopFubenCmd)
}

void GuildFireStopFubenCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 11;
  param_ = 19;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildFireStopFubenCmd::~GuildFireStopFubenCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GuildFireStopFubenCmd)
  SharedDtor();
}

void GuildFireStopFubenCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildFireStopFubenCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildFireStopFubenCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildFireStopFubenCmd_descriptor_;
}

const GuildFireStopFubenCmd& GuildFireStopFubenCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FuBenCmd_2eproto();
  return *default_instance_;
}

GuildFireStopFubenCmd* GuildFireStopFubenCmd::default_instance_ = NULL;

GuildFireStopFubenCmd* GuildFireStopFubenCmd::New() const {
  return new GuildFireStopFubenCmd;
}

void GuildFireStopFubenCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 11;
    param_ = 19;
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildFireStopFubenCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GuildFireStopFubenCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.FuBenParam param = 2 [default = GUILD_FIRE_STOP];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::FuBenParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::FuBenParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // required .Cmd.EGuildFireResult result = 3;
      case 3: {
        if (tag == 24) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EGuildFireResult_IsValid(value)) {
            set_result(static_cast< ::Cmd::EGuildFireResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GuildFireStopFubenCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GuildFireStopFubenCmd)
  return false;
#undef DO_
}

void GuildFireStopFubenCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GuildFireStopFubenCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.FuBenParam param = 2 [default = GUILD_FIRE_STOP];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // required .Cmd.EGuildFireResult result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GuildFireStopFubenCmd)
}

::google::protobuf::uint8* GuildFireStopFubenCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GuildFireStopFubenCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.FuBenParam param = 2 [default = GUILD_FIRE_STOP];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // required .Cmd.EGuildFireResult result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GuildFireStopFubenCmd)
  return target;
}

int GuildFireStopFubenCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.FuBenParam param = 2 [default = GUILD_FIRE_STOP];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // required .Cmd.EGuildFireResult result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildFireStopFubenCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildFireStopFubenCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildFireStopFubenCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildFireStopFubenCmd::MergeFrom(const GuildFireStopFubenCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildFireStopFubenCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildFireStopFubenCmd::CopyFrom(const GuildFireStopFubenCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildFireStopFubenCmd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  return true;
}

void GuildFireStopFubenCmd::Swap(GuildFireStopFubenCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildFireStopFubenCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildFireStopFubenCmd_descriptor_;
  metadata.reflection = GuildFireStopFubenCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildFireDangerFubenCmd::kCmdFieldNumber;
const int GuildFireDangerFubenCmd::kParamFieldNumber;
const int GuildFireDangerFubenCmd::kDangerFieldNumber;
const int GuildFireDangerFubenCmd::kDangerTimeFieldNumber;
#endif  // !_MSC_VER

GuildFireDangerFubenCmd::GuildFireDangerFubenCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GuildFireDangerFubenCmd)
}

void GuildFireDangerFubenCmd::InitAsDefaultInstance() {
}

GuildFireDangerFubenCmd::GuildFireDangerFubenCmd(const GuildFireDangerFubenCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GuildFireDangerFubenCmd)
}

void GuildFireDangerFubenCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 11;
  param_ = 20;
  danger_ = false;
  danger_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildFireDangerFubenCmd::~GuildFireDangerFubenCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GuildFireDangerFubenCmd)
  SharedDtor();
}

void GuildFireDangerFubenCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildFireDangerFubenCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildFireDangerFubenCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildFireDangerFubenCmd_descriptor_;
}

const GuildFireDangerFubenCmd& GuildFireDangerFubenCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FuBenCmd_2eproto();
  return *default_instance_;
}

GuildFireDangerFubenCmd* GuildFireDangerFubenCmd::default_instance_ = NULL;

GuildFireDangerFubenCmd* GuildFireDangerFubenCmd::New() const {
  return new GuildFireDangerFubenCmd;
}

void GuildFireDangerFubenCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GuildFireDangerFubenCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(danger_, danger_time_);
    cmd_ = 11;
    param_ = 20;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildFireDangerFubenCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GuildFireDangerFubenCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.FuBenParam param = 2 [default = GUILD_FIRE_DANGER];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::FuBenParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::FuBenParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_danger;
        break;
      }

      // optional bool danger = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_danger:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &danger_)));
          set_has_danger();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_danger_time;
        break;
      }

      // optional uint32 danger_time = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_danger_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &danger_time_)));
          set_has_danger_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GuildFireDangerFubenCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GuildFireDangerFubenCmd)
  return false;
#undef DO_
}

void GuildFireDangerFubenCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GuildFireDangerFubenCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.FuBenParam param = 2 [default = GUILD_FIRE_DANGER];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional bool danger = 3 [default = false];
  if (has_danger()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->danger(), output);
  }

  // optional uint32 danger_time = 4 [default = 0];
  if (has_danger_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->danger_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GuildFireDangerFubenCmd)
}

::google::protobuf::uint8* GuildFireDangerFubenCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GuildFireDangerFubenCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.FuBenParam param = 2 [default = GUILD_FIRE_DANGER];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional bool danger = 3 [default = false];
  if (has_danger()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->danger(), target);
  }

  // optional uint32 danger_time = 4 [default = 0];
  if (has_danger_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->danger_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GuildFireDangerFubenCmd)
  return target;
}

int GuildFireDangerFubenCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.FuBenParam param = 2 [default = GUILD_FIRE_DANGER];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional bool danger = 3 [default = false];
    if (has_danger()) {
      total_size += 1 + 1;
    }

    // optional uint32 danger_time = 4 [default = 0];
    if (has_danger_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->danger_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildFireDangerFubenCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildFireDangerFubenCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildFireDangerFubenCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildFireDangerFubenCmd::MergeFrom(const GuildFireDangerFubenCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_danger()) {
      set_danger(from.danger());
    }
    if (from.has_danger_time()) {
      set_danger_time(from.danger_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildFireDangerFubenCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildFireDangerFubenCmd::CopyFrom(const GuildFireDangerFubenCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildFireDangerFubenCmd::IsInitialized() const {

  return true;
}

void GuildFireDangerFubenCmd::Swap(GuildFireDangerFubenCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(danger_, other->danger_);
    std::swap(danger_time_, other->danger_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildFireDangerFubenCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildFireDangerFubenCmd_descriptor_;
  metadata.reflection = GuildFireDangerFubenCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildFireMetalHpFubenCmd::kCmdFieldNumber;
const int GuildFireMetalHpFubenCmd::kParamFieldNumber;
const int GuildFireMetalHpFubenCmd::kHpperFieldNumber;
#endif  // !_MSC_VER

GuildFireMetalHpFubenCmd::GuildFireMetalHpFubenCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GuildFireMetalHpFubenCmd)
}

void GuildFireMetalHpFubenCmd::InitAsDefaultInstance() {
}

GuildFireMetalHpFubenCmd::GuildFireMetalHpFubenCmd(const GuildFireMetalHpFubenCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GuildFireMetalHpFubenCmd)
}

void GuildFireMetalHpFubenCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 11;
  param_ = 21;
  hpper_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildFireMetalHpFubenCmd::~GuildFireMetalHpFubenCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GuildFireMetalHpFubenCmd)
  SharedDtor();
}

void GuildFireMetalHpFubenCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildFireMetalHpFubenCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildFireMetalHpFubenCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildFireMetalHpFubenCmd_descriptor_;
}

const GuildFireMetalHpFubenCmd& GuildFireMetalHpFubenCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FuBenCmd_2eproto();
  return *default_instance_;
}

GuildFireMetalHpFubenCmd* GuildFireMetalHpFubenCmd::default_instance_ = NULL;

GuildFireMetalHpFubenCmd* GuildFireMetalHpFubenCmd::New() const {
  return new GuildFireMetalHpFubenCmd;
}

void GuildFireMetalHpFubenCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 11;
    param_ = 21;
    hpper_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildFireMetalHpFubenCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GuildFireMetalHpFubenCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.FuBenParam param = 2 [default = GUILD_FIRE_METALHP];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::FuBenParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::FuBenParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_hpper;
        break;
      }

      // optional uint32 hpper = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_hpper:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hpper_)));
          set_has_hpper();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GuildFireMetalHpFubenCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GuildFireMetalHpFubenCmd)
  return false;
#undef DO_
}

void GuildFireMetalHpFubenCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GuildFireMetalHpFubenCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.FuBenParam param = 2 [default = GUILD_FIRE_METALHP];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 hpper = 3 [default = 0];
  if (has_hpper()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hpper(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GuildFireMetalHpFubenCmd)
}

::google::protobuf::uint8* GuildFireMetalHpFubenCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GuildFireMetalHpFubenCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.FuBenParam param = 2 [default = GUILD_FIRE_METALHP];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 hpper = 3 [default = 0];
  if (has_hpper()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hpper(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GuildFireMetalHpFubenCmd)
  return target;
}

int GuildFireMetalHpFubenCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.FuBenParam param = 2 [default = GUILD_FIRE_METALHP];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 hpper = 3 [default = 0];
    if (has_hpper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hpper());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildFireMetalHpFubenCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildFireMetalHpFubenCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildFireMetalHpFubenCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildFireMetalHpFubenCmd::MergeFrom(const GuildFireMetalHpFubenCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_hpper()) {
      set_hpper(from.hpper());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildFireMetalHpFubenCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildFireMetalHpFubenCmd::CopyFrom(const GuildFireMetalHpFubenCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildFireMetalHpFubenCmd::IsInitialized() const {

  return true;
}

void GuildFireMetalHpFubenCmd::Swap(GuildFireMetalHpFubenCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(hpper_, other->hpper_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildFireMetalHpFubenCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildFireMetalHpFubenCmd_descriptor_;
  metadata.reflection = GuildFireMetalHpFubenCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildFireCalmFubenCmd::kCmdFieldNumber;
const int GuildFireCalmFubenCmd::kParamFieldNumber;
const int GuildFireCalmFubenCmd::kCalmFieldNumber;
#endif  // !_MSC_VER

GuildFireCalmFubenCmd::GuildFireCalmFubenCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GuildFireCalmFubenCmd)
}

void GuildFireCalmFubenCmd::InitAsDefaultInstance() {
}

GuildFireCalmFubenCmd::GuildFireCalmFubenCmd(const GuildFireCalmFubenCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GuildFireCalmFubenCmd)
}

void GuildFireCalmFubenCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 11;
  param_ = 22;
  calm_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildFireCalmFubenCmd::~GuildFireCalmFubenCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GuildFireCalmFubenCmd)
  SharedDtor();
}

void GuildFireCalmFubenCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildFireCalmFubenCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildFireCalmFubenCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildFireCalmFubenCmd_descriptor_;
}

const GuildFireCalmFubenCmd& GuildFireCalmFubenCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FuBenCmd_2eproto();
  return *default_instance_;
}

GuildFireCalmFubenCmd* GuildFireCalmFubenCmd::default_instance_ = NULL;

GuildFireCalmFubenCmd* GuildFireCalmFubenCmd::New() const {
  return new GuildFireCalmFubenCmd;
}

void GuildFireCalmFubenCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 11;
    param_ = 22;
    calm_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildFireCalmFubenCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GuildFireCalmFubenCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.FuBenParam param = 2 [default = GUILD_FIRE_CALM];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::FuBenParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::FuBenParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_calm;
        break;
      }

      // optional bool calm = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_calm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &calm_)));
          set_has_calm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GuildFireCalmFubenCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GuildFireCalmFubenCmd)
  return false;
#undef DO_
}

void GuildFireCalmFubenCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GuildFireCalmFubenCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.FuBenParam param = 2 [default = GUILD_FIRE_CALM];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional bool calm = 3 [default = false];
  if (has_calm()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->calm(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GuildFireCalmFubenCmd)
}

::google::protobuf::uint8* GuildFireCalmFubenCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GuildFireCalmFubenCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.FuBenParam param = 2 [default = GUILD_FIRE_CALM];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional bool calm = 3 [default = false];
  if (has_calm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->calm(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GuildFireCalmFubenCmd)
  return target;
}

int GuildFireCalmFubenCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.FuBenParam param = 2 [default = GUILD_FIRE_CALM];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional bool calm = 3 [default = false];
    if (has_calm()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildFireCalmFubenCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildFireCalmFubenCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildFireCalmFubenCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildFireCalmFubenCmd::MergeFrom(const GuildFireCalmFubenCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_calm()) {
      set_calm(from.calm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildFireCalmFubenCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildFireCalmFubenCmd::CopyFrom(const GuildFireCalmFubenCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildFireCalmFubenCmd::IsInitialized() const {

  return true;
}

void GuildFireCalmFubenCmd::Swap(GuildFireCalmFubenCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(calm_, other->calm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildFireCalmFubenCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildFireCalmFubenCmd_descriptor_;
  metadata.reflection = GuildFireCalmFubenCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildFireNewDefFubenCmd::kCmdFieldNumber;
const int GuildFireNewDefFubenCmd::kParamFieldNumber;
const int GuildFireNewDefFubenCmd::kGuildidFieldNumber;
const int GuildFireNewDefFubenCmd::kGuildnameFieldNumber;
#endif  // !_MSC_VER

GuildFireNewDefFubenCmd::GuildFireNewDefFubenCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GuildFireNewDefFubenCmd)
}

void GuildFireNewDefFubenCmd::InitAsDefaultInstance() {
}

GuildFireNewDefFubenCmd::GuildFireNewDefFubenCmd(const GuildFireNewDefFubenCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GuildFireNewDefFubenCmd)
}

void GuildFireNewDefFubenCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 11;
  param_ = 23;
  guildid_ = GOOGLE_ULONGLONG(0);
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildFireNewDefFubenCmd::~GuildFireNewDefFubenCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GuildFireNewDefFubenCmd)
  SharedDtor();
}

void GuildFireNewDefFubenCmd::SharedDtor() {
  if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guildname_;
  }
  if (this != default_instance_) {
  }
}

void GuildFireNewDefFubenCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildFireNewDefFubenCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildFireNewDefFubenCmd_descriptor_;
}

const GuildFireNewDefFubenCmd& GuildFireNewDefFubenCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FuBenCmd_2eproto();
  return *default_instance_;
}

GuildFireNewDefFubenCmd* GuildFireNewDefFubenCmd::default_instance_ = NULL;

GuildFireNewDefFubenCmd* GuildFireNewDefFubenCmd::New() const {
  return new GuildFireNewDefFubenCmd;
}

void GuildFireNewDefFubenCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 11;
    param_ = 23;
    guildid_ = GOOGLE_ULONGLONG(0);
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guildname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildFireNewDefFubenCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GuildFireNewDefFubenCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.FuBenParam param = 2 [default = GUILD_FIRE_CHANGE_GUILD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::FuBenParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::FuBenParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_guildid;
        break;
      }

      // optional uint64 guildid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_guildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_guildname;
        break;
      }

      // optional string guildname = 4;
      case 4: {
        if (tag == 34) {
         parse_guildname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guildname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GuildFireNewDefFubenCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GuildFireNewDefFubenCmd)
  return false;
#undef DO_
}

void GuildFireNewDefFubenCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GuildFireNewDefFubenCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.FuBenParam param = 2 [default = GUILD_FIRE_CHANGE_GUILD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 guildid = 3 [default = 0];
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->guildid(), output);
  }

  // optional string guildname = 4;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guildname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->guildname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GuildFireNewDefFubenCmd)
}

::google::protobuf::uint8* GuildFireNewDefFubenCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GuildFireNewDefFubenCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.FuBenParam param = 2 [default = GUILD_FIRE_CHANGE_GUILD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 guildid = 3 [default = 0];
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->guildid(), target);
  }

  // optional string guildname = 4;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guildname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->guildname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GuildFireNewDefFubenCmd)
  return target;
}

int GuildFireNewDefFubenCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.FuBenParam param = 2 [default = GUILD_FIRE_CHANGE_GUILD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 guildid = 3 [default = 0];
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // optional string guildname = 4;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildFireNewDefFubenCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildFireNewDefFubenCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildFireNewDefFubenCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildFireNewDefFubenCmd::MergeFrom(const GuildFireNewDefFubenCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildFireNewDefFubenCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildFireNewDefFubenCmd::CopyFrom(const GuildFireNewDefFubenCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildFireNewDefFubenCmd::IsInitialized() const {

  return true;
}

void GuildFireNewDefFubenCmd::Swap(GuildFireNewDefFubenCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(guildid_, other->guildid_);
    std::swap(guildname_, other->guildname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildFireNewDefFubenCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildFireNewDefFubenCmd_descriptor_;
  metadata.reflection = GuildFireNewDefFubenCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildFireRestartFubenCmd::kCmdFieldNumber;
const int GuildFireRestartFubenCmd::kParamFieldNumber;
#endif  // !_MSC_VER

GuildFireRestartFubenCmd::GuildFireRestartFubenCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GuildFireRestartFubenCmd)
}

void GuildFireRestartFubenCmd::InitAsDefaultInstance() {
}

GuildFireRestartFubenCmd::GuildFireRestartFubenCmd(const GuildFireRestartFubenCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GuildFireRestartFubenCmd)
}

void GuildFireRestartFubenCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 11;
  param_ = 24;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildFireRestartFubenCmd::~GuildFireRestartFubenCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GuildFireRestartFubenCmd)
  SharedDtor();
}

void GuildFireRestartFubenCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildFireRestartFubenCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildFireRestartFubenCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildFireRestartFubenCmd_descriptor_;
}

const GuildFireRestartFubenCmd& GuildFireRestartFubenCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FuBenCmd_2eproto();
  return *default_instance_;
}

GuildFireRestartFubenCmd* GuildFireRestartFubenCmd::default_instance_ = NULL;

GuildFireRestartFubenCmd* GuildFireRestartFubenCmd::New() const {
  return new GuildFireRestartFubenCmd;
}

void GuildFireRestartFubenCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 11;
    param_ = 24;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildFireRestartFubenCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GuildFireRestartFubenCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.FuBenParam param = 2 [default = GUILD_FIRE_RESTART];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::FuBenParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::FuBenParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GuildFireRestartFubenCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GuildFireRestartFubenCmd)
  return false;
#undef DO_
}

void GuildFireRestartFubenCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GuildFireRestartFubenCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.FuBenParam param = 2 [default = GUILD_FIRE_RESTART];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GuildFireRestartFubenCmd)
}

::google::protobuf::uint8* GuildFireRestartFubenCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GuildFireRestartFubenCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.FuBenParam param = 2 [default = GUILD_FIRE_RESTART];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GuildFireRestartFubenCmd)
  return target;
}

int GuildFireRestartFubenCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.FuBenParam param = 2 [default = GUILD_FIRE_RESTART];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildFireRestartFubenCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildFireRestartFubenCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildFireRestartFubenCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildFireRestartFubenCmd::MergeFrom(const GuildFireRestartFubenCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildFireRestartFubenCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildFireRestartFubenCmd::CopyFrom(const GuildFireRestartFubenCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildFireRestartFubenCmd::IsInitialized() const {

  return true;
}

void GuildFireRestartFubenCmd::Swap(GuildFireRestartFubenCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildFireRestartFubenCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildFireRestartFubenCmd_descriptor_;
  metadata.reflection = GuildFireRestartFubenCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildFireStatusFubenCmd::kCmdFieldNumber;
const int GuildFireStatusFubenCmd::kParamFieldNumber;
const int GuildFireStatusFubenCmd::kOpenFieldNumber;
const int GuildFireStatusFubenCmd::kStarttimeFieldNumber;
const int GuildFireStatusFubenCmd::kCityidFieldNumber;
const int GuildFireStatusFubenCmd::kCityopenFieldNumber;
#endif  // !_MSC_VER

GuildFireStatusFubenCmd::GuildFireStatusFubenCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GuildFireStatusFubenCmd)
}

void GuildFireStatusFubenCmd::InitAsDefaultInstance() {
}

GuildFireStatusFubenCmd::GuildFireStatusFubenCmd(const GuildFireStatusFubenCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GuildFireStatusFubenCmd)
}

void GuildFireStatusFubenCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 11;
  param_ = 25;
  open_ = false;
  starttime_ = 0u;
  cityid_ = 0u;
  cityopen_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildFireStatusFubenCmd::~GuildFireStatusFubenCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GuildFireStatusFubenCmd)
  SharedDtor();
}

void GuildFireStatusFubenCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildFireStatusFubenCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildFireStatusFubenCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildFireStatusFubenCmd_descriptor_;
}

const GuildFireStatusFubenCmd& GuildFireStatusFubenCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FuBenCmd_2eproto();
  return *default_instance_;
}

GuildFireStatusFubenCmd* GuildFireStatusFubenCmd::default_instance_ = NULL;

GuildFireStatusFubenCmd* GuildFireStatusFubenCmd::New() const {
  return new GuildFireStatusFubenCmd;
}

void GuildFireStatusFubenCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GuildFireStatusFubenCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(starttime_, cityid_);
    cmd_ = 11;
    param_ = 25;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildFireStatusFubenCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GuildFireStatusFubenCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.FuBenParam param = 2 [default = GUILD_FIRE_STATUS];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::FuBenParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::FuBenParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_open;
        break;
      }

      // optional bool open = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &open_)));
          set_has_open();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_starttime;
        break;
      }

      // optional uint32 starttime = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_starttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_cityid;
        break;
      }

      // required uint32 cityid = 5;
      case 5: {
        if (tag == 40) {
         parse_cityid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cityid_)));
          set_has_cityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_cityopen;
        break;
      }

      // optional bool cityopen = 6 [default = false];
      case 6: {
        if (tag == 48) {
         parse_cityopen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cityopen_)));
          set_has_cityopen();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GuildFireStatusFubenCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GuildFireStatusFubenCmd)
  return false;
#undef DO_
}

void GuildFireStatusFubenCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GuildFireStatusFubenCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.FuBenParam param = 2 [default = GUILD_FIRE_STATUS];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional bool open = 3 [default = false];
  if (has_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->open(), output);
  }

  // optional uint32 starttime = 4 [default = 0];
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->starttime(), output);
  }

  // required uint32 cityid = 5;
  if (has_cityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->cityid(), output);
  }

  // optional bool cityopen = 6 [default = false];
  if (has_cityopen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->cityopen(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GuildFireStatusFubenCmd)
}

::google::protobuf::uint8* GuildFireStatusFubenCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GuildFireStatusFubenCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.FuBenParam param = 2 [default = GUILD_FIRE_STATUS];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional bool open = 3 [default = false];
  if (has_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->open(), target);
  }

  // optional uint32 starttime = 4 [default = 0];
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->starttime(), target);
  }

  // required uint32 cityid = 5;
  if (has_cityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->cityid(), target);
  }

  // optional bool cityopen = 6 [default = false];
  if (has_cityopen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->cityopen(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GuildFireStatusFubenCmd)
  return target;
}

int GuildFireStatusFubenCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.FuBenParam param = 2 [default = GUILD_FIRE_STATUS];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional bool open = 3 [default = false];
    if (has_open()) {
      total_size += 1 + 1;
    }

    // optional uint32 starttime = 4 [default = 0];
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->starttime());
    }

    // required uint32 cityid = 5;
    if (has_cityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cityid());
    }

    // optional bool cityopen = 6 [default = false];
    if (has_cityopen()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildFireStatusFubenCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildFireStatusFubenCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildFireStatusFubenCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildFireStatusFubenCmd::MergeFrom(const GuildFireStatusFubenCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_open()) {
      set_open(from.open());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_cityid()) {
      set_cityid(from.cityid());
    }
    if (from.has_cityopen()) {
      set_cityopen(from.cityopen());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildFireStatusFubenCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildFireStatusFubenCmd::CopyFrom(const GuildFireStatusFubenCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildFireStatusFubenCmd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000010) != 0x00000010) return false;

  return true;
}

void GuildFireStatusFubenCmd::Swap(GuildFireStatusFubenCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(open_, other->open_);
    std::swap(starttime_, other->starttime_);
    std::swap(cityid_, other->cityid_);
    std::swap(cityopen_, other->cityopen_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildFireStatusFubenCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildFireStatusFubenCmd_descriptor_;
  metadata.reflection = GuildFireStatusFubenCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GvgData::kTypeFieldNumber;
const int GvgData::kValueFieldNumber;
#endif  // !_MSC_VER

GvgData::GvgData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GvgData)
}

void GvgData::InitAsDefaultInstance() {
}

GvgData::GvgData(const GvgData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GvgData)
}

void GvgData::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GvgData::~GvgData() {
  // @@protoc_insertion_point(destructor:Cmd.GvgData)
  SharedDtor();
}

void GvgData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GvgData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GvgData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GvgData_descriptor_;
}

const GvgData& GvgData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FuBenCmd_2eproto();
  return *default_instance_;
}

GvgData* GvgData::default_instance_ = NULL;

GvgData* GvgData::New() const {
  return new GvgData;
}

void GvgData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GvgData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, value_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GvgData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GvgData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.EGvgDataType type = 1 [default = EGVGDATA_MIN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EGvgDataType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EGvgDataType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional uint32 value = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GvgData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GvgData)
  return false;
#undef DO_
}

void GvgData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GvgData)
  // optional .Cmd.EGvgDataType type = 1 [default = EGVGDATA_MIN];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint32 value = 2 [default = 0];
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GvgData)
}

::google::protobuf::uint8* GvgData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GvgData)
  // optional .Cmd.EGvgDataType type = 1 [default = EGVGDATA_MIN];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint32 value = 2 [default = 0];
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GvgData)
  return target;
}

int GvgData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.EGvgDataType type = 1 [default = EGVGDATA_MIN];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 value = 2 [default = 0];
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GvgData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GvgData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GvgData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GvgData::MergeFrom(const GvgData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GvgData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GvgData::CopyFrom(const GvgData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GvgData::IsInitialized() const {

  return true;
}

void GvgData::Swap(GvgData* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GvgData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GvgData_descriptor_;
  metadata.reflection = GvgData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GvgDataSyncCmd::kCmdFieldNumber;
const int GvgDataSyncCmd::kParamFieldNumber;
const int GvgDataSyncCmd::kDatasFieldNumber;
#endif  // !_MSC_VER

GvgDataSyncCmd::GvgDataSyncCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GvgDataSyncCmd)
}

void GvgDataSyncCmd::InitAsDefaultInstance() {
}

GvgDataSyncCmd::GvgDataSyncCmd(const GvgDataSyncCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GvgDataSyncCmd)
}

void GvgDataSyncCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 11;
  param_ = 26;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GvgDataSyncCmd::~GvgDataSyncCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GvgDataSyncCmd)
  SharedDtor();
}

void GvgDataSyncCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GvgDataSyncCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GvgDataSyncCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GvgDataSyncCmd_descriptor_;
}

const GvgDataSyncCmd& GvgDataSyncCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FuBenCmd_2eproto();
  return *default_instance_;
}

GvgDataSyncCmd* GvgDataSyncCmd::default_instance_ = NULL;

GvgDataSyncCmd* GvgDataSyncCmd::New() const {
  return new GvgDataSyncCmd;
}

void GvgDataSyncCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 11;
    param_ = 26;
  }
  datas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GvgDataSyncCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GvgDataSyncCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.FuBenParam param = 2 [default = GVG_DATA_SYNC_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::FuBenParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::FuBenParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_datas;
        break;
      }

      // repeated .Cmd.GvgData datas = 3;
      case 3: {
        if (tag == 26) {
         parse_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_datas;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GvgDataSyncCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GvgDataSyncCmd)
  return false;
#undef DO_
}

void GvgDataSyncCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GvgDataSyncCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.FuBenParam param = 2 [default = GVG_DATA_SYNC_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.GvgData datas = 3;
  for (int i = 0; i < this->datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->datas(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GvgDataSyncCmd)
}

::google::protobuf::uint8* GvgDataSyncCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GvgDataSyncCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.FuBenParam param = 2 [default = GVG_DATA_SYNC_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.GvgData datas = 3;
  for (int i = 0; i < this->datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->datas(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GvgDataSyncCmd)
  return target;
}

int GvgDataSyncCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.FuBenParam param = 2 [default = GVG_DATA_SYNC_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.GvgData datas = 3;
  total_size += 1 * this->datas_size();
  for (int i = 0; i < this->datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GvgDataSyncCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GvgDataSyncCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GvgDataSyncCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GvgDataSyncCmd::MergeFrom(const GvgDataSyncCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  datas_.MergeFrom(from.datas_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GvgDataSyncCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GvgDataSyncCmd::CopyFrom(const GvgDataSyncCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GvgDataSyncCmd::IsInitialized() const {

  return true;
}

void GvgDataSyncCmd::Swap(GvgDataSyncCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    datas_.Swap(&other->datas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GvgDataSyncCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GvgDataSyncCmd_descriptor_;
  metadata.reflection = GvgDataSyncCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GvgDataUpdateCmd::kCmdFieldNumber;
const int GvgDataUpdateCmd::kParamFieldNumber;
const int GvgDataUpdateCmd::kDataFieldNumber;
#endif  // !_MSC_VER

GvgDataUpdateCmd::GvgDataUpdateCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GvgDataUpdateCmd)
}

void GvgDataUpdateCmd::InitAsDefaultInstance() {
  data_ = const_cast< ::Cmd::GvgData*>(&::Cmd::GvgData::default_instance());
}

GvgDataUpdateCmd::GvgDataUpdateCmd(const GvgDataUpdateCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GvgDataUpdateCmd)
}

void GvgDataUpdateCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 11;
  param_ = 27;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GvgDataUpdateCmd::~GvgDataUpdateCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GvgDataUpdateCmd)
  SharedDtor();
}

void GvgDataUpdateCmd::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void GvgDataUpdateCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GvgDataUpdateCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GvgDataUpdateCmd_descriptor_;
}

const GvgDataUpdateCmd& GvgDataUpdateCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FuBenCmd_2eproto();
  return *default_instance_;
}

GvgDataUpdateCmd* GvgDataUpdateCmd::default_instance_ = NULL;

GvgDataUpdateCmd* GvgDataUpdateCmd::New() const {
  return new GvgDataUpdateCmd;
}

void GvgDataUpdateCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 11;
    param_ = 27;
    if (has_data()) {
      if (data_ != NULL) data_->::Cmd::GvgData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GvgDataUpdateCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GvgDataUpdateCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.FuBenParam param = 2 [default = GVG_DATA_UPDATE_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::FuBenParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::FuBenParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional .Cmd.GvgData data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GvgDataUpdateCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GvgDataUpdateCmd)
  return false;
#undef DO_
}

void GvgDataUpdateCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GvgDataUpdateCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.FuBenParam param = 2 [default = GVG_DATA_UPDATE_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.GvgData data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GvgDataUpdateCmd)
}

::google::protobuf::uint8* GvgDataUpdateCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GvgDataUpdateCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.FuBenParam param = 2 [default = GVG_DATA_UPDATE_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.GvgData data = 3;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GvgDataUpdateCmd)
  return target;
}

int GvgDataUpdateCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.FuBenParam param = 2 [default = GVG_DATA_UPDATE_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.GvgData data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GvgDataUpdateCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GvgDataUpdateCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GvgDataUpdateCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GvgDataUpdateCmd::MergeFrom(const GvgDataUpdateCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_data()) {
      mutable_data()->::Cmd::GvgData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GvgDataUpdateCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GvgDataUpdateCmd::CopyFrom(const GvgDataUpdateCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GvgDataUpdateCmd::IsInitialized() const {

  return true;
}

void GvgDataUpdateCmd::Swap(GvgDataUpdateCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GvgDataUpdateCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GvgDataUpdateCmd_descriptor_;
  metadata.reflection = GvgDataUpdateCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GvgDefNameChangeFubenCmd::kCmdFieldNumber;
const int GvgDefNameChangeFubenCmd::kParamFieldNumber;
const int GvgDefNameChangeFubenCmd::kNewnameFieldNumber;
#endif  // !_MSC_VER

GvgDefNameChangeFubenCmd::GvgDefNameChangeFubenCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GvgDefNameChangeFubenCmd)
}

void GvgDefNameChangeFubenCmd::InitAsDefaultInstance() {
}

GvgDefNameChangeFubenCmd::GvgDefNameChangeFubenCmd(const GvgDefNameChangeFubenCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GvgDefNameChangeFubenCmd)
}

void GvgDefNameChangeFubenCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 11;
  param_ = 28;
  newname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GvgDefNameChangeFubenCmd::~GvgDefNameChangeFubenCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GvgDefNameChangeFubenCmd)
  SharedDtor();
}

void GvgDefNameChangeFubenCmd::SharedDtor() {
  if (newname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete newname_;
  }
  if (this != default_instance_) {
  }
}

void GvgDefNameChangeFubenCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GvgDefNameChangeFubenCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GvgDefNameChangeFubenCmd_descriptor_;
}

const GvgDefNameChangeFubenCmd& GvgDefNameChangeFubenCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FuBenCmd_2eproto();
  return *default_instance_;
}

GvgDefNameChangeFubenCmd* GvgDefNameChangeFubenCmd::default_instance_ = NULL;

GvgDefNameChangeFubenCmd* GvgDefNameChangeFubenCmd::New() const {
  return new GvgDefNameChangeFubenCmd;
}

void GvgDefNameChangeFubenCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 11;
    param_ = 28;
    if (has_newname()) {
      if (newname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        newname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GvgDefNameChangeFubenCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GvgDefNameChangeFubenCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.FuBenParam param = 2 [default = GUILD_FIRE_CHANGE_GUILD_NAME];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::FuBenParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::FuBenParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_newname;
        break;
      }

      // required string newname = 3;
      case 3: {
        if (tag == 26) {
         parse_newname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_newname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->newname().data(), this->newname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "newname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GvgDefNameChangeFubenCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GvgDefNameChangeFubenCmd)
  return false;
#undef DO_
}

void GvgDefNameChangeFubenCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GvgDefNameChangeFubenCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.FuBenParam param = 2 [default = GUILD_FIRE_CHANGE_GUILD_NAME];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // required string newname = 3;
  if (has_newname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->newname().data(), this->newname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "newname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->newname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GvgDefNameChangeFubenCmd)
}

::google::protobuf::uint8* GvgDefNameChangeFubenCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GvgDefNameChangeFubenCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.FuBenParam param = 2 [default = GUILD_FIRE_CHANGE_GUILD_NAME];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // required string newname = 3;
  if (has_newname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->newname().data(), this->newname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "newname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->newname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GvgDefNameChangeFubenCmd)
  return target;
}

int GvgDefNameChangeFubenCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.FuBenParam param = 2 [default = GUILD_FIRE_CHANGE_GUILD_NAME];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // required string newname = 3;
    if (has_newname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->newname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GvgDefNameChangeFubenCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GvgDefNameChangeFubenCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GvgDefNameChangeFubenCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GvgDefNameChangeFubenCmd::MergeFrom(const GvgDefNameChangeFubenCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_newname()) {
      set_newname(from.newname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GvgDefNameChangeFubenCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GvgDefNameChangeFubenCmd::CopyFrom(const GvgDefNameChangeFubenCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GvgDefNameChangeFubenCmd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  return true;
}

void GvgDefNameChangeFubenCmd::Swap(GvgDefNameChangeFubenCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(newname_, other->newname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GvgDefNameChangeFubenCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GvgDefNameChangeFubenCmd_descriptor_;
  metadata.reflection = GvgDefNameChangeFubenCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SyncMvpInfoFubenCmd::kCmdFieldNumber;
const int SyncMvpInfoFubenCmd::kParamFieldNumber;
const int SyncMvpInfoFubenCmd::kUsernumFieldNumber;
const int SyncMvpInfoFubenCmd::kLivebossFieldNumber;
const int SyncMvpInfoFubenCmd::kDiebossFieldNumber;
#endif  // !_MSC_VER

SyncMvpInfoFubenCmd::SyncMvpInfoFubenCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SyncMvpInfoFubenCmd)
}

void SyncMvpInfoFubenCmd::InitAsDefaultInstance() {
}

SyncMvpInfoFubenCmd::SyncMvpInfoFubenCmd(const SyncMvpInfoFubenCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SyncMvpInfoFubenCmd)
}

void SyncMvpInfoFubenCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 11;
  param_ = 29;
  usernum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncMvpInfoFubenCmd::~SyncMvpInfoFubenCmd() {
  // @@protoc_insertion_point(destructor:Cmd.SyncMvpInfoFubenCmd)
  SharedDtor();
}

void SyncMvpInfoFubenCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SyncMvpInfoFubenCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncMvpInfoFubenCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncMvpInfoFubenCmd_descriptor_;
}

const SyncMvpInfoFubenCmd& SyncMvpInfoFubenCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FuBenCmd_2eproto();
  return *default_instance_;
}

SyncMvpInfoFubenCmd* SyncMvpInfoFubenCmd::default_instance_ = NULL;

SyncMvpInfoFubenCmd* SyncMvpInfoFubenCmd::New() const {
  return new SyncMvpInfoFubenCmd;
}

void SyncMvpInfoFubenCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 11;
    param_ = 29;
    usernum_ = 0u;
  }
  liveboss_.Clear();
  dieboss_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncMvpInfoFubenCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SyncMvpInfoFubenCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.FuBenParam param = 2 [default = MVPBATTLE_SYNC_MVPINFO];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::FuBenParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::FuBenParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_usernum;
        break;
      }

      // optional uint32 usernum = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_usernum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usernum_)));
          set_has_usernum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_liveboss;
        break;
      }

      // repeated uint32 liveboss = 4;
      case 4: {
        if (tag == 32) {
         parse_liveboss:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_liveboss())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_liveboss())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_liveboss;
        if (input->ExpectTag(40)) goto parse_dieboss;
        break;
      }

      // repeated uint32 dieboss = 5;
      case 5: {
        if (tag == 40) {
         parse_dieboss:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_dieboss())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_dieboss())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_dieboss;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SyncMvpInfoFubenCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SyncMvpInfoFubenCmd)
  return false;
#undef DO_
}

void SyncMvpInfoFubenCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SyncMvpInfoFubenCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.FuBenParam param = 2 [default = MVPBATTLE_SYNC_MVPINFO];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 usernum = 3 [default = 0];
  if (has_usernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->usernum(), output);
  }

  // repeated uint32 liveboss = 4;
  for (int i = 0; i < this->liveboss_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->liveboss(i), output);
  }

  // repeated uint32 dieboss = 5;
  for (int i = 0; i < this->dieboss_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->dieboss(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SyncMvpInfoFubenCmd)
}

::google::protobuf::uint8* SyncMvpInfoFubenCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SyncMvpInfoFubenCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.FuBenParam param = 2 [default = MVPBATTLE_SYNC_MVPINFO];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 usernum = 3 [default = 0];
  if (has_usernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->usernum(), target);
  }

  // repeated uint32 liveboss = 4;
  for (int i = 0; i < this->liveboss_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->liveboss(i), target);
  }

  // repeated uint32 dieboss = 5;
  for (int i = 0; i < this->dieboss_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->dieboss(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SyncMvpInfoFubenCmd)
  return target;
}

int SyncMvpInfoFubenCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.FuBenParam param = 2 [default = MVPBATTLE_SYNC_MVPINFO];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 usernum = 3 [default = 0];
    if (has_usernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usernum());
    }

  }
  // repeated uint32 liveboss = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->liveboss_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->liveboss(i));
    }
    total_size += 1 * this->liveboss_size() + data_size;
  }

  // repeated uint32 dieboss = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->dieboss_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->dieboss(i));
    }
    total_size += 1 * this->dieboss_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncMvpInfoFubenCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SyncMvpInfoFubenCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SyncMvpInfoFubenCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SyncMvpInfoFubenCmd::MergeFrom(const SyncMvpInfoFubenCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  liveboss_.MergeFrom(from.liveboss_);
  dieboss_.MergeFrom(from.dieboss_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_usernum()) {
      set_usernum(from.usernum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncMvpInfoFubenCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncMvpInfoFubenCmd::CopyFrom(const SyncMvpInfoFubenCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncMvpInfoFubenCmd::IsInitialized() const {

  return true;
}

void SyncMvpInfoFubenCmd::Swap(SyncMvpInfoFubenCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(usernum_, other->usernum_);
    liveboss_.Swap(&other->liveboss_);
    dieboss_.Swap(&other->dieboss_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SyncMvpInfoFubenCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncMvpInfoFubenCmd_descriptor_;
  metadata.reflection = SyncMvpInfoFubenCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BossDieFubenCmd::kCmdFieldNumber;
const int BossDieFubenCmd::kParamFieldNumber;
const int BossDieFubenCmd::kNpcidFieldNumber;
#endif  // !_MSC_VER

BossDieFubenCmd::BossDieFubenCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BossDieFubenCmd)
}

void BossDieFubenCmd::InitAsDefaultInstance() {
}

BossDieFubenCmd::BossDieFubenCmd(const BossDieFubenCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BossDieFubenCmd)
}

void BossDieFubenCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 11;
  param_ = 30;
  npcid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BossDieFubenCmd::~BossDieFubenCmd() {
  // @@protoc_insertion_point(destructor:Cmd.BossDieFubenCmd)
  SharedDtor();
}

void BossDieFubenCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BossDieFubenCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BossDieFubenCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BossDieFubenCmd_descriptor_;
}

const BossDieFubenCmd& BossDieFubenCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FuBenCmd_2eproto();
  return *default_instance_;
}

BossDieFubenCmd* BossDieFubenCmd::default_instance_ = NULL;

BossDieFubenCmd* BossDieFubenCmd::New() const {
  return new BossDieFubenCmd;
}

void BossDieFubenCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 11;
    param_ = 30;
    npcid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BossDieFubenCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BossDieFubenCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.FuBenParam param = 2 [default = MVPBATTLE_BOSS_DIE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::FuBenParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::FuBenParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_npcid;
        break;
      }

      // required uint32 npcid = 3;
      case 3: {
        if (tag == 24) {
         parse_npcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &npcid_)));
          set_has_npcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BossDieFubenCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BossDieFubenCmd)
  return false;
#undef DO_
}

void BossDieFubenCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BossDieFubenCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.FuBenParam param = 2 [default = MVPBATTLE_BOSS_DIE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // required uint32 npcid = 3;
  if (has_npcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->npcid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BossDieFubenCmd)
}

::google::protobuf::uint8* BossDieFubenCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BossDieFubenCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.FuBenParam param = 2 [default = MVPBATTLE_BOSS_DIE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // required uint32 npcid = 3;
  if (has_npcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->npcid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BossDieFubenCmd)
  return target;
}

int BossDieFubenCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.FuBenParam param = 2 [default = MVPBATTLE_BOSS_DIE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // required uint32 npcid = 3;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->npcid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BossDieFubenCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BossDieFubenCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BossDieFubenCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BossDieFubenCmd::MergeFrom(const BossDieFubenCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_npcid()) {
      set_npcid(from.npcid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BossDieFubenCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BossDieFubenCmd::CopyFrom(const BossDieFubenCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BossDieFubenCmd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  return true;
}

void BossDieFubenCmd::Swap(BossDieFubenCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(npcid_, other->npcid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BossDieFubenCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BossDieFubenCmd_descriptor_;
  metadata.reflection = BossDieFubenCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateUserNumFubenCmd::kCmdFieldNumber;
const int UpdateUserNumFubenCmd::kParamFieldNumber;
const int UpdateUserNumFubenCmd::kUsernumFieldNumber;
#endif  // !_MSC_VER

UpdateUserNumFubenCmd::UpdateUserNumFubenCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UpdateUserNumFubenCmd)
}

void UpdateUserNumFubenCmd::InitAsDefaultInstance() {
}

UpdateUserNumFubenCmd::UpdateUserNumFubenCmd(const UpdateUserNumFubenCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UpdateUserNumFubenCmd)
}

void UpdateUserNumFubenCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 11;
  param_ = 31;
  usernum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateUserNumFubenCmd::~UpdateUserNumFubenCmd() {
  // @@protoc_insertion_point(destructor:Cmd.UpdateUserNumFubenCmd)
  SharedDtor();
}

void UpdateUserNumFubenCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateUserNumFubenCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateUserNumFubenCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateUserNumFubenCmd_descriptor_;
}

const UpdateUserNumFubenCmd& UpdateUserNumFubenCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FuBenCmd_2eproto();
  return *default_instance_;
}

UpdateUserNumFubenCmd* UpdateUserNumFubenCmd::default_instance_ = NULL;

UpdateUserNumFubenCmd* UpdateUserNumFubenCmd::New() const {
  return new UpdateUserNumFubenCmd;
}

void UpdateUserNumFubenCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 11;
    param_ = 31;
    usernum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateUserNumFubenCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UpdateUserNumFubenCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.FuBenParam param = 2 [default = FUBEN_USERNUM_COUNT];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::FuBenParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::FuBenParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_usernum;
        break;
      }

      // optional uint32 usernum = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_usernum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usernum_)));
          set_has_usernum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UpdateUserNumFubenCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UpdateUserNumFubenCmd)
  return false;
#undef DO_
}

void UpdateUserNumFubenCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UpdateUserNumFubenCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.FuBenParam param = 2 [default = FUBEN_USERNUM_COUNT];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 usernum = 3 [default = 0];
  if (has_usernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->usernum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UpdateUserNumFubenCmd)
}

::google::protobuf::uint8* UpdateUserNumFubenCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UpdateUserNumFubenCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.FuBenParam param = 2 [default = FUBEN_USERNUM_COUNT];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 usernum = 3 [default = 0];
  if (has_usernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->usernum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UpdateUserNumFubenCmd)
  return target;
}

int UpdateUserNumFubenCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.FuBenParam param = 2 [default = FUBEN_USERNUM_COUNT];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 usernum = 3 [default = 0];
    if (has_usernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usernum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateUserNumFubenCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateUserNumFubenCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateUserNumFubenCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateUserNumFubenCmd::MergeFrom(const UpdateUserNumFubenCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_usernum()) {
      set_usernum(from.usernum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateUserNumFubenCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateUserNumFubenCmd::CopyFrom(const UpdateUserNumFubenCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateUserNumFubenCmd::IsInitialized() const {

  return true;
}

void UpdateUserNumFubenCmd::Swap(UpdateUserNumFubenCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(usernum_, other->usernum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateUserNumFubenCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateUserNumFubenCmd_descriptor_;
  metadata.reflection = UpdateUserNumFubenCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GvgTowerValue::kGuildidFieldNumber;
const int GvgTowerValue::kValueFieldNumber;
#endif  // !_MSC_VER

GvgTowerValue::GvgTowerValue()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GvgTowerValue)
}

void GvgTowerValue::InitAsDefaultInstance() {
}

GvgTowerValue::GvgTowerValue(const GvgTowerValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GvgTowerValue)
}

void GvgTowerValue::SharedCtor() {
  _cached_size_ = 0;
  guildid_ = GOOGLE_ULONGLONG(0);
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GvgTowerValue::~GvgTowerValue() {
  // @@protoc_insertion_point(destructor:Cmd.GvgTowerValue)
  SharedDtor();
}

void GvgTowerValue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GvgTowerValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GvgTowerValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GvgTowerValue_descriptor_;
}

const GvgTowerValue& GvgTowerValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FuBenCmd_2eproto();
  return *default_instance_;
}

GvgTowerValue* GvgTowerValue::default_instance_ = NULL;

GvgTowerValue* GvgTowerValue::New() const {
  return new GvgTowerValue;
}

void GvgTowerValue::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GvgTowerValue*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(guildid_, value_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GvgTowerValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GvgTowerValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 guildid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional uint32 value = 2;
      case 2: {
        if (tag == 16) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GvgTowerValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GvgTowerValue)
  return false;
#undef DO_
}

void GvgTowerValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GvgTowerValue)
  // optional uint64 guildid = 1;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guildid(), output);
  }

  // optional uint32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GvgTowerValue)
}

::google::protobuf::uint8* GvgTowerValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GvgTowerValue)
  // optional uint64 guildid = 1;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guildid(), target);
  }

  // optional uint32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GvgTowerValue)
  return target;
}

int GvgTowerValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 guildid = 1;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // optional uint32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GvgTowerValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GvgTowerValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GvgTowerValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GvgTowerValue::MergeFrom(const GvgTowerValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GvgTowerValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GvgTowerValue::CopyFrom(const GvgTowerValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GvgTowerValue::IsInitialized() const {

  return true;
}

void GvgTowerValue::Swap(GvgTowerValue* other) {
  if (other != this) {
    std::swap(guildid_, other->guildid_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GvgTowerValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GvgTowerValue_descriptor_;
  metadata.reflection = GvgTowerValue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GvgTowerData::kEtypeFieldNumber;
const int GvgTowerData::kEstateFieldNumber;
const int GvgTowerData::kOwnerGuildFieldNumber;
const int GvgTowerData::kInfoFieldNumber;
#endif  // !_MSC_VER

GvgTowerData::GvgTowerData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GvgTowerData)
}

void GvgTowerData::InitAsDefaultInstance() {
}

GvgTowerData::GvgTowerData(const GvgTowerData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GvgTowerData)
}

void GvgTowerData::SharedCtor() {
  _cached_size_ = 0;
  etype_ = 0;
  estate_ = 1;
  owner_guild_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GvgTowerData::~GvgTowerData() {
  // @@protoc_insertion_point(destructor:Cmd.GvgTowerData)
  SharedDtor();
}

void GvgTowerData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GvgTowerData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GvgTowerData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GvgTowerData_descriptor_;
}

const GvgTowerData& GvgTowerData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FuBenCmd_2eproto();
  return *default_instance_;
}

GvgTowerData* GvgTowerData::default_instance_ = NULL;

GvgTowerData* GvgTowerData::New() const {
  return new GvgTowerData;
}

void GvgTowerData::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    etype_ = 0;
    estate_ = 1;
    owner_guild_ = GOOGLE_ULONGLONG(0);
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GvgTowerData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GvgTowerData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.EGvgTowerType etype = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EGvgTowerType_IsValid(value)) {
            set_etype(static_cast< ::Cmd::EGvgTowerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_estate;
        break;
      }

      // optional .Cmd.EGvgTowerState estate = 2;
      case 2: {
        if (tag == 16) {
         parse_estate:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EGvgTowerState_IsValid(value)) {
            set_estate(static_cast< ::Cmd::EGvgTowerState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_owner_guild;
        break;
      }

      // optional uint64 owner_guild = 3;
      case 3: {
        if (tag == 24) {
         parse_owner_guild:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &owner_guild_)));
          set_has_owner_guild();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_info;
        break;
      }

      // repeated .Cmd.GvgTowerValue info = 4;
      case 4: {
        if (tag == 34) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_info;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GvgTowerData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GvgTowerData)
  return false;
#undef DO_
}

void GvgTowerData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GvgTowerData)
  // optional .Cmd.EGvgTowerType etype = 1;
  if (has_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->etype(), output);
  }

  // optional .Cmd.EGvgTowerState estate = 2;
  if (has_estate()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->estate(), output);
  }

  // optional uint64 owner_guild = 3;
  if (has_owner_guild()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->owner_guild(), output);
  }

  // repeated .Cmd.GvgTowerValue info = 4;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GvgTowerData)
}

::google::protobuf::uint8* GvgTowerData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GvgTowerData)
  // optional .Cmd.EGvgTowerType etype = 1;
  if (has_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->etype(), target);
  }

  // optional .Cmd.EGvgTowerState estate = 2;
  if (has_estate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->estate(), target);
  }

  // optional uint64 owner_guild = 3;
  if (has_owner_guild()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->owner_guild(), target);
  }

  // repeated .Cmd.GvgTowerValue info = 4;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GvgTowerData)
  return target;
}

int GvgTowerData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.EGvgTowerType etype = 1;
    if (has_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->etype());
    }

    // optional .Cmd.EGvgTowerState estate = 2;
    if (has_estate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->estate());
    }

    // optional uint64 owner_guild = 3;
    if (has_owner_guild()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->owner_guild());
    }

  }
  // repeated .Cmd.GvgTowerValue info = 4;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GvgTowerData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GvgTowerData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GvgTowerData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GvgTowerData::MergeFrom(const GvgTowerData& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_etype()) {
      set_etype(from.etype());
    }
    if (from.has_estate()) {
      set_estate(from.estate());
    }
    if (from.has_owner_guild()) {
      set_owner_guild(from.owner_guild());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GvgTowerData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GvgTowerData::CopyFrom(const GvgTowerData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GvgTowerData::IsInitialized() const {

  return true;
}

void GvgTowerData::Swap(GvgTowerData* other) {
  if (other != this) {
    std::swap(etype_, other->etype_);
    std::swap(estate_, other->estate_);
    std::swap(owner_guild_, other->owner_guild_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GvgTowerData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GvgTowerData_descriptor_;
  metadata.reflection = GvgTowerData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GvgCrystalInfo::kRankFieldNumber;
const int GvgCrystalInfo::kGuildidFieldNumber;
const int GvgCrystalInfo::kCrystalnumFieldNumber;
const int GvgCrystalInfo::kChipnumFieldNumber;
#endif  // !_MSC_VER

GvgCrystalInfo::GvgCrystalInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GvgCrystalInfo)
}

void GvgCrystalInfo::InitAsDefaultInstance() {
}

GvgCrystalInfo::GvgCrystalInfo(const GvgCrystalInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GvgCrystalInfo)
}

void GvgCrystalInfo::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0u;
  guildid_ = GOOGLE_ULONGLONG(0);
  crystalnum_ = 0u;
  chipnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GvgCrystalInfo::~GvgCrystalInfo() {
  // @@protoc_insertion_point(destructor:Cmd.GvgCrystalInfo)
  SharedDtor();
}

void GvgCrystalInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GvgCrystalInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GvgCrystalInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GvgCrystalInfo_descriptor_;
}

const GvgCrystalInfo& GvgCrystalInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FuBenCmd_2eproto();
  return *default_instance_;
}

GvgCrystalInfo* GvgCrystalInfo::default_instance_ = NULL;

GvgCrystalInfo* GvgCrystalInfo::New() const {
  return new GvgCrystalInfo;
}

void GvgCrystalInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GvgCrystalInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(guildid_, chipnum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GvgCrystalInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GvgCrystalInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rank = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guildid;
        break;
      }

      // optional uint64 guildid = 2;
      case 2: {
        if (tag == 16) {
         parse_guildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_crystalnum;
        break;
      }

      // optional uint32 crystalnum = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_crystalnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crystalnum_)));
          set_has_crystalnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_chipnum;
        break;
      }

      // optional uint32 chipnum = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_chipnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chipnum_)));
          set_has_chipnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GvgCrystalInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GvgCrystalInfo)
  return false;
#undef DO_
}

void GvgCrystalInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GvgCrystalInfo)
  // optional uint32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rank(), output);
  }

  // optional uint64 guildid = 2;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guildid(), output);
  }

  // optional uint32 crystalnum = 3 [default = 0];
  if (has_crystalnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->crystalnum(), output);
  }

  // optional uint32 chipnum = 4 [default = 0];
  if (has_chipnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->chipnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GvgCrystalInfo)
}

::google::protobuf::uint8* GvgCrystalInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GvgCrystalInfo)
  // optional uint32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rank(), target);
  }

  // optional uint64 guildid = 2;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guildid(), target);
  }

  // optional uint32 crystalnum = 3 [default = 0];
  if (has_crystalnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->crystalnum(), target);
  }

  // optional uint32 chipnum = 4 [default = 0];
  if (has_chipnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->chipnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GvgCrystalInfo)
  return target;
}

int GvgCrystalInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // optional uint64 guildid = 2;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // optional uint32 crystalnum = 3 [default = 0];
    if (has_crystalnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crystalnum());
    }

    // optional uint32 chipnum = 4 [default = 0];
    if (has_chipnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chipnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GvgCrystalInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GvgCrystalInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GvgCrystalInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GvgCrystalInfo::MergeFrom(const GvgCrystalInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_crystalnum()) {
      set_crystalnum(from.crystalnum());
    }
    if (from.has_chipnum()) {
      set_chipnum(from.chipnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GvgCrystalInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GvgCrystalInfo::CopyFrom(const GvgCrystalInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GvgCrystalInfo::IsInitialized() const {

  return true;
}

void GvgCrystalInfo::Swap(GvgCrystalInfo* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(guildid_, other->guildid_);
    std::swap(crystalnum_, other->crystalnum_);
    std::swap(chipnum_, other->chipnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GvgCrystalInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GvgCrystalInfo_descriptor_;
  metadata.reflection = GvgCrystalInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GvgGuildInfo::kIndexFieldNumber;
const int GvgGuildInfo::kGuildidFieldNumber;
const int GvgGuildInfo::kGuildnameFieldNumber;
const int GvgGuildInfo::kIconFieldNumber;
const int GvgGuildInfo::kMetalLiveFieldNumber;
const int GvgGuildInfo::kCrystalFieldNumber;
#endif  // !_MSC_VER

GvgGuildInfo::GvgGuildInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GvgGuildInfo)
}

void GvgGuildInfo::InitAsDefaultInstance() {
  crystal_ = const_cast< ::Cmd::GvgCrystalInfo*>(&::Cmd::GvgCrystalInfo::default_instance());
}

GvgGuildInfo::GvgGuildInfo(const GvgGuildInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GvgGuildInfo)
}

void GvgGuildInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  index_ = 0u;
  guildid_ = GOOGLE_ULONGLONG(0);
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metal_live_ = false;
  crystal_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GvgGuildInfo::~GvgGuildInfo() {
  // @@protoc_insertion_point(destructor:Cmd.GvgGuildInfo)
  SharedDtor();
}

void GvgGuildInfo::SharedDtor() {
  if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guildname_;
  }
  if (icon_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete icon_;
  }
  if (this != default_instance_) {
    delete crystal_;
  }
}

void GvgGuildInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GvgGuildInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GvgGuildInfo_descriptor_;
}

const GvgGuildInfo& GvgGuildInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FuBenCmd_2eproto();
  return *default_instance_;
}

GvgGuildInfo* GvgGuildInfo::default_instance_ = NULL;

GvgGuildInfo* GvgGuildInfo::New() const {
  return new GvgGuildInfo;
}

void GvgGuildInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GvgGuildInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(index_, metal_live_);
    guildid_ = GOOGLE_ULONGLONG(0);
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guildname_->clear();
      }
    }
    if (has_icon()) {
      if (icon_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        icon_->clear();
      }
    }
    if (has_crystal()) {
      if (crystal_ != NULL) crystal_->::Cmd::GvgCrystalInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GvgGuildInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GvgGuildInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guildid;
        break;
      }

      // optional uint64 guildid = 2;
      case 2: {
        if (tag == 16) {
         parse_guildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_guildname;
        break;
      }

      // optional string guildname = 3;
      case 3: {
        if (tag == 26) {
         parse_guildname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guildname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_icon;
        break;
      }

      // optional string icon = 4;
      case 4: {
        if (tag == 34) {
         parse_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->icon().data(), this->icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "icon");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_metal_live;
        break;
      }

      // optional bool metal_live = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_metal_live:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &metal_live_)));
          set_has_metal_live();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_crystal;
        break;
      }

      // optional .Cmd.GvgCrystalInfo crystal = 6;
      case 6: {
        if (tag == 50) {
         parse_crystal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_crystal()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GvgGuildInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GvgGuildInfo)
  return false;
#undef DO_
}

void GvgGuildInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GvgGuildInfo)
  // optional uint32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }

  // optional uint64 guildid = 2;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guildid(), output);
  }

  // optional string guildname = 3;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guildname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->guildname(), output);
  }

  // optional string icon = 4;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "icon");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->icon(), output);
  }

  // optional bool metal_live = 5 [default = false];
  if (has_metal_live()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->metal_live(), output);
  }

  // optional .Cmd.GvgCrystalInfo crystal = 6;
  if (has_crystal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->crystal(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GvgGuildInfo)
}

::google::protobuf::uint8* GvgGuildInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GvgGuildInfo)
  // optional uint32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }

  // optional uint64 guildid = 2;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guildid(), target);
  }

  // optional string guildname = 3;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guildname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->guildname(), target);
  }

  // optional string icon = 4;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "icon");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->icon(), target);
  }

  // optional bool metal_live = 5 [default = false];
  if (has_metal_live()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->metal_live(), target);
  }

  // optional .Cmd.GvgCrystalInfo crystal = 6;
  if (has_crystal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->crystal(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GvgGuildInfo)
  return target;
}

int GvgGuildInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // optional uint64 guildid = 2;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // optional string guildname = 3;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }

    // optional string icon = 4;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }

    // optional bool metal_live = 5 [default = false];
    if (has_metal_live()) {
      total_size += 1 + 1;
    }

    // optional .Cmd.GvgCrystalInfo crystal = 6;
    if (has_crystal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->crystal());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GvgGuildInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GvgGuildInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GvgGuildInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GvgGuildInfo::MergeFrom(const GvgGuildInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
    if (from.has_metal_live()) {
      set_metal_live(from.metal_live());
    }
    if (from.has_crystal()) {
      mutable_crystal()->::Cmd::GvgCrystalInfo::MergeFrom(from.crystal());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GvgGuildInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GvgGuildInfo::CopyFrom(const GvgGuildInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GvgGuildInfo::IsInitialized() const {

  return true;
}

void GvgGuildInfo::Swap(GvgGuildInfo* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(guildid_, other->guildid_);
    std::swap(guildname_, other->guildname_);
    std::swap(icon_, other->icon_);
    std::swap(metal_live_, other->metal_live_);
    std::swap(crystal_, other->crystal_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GvgGuildInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GvgGuildInfo_descriptor_;
  metadata.reflection = GvgGuildInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SuperGvgSyncFubenCmd::kCmdFieldNumber;
const int SuperGvgSyncFubenCmd::kParamFieldNumber;
const int SuperGvgSyncFubenCmd::kTowersFieldNumber;
const int SuperGvgSyncFubenCmd::kGuildinfoFieldNumber;
const int SuperGvgSyncFubenCmd::kFirebegintimeFieldNumber;
#endif  // !_MSC_VER

SuperGvgSyncFubenCmd::SuperGvgSyncFubenCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SuperGvgSyncFubenCmd)
}

void SuperGvgSyncFubenCmd::InitAsDefaultInstance() {
}

SuperGvgSyncFubenCmd::SuperGvgSyncFubenCmd(const SuperGvgSyncFubenCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SuperGvgSyncFubenCmd)
}

void SuperGvgSyncFubenCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 11;
  param_ = 32;
  firebegintime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SuperGvgSyncFubenCmd::~SuperGvgSyncFubenCmd() {
  // @@protoc_insertion_point(destructor:Cmd.SuperGvgSyncFubenCmd)
  SharedDtor();
}

void SuperGvgSyncFubenCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SuperGvgSyncFubenCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SuperGvgSyncFubenCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SuperGvgSyncFubenCmd_descriptor_;
}

const SuperGvgSyncFubenCmd& SuperGvgSyncFubenCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FuBenCmd_2eproto();
  return *default_instance_;
}

SuperGvgSyncFubenCmd* SuperGvgSyncFubenCmd::default_instance_ = NULL;

SuperGvgSyncFubenCmd* SuperGvgSyncFubenCmd::New() const {
  return new SuperGvgSyncFubenCmd;
}

void SuperGvgSyncFubenCmd::Clear() {
  if (_has_bits_[0 / 32] & 19) {
    cmd_ = 11;
    param_ = 32;
    firebegintime_ = 0u;
  }
  towers_.Clear();
  guildinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SuperGvgSyncFubenCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SuperGvgSyncFubenCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.FuBenParam param = 2 [default = SUPERGVG_INFO_SYNC];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::FuBenParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::FuBenParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_towers;
        break;
      }

      // repeated .Cmd.GvgTowerData towers = 3;
      case 3: {
        if (tag == 26) {
         parse_towers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_towers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_towers;
        if (input->ExpectTag(34)) goto parse_guildinfo;
        break;
      }

      // repeated .Cmd.GvgGuildInfo guildinfo = 4;
      case 4: {
        if (tag == 34) {
         parse_guildinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_guildinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_guildinfo;
        if (input->ExpectTag(40)) goto parse_firebegintime;
        break;
      }

      // optional uint32 firebegintime = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_firebegintime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &firebegintime_)));
          set_has_firebegintime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SuperGvgSyncFubenCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SuperGvgSyncFubenCmd)
  return false;
#undef DO_
}

void SuperGvgSyncFubenCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SuperGvgSyncFubenCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.FuBenParam param = 2 [default = SUPERGVG_INFO_SYNC];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.GvgTowerData towers = 3;
  for (int i = 0; i < this->towers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->towers(i), output);
  }

  // repeated .Cmd.GvgGuildInfo guildinfo = 4;
  for (int i = 0; i < this->guildinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->guildinfo(i), output);
  }

  // optional uint32 firebegintime = 5 [default = 0];
  if (has_firebegintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->firebegintime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SuperGvgSyncFubenCmd)
}

::google::protobuf::uint8* SuperGvgSyncFubenCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SuperGvgSyncFubenCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.FuBenParam param = 2 [default = SUPERGVG_INFO_SYNC];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.GvgTowerData towers = 3;
  for (int i = 0; i < this->towers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->towers(i), target);
  }

  // repeated .Cmd.GvgGuildInfo guildinfo = 4;
  for (int i = 0; i < this->guildinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->guildinfo(i), target);
  }

  // optional uint32 firebegintime = 5 [default = 0];
  if (has_firebegintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->firebegintime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SuperGvgSyncFubenCmd)
  return target;
}

int SuperGvgSyncFubenCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.FuBenParam param = 2 [default = SUPERGVG_INFO_SYNC];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 firebegintime = 5 [default = 0];
    if (has_firebegintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->firebegintime());
    }

  }
  // repeated .Cmd.GvgTowerData towers = 3;
  total_size += 1 * this->towers_size();
  for (int i = 0; i < this->towers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->towers(i));
  }

  // repeated .Cmd.GvgGuildInfo guildinfo = 4;
  total_size += 1 * this->guildinfo_size();
  for (int i = 0; i < this->guildinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guildinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SuperGvgSyncFubenCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SuperGvgSyncFubenCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SuperGvgSyncFubenCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SuperGvgSyncFubenCmd::MergeFrom(const SuperGvgSyncFubenCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  towers_.MergeFrom(from.towers_);
  guildinfo_.MergeFrom(from.guildinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_firebegintime()) {
      set_firebegintime(from.firebegintime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SuperGvgSyncFubenCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SuperGvgSyncFubenCmd::CopyFrom(const SuperGvgSyncFubenCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SuperGvgSyncFubenCmd::IsInitialized() const {

  return true;
}

void SuperGvgSyncFubenCmd::Swap(SuperGvgSyncFubenCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    towers_.Swap(&other->towers_);
    guildinfo_.Swap(&other->guildinfo_);
    std::swap(firebegintime_, other->firebegintime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SuperGvgSyncFubenCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SuperGvgSyncFubenCmd_descriptor_;
  metadata.reflection = SuperGvgSyncFubenCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GvgTowerUpdateFubenCmd::kCmdFieldNumber;
const int GvgTowerUpdateFubenCmd::kParamFieldNumber;
const int GvgTowerUpdateFubenCmd::kTowersFieldNumber;
#endif  // !_MSC_VER

GvgTowerUpdateFubenCmd::GvgTowerUpdateFubenCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GvgTowerUpdateFubenCmd)
}

void GvgTowerUpdateFubenCmd::InitAsDefaultInstance() {
}

GvgTowerUpdateFubenCmd::GvgTowerUpdateFubenCmd(const GvgTowerUpdateFubenCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GvgTowerUpdateFubenCmd)
}

void GvgTowerUpdateFubenCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 11;
  param_ = 33;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GvgTowerUpdateFubenCmd::~GvgTowerUpdateFubenCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GvgTowerUpdateFubenCmd)
  SharedDtor();
}

void GvgTowerUpdateFubenCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GvgTowerUpdateFubenCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GvgTowerUpdateFubenCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GvgTowerUpdateFubenCmd_descriptor_;
}

const GvgTowerUpdateFubenCmd& GvgTowerUpdateFubenCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FuBenCmd_2eproto();
  return *default_instance_;
}

GvgTowerUpdateFubenCmd* GvgTowerUpdateFubenCmd::default_instance_ = NULL;

GvgTowerUpdateFubenCmd* GvgTowerUpdateFubenCmd::New() const {
  return new GvgTowerUpdateFubenCmd;
}

void GvgTowerUpdateFubenCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 11;
    param_ = 33;
  }
  towers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GvgTowerUpdateFubenCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GvgTowerUpdateFubenCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.FuBenParam param = 2 [default = SUPERGVG_TOWERINFO_UPDATE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::FuBenParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::FuBenParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_towers;
        break;
      }

      // repeated .Cmd.GvgTowerData towers = 3;
      case 3: {
        if (tag == 26) {
         parse_towers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_towers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_towers;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GvgTowerUpdateFubenCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GvgTowerUpdateFubenCmd)
  return false;
#undef DO_
}

void GvgTowerUpdateFubenCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GvgTowerUpdateFubenCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.FuBenParam param = 2 [default = SUPERGVG_TOWERINFO_UPDATE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.GvgTowerData towers = 3;
  for (int i = 0; i < this->towers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->towers(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GvgTowerUpdateFubenCmd)
}

::google::protobuf::uint8* GvgTowerUpdateFubenCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GvgTowerUpdateFubenCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.FuBenParam param = 2 [default = SUPERGVG_TOWERINFO_UPDATE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.GvgTowerData towers = 3;
  for (int i = 0; i < this->towers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->towers(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GvgTowerUpdateFubenCmd)
  return target;
}

int GvgTowerUpdateFubenCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.FuBenParam param = 2 [default = SUPERGVG_TOWERINFO_UPDATE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.GvgTowerData towers = 3;
  total_size += 1 * this->towers_size();
  for (int i = 0; i < this->towers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->towers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GvgTowerUpdateFubenCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GvgTowerUpdateFubenCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GvgTowerUpdateFubenCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GvgTowerUpdateFubenCmd::MergeFrom(const GvgTowerUpdateFubenCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  towers_.MergeFrom(from.towers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GvgTowerUpdateFubenCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GvgTowerUpdateFubenCmd::CopyFrom(const GvgTowerUpdateFubenCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GvgTowerUpdateFubenCmd::IsInitialized() const {

  return true;
}

void GvgTowerUpdateFubenCmd::Swap(GvgTowerUpdateFubenCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    towers_.Swap(&other->towers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GvgTowerUpdateFubenCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GvgTowerUpdateFubenCmd_descriptor_;
  metadata.reflection = GvgTowerUpdateFubenCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GvgMetalDieFubenCmd::kCmdFieldNumber;
const int GvgMetalDieFubenCmd::kParamFieldNumber;
const int GvgMetalDieFubenCmd::kIndexFieldNumber;
#endif  // !_MSC_VER

GvgMetalDieFubenCmd::GvgMetalDieFubenCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GvgMetalDieFubenCmd)
}

void GvgMetalDieFubenCmd::InitAsDefaultInstance() {
}

GvgMetalDieFubenCmd::GvgMetalDieFubenCmd(const GvgMetalDieFubenCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GvgMetalDieFubenCmd)
}

void GvgMetalDieFubenCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 11;
  param_ = 39;
  index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GvgMetalDieFubenCmd::~GvgMetalDieFubenCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GvgMetalDieFubenCmd)
  SharedDtor();
}

void GvgMetalDieFubenCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GvgMetalDieFubenCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GvgMetalDieFubenCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GvgMetalDieFubenCmd_descriptor_;
}

const GvgMetalDieFubenCmd& GvgMetalDieFubenCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FuBenCmd_2eproto();
  return *default_instance_;
}

GvgMetalDieFubenCmd* GvgMetalDieFubenCmd::default_instance_ = NULL;

GvgMetalDieFubenCmd* GvgMetalDieFubenCmd::New() const {
  return new GvgMetalDieFubenCmd;
}

void GvgMetalDieFubenCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 11;
    param_ = 39;
    index_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GvgMetalDieFubenCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GvgMetalDieFubenCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.FuBenParam param = 2 [default = SUPERGVG_METAL_DIE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::FuBenParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::FuBenParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_index;
        break;
      }

      // optional uint32 index = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GvgMetalDieFubenCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GvgMetalDieFubenCmd)
  return false;
#undef DO_
}

void GvgMetalDieFubenCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GvgMetalDieFubenCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.FuBenParam param = 2 [default = SUPERGVG_METAL_DIE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 index = 3 [default = 0];
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GvgMetalDieFubenCmd)
}

::google::protobuf::uint8* GvgMetalDieFubenCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GvgMetalDieFubenCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.FuBenParam param = 2 [default = SUPERGVG_METAL_DIE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 index = 3 [default = 0];
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GvgMetalDieFubenCmd)
  return target;
}

int GvgMetalDieFubenCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.FuBenParam param = 2 [default = SUPERGVG_METAL_DIE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 index = 3 [default = 0];
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GvgMetalDieFubenCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GvgMetalDieFubenCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GvgMetalDieFubenCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GvgMetalDieFubenCmd::MergeFrom(const GvgMetalDieFubenCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GvgMetalDieFubenCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GvgMetalDieFubenCmd::CopyFrom(const GvgMetalDieFubenCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GvgMetalDieFubenCmd::IsInitialized() const {

  return true;
}

void GvgMetalDieFubenCmd::Swap(GvgMetalDieFubenCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GvgMetalDieFubenCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GvgMetalDieFubenCmd_descriptor_;
  metadata.reflection = GvgMetalDieFubenCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GvgCrystalUpdateFubenCmd::kCmdFieldNumber;
const int GvgCrystalUpdateFubenCmd::kParamFieldNumber;
const int GvgCrystalUpdateFubenCmd::kCrystalsFieldNumber;
#endif  // !_MSC_VER

GvgCrystalUpdateFubenCmd::GvgCrystalUpdateFubenCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GvgCrystalUpdateFubenCmd)
}

void GvgCrystalUpdateFubenCmd::InitAsDefaultInstance() {
}

GvgCrystalUpdateFubenCmd::GvgCrystalUpdateFubenCmd(const GvgCrystalUpdateFubenCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GvgCrystalUpdateFubenCmd)
}

void GvgCrystalUpdateFubenCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 11;
  param_ = 34;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GvgCrystalUpdateFubenCmd::~GvgCrystalUpdateFubenCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GvgCrystalUpdateFubenCmd)
  SharedDtor();
}

void GvgCrystalUpdateFubenCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GvgCrystalUpdateFubenCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GvgCrystalUpdateFubenCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GvgCrystalUpdateFubenCmd_descriptor_;
}

const GvgCrystalUpdateFubenCmd& GvgCrystalUpdateFubenCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FuBenCmd_2eproto();
  return *default_instance_;
}

GvgCrystalUpdateFubenCmd* GvgCrystalUpdateFubenCmd::default_instance_ = NULL;

GvgCrystalUpdateFubenCmd* GvgCrystalUpdateFubenCmd::New() const {
  return new GvgCrystalUpdateFubenCmd;
}

void GvgCrystalUpdateFubenCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 11;
    param_ = 34;
  }
  crystals_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GvgCrystalUpdateFubenCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GvgCrystalUpdateFubenCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.FuBenParam param = 2 [default = SUPERGVG_METALINFO_UPDATE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::FuBenParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::FuBenParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_crystals;
        break;
      }

      // repeated .Cmd.GvgCrystalInfo crystals = 3;
      case 3: {
        if (tag == 26) {
         parse_crystals:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_crystals()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_crystals;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GvgCrystalUpdateFubenCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GvgCrystalUpdateFubenCmd)
  return false;
#undef DO_
}

void GvgCrystalUpdateFubenCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GvgCrystalUpdateFubenCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.FuBenParam param = 2 [default = SUPERGVG_METALINFO_UPDATE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.GvgCrystalInfo crystals = 3;
  for (int i = 0; i < this->crystals_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->crystals(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GvgCrystalUpdateFubenCmd)
}

::google::protobuf::uint8* GvgCrystalUpdateFubenCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GvgCrystalUpdateFubenCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.FuBenParam param = 2 [default = SUPERGVG_METALINFO_UPDATE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.GvgCrystalInfo crystals = 3;
  for (int i = 0; i < this->crystals_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->crystals(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GvgCrystalUpdateFubenCmd)
  return target;
}

int GvgCrystalUpdateFubenCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.FuBenParam param = 2 [default = SUPERGVG_METALINFO_UPDATE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.GvgCrystalInfo crystals = 3;
  total_size += 1 * this->crystals_size();
  for (int i = 0; i < this->crystals_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->crystals(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GvgCrystalUpdateFubenCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GvgCrystalUpdateFubenCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GvgCrystalUpdateFubenCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GvgCrystalUpdateFubenCmd::MergeFrom(const GvgCrystalUpdateFubenCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  crystals_.MergeFrom(from.crystals_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GvgCrystalUpdateFubenCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GvgCrystalUpdateFubenCmd::CopyFrom(const GvgCrystalUpdateFubenCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GvgCrystalUpdateFubenCmd::IsInitialized() const {

  return true;
}

void GvgCrystalUpdateFubenCmd::Swap(GvgCrystalUpdateFubenCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    crystals_.Swap(&other->crystals_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GvgCrystalUpdateFubenCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GvgCrystalUpdateFubenCmd_descriptor_;
  metadata.reflection = GvgCrystalUpdateFubenCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryGvgTowerInfoFubenCmd::kCmdFieldNumber;
const int QueryGvgTowerInfoFubenCmd::kParamFieldNumber;
const int QueryGvgTowerInfoFubenCmd::kEtypeFieldNumber;
const int QueryGvgTowerInfoFubenCmd::kOpenFieldNumber;
#endif  // !_MSC_VER

QueryGvgTowerInfoFubenCmd::QueryGvgTowerInfoFubenCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QueryGvgTowerInfoFubenCmd)
}

void QueryGvgTowerInfoFubenCmd::InitAsDefaultInstance() {
}

QueryGvgTowerInfoFubenCmd::QueryGvgTowerInfoFubenCmd(const QueryGvgTowerInfoFubenCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QueryGvgTowerInfoFubenCmd)
}

void QueryGvgTowerInfoFubenCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 11;
  param_ = 35;
  etype_ = 0;
  open_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryGvgTowerInfoFubenCmd::~QueryGvgTowerInfoFubenCmd() {
  // @@protoc_insertion_point(destructor:Cmd.QueryGvgTowerInfoFubenCmd)
  SharedDtor();
}

void QueryGvgTowerInfoFubenCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryGvgTowerInfoFubenCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryGvgTowerInfoFubenCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryGvgTowerInfoFubenCmd_descriptor_;
}

const QueryGvgTowerInfoFubenCmd& QueryGvgTowerInfoFubenCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FuBenCmd_2eproto();
  return *default_instance_;
}

QueryGvgTowerInfoFubenCmd* QueryGvgTowerInfoFubenCmd::default_instance_ = NULL;

QueryGvgTowerInfoFubenCmd* QueryGvgTowerInfoFubenCmd::New() const {
  return new QueryGvgTowerInfoFubenCmd;
}

void QueryGvgTowerInfoFubenCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<QueryGvgTowerInfoFubenCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(etype_, open_);
    cmd_ = 11;
    param_ = 35;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryGvgTowerInfoFubenCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QueryGvgTowerInfoFubenCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.FuBenParam param = 2 [default = SUPERGVG_QUERY_TOWERINFO];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::FuBenParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::FuBenParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_etype;
        break;
      }

      // required .Cmd.EGvgTowerType etype = 3;
      case 3: {
        if (tag == 24) {
         parse_etype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EGvgTowerType_IsValid(value)) {
            set_etype(static_cast< ::Cmd::EGvgTowerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_open;
        break;
      }

      // optional bool open = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &open_)));
          set_has_open();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QueryGvgTowerInfoFubenCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QueryGvgTowerInfoFubenCmd)
  return false;
#undef DO_
}

void QueryGvgTowerInfoFubenCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QueryGvgTowerInfoFubenCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.FuBenParam param = 2 [default = SUPERGVG_QUERY_TOWERINFO];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // required .Cmd.EGvgTowerType etype = 3;
  if (has_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->etype(), output);
  }

  // optional bool open = 4 [default = false];
  if (has_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->open(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QueryGvgTowerInfoFubenCmd)
}

::google::protobuf::uint8* QueryGvgTowerInfoFubenCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QueryGvgTowerInfoFubenCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.FuBenParam param = 2 [default = SUPERGVG_QUERY_TOWERINFO];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // required .Cmd.EGvgTowerType etype = 3;
  if (has_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->etype(), target);
  }

  // optional bool open = 4 [default = false];
  if (has_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->open(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QueryGvgTowerInfoFubenCmd)
  return target;
}

int QueryGvgTowerInfoFubenCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.FuBenParam param = 2 [default = SUPERGVG_QUERY_TOWERINFO];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // required .Cmd.EGvgTowerType etype = 3;
    if (has_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->etype());
    }

    // optional bool open = 4 [default = false];
    if (has_open()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryGvgTowerInfoFubenCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryGvgTowerInfoFubenCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryGvgTowerInfoFubenCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryGvgTowerInfoFubenCmd::MergeFrom(const QueryGvgTowerInfoFubenCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_etype()) {
      set_etype(from.etype());
    }
    if (from.has_open()) {
      set_open(from.open());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryGvgTowerInfoFubenCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryGvgTowerInfoFubenCmd::CopyFrom(const QueryGvgTowerInfoFubenCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryGvgTowerInfoFubenCmd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  return true;
}

void QueryGvgTowerInfoFubenCmd::Swap(QueryGvgTowerInfoFubenCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(etype_, other->etype_);
    std::swap(open_, other->open_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryGvgTowerInfoFubenCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryGvgTowerInfoFubenCmd_descriptor_;
  metadata.reflection = QueryGvgTowerInfoFubenCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RewardItemData::kItemidFieldNumber;
const int RewardItemData::kCountFieldNumber;
#endif  // !_MSC_VER

RewardItemData::RewardItemData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.RewardItemData)
}

void RewardItemData::InitAsDefaultInstance() {
}

RewardItemData::RewardItemData(const RewardItemData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.RewardItemData)
}

void RewardItemData::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RewardItemData::~RewardItemData() {
  // @@protoc_insertion_point(destructor:Cmd.RewardItemData)
  SharedDtor();
}

void RewardItemData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RewardItemData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RewardItemData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RewardItemData_descriptor_;
}

const RewardItemData& RewardItemData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FuBenCmd_2eproto();
  return *default_instance_;
}

RewardItemData* RewardItemData::default_instance_ = NULL;

RewardItemData* RewardItemData::New() const {
  return new RewardItemData;
}

void RewardItemData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RewardItemData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(itemid_, count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RewardItemData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.RewardItemData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itemid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional uint32 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.RewardItemData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.RewardItemData)
  return false;
#undef DO_
}

void RewardItemData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.RewardItemData)
  // optional uint32 itemid = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.RewardItemData)
}

::google::protobuf::uint8* RewardItemData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.RewardItemData)
  // optional uint32 itemid = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.RewardItemData)
  return target;
}

int RewardItemData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 itemid = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RewardItemData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RewardItemData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RewardItemData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RewardItemData::MergeFrom(const RewardItemData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RewardItemData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RewardItemData::CopyFrom(const RewardItemData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewardItemData::IsInitialized() const {

  return true;
}

void RewardItemData::Swap(RewardItemData* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RewardItemData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RewardItemData_descriptor_;
  metadata.reflection = RewardItemData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SuperGvgRewardData::kGuildidFieldNumber;
const int SuperGvgRewardData::kRankFieldNumber;
const int SuperGvgRewardData::kItemsFieldNumber;
#endif  // !_MSC_VER

SuperGvgRewardData::SuperGvgRewardData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SuperGvgRewardData)
}

void SuperGvgRewardData::InitAsDefaultInstance() {
}

SuperGvgRewardData::SuperGvgRewardData(const SuperGvgRewardData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SuperGvgRewardData)
}

void SuperGvgRewardData::SharedCtor() {
  _cached_size_ = 0;
  guildid_ = GOOGLE_ULONGLONG(0);
  rank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SuperGvgRewardData::~SuperGvgRewardData() {
  // @@protoc_insertion_point(destructor:Cmd.SuperGvgRewardData)
  SharedDtor();
}

void SuperGvgRewardData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SuperGvgRewardData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SuperGvgRewardData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SuperGvgRewardData_descriptor_;
}

const SuperGvgRewardData& SuperGvgRewardData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FuBenCmd_2eproto();
  return *default_instance_;
}

SuperGvgRewardData* SuperGvgRewardData::default_instance_ = NULL;

SuperGvgRewardData* SuperGvgRewardData::New() const {
  return new SuperGvgRewardData;
}

void SuperGvgRewardData::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    guildid_ = GOOGLE_ULONGLONG(0);
    rank_ = 0u;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SuperGvgRewardData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SuperGvgRewardData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 guildid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_rank;
        break;
      }

      // optional uint32 rank = 2;
      case 2: {
        if (tag == 16) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_items;
        break;
      }

      // repeated .Cmd.RewardItemData items = 3;
      case 3: {
        if (tag == 26) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SuperGvgRewardData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SuperGvgRewardData)
  return false;
#undef DO_
}

void SuperGvgRewardData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SuperGvgRewardData)
  // optional uint64 guildid = 1;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guildid(), output);
  }

  // optional uint32 rank = 2;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rank(), output);
  }

  // repeated .Cmd.RewardItemData items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SuperGvgRewardData)
}

::google::protobuf::uint8* SuperGvgRewardData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SuperGvgRewardData)
  // optional uint64 guildid = 1;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guildid(), target);
  }

  // optional uint32 rank = 2;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rank(), target);
  }

  // repeated .Cmd.RewardItemData items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SuperGvgRewardData)
  return target;
}

int SuperGvgRewardData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 guildid = 1;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // optional uint32 rank = 2;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

  }
  // repeated .Cmd.RewardItemData items = 3;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SuperGvgRewardData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SuperGvgRewardData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SuperGvgRewardData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SuperGvgRewardData::MergeFrom(const SuperGvgRewardData& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SuperGvgRewardData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SuperGvgRewardData::CopyFrom(const SuperGvgRewardData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SuperGvgRewardData::IsInitialized() const {

  return true;
}

void SuperGvgRewardData::Swap(SuperGvgRewardData* other) {
  if (other != this) {
    std::swap(guildid_, other->guildid_);
    std::swap(rank_, other->rank_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SuperGvgRewardData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SuperGvgRewardData_descriptor_;
  metadata.reflection = SuperGvgRewardData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SuperGvgRewardInfoFubenCmd::kCmdFieldNumber;
const int SuperGvgRewardInfoFubenCmd::kParamFieldNumber;
const int SuperGvgRewardInfoFubenCmd::kRewardinfoFieldNumber;
#endif  // !_MSC_VER

SuperGvgRewardInfoFubenCmd::SuperGvgRewardInfoFubenCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SuperGvgRewardInfoFubenCmd)
}

void SuperGvgRewardInfoFubenCmd::InitAsDefaultInstance() {
}

SuperGvgRewardInfoFubenCmd::SuperGvgRewardInfoFubenCmd(const SuperGvgRewardInfoFubenCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SuperGvgRewardInfoFubenCmd)
}

void SuperGvgRewardInfoFubenCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 11;
  param_ = 36;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SuperGvgRewardInfoFubenCmd::~SuperGvgRewardInfoFubenCmd() {
  // @@protoc_insertion_point(destructor:Cmd.SuperGvgRewardInfoFubenCmd)
  SharedDtor();
}

void SuperGvgRewardInfoFubenCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SuperGvgRewardInfoFubenCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SuperGvgRewardInfoFubenCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SuperGvgRewardInfoFubenCmd_descriptor_;
}

const SuperGvgRewardInfoFubenCmd& SuperGvgRewardInfoFubenCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FuBenCmd_2eproto();
  return *default_instance_;
}

SuperGvgRewardInfoFubenCmd* SuperGvgRewardInfoFubenCmd::default_instance_ = NULL;

SuperGvgRewardInfoFubenCmd* SuperGvgRewardInfoFubenCmd::New() const {
  return new SuperGvgRewardInfoFubenCmd;
}

void SuperGvgRewardInfoFubenCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 11;
    param_ = 36;
  }
  rewardinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SuperGvgRewardInfoFubenCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SuperGvgRewardInfoFubenCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.FuBenParam param = 2 [default = SUPERGVG_REWARD_INFO];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::FuBenParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::FuBenParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_rewardinfo;
        break;
      }

      // repeated .Cmd.SuperGvgRewardData rewardinfo = 3;
      case 3: {
        if (tag == 26) {
         parse_rewardinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_rewardinfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SuperGvgRewardInfoFubenCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SuperGvgRewardInfoFubenCmd)
  return false;
#undef DO_
}

void SuperGvgRewardInfoFubenCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SuperGvgRewardInfoFubenCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.FuBenParam param = 2 [default = SUPERGVG_REWARD_INFO];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.SuperGvgRewardData rewardinfo = 3;
  for (int i = 0; i < this->rewardinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rewardinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SuperGvgRewardInfoFubenCmd)
}

::google::protobuf::uint8* SuperGvgRewardInfoFubenCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SuperGvgRewardInfoFubenCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.FuBenParam param = 2 [default = SUPERGVG_REWARD_INFO];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.SuperGvgRewardData rewardinfo = 3;
  for (int i = 0; i < this->rewardinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rewardinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SuperGvgRewardInfoFubenCmd)
  return target;
}

int SuperGvgRewardInfoFubenCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.FuBenParam param = 2 [default = SUPERGVG_REWARD_INFO];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.SuperGvgRewardData rewardinfo = 3;
  total_size += 1 * this->rewardinfo_size();
  for (int i = 0; i < this->rewardinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SuperGvgRewardInfoFubenCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SuperGvgRewardInfoFubenCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SuperGvgRewardInfoFubenCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SuperGvgRewardInfoFubenCmd::MergeFrom(const SuperGvgRewardInfoFubenCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardinfo_.MergeFrom(from.rewardinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SuperGvgRewardInfoFubenCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SuperGvgRewardInfoFubenCmd::CopyFrom(const SuperGvgRewardInfoFubenCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SuperGvgRewardInfoFubenCmd::IsInitialized() const {

  return true;
}

void SuperGvgRewardInfoFubenCmd::Swap(SuperGvgRewardInfoFubenCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    rewardinfo_.Swap(&other->rewardinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SuperGvgRewardInfoFubenCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SuperGvgRewardInfoFubenCmd_descriptor_;
  metadata.reflection = SuperGvgRewardInfoFubenCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SuperGvgUserData::kUsernameFieldNumber;
const int SuperGvgUserData::kProfessionFieldNumber;
const int SuperGvgUserData::kKillusernumFieldNumber;
const int SuperGvgUserData::kDienumFieldNumber;
const int SuperGvgUserData::kChipnumFieldNumber;
const int SuperGvgUserData::kTowertimeFieldNumber;
const int SuperGvgUserData::kHealhpFieldNumber;
const int SuperGvgUserData::kRelivenumFieldNumber;
const int SuperGvgUserData::kMetaldamageFieldNumber;
#endif  // !_MSC_VER

SuperGvgUserData::SuperGvgUserData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SuperGvgUserData)
}

void SuperGvgUserData::InitAsDefaultInstance() {
}

SuperGvgUserData::SuperGvgUserData(const SuperGvgUserData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SuperGvgUserData)
}

void SuperGvgUserData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  profession_ = 0u;
  killusernum_ = 0u;
  dienum_ = 0u;
  chipnum_ = 0u;
  towertime_ = 0u;
  healhp_ = 0u;
  relivenum_ = 0u;
  metaldamage_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SuperGvgUserData::~SuperGvgUserData() {
  // @@protoc_insertion_point(destructor:Cmd.SuperGvgUserData)
  SharedDtor();
}

void SuperGvgUserData::SharedDtor() {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (this != default_instance_) {
  }
}

void SuperGvgUserData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SuperGvgUserData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SuperGvgUserData_descriptor_;
}

const SuperGvgUserData& SuperGvgUserData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FuBenCmd_2eproto();
  return *default_instance_;
}

SuperGvgUserData* SuperGvgUserData::default_instance_ = NULL;

SuperGvgUserData* SuperGvgUserData::New() const {
  return new SuperGvgUserData;
}

void SuperGvgUserData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SuperGvgUserData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(profession_, relivenum_);
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        username_->clear();
      }
    }
  }
  metaldamage_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SuperGvgUserData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SuperGvgUserData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string username = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "username");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_profession;
        break;
      }

      // required uint32 profession = 2;
      case 2: {
        if (tag == 16) {
         parse_profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &profession_)));
          set_has_profession();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_killusernum;
        break;
      }

      // optional uint32 killusernum = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_killusernum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killusernum_)));
          set_has_killusernum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_dienum;
        break;
      }

      // optional uint32 dienum = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_dienum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dienum_)));
          set_has_dienum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_chipnum;
        break;
      }

      // optional uint32 chipnum = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_chipnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chipnum_)));
          set_has_chipnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_towertime;
        break;
      }

      // optional uint32 towertime = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_towertime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &towertime_)));
          set_has_towertime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_healhp;
        break;
      }

      // optional uint32 healhp = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_healhp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &healhp_)));
          set_has_healhp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_relivenum;
        break;
      }

      // optional uint32 relivenum = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_relivenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &relivenum_)));
          set_has_relivenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_metaldamage;
        break;
      }

      // optional uint32 metaldamage = 9 [default = 0];
      case 9: {
        if (tag == 72) {
         parse_metaldamage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &metaldamage_)));
          set_has_metaldamage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SuperGvgUserData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SuperGvgUserData)
  return false;
#undef DO_
}

void SuperGvgUserData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SuperGvgUserData)
  // required string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  // required uint32 profession = 2;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->profession(), output);
  }

  // optional uint32 killusernum = 3 [default = 0];
  if (has_killusernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->killusernum(), output);
  }

  // optional uint32 dienum = 4 [default = 0];
  if (has_dienum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dienum(), output);
  }

  // optional uint32 chipnum = 5 [default = 0];
  if (has_chipnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->chipnum(), output);
  }

  // optional uint32 towertime = 6 [default = 0];
  if (has_towertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->towertime(), output);
  }

  // optional uint32 healhp = 7 [default = 0];
  if (has_healhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->healhp(), output);
  }

  // optional uint32 relivenum = 8 [default = 0];
  if (has_relivenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->relivenum(), output);
  }

  // optional uint32 metaldamage = 9 [default = 0];
  if (has_metaldamage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->metaldamage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SuperGvgUserData)
}

::google::protobuf::uint8* SuperGvgUserData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SuperGvgUserData)
  // required string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // required uint32 profession = 2;
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->profession(), target);
  }

  // optional uint32 killusernum = 3 [default = 0];
  if (has_killusernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->killusernum(), target);
  }

  // optional uint32 dienum = 4 [default = 0];
  if (has_dienum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->dienum(), target);
  }

  // optional uint32 chipnum = 5 [default = 0];
  if (has_chipnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->chipnum(), target);
  }

  // optional uint32 towertime = 6 [default = 0];
  if (has_towertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->towertime(), target);
  }

  // optional uint32 healhp = 7 [default = 0];
  if (has_healhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->healhp(), target);
  }

  // optional uint32 relivenum = 8 [default = 0];
  if (has_relivenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->relivenum(), target);
  }

  // optional uint32 metaldamage = 9 [default = 0];
  if (has_metaldamage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->metaldamage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SuperGvgUserData)
  return target;
}

int SuperGvgUserData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string username = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // required uint32 profession = 2;
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->profession());
    }

    // optional uint32 killusernum = 3 [default = 0];
    if (has_killusernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killusernum());
    }

    // optional uint32 dienum = 4 [default = 0];
    if (has_dienum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dienum());
    }

    // optional uint32 chipnum = 5 [default = 0];
    if (has_chipnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chipnum());
    }

    // optional uint32 towertime = 6 [default = 0];
    if (has_towertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->towertime());
    }

    // optional uint32 healhp = 7 [default = 0];
    if (has_healhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->healhp());
    }

    // optional uint32 relivenum = 8 [default = 0];
    if (has_relivenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->relivenum());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 metaldamage = 9 [default = 0];
    if (has_metaldamage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->metaldamage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SuperGvgUserData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SuperGvgUserData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SuperGvgUserData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SuperGvgUserData::MergeFrom(const SuperGvgUserData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
    if (from.has_killusernum()) {
      set_killusernum(from.killusernum());
    }
    if (from.has_dienum()) {
      set_dienum(from.dienum());
    }
    if (from.has_chipnum()) {
      set_chipnum(from.chipnum());
    }
    if (from.has_towertime()) {
      set_towertime(from.towertime());
    }
    if (from.has_healhp()) {
      set_healhp(from.healhp());
    }
    if (from.has_relivenum()) {
      set_relivenum(from.relivenum());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_metaldamage()) {
      set_metaldamage(from.metaldamage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SuperGvgUserData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SuperGvgUserData::CopyFrom(const SuperGvgUserData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SuperGvgUserData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SuperGvgUserData::Swap(SuperGvgUserData* other) {
  if (other != this) {
    std::swap(username_, other->username_);
    std::swap(profession_, other->profession_);
    std::swap(killusernum_, other->killusernum_);
    std::swap(dienum_, other->dienum_);
    std::swap(chipnum_, other->chipnum_);
    std::swap(towertime_, other->towertime_);
    std::swap(healhp_, other->healhp_);
    std::swap(relivenum_, other->relivenum_);
    std::swap(metaldamage_, other->metaldamage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SuperGvgUserData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SuperGvgUserData_descriptor_;
  metadata.reflection = SuperGvgUserData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SuperGvgGuildUserData::kGuildidFieldNumber;
const int SuperGvgGuildUserData::kUserdatasFieldNumber;
#endif  // !_MSC_VER

SuperGvgGuildUserData::SuperGvgGuildUserData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SuperGvgGuildUserData)
}

void SuperGvgGuildUserData::InitAsDefaultInstance() {
}

SuperGvgGuildUserData::SuperGvgGuildUserData(const SuperGvgGuildUserData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SuperGvgGuildUserData)
}

void SuperGvgGuildUserData::SharedCtor() {
  _cached_size_ = 0;
  guildid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SuperGvgGuildUserData::~SuperGvgGuildUserData() {
  // @@protoc_insertion_point(destructor:Cmd.SuperGvgGuildUserData)
  SharedDtor();
}

void SuperGvgGuildUserData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SuperGvgGuildUserData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SuperGvgGuildUserData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SuperGvgGuildUserData_descriptor_;
}

const SuperGvgGuildUserData& SuperGvgGuildUserData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FuBenCmd_2eproto();
  return *default_instance_;
}

SuperGvgGuildUserData* SuperGvgGuildUserData::default_instance_ = NULL;

SuperGvgGuildUserData* SuperGvgGuildUserData::New() const {
  return new SuperGvgGuildUserData;
}

void SuperGvgGuildUserData::Clear() {
  guildid_ = GOOGLE_ULONGLONG(0);
  userdatas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SuperGvgGuildUserData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SuperGvgGuildUserData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 guildid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_userdatas;
        break;
      }

      // repeated .Cmd.SuperGvgUserData userdatas = 2;
      case 2: {
        if (tag == 18) {
         parse_userdatas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_userdatas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_userdatas;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SuperGvgGuildUserData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SuperGvgGuildUserData)
  return false;
#undef DO_
}

void SuperGvgGuildUserData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SuperGvgGuildUserData)
  // required uint64 guildid = 1;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guildid(), output);
  }

  // repeated .Cmd.SuperGvgUserData userdatas = 2;
  for (int i = 0; i < this->userdatas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->userdatas(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SuperGvgGuildUserData)
}

::google::protobuf::uint8* SuperGvgGuildUserData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SuperGvgGuildUserData)
  // required uint64 guildid = 1;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guildid(), target);
  }

  // repeated .Cmd.SuperGvgUserData userdatas = 2;
  for (int i = 0; i < this->userdatas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->userdatas(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SuperGvgGuildUserData)
  return target;
}

int SuperGvgGuildUserData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 guildid = 1;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

  }
  // repeated .Cmd.SuperGvgUserData userdatas = 2;
  total_size += 1 * this->userdatas_size();
  for (int i = 0; i < this->userdatas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userdatas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SuperGvgGuildUserData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SuperGvgGuildUserData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SuperGvgGuildUserData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SuperGvgGuildUserData::MergeFrom(const SuperGvgGuildUserData& from) {
  GOOGLE_CHECK_NE(&from, this);
  userdatas_.MergeFrom(from.userdatas_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SuperGvgGuildUserData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SuperGvgGuildUserData::CopyFrom(const SuperGvgGuildUserData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SuperGvgGuildUserData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->userdatas())) return false;
  return true;
}

void SuperGvgGuildUserData::Swap(SuperGvgGuildUserData* other) {
  if (other != this) {
    std::swap(guildid_, other->guildid_);
    userdatas_.Swap(&other->userdatas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SuperGvgGuildUserData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SuperGvgGuildUserData_descriptor_;
  metadata.reflection = SuperGvgGuildUserData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SuperGvgQueryUserDataFubenCmd::kCmdFieldNumber;
const int SuperGvgQueryUserDataFubenCmd::kParamFieldNumber;
const int SuperGvgQueryUserDataFubenCmd::kGuilduserdataFieldNumber;
#endif  // !_MSC_VER

SuperGvgQueryUserDataFubenCmd::SuperGvgQueryUserDataFubenCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SuperGvgQueryUserDataFubenCmd)
}

void SuperGvgQueryUserDataFubenCmd::InitAsDefaultInstance() {
}

SuperGvgQueryUserDataFubenCmd::SuperGvgQueryUserDataFubenCmd(const SuperGvgQueryUserDataFubenCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SuperGvgQueryUserDataFubenCmd)
}

void SuperGvgQueryUserDataFubenCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 11;
  param_ = 37;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SuperGvgQueryUserDataFubenCmd::~SuperGvgQueryUserDataFubenCmd() {
  // @@protoc_insertion_point(destructor:Cmd.SuperGvgQueryUserDataFubenCmd)
  SharedDtor();
}

void SuperGvgQueryUserDataFubenCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SuperGvgQueryUserDataFubenCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SuperGvgQueryUserDataFubenCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SuperGvgQueryUserDataFubenCmd_descriptor_;
}

const SuperGvgQueryUserDataFubenCmd& SuperGvgQueryUserDataFubenCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FuBenCmd_2eproto();
  return *default_instance_;
}

SuperGvgQueryUserDataFubenCmd* SuperGvgQueryUserDataFubenCmd::default_instance_ = NULL;

SuperGvgQueryUserDataFubenCmd* SuperGvgQueryUserDataFubenCmd::New() const {
  return new SuperGvgQueryUserDataFubenCmd;
}

void SuperGvgQueryUserDataFubenCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 11;
    param_ = 37;
  }
  guilduserdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SuperGvgQueryUserDataFubenCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SuperGvgQueryUserDataFubenCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.FuBenParam param = 2 [default = SUPERGVG_QUERY_USER_DATA];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::FuBenParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::FuBenParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_guilduserdata;
        break;
      }

      // repeated .Cmd.SuperGvgGuildUserData guilduserdata = 3;
      case 3: {
        if (tag == 26) {
         parse_guilduserdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_guilduserdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_guilduserdata;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SuperGvgQueryUserDataFubenCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SuperGvgQueryUserDataFubenCmd)
  return false;
#undef DO_
}

void SuperGvgQueryUserDataFubenCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SuperGvgQueryUserDataFubenCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.FuBenParam param = 2 [default = SUPERGVG_QUERY_USER_DATA];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.SuperGvgGuildUserData guilduserdata = 3;
  for (int i = 0; i < this->guilduserdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->guilduserdata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SuperGvgQueryUserDataFubenCmd)
}

::google::protobuf::uint8* SuperGvgQueryUserDataFubenCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SuperGvgQueryUserDataFubenCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.FuBenParam param = 2 [default = SUPERGVG_QUERY_USER_DATA];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.SuperGvgGuildUserData guilduserdata = 3;
  for (int i = 0; i < this->guilduserdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->guilduserdata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SuperGvgQueryUserDataFubenCmd)
  return target;
}

int SuperGvgQueryUserDataFubenCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.FuBenParam param = 2 [default = SUPERGVG_QUERY_USER_DATA];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.SuperGvgGuildUserData guilduserdata = 3;
  total_size += 1 * this->guilduserdata_size();
  for (int i = 0; i < this->guilduserdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guilduserdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SuperGvgQueryUserDataFubenCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SuperGvgQueryUserDataFubenCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SuperGvgQueryUserDataFubenCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SuperGvgQueryUserDataFubenCmd::MergeFrom(const SuperGvgQueryUserDataFubenCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  guilduserdata_.MergeFrom(from.guilduserdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SuperGvgQueryUserDataFubenCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SuperGvgQueryUserDataFubenCmd::CopyFrom(const SuperGvgQueryUserDataFubenCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SuperGvgQueryUserDataFubenCmd::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->guilduserdata())) return false;
  return true;
}

void SuperGvgQueryUserDataFubenCmd::Swap(SuperGvgQueryUserDataFubenCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    guilduserdata_.Swap(&other->guilduserdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SuperGvgQueryUserDataFubenCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SuperGvgQueryUserDataFubenCmd_descriptor_;
  metadata.reflection = SuperGvgQueryUserDataFubenCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MvpBattleTeamData::kTeamidFieldNumber;
const int MvpBattleTeamData::kTeamnameFieldNumber;
const int MvpBattleTeamData::kKillmvpsFieldNumber;
const int MvpBattleTeamData::kKillminisFieldNumber;
const int MvpBattleTeamData::kKillusernumFieldNumber;
const int MvpBattleTeamData::kDeadbossFieldNumber;
#endif  // !_MSC_VER

MvpBattleTeamData::MvpBattleTeamData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.MvpBattleTeamData)
}

void MvpBattleTeamData::InitAsDefaultInstance() {
}

MvpBattleTeamData::MvpBattleTeamData(const MvpBattleTeamData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.MvpBattleTeamData)
}

void MvpBattleTeamData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  teamid_ = GOOGLE_ULONGLONG(0);
  teamname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  killusernum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MvpBattleTeamData::~MvpBattleTeamData() {
  // @@protoc_insertion_point(destructor:Cmd.MvpBattleTeamData)
  SharedDtor();
}

void MvpBattleTeamData::SharedDtor() {
  if (teamname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete teamname_;
  }
  if (this != default_instance_) {
  }
}

void MvpBattleTeamData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MvpBattleTeamData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MvpBattleTeamData_descriptor_;
}

const MvpBattleTeamData& MvpBattleTeamData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FuBenCmd_2eproto();
  return *default_instance_;
}

MvpBattleTeamData* MvpBattleTeamData::default_instance_ = NULL;

MvpBattleTeamData* MvpBattleTeamData::New() const {
  return new MvpBattleTeamData;
}

void MvpBattleTeamData::Clear() {
  if (_has_bits_[0 / 32] & 19) {
    teamid_ = GOOGLE_ULONGLONG(0);
    if (has_teamname()) {
      if (teamname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        teamname_->clear();
      }
    }
    killusernum_ = 0u;
  }
  killmvps_.Clear();
  killminis_.Clear();
  deadboss_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MvpBattleTeamData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.MvpBattleTeamData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 teamid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_teamname;
        break;
      }

      // optional string teamname = 2;
      case 2: {
        if (tag == 18) {
         parse_teamname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_teamname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->teamname().data(), this->teamname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "teamname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_killmvps;
        break;
      }

      // repeated uint32 killmvps = 3;
      case 3: {
        if (tag == 24) {
         parse_killmvps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_killmvps())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_killmvps())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_killmvps;
        if (input->ExpectTag(32)) goto parse_killminis;
        break;
      }

      // repeated uint32 killminis = 4;
      case 4: {
        if (tag == 32) {
         parse_killminis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_killminis())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_killminis())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_killminis;
        if (input->ExpectTag(40)) goto parse_killusernum;
        break;
      }

      // optional uint32 killusernum = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_killusernum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killusernum_)));
          set_has_killusernum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_deadboss;
        break;
      }

      // repeated uint32 deadboss = 6;
      case 6: {
        if (tag == 48) {
         parse_deadboss:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_deadboss())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_deadboss())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_deadboss;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.MvpBattleTeamData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.MvpBattleTeamData)
  return false;
#undef DO_
}

void MvpBattleTeamData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.MvpBattleTeamData)
  // required uint64 teamid = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->teamid(), output);
  }

  // optional string teamname = 2;
  if (has_teamname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->teamname().data(), this->teamname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "teamname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->teamname(), output);
  }

  // repeated uint32 killmvps = 3;
  for (int i = 0; i < this->killmvps_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->killmvps(i), output);
  }

  // repeated uint32 killminis = 4;
  for (int i = 0; i < this->killminis_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->killminis(i), output);
  }

  // optional uint32 killusernum = 5 [default = 0];
  if (has_killusernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->killusernum(), output);
  }

  // repeated uint32 deadboss = 6;
  for (int i = 0; i < this->deadboss_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->deadboss(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.MvpBattleTeamData)
}

::google::protobuf::uint8* MvpBattleTeamData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.MvpBattleTeamData)
  // required uint64 teamid = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->teamid(), target);
  }

  // optional string teamname = 2;
  if (has_teamname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->teamname().data(), this->teamname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "teamname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->teamname(), target);
  }

  // repeated uint32 killmvps = 3;
  for (int i = 0; i < this->killmvps_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->killmvps(i), target);
  }

  // repeated uint32 killminis = 4;
  for (int i = 0; i < this->killminis_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->killminis(i), target);
  }

  // optional uint32 killusernum = 5 [default = 0];
  if (has_killusernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->killusernum(), target);
  }

  // repeated uint32 deadboss = 6;
  for (int i = 0; i < this->deadboss_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->deadboss(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.MvpBattleTeamData)
  return target;
}

int MvpBattleTeamData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 teamid = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional string teamname = 2;
    if (has_teamname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->teamname());
    }

    // optional uint32 killusernum = 5 [default = 0];
    if (has_killusernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killusernum());
    }

  }
  // repeated uint32 killmvps = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->killmvps_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->killmvps(i));
    }
    total_size += 1 * this->killmvps_size() + data_size;
  }

  // repeated uint32 killminis = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->killminis_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->killminis(i));
    }
    total_size += 1 * this->killminis_size() + data_size;
  }

  // repeated uint32 deadboss = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->deadboss_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->deadboss(i));
    }
    total_size += 1 * this->deadboss_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MvpBattleTeamData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MvpBattleTeamData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MvpBattleTeamData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MvpBattleTeamData::MergeFrom(const MvpBattleTeamData& from) {
  GOOGLE_CHECK_NE(&from, this);
  killmvps_.MergeFrom(from.killmvps_);
  killminis_.MergeFrom(from.killminis_);
  deadboss_.MergeFrom(from.deadboss_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_teamname()) {
      set_teamname(from.teamname());
    }
    if (from.has_killusernum()) {
      set_killusernum(from.killusernum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MvpBattleTeamData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MvpBattleTeamData::CopyFrom(const MvpBattleTeamData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MvpBattleTeamData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MvpBattleTeamData::Swap(MvpBattleTeamData* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(teamname_, other->teamname_);
    killmvps_.Swap(&other->killmvps_);
    killminis_.Swap(&other->killminis_);
    std::swap(killusernum_, other->killusernum_);
    deadboss_.Swap(&other->deadboss_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MvpBattleTeamData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MvpBattleTeamData_descriptor_;
  metadata.reflection = MvpBattleTeamData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MvpBattleReportFubenCmd::kCmdFieldNumber;
const int MvpBattleReportFubenCmd::kParamFieldNumber;
const int MvpBattleReportFubenCmd::kDatasFieldNumber;
#endif  // !_MSC_VER

MvpBattleReportFubenCmd::MvpBattleReportFubenCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.MvpBattleReportFubenCmd)
}

void MvpBattleReportFubenCmd::InitAsDefaultInstance() {
}

MvpBattleReportFubenCmd::MvpBattleReportFubenCmd(const MvpBattleReportFubenCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.MvpBattleReportFubenCmd)
}

void MvpBattleReportFubenCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 11;
  param_ = 38;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MvpBattleReportFubenCmd::~MvpBattleReportFubenCmd() {
  // @@protoc_insertion_point(destructor:Cmd.MvpBattleReportFubenCmd)
  SharedDtor();
}

void MvpBattleReportFubenCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MvpBattleReportFubenCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MvpBattleReportFubenCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MvpBattleReportFubenCmd_descriptor_;
}

const MvpBattleReportFubenCmd& MvpBattleReportFubenCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FuBenCmd_2eproto();
  return *default_instance_;
}

MvpBattleReportFubenCmd* MvpBattleReportFubenCmd::default_instance_ = NULL;

MvpBattleReportFubenCmd* MvpBattleReportFubenCmd::New() const {
  return new MvpBattleReportFubenCmd;
}

void MvpBattleReportFubenCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 11;
    param_ = 38;
  }
  datas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MvpBattleReportFubenCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.MvpBattleReportFubenCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.FuBenParam param = 2 [default = MVPBATTLE_END_REPORT];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::FuBenParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::FuBenParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_datas;
        break;
      }

      // repeated .Cmd.MvpBattleTeamData datas = 3;
      case 3: {
        if (tag == 26) {
         parse_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_datas;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.MvpBattleReportFubenCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.MvpBattleReportFubenCmd)
  return false;
#undef DO_
}

void MvpBattleReportFubenCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.MvpBattleReportFubenCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.FuBenParam param = 2 [default = MVPBATTLE_END_REPORT];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.MvpBattleTeamData datas = 3;
  for (int i = 0; i < this->datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->datas(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.MvpBattleReportFubenCmd)
}

::google::protobuf::uint8* MvpBattleReportFubenCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.MvpBattleReportFubenCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.FuBenParam param = 2 [default = MVPBATTLE_END_REPORT];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.MvpBattleTeamData datas = 3;
  for (int i = 0; i < this->datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->datas(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.MvpBattleReportFubenCmd)
  return target;
}

int MvpBattleReportFubenCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.FuBenParam param = 2 [default = MVPBATTLE_END_REPORT];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.MvpBattleTeamData datas = 3;
  total_size += 1 * this->datas_size();
  for (int i = 0; i < this->datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MvpBattleReportFubenCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MvpBattleReportFubenCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MvpBattleReportFubenCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MvpBattleReportFubenCmd::MergeFrom(const MvpBattleReportFubenCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  datas_.MergeFrom(from.datas_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MvpBattleReportFubenCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MvpBattleReportFubenCmd::CopyFrom(const MvpBattleReportFubenCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MvpBattleReportFubenCmd::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->datas())) return false;
  return true;
}

void MvpBattleReportFubenCmd::Swap(MvpBattleReportFubenCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    datas_.Swap(&other->datas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MvpBattleReportFubenCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MvpBattleReportFubenCmd_descriptor_;
  metadata.reflection = MvpBattleReportFubenCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamPwsRaidUserInfo::kCharidFieldNumber;
const int TeamPwsRaidUserInfo::kNameFieldNumber;
const int TeamPwsRaidUserInfo::kKillnumFieldNumber;
const int TeamPwsRaidUserInfo::kHealFieldNumber;
const int TeamPwsRaidUserInfo::kKillscoreFieldNumber;
const int TeamPwsRaidUserInfo::kBallscoreFieldNumber;
const int TeamPwsRaidUserInfo::kBuffscoreFieldNumber;
const int TeamPwsRaidUserInfo::kDienumFieldNumber;
#endif  // !_MSC_VER

TeamPwsRaidUserInfo::TeamPwsRaidUserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TeamPwsRaidUserInfo)
}

void TeamPwsRaidUserInfo::InitAsDefaultInstance() {
}

TeamPwsRaidUserInfo::TeamPwsRaidUserInfo(const TeamPwsRaidUserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TeamPwsRaidUserInfo)
}

void TeamPwsRaidUserInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  killnum_ = 0u;
  heal_ = 0u;
  killscore_ = 0u;
  ballscore_ = 0u;
  buffscore_ = 0u;
  dienum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamPwsRaidUserInfo::~TeamPwsRaidUserInfo() {
  // @@protoc_insertion_point(destructor:Cmd.TeamPwsRaidUserInfo)
  SharedDtor();
}

void TeamPwsRaidUserInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void TeamPwsRaidUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamPwsRaidUserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamPwsRaidUserInfo_descriptor_;
}

const TeamPwsRaidUserInfo& TeamPwsRaidUserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FuBenCmd_2eproto();
  return *default_instance_;
}

TeamPwsRaidUserInfo* TeamPwsRaidUserInfo::default_instance_ = NULL;

TeamPwsRaidUserInfo* TeamPwsRaidUserInfo::New() const {
  return new TeamPwsRaidUserInfo;
}

void TeamPwsRaidUserInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TeamPwsRaidUserInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(killnum_, dienum_);
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamPwsRaidUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TeamPwsRaidUserInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 charid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_killnum;
        break;
      }

      // optional uint32 killnum = 3;
      case 3: {
        if (tag == 24) {
         parse_killnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killnum_)));
          set_has_killnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_heal;
        break;
      }

      // optional uint32 heal = 4;
      case 4: {
        if (tag == 32) {
         parse_heal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heal_)));
          set_has_heal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_killscore;
        break;
      }

      // optional uint32 killscore = 5;
      case 5: {
        if (tag == 40) {
         parse_killscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killscore_)));
          set_has_killscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_ballscore;
        break;
      }

      // optional uint32 ballscore = 6;
      case 6: {
        if (tag == 48) {
         parse_ballscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ballscore_)));
          set_has_ballscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_buffscore;
        break;
      }

      // optional uint32 buffscore = 7;
      case 7: {
        if (tag == 56) {
         parse_buffscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buffscore_)));
          set_has_buffscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_dienum;
        break;
      }

      // optional uint32 dienum = 8;
      case 8: {
        if (tag == 64) {
         parse_dienum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dienum_)));
          set_has_dienum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TeamPwsRaidUserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TeamPwsRaidUserInfo)
  return false;
#undef DO_
}

void TeamPwsRaidUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TeamPwsRaidUserInfo)
  // optional uint64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional uint32 killnum = 3;
  if (has_killnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->killnum(), output);
  }

  // optional uint32 heal = 4;
  if (has_heal()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->heal(), output);
  }

  // optional uint32 killscore = 5;
  if (has_killscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->killscore(), output);
  }

  // optional uint32 ballscore = 6;
  if (has_ballscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->ballscore(), output);
  }

  // optional uint32 buffscore = 7;
  if (has_buffscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->buffscore(), output);
  }

  // optional uint32 dienum = 8;
  if (has_dienum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->dienum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TeamPwsRaidUserInfo)
}

::google::protobuf::uint8* TeamPwsRaidUserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TeamPwsRaidUserInfo)
  // optional uint64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 killnum = 3;
  if (has_killnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->killnum(), target);
  }

  // optional uint32 heal = 4;
  if (has_heal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->heal(), target);
  }

  // optional uint32 killscore = 5;
  if (has_killscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->killscore(), target);
  }

  // optional uint32 ballscore = 6;
  if (has_ballscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->ballscore(), target);
  }

  // optional uint32 buffscore = 7;
  if (has_buffscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->buffscore(), target);
  }

  // optional uint32 dienum = 8;
  if (has_dienum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->dienum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TeamPwsRaidUserInfo)
  return target;
}

int TeamPwsRaidUserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 killnum = 3;
    if (has_killnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killnum());
    }

    // optional uint32 heal = 4;
    if (has_heal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heal());
    }

    // optional uint32 killscore = 5;
    if (has_killscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killscore());
    }

    // optional uint32 ballscore = 6;
    if (has_ballscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ballscore());
    }

    // optional uint32 buffscore = 7;
    if (has_buffscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buffscore());
    }

    // optional uint32 dienum = 8;
    if (has_dienum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dienum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamPwsRaidUserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamPwsRaidUserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamPwsRaidUserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamPwsRaidUserInfo::MergeFrom(const TeamPwsRaidUserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_killnum()) {
      set_killnum(from.killnum());
    }
    if (from.has_heal()) {
      set_heal(from.heal());
    }
    if (from.has_killscore()) {
      set_killscore(from.killscore());
    }
    if (from.has_ballscore()) {
      set_ballscore(from.ballscore());
    }
    if (from.has_buffscore()) {
      set_buffscore(from.buffscore());
    }
    if (from.has_dienum()) {
      set_dienum(from.dienum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamPwsRaidUserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamPwsRaidUserInfo::CopyFrom(const TeamPwsRaidUserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamPwsRaidUserInfo::IsInitialized() const {

  return true;
}

void TeamPwsRaidUserInfo::Swap(TeamPwsRaidUserInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(killnum_, other->killnum_);
    std::swap(heal_, other->heal_);
    std::swap(killscore_, other->killscore_);
    std::swap(ballscore_, other->ballscore_);
    std::swap(buffscore_, other->buffscore_);
    std::swap(dienum_, other->dienum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamPwsRaidUserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamPwsRaidUserInfo_descriptor_;
  metadata.reflection = TeamPwsRaidUserInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamPwsRaidTeamInfo::kTeamidFieldNumber;
const int TeamPwsRaidTeamInfo::kColorFieldNumber;
const int TeamPwsRaidTeamInfo::kUserinfosFieldNumber;
#endif  // !_MSC_VER

TeamPwsRaidTeamInfo::TeamPwsRaidTeamInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TeamPwsRaidTeamInfo)
}

void TeamPwsRaidTeamInfo::InitAsDefaultInstance() {
}

TeamPwsRaidTeamInfo::TeamPwsRaidTeamInfo(const TeamPwsRaidTeamInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TeamPwsRaidTeamInfo)
}

void TeamPwsRaidTeamInfo::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = GOOGLE_ULONGLONG(0);
  color_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamPwsRaidTeamInfo::~TeamPwsRaidTeamInfo() {
  // @@protoc_insertion_point(destructor:Cmd.TeamPwsRaidTeamInfo)
  SharedDtor();
}

void TeamPwsRaidTeamInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamPwsRaidTeamInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamPwsRaidTeamInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamPwsRaidTeamInfo_descriptor_;
}

const TeamPwsRaidTeamInfo& TeamPwsRaidTeamInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FuBenCmd_2eproto();
  return *default_instance_;
}

TeamPwsRaidTeamInfo* TeamPwsRaidTeamInfo::default_instance_ = NULL;

TeamPwsRaidTeamInfo* TeamPwsRaidTeamInfo::New() const {
  return new TeamPwsRaidTeamInfo;
}

void TeamPwsRaidTeamInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    teamid_ = GOOGLE_ULONGLONG(0);
    color_ = 1;
  }
  userinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamPwsRaidTeamInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TeamPwsRaidTeamInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 teamid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_color;
        break;
      }

      // optional .Cmd.ETeamPwsColor color = 2;
      case 2: {
        if (tag == 16) {
         parse_color:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ETeamPwsColor_IsValid(value)) {
            set_color(static_cast< ::Cmd::ETeamPwsColor >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_userinfos;
        break;
      }

      // repeated .Cmd.TeamPwsRaidUserInfo userinfos = 3;
      case 3: {
        if (tag == 26) {
         parse_userinfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_userinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_userinfos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TeamPwsRaidTeamInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TeamPwsRaidTeamInfo)
  return false;
#undef DO_
}

void TeamPwsRaidTeamInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TeamPwsRaidTeamInfo)
  // optional uint64 teamid = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->teamid(), output);
  }

  // optional .Cmd.ETeamPwsColor color = 2;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->color(), output);
  }

  // repeated .Cmd.TeamPwsRaidUserInfo userinfos = 3;
  for (int i = 0; i < this->userinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->userinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TeamPwsRaidTeamInfo)
}

::google::protobuf::uint8* TeamPwsRaidTeamInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TeamPwsRaidTeamInfo)
  // optional uint64 teamid = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->teamid(), target);
  }

  // optional .Cmd.ETeamPwsColor color = 2;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->color(), target);
  }

  // repeated .Cmd.TeamPwsRaidUserInfo userinfos = 3;
  for (int i = 0; i < this->userinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->userinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TeamPwsRaidTeamInfo)
  return target;
}

int TeamPwsRaidTeamInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 teamid = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional .Cmd.ETeamPwsColor color = 2;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->color());
    }

  }
  // repeated .Cmd.TeamPwsRaidUserInfo userinfos = 3;
  total_size += 1 * this->userinfos_size();
  for (int i = 0; i < this->userinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamPwsRaidTeamInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamPwsRaidTeamInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamPwsRaidTeamInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamPwsRaidTeamInfo::MergeFrom(const TeamPwsRaidTeamInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  userinfos_.MergeFrom(from.userinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamPwsRaidTeamInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamPwsRaidTeamInfo::CopyFrom(const TeamPwsRaidTeamInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamPwsRaidTeamInfo::IsInitialized() const {

  return true;
}

void TeamPwsRaidTeamInfo::Swap(TeamPwsRaidTeamInfo* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(color_, other->color_);
    userinfos_.Swap(&other->userinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamPwsRaidTeamInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamPwsRaidTeamInfo_descriptor_;
  metadata.reflection = TeamPwsRaidTeamInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryTeamPwsUserInfoFubenCmd::kCmdFieldNumber;
const int QueryTeamPwsUserInfoFubenCmd::kParamFieldNumber;
const int QueryTeamPwsUserInfoFubenCmd::kTeaminfoFieldNumber;
#endif  // !_MSC_VER

QueryTeamPwsUserInfoFubenCmd::QueryTeamPwsUserInfoFubenCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QueryTeamPwsUserInfoFubenCmd)
}

void QueryTeamPwsUserInfoFubenCmd::InitAsDefaultInstance() {
}

QueryTeamPwsUserInfoFubenCmd::QueryTeamPwsUserInfoFubenCmd(const QueryTeamPwsUserInfoFubenCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QueryTeamPwsUserInfoFubenCmd)
}

void QueryTeamPwsUserInfoFubenCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 11;
  param_ = 42;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryTeamPwsUserInfoFubenCmd::~QueryTeamPwsUserInfoFubenCmd() {
  // @@protoc_insertion_point(destructor:Cmd.QueryTeamPwsUserInfoFubenCmd)
  SharedDtor();
}

void QueryTeamPwsUserInfoFubenCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryTeamPwsUserInfoFubenCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryTeamPwsUserInfoFubenCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryTeamPwsUserInfoFubenCmd_descriptor_;
}

const QueryTeamPwsUserInfoFubenCmd& QueryTeamPwsUserInfoFubenCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FuBenCmd_2eproto();
  return *default_instance_;
}

QueryTeamPwsUserInfoFubenCmd* QueryTeamPwsUserInfoFubenCmd::default_instance_ = NULL;

QueryTeamPwsUserInfoFubenCmd* QueryTeamPwsUserInfoFubenCmd::New() const {
  return new QueryTeamPwsUserInfoFubenCmd;
}

void QueryTeamPwsUserInfoFubenCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 11;
    param_ = 42;
  }
  teaminfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryTeamPwsUserInfoFubenCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QueryTeamPwsUserInfoFubenCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.FuBenParam param = 2 [default = QUERY_RAID_TEAMPWS_USERINFO];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::FuBenParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::FuBenParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_teaminfo;
        break;
      }

      // repeated .Cmd.TeamPwsRaidTeamInfo teaminfo = 3;
      case 3: {
        if (tag == 26) {
         parse_teaminfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_teaminfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_teaminfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QueryTeamPwsUserInfoFubenCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QueryTeamPwsUserInfoFubenCmd)
  return false;
#undef DO_
}

void QueryTeamPwsUserInfoFubenCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QueryTeamPwsUserInfoFubenCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.FuBenParam param = 2 [default = QUERY_RAID_TEAMPWS_USERINFO];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.TeamPwsRaidTeamInfo teaminfo = 3;
  for (int i = 0; i < this->teaminfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->teaminfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QueryTeamPwsUserInfoFubenCmd)
}

::google::protobuf::uint8* QueryTeamPwsUserInfoFubenCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QueryTeamPwsUserInfoFubenCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.FuBenParam param = 2 [default = QUERY_RAID_TEAMPWS_USERINFO];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.TeamPwsRaidTeamInfo teaminfo = 3;
  for (int i = 0; i < this->teaminfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->teaminfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QueryTeamPwsUserInfoFubenCmd)
  return target;
}

int QueryTeamPwsUserInfoFubenCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.FuBenParam param = 2 [default = QUERY_RAID_TEAMPWS_USERINFO];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.TeamPwsRaidTeamInfo teaminfo = 3;
  total_size += 1 * this->teaminfo_size();
  for (int i = 0; i < this->teaminfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->teaminfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryTeamPwsUserInfoFubenCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryTeamPwsUserInfoFubenCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryTeamPwsUserInfoFubenCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryTeamPwsUserInfoFubenCmd::MergeFrom(const QueryTeamPwsUserInfoFubenCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  teaminfo_.MergeFrom(from.teaminfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryTeamPwsUserInfoFubenCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryTeamPwsUserInfoFubenCmd::CopyFrom(const QueryTeamPwsUserInfoFubenCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryTeamPwsUserInfoFubenCmd::IsInitialized() const {

  return true;
}

void QueryTeamPwsUserInfoFubenCmd::Swap(QueryTeamPwsUserInfoFubenCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    teaminfo_.Swap(&other->teaminfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryTeamPwsUserInfoFubenCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryTeamPwsUserInfoFubenCmd_descriptor_;
  metadata.reflection = QueryTeamPwsUserInfoFubenCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamPwsReportFubenCmd::kCmdFieldNumber;
const int TeamPwsReportFubenCmd::kParamFieldNumber;
const int TeamPwsReportFubenCmd::kTeaminfoFieldNumber;
const int TeamPwsReportFubenCmd::kMvpuserinfoFieldNumber;
const int TeamPwsReportFubenCmd::kWinteamFieldNumber;
#endif  // !_MSC_VER

TeamPwsReportFubenCmd::TeamPwsReportFubenCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TeamPwsReportFubenCmd)
}

void TeamPwsReportFubenCmd::InitAsDefaultInstance() {
  mvpuserinfo_ = const_cast< ::Cmd::QueryUserInfo*>(&::Cmd::QueryUserInfo::default_instance());
}

TeamPwsReportFubenCmd::TeamPwsReportFubenCmd(const TeamPwsReportFubenCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TeamPwsReportFubenCmd)
}

void TeamPwsReportFubenCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 11;
  param_ = 43;
  mvpuserinfo_ = NULL;
  winteam_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamPwsReportFubenCmd::~TeamPwsReportFubenCmd() {
  // @@protoc_insertion_point(destructor:Cmd.TeamPwsReportFubenCmd)
  SharedDtor();
}

void TeamPwsReportFubenCmd::SharedDtor() {
  if (this != default_instance_) {
    delete mvpuserinfo_;
  }
}

void TeamPwsReportFubenCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamPwsReportFubenCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamPwsReportFubenCmd_descriptor_;
}

const TeamPwsReportFubenCmd& TeamPwsReportFubenCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FuBenCmd_2eproto();
  return *default_instance_;
}

TeamPwsReportFubenCmd* TeamPwsReportFubenCmd::default_instance_ = NULL;

TeamPwsReportFubenCmd* TeamPwsReportFubenCmd::New() const {
  return new TeamPwsReportFubenCmd;
}

void TeamPwsReportFubenCmd::Clear() {
  if (_has_bits_[0 / 32] & 27) {
    cmd_ = 11;
    param_ = 43;
    if (has_mvpuserinfo()) {
      if (mvpuserinfo_ != NULL) mvpuserinfo_->::Cmd::QueryUserInfo::Clear();
    }
    winteam_ = 1;
  }
  teaminfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamPwsReportFubenCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TeamPwsReportFubenCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.FuBenParam param = 2 [default = TEAMPWS_END_REPORT];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::FuBenParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::FuBenParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_teaminfo;
        break;
      }

      // repeated .Cmd.TeamPwsRaidTeamInfo teaminfo = 3;
      case 3: {
        if (tag == 26) {
         parse_teaminfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_teaminfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_teaminfo;
        if (input->ExpectTag(34)) goto parse_mvpuserinfo;
        break;
      }

      // optional .Cmd.QueryUserInfo mvpuserinfo = 4;
      case 4: {
        if (tag == 34) {
         parse_mvpuserinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mvpuserinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_winteam;
        break;
      }

      // required .Cmd.ETeamPwsColor winteam = 5;
      case 5: {
        if (tag == 40) {
         parse_winteam:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ETeamPwsColor_IsValid(value)) {
            set_winteam(static_cast< ::Cmd::ETeamPwsColor >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TeamPwsReportFubenCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TeamPwsReportFubenCmd)
  return false;
#undef DO_
}

void TeamPwsReportFubenCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TeamPwsReportFubenCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.FuBenParam param = 2 [default = TEAMPWS_END_REPORT];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.TeamPwsRaidTeamInfo teaminfo = 3;
  for (int i = 0; i < this->teaminfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->teaminfo(i), output);
  }

  // optional .Cmd.QueryUserInfo mvpuserinfo = 4;
  if (has_mvpuserinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->mvpuserinfo(), output);
  }

  // required .Cmd.ETeamPwsColor winteam = 5;
  if (has_winteam()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->winteam(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TeamPwsReportFubenCmd)
}

::google::protobuf::uint8* TeamPwsReportFubenCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TeamPwsReportFubenCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.FuBenParam param = 2 [default = TEAMPWS_END_REPORT];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.TeamPwsRaidTeamInfo teaminfo = 3;
  for (int i = 0; i < this->teaminfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->teaminfo(i), target);
  }

  // optional .Cmd.QueryUserInfo mvpuserinfo = 4;
  if (has_mvpuserinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->mvpuserinfo(), target);
  }

  // required .Cmd.ETeamPwsColor winteam = 5;
  if (has_winteam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->winteam(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TeamPwsReportFubenCmd)
  return target;
}

int TeamPwsReportFubenCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.FuBenParam param = 2 [default = TEAMPWS_END_REPORT];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.QueryUserInfo mvpuserinfo = 4;
    if (has_mvpuserinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mvpuserinfo());
    }

    // required .Cmd.ETeamPwsColor winteam = 5;
    if (has_winteam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->winteam());
    }

  }
  // repeated .Cmd.TeamPwsRaidTeamInfo teaminfo = 3;
  total_size += 1 * this->teaminfo_size();
  for (int i = 0; i < this->teaminfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->teaminfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamPwsReportFubenCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamPwsReportFubenCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamPwsReportFubenCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamPwsReportFubenCmd::MergeFrom(const TeamPwsReportFubenCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  teaminfo_.MergeFrom(from.teaminfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_mvpuserinfo()) {
      mutable_mvpuserinfo()->::Cmd::QueryUserInfo::MergeFrom(from.mvpuserinfo());
    }
    if (from.has_winteam()) {
      set_winteam(from.winteam());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamPwsReportFubenCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamPwsReportFubenCmd::CopyFrom(const TeamPwsReportFubenCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamPwsReportFubenCmd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000010) != 0x00000010) return false;

  if (has_mvpuserinfo()) {
    if (!this->mvpuserinfo().IsInitialized()) return false;
  }
  return true;
}

void TeamPwsReportFubenCmd::Swap(TeamPwsReportFubenCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    teaminfo_.Swap(&other->teaminfo_);
    std::swap(mvpuserinfo_, other->mvpuserinfo_);
    std::swap(winteam_, other->winteam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamPwsReportFubenCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamPwsReportFubenCmd_descriptor_;
  metadata.reflection = TeamPwsReportFubenCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamPwsInfoSyncData::kTeamidFieldNumber;
const int TeamPwsInfoSyncData::kTeamnameFieldNumber;
const int TeamPwsInfoSyncData::kColorFieldNumber;
const int TeamPwsInfoSyncData::kScoreFieldNumber;
const int TeamPwsInfoSyncData::kEffectcdFieldNumber;
const int TeamPwsInfoSyncData::kMagicidFieldNumber;
const int TeamPwsInfoSyncData::kBallsFieldNumber;
#endif  // !_MSC_VER

TeamPwsInfoSyncData::TeamPwsInfoSyncData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TeamPwsInfoSyncData)
}

void TeamPwsInfoSyncData::InitAsDefaultInstance() {
}

TeamPwsInfoSyncData::TeamPwsInfoSyncData(const TeamPwsInfoSyncData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TeamPwsInfoSyncData)
}

void TeamPwsInfoSyncData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  teamid_ = GOOGLE_ULONGLONG(0);
  teamname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  color_ = 1;
  score_ = 0u;
  effectcd_ = 0u;
  magicid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamPwsInfoSyncData::~TeamPwsInfoSyncData() {
  // @@protoc_insertion_point(destructor:Cmd.TeamPwsInfoSyncData)
  SharedDtor();
}

void TeamPwsInfoSyncData::SharedDtor() {
  if (teamname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete teamname_;
  }
  if (this != default_instance_) {
  }
}

void TeamPwsInfoSyncData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamPwsInfoSyncData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamPwsInfoSyncData_descriptor_;
}

const TeamPwsInfoSyncData& TeamPwsInfoSyncData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FuBenCmd_2eproto();
  return *default_instance_;
}

TeamPwsInfoSyncData* TeamPwsInfoSyncData::default_instance_ = NULL;

TeamPwsInfoSyncData* TeamPwsInfoSyncData::New() const {
  return new TeamPwsInfoSyncData;
}

void TeamPwsInfoSyncData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TeamPwsInfoSyncData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(score_, magicid_);
    teamid_ = GOOGLE_ULONGLONG(0);
    if (has_teamname()) {
      if (teamname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        teamname_->clear();
      }
    }
    color_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  balls_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamPwsInfoSyncData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TeamPwsInfoSyncData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 teamid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_teamname;
        break;
      }

      // optional string teamname = 2;
      case 2: {
        if (tag == 18) {
         parse_teamname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_teamname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->teamname().data(), this->teamname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "teamname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_color;
        break;
      }

      // optional .Cmd.ETeamPwsColor color = 3;
      case 3: {
        if (tag == 24) {
         parse_color:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ETeamPwsColor_IsValid(value)) {
            set_color(static_cast< ::Cmd::ETeamPwsColor >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_score;
        break;
      }

      // optional uint32 score = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_effectcd;
        break;
      }

      // optional uint32 effectcd = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_effectcd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effectcd_)));
          set_has_effectcd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_magicid;
        break;
      }

      // optional uint32 magicid = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_magicid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &magicid_)));
          set_has_magicid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_balls;
        break;
      }

      // repeated .Cmd.EMagicBallType balls = 7;
      case 7: {
        if (tag == 56) {
         parse_balls:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EMagicBallType_IsValid(value)) {
            add_balls(static_cast< ::Cmd::EMagicBallType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::Cmd::EMagicBallType_IsValid,
                 this->mutable_balls())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_balls;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TeamPwsInfoSyncData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TeamPwsInfoSyncData)
  return false;
#undef DO_
}

void TeamPwsInfoSyncData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TeamPwsInfoSyncData)
  // optional uint64 teamid = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->teamid(), output);
  }

  // optional string teamname = 2;
  if (has_teamname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->teamname().data(), this->teamname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "teamname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->teamname(), output);
  }

  // optional .Cmd.ETeamPwsColor color = 3;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->color(), output);
  }

  // optional uint32 score = 4 [default = 0];
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->score(), output);
  }

  // optional uint32 effectcd = 5 [default = 0];
  if (has_effectcd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->effectcd(), output);
  }

  // optional uint32 magicid = 6 [default = 0];
  if (has_magicid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->magicid(), output);
  }

  // repeated .Cmd.EMagicBallType balls = 7;
  for (int i = 0; i < this->balls_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->balls(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TeamPwsInfoSyncData)
}

::google::protobuf::uint8* TeamPwsInfoSyncData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TeamPwsInfoSyncData)
  // optional uint64 teamid = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->teamid(), target);
  }

  // optional string teamname = 2;
  if (has_teamname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->teamname().data(), this->teamname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "teamname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->teamname(), target);
  }

  // optional .Cmd.ETeamPwsColor color = 3;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->color(), target);
  }

  // optional uint32 score = 4 [default = 0];
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->score(), target);
  }

  // optional uint32 effectcd = 5 [default = 0];
  if (has_effectcd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->effectcd(), target);
  }

  // optional uint32 magicid = 6 [default = 0];
  if (has_magicid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->magicid(), target);
  }

  // repeated .Cmd.EMagicBallType balls = 7;
  for (int i = 0; i < this->balls_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->balls(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TeamPwsInfoSyncData)
  return target;
}

int TeamPwsInfoSyncData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 teamid = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional string teamname = 2;
    if (has_teamname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->teamname());
    }

    // optional .Cmd.ETeamPwsColor color = 3;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->color());
    }

    // optional uint32 score = 4 [default = 0];
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // optional uint32 effectcd = 5 [default = 0];
    if (has_effectcd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effectcd());
    }

    // optional uint32 magicid = 6 [default = 0];
    if (has_magicid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->magicid());
    }

  }
  // repeated .Cmd.EMagicBallType balls = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->balls_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->balls(i));
    }
    total_size += 1 * this->balls_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamPwsInfoSyncData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamPwsInfoSyncData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamPwsInfoSyncData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamPwsInfoSyncData::MergeFrom(const TeamPwsInfoSyncData& from) {
  GOOGLE_CHECK_NE(&from, this);
  balls_.MergeFrom(from.balls_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_teamname()) {
      set_teamname(from.teamname());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_effectcd()) {
      set_effectcd(from.effectcd());
    }
    if (from.has_magicid()) {
      set_magicid(from.magicid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamPwsInfoSyncData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamPwsInfoSyncData::CopyFrom(const TeamPwsInfoSyncData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamPwsInfoSyncData::IsInitialized() const {

  return true;
}

void TeamPwsInfoSyncData::Swap(TeamPwsInfoSyncData* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(teamname_, other->teamname_);
    std::swap(color_, other->color_);
    std::swap(score_, other->score_);
    std::swap(effectcd_, other->effectcd_);
    std::swap(magicid_, other->magicid_);
    balls_.Swap(&other->balls_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamPwsInfoSyncData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamPwsInfoSyncData_descriptor_;
  metadata.reflection = TeamPwsInfoSyncData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamPwsInfoSyncFubenCmd::kCmdFieldNumber;
const int TeamPwsInfoSyncFubenCmd::kParamFieldNumber;
const int TeamPwsInfoSyncFubenCmd::kTeaminfoFieldNumber;
const int TeamPwsInfoSyncFubenCmd::kEndtimeFieldNumber;
#endif  // !_MSC_VER

TeamPwsInfoSyncFubenCmd::TeamPwsInfoSyncFubenCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TeamPwsInfoSyncFubenCmd)
}

void TeamPwsInfoSyncFubenCmd::InitAsDefaultInstance() {
}

TeamPwsInfoSyncFubenCmd::TeamPwsInfoSyncFubenCmd(const TeamPwsInfoSyncFubenCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TeamPwsInfoSyncFubenCmd)
}

void TeamPwsInfoSyncFubenCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 11;
  param_ = 44;
  endtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamPwsInfoSyncFubenCmd::~TeamPwsInfoSyncFubenCmd() {
  // @@protoc_insertion_point(destructor:Cmd.TeamPwsInfoSyncFubenCmd)
  SharedDtor();
}

void TeamPwsInfoSyncFubenCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamPwsInfoSyncFubenCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamPwsInfoSyncFubenCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamPwsInfoSyncFubenCmd_descriptor_;
}

const TeamPwsInfoSyncFubenCmd& TeamPwsInfoSyncFubenCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FuBenCmd_2eproto();
  return *default_instance_;
}

TeamPwsInfoSyncFubenCmd* TeamPwsInfoSyncFubenCmd::default_instance_ = NULL;

TeamPwsInfoSyncFubenCmd* TeamPwsInfoSyncFubenCmd::New() const {
  return new TeamPwsInfoSyncFubenCmd;
}

void TeamPwsInfoSyncFubenCmd::Clear() {
  if (_has_bits_[0 / 32] & 11) {
    cmd_ = 11;
    param_ = 44;
    endtime_ = 0u;
  }
  teaminfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamPwsInfoSyncFubenCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TeamPwsInfoSyncFubenCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.FuBenParam param = 2 [default = TEAMPWS_SYNC_INFO];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::FuBenParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::FuBenParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_teaminfo;
        break;
      }

      // repeated .Cmd.TeamPwsInfoSyncData teaminfo = 3;
      case 3: {
        if (tag == 26) {
         parse_teaminfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_teaminfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_teaminfo;
        if (input->ExpectTag(32)) goto parse_endtime;
        break;
      }

      // optional uint32 endtime = 4;
      case 4: {
        if (tag == 32) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TeamPwsInfoSyncFubenCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TeamPwsInfoSyncFubenCmd)
  return false;
#undef DO_
}

void TeamPwsInfoSyncFubenCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TeamPwsInfoSyncFubenCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.FuBenParam param = 2 [default = TEAMPWS_SYNC_INFO];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.TeamPwsInfoSyncData teaminfo = 3;
  for (int i = 0; i < this->teaminfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->teaminfo(i), output);
  }

  // optional uint32 endtime = 4;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->endtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TeamPwsInfoSyncFubenCmd)
}

::google::protobuf::uint8* TeamPwsInfoSyncFubenCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TeamPwsInfoSyncFubenCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.FuBenParam param = 2 [default = TEAMPWS_SYNC_INFO];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.TeamPwsInfoSyncData teaminfo = 3;
  for (int i = 0; i < this->teaminfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->teaminfo(i), target);
  }

  // optional uint32 endtime = 4;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->endtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TeamPwsInfoSyncFubenCmd)
  return target;
}

int TeamPwsInfoSyncFubenCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.FuBenParam param = 2 [default = TEAMPWS_SYNC_INFO];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 endtime = 4;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endtime());
    }

  }
  // repeated .Cmd.TeamPwsInfoSyncData teaminfo = 3;
  total_size += 1 * this->teaminfo_size();
  for (int i = 0; i < this->teaminfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->teaminfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamPwsInfoSyncFubenCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamPwsInfoSyncFubenCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamPwsInfoSyncFubenCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamPwsInfoSyncFubenCmd::MergeFrom(const TeamPwsInfoSyncFubenCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  teaminfo_.MergeFrom(from.teaminfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamPwsInfoSyncFubenCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamPwsInfoSyncFubenCmd::CopyFrom(const TeamPwsInfoSyncFubenCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamPwsInfoSyncFubenCmd::IsInitialized() const {

  return true;
}

void TeamPwsInfoSyncFubenCmd::Swap(TeamPwsInfoSyncFubenCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    teaminfo_.Swap(&other->teaminfo_);
    std::swap(endtime_, other->endtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamPwsInfoSyncFubenCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamPwsInfoSyncFubenCmd_descriptor_;
  metadata.reflection = TeamPwsInfoSyncFubenCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateTeamPwsInfoFubenCmd::kCmdFieldNumber;
const int UpdateTeamPwsInfoFubenCmd::kParamFieldNumber;
const int UpdateTeamPwsInfoFubenCmd::kTeaminfoFieldNumber;
#endif  // !_MSC_VER

UpdateTeamPwsInfoFubenCmd::UpdateTeamPwsInfoFubenCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UpdateTeamPwsInfoFubenCmd)
}

void UpdateTeamPwsInfoFubenCmd::InitAsDefaultInstance() {
}

UpdateTeamPwsInfoFubenCmd::UpdateTeamPwsInfoFubenCmd(const UpdateTeamPwsInfoFubenCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UpdateTeamPwsInfoFubenCmd)
}

void UpdateTeamPwsInfoFubenCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 11;
  param_ = 47;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateTeamPwsInfoFubenCmd::~UpdateTeamPwsInfoFubenCmd() {
  // @@protoc_insertion_point(destructor:Cmd.UpdateTeamPwsInfoFubenCmd)
  SharedDtor();
}

void UpdateTeamPwsInfoFubenCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateTeamPwsInfoFubenCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateTeamPwsInfoFubenCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateTeamPwsInfoFubenCmd_descriptor_;
}

const UpdateTeamPwsInfoFubenCmd& UpdateTeamPwsInfoFubenCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FuBenCmd_2eproto();
  return *default_instance_;
}

UpdateTeamPwsInfoFubenCmd* UpdateTeamPwsInfoFubenCmd::default_instance_ = NULL;

UpdateTeamPwsInfoFubenCmd* UpdateTeamPwsInfoFubenCmd::New() const {
  return new UpdateTeamPwsInfoFubenCmd;
}

void UpdateTeamPwsInfoFubenCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 11;
    param_ = 47;
  }
  teaminfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateTeamPwsInfoFubenCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UpdateTeamPwsInfoFubenCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.FuBenParam param = 2 [default = TEAMPWS_UPDATE_INFO];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::FuBenParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::FuBenParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_teaminfo;
        break;
      }

      // repeated .Cmd.TeamPwsInfoSyncData teaminfo = 3;
      case 3: {
        if (tag == 26) {
         parse_teaminfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_teaminfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_teaminfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UpdateTeamPwsInfoFubenCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UpdateTeamPwsInfoFubenCmd)
  return false;
#undef DO_
}

void UpdateTeamPwsInfoFubenCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UpdateTeamPwsInfoFubenCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.FuBenParam param = 2 [default = TEAMPWS_UPDATE_INFO];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.TeamPwsInfoSyncData teaminfo = 3;
  for (int i = 0; i < this->teaminfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->teaminfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UpdateTeamPwsInfoFubenCmd)
}

::google::protobuf::uint8* UpdateTeamPwsInfoFubenCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UpdateTeamPwsInfoFubenCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.FuBenParam param = 2 [default = TEAMPWS_UPDATE_INFO];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.TeamPwsInfoSyncData teaminfo = 3;
  for (int i = 0; i < this->teaminfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->teaminfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UpdateTeamPwsInfoFubenCmd)
  return target;
}

int UpdateTeamPwsInfoFubenCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.FuBenParam param = 2 [default = TEAMPWS_UPDATE_INFO];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.TeamPwsInfoSyncData teaminfo = 3;
  total_size += 1 * this->teaminfo_size();
  for (int i = 0; i < this->teaminfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->teaminfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateTeamPwsInfoFubenCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateTeamPwsInfoFubenCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateTeamPwsInfoFubenCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateTeamPwsInfoFubenCmd::MergeFrom(const UpdateTeamPwsInfoFubenCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  teaminfo_.MergeFrom(from.teaminfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateTeamPwsInfoFubenCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateTeamPwsInfoFubenCmd::CopyFrom(const UpdateTeamPwsInfoFubenCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateTeamPwsInfoFubenCmd::IsInitialized() const {

  return true;
}

void UpdateTeamPwsInfoFubenCmd::Swap(UpdateTeamPwsInfoFubenCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    teaminfo_.Swap(&other->teaminfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateTeamPwsInfoFubenCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateTeamPwsInfoFubenCmd_descriptor_;
  metadata.reflection = UpdateTeamPwsInfoFubenCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SelectTeamPwsMagicFubenCmd::kCmdFieldNumber;
const int SelectTeamPwsMagicFubenCmd::kParamFieldNumber;
const int SelectTeamPwsMagicFubenCmd::kMagicidFieldNumber;
#endif  // !_MSC_VER

SelectTeamPwsMagicFubenCmd::SelectTeamPwsMagicFubenCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SelectTeamPwsMagicFubenCmd)
}

void SelectTeamPwsMagicFubenCmd::InitAsDefaultInstance() {
}

SelectTeamPwsMagicFubenCmd::SelectTeamPwsMagicFubenCmd(const SelectTeamPwsMagicFubenCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SelectTeamPwsMagicFubenCmd)
}

void SelectTeamPwsMagicFubenCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 11;
  param_ = 45;
  magicid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SelectTeamPwsMagicFubenCmd::~SelectTeamPwsMagicFubenCmd() {
  // @@protoc_insertion_point(destructor:Cmd.SelectTeamPwsMagicFubenCmd)
  SharedDtor();
}

void SelectTeamPwsMagicFubenCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SelectTeamPwsMagicFubenCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SelectTeamPwsMagicFubenCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SelectTeamPwsMagicFubenCmd_descriptor_;
}

const SelectTeamPwsMagicFubenCmd& SelectTeamPwsMagicFubenCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FuBenCmd_2eproto();
  return *default_instance_;
}

SelectTeamPwsMagicFubenCmd* SelectTeamPwsMagicFubenCmd::default_instance_ = NULL;

SelectTeamPwsMagicFubenCmd* SelectTeamPwsMagicFubenCmd::New() const {
  return new SelectTeamPwsMagicFubenCmd;
}

void SelectTeamPwsMagicFubenCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 11;
    param_ = 45;
    magicid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SelectTeamPwsMagicFubenCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SelectTeamPwsMagicFubenCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.FuBenParam param = 2 [default = TEAMPWS_SELECT_MAGIC];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::FuBenParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::FuBenParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_magicid;
        break;
      }

      // required uint32 magicid = 3;
      case 3: {
        if (tag == 24) {
         parse_magicid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &magicid_)));
          set_has_magicid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SelectTeamPwsMagicFubenCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SelectTeamPwsMagicFubenCmd)
  return false;
#undef DO_
}

void SelectTeamPwsMagicFubenCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SelectTeamPwsMagicFubenCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.FuBenParam param = 2 [default = TEAMPWS_SELECT_MAGIC];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // required uint32 magicid = 3;
  if (has_magicid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->magicid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SelectTeamPwsMagicFubenCmd)
}

::google::protobuf::uint8* SelectTeamPwsMagicFubenCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SelectTeamPwsMagicFubenCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.FuBenParam param = 2 [default = TEAMPWS_SELECT_MAGIC];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // required uint32 magicid = 3;
  if (has_magicid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->magicid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SelectTeamPwsMagicFubenCmd)
  return target;
}

int SelectTeamPwsMagicFubenCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.FuBenParam param = 2 [default = TEAMPWS_SELECT_MAGIC];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // required uint32 magicid = 3;
    if (has_magicid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->magicid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SelectTeamPwsMagicFubenCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SelectTeamPwsMagicFubenCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SelectTeamPwsMagicFubenCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SelectTeamPwsMagicFubenCmd::MergeFrom(const SelectTeamPwsMagicFubenCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_magicid()) {
      set_magicid(from.magicid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SelectTeamPwsMagicFubenCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelectTeamPwsMagicFubenCmd::CopyFrom(const SelectTeamPwsMagicFubenCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectTeamPwsMagicFubenCmd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  return true;
}

void SelectTeamPwsMagicFubenCmd::Swap(SelectTeamPwsMagicFubenCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(magicid_, other->magicid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SelectTeamPwsMagicFubenCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SelectTeamPwsMagicFubenCmd_descriptor_;
  metadata.reflection = SelectTeamPwsMagicFubenCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InviteSummonBossFubenCmd::kCmdFieldNumber;
const int InviteSummonBossFubenCmd::kParamFieldNumber;
#endif  // !_MSC_VER

InviteSummonBossFubenCmd::InviteSummonBossFubenCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.InviteSummonBossFubenCmd)
}

void InviteSummonBossFubenCmd::InitAsDefaultInstance() {
}

InviteSummonBossFubenCmd::InviteSummonBossFubenCmd(const InviteSummonBossFubenCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.InviteSummonBossFubenCmd)
}

void InviteSummonBossFubenCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 11;
  param_ = 40;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InviteSummonBossFubenCmd::~InviteSummonBossFubenCmd() {
  // @@protoc_insertion_point(destructor:Cmd.InviteSummonBossFubenCmd)
  SharedDtor();
}

void InviteSummonBossFubenCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InviteSummonBossFubenCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InviteSummonBossFubenCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InviteSummonBossFubenCmd_descriptor_;
}

const InviteSummonBossFubenCmd& InviteSummonBossFubenCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FuBenCmd_2eproto();
  return *default_instance_;
}

InviteSummonBossFubenCmd* InviteSummonBossFubenCmd::default_instance_ = NULL;

InviteSummonBossFubenCmd* InviteSummonBossFubenCmd::New() const {
  return new InviteSummonBossFubenCmd;
}

void InviteSummonBossFubenCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 11;
    param_ = 40;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InviteSummonBossFubenCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.InviteSummonBossFubenCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.FuBenParam param = 2 [default = INVITE_SUMMON_DEADBOSS];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::FuBenParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::FuBenParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.InviteSummonBossFubenCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.InviteSummonBossFubenCmd)
  return false;
#undef DO_
}

void InviteSummonBossFubenCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.InviteSummonBossFubenCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.FuBenParam param = 2 [default = INVITE_SUMMON_DEADBOSS];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.InviteSummonBossFubenCmd)
}

::google::protobuf::uint8* InviteSummonBossFubenCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.InviteSummonBossFubenCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.FuBenParam param = 2 [default = INVITE_SUMMON_DEADBOSS];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.InviteSummonBossFubenCmd)
  return target;
}

int InviteSummonBossFubenCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.FuBenParam param = 2 [default = INVITE_SUMMON_DEADBOSS];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InviteSummonBossFubenCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InviteSummonBossFubenCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InviteSummonBossFubenCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InviteSummonBossFubenCmd::MergeFrom(const InviteSummonBossFubenCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InviteSummonBossFubenCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InviteSummonBossFubenCmd::CopyFrom(const InviteSummonBossFubenCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InviteSummonBossFubenCmd::IsInitialized() const {

  return true;
}

void InviteSummonBossFubenCmd::Swap(InviteSummonBossFubenCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InviteSummonBossFubenCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InviteSummonBossFubenCmd_descriptor_;
  metadata.reflection = InviteSummonBossFubenCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplySummonBossFubenCmd::kCmdFieldNumber;
const int ReplySummonBossFubenCmd::kParamFieldNumber;
const int ReplySummonBossFubenCmd::kIsfullFieldNumber;
const int ReplySummonBossFubenCmd::kAgreeFieldNumber;
const int ReplySummonBossFubenCmd::kCharidFieldNumber;
#endif  // !_MSC_VER

ReplySummonBossFubenCmd::ReplySummonBossFubenCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ReplySummonBossFubenCmd)
}

void ReplySummonBossFubenCmd::InitAsDefaultInstance() {
}

ReplySummonBossFubenCmd::ReplySummonBossFubenCmd(const ReplySummonBossFubenCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ReplySummonBossFubenCmd)
}

void ReplySummonBossFubenCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 11;
  param_ = 41;
  isfull_ = false;
  agree_ = false;
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplySummonBossFubenCmd::~ReplySummonBossFubenCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ReplySummonBossFubenCmd)
  SharedDtor();
}

void ReplySummonBossFubenCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReplySummonBossFubenCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplySummonBossFubenCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplySummonBossFubenCmd_descriptor_;
}

const ReplySummonBossFubenCmd& ReplySummonBossFubenCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FuBenCmd_2eproto();
  return *default_instance_;
}

ReplySummonBossFubenCmd* ReplySummonBossFubenCmd::default_instance_ = NULL;

ReplySummonBossFubenCmd* ReplySummonBossFubenCmd::New() const {
  return new ReplySummonBossFubenCmd;
}

void ReplySummonBossFubenCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReplySummonBossFubenCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(charid_, agree_);
    cmd_ = 11;
    param_ = 41;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplySummonBossFubenCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ReplySummonBossFubenCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.FuBenParam param = 2 [default = REPLY_SUMMON_DEADBOSS];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::FuBenParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::FuBenParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_isfull;
        break;
      }

      // optional bool isfull = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_isfull:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfull_)));
          set_has_isfull();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_agree;
        break;
      }

      // optional bool agree = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_agree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &agree_)));
          set_has_agree();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 5;
      case 5: {
        if (tag == 40) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ReplySummonBossFubenCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ReplySummonBossFubenCmd)
  return false;
#undef DO_
}

void ReplySummonBossFubenCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ReplySummonBossFubenCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.FuBenParam param = 2 [default = REPLY_SUMMON_DEADBOSS];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional bool isfull = 3 [default = false];
  if (has_isfull()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isfull(), output);
  }

  // optional bool agree = 4 [default = false];
  if (has_agree()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->agree(), output);
  }

  // optional uint64 charid = 5;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ReplySummonBossFubenCmd)
}

::google::protobuf::uint8* ReplySummonBossFubenCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ReplySummonBossFubenCmd)
  // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.FuBenParam param = 2 [default = REPLY_SUMMON_DEADBOSS];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional bool isfull = 3 [default = false];
  if (has_isfull()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isfull(), target);
  }

  // optional bool agree = 4 [default = false];
  if (has_agree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->agree(), target);
  }

  // optional uint64 charid = 5;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ReplySummonBossFubenCmd)
  return target;
}

int ReplySummonBossFubenCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = FUBEN_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.FuBenParam param = 2 [default = REPLY_SUMMON_DEADBOSS];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional bool isfull = 3 [default = false];
    if (has_isfull()) {
      total_size += 1 + 1;
    }

    // optional bool agree = 4 [default = false];
    if (has_agree()) {
      total_size += 1 + 1;
    }

    // optional uint64 charid = 5;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplySummonBossFubenCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplySummonBossFubenCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplySummonBossFubenCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplySummonBossFubenCmd::MergeFrom(const ReplySummonBossFubenCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_isfull()) {
      set_isfull(from.isfull());
    }
    if (from.has_agree()) {
      set_agree(from.agree());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplySummonBossFubenCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplySummonBossFubenCmd::CopyFrom(const ReplySummonBossFubenCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplySummonBossFubenCmd::IsInitialized() const {

  return true;
}

void ReplySummonBossFubenCmd::Swap(ReplySummonBossFubenCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(isfull_, other->isfull_);
    std::swap(agree_, other->agree_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplySummonBossFubenCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplySummonBossFubenCmd_descriptor_;
  metadata.reflection = ReplySummonBossFubenCmd_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

// @@protoc_insertion_point(global_scope)
