// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RegionCmd.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RegionCmd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Cmd {

namespace {

const ::google::protobuf::Descriptor* RegistRegionCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegistRegionCmd_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RegionParam_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_RegionCmd_2eproto() {
  protobuf_AddDesc_RegionCmd_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "RegionCmd.proto");
  GOOGLE_CHECK(file != NULL);
  RegistRegionCmd_descriptor_ = file->message_type(0);
  static const int RegistRegionCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistRegionCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistRegionCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistRegionCmd, zoneid_),
  };
  RegistRegionCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegistRegionCmd_descriptor_,
      RegistRegionCmd::default_instance_,
      RegistRegionCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistRegionCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistRegionCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegistRegionCmd));
  RegionParam_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_RegionCmd_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegistRegionCmd_descriptor_, &RegistRegionCmd::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_RegionCmd_2eproto() {
  delete RegistRegionCmd::default_instance_;
  delete RegistRegionCmd_reflection_;
}

void protobuf_AddDesc_RegionCmd_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Cmd::protobuf_AddDesc_xCmd_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017RegionCmd.proto\022\003Cmd\032\nxCmd.proto\"\204\001\n\017R"
    "egistRegionCmd\022*\n\003cmd\030\001 \001(\0162\014.Cmd.Comman"
    "d:\017REGION_PROTOCMD\0222\n\005param\030\002 \001(\0162\020.Cmd."
    "RegionParam:\021REGIST_REGION_CMD\022\021\n\006zoneid"
    "\030\003 \001(\r:\0010*$\n\013RegionParam\022\025\n\021REGIST_REGIO"
    "N_CMD\020\001", 207);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RegionCmd.proto", &protobuf_RegisterTypes);
  RegistRegionCmd::default_instance_ = new RegistRegionCmd();
  RegistRegionCmd::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RegionCmd_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RegionCmd_2eproto {
  StaticDescriptorInitializer_RegionCmd_2eproto() {
    protobuf_AddDesc_RegionCmd_2eproto();
  }
} static_descriptor_initializer_RegionCmd_2eproto_;
const ::google::protobuf::EnumDescriptor* RegionParam_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegionParam_descriptor_;
}
bool RegionParam_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int RegistRegionCmd::kCmdFieldNumber;
const int RegistRegionCmd::kParamFieldNumber;
const int RegistRegionCmd::kZoneidFieldNumber;
#endif  // !_MSC_VER

RegistRegionCmd::RegistRegionCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.RegistRegionCmd)
}

void RegistRegionCmd::InitAsDefaultInstance() {
}

RegistRegionCmd::RegistRegionCmd(const RegistRegionCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.RegistRegionCmd)
}

void RegistRegionCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 206;
  param_ = 1;
  zoneid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegistRegionCmd::~RegistRegionCmd() {
  // @@protoc_insertion_point(destructor:Cmd.RegistRegionCmd)
  SharedDtor();
}

void RegistRegionCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RegistRegionCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegistRegionCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegistRegionCmd_descriptor_;
}

const RegistRegionCmd& RegistRegionCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RegionCmd_2eproto();
  return *default_instance_;
}

RegistRegionCmd* RegistRegionCmd::default_instance_ = NULL;

RegistRegionCmd* RegistRegionCmd::New() const {
  return new RegistRegionCmd;
}

void RegistRegionCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 206;
    param_ = 1;
    zoneid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegistRegionCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.RegistRegionCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = REGION_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.RegionParam param = 2 [default = REGIST_REGION_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::RegionParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::RegionParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.RegistRegionCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.RegistRegionCmd)
  return false;
#undef DO_
}

void RegistRegionCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.RegistRegionCmd)
  // optional .Cmd.Command cmd = 1 [default = REGION_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.RegionParam param = 2 [default = REGIST_REGION_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 zoneid = 3 [default = 0];
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->zoneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.RegistRegionCmd)
}

::google::protobuf::uint8* RegistRegionCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.RegistRegionCmd)
  // optional .Cmd.Command cmd = 1 [default = REGION_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.RegionParam param = 2 [default = REGIST_REGION_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 zoneid = 3 [default = 0];
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->zoneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.RegistRegionCmd)
  return target;
}

int RegistRegionCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = REGION_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.RegionParam param = 2 [default = REGIST_REGION_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 zoneid = 3 [default = 0];
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegistRegionCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegistRegionCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegistRegionCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegistRegionCmd::MergeFrom(const RegistRegionCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegistRegionCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegistRegionCmd::CopyFrom(const RegistRegionCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegistRegionCmd::IsInitialized() const {

  return true;
}

void RegistRegionCmd::Swap(RegistRegionCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegistRegionCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegistRegionCmd_descriptor_;
  metadata.reflection = RegistRegionCmd_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

// @@protoc_insertion_point(global_scope)
